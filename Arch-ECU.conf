# This is a modified ECU file based on the standard.

name: ARCH-ECU 1.0

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit
    vBooster:
        class: VerticalBooster
    hover:
        class: Hovercraft
handlers:
    unit:
        onStart:
            lua: |
                Nav = Navigator.new(system, core, unit)
                planetInfluenceThreshold = 0.6
                LandedActivated = false
                BrakeLanding = false
                BrakeIsOn = false
                targetPitch = 0
                planetInfluence = Nav.control.getClosestPlanetInfluence()
                if planetInfluence > planetInfluenceThreshold
                then
                    if Nav.axisCommandManager:getAxisCommandType(0) == 1 
                    then
                        Nav.control.cancelCurrentControlMasterMode()
                    end
                    BrakeLanding = true
                end
                if antigrav ~= nil then
                    antigrav.activate()
                    antigrav.show()
                end
    system:
        onFlush:
            lua: |
                local verticalAutoLandingSpeed = 20 --export: Vertical auto landing speec in km/h
                local power = 3
                local worldUp = vec3(construct.getWorldOrientationUp())
                local worldForward = vec3(construct.getWorldOrientationForward())
                local worldRight = vec3(construct.getWorldOrientationRight())
                local worldVertical = vec3(core.getWorldVertical())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = constructVelocity:normalize()
                -- are we in deep space or are we near a planet ?
                if planetInfluence > 0
                then
                    -- stabilize orientation along the gravity
                    if (rollPID == nil) then
                        rollPID = pid.new(0.2, 0, 10)
                        pitchPID = pid.new(8 * 0.01, 0, 8 * 0.1)
                    end
                    local yawVelocity = vec3(construct.getWorldAngularVelocity()):dot(worldUp)
                    local currentRoll = getRoll(worldVertical, worldForward, worldRight)
                    local currentPitch = -math.asin(worldForward:dot(worldVertical)) * constants.rad2deg
                    rollPID:inject(-currentRoll)
                    pitchPID:inject(-currentPitch)
                    local yawAcceleration = - power * yawVelocity
                    angularAcceleration = rollPID:get() * worldForward + pitchPID:get() * worldRight + yawAcceleration * worldUp
                else
                    -- cancel rotation
                    local worldAngularVelocity = vec3(core.getWorldAngularVelocity())
                    angularAcceleration = - power * worldAngularVelocity
                end

                if planetInfluence < planetInfluenceThreshold
                then
                    -- immobilize ship when not
                    targetVelocity = vec3()
                    stabilization =  power * (targetVelocity - constructVelocity)
                    Nav:setEngineCommand('vertical, brake, horizontal', stabilization -vec3(core.getWorldGravity()), vec3(), false)
                else
                    local longitudinalEngineTags = 'thrust analog longitudinal'
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags, axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, vec3(), 1)
                end                
                Nav:setEngineCommand('torque', vec3(), angularAcceleration)
                if BrakeLanding
                then
                    -- Brakes
                    local brakeAcceleration = -brakeInput * (3 * constructVelocity + 1 * constructVelocityDir)
                    Nav:setEngineForceCommand('brake', brakeAcceleration)
                end
        onUpdate:
            lua: |
                function getPitch(gravityDirection, forward, right)
                    local horizontalForward = gravityDirection:cross(right):normalize_inplace() -- Cross forward?
                    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg -- acos?
                    
                    if horizontalForward:cross(-forward):dot(right) < 0 then
                        pitch = -pitch
                    end -- Cross right dot forward?
                    return pitch
                end
                function hoverDetectGround()
                    local vgroundDistance = -1
                    local hgroundDistance = -1
                    if vBooster then
                        vgroundDistance = vBooster.getDistance()
                    end
                    if hover then
                        hgroundDistance = hover.getDistance()
                    end
                    if vgroundDistance ~= -1 and hgroundDistance ~= -1 then
                        if vgroundDistance < hgroundDistance then
                            return vgroundDistance
                        else
                            return hgroundDistance
                        end
                    elseif vgroundDistance ~= -1 then
                        return vgroundDistance
                    elseif hgroundDistance ~= -1 then
                        return hgroundDistance
                    else
                        return -1
                    end
                end    
                local accelThreshold = 0.1
                local speedThreshold = 0.1
                local landedGroundHeight = 0 -- export: ECU should turn off when landingGroundHeight+3 is reached.  Default is 0

                -- auto stopping mechanism when immobile and close to planet
                local accel = vec3(construct.getWorldAcceleration()):len()
                local velocity = vec3(construct.getWorldVelocity())
                local speed = velocity:len()
                local groundDistance = hoverDetectGround()
                local up = -vec3(core.getWorldVertical())
                local velMag = velocity:len()
                local vSpd = velocity:dot(up)
                local constrF = vec3(construct.getWorldOrientationForward())
                local constrR = vec3(construct.getWorldOrientationRight())
                local worldV = vec3(core.getWorldVertical())
                local pitch = getPitch(worldV, constrF, constrR)
                if BrakeIsOn then
                    brakeInput = 1
                else
                    brakeInput = 0
                end

                if BrakeLanding then
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                    Nav.axisCommandManager:setTargetGroundAltitude(500)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)
                    if groundDistance > -1 then
                        if velMag < 10 then
                            BrakeLanding = false
                            Nav.control.deployLandingGears()
                            Nav.axisCommandManager:setTargetGroundAltitude(landedGroundHeight)
                            BrakeIsOn = true
                        else
                            BrakeIsOn = true
                        end
                    elseif (velocity:normalize():dot(-up) < 0.99) then
                        BrakeIsOn = true
                    elseif vSpd < -30 then
                        BrakeIsOn = true
                    else
                        BrakeIsOn = false
                    end
                end                
                if (accel < accelThreshold
                    and speed < speedThreshold)
                    or (groundDistance > -1 and groundDistance < landedGroundHeight+3)
                then
                    unit.exit()
                end
