name: ButtonsHud - Dimencia and Archaegeo v5.42 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Changes Auto Takeoff to Vertical Takeoff.
        VertTakeOffMode = "Space" --export: (Default: "Space") Set to: "Space" = parks in space, "AGG" = turn on AGG when at 1km, "Orbit" = go directly to orbit. Must keep quotes. Any case is fine.
        VertParkingAlt = 5000 --export: (Default: 5000) Set the height above atmosphere you want to stop at when taking off vertically in space.
        PlanetHopAlt = 15000 --export: (Default: 10000) Set the distance above the planet you wish to orbit to perform a point to point orbital flight. Minimum is 10000m altitude. 
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;OrbitTargetSet=false;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitAchieved=false;AtmoEngineVertUp=false;AtmoEngineVertDn=false;SpaceEngineVertUp=false;SpaceEngineVertDn=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","VertTakeOffMode","VertParkingAlt","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=j()>0;local an=core.getAltitude()local ao=core.getElementIdList()local ap=system.getTime()local aq=nil;local ar=false;local as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local au={}local av=0;local aw=0;local ax=""local ay=true;local az={}local aA=1;local aB=0.001;local aC=ResolutionX;local aD=ResolutionY;local aE=nil;local aF=nil;local aG=nil;local aH=nil;local aI=false;local aJ=false;local aK=0;local aL=nil;local aM={}local aN={}local aO={}local aP=0;local aQ=false;local aR={}local aS={}local aT=d(1/apTickRate)*2;local aU={}local aV={}local aW={}local aX={}local aY=false;local aZ=16;local a_=0;local b0=nil;local b1=""local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=false;local bb=false;local bc=autoRollPreference;local bd=vec3(core.getWorldVelocity())local be=vec3(bd):len()local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=system.getTime()local bk=0;local bl=0;local bm=AtmoSpeedLimit;local bn=0;local bo=nil;local bp=0;local bq=0;local br=0;local bs=0;local bt=false;local bu=false;local bv=false;function LoadVariables()if dbHud_1 then local bw=dbHud_1.hasKey;if not useTheseSettings then for bx,by in pairs(a)do if bw(by)then local bz=f(dbHud_1.getStringValue(by))if bz~=nil then c(by.." "..dbHud_1.getStringValue(by))_G[by]=bz;aI=true end end end end;coroutine.yield()for bx,by in pairs(b)do if bw(by)then local bz=f(dbHud_1.getStringValue(by))if bz~=nil then c(by.." "..dbHud_1.getStringValue(by))_G[by]=bz;aI=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 elseif aI then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bA=system.getTime()if LastStartTime+180<bA then LastMaxBrakeInAtmo=0 end;if aI then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aC=ResolutionX;aD=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bc=autoRollPreference end;LastStartTime=bA;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;minimumRateOfChange=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]bm=AtmoSpeedLimit end;function CalculateFuelVolume(bB,bC)if bB>bC then bC=bB end;if ContainerOptimization>0 then bC=bC-bC*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bC=bC-bC*FuelTankOptimization*0.05 end;return bC end;function ProcessElements()local bD=fuelX~=0 and fuelY~=0;for bx in pairs(ao)do local type=l(ao[bx])if string.match(type,'^.*Space Engine$')then if string.match(tostring(core.getElementTagsById(ao[bx])),'^.*vertical.*$')then local bE=core.getElementRotationById(ao[bx])if bE[4]<0 then if utils.round(-bE[4],0.1)==0.5 then SpaceEngineVertUp=true;system.print("Space Engine Up detected")end else if utils.round(bE[4],0.1)==0.5 then SpaceEngineVertDn=true;system.print("Space Engine Down detected")end end end end;if string.match(type,'^.*Atmospheric Engine$')then if string.match(tostring(core.getElementTagsById(ao[bx])),'^.*vertical.*$')then local bE=core.getElementRotationById(ao[bx])if bE[4]<0 then if utils.round(-bE[4],0.1)==0.5 then AtmoEngineVertUp=true;system.print("Atmo Engine Up detected")end else if utils.round(bE[4],0.1)==0.5 then AtmoEngineVertDn=true;system.print("Atmo Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bF=h(ao[bx])if bF>10000 then aZ=128 elseif bF>1000 then aZ=64 elseif bF>150 then aZ=32 end end;aP=aP+h(ao[bx])if bD and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bF=h(ao[bx])local bG=m(ao[bx])local bB=0;local bH=system.getTime()if type=="Atmospheric Fuel Tank"then local bC=400;local bI=35.03;if bF>10000 then bC=51200;bI=5480 elseif bF>1300 then bC=6400;bI=988.67 elseif bF>150 then bC=1600;bI=182.67 end;bB=bG-bI;if fuelTankHandlingAtmo>0 then bC=bC+bC*fuelTankHandlingAtmo*0.2 end;bC=CalculateFuelVolume(bB,bC)aM[#aM+1]={ao[bx],core.getElementNameById(ao[bx]),bC,bI,bB,bH}end;if type=="Rocket Fuel Tank"then local bC=320;local bI=173.42;if bF>65000 then bC=40000;bI=25740 elseif bF>6000 then bC=5120;bI=4720 elseif bF>700 then bC=640;bI=886.72 end;bB=bG-bI;if fuelTankHandlingRocket>0 then bC=bC+bC*fuelTankHandlingRocket*0.1 end;bC=CalculateFuelVolume(bB,bC)aO[#aO+1]={ao[bx],core.getElementNameById(ao[bx]),bC,bI,bB,bH}end;if type=="Space Fuel Tank"then local bC=2400;local bI=182.67;if bF>10000 then bC=76800;bI=5480 elseif bF>1300 then bC=9600;bI=988.67 end;bB=bG-bI;if fuelTankHandlingSpace>0 then bC=bC+bC*fuelTankHandlingSpace*0.2 end;bC=CalculateFuelVolume(bB,bC)aN[#aN+1]={ao[bx],core.getElementNameById(ao[bx]),bC,bI,bB,bH}end end end end;function SetupChecks()if gyro~=nil then aq=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;local bJ=j()if door and(bJ>0 or bJ==0 and an<10000)then for _,by in pairs(door)do by.toggle()end end;if switch then for _,by in pairs(switch)do by.toggle()end end;if forcefield and(bJ>0 or bJ==0 and an<10000)then for _,by in pairs(forcefield)do by.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bK=AboveGroundLevel()if bK~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bf)if bf==0 and not M then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if am and bK~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=am end;function ConvertResolutionX(by)if ResolutionX==1920 then return by else return round(ResolutionX*by/1920,0)end end;function ConvertResolutionY(by)if ResolutionY==1080 then return by else return round(ResolutionY*by/1080,0)end end;function RefreshLastMaxBrake(bL,bM)if bL==nil then bL=core.g()end;bL=round(bL,5)local bN=j()if bM~=nil and bM or(aL==nil or aL~=bL)then local bd=core.getVelocity()local bO=vec3(bd):len()local bP=f(unit.getData()).maxBrake;if bP~=nil and bP>0 and am then bP=bP/utils.clamp(bO/100,0.1,1)bP=bP/bN;if bN>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bP)/2 else LastMaxBrakeInAtmo=bP end end end;if bP~=nil and bP>0 then LastMaxBrake=bP end;aL=bL end end;function MakeButton(bQ,bR,bS,bT,bU,bV,bW,bX,bY)local bZ={enableName=bQ,disableName=bR,width=bS,height=bT,x=bU,y=bV,toggleVar=bW,toggleFunction=bX,drawCondition=bY,hovered=false}table.insert(az,bZ)return bZ end;function UpdateAtlasLocationsList()AtlasOrdered={}for bx,by in pairs(b0[0])do table.insert(AtlasOrdered,{name=by.name,index=bx})end;local function b_(c0,c1)return c0.name<c1.name end;table.sort(AtlasOrdered,b_)end;function AddLocationsToAtlas()for bx,by in pairs(SavedLocations)do table.insert(b0[0],by)end;UpdateAtlasLocationsList()end;function float_eq(c2,c3)if c2==0 then return math.abs(c3)<1e-09 end;if c3==0 then return math.abs(c2)<1e-09 end;return math.abs(c2-c3)<math.max(math.abs(c2),math.abs(c3))*epsilon end;function zeroConvertToMapPosition(c4,c5)local c6=vec3(c5)if c4.bodyId==0 then return setmetatable({latitude=c6.x,longitude=c6.y,altitude=c6.z,bodyId=0,systemId=c4.planetarySystemId},MapPosition)end;local c7=c6-c4.center;local ac=c7:len()local c8=ac-c4.radius;local c9=0;local ca=0;if not float_eq(ac,0)then local cb=math.atan(c7.y,c7.x)ca=cb>=0 and cb or 2*math.pi+cb;c9=math.pi/2-math.acos(c7.z/ac)end;return setmetatable({latitude=math.deg(c9),longitude=math.deg(ca),altitude=c8,bodyId=c4.bodyId,systemId=c4.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cc)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cd='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ce,cf,c9,ca,c8=string.match(cc,cd)if ce=="0"and cf=="0"then return vec3(tonumber(c9),tonumber(ca),tonumber(c8))end;ca=math.rad(ca)c9=math.rad(c9)local planet=b0[tonumber(ce)][tonumber(cf)]local cg=math.cos(c9)local ch=vec3(cg*math.cos(ca),cg*math.sin(ca),math.sin(c9))return planet.center+(planet.radius+c8)*ch end;function AddNewLocationByWaypoint(ci,planet,cc)if dbHud_1 then local cj={}local position=zeroConvertToWorldCoordinates(cc)if planet.name=="Space"then cj={position=position,name=ci,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bJ=false;if planet.hasAtmosphere then bJ=true else bJ=false end;cj={position=position,name=ci,atmosphere=bJ,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cj;table.insert(b0[0],cj)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local ck=planet.name..". "..#SavedLocations;if radar_1 then local cl,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cl~=nil and cl~=""then ck=ck.." "..radar_1.getConstructName(cl)end end;local cj={}local bJ=false;if planet.hasAtmosphere then bJ=true end;cj={position=position,name=ck,atmosphere=bJ,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cj;table.insert(b0[0],cj)UpdateAtlasLocationsList()W="Location saved as "..ck else W="Databank must be installed to save locations"end end;function UpdatePosition(cm)local cn=-1;local cj;for bx,by in pairs(SavedLocations)do if by.name and by.name==CustomTarget.name then cn=bx;break end end;if cn~=-1 then local co;if cm~=nil then cj={position=SavedLocations[cn].position,name=cm,atmosphere=SavedLocations[cn].atmosphere,planetname=SavedLocations[cn].planetname,gravity=SavedLocations[cn].gravity}else cj={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cn].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cn]=cj;cn=-1;for bx,by in pairs(b0[0])do if by.name and by.name==CustomTarget.name then cn=bx end end;if cn>-1 then b0[0][cn]=cj end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cn=-1;for bx,by in pairs(b0[0])do if by.name and by.name==CustomTarget.name then cn=bx end end;if cn>-1 then table.remove(b0[0],cn)end;cn=-1;for bx,by in pairs(SavedLocations)do if by.name and by.name==CustomTarget.name then W=by.name.." saved location cleared"cn=bx;break end end;if cn~=-1 then table.remove(SavedLocations,cn)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cp)cp[#cp+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;function ToggleWidgets()if ay then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ay=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ay=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cq,cr,bU,bV,bS,bT)if cq>bU and cq<bU+bS and cr>bV and cr<bV+bT then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=an+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if OrbitAchieved then CancelIntoOrbit=false else CancelIntoOrbit=true end;IntoOrbit=false;bt=false;br=nil;bs=nil;OrbitTargetPlanet=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;OrbitAchieved=false;CancelIntoOrbit=false;bt=false;br=nil;bs=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end else W="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cs=vec3(core.getConstructWorldOrientationForward())local ct=vec3(core.getConstructWorldOrientationRight())local cu=vec3(core.getWorldVertical())local cv=getPitch(cu,cs,ct)LockPitch=cv;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bA=system.getTime()if bA-bl<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bl=-1;if AltitudeHold then return end end else bl=bA end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bc=true;LockPitch=nil;if hoverDetectGround()==-1 or not am or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bl>-1 then HoldAltitude=an end;if not ah and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=an+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ah then HoldAltitude=100000 end else bc=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bc=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah then UpdateAutopilotTarget()local cw=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if an>100000 or an==0 then Autopilot=true else ag=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false else ah=true;ToggleAltitudeHold()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=an;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bc=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;bc=autoRollPreference;ag=false;ai=false;a8=0 end end;function CheckDamage(cp)local cx=0;ax=""local cy=aP;local cz=0;local cA=0;local cB=0;local cC=0;local cD=""for bx in pairs(ao)do local bF=0;local cE=0;cE=h(ao[bx])bF=k(ao[bx])cz=cz+bF;if bF<cE then if bF==0 then cB=cB+1 else cA=cA+1 end;if aQ and#au==0 then position=vec3(core.getElementPositionById(ao[bx]))local bU=position.x-aZ;local bV=position.y-aZ;local cF=position.z-aZ;table.insert(au,core.spawnArrowSticker(bU,bV,cF+1,"down"))table.insert(au,core.spawnArrowSticker(bU,bV,cF+1,"down"))core.rotateSticker(au[2],0,0,90)table.insert(au,core.spawnArrowSticker(bU+1,bV,cF,"north"))table.insert(au,core.spawnArrowSticker(bU+1,bV,cF,"north"))core.rotateSticker(au[4],90,90,0)table.insert(au,core.spawnArrowSticker(bU-1,bV,cF,"south"))table.insert(au,core.spawnArrowSticker(bU-1,bV,cF,"south"))core.rotateSticker(au[6],90,-90,0)table.insert(au,core.spawnArrowSticker(bU,bV-1,cF,"east"))table.insert(au,core.spawnArrowSticker(bU,bV-1,cF,"east"))core.rotateSticker(au[8],90,0,90)table.insert(au,core.spawnArrowSticker(bU,bV+1,cF,"west"))table.insert(au,core.spawnArrowSticker(bU,bV+1,cF,"west"))core.rotateSticker(au[10],-90,0,90)table.insert(au,ao[bx])end elseif aQ and#au>0 and au[11]==ao[bx]then for cG in pairs(au)do core.deleteSticker(au[cG])end;au={}end end;cx=d(cz/cy*100)if cx<100 then cp[#cp+1]=[[<g class="pbright txt">]]cC=d(cx*2.55)cD=e("rgb(%d,%d,%d)",255-cC,cC,0)if cx<100 then cp[#cp+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cD,cx)if cB>0 then cp[#cp+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cD,cB,cA)elseif cA>0 then cp[#cp+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cD,cA)end end;cp[#cp+1]=[[<\g>]]end end;function DrawCursorLine(cp)local cH=d(utils.clamp(ac/(aC/4)*255,0,255))cp[#cp+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(t+0.5)+cH,d(v+0.5)-cH,d(u+0.5)-cH)end;function getPitch(cI,cJ,c1)local cK=cI:cross(c1):normalize_inplace()local cv=math.acos(utils.clamp(cK:dot(-cJ),-1,1))*constants.rad2deg;if cK:cross(-cJ):dot(c1)<0 then cv=-cv end;return cv end;local function cL(cM,cN,cO)cN=cN:project_on_plane(cM)cO=cO:project_on_plane(cM)return p(cN:cross(cO):dot(cM),cN:dot(cO))end;function clearAll()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;ag=false;ah=false;J=false;bc=autoRollPreference;VectorToTarget=false;TurnBurn=false;aq=false;LockPitch=nil else ak=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ab=5 else if aJ then for bx,by in pairs(a)do dbHud_1.setStringValue(by,g(nil))end;for bx,by in pairs(b)do if by~="SavedLocations"then dbHud_1.setStringValue(by,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ab=5;aJ=false;aI=false;a7=true else W="Press ALT-7 again to confirm wipe of ALL data"aJ=true end end end;function CheckButtons()for _,by in pairs(az)do if by.hovered then if not by.drawCondition or by.drawCondition()then by.toggleFunction()end;by.hovered=false end end end;function SetButtonContains()local bU=a9+aC/2;local bV=aa+aD/2;for _,by in pairs(az)do by.hovered=Contains(bU,bV,by.x,by.y,by.width,by.height)end end;function DrawButton(cp,cP,hover,bU,bV,cQ,cR,cS,cT,cU,cV)if type(cU)=="function"then cU=cU()end;if type(cV)=="function"then cV=cV()end;cp[#cp+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bU,bV,cQ,cR)if cP then cp[#cp+1]=e("%s'",cS)else cp[#cp+1]=cT end;if hover then cp[#cp+1]=" style='stroke:white; stroke-width:2'"else cp[#cp+1]=" style='stroke:black; stroke-width:1'"end;cp[#cp+1]="></rect>"cp[#cp+1]=e("<text x='%f' y='%f' font-size='24' fill='",bU+cQ/2,bV+cR/2+5)if cP then cp[#cp+1]="black"else cp[#cp+1]="white"end;cp[#cp+1]="' text-anchor='middle' font-family='Montserrat'>"if cP then cp[#cp+1]=e("%s</text>",cU)else cp[#cp+1]=e("%s</text>",cV)end end;function DrawButtons(cp)local cW="rgb(50,50,50)'"local cX="rgb(210,200,200)"local cY=DrawButton;for _,by in pairs(az)do local bR=by.disableName;local bQ=by.enableName;if type(bR)=="function"then bR=bR()end;if type(bQ)=="function"then bQ=bQ()end;if not by.drawCondition or by.drawCondition()then cY(cp,by.toggleVar(),by.hovered,by.x,by.y,by.width,by.height,cX,cW,bR,bQ)end end end;function DrawTank(cp,aY,bU,cZ,c_,d0,d1,d2)local d3=1;local d4=2;local d5=3;local d6=4;local d7=5;local d8=6;local d9=""local da=0;local db=fuelY;local dc=fuelY+10;if o()==1 and not RemoteHud then db=db-50;dc=dc-50 end;cp[#cp+1]=[[<g class="pdim txtfuel">]]if c_=="ATMO"then d9="atmofueltank"elseif c_=="SPACE"then d9="spacefueltank"else d9="rocketfueltank"end;da=_G[d9 .."_size"]if#d0>0 then for i=1,#d0 do local ck=string.sub(d0[i][d4],1,12)local dd=0;for cG=1,da do if d0[i][d4]==f(unit[d9 .."_"..cG].getData()).name then dd=cG;break end end;if aY or d1[i]==nil or d2[i]==nil then local de=0;local df=0;local dg=0;local dh=0;local bH=system.getTime()if dd~=0 then d2[i]=f(unit[d9 .."_"..dd].getData()).percentage;d1[i]=f(unit[d9 .."_"..dd].getData()).timeLeft;if d1[i]=="n/a"then d1[i]=0 end else dg=m(d0[i][d3])-d0[i][d6]de=d0[i][d5]d2[i]=d(0.5+dg*100/de)df=d0[i][d7]dh=d0[i][d8]if df<=dg then d1[i]=0 else d1[i]=d(0.5+dg/((df-dg)/(bH-dh)))end;d0[i][d7]=dg;d0[i][d8]=bH end end;if ck==cZ then ck=e("%s %d",c_,i)end;if dd==0 then ck=ck.." *"end;local di;if d1[i]==0 then di="n/a"else di=FormatTimeString(d1[i])end;if d2[i]~=nil then local cC=d(d2[i]*2.55)local cD=e("rgb(%d,%d,%d)",255-cC,cC,0)local dj=""if di~="n/a"and d1[i]<120 or d2[i]<5 then if aY then dj=[[class="red"]]end end;cp[#cp+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bU,db,dj,ck,bU,dc,cD,d2[i],di)db=db+30;dc=dc+30 end end end;cp[#cp+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bd)bd=vec3(bd)local cv=-math.deg(math.atan(bd.y,bd.z))+180;cv=cv-90;if cv<0 then cv=360+cv end;if cv>180 then cv=-180+cv-180 end;return-cv end;function getRelativeYaw(bd)bd=vec3(bd)local dk=math.deg(math.atan(bd.y,bd.x))-90;if dk<-180 then dk=360+dk end;return dk end;function AlignToWorldVector(dl,dm,dn)if not am or not bi or aj~=-1 or be<I then local dp=dn;if dp==nil then dp=DampingMultiplier end;if dm==nil then dm=aB end;dl=vec3(dl):normalize()local dq=vec3(core.getConstructWorldOrientationForward())-dl;local dr=-getMagnitudeInDirection(dq,core.getConstructWorldOrientationRight())*aA;local ds=-getMagnitudeInDirection(dq,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dr/2 end;if aw==0 then aw=ds/2 end;if math.abs(dr)<0.1 then P=P-dr*2 else P=P-(dr+(dr-av)*dp)end;if math.abs(ds)<0.1 then O=O+ds*2 else O=O+ds+(ds-aw)*dp end;av=dr;aw=ds;if math.abs(dr)<dm and math.abs(ds)<dm then return true end;return false elseif bi and aj==-1 then dl=vec3(core.getWorldVelocity())local dp=dn;if dp==nil then dp=DampingMultiplier end;if dm==nil then dm=aB end;dl=vec3(dl):normalize()local dq=vec3(core.getConstructWorldOrientationForward())-dl;local dr=-getMagnitudeInDirection(dq,core.getConstructWorldOrientationRight())*aA;local ds=-getMagnitudeInDirection(dq,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dr/2 end;if aw==0 then aw=ds/2 end;if math.abs(dr)<0.1 then P=P-dr*5 else P=P-(dr+(dr-av)*dp)end;if math.abs(ds)<0.1 then O=O+ds*5 else O=O+ds+(ds-aw)*dp end;av=dr;aw=ds;if math.abs(dr)<dm and math.abs(ds)<dm then return true end;return false end end;function getAPEnableName()local ck=AutopilotTargetName;if ck==nil then local dt,du=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())ck=CustomTarget.name.." "..dt..du end;if ck==nil then ck="None"end;return"Engage Autopilot: "..ck end;function getAPDisableName()local ck=AutopilotTargetName;if ck==nil then ck=CustomTarget.name end;if ck==nil then ck="None"end;return"Disable Autopilot: "..ck end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;bc=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ab=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bc=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;bc=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dv,dw=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bm.." Target Altitude: "..dv..dw end;AutoTakeoff=false end;function SetupButtons()local dx=50;local dy=260;local dz=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dy,dx,aC/2-dy/2,aD/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dy,dx,aC/2-dy/2-50-dz.width,aD/2-dx+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dy,dx,aC/2-dy/2+dz.width+50,aD/2-dx+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dA=MakeButton(getAPEnableName,getAPDisableName,600,60,aC/2-600/2,aD/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dA.height,dA.x+dA.width+30,dA.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dA.height,dA.x+dA.width+30,dA.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dA.height,dA.x-200-30,dA.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dx=60;dy=300;local bU=10;local bV=aD/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dy,dx,bU,bV,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dy,dx,bU+dy+20,bV,function()return AltitudeHold end,ToggleAltitudeHold)bV=bV+dx+20;MakeButton("Engage Autoland","Disable Autoland",dy,dx,bU,bV,function()return AutoLanding end,ToggleAutoLanding)local dB,dC,dD;if VertTakeOffEngine then dB="Engage Vertical Takeoff"dC="Disable Vertical Takeoff"dD=VertTakeOff else dB="Engage Auto Takeoff"dC="Disable Auto Takeoff"dD=AutoTakeoff end;MakeButton(dB,dC,dy,dx,bU+dy+20,bV,function()return dD end,ToggleAutoTakeoff)bV=bV+dx+20;MakeButton("Show Orbit Display","Hide Orbit Display",dy,dx,bU,bV,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dy,dx,bU+dy+20,bV,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)bV=bV+dx+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dy,dx,bU,bV,function()return Reentry end,function()ag=true;ProgradeToggle()end,function()return an>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dy,dx,bU+dy+20,bV,function()return Reentry end,BeginReentry,function()return an>ReentryAltitude end)bV=bV+dx+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dy,dx,bU,bV,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dy,dx,bU+dy+20,bV,function()return aQ end,function()aQ=not aQ;if aQ then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)bV=bV+dx+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dy,dx,bU,bV,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bV=bV+dx+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dy*2,dx,bU,bV,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dE=Nav.axisCommandManager:getAxisCommandType(0)local dF="TRAVEL"if dE==1 then dF="CRUISE"end;if Autopilot then dF="AUTOPILOT"end;return dF end;function UpdateHud(cp)local c8=an;local bd=core.getVelocity()local bO=vec3(bd):len()local cu=vec3(core.getWorldVertical())local cs=vec3(core.getConstructWorldOrientationForward())local ct=vec3(core.getConstructWorldOrientationRight())local dG=vec3(core.getConstructWorldOrientationUp())local dH=getRoll(cu,cs,ct)local dI=dH/180*math.pi;local dJ=math.cos(dI)local dK=math.sin(dI)local cv=getPitch(cu,cs,ct*dJ+dG*dK)local dL=dH;local dM=cv;local dN=j()local dO=d(unit.getThrottle())local dP=bO*3.6;local dQ=unit.getAxisCommandValue(0)local dR=ConvertResolutionX(1770)local dS=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dQ=z;dO=z*100 end;local dF=GetFlightStyle()local dT="ROLL"local dU=unit.getClosestPlanetInfluence()>0;if dO==nil then dO=0 end;if not dU then if bO>5 then cv=getRelativePitch(bd)dH=getRelativeYaw(bd)else cv=0;dH=0 end;dT="YAW"end;if x>50000 and not am then local dV;if x>200000 then dV=round(x/200000,2).." su"else dV=round(x/1000,1).." km"end;cp[#cp+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dR,dS,dV)end;cp[#cp+1]=ae;cp[#cp+1]=ax;cp[#cp+1]=ad;if a_%aT==0 then aY=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cp,aY,fuelX,"Atmospheric ","ATMO",aM,aW,aX)DrawTank(cp,aY,fuelX+100,"Space fuel t","SPACE",aN,aU,aV)DrawTank(cp,aY,fuelX+200,"Rocket fuel ","ROCKET",aO,aR,aS)end;if aY then aY=false;a_=0 end;a_=a_+1;DrawVerticalSpeed(cp,c8)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dU then DrawRollLines(cp,centerX,centerY,dL,dT,dU)DrawArtificialHorizon(cp,dM,dL,centerX,centerY,dU,d(getRelativeYaw(bd)),bO)else DrawRollLines(cp,centerX,centerY,dH,dT,dU)DrawArtificialHorizon(cp,cv,dH,centerX,centerY,dU,d(dH),bO)end;DrawAltitudeDisplay(cp,c8,dU)DrawPrograde(cp,bd,bO,centerX,centerY)end end;DrawThrottle(cp,dF,dO,dQ)DrawSpeed(cp,dP)DrawWarnings(cp)DisplayOrbitScreen(cp)if screen_2 then local cc=vec3(core.getConstructWorldPos())local bU=960+cc.x/b2;local bV=450+cc.y/b3;screen_2.moveContent(b4,(bU-80)/19.2,(bV-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cp)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local dW=as;local dX=at;local dY=as;local dZ=at;if IsInFreeLook()and not brightHud then dW=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]dX=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cp[#cp+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dW,dW,dY,dY,dX,dX,dZ,dZ,ResolutionX,ResolutionY)end;function HUDEpilogue(cp)cp[#cp+1]="</svg>"end;function DrawSpeed(cp,dP)local d_=throtPosY-10;local e0=throtPosX+10;cp[#cp+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d_=75 end;cp[#cp+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e0,d_,d(dP))end;function DrawOdometer(cp,a5,TotalDistanceTravelled,dF,a6,dN)local e1=ConvertResolutionX(1240)local e2=ConvertResolutionY(55)local e3=e2+10;local dN=j()local bL=core.g()local e4=0;local e5=0;local e6=0;RefreshLastMaxBrake(bL)if am then e6=LastMaxBrakeInAtmo else e6=LastMaxBrake end;maxThrust=Nav:maxForceForward()aK=n()if not ShowOdometer then return end;local e7=vec3(core.getWorldAcceleration()):len()/9.80665;if bL>0.1 then e5=aK*bL;e4=maxThrust/bL end;cp[#cp+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e1=ConvertResolutionX(1120)e2=ConvertResolutionY(55)e3=e2+10 elseif am then local e8=ConvertResolutionX(770)cp[#cp+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],e8,e2,e8,e3,dN)end;cp[#cp+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e1,e2,e1,e3,bL/9.80665,e1,e2+20,e1,e3+20,e7)cp[#cp+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cp[#cp+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a5,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a6),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aK/1000,ConvertResolutionX(1240),ConvertResolutionY(10),e6/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dF)if bL>0.1 then cp[#cp+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e4/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e5/1000)else cp[#cp+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cp[#cp+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dF)end;cp[#cp+1]="</g>"end;function DrawThrottle(cp,dF,dO,dQ)dO=math.floor(dO+0.5)local db=throtPosY+10;local dc=throtPosY+20;if o()==1 and not RemoteHud then db=55;dc=65 end;local e9="CRUISE"local unit="km/h"local ea=dQ;if dF=="TRAVEL"or dF=="AUTOPILOT"then e9="THROT"unit="%"ea=dO;local eb="dim"if dO<0 then eb="red"end;cp[#cp+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eb,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dO),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cp[#cp+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,db,e9,throtPosX+10,dc,ea,unit)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dO=math.floor(C*100+0.5)local eb="red"if dO<0 then eb="red"end;cp[#cp+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eb,1-math.abs(dO),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cp[#cp+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,db+40,"LIMIT",throtPosX+10,dc+40,dO,"%")end;if am and AtmoSpeedAssist or Reentry then cp[#cp+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,db-40,"LIMIT: ",bm.." km/h")elseif not am and Autopilot then cp[#cp+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,db-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cp,c8)if c8<200000 and not am or c8 and am then local ec=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local ed=0;if math.abs(ec)>1 then ed=45*math.log(math.abs(ec),10)if ec<0 then ed=-ed end end;cp[#cp+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(ec),d(ed))end end;function getHeading(cJ)local ee=-vec3(core.getWorldVertical())cJ=cJ-cJ:project_on(ee)local ef=vec3(0,0,1)ef=ef-ef:project_on(ee)local eg=ef:cross(ee)local ed=ef:angle_between(cJ)*constants.rad2deg;if cJ:dot(eg)<0 then ed=360-ed end;return ed end;function DrawRollLines(cp,centerX,centerY,dL,dT,dU)local eh=circleRad;local ei=20;ei=d(ei)local ej=d(dL)if dU then for i=-45,45,5 do local ek=i;cp[#cp+1]=e([[<g transform="rotate(%f,%d,%d)">]],ek,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cp[#cp+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+eh+ei-len,centerX,centerY+eh+ei)end;cp[#cp+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+eh+ei-35,dT,centerX,centerY+eh+ei-25,ej)cp[#cp+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dL,centerX,centerY)cp[#cp+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+eh+ei-20,centerX+5,centerY+eh+ei-20,centerX,centerY+eh+ei-15)cp[#cp+1]="</g>"end;local dk=ej;if dU then dk=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local el=20;local em=d(dk)local en=0;local eo=centerY+eh+ei+20;local ep=centerX;if dT~="YAW"then eo=ConvertResolutionY(130)ep=ConvertResolutionX(960)end;local eq=[[<path class="txttick line" d="]]for i=d(em-(el+10)-em%5+0.5),d(em+el+10+em%5+0.5),5 do local bU=ep+-i*5+dk*5;if i%10==0 then en=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cp[#cp+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bU+5,eo-12,q)elseif i%5==0 then en=5 end;if en==10 then eq=e([[%s M %f %f v %d]],eq,bU,eo-5,en)else eq=e([[%s M %f %f v %d]],eq,bU,eo-2.5,en)end end;cp[#cp+1]=eq..[["/>]]cp[#cp+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ep-5,eo+10,ep+5,eo+10,ep,eo+5)if dU then dT="HDG"end;cp[#cp+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],ep,eo+25,em,ep,eo+35,dT)end;function DrawArtificialHorizon(cp,dM,dL,centerX,centerY,dU,er,bO)local eh=circleRad;local es=d(eh*3/5)if eh>0 then local et=d(dM)local len=0;local eq=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dL,centerX,centerY)if not am then eq=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cp[#cp+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],eh-1,centerX,centerY)cp[#cp+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(et-30-et%5+0.5),d(et+30+et%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bV=centerY+-i*5+dM*5;if len==30 then eq=e([[%s M %d %f h %d]],eq,centerX-es-len,bV,len)if am then cp[#cp+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dL,centerX,centerY,centerX-es+10,bV,i)cp[#cp+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dL,centerX,centerY,centerX+es-10,bV,i)if i==0 or i==180 or i==-180 then cp[#cp+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dL,centerX,centerY,centerX-es+20,bV,es*2-40)end else cp[#cp+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-es+10,bV,i)cp[#cp+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+es-10,bV,i)end;eq=e([[%s M %d %f h %d]],eq,centerX+es,bV,len)else eq=e([[%s M %d %f h %d]],eq,centerX-es-len,bV,len)eq=e([[%s M %d %f h %d]],eq,centerX+es,bV,len)end end;cp[#cp+1]=eq..[["/>]]local eu="PITCH"if not dU then eu="REL PITCH"end;if dM>90 and not am then dM=90-(dM-90)elseif dM<-90 and not am then dM=-90-(dM+90)end;if eh>200 then if am then if bO>I then cp[#cp+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,er)end;cp[#cp+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dL,centerX,centerY)else cp[#cp+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cp[#cp+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-es+25,centerY-5,centerX-es+20,centerY,centerX-es+25,centerY+5,centerX-es+50,centerY+4,et)cp[#cp+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+es-25,centerY-5,centerX+es-20,centerY,centerX+es-25,centerY+5,centerX+es-30,centerY+4,et)cp[#cp+1]="</g>"end;local ev=d(eh/3)cp[#cp+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ev,centerY,eh-ev)if not am and dU then cp[#cp+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dL,centerX,centerY,centerX-es+10,centerY,es*2-20)end;cp[#cp+1]="</g>"if eh<200 then if am and bO>I then cp[#cp+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eh,eu,centerX,centerY-eh+10,et,centerX,centerY-15,"Yaw",centerX,centerY+20,er)else cp[#cp+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eh,eu,centerX,centerY-eh+15,et)end end end end;function DrawAltitudeDisplay(cp,c8,dU)local ew=altMeterX;local ex=altMeterY;local ey=78;local ez=19;local eA=AboveGroundLevel()if eA~=-1 then table.insert(cp,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ew+ey,ex+ez+20,eA))end;if dU and(c8<200000 and not am or c8 and am)then table.insert(cp,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ew-1,ex-4,ey+2,ez+6,ew+1,ex-1,ey-4,ez))local cn=0;local eB=1;local eC=0;local eD=c8<0;local eE=9;if eD then eE=0 end;local c8=math.abs(c8)while cn<6 do local eF=11;local eG=16;local eH=9;local eI=14;local dj="altsm"if cn>2 then eG=eG+3;eF=eF+2;eI=eI+2;eH=eH-6;dj="altbig"end;if eD then dj=dj.." red"end;local eJ=c8/eB%10;local eK=d(eJ)local eL=d((eK+1)%10)local eM=eC;if cn==0 then eM=eJ-eK;if eD then eM=1-eM end end;if eD and(cn==0 or eC~=0)then local eN=eL;eL=eK;eK=eN end;local eO=eG*(eM-1)local eP=eO+eG;local bU=ew+eH+(6-cn)*eF;local bV=ex+eI;table.insert(cp,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dj,bU,bV+eO,eL,bU,bV+eP,eK))cn=cn+1;eB=eB*10;if eK==eE then eC=eM else eC=0 end end;table.insert(cp,[[</g></g>]])end end;function DrawPrograde(cp,bd,bO,centerX,centerY)if bO>5 and not am or bO>I then local eh=circleRad;local eQ=20;local eR=20;local eS=vec3(bd)local eT=getRelativePitch(eS)local eU=getRelativeYaw(eS)local eV=14;local eW=eV/2;local eX=-eU/eR*eh;local eY=eT/eQ*eh;local bU=centerX+eX;local bV=centerY+eY;local ac=math.sqrt(eX^2+eY^2)local eZ=[[<circle
                cx="]]..bU..[["
                cy="]]..bV..[["
                r="]]..eW/eV..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bU..[["
                cy="]]..bV..[["
                r="]]..eW..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bU-eV..[[,]]..bV..[[ h ]]..eW..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bU+eW..[[,]]..bV..[[ h ]]..eW..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bU..[[,]]..bV-eV..[[ v ]]..eW..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ac<eh then cp[#cp+1]=eZ else local ed=math.atan(eY,eX)local e_=4;local f0=centerX+eh*math.cos(ed)local f1=centerY+eh*math.sin(ed)cp[#cp+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ed*180/math.pi,f0,f1,f0-e_,f1-e_/2,e_*2,e_,f0+e_,f1-e_,e_,e_,-e_,e_)end;if not am then eT=getRelativePitch(-eS)eU=getRelativeYaw(-eS)eX=-eU/eR*eh;eY=eT/eQ*eh;bU=centerX+eX;bV=centerY+eY;ac=math.sqrt(eX^2+eY^2)if ac<eh then local f2=[[<circle
                        cx="]]..bU..[["
                        cy="]]..bV..[["
                        r="]]..eW..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bU..[[,]]..bV-eV..[[ v ]]..eW..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bU..[[,]]..bV..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bU..[[,]]..bV..[[)" />
                     <path
                        d="M ]]..bU-eW..[[,]]..bV..[[ h ]]..eV..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bU..[[,]]..bV..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bU..[[,]]..bV..[[)"/>]]cp[#cp+1]=f2 end end end end;function DrawWarnings(cp)cp[#cp+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cp[#cp+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cp[#cp+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cp[#cp+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cp[#cp+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f3=ConvertResolutionX(960)local f4=ConvertResolutionY(860)local f5=ConvertResolutionY(880)local f6=ConvertResolutionY(900)local f7=ConvertResolutionY(960)local f8=ConvertResolutionY(200)local f9=ConvertResolutionY(150)local fa=ConvertResolutionY(960)if o()==1 and not RemoteHud then f4=ConvertResolutionY(135)f5=ConvertResolutionY(155)f6=ConvertResolutionY(175)f8=ConvertResolutionY(115)f9=ConvertResolutionY(95)end;if BrakeIsOn then cp[#cp+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f3,f4)elseif A>0 then cp[#cp+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f3,f4,A)end;if am and bi and hoverDetectGround()==-1 then cp[#cp+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f3,f8+50)end;if aq then cp[#cp+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f3,fa)end;if GearExtended then if M then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f3,f5)else cp[#cp+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f3,f5)end;local dt,du=getDistanceDisplayString(Nav:getTargetGroundAltitude())cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f3,f6,dt..du)end;if Z then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f3,f7+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(an-antigrav.getBaseAltitude())<501 then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f3,f8+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cp[#cp+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f3,f8+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f3,f8+20,AutopilotStatus)elseif LockPitch~=nil then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f3,f8+20,d(LockPitch))elseif U then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f3,f8+20)elseif Reentry then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f3,f8+20)end;local fb,fc,fd=b6:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bd:normalize(),function(fe)if fe.noAtmosphericDensityAltitude>0 then return fe.radius+fe.noAtmosphericDensityAltitude else return fe.radius+fe.surfaceMaxAltitude*1.5 end end)local ff=fc;if fd~=nil and fc~=nil then ff=math.min(fd,fc)end;if AltitudeHold then if AutoTakeoff then local dt,du=getDistanceDisplayString(HoldAltitude)cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f3,f8,dt..du)if BrakeIsOn then cp[#cp+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f3,f8+50)end else local dt,du=getDistanceDisplayString2(HoldAltitude)cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f3,f8,dt..du)end end;if VertTakeOff then if j()>0.1 then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f3,f8)elseif j()<0.09 and j()>0.05 then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f3,f8)elseif j()<0.05 then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f3,f8)end end;if IntoOrbit then if bo~=nil then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f3,f8,bo)end end;if BrakeLanding then if StrongBrakes then cp[#cp+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f3,f8)else cp[#cp+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f3,f8)end end;if ProgradeIsOn then cp[#cp+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f3,f8)end;if RetrogradeIsOn then cp[#cp+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f3,f8)end;if TurnBurn then cp[#cp+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f3,f9)elseif ff~=nil and j()==0 then local dt,du=getDistanceDisplayString(ff)local travelTime=b7.computeTravelTime(be,0,ff)local fg="Collision"if fb.noAtmosphericDensityAltitude>0 then fg="Atmosphere"end;cp[#cp+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f3,f9,fb.name,fg,FormatTimeString(travelTime),dt..du)end;if VectorToTarget then cp[#cp+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f3,f8+30,VectorStatus)end;cp[#cp+1]="</g>"end;function DisplayOrbitScreen(cp)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fh=OrbitMapX;local fi=OrbitMapY;local fj=OrbitMapSize;local fk=4;fi=fi+fk;local fl=15;local bU=fh+fj+fh/2+fk;local bV=fi+fj/2+5+fk;local fm,fn,fo,fp;fm=fj/4;fp=0;cp[#cp+1]=[[<g class="pbright txtorb txtmid">]]cp[#cp+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fj+fh*2,fj+fi,fk,fk)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fo=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fm*2)fn=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fo*(1-orbit.eccentricity)fp=fm-orbit.periapsis.altitude/fo-planet.radius/fo;local fq=""if orbit.periapsis.altitude<=0 then fq='redout'end;cp[#cp+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fq,fh+fj/2+fp+fk,fi+fj/2+fk,fm,fn)cp[#cp+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fh+fj/2+fk,fi+fj/2+fk,planet.radius/fo)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cp[#cp+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bU-35,bV-5,fh+fj/2+fm+fp,bV-5)cp[#cp+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bU,bV)bV=bV+fl;local dt,du=getDistanceDisplayString(orbit.apoapsis.altitude)cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,dt..du)bV=bV+fl;cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,FormatTimeString(orbit.timeToApoapsis))bV=bV+fl;cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,getSpeedDisplayString(orbit.apoapsis.speed))end;bV=fi+fj/2+5+fk;bU=fh-fh/2+10+fk;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cp[#cp+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bU+35,bV-5,fh+fj/2-fm+fp,bV-5)cp[#cp+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bU,bV)bV=bV+fl;local dt,du=getDistanceDisplayString(orbit.periapsis.altitude)cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,dt..du)bV=bV+fl;cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,FormatTimeString(orbit.timeToPeriapsis))bV=bV+fl;cp[#cp+1]=e([[<text x="%f" y="%f">%s</text>]],bU,bV,getSpeedDisplayString(orbit.periapsis.speed))end;cp[#cp+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fh+fj/2+fk,20+fk,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fr=orbit.timeToApoapsis/orbit.period*2*math.pi;local fs=fm*math.cos(fr)local ft=fn*math.sin(fr)cp[#cp+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fh+fj/2+fs+fp+fk,fi+fj/2+ft+fk)end;cp[#cp+1]=[[</g>]]end end;function getDistanceDisplayString(ac)local fu=ac>100000;local bz,du=""if fu then bz,du=round(ac/1000/200,1),"SU"elseif ac<1000 then bz,du=round(ac,1),"m"else bz,du=round(ac/1000,1),"Km"end;return bz,du end;function getDistanceDisplayString2(ac)local fu=ac>100000;local bz,du=""if fu then bz,du=round(ac/1000/200,2)," SU"elseif ac<1000 then bz,du=round(ac,2)," M"else bz,du=round(ac/1000,2)," KM"end;return bz,du end;function getSpeedDisplayString(bO)return d(round(bO*3.6,0)+0.5).." km/h"end;function FormatTimeString(fv)local fw=0;local fx=0;local fy=0;if fv<60 then fv=d(fv)elseif fv<3600 then fw=d(fv/60)fv=d(fv%60)elseif fv<86400 then fx=d(fv/3600)fw=d(fv%3600/60)else fy=d(fv/86400)fx=d(fv%86400/3600)end;if fy>0 then return fy.."d "..fx.."h "elseif fx>0 then return fx.."h "..fw.."m "elseif fw>0 then return fw.."m "..fv.."s"elseif fv>0 then return fv.."s"else return"0s"end end;function getMagnitudeInDirection(dl,fz)dl=vec3(dl)fz=vec3(fz):normalize()local bz=dl*fz;return bz.x+bz.y+bz.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local fA=AtlasOrdered[AutopilotTargetIndex].index;local fB=b0[0][fA]if fB.center then AutopilotTargetName=fB.name;a4=b6[0][fA]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fB;for _,by in pairs(b6[0])do if by.name==CustomTarget.planetname then a4=by;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fA=AtlasOrdered[AutopilotTargetIndex].index;local fB=b0[0][fA]if fB.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fA=AtlasOrdered[AutopilotTargetIndex].index;local fB=b0[0][fA]if fB.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fC=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return fC end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bd=core.getWorldVelocity()local bO=vec3(bd):len()local fD=unit.getThrottle()/100;if AtmoSpeedAssist then fD=z end;local fE,fF=b7.computeDistanceAndTime(vec3(bd):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fD,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fG;if not TurnBurn and bO>0 then _,fG=GetAutopilotBrakeDistanceAndTime(bO)else _,fG=GetAutopilotTBBrakeDistanceAndTime(bO)end;local fH=0;local fI=0;if AutopilotCruising or not Autopilot and bO>5 then fI=b7.computeTravelTime(bO,0,AutopilotDistance)elseif a0+fE<AutopilotDistance then fH=AutopilotDistance-(a0+fE)fI=b7.computeTravelTime(8333.0556,0,fH)else local fJ=(AutopilotDistance-a0)/fE;fE=AutopilotDistance-a0;fF=fF*fJ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fI elseif AutopilotBraking then return fG elseif AutopilotCruising then return fI+fG else return fF+a1+fI end end;function GetAutopilotBrakeDistanceAndTime(bO)if not am then RefreshLastMaxBrake()return b7.computeDistanceAndTime(bO,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(bO,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bO)RefreshLastMaxBrake()return b7.computeDistanceAndTime(bO,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fK=-1;local fL=-1;if vBooster then fK=vBooster.distance()end;if hover then fL=hover.distance()end;if fK~=-1 and fL~=-1 then if fK<fL then return fK else return fL end elseif fK~=-1 then return fK elseif fL~=-1 then return fL else return-1 end end;function AboveGroundLevel()local fM=-1;local fN=hoverDetectGround()if telemeter_1 then fM=telemeter_1.getDistance()end;if fN~=-1 and fM~=-1 then if fN<fM then return fN else return fM end elseif fN~=-1 then return fN else return fM end end;function tablelength(fO)local fP=0;for _ in pairs(fO)do fP=fP+1 end;return fP end;function BeginProfile(fQ)ProfileTimeStart=system.getTime()end;function EndProfile(fQ)local fR=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fR;ProfileCount=ProfileCount+1;if fR>ProfileTimeMax then ProfileTimeMax=fR end;if fR<ProfileTimeMin then ProfileTimeMin=fR end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fS=ProfileTimeSum;local fT=ProfileTimeSum/ProfileCount;local fU=ProfileTimeMin;local fV=ProfileTimeMax;local fW=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fS,fT,fU,fV,fW))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fX=radar_1.getEntries()local fY=radar_1.getData()local fZ=ConvertResolutionX(1770)local f_=ConvertResolutionY(330)if#fX>0 then local g0=fY:find('identifiedConstructs":%[%]')if g0==nil and perisPanelID==nil then af=1;ToggleRadarPanel()end;if g0~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ad=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fZ,f_,#fX)local g1={}for bx,by in pairs(fX)do if radar_1.hasMatchingTransponder(by)==1 then table.insert(g1,by)end end;if#g1>0 then local bV=ConvertResolutionY(15)local bU=ConvertResolutionX(1370)ad=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,bU,bV)for bx,by in pairs(g1)do bV=bV+20;ad=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,bU,bV,radar_1.getConstructName(by))end end else local g2;g2=fY:find('worksInEnvironment":false')if g2 then ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fZ,f_)else ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fZ,f_)end;if radarPanelID~=nil then af=0;ToggleRadarPanel()end end end end;function DisplayMessage(cp,dt)if dt~="empty"then cp[#cp+1]=[[<text class="msg" x="50%%" y="310" >]]for g3 in string.gmatch(dt,"([^\n]+)")do cp[#cp+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g3)end;cp[#cp+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function updateDistance()local bH=system.getTime()local bd=vec3(core.getWorldVelocity())local dP=vec3(bd):len()local g4=bH-ap;if dP>1.38889 then dP=dP/1000;local g5=dP*(bH-ap)TotalDistanceTravelled=TotalDistanceTravelled+g5;a5=a5+g5 end;a6=a6+g4;TotalFlightTime=TotalFlightTime+g4;ap=bH end;function composeAxisAccelerationFromTargetSpeedV(g6,g7)local g8=vec3()local g9=vec3()if g6==axisCommandId.longitudinal then g8=vec3(core.getConstructOrientationForward())g9=vec3(core.getConstructWorldOrientationForward())elseif g6==axisCommandId.vertical then g8=vec3(core.getConstructOrientationUp())g9=vec3(core.getConstructWorldOrientationUp())elseif g6==axisCommandId.lateral then g8=vec3(core.getConstructOrientationRight())g9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ga=vec3(core.getWorldGravity())local gb=ga:dot(g9)local gc=vec3(core.getWorldAirFrictionAcceleration())local gd=gc:dot(g9)local ge=vec3(core.getVelocity())local gf=ge:dot(g8)local gg=g7*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gg-gf)local gh=targetSpeedPID2:get()local gi=(gh-gd-gb)*g9;return gi end;function composeAxisAccelerationFromTargetSpeed(g6,g7)local g8=vec3()local g9=vec3()if g6==axisCommandId.longitudinal then g8=vec3(core.getConstructOrientationForward())g9=vec3(core.getConstructWorldOrientationForward())elseif g6==axisCommandId.vertical then g8=vec3(core.getConstructOrientationUp())g9=vec3(core.getConstructWorldOrientationUp())elseif g6==axisCommandId.lateral then g8=vec3(core.getConstructOrientationRight())g9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ga=vec3(core.getWorldGravity())local gb=ga:dot(g9)local gc=vec3(core.getWorldAirFrictionAcceleration())local gd=gc:dot(g9)local ge=vec3(core.getVelocity())local gf=ge:dot(g8)local gg=g7*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gg-gf)local gh=targetSpeedPID:get()local gi=(gh-gd-gb)*g9;return gi end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b0=Atlas()for bx,by in pairs(b0[0])do if aE==nil or by.center.x<aE then aE=by.center.x end;if aF==nil or by.center.x>aF then aF=by.center.x end;if aG==nil or by.center.y<aG then aG=by.center.y end;if aH==nil or by.center.y>aH then aH=by.center.y end end;b1=""local gj=1.1*(aF-aE)/1920;local gk=1.4*(aH-aG)/1080;for bx,by in pairs(b0[0])do local bU=960+by.center.x/gj;local bV=540+by.center.y/gk;b1=b1 ..'<circle cx="'..bU..'" cy="'..bV..'" r="'..by.radius/gj*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(by.name,"Moon")and not string.match(by.name,"Sanctuary")and not string.match(by.name,"Space")then b1=b1 .."<text x='"..bU.."' y='"..bV+by.radius/gj*30+20 .."' font-size='28' fill="..as.." text-anchor='middle' font-family='Montserrat'>"..by.name.."</text>"end end;local cc=vec3(core.getConstructWorldPos())local bU=960+cc.x/gj;local bV=540+cc.y/gk;b1=b1 ..'<circle cx="'..bU..'" cy="'..bV..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='"..bU.."' y='"..bV-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b1=b1 ..[[</svg>]]b2=gj;b3=gk;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b1)local cc=vec3(core.getConstructWorldPos())local bU=960+cc.x/gj;local bV=540+cc.y/gk;b1='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='80' y='105' font-size='18' fill="..as.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b4=screen_2.addContent((bU-80)/19.20,(bV-80)/10.80,b1)end end;function PlanetRef()local function gl(gm)return type(gm)=='number'end;local function gn(gm)return type(tonumber(gm))=='number'end;local function go(gp)return type(gp)=='table'end;local function gq(gr)return type(gr)=='string'end;local function gs(by)return go(by)and gl(by.x and by.y and by.z)end;local function gt(gu)return go(gu)and gl(gu.latitude and gu.longitude and gu.altitude and gu.bodyId and gu.systemId)end;local gv=math.pi/180;local gw=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cd='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gx=utils.clamp;local function float_eq(c2,c3)if c2==0 then return math.abs(c3)<1e-09 end;if c3==0 then return math.abs(c2)<1e-09 end;return math.abs(c2-c3)<math.max(math.abs(c2),math.abs(c3))*epsilon end;local function gy(gm)local bz=string.gsub(string.reverse(e('%.4f',gm)),'^0*%.?','')return bz==''and'0'or string.reverse(bz)end;local function gz(gA)if gs(gA)then return e('{x=%.3f,y=%.3f,z=%.3f}',gA.x,gA.y,gA.z)end;if go(gA)and not getmetatable(gA)then local gB={}local gC=next(gA)if type(gC)=='nil'or gC==1 then gB=gA else for bx,by in pairs(gA)do local ea=gz(by)if type(bx)=='number'then table.insert(gB,e('[%s]=%s',bx,ea))else table.insert(gB,e('%s=%s',bx,ea))end end end;return e('{%s}',table.concat(gB,','))end;if gq(gA)then return e("'%s'",gA:gsub("'",[[\']]))end;return tostring(gA)end;local gD={}gD.__index=gD;gD.__tostring=function(gA,gE)local gF={}for bx in pairs(gA)do table.insert(gF,bx)end;table.sort(gF)local gB={}for _,bx in ipairs(gF)do local ea=gz(gA[bx])if type(bx)=='number'then table.insert(gB,e('[%s]=%s',bx,ea))else table.insert(gB,e('%s=%s',bx,ea))end end;if gE then return e('%s%s',gE,table.concat(gB,',\n'..gE))end;return e('{%s}',table.concat(gB,','))end;gD.__eq=function(gG,gH)return gG.planetarySystemId==gH.planetarySystemId and gG.bodyId==gH.bodyId and float_eq(gG.radius,gH.radius)and float_eq(gG.center.x,gH.center.x)and float_eq(gG.center.y,gH.center.y)and float_eq(gG.center.z,gH.center.z)and float_eq(gG.GM,gH.GM)end;local function gI(ce,cf,gJ,c5,gK)assert(gn(ce),'Argument 1 (planetarySystemId) must be a number:'..type(ce))assert(gn(cf),'Argument 2 (bodyId) must be a number:'..type(cf))assert(gn(gJ),'Argument 3 (radius) must be a number:'..type(gJ))assert(go(c5),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c5))assert(gn(gK),'Argument 5 (GM) must be a number:'..type(gK))return setmetatable({planetarySystemId=tonumber(ce),bodyId=tonumber(cf),radius=tonumber(gJ),center=vec3(c5),GM=tonumber(gK)},gD)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gL)return e('::pos{%d,%d,%s,%s,%s}',gL.systemId,gL.bodyId,gy(gL.latitude*gw),gy(gL.longitude*gw),gy(gL.altitude))end;MapPosition.__eq=function(gG,gH)return gG.bodyId==gH.bodyId and gG.systemId==gH.systemId and float_eq(gG.latitude,gH.latitude)and float_eq(gG.altitude,gH.altitude)and(float_eq(gG.longitude,gH.longitude)or float_eq(gG.latitude,math.pi/2)or float_eq(gG.latitude,-math.pi/2))end;local function gM(gN,cf,c9,ca,c8)local ce=gN;if gq(gN)and not ca and not c8 and not cf and not c9 then ce,cf,c9,ca,c8=string.match(gN,cd)assert(ce,'Argument 1 (position string) is malformed.')else assert(gn(ce),'Argument 1 (systemId) must be a number:'..type(ce))assert(gn(cf),'Argument 2 (bodyId) must be a number:'..type(cf))assert(gn(c9),'Argument 3 (latitude) must be in degrees:'..type(c9))assert(gn(ca),'Argument 4 (longitude) must be in degrees:'..type(ca))assert(gn(c8),'Argument 5 (altitude) must be in meters:'..type(c8))end;ce=tonumber(ce)cf=tonumber(cf)c9=tonumber(c9)ca=tonumber(ca)c8=tonumber(c8)if cf==0 then return setmetatable({latitude=c9,longitude=ca,altitude=c8,bodyId=cf,systemId=ce},MapPosition)end;return setmetatable({latitude=gv*gx(c9,-90,90),longitude=gv*(ca%360),altitude=c8,bodyId=cf,systemId=ce},MapPosition)end;local gO={}gO.__index=gO;gO.__tostring=function(gA,gE)local gP=gE and gE..'  'local gQ={}local gF={}for bx in pairs(gA)do table.insert(gF,bx)end;table.sort(gF)for _,gR in ipairs(gF)do bdy=gA[gR]local gS=gD.__tostring(bdy,gP)if gE then table.insert(gQ,e('[%s]={\n%s\n%s}',gR,gS,gE))else table.insert(gQ,e('  [%s]=%s',gR,gS))end end;if gE then return e('\n%s%s%s',gE,table.concat(gQ,',\n'..gE),gE)end;return e('{\n%s\n}',table.concat(gQ,',\n'))end;local function gT(gU)local b0={}local pid;for _,by in pairs(gU)do local cl=by.planetarySystemId;if type(cl)~='number'then error('Invalid planetary system ID: '..tostring(cl))elseif pid and cl~=pid then error('Mismatch planetary system IDs: '..cl..' and '..pid)end;local gV=by.bodyId;if type(gV)~='number'then error('Invalid body ID: '..tostring(gV))elseif b0[gV]then error('Duplicate body ID: '..tostring(gV))end;setmetatable(by.center,getmetatable(vec3.unit_x))b0[gV]=setmetatable(by,gD)pid=cl end;return setmetatable(b0,gO)end;b5={}local function gW(gU)return setmetatable({galaxyAtlas=gU or{}},b5)end;b5.__index=function(gp,i)if type(i)=='number'then local system=gp.galaxyAtlas[i]return gT(system)end;return rawget(b5,i)end;b5.__pairs=function(gA)return function(gp,bx)local gX,nv=next(gp,bx)return gX,nv and gT(nv)end,gA.galaxyAtlas,nil end;b5.__tostring=function(gA)local gY={}for _,gZ in pairs(gA or{})do local g_=gZ:getPlanetarySystemId()local h0=gO.__tostring(gZ,'    ')table.insert(gY,e('  [%s]={%s\n  }',g_,h0))end;return e('{\n%s\n}\n',table.concat(gY,',\n'))end;b5.BodyParameters=gI;b5.MapPosition=gM;b5.PlanetarySystem=gT;function b5.createBodyParameters(h1,cf,h2,h3,h4,h5,h6)assert(gn(h1),'Argument 1 (planetarySystemId) must be a number:'..type(h1))assert(gn(cf),'Argument 2 (bodyId) must be a number:'..type(cf))assert(gn(h2),'Argument 3 (surfaceArea) must be a number:'..type(h2))assert(go(h3),'Argument 4 (aPosition) must be an array or vec3:'..type(h3))assert(go(h4),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h4))assert(gn(h5),'Argument 6 (altitude) must be in meters:'..type(h5))assert(gn(h6),'Argument 7 (gravityAtPosition) must be number:'..type(h6))local gJ=math.sqrt(h2/4/math.pi)local ac=gJ+h5;local h7=vec3(h3)+ac*vec3(h4)local gK=h6*ac*ac;return gI(h1,cf,gJ,h7,gK)end;b5.isMapPosition=gt;function b5:getPlanetarySystem(gN)if i==nil then i=0 end;if nv==nil then nv=0 end;local h1=gN;if gt(gN)then h1=gN.systemId end;if type(h1)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gO then system=gT(system)end;return system end end end;function gO:castIntersections(h8,fz,h9,ha)local h9=h9 or function(fe)return 1.05*fe.radius end;local hb={}if ha then for _,i in ipairs(ha)do hb[i]=self[i]end else ha={}for bx,fe in pairs(self)do table.insert(ha,bx)hb[bx]=fe end end;local function hc(hd,he)local hf=hb[hd].center-h8;local hg=hb[he].center-h8;return hf:len()<hg:len()end;table.sort(ha,hc)local hh=fz:normalize()for i,cl in ipairs(ha)do local fe=hb[cl]local hi=fe.center-h8;local gJ=h9(fe)local hj=hi:dot(hh)local hk=hj^2-(hi:len2()-gJ^2)if hk>=0 then local hl=math.sqrt(hk)local fc=hj+hl;local fd=hj-hl;if fd>0 then return fe,fc,fd elseif fc>0 then return fe,fc,nil end end end;return nil,nil,nil end;function gO:closestBody(hm)assert(type(hm)=='table','Invalid coordinates.')local hn,fe;local ho=vec3(hm)for _,hp in pairs(self)do local hq=(hp.center-ho):len2()if(not fe or hq<hn)and hp.name~="Space"then fe=hp;hn=hq end end;return fe end;function gO:convertToBodyIdAndWorldCoordinates(gN)local hr=gN;if gq(gN)then hr=gM(gN)end;if hr.bodyId==0 then return 0,vec3(hr.latitude,hr.longitude,hr.altitude)end;local hp=self:getBodyParameters(hr)if hp then return hr.bodyId,hp:convertToWorldCoordinates(hr)end end;function gO:getBodyParameters(gN)local cf=gN;if gt(gN)then cf=gN.bodyId end;assert(gn(cf),'Argument 1 (bodyId) must be a number:'..type(cf))return self[cf]end;function gO:getPlanetarySystemId()local _,by=next(self)return by and by.planetarySystemId end;function gD:convertToMapPosition(c5)assert(go(c5),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c5))local c6=vec3(c5)if self.bodyId==0 then return setmetatable({latitude=c6.x,longitude=c6.y,altitude=c6.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c7=c6-self.center;local ac=c7:len()local c8=ac-self.radius;local c9=0;local ca=0;if not float_eq(ac,0)then local cb=math.atan(c7.y,c7.x)ca=cb>=0 and cb or 2*math.pi+cb;c9=math.pi/2-math.acos(c7.z/ac)end;return setmetatable({latitude=c9,longitude=ca,altitude=c8,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gD:convertToWorldCoordinates(gN)local hr=gq(gN)and gM(gN)or gN;if hr.bodyId==0 then return vec3(hr.latitude,hr.longitude,hr.altitude)end;assert(gt(hr),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hr.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hr.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cg=math.cos(hr.latitude)return self.center+(self.radius+hr.altitude)*vec3(cg*math.cos(hr.longitude),cg*math.sin(hr.longitude),math.sin(hr.latitude))end;function gD:getAltitude(c5)return(vec3(c5)-self.center):len()-self.radius end;function gD:getDistance(c5)return(vec3(c5)-self.center):len()end;function gD:getGravity(c5)local hs=self.center-vec3(c5)local ht=hs:len2()return self.GM/ht*hs/math.sqrt(ht)end;return setmetatable(b5,{__call=function(_,...)return gW(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gq(gr)return type(gr)=='string'end;local function go(gp)return type(gp)=='table'end;local function float_eq(c2,c3)if c2==0 then return math.abs(c3)<1e-09 end;if c3==0 then return math.abs(c2)<1e-09 end;return math.abs(c2-c3)<math.max(math.abs(c2),math.abs(c3))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c8)assert(self.body)local ac=c8+self.body.radius;if not float_eq(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gN,bd)assert(self.body)assert(go(gN)or gq(gN))assert(go(bd))local cc=(gq(gN)or PlanetRef.isMapPosition(gN))and self.body:convertToWorldCoordinates(gN)or vec3(gN)local by=vec3(bd)local hu=cc-self.body.center;local hg=by:len2()local hv=hu:len()local hw=self.body.GM;local hx=((hg-hw/hv)*hu-hu:dot(by)*by)/hw;local c2=hw/(2*hw/hv-hg)local hy=hx:len()local hh=hx:normalize()local hz=c2*(1-hy)local hA=c2*(1+hy)local hB=hz*hh+self.body.center;local hC=hy<=1 and-hA*hh+self.body.center or nil;local hD=math.sqrt(c2*hw*(1-hy*hy))local hE=hC and 2*math.pi*math.sqrt(c2^3/hw)local hF=math.acos(hx:dot(hu)/(hy*hv))if hu:dot(by)<0 then hF=-(hF-2*math.pi)end;local hG=math.acos((math.cos(hF)+hy)/(1+hy*math.cos(hF)))local hH=hG;if hH<0 then hH=hH+2*math.pi end;local hI=hH-hy*math.sin(hH)local hJ=0;local hK=0;local hL=0;if hE~=nil then hJ=hI/(2*math.pi/hE)hK=hE-hJ;hL=hK+hE/2;if hF-math.pi>0 then hK=hJ;hL=hK+hE/2 end;if hL>hE then hL=hL-hE end end;return{periapsis={position=hB,speed=hD/hz,circularOrbitSpeed=math.sqrt(hw/hz),altitude=hz-self.body.radius},apoapsis=hC and{position=hC,speed=hD/hA,circularOrbitSpeed=math.sqrt(hw/hA),altitude=hA-self.body.radius},currentVelocity=by,currentPosition=cc,eccentricity=hy,period=hE,eccentricAnomaly=hG,meanAnomaly=hI,timeToPeriapsis=hK,timeToApoapsis=hL}end;local function hM(hN)local hp=PlanetRef.BodyParameters(hN.planetarySystemId,hN.bodyId,hN.radius,hN.center,hN.GM)return setmetatable({body=hp},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hM(...)end})end;function Kinematics()local b7={}local hO=30000000/3600;local hP=hO*hO;local hQ=100;local function hR(by)return 1/math.sqrt(1-by*by/hP)end;function b7.computeAccelerationTime(hS,hT,hU)local hV=hO*math.asin(hS/hO)return(hO*math.asin(hU/hO)-hV)/hT end;function b7.computeDistanceAndTime(hS,hU,hW,hX,hY,hZ)hY=hY or 0;hZ=hZ or 0;local h_=hS<=hU;local i0=hX*(h_ and 1 or-1)/hW;local i1=-hZ/hW;local i2=i0+i1;if h_ and i2<=0 or not h_ and i2>=0 then return-1,-1 end;local i3,i4=0,0;if i0~=0 and hY>0 then local hV=math.asin(hS/hO)local i5=math.pi*(i0/2+i1)local i6=i0*hY;local i7=hO*math.pi;local by=function(gp)local cQ=(i5*gp-i6*math.sin(math.pi*gp/2/hY)+i7*hV)/i7;local i8=math.tan(cQ)return hO*i8/math.sqrt(i8*i8+1)end;local i9=h_ and function(gr)return gr>=hU end or function(gr)return gr<=hU end;i4=2*hY;if i9(by(i4))then local ia=0;while math.abs(i4-ia)>0.5 do local gp=(i4+ia)/2;if i9(by(gp))then i4=gp else ia=gp end end end;local ib=hS;local ic=i4/hQ;for id=1,hQ do local bO=by(id*ic)i3=i3+(bO+ib)*ic/2;ib=bO end;if i4<2*hY then return i3,i4 end;hS=ib end;local hV=hO*math.asin(hS/hO)local bA=(hO*math.asin(hU/hO)-hV)/i2;local ie=hP*math.cos(hV/hO)/i2;local ac=ie-hP*math.cos((i2*bA+hV)/hO)/i2;return ac+i3,bA+i4 end;function b7.computeTravelTime(hS,hT,ac)if ac==0 then return 0 end;if hT>0 then local hV=hO*math.asin(hS/hO)local ie=hP*math.cos(hV/hO)/hT;return(hO*math.acos(hT*(ie-ac)/hP)-hV)/hT end;if hS==0 then return-1 end;assert(hS>0,'Acceleration and initial speed are both zero.')return ac/hS end;function b7.lorentz(by)return hR(by)end;return b7 end;function safeZone(ig)local gJ=500000;local ih,ii,ij=math.huge;local ik=false;local il=vec3({13771471,7435803,-128971})local im=18000000;ih=vec3(ig):dist(il)if ih<im then return true,math.abs(ih-im),"Safe Zone",0 end;ii=vec3(ig):dist(vec3(planet.center))if ii<gJ then ik=true end;if math.abs(ii-gJ)<math.abs(ih-im)then return ik,math.abs(ii-gJ),planet.name,planet.bodyId else return ik,math.abs(ih-im),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.42;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b5=PlanetRef()b6=b5(Atlas())b7=Kinematics()b9=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(io)if dbHud_1 then if not a7 then for bx,by in pairs(b)do dbHud_1.setStringValue(by,g(_G[by]))if io and dbHud_2 then dbHud_2.setStringValue(by,g(_G[by]))end end;for bx,by in pairs(a)do dbHud_1.setStringValue(by,g(_G[by]))if io and dbHud_2 then dbHud_2.setStringValue(by,g(_G[by]))end end;c("Saved Variables to Datacore")if io and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bJ=j()if door and(bJ>0 or bJ==0 and an<10000)then for _,by in pairs(door)do by.toggle()end end;if switch then for _,by in pairs(switch)do by.toggle()end end;if forcefield and(bJ>0 or bJ==0 and an<10000)then for _,by in pairs(forcefield)do by.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(ip)if ip=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iq=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iq and not Autopilot then ac=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ac=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dt,du=getDistanceDisplayString(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dt..'", "unit":"'..du..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dt,du=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dt..'", "unit":"'..du..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dt,du=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dt..'", "unit":"'..du..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dt,du=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dt)..'", "unit":"'..du..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ip=="oneSecond"then ak=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cp={}local dF=GetFlightStyle()DrawOdometer(cp,a5,TotalDistanceTravelled,dF,a6)if ShouldCheckDamage then CheckDamage(cp)end;ae=table.concat(cp,"")collectgarbage("collect")elseif ip=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local bz=json.decode(dbHud_1.getStringValue("SavedLocations"))if bz~=nil then _G["SavedLocations"]=bz;local cn=-1;local cj;for bx,by in pairs(SavedLocations)do if by.name and by.name=="SatNav Location"then cn=bx;break end end;if cn~=-1 then cj=SavedLocations[cn]cn=-1;for bx,by in pairs(b0[0])do if by.name and by.name=="SatNav Location"then cn=bx;break end end;if cn>-1 then b0[0][cn]=cj end;UpdateAtlasLocationsList()W=cj.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ip=="msgTick"then local cp={}DisplayMessage(cp,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif ip=="animateTick"then bb=true;ba=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif ip=="hudTick"then local cp={}HUDPrologue(cp)if showHud then UpdateHud(cp)else DisplayOrbitScreen(cp)DrawWarnings(cp)end;HUDEpilogue(cp)cp[#cp+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cp,W)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cp)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cp)if screen_1.getMouseState()==1 then CheckButtons()end;cp[#cp+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cp)if not ba and not bb then local ir=table.concat(cp,"")cp={}cp[#cp+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cp[#cp+1]=b1;cp[#cp+1]=ir;cp[#cp+1]="</body>"ba=true;cp[#cp+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cp,"")system.setScreen(content)elseif bb then local ir=table.concat(cp,"")cp={}cp[#cp+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cp[#cp+1]=b1;cp[#cp+1]=ir;cp[#cp+1]="</body>"end;if not ba then cp[#cp+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if ac>DeadZone then DrawCursorLine(cp)end else SetButtonContains()DrawButtons(cp)end;cp[#cp+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end;cp[#cp+1]=[[</svg></body>]]content=table.concat(cp,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ip=="apTick"then rateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())am=j()>0;local bA=system.getTime()local is=bA-bj;bj=bA;local cs=vec3(core.getConstructWorldOrientationForward())local ct=vec3(core.getConstructWorldOrientationRight())local it=vec3(core.getConstructWorldOrientationUp())local cu=vec3(core.getWorldVertical())local iu=vec3(core.getConstructWorldPos())local iv=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dH=getRoll(cu,cs,ct)local dI=dH/180*math.pi;local dJ=math.cos(dI)local dK=math.sin(dI)local cv=getPitch(cu,cs,ct)local iw=getPitch(cu,cs,ct*dJ+it*dK)local ix=-math.deg(cL(it,bd,cs))local iy=math.deg(cL(ct,bd,cs))bi=am and ix<-YawStallAngle or ix>YawStallAngle or iy<-PitchStallAngle or iy>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not V then bh=-bh end;P=0;T=0;O=0;bd=vec3(core.getWorldVelocity())be=vec3(bd):len()sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bd)aj=hoverDetectGround()local bL=planet:getGravity(core.getConstructWorldPos()):len()*n()bk=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iu)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*ResolutionX;aa=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not ba then a9=a9+bg;aa=aa+bh end else a9=0;aa=0 end else a9=a9+bg;aa=aa+bh;ac=math.sqrt(a9*a9+aa*aa)if not V and o()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bh,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bg,-100,100)+0.5)*2*L else a9=0;aa=0 end end end;local iz=be>8334;if be>SpaceSpeedLimit/3.6 and not am and not Autopilot and not iz then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iz and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iz;if am and j()>0.09 then if be>bm/3.6 and not AtmoSpeedAssist and not ar then BrakeIsOn=true;ar=true elseif not AtmoSpeedAssist and ar then if be<bm/3.6 then BrakeIsOn=false;ar=false end end end;if BrakeIsOn then S=1 else S=0 end;an=core.getAltitude()if an==0 then an=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ag then BrakeIsOn=false;local iA=false;if CustomTarget~=nil then iA=AlignToWorldVector(CustomTarget.position-iu,0.01)else iA=AlignToWorldVector(vec3(bd),0.01)end;bc=true;if iA and(math.abs(dH)<2 or math.abs(iw)>85)and be>=bm/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bm))z=0 end elseif be>I then AlignToWorldVector(vec3(bd),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif be>I then AlignToWorldVector(-vec3(bd))end end;if not ProgradeIsOn and ag then if j()==0 then J=true;BeginReentry()ag=false;ai=true else ag=false;ToggleAutopilot()end end;local ee=vec3(core.getWorldVertical())*-1;local ec=bd.x*ee.x+bd.y*ee.y+bd.z*ee.z;if ai and(an<HoldAltitude+200 and an>HoldAltitude-200)and be*3.6>bm-100 and math.abs(ec)<20 and j()>=0.1 and(CustomTarget.position-iu):len()>2000+an then ToggleAutopilot()ai=false end;if VertTakeOff then bc=true;VertTakeOffMode=string.lower(VertTakeOffMode)if VertTakeOffMode=="agg"and not ExternalAGG then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;BrakeIsOn=false;if antigrav.getBaseAltitude()~=AntigravTargetAltitude then targetheight=antigrav.getBaseAltitude()else targetheight=AntigravTargetAltitude end;if an<targetheight-250 then bn=0;a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else BrakeIsOn=true;a8=0;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)if iv<10 and iv>0 then if an<targetheight+500 and an>targetheight-500 then VertTakeOff=false;bc=autoRollPreference;antigrav=true;antigrav.activate()antigrav.show()end end end elseif VertTakeOffMode=="space"or VertTakeOffMode=="orbit"then if j()>0.08 then bn=0;BrakeIsOn=false;a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then if iv<0 then W="Unable to take off. Landing."bc=autoRollPreference;VertTakeOff=false;BrakeLanding=true else BrakeIsOn=false end;if SpaceEngineVertDn then bn=0;a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else a8=0;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)bn=36;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)end else if VertTakeOffMode=="orbit"then bc=autoRollPreference;IntoOrbit=true;OrbitAchieved=false;CancelIntoOrbit=false;bt=false;br=nil;bs=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end;VertTakeOff=false else local iB=0;if planet.hasAtmosphere then iB=math.floor(VertParkingAlt+planet.noAtmosphericDensityAltitude)else iB=math.floor(VertParkingAlt+planet.surfaceMaxAltitude)end;if an>=iB then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;a8=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)BrakeIsOn=true;S=1;W="Takeoff completed. Parking."bc=autoRollPreference;VertTakeOff=false else if SpaceEngineVertDn then bn=0;a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else a8=0;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)bn=36;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)end end end end else W="Incorrect settings. Takeoff aborted."bc=autoRollPreference;VertTakeOff=false end;if bn~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iC=utils.clamp(bn-iw,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iC)local iD=utils.clamp(vTpitchPID:get(),-1,1)O=iD end end;if IntoOrbit then if Autopilot then bv=Autopilot;Autopilot=false end;local iE,iF=b9(OrbitTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-OrbitTargetPlanet.center):len()-OrbitTargetPlanet.radius)local iG=dH;if not OrbitTargetSet then if OrbitTargetPlanet.hasAtmosphere then OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.noAtmosphericDensityAltitude)else OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.surfaceMaxAltitude)end;if bv then if PlanetHopAlt<15000 then PlanetHopAlt=15000 end;if OrbitTargetOrbit>PlanetHopAlt then OrbitTargetOrbit=PlanetHopAlt end end;OrbitTargetSet=true end;if orbit.periapsis~=nil and orbit.eccentricity<1 and an>OrbitTargetOrbit and an<OrbitTargetOrbit*1.3 and orbit.periapsis.altitude>0 then if orbit.apoapsis~=nil then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;if orbit.periapsis.altitude>OrbitTargetOrbit*0.9 and orbit.periapsis.altitude<OrbitTargetOrbit*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;z=0;bp=0;bq=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)OrbitAchieved=true;if iw>2 or iw<-2 then br=0 else bo=nil;bu=false;OrbitTargetSet=false;OrbitTargetPlanet=nil;bc=autoRollPreference;W="Orbit established"if bv then CancelIntoOrbit=false;IntoOrbit=false;Autopilot=bv else ToggleIntoOrbit()end end else bo="Adjusting Orbit"bu=true;if orbit.periapsis.altitude<OrbitTargetOrbit then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if be+10>iF then if iv>15 then br=-80;bp=0.5;BrakeIsOn=false elseif iv<-15 then br=80;bp=0.5;BrakeIsOn=false else bp=0;BrakeIsOn=true end elseif be-10<iF then br=80;bp=0.5;BrakeIsOn=false else bp=0;BrakeIsOn=true end else br=80;bp=0.5;BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then bp=0;BrakeIsOn=true elseif orbit.periapsis.altitude<OrbitTargetOrbit*1.2 then br=-80;bp=0.5;BrakeIsOn=false end end end end;if bp>0 and iw<=br+3 and iw>=br-3 then z=bp;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bp)elseif not OrbitAchieved then z=0.05;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0.05)end else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;local iH=iE%50;local iI=0;if iH>0 then iI=iE-iH+50 else iI=iE end;BrakeIsOn=false;local iJ=2.5;if OrbitTargetOrbit==PlanetHopAlt then iJ=3 end;bq=iI*iJ;if not bt then local iK=false;local iL=false;if an<OrbitTargetOrbit then bo="Aligning to orbital path"else bo="Aligning to orbital point"end;br=0;bs=0;if iw<=br+1 and iw>=br-1 then iK=true else iK=false end;if iG<=bs+1 and iG>=bs-1 then iL=true else iL=false end;if iK and iL then br=nil;bs=nil;bt=true end else if an<OrbitTargetOrbit*0.8 then bo="Escaping planet gravity"br=35 elseif an>=OrbitTargetOrbit*0.8 and an<OrbitTargetOrbit*1.01 then bo="Approaching orbital corridor"br=utils.map(an,OrbitTargetOrbit*0.6,OrbitTargetOrbit,35,0)elseif an>=OrbitTargetOrbit*1.01 and an<OrbitTargetOrbit*1.5 then bo="Approaching orbital corridor"if iv<0 or bu then br=utils.map(an,OrbitTargetOrbit*1.5,OrbitTargetOrbit*1.01,-30,0)else br=utils.map(an,OrbitTargetOrbit*0.99,OrbitTargetOrbit*1.5,0,30)end elseif an>OrbitTargetOrbit*1.5 then br=-80;bo="Reentering orbital corridor"end end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bq)end;if br~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local iM=br-iw;OrbitPitchPID:inject(iM)local iN=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=iN end;if bs~=nil then if iw<85 then local iO=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(iO*0.01,0,iO*0.1)end;local iP=bs-iG;OrbitRollPID:inject(iP)local iQ=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=iQ end end elseif CancelIntoOrbit then BrakeIsOn=true;S=1;W="Orbitting cancelled, parking"OrbitTargetSet=false;OrbitTargetPlanet=nil;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not ag then local iR=AutopilotTargetCoords;local iS=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local iT=(CustomTarget.position-a4.center):normalize()local iU=iT:project_on_plane((a4.center-iu):normalize()):normalize()local iV=a4.center+iU*(a4.radius+AutopilotTargetOrbit)local iW=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(iu-iV):len()<(iu-iW):len()then iR=iV;AutopilotTargetCoords=iR else iR=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=iR end;local cw=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)iS=true;TargetSet=true end;AutopilotPlanetGravity=0;if a4.name==planet.name then if not OrbitAchieved then IntoOrbit=true;OrbitTargetSet=false;OrbitTargetPlanet=a4 else AutopilotCruising=true end end elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;iS=true;TargetSet=true;AutopilotRealigned=true;iR=CustomTarget.position+(iu-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil and not a4.name==planet.name then AutopilotPlanetGravity=0;if not TargetSet then local iT=(iu+bd*100000-a4.center):normalize()local iU=iT:project_on_plane((a4.center-iu):normalize()):normalize()if iU:len()<1 then iT=(iu+vec3(core.getConstructWorldOrientationForward())*100000-a4.center):normalize()iU=iT:project_on_plane((a4.center-iu):normalize()):normalize()end;iR=a4.center+iU*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iR;TargetSet=true;iS=true;AutopilotRealigned=true;local cw=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end elseif CustomTarget==nil and a4.name==planet.name then if not OrbitAchieved then IntoOrbit=true;OrbitTargetSet=false;OrbitTargetPlanet=a4 else Autopilot=false end end;AutopilotDistance=(vec3(iR)-vec3(core.getConstructWorldPos())):len()local fb,fc,fd=b6:getPlanetarySystem(0):castIntersections(iu,bd:normalize(),function(fe)if fe.noAtmosphericDensityAltitude>0 then return fe.radius+fe.noAtmosphericDensityAltitude else return fe.radius+fe.surfaceMaxAltitude*1.5 end end)local ff=fc;if fd~=nil and fc~=nil then ff=math.min(fd,fc)end;if ff~=nil and ff<AutopilotDistance and fb.name==a4.name then AutopilotDistance=ff end;local iA=true;local iX=(a4.center-(vec3(core.getConstructWorldPos())+vec3(bd):normalize()*AutopilotDistance)):len()-a4.radius;local dt,du=getDistanceDisplayString(iX)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dt..'", "unit":"'..du..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)end;if be>300 and AutopilotAccelerating then local dq=vec3(iR)-vec3(core.getConstructWorldPos())local iY=utils.clamp(math.deg(cL(it,bd:normalize(),dq:normalize()))*be/500,-90,90)local iZ=utils.clamp(math.deg(cL(ct,bd:normalize(),dq:normalize()))*be/500,-90,90)if math.abs(iY)<20 and math.abs(iZ)<20 then iY=iY*2;iZ=iZ*2 end;if math.abs(iY)<2 and math.abs(iZ)<2 then iY=iY*2;iZ=iZ*2 end;local ix=-math.deg(cL(it,cs,bd:normalize()))local iy=-math.deg(cL(ct,cs,bd:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iZ-iy)local i_=utils.clamp(apPitchPID:get(),-1,1)O=O+i_;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iY-ix)local j0=utils.clamp(apYawPID:get(),-1,1)P=P+j0;iS=true;if math.abs(iY)>2 or math.abs(iZ)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iX<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(iX)end end;if not AutopilotCruising and not AutopilotBraking and not iS then iA=AlignToWorldVector((iR-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iA=AlignToWorldVector(-vec3(bd):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fD=unit.getThrottle()if AtmoSpeedAssist then fD=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fD==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false end elseif AutopilotBraking then if not IntoOrbit then BrakeIsOn=true;S=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)z=1 end;local _,iF=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dq,j1;if CustomTarget~=nil then dq=CustomTarget.position-iu;j1=planet:getAltitude(CustomTarget.position)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and be<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and be<=iF and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;ag=true;local cw=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then if not OrbitAchieved then IntoOrbit=true;OrbitTargetPlanet=planet;OrbitTargetSet=false else if CustomTarget~=nil then if bd:normalize():dot(dq:normalize())<0.4 then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cw=zeroConvertToMapPosition(a4,CustomTarget.position)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"G=false end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fD=unit.getThrottle()if AtmoSpeedAssist then fD=z end;if fD>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iA then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iA then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;ag=true;local cw=zeroConvertToMapPosition(a4,CustomTarget.position)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end;if U then bc=true;local iZ=0;local cc=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local j2=cc-vec3(core.getConstructWorldPos())local j3=vec3(j2):project_on(vec3(core.getConstructWorldOrientationForward())):len()local j4=vec3(j2):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ac=math.sqrt(j3*j3+j4*j4)AlignToWorldVector(j2:normalize())local j5=40;local j6=ac<j5;local j7=100;local g7=utils.clamp((ac-j5)/2,10,j7)O=0;local iA=math.abs(P)<0.1;if iA and be<g7 and not j6 then BrakeIsOn=false;iZ=-20 else BrakeIsOn=true;iZ=0 end;local j8=0;if math.abs(iZ-cv)>j8 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iZ-cv)local i_=pitchPID:get()O=i_ end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dU=unit.getClosestPlanetInfluence()>0;local j9=HoldAltitude-an;local ja=500+be;local jb=1;if AutoTakeoff then jb=utils.clamp(be/100,0.1,1)end;local iZ=(utils.smoothstep(j9,-ja,ja)-0.5)*2*MaxPitch*jb;if not Reentry and not ag and not VectorToTarget and cs:dot(bd:normalize())<0.99 then iZ=(utils.smoothstep(j9,-ja*utils.clamp(20-19*j()*10,1,20),ja*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jb end;if not AltitudeHold then iZ=0 end;if LockPitch~=nil then if dU then iZ=LockPitch else LockPitch=nil end end;bc=true;local jc=O;if Reentry then local ReentrySpeed=math.floor(bm)local jd,je=b7.computeDistanceAndTime(be,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jf=an-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and an>planet.noAtmosphericDensityAltitude+5000 and be<=ReentrySpeed/3.6 and be>ReentrySpeed/3.6-10 and math.abs(bd:normalize():dot(cs))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jd>-1 and jf<=jd or an<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not J then iZ=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iZ=0;bc=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and an>planet.noAtmosphericDensityAltitude+5000 then bc=true elseif an<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bm then J=false;Reentry=false;bc=true end end end;if be>I and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bd))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and j()>0.01 then local dq;if CustomTarget~=nil then dq=CustomTarget.position-vec3(core.getConstructWorldPos())else dq=a4.center-iu end;local iY=math.deg(cL(cu:normalize(),bd,dq))*2;local jg=math.rad(math.abs(dH))if be>minRollVelocity and j()>0.01 then local jh=utils.clamp(90-iZ*2,-90,90)bk=utils.clamp(iY*2,-jh,jh)local ji=iY;iY=utils.clamp(utils.clamp(iY,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jg)+4*(iw-iZ)*math.sin(math.rad(dH)),-YawStallAngle*0.85,YawStallAngle*0.85)iZ=utils.clamp(utils.clamp(iZ*math.cos(jg),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(ji)*math.sin(jg),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bk=0;iY=utils.clamp(iY,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jj=ix-iY;if not bi and be>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jj)local j0=utils.clamp(yawPID:get(),-1,1)P=P+j0 elseif am and aj>-1 or be<minRollVelocity then AlignToWorldVector(dq)elseif bi and j()>0.01 then if(ix<-YawStallAngle or ix>YawStallAngle)and j()>0.01 then AlignToWorldVector(bd)end;if(iy<-PitchStallAngle or iy>PitchStallAngle)and j()>0.01 then iZ=utils.clamp(iw-iy,iw-PitchStallAngle*0.85,iw+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ah then local j1=planet:getAltitude(CustomTarget.position)local jf=math.sqrt(dq:len()^2-(an-j1)^2)local jk=LastMaxBrakeInAtmo;if jk then jk=jk*utils.clamp(be/100,0.1,1)*j()else jk=LastMaxBrake end;if j()<0.01 then jk=LastMaxBrake else end;local jl=bd:len()-math.abs(ec)local jm=vec3(core.getWorldAirFrictionAcceleration())local jn=math.sqrt(jm:len()-jm:project_on(ee):len())*n()if be>100 then a0,a1=b7.computeDistanceAndTime(be,100,n(),0,0,jk+jn)local jo,jp=b7.computeDistanceAndTime(100,0,n(),0,0,jk/2)a0=a0+jo else a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,jk/2)end;StrongBrakes=true;if not ah and jf<=a0+be*is/2 and(bd:project_on_plane(cu):normalize():dot(dq:project_on_plane(cu):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jl<0.1 or jf<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jf)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jf end end;if bi and j()>0.01 and aj==-1 and be>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bd)iZ=utils.clamp(iw-iy,iw-PitchStallAngle*0.85,iw+PitchStallAngle*0.85)end;O=jc;local fM=-1;local j8=0.1;if BrakeLanding then iZ=0;local jq=false;local jr=30;if b8~=nil and b8>0 then local jn=0;local dN=utils.clamp(j(),0.4,2)local jk=LastMaxBrakeInAtmo*utils.clamp(be/100,0.1,1)*dN;local js=b8*dN+jk+jn-bL;local jt=jk+jn-bL;local ju=jk/2+jn-bL;local jv=be-math.sqrt(math.abs(ju/2)*20/(0.5*n()))*utils.sign(ju)if jv<0 then jv=0 end;local jw;if be>100 then local jx,_=b7.computeDistanceAndTime(be,100,n(),0,0,jk)local jy,_=b7.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jk))jw=jx+jy else jw=b7.computeDistanceAndTime(be,0,n(),0,0,math.sqrt(jk))end;if jw<20 then BrakeIsOn=false else local jz=0;if jv>100 then local jA,_=b7.computeDistanceAndTime(jv,100,n(),0,0,js)local jB,_=b7.computeDistanceAndTime(100,0,n(),0,0,b8*dN+math.sqrt(jk)+jn-bL)jz=jA+jB else jz,_=b7.computeDistanceAndTime(jv,0,n(),0,0,b8*dN+math.sqrt(jk)+jn-bL)end;jz=(jz+15+be*is)*1.1;local jC=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jC then local j1=planet:getAltitude(CustomTarget.position)local jD=an-j1-100;local dq=CustomTarget.position-vec3(core.getConstructWorldPos())local jE=math.sqrt(dq:len()^2-(an-j1)^2)if jE>100 then jC=false elseif jD<=jz or jz==-1 then BrakeIsOn=true;jq=true else BrakeIsOn=false;jq=true end end;if not jC and CalculateBrakeLandingSpeed then if jz>=jr then BrakeIsOn=true else BrakeIsOn=false end;jq=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fM=aj;if fM>-1 then bc=autoRollPreference;if be<1 or bd:normalize():dot(cu)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bd:normalize():dot(-ee)<0.999 then BrakeIsOn=true elseif ec<-brakeLandingRate and not jq then BrakeIsOn=true elseif not jq then BrakeIsOn=false end end;if AutoTakeoff or ah then local fb,fd,fc=b6:getPlanetarySystem(0):castIntersections(iu,(AutopilotTargetCoords-iu):normalize(),function(fe)return fe.radius+fe.noAtmosphericDensityAltitude end)if math.abs(iZ)<15 and an/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and be<I then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 elseif ah then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;BrakeIsOn=true end elseif ah and j()==0 and a4~=nil and(fb==nil or fb.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true elseif j()==0 and(a4~=nil and a4.name==planet.name)then if not OrbitAchieved then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;IntoOrbit=true;OrbitTargetSet=false;OrbitTargetPlanet=planet end end end;local jF=hoverDetectGround()>-1;local jG=cv;if(VectorToTarget or ah)and not jF and be>minRollVelocity and j()>0.01 then local jg=math.rad(math.abs(dH))jG=cv*math.abs(math.cos(jg))+iy*math.sin(jg)end;local jH=utils.clamp(iZ-jG,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jH=utils.clamp(iZ-jG,-85,MaxPitch)elseif j()<0.01 then jH=utils.clamp(iZ-jG,-MaxPitch,MaxPitch)end;if math.abs(dH)<5 or VectorToTarget or BrakeLanding or jF or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jH)local i_=pitchPID:get()O=O+i_ end end;if antigrav and not ExternalAGG and an<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jI=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jJ=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jK=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jL=S;local jM=vec3(core.getWorldVertical())if jM==nil or jM:len()==0 then jM=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jN=vec3(core.getConstructWorldOrientationUp())local jO=vec3(core.getConstructWorldOrientationForward())local jP=vec3(core.getConstructWorldOrientationRight())local jQ=vec3(core.getWorldVelocity())local jR=vec3(core.getWorldVelocity()):normalize()local jS=getRoll(jM,jO,jP)local jT=math.abs(jS)local jU=utils.sign(jS)local j=j()local jV=vec3(core.getWorldAngularVelocity())local jW=jI*pitchSpeedFactor*jP+jJ*rollSpeedFactor*jO+jK*yawSpeedFactor*jN;if jM:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local dH=getRoll(jM,jO,jP)local dI=dH/180*math.pi;local dJ=math.cos(dI)local dK=math.sin(dI)local iw=getPitch(jM,jO,jP*dJ+jN*dK)if bc==true and math.abs(bk-jS)>autoRollRollThreshold and jJ==0 and math.abs(iw)<85 then local jX=bk;local iO=autoRollFactor;if j==0 then iO=iO/4;bk=0;jX=0 end;if rollPID==nil then rollPID=pid.new(iO*0.01,0,iO*0.1)end;rollPID:inject(jX-jS)local jY=rollPID:get()jW=jW+jY*jO end end;if jM:len()>0.01 and j>0.0 then local jZ=20.0;if turnAssist==true and jT>jZ and jI==0 and jK==0 then local j_=turnAssistFactor*0.1;local k0=turnAssistFactor*0.025;local k1=(jT-jZ)/(180-jZ)*180;local k2=0;if k1<90 then k2=k1/90 elseif k1<180 then k2=(180-k1)/90 end;k2=k2*k2;local k3=-jU*k0*(1.0-k2)local k4=j_*k2;jW=jW+k4*jP+k3*jN end end;local k5=1;local k6=0;local k7=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bm=utils.clamp(bm+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bm=utils.clamp(bm-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local ec=-jM:dot(jQ)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bm/3.6-jQ:dot(jO))local k8=throttlePID:get()C=utils.clamp(k8,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jQ:len()-bm/3.6)local k9=utils.clamp(brakePID:get(),0,1)if j>0 and ec<-80 or j>0.005 then A=k9 end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local ka=''local kb=vec3()local kc=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kc,k6)local kd='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kd=kd..ExtraLongitudeTags end;local ke=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kf=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kd,axisCommandId.longitudinal)local kg=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)ka=ka..' , '.."lateral airfoil , lateral ground "kb=kb+kg;if kb:len()>constants.epsilon then Nav:setEngineForceCommand(ka,kb,k6,'','','',k7)end;Nav:setEngineForceCommand(kd,kf,k5)local kh='thrust analog vertical fueled 'local ki='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ki=ki..ExtraLateralTags end;if ExtraVerticalTags~="none"then kh=kh..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kh,kc,k5)else Nav:setEngineForceCommand(kh,vec3(),k5)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ki,kg,k5)else Nav:setEngineForceCommand(ki,vec3(),k5)end;if jL==0 then jL=A end;local kj=-jL*(brakeSpeedFactor*jQ+brakeFlatFactor*jR)Nav:setEngineForceCommand('brake',kj)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kj=-jL*(brakeSpeedFactor*jQ+brakeFlatFactor*jR)Nav:setEngineForceCommand('brake',kj)local ka=''local kb=vec3()local kk=false;local kd='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kd=kd..ExtraLongitudeTags end;local ke=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ke==axisCommandType.byThrottle then local kf=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kd,axisCommandId.longitudinal)Nav:setEngineForceCommand(kd,kf,k5)elseif ke==axisCommandType.byTargetSpeed then local kf=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ka=ka..' , '..kd;kb=kb+kf;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kk=true end end;local ki='thrust analog lateral 'if ExtraLateralTags~="none"then ki=ki..ExtraLateralTags end;local kl=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kl==axisCommandType.byThrottle then local km=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ki,axisCommandId.lateral)Nav:setEngineForceCommand(ki,km,k5)elseif kl==axisCommandType.byTargetSpeed then local kg=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ka=ka..' , '..ki;kb=kb+kg end;local kh='thrust analog vertical 'if ExtraVerticalTags~="none"then kh=kh..ExtraVerticalTags end;local kn=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kn==axisCommandType.byThrottle then local kc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kh,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kh,kc,k5,'airfoil','ground','',k7)else Nav:setEngineForceCommand(kh,vec3(),k5)Nav:setEngineForceCommand('airfoil vertical',kc,k5,'airfoil','','',k7)Nav:setEngineForceCommand('ground vertical',kc,k5,'ground','','',k7)end elseif kn==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),k5)end;local ko=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ka=ka..' , '..kh;kb=kb+ko end;local g7=unit.getAxisCommandValue(0)if kb:len()>constants.epsilon then if S~=0 or kk or math.abs(jR:dot(jO))<0.8 or bd:len()>g7/3.6 then ka=ka..', brake'end;Nav:setEngineForceCommand(ka,kb,k6,'','','',k7)end end;local kp=torqueFactor*(jW-jV)local kq=vec3(core.getWorldAirFrictionAngularAcceleration())kp=kp-kq;Nav:setEngineTorqueCommand('torque',kp,k5,'airfoil','','',k7)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bO=vec3(core.getVelocity()):len()local kr=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ks=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bO*3.6>ks*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO*3.6<ks*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fD=unit.getThrottle()if AtmoSpeedAssist then fD=z*100 end;local g7=fD/100;if j==0 then g7=g7*MaxGameVelocity;if bO>=g7*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO<g7*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else g7=g7*ReentrySpeed/3.6;if bO>=g7*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO<g7*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bz=coroutine.resume(beginSetup)if bz then SetupComplete=true end else Nav:update()if not ba and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kt)if kt=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and aj==-1 and(j()>0 or an<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bc=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kt=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kt=="forward"then N=N-1 elseif kt=="backward"then N=N+1 elseif kt=="left"then Q=Q-1 elseif kt=="right"then Q=Q+1 elseif kt=="yawright"then R=R-1 elseif kt=="yawleft"then R=R+1 elseif kt=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kt=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kt=="up"then a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kt=="down"then a8=a8-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kt=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kt=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kt=="option1"then IncrementAutopilotTargetIndex()H=false elseif kt=="option2"then DecrementAutopilotTargetIndex()H=false elseif kt=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kt=="option4"then ToggleAutopilot()H=false elseif kt=="option5"then ToggleLockPitch()H=false elseif kt=="option6"then ToggleAltitudeHold()H=false elseif kt=="option7"then wipeSaveVariables()H=false elseif kt=="option8"then ToggleFollowMode()H=false elseif kt=="option9"then if gyro~=nil then gyro.toggle()aq=gyro.getState()==1 end;H=false elseif kt=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;bb=false;ba=false end elseif kt=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kt=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kt=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kt=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kt=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kt=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kt=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kt)if kt=="forward"then N=0 elseif kt=="backward"then N=0 elseif kt=="left"then Q=0 elseif kt=="right"then Q=0 elseif kt=="yawright"then R=0 elseif kt=="yawleft"then R=0 elseif kt=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kt=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kt=="up"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kt=="down"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kt=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kt=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kt=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;bb=false;ba=false end elseif kt=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kt=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kt)if kt=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kt=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kt=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kt=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dv)local i;local ku="/commands /setname /G /agg /addlocation /copydatabank"local kv,kw=nil,nil;local kx="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dv," ")kv=dv;if i~=nil then kv=string.sub(dv,0,i-1)kw=string.sub(dv,i+1)elseif not string.find(ku,kv)then for g3 in string.gmatch(kx,"([^\n]+)")do c(g3)end;return end;if kv=="/setname"then if kw==nil or kw==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kw)else W="Select a saved target to rename first"end elseif kv=="/addlocation"then if kw==nil or kw==""or string.find(kw,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kw,"::")local ci=string.sub(kw,1,i-2)local cc=string.sub(kw,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cd='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ce,cf,c9,ca,c8=string.match(cc,cd)local planet=b0[tonumber(ce)][tonumber(cf)]AddNewLocationByWaypoint(ci,planet,cc)W="Added "..ci.." to saved locations,\nplanet "..planet.name.." at "..cc;ab=5 elseif kv=="/agg"then if kw==nil or kw==""then W="Usage: /agg targetheight"return end;kw=tonumber(kw)if kw<1000 then kw=1000 end;AntigravTargetAltitude=kw;W="AGG Target Height set to "..kw elseif kv=="/G"then if kw==nil or kw==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kw=="dump"then for bx,by in pairs(a)do if type(_G[by])=="boolean"then if _G[by]==true then c(by.." true")else c(by.." false")end elseif _G[by]==nil then c(by.." nil")else c(by.." ".._G[by])end end;return end;i=string.find(kw," ")local ky=string.sub(kw,0,i-1)local kz=string.sub(kw,i+1)for bx,by in pairs(a)do if by==ky then W="Variable "..ky.." changed to "..kz;local kA=type(_G[by])if kA=="number"then kz=tonumber(kz)elseif kA=="boolean"then if string.lower(kz)=="true"then kz=true else kz=false end end;_G[by]=kz;return end end;W="No such global variable: "..ky elseif kv=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
