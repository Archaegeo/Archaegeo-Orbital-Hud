name: ButtonsHud - Dimencia and Archaegeo v5.41 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Changes Auto Takeoff to Vertical Takeoff.
        VertTakeOffMode = "Space" --export: (Default: "Space") Set to: "Space" = parks in space, "AGG" = turn on AGG when at 1km, "Orbit" = go directly to orbit. Must keep quotes. Any case is fine.
        VertParkingAlt = 5000 --export: (Default: 5000) Set the height above atmosphere you want to stop at when taking off vertically in space.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;OrbitTargetSet=false;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitAchieved=false;AtmoEngineVertUp=false;AtmoEngineVertDn=false;SpaceEngineVertUp=false;SpaceEngineVertDn=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","VertTakeOffMode","VertParkingAlt","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=1;local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=false;local a6=false;local a7=nil;local a8=0;local a9=0;local aa=false;local ab=0;local ac=0;local ad=0;local ae=3;local af=0;local ag=""local ah=""local ai=0;local aj=false;local ak=false;local al=false;local am=-1;local an=false;local ao=""local ap=j()>0;local aq=core.getAltitude()local ar=core.getElementIdList()local as=system.getTime()local at=nil;local au=false;local av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local ax={}local ay=0;local az=0;local aA=""local aB=true;local aC={}local aD=1;local aE=0.001;local aF=ResolutionX;local aG=ResolutionY;local aH=nil;local aI=nil;local aJ=nil;local aK=nil;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=d(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=16;local b2=0;local b3=nil;local b4=""local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bh=vec3(core.getWorldVelocity())local bi=vec3(bh):len()local bj=math.cos(YawStallAngle*constants.deg2rad)local bk=LandingGearGroundHeight;local bl=system.getMouseDeltaX()local bm=system.getMouseDeltaY()local bn=false;local bo=system.getTime()local bp=0;local bq=0;local br=AtmoSpeedLimit;local bs=0;local bt=nil;local bu=0;local bv=0;local bw=0;local bx=0;local by=false;local bz=false;function LoadVariables()if dbHud_1 then local bA=dbHud_1.hasKey;if not useTheseSettings then for bB,bC in pairs(a)do if bA(bC)then local bD=f(dbHud_1.getStringValue(bC))if bD~=nil then c(bC.." "..dbHud_1.getStringValue(bC))_G[bC]=bD;aL=true end end end end;coroutine.yield()for bB,bC in pairs(b)do if bA(bC)then local bD=f(dbHud_1.getStringValue(bC))if bD~=nil then c(bC.." "..dbHud_1.getStringValue(bC))_G[bC]=bD;aL=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ae=5 elseif aL then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bE=system.getTime()if LastStartTime+180<bE then LastMaxBrakeInAtmo=0 end;if aL then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aF=ResolutionX;aG=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference end;LastStartTime=bE;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ae=5 end;bj=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]br=AtmoSpeedLimit end;function CalculateFuelVolume(bF,bG)if bF>bG then bG=bF end;if ContainerOptimization>0 then bG=bG-bG*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bG=bG-bG*FuelTankOptimization*0.05 end;return bG end;function ProcessElements()local bH=fuelX~=0 and fuelY~=0;for bB in pairs(ar)do local type=l(ar[bB])if string.match(type,'^.*Space Engine$')then if string.match(tostring(core.getElementTagsById(ar[bB])),'^.*vertical.*$')then local bI=core.getElementRotationById(ar[bB])if bI[4]<0 then if utils.round(-bI[4],0.1)==0.5 then SpaceEngineVertUp=true;system.print("Space Engine Up detected")end else if utils.round(bI[4],0.1)==0.5 then SpaceEngineVertDn=true;system.print("Space Engine Down detected")end end end end;if string.match(type,'^.*Atmospheric Engine$')then if string.match(tostring(core.getElementTagsById(ar[bB])),'^.*vertical.*$')then local bI=core.getElementRotationById(ar[bB])if bI[4]<0 then if utils.round(-bI[4],0.1)==0.5 then AtmoEngineVertUp=true;system.print("Atmo Engine Up detected")end else if utils.round(bI[4],0.1)==0.5 then AtmoEngineVertDn=true;system.print("Atmo Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bJ=h(ar[bB])if bJ>10000 then b1=128 elseif bJ>1000 then b1=64 elseif bJ>150 then b1=32 end end;aS=aS+h(ar[bB])if bH and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bJ=h(ar[bB])local bK=m(ar[bB])local bF=0;local bL=system.getTime()if type=="Atmospheric Fuel Tank"then local bG=400;local bM=35.03;if bJ>10000 then bG=51200;bM=5480 elseif bJ>1300 then bG=6400;bM=988.67 elseif bJ>150 then bG=1600;bM=182.67 end;bF=bK-bM;if fuelTankHandlingAtmo>0 then bG=bG+bG*fuelTankHandlingAtmo*0.2 end;bG=CalculateFuelVolume(bF,bG)aP[#aP+1]={ar[bB],core.getElementNameById(ar[bB]),bG,bM,bF,bL}end;if type=="Rocket Fuel Tank"then local bG=320;local bM=173.42;if bJ>65000 then bG=40000;bM=25740 elseif bJ>6000 then bG=5120;bM=4720 elseif bJ>700 then bG=640;bM=886.72 end;bF=bK-bM;if fuelTankHandlingRocket>0 then bG=bG+bG*fuelTankHandlingRocket*0.1 end;bG=CalculateFuelVolume(bF,bG)aR[#aR+1]={ar[bB],core.getElementNameById(ar[bB]),bG,bM,bF,bL}end;if type=="Space Fuel Tank"then local bG=2400;local bM=182.67;if bJ>10000 then bG=76800;bM=5480 elseif bJ>1300 then bG=9600;bM=988.67 end;bF=bK-bM;if fuelTankHandlingSpace>0 then bG=bG+bG*fuelTankHandlingSpace*0.2 end;bG=CalculateFuelVolume(bF,bG)aQ[#aQ+1]={ar[bB],core.getElementNameById(ar[bB]),bG,bM,bF,bL}end end end end;function SetupChecks()if gyro~=nil then at=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a5=true else a6=true end end;local bN=j()if door and(bN>0 or bN==0 and aq<10000)then for _,bC in pairs(door)do bC.toggle()end end;if switch then for _,bC in pairs(switch)do bC.toggle()end end;if forcefield and(bN>0 or bN==0 and aq<10000)then for _,bC in pairs(forcefield)do bC.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bO=AboveGroundLevel()if bO~=-1 or not ap and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bk~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bk)if bk==0 and not M then GearExtended=true;BrakeIsOn=true end else bk=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ap and bO~=-1 then bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ap end;function ConvertResolutionX(bC)if ResolutionX==1920 then return bC else return round(ResolutionX*bC/1920,0)end end;function ConvertResolutionY(bC)if ResolutionY==1080 then return bC else return round(ResolutionY*bC/1080,0)end end;function RefreshLastMaxBrake(bP,bQ)if bP==nil then bP=core.g()end;bP=round(bP,5)local bR=j()if bQ~=nil and bQ or(aO==nil or aO~=bP)then local bh=core.getVelocity()local bS=vec3(bh):len()local bT=f(unit.getData()).maxBrake;if bT~=nil and bT>0 and ap then bT=bT/utils.clamp(bS/100,0.1,1)bT=bT/bR;if bR>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bT)/2 else LastMaxBrakeInAtmo=bT end end end;if bT~=nil and bT>0 then LastMaxBrake=bT end;aO=bP end end;function MakeButton(bU,bV,bW,bX,bY,bZ,b_,c0,c1)local c2={enableName=bU,disableName=bV,width=bW,height=bX,x=bY,y=bZ,toggleVar=b_,toggleFunction=c0,drawCondition=c1,hovered=false}table.insert(aC,c2)return c2 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bB,bC in pairs(b3[0])do table.insert(AtlasOrdered,{name=bC.name,index=bB})end;local function c3(c4,c5)return c4.name<c5.name end;table.sort(AtlasOrdered,c3)end;function AddLocationsToAtlas()for bB,bC in pairs(SavedLocations)do table.insert(b3[0],bC)end;UpdateAtlasLocationsList()end;function float_eq(c6,c7)if c6==0 then return math.abs(c7)<1e-09 end;if c7==0 then return math.abs(c6)<1e-09 end;return math.abs(c6-c7)<math.max(math.abs(c6),math.abs(c7))*epsilon end;function zeroConvertToMapPosition(c8,c9)local ca=vec3(c9)if c8.bodyId==0 then return setmetatable({latitude=ca.x,longitude=ca.y,altitude=ca.z,bodyId=0,systemId=c8.planetarySystemId},MapPosition)end;local cb=ca-c8.center;local af=cb:len()local cc=af-c8.radius;local cd=0;local ce=0;if not float_eq(af,0)then local cf=math.atan(cb.y,cb.x)ce=cf>=0 and cf or 2*math.pi+cf;cd=math.pi/2-math.acos(cb.z/af)end;return setmetatable({latitude=math.deg(cd),longitude=math.deg(ce),altitude=cc,bodyId=c8.bodyId,systemId=c8.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cg)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ch='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ci,cj,cd,ce,cc=string.match(cg,ch)if ci=="0"and cj=="0"then return vec3(tonumber(cd),tonumber(ce),tonumber(cc))end;ce=math.rad(ce)cd=math.rad(cd)local planet=b3[tonumber(ci)][tonumber(cj)]local ck=math.cos(cd)local cl=vec3(ck*math.cos(ce),ck*math.sin(ce),math.sin(cd))return planet.center+(planet.radius+cc)*cl end;function AddNewLocationByWaypoint(cm,planet,cg)if dbHud_1 then local cn={}local position=zeroConvertToWorldCoordinates(cg)if planet.name=="Space"then cn={position=position,name=cm,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bN=false;if planet.hasAtmosphere then bN=true else bN=false end;cn={position=position,name=cm,atmosphere=bN,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cn;table.insert(b3[0],cn)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local co=planet.name..". "..#SavedLocations;if radar_1 then local cp,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cp~=nil and cp~=""then co=co.." "..radar_1.getConstructName(cp)end end;local cn={}local bN=false;if planet.hasAtmosphere then bN=true end;cn={position=position,name=co,atmosphere=bN,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cn;table.insert(b3[0],cn)UpdateAtlasLocationsList()W="Location saved as "..co else W="Databank must be installed to save locations"end end;function UpdatePosition(cq)local cr=-1;local cn;for bB,bC in pairs(SavedLocations)do if bC.name and bC.name==CustomTarget.name then cr=bB;break end end;if cr~=-1 then local cs;if cq~=nil then cn={position=SavedLocations[cr].position,name=cq,atmosphere=SavedLocations[cr].atmosphere,planetname=SavedLocations[cr].planetname,gravity=SavedLocations[cr].gravity}else cn={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cr].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cr]=cn;cr=-1;for bB,bC in pairs(b3[0])do if bC.name and bC.name==CustomTarget.name then cr=bB end end;if cr>-1 then b3[0][cr]=cn end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cr=-1;for bB,bC in pairs(b3[0])do if bC.name and bC.name==CustomTarget.name then cr=bB end end;if cr>-1 then table.remove(b3[0],cr)end;cr=-1;for bB,bC in pairs(SavedLocations)do if bC.name and bC.name==CustomTarget.name then W=bC.name.." saved location cleared"cr=bB;break end end;if cr~=-1 then table.remove(SavedLocations,cr)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ct)ct[#ct+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ai==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ai==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ai=0 end end;function ToggleWidgets()if aB then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aB=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aB=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cu,cv,bY,bZ,bW,bX)if cu>bY and cu<bY+bW and cv>bZ and cv<bZ+bX then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if OrbitAchieved then CancelIntoOrbit=false else CancelIntoOrbit=true end;IntoOrbit=false;by=false;bw=nil;bx=nil;OrbitTargetPlanet=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;OrbitAchieved=false;CancelIntoOrbit=false;by=false;bw=nil;bx=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end else W="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cw=vec3(core.getConstructWorldOrientationForward())local cx=vec3(core.getConstructWorldOrientationRight())local cy=vec3(core.getWorldVertical())local cz=getPitch(cy,cw,cx)LockPitch=cz;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bE=system.getTime()if bE-bq<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bq=-1;if AltitudeHold then return end end else bq=bE end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bf=true;LockPitch=nil;if hoverDetectGround()==-1 or not ap or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bq>-1 then HoldAltitude=aq end;if not ak and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bq>-1 then HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ak then HoldAltitude=100000 end else bf=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ak then UpdateAutopilotTarget()local cA=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ak=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aq>100000 or aq==0 then Autopilot=true else aj=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ak=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false else ak=true;ToggleAltitudeHold()end else ak=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aq;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;bf=autoRollPreference;aj=false;al=false;ab=0 end end;function CheckDamage(ct)local cB=0;aA=""local cC=aS;local cD=0;local cE=0;local cF=0;local cG=0;local cH=""for bB in pairs(ar)do local bJ=0;local cI=0;cI=h(ar[bB])bJ=k(ar[bB])cD=cD+bJ;if bJ<cI then if bJ==0 then cF=cF+1 else cE=cE+1 end;if aT and#ax==0 then position=vec3(core.getElementPositionById(ar[bB]))local bY=position.x-b1;local bZ=position.y-b1;local cJ=position.z-b1;table.insert(ax,core.spawnArrowSticker(bY,bZ,cJ+1,"down"))table.insert(ax,core.spawnArrowSticker(bY,bZ,cJ+1,"down"))core.rotateSticker(ax[2],0,0,90)table.insert(ax,core.spawnArrowSticker(bY+1,bZ,cJ,"north"))table.insert(ax,core.spawnArrowSticker(bY+1,bZ,cJ,"north"))core.rotateSticker(ax[4],90,90,0)table.insert(ax,core.spawnArrowSticker(bY-1,bZ,cJ,"south"))table.insert(ax,core.spawnArrowSticker(bY-1,bZ,cJ,"south"))core.rotateSticker(ax[6],90,-90,0)table.insert(ax,core.spawnArrowSticker(bY,bZ-1,cJ,"east"))table.insert(ax,core.spawnArrowSticker(bY,bZ-1,cJ,"east"))core.rotateSticker(ax[8],90,0,90)table.insert(ax,core.spawnArrowSticker(bY,bZ+1,cJ,"west"))table.insert(ax,core.spawnArrowSticker(bY,bZ+1,cJ,"west"))core.rotateSticker(ax[10],-90,0,90)table.insert(ax,ar[bB])end elseif aT and#ax>0 and ax[11]==ar[bB]then for cK in pairs(ax)do core.deleteSticker(ax[cK])end;ax={}end end;cB=d(cD/cC*100)if cB<100 then ct[#ct+1]=[[<g class="pbright txt">]]cG=d(cB*2.55)cH=e("rgb(%d,%d,%d)",255-cG,cG,0)if cB<100 then ct[#ct+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cH,cB)if cF>0 then ct[#ct+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cH,cF,cE)elseif cE>0 then ct[#ct+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cH,cE)end end;ct[#ct+1]=[[<\g>]]end end;function DrawCursorLine(ct)local cL=d(utils.clamp(af/(aF/4)*255,0,255))ct[#ct+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ac,ad,d(t+0.5)+cL,d(v+0.5)-cL,d(u+0.5)-cL)end;function getPitch(cM,cN,c5)local cO=cM:cross(c5):normalize_inplace()local cz=math.acos(utils.clamp(cO:dot(-cN),-1,1))*constants.rad2deg;if cO:cross(-cN):dot(c5)<0 then cz=-cz end;return cz end;local function cP(cQ,cR,cS)cR=cR:project_on_plane(cQ)cS=cS:project_on_plane(cQ)return p(cR:cross(cS):dot(cQ),cR:dot(cS))end;function clearAll()if an then an=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;aj=false;ak=false;J=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;at=false;LockPitch=nil else an=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ae=5 else if aM then for bB,bC in pairs(a)do dbHud_1.setStringValue(bC,g(nil))end;for bB,bC in pairs(b)do if bC~="SavedLocations"then dbHud_1.setStringValue(bC,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ae=5;aM=false;aL=false;aa=true else W="Press ALT-7 again to confirm wipe of ALL data"aM=true end end end;function CheckButtons()for _,bC in pairs(aC)do if bC.hovered then if not bC.drawCondition or bC.drawCondition()then bC.toggleFunction()end;bC.hovered=false end end end;function SetButtonContains()local bY=ac+aF/2;local bZ=ad+aG/2;for _,bC in pairs(aC)do bC.hovered=Contains(bY,bZ,bC.x,bC.y,bC.width,bC.height)end end;function DrawButton(ct,cT,hover,bY,bZ,cU,cV,cW,cX,cY,cZ)if type(cY)=="function"then cY=cY()end;if type(cZ)=="function"then cZ=cZ()end;ct[#ct+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bY,bZ,cU,cV)if cT then ct[#ct+1]=e("%s'",cW)else ct[#ct+1]=cX end;if hover then ct[#ct+1]=" style='stroke:white; stroke-width:2'"else ct[#ct+1]=" style='stroke:black; stroke-width:1'"end;ct[#ct+1]="></rect>"ct[#ct+1]=e("<text x='%f' y='%f' font-size='24' fill='",bY+cU/2,bZ+cV/2+5)if cT then ct[#ct+1]="black"else ct[#ct+1]="white"end;ct[#ct+1]="' text-anchor='middle' font-family='Montserrat'>"if cT then ct[#ct+1]=e("%s</text>",cY)else ct[#ct+1]=e("%s</text>",cZ)end end;function DrawButtons(ct)local c_="rgb(50,50,50)'"local d0="rgb(210,200,200)"local d1=DrawButton;for _,bC in pairs(aC)do local bV=bC.disableName;local bU=bC.enableName;if type(bV)=="function"then bV=bV()end;if type(bU)=="function"then bU=bU()end;if not bC.drawCondition or bC.drawCondition()then d1(ct,bC.toggleVar(),bC.hovered,bC.x,bC.y,bC.width,bC.height,d0,c_,bV,bU)end end end;function DrawTank(ct,b0,bY,d2,d3,d4,d5,d6)local d7=1;local d8=2;local d9=3;local da=4;local db=5;local dc=6;local dd=""local de=0;local df=fuelY;local dg=fuelY+10;if o()==1 and not RemoteHud then df=df-50;dg=dg-50 end;ct[#ct+1]=[[<g class="pdim txtfuel">]]if d3=="ATMO"then dd="atmofueltank"elseif d3=="SPACE"then dd="spacefueltank"else dd="rocketfueltank"end;de=_G[dd.."_size"]if#d4>0 then for i=1,#d4 do local co=string.sub(d4[i][d8],1,12)local dh=0;for cK=1,de do if d4[i][d8]==f(unit[dd.."_"..cK].getData()).name then dh=cK;break end end;if b0 or d5[i]==nil or d6[i]==nil then local di=0;local dj=0;local dk=0;local dl=0;local bL=system.getTime()if dh~=0 then d6[i]=f(unit[dd.."_"..dh].getData()).percentage;d5[i]=f(unit[dd.."_"..dh].getData()).timeLeft;if d5[i]=="n/a"then d5[i]=0 end else dk=m(d4[i][d7])-d4[i][da]di=d4[i][d9]d6[i]=d(0.5+dk*100/di)dj=d4[i][db]dl=d4[i][dc]if dj<=dk then d5[i]=0 else d5[i]=d(0.5+dk/((dj-dk)/(bL-dl)))end;d4[i][db]=dk;d4[i][dc]=bL end end;if co==d2 then co=e("%s %d",d3,i)end;if dh==0 then co=co.." *"end;local dm;if d5[i]==0 then dm="n/a"else dm=FormatTimeString(d5[i])end;if d6[i]~=nil then local cG=d(d6[i]*2.55)local cH=e("rgb(%d,%d,%d)",255-cG,cG,0)local dn=""if dm~="n/a"and d5[i]<120 or d6[i]<5 then if b0 then dn=[[class="red"]]end end;ct[#ct+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bY,df,dn,co,bY,dg,cH,d6[i],dm)df=df+30;dg=dg+30 end end end;ct[#ct+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bh)bh=vec3(bh)local cz=-math.deg(math.atan(bh.y,bh.z))+180;cz=cz-90;if cz<0 then cz=360+cz end;if cz>180 then cz=-180+cz-180 end;return-cz end;function getRelativeYaw(bh)bh=vec3(bh)local dp=math.deg(math.atan(bh.y,bh.x))-90;if dp<-180 then dp=360+dp end;return dp end;function AlignToWorldVector(dq,dr,ds)if not ap or not bn or am~=-1 or bi<I then local dt=ds;if dt==nil then dt=DampingMultiplier end;if dr==nil then dr=aE end;dq=vec3(dq):normalize()local du=vec3(core.getConstructWorldOrientationForward())-dq;local dv=-getMagnitudeInDirection(du,core.getConstructWorldOrientationRight())*aD;local dw=-getMagnitudeInDirection(du,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=dv/2 end;if az==0 then az=dw/2 end;if math.abs(dv)<0.1 then P=P-dv*2 else P=P-(dv+(dv-ay)*dt)end;if math.abs(dw)<0.1 then O=O+dw*2 else O=O+dw+(dw-az)*dt end;ay=dv;az=dw;if math.abs(dv)<dr and math.abs(dw)<dr then return true end;return false elseif bn and am==-1 then dq=vec3(core.getWorldVelocity())local dt=ds;if dt==nil then dt=DampingMultiplier end;if dr==nil then dr=aE end;dq=vec3(dq):normalize()local du=vec3(core.getConstructWorldOrientationForward())-dq;local dv=-getMagnitudeInDirection(du,core.getConstructWorldOrientationRight())*aD;local dw=-getMagnitudeInDirection(du,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=dv/2 end;if az==0 then az=dw/2 end;if math.abs(dv)<0.1 then P=P-dv*5 else P=P-(dv+(dv-ay)*dt)end;if math.abs(dw)<0.1 then O=O+dw*5 else O=O+dw+(dw-az)*dt end;ay=dv;az=dw;if math.abs(dv)<dr and math.abs(dw)<dr then return true end;return false end end;function getAPEnableName()local co=AutopilotTargetName;if co==nil then local dx,dy=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())co=CustomTarget.name.." "..dx..dy end;if co==nil then co="None"end;return"Engage Autopilot: "..co end;function getAPDisableName()local co=AutopilotTargetName;if co==nil then co=CustomTarget.name end;if co==nil then co="None"end;return"Disable Autopilot: "..co end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ae=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dz,dA=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..br.." Target Altitude: "..dz..dA end;AutoTakeoff=false end;function SetupButtons()local dB=50;local dC=260;local dD=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dC,dB,aF/2-dC/2,aG/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dC,dB,aF/2-dC/2-50-dD.width,aG/2-dB+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dC,dB,aF/2-dC/2+dD.width+50,aG/2-dB+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dE=MakeButton(getAPEnableName,getAPDisableName,600,60,aF/2-600/2,aG/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dE.height,dE.x+dE.width+30,dE.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dE.height,dE.x+dE.width+30,dE.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dE.height,dE.x-200-30,dE.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dB=60;dC=300;local bY=10;local bZ=aG/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dC,dB,bY,bZ,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dC,dB,bY+dC+20,bZ,function()return AltitudeHold end,ToggleAltitudeHold)bZ=bZ+dB+20;MakeButton("Engage Autoland","Disable Autoland",dC,dB,bY,bZ,function()return AutoLanding end,ToggleAutoLanding)if VertTakeOffEngine then MakeButton("Engage Vertical Takeoff","Disable Vertical Takeoff",dC,dB,bY+dC+20,bZ,function()return VertTakeOff end,ToggleAutoTakeoff)else MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dC,dB,bY+dC+20,bZ,function()return AutoTakeoff end,ToggleAutoTakeoff)end;bZ=bZ+dB+20;MakeButton("Show Orbit Display","Hide Orbit Display",dC,dB,bY,bZ,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dC,dB,bY+dC+20,bZ,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)bZ=bZ+dB+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dC,dB,bY,bZ,function()return Reentry end,function()aj=true;ProgradeToggle()end,function()return aq>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dC,dB,bY+dC+20,bZ,function()return Reentry end,BeginReentry,function()return aq>ReentryAltitude end)bZ=bZ+dB+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dC,dB,bY,bZ,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dC,dB,bY+dC+20,bZ,function()return aT end,function()aT=not aT;if aT then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)bZ=bZ+dB+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dC,dB,bY,bZ,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bZ=bZ+dB+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dC*2,dB,bY,bZ,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dF=Nav.axisCommandManager:getAxisCommandType(0)local dG="TRAVEL"if dF==1 then dG="CRUISE"end;if Autopilot then dG="AUTOPILOT"end;return dG end;function UpdateHud(ct)local cc=aq;local bh=core.getVelocity()local bS=vec3(bh):len()local cy=vec3(core.getWorldVertical())local cw=vec3(core.getConstructWorldOrientationForward())local cx=vec3(core.getConstructWorldOrientationRight())local dH=vec3(core.getConstructWorldOrientationUp())local dI=getRoll(cy,cw,cx)local dJ=dI/180*math.pi;local dK=math.cos(dJ)local dL=math.sin(dJ)local cz=getPitch(cy,cw,cx*dK+dH*dL)local dM=dI;local dN=cz;local dO=j()local dP=d(unit.getThrottle())local dQ=bS*3.6;local dR=unit.getAxisCommandValue(0)local dS=ConvertResolutionX(1770)local dT=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dR=z;dP=z*100 end;local dG=GetFlightStyle()local dU="ROLL"local dV=unit.getClosestPlanetInfluence()>0;if dP==nil then dP=0 end;if not dV then if bS>5 then cz=getRelativePitch(bh)dI=getRelativeYaw(bh)else cz=0;dI=0 end;dU="YAW"end;if x>50000 and not ap then local dW;if x>200000 then dW=round(x/200000,2).." su"else dW=round(x/1000,1).." km"end;ct[#ct+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dS,dT,dW)end;ct[#ct+1]=ah;ct[#ct+1]=aA;ct[#ct+1]=ag;if b2%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ct,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)DrawTank(ct,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)DrawTank(ct,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b2=0 end;b2=b2+1;DrawVerticalSpeed(ct,cc)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dV then DrawRollLines(ct,centerX,centerY,dM,dU,dV)DrawArtificialHorizon(ct,dN,dM,centerX,centerY,dV,d(getRelativeYaw(bh)),bS)else DrawRollLines(ct,centerX,centerY,dI,dU,dV)DrawArtificialHorizon(ct,cz,dI,centerX,centerY,dV,d(dI),bS)end;DrawAltitudeDisplay(ct,cc,dV)DrawPrograde(ct,bh,bS,centerX,centerY)end end;DrawThrottle(ct,dG,dP,dR)DrawSpeed(ct,dQ)DrawWarnings(ct)DisplayOrbitScreen(ct)if screen_2 then local cg=vec3(core.getConstructWorldPos())local bY=960+cg.x/b5;local bZ=450+cg.y/b6;screen_2.moveContent(b7,(bY-80)/19.2,(bZ-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(ct)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local dX=av;local dY=aw;local dZ=av;local d_=aw;if IsInFreeLook()and not brightHud then dX=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]dY=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;ct[#ct+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dX,dX,dZ,dZ,dY,dY,d_,d_,ResolutionX,ResolutionY)end;function HUDEpilogue(ct)ct[#ct+1]="</svg>"end;function DrawSpeed(ct,dQ)local e0=throtPosY-10;local e1=throtPosX+10;ct[#ct+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e0=75 end;ct[#ct+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e1,e0,d(dQ))end;function DrawOdometer(ct,a8,TotalDistanceTravelled,dG,a9,dO)local e2=ConvertResolutionX(1240)local e3=ConvertResolutionY(55)local e4=e3+10;local dO=j()local bP=core.g()local e5=0;local e6=0;local e7=0;RefreshLastMaxBrake(bP)if ap then e7=LastMaxBrakeInAtmo else e7=LastMaxBrake end;maxThrust=Nav:maxForceForward()aN=n()if not ShowOdometer then return end;local e8=vec3(core.getWorldAcceleration()):len()/9.80665;if bP>0.1 then e6=aN*bP;e5=maxThrust/bP end;ct[#ct+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e2=ConvertResolutionX(1120)e3=ConvertResolutionY(55)e4=e3+10 elseif ap then local e9=ConvertResolutionX(770)ct[#ct+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],e9,e3,e9,e4,dO)end;ct[#ct+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e2,e3,e2,e4,bP/9.80665,e2,e3+20,e2,e4+20,e8)ct[#ct+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then ct[#ct+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a8,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a9),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aN/1000,ConvertResolutionX(1240),ConvertResolutionY(10),e7/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dG)if bP>0.1 then ct[#ct+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e5/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e6/1000)else ct[#ct+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else ct[#ct+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dG)end;ct[#ct+1]="</g>"end;function DrawThrottle(ct,dG,dP,dR)dP=math.floor(dP+0.5)local df=throtPosY+10;local dg=throtPosY+20;if o()==1 and not RemoteHud then df=55;dg=65 end;local ea="CRUISE"local unit="km/h"local eb=dR;if dG=="TRAVEL"or dG=="AUTOPILOT"then ea="THROT"unit="%"eb=dP;local ec="dim"if dP<0 then ec="red"end;ct[#ct+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ec,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ct[#ct+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,df,ea,throtPosX+10,dg,eb,unit)if ap and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dP=math.floor(C*100+0.5)local ec="red"if dP<0 then ec="red"end;ct[#ct+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ec,1-math.abs(dP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)ct[#ct+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,df+40,"LIMIT",throtPosX+10,dg+40,dP,"%")end;if ap and AtmoSpeedAssist or Reentry then ct[#ct+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,df-40,"LIMIT: ",br.." km/h")elseif not ap and Autopilot then ct[#ct+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,df-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(ct,cc)if cc<200000 and not ap or cc and ap then local ed=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local ee=0;if math.abs(ed)>1 then ee=45*math.log(math.abs(ed),10)if ed<0 then ee=-ee end end;ct[#ct+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(ed),d(ee))end end;function getHeading(cN)local ef=-vec3(core.getWorldVertical())cN=cN-cN:project_on(ef)local eg=vec3(0,0,1)eg=eg-eg:project_on(ef)local eh=eg:cross(ef)local ee=eg:angle_between(cN)*constants.rad2deg;if cN:dot(eh)<0 then ee=360-ee end;return ee end;function DrawRollLines(ct,centerX,centerY,dM,dU,dV)local ei=circleRad;local ej=20;ej=d(ej)local ek=d(dM)if dV then for i=-45,45,5 do local el=i;ct[#ct+1]=e([[<g transform="rotate(%f,%d,%d)">]],el,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ct[#ct+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+ei+ej-len,centerX,centerY+ei+ej)end;ct[#ct+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+ei+ej-35,dU,centerX,centerY+ei+ej-25,ek)ct[#ct+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dM,centerX,centerY)ct[#ct+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+ei+ej-20,centerX+5,centerY+ei+ej-20,centerX,centerY+ei+ej-15)ct[#ct+1]="</g>"end;local dp=ek;if dV then dp=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local em=20;local en=d(dp)local eo=0;local ep=centerY+ei+ej+20;local eq=centerX;if dU~="YAW"then ep=ConvertResolutionY(130)eq=ConvertResolutionX(960)end;local er=[[<path class="txttick line" d="]]for i=d(en-(em+10)-en%5+0.5),d(en+em+10+en%5+0.5),5 do local bY=eq+-i*5+dp*5;if i%10==0 then eo=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;ct[#ct+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bY+5,ep-12,q)elseif i%5==0 then eo=5 end;if eo==10 then er=e([[%s M %f %f v %d]],er,bY,ep-5,eo)else er=e([[%s M %f %f v %d]],er,bY,ep-2.5,eo)end end;ct[#ct+1]=er..[["/>]]ct[#ct+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eq-5,ep+10,eq+5,ep+10,eq,ep+5)if dV then dU="HDG"end;ct[#ct+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eq,ep+25,en,eq,ep+35,dU)end;function DrawArtificialHorizon(ct,dN,dM,centerX,centerY,dV,es,bS)local ei=circleRad;local et=d(ei*3/5)if ei>0 then local eu=d(dN)local len=0;local er=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dM,centerX,centerY)if not ap then er=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ct[#ct+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],ei-1,centerX,centerY)ct[#ct+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eu-30-eu%5+0.5),d(eu+30+eu%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bZ=centerY+-i*5+dN*5;if len==30 then er=e([[%s M %d %f h %d]],er,centerX-et-len,bZ,len)if ap then ct[#ct+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dM,centerX,centerY,centerX-et+10,bZ,i)ct[#ct+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dM,centerX,centerY,centerX+et-10,bZ,i)if i==0 or i==180 or i==-180 then ct[#ct+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dM,centerX,centerY,centerX-et+20,bZ,et*2-40)end else ct[#ct+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-et+10,bZ,i)ct[#ct+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+et-10,bZ,i)end;er=e([[%s M %d %f h %d]],er,centerX+et,bZ,len)else er=e([[%s M %d %f h %d]],er,centerX-et-len,bZ,len)er=e([[%s M %d %f h %d]],er,centerX+et,bZ,len)end end;ct[#ct+1]=er..[["/>]]local ev="PITCH"if not dV then ev="REL PITCH"end;if dN>90 and not ap then dN=90-(dN-90)elseif dN<-90 and not ap then dN=-90-(dN+90)end;if ei>200 then if ap then if bS>I then ct[#ct+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,es)end;ct[#ct+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dM,centerX,centerY)else ct[#ct+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ct[#ct+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-et+25,centerY-5,centerX-et+20,centerY,centerX-et+25,centerY+5,centerX-et+50,centerY+4,eu)ct[#ct+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+et-25,centerY-5,centerX+et-20,centerY,centerX+et-25,centerY+5,centerX+et-30,centerY+4,eu)ct[#ct+1]="</g>"end;local ew=d(ei/3)ct[#ct+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ew,centerY,ei-ew)if not ap and dV then ct[#ct+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dM,centerX,centerY,centerX-et+10,centerY,et*2-20)end;ct[#ct+1]="</g>"if ei<200 then if ap and bS>I then ct[#ct+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ei,ev,centerX,centerY-ei+10,eu,centerX,centerY-15,"Yaw",centerX,centerY+20,es)else ct[#ct+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ei,ev,centerX,centerY-ei+15,eu)end end end end;function DrawAltitudeDisplay(ct,cc,dV)local ex=altMeterX;local ey=altMeterY;local ez=78;local eA=19;local eB=AboveGroundLevel()if eB~=-1 then table.insert(ct,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ex+ez,ey+eA+20,eB))end;if dV and(cc<200000 and not ap or cc and ap)then table.insert(ct,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ex-1,ey-4,ez+2,eA+6,ex+1,ey-1,ez-4,eA))local cr=0;local eC=1;local eD=0;local eE=cc<0;local eF=9;if eE then eF=0 end;local cc=math.abs(cc)while cr<6 do local eG=11;local eH=16;local eI=9;local eJ=14;local dn="altsm"if cr>2 then eH=eH+3;eG=eG+2;eJ=eJ+2;eI=eI-6;dn="altbig"end;if eE then dn=dn.." red"end;local eK=cc/eC%10;local eL=d(eK)local eM=d((eL+1)%10)local eN=eD;if cr==0 then eN=eK-eL;if eE then eN=1-eN end end;if eE and(cr==0 or eD~=0)then local eO=eM;eM=eL;eL=eO end;local eP=eH*(eN-1)local eQ=eP+eH;local bY=ex+eI+(6-cr)*eG;local bZ=ey+eJ;table.insert(ct,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dn,bY,bZ+eP,eM,bY,bZ+eQ,eL))cr=cr+1;eC=eC*10;if eL==eF then eD=eN else eD=0 end end;table.insert(ct,[[</g></g>]])end end;function DrawPrograde(ct,bh,bS,centerX,centerY)if bS>5 and not ap or bS>I then local ei=circleRad;local eR=20;local eS=20;local eT=vec3(bh)local eU=getRelativePitch(eT)local eV=getRelativeYaw(eT)local eW=14;local eX=eW/2;local eY=-eV/eS*ei;local eZ=eU/eR*ei;local bY=centerX+eY;local bZ=centerY+eZ;local af=math.sqrt(eY^2+eZ^2)local e_=[[<circle
                cx="]]..bY..[["
                cy="]]..bZ..[["
                r="]]..eX/eW..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bY..[["
                cy="]]..bZ..[["
                r="]]..eX..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bY-eW..[[,]]..bZ..[[ h ]]..eX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bY+eX..[[,]]..bZ..[[ h ]]..eX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bY..[[,]]..bZ-eW..[[ v ]]..eX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if af<ei then ct[#ct+1]=e_ else local ee=math.atan(eZ,eY)local f0=4;local f1=centerX+ei*math.cos(ee)local f2=centerY+ei*math.sin(ee)ct[#ct+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ee*180/math.pi,f1,f2,f1-f0,f2-f0/2,f0*2,f0,f1+f0,f2-f0,f0,f0,-f0,f0)end;if not ap then eU=getRelativePitch(-eT)eV=getRelativeYaw(-eT)eY=-eV/eS*ei;eZ=eU/eR*ei;bY=centerX+eY;bZ=centerY+eZ;af=math.sqrt(eY^2+eZ^2)if af<ei then local f3=[[<circle
                        cx="]]..bY..[["
                        cy="]]..bZ..[["
                        r="]]..eX..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bY..[[,]]..bZ-eW..[[ v ]]..eX..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bY..[[,]]..bZ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bY..[[,]]..bZ..[[)" />
                     <path
                        d="M ]]..bY-eX..[[,]]..bZ..[[ h ]]..eW..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bY..[[,]]..bZ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bY..[[,]]..bZ..[[)"/>]]ct[#ct+1]=f3 end end end end;function DrawWarnings(ct)ct[#ct+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)ct[#ct+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ct[#ct+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))ct[#ct+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))ct[#ct+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f4=ConvertResolutionX(960)local f5=ConvertResolutionY(860)local f6=ConvertResolutionY(880)local f7=ConvertResolutionY(900)local f8=ConvertResolutionY(960)local f9=ConvertResolutionY(200)local fa=ConvertResolutionY(150)local fb=ConvertResolutionY(960)if o()==1 and not RemoteHud then f5=ConvertResolutionY(135)f6=ConvertResolutionY(155)f7=ConvertResolutionY(175)f9=ConvertResolutionY(115)fa=ConvertResolutionY(95)end;if BrakeIsOn then ct[#ct+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f4,f5)elseif A>0 then ct[#ct+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f4,f5,A)end;if ap and bn and hoverDetectGround()==-1 then ct[#ct+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f4,f9+50)end;if at then ct[#ct+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f4,fb)end;if GearExtended then if M then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f4,f6)else ct[#ct+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f4,f6)end;local dx,dy=getDistanceDisplayString(Nav:getTargetGroundAltitude())ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f4,f7,dx..dy)end;if a0 then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f4,f8+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aq-antigrav.getBaseAltitude())<501 then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f4,f9+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else ct[#ct+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f4,f9+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f4,f9+20,AutopilotStatus)elseif LockPitch~=nil then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f4,f9+20,d(LockPitch))elseif U then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f4,f9+20)elseif Reentry then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f4,f9+20)end;local fc,fd,fe=b9:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bh:normalize(),function(ff)if ff.noAtmosphericDensityAltitude>0 then return ff.radius+ff.noAtmosphericDensityAltitude else return ff.radius+ff.surfaceMaxAltitude*1.5 end end)local fg=fd;if fe~=nil and fd~=nil then fg=math.min(fe,fd)end;if AltitudeHold then if AutoTakeoff then local dx,dy=getDistanceDisplayString(HoldAltitude)ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f4,f9,dx..dy)if BrakeIsOn then ct[#ct+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f4,f9+50)end else local dx,dy=getDistanceDisplayString2(HoldAltitude)ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f4,f9,dx..dy)end end;if VertTakeOff then if j()>0.1 then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f4,f9)elseif j()<0.09 and j()>0.05 then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f4,f9)elseif j()<0.05 then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f4,f9)end end;if IntoOrbit then if bt~=nil then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f4,f9,bt)end end;if BrakeLanding then if StrongBrakes then ct[#ct+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f4,f9)else ct[#ct+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f4,f9)end end;if ProgradeIsOn then ct[#ct+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f4,f9)end;if RetrogradeIsOn then ct[#ct+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f4,f9)end;if TurnBurn then ct[#ct+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f4,fa)elseif fg~=nil and j()==0 then local dx,dy=getDistanceDisplayString(fg)local travelTime=ba.computeTravelTime(bi,0,fg)local fh="Collision"if fc.noAtmosphericDensityAltitude>0 then fh="Atmosphere"end;ct[#ct+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f4,fa,fc.name,fh,FormatTimeString(travelTime),dx..dy)end;if VectorToTarget then ct[#ct+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f4,f9+30,VectorStatus)end;ct[#ct+1]="</g>"end;function DisplayOrbitScreen(ct)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fi=OrbitMapX;local fj=OrbitMapY;local fk=OrbitMapSize;local fl=4;fj=fj+fl;local fm=15;local bY=fi+fk+fi/2+fl;local bZ=fj+fk/2+5+fl;local fn,fo,fp,fq;fn=fk/4;fq=0;ct[#ct+1]=[[<g class="pbright txtorb txtmid">]]ct[#ct+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fk+fi*2,fk+fj,fl,fl)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fp=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fn*2)fo=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fp*(1-orbit.eccentricity)fq=fn-orbit.periapsis.altitude/fp-planet.radius/fp;local fr=""if orbit.periapsis.altitude<=0 then fr='redout'end;ct[#ct+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fr,fi+fk/2+fq+fl,fj+fk/2+fl,fn,fo)ct[#ct+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fi+fk/2+fl,fj+fk/2+fl,planet.radius/fp)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ct[#ct+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bY-35,bZ-5,fi+fk/2+fn+fq,bZ-5)ct[#ct+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bY,bZ)bZ=bZ+fm;local dx,dy=getDistanceDisplayString(orbit.apoapsis.altitude)ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,dx..dy)bZ=bZ+fm;ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,FormatTimeString(orbit.timeToApoapsis))bZ=bZ+fm;ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,getSpeedDisplayString(orbit.apoapsis.speed))end;bZ=fj+fk/2+5+fl;bY=fi-fi/2+10+fl;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ct[#ct+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bY+35,bZ-5,fi+fk/2-fn+fq,bZ-5)ct[#ct+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bY,bZ)bZ=bZ+fm;local dx,dy=getDistanceDisplayString(orbit.periapsis.altitude)ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,dx..dy)bZ=bZ+fm;ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,FormatTimeString(orbit.timeToPeriapsis))bZ=bZ+fm;ct[#ct+1]=e([[<text x="%f" y="%f">%s</text>]],bY,bZ,getSpeedDisplayString(orbit.periapsis.speed))end;ct[#ct+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fi+fk/2+fl,20+fl,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fs=orbit.timeToApoapsis/orbit.period*2*math.pi;local ft=fn*math.cos(fs)local fu=fo*math.sin(fs)ct[#ct+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fi+fk/2+ft+fq+fl,fj+fk/2+fu+fl)end;ct[#ct+1]=[[</g>]]end end;function getDistanceDisplayString(af)local fv=af>100000;local bD,dy=""if fv then bD,dy=round(af/1000/200,1),"SU"elseif af<1000 then bD,dy=round(af,1),"m"else bD,dy=round(af/1000,1),"Km"end;return bD,dy end;function getDistanceDisplayString2(af)local fv=af>100000;local bD,dy=""if fv then bD,dy=round(af/1000/200,2)," SU"elseif af<1000 then bD,dy=round(af,2)," M"else bD,dy=round(af/1000,2)," KM"end;return bD,dy end;function getSpeedDisplayString(bS)return d(round(bS*3.6,0)+0.5).." km/h"end;function FormatTimeString(fw)local fx=0;local fy=0;local fz=0;if fw<60 then fw=d(fw)elseif fw<3600 then fx=d(fw/60)fw=d(fw%60)elseif fw<86400 then fy=d(fw/3600)fx=d(fw%3600/60)else fz=d(fw/86400)fy=d(fw%86400/3600)end;if fz>0 then return fz.."d "..fy.."h "elseif fy>0 then return fy.."h "..fx.."m "elseif fx>0 then return fx.."m "..fw.."s"elseif fw>0 then return fw.."s"else return"0s"end end;function getMagnitudeInDirection(dq,fA)dq=vec3(dq)fA=vec3(fA):normalize()local bD=dq*fA;return bD.x+bD.y+bD.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a7=nil;CustomTarget=nil;return true end;local fB=AtlasOrdered[AutopilotTargetIndex].index;local fC=b3[0][fB]if fC.center then AutopilotTargetName=fC.name;a7=b9[0][fB]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fC;for _,bC in pairs(b9[0])do if bC.name==CustomTarget.planetname then a7=bC;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a7.center)else AutopilotTargetCoords=CustomTarget.position end;if a7.planetname~="Space"then if a7.hasAtmosphere then AutopilotTargetOrbit=math.floor(a7.radius*(TargetOrbitRadius-1)+a7.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a7.radius*(TargetOrbitRadius-1)+a7.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bc(a7):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fB=AtlasOrdered[AutopilotTargetIndex].index;local fC=b3[0][fB]if fC.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fB=AtlasOrdered[AutopilotTargetIndex].index;local fC=b3[0][fB]if fC.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fD=LastMaxBrakeInAtmo/a7:getGravity(a7.center+vec3(0,0,1)*a7.radius):len()return fD end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a7.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bh=core.getWorldVelocity()local bS=vec3(bh):len()local fE=unit.getThrottle()/100;if AtmoSpeedAssist then fE=z end;local fF,fG=ba.computeDistanceAndTime(vec3(bh):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fE,warmup,0)local a1,a2;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fH;if not TurnBurn and bS>0 then _,fH=GetAutopilotBrakeDistanceAndTime(bS)else _,fH=GetAutopilotTBBrakeDistanceAndTime(bS)end;local fI=0;local fJ=0;if AutopilotCruising or not Autopilot and bS>5 then fJ=ba.computeTravelTime(bS,0,AutopilotDistance)elseif a1+fF<AutopilotDistance then fI=AutopilotDistance-(a1+fF)fJ=ba.computeTravelTime(8333.0556,0,fI)else local fK=(AutopilotDistance-a1)/fF;fF=AutopilotDistance-a1;fG=fG*fK end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fJ elseif AutopilotBraking then return fH elseif AutopilotCruising then return fJ+fH else return fG+a2+fJ end end;function GetAutopilotBrakeDistanceAndTime(bS)if not ap then RefreshLastMaxBrake()return ba.computeDistanceAndTime(bS,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return ba.computeDistanceAndTime(bS,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bS)RefreshLastMaxBrake()return ba.computeDistanceAndTime(bS,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fL=-1;local fM=-1;if vBooster then fL=vBooster.distance()end;if hover then fM=hover.distance()end;if fL~=-1 and fM~=-1 then if fL<fM then return fL else return fM end elseif fL~=-1 then return fL elseif fM~=-1 then return fM else return-1 end end;function AboveGroundLevel()local fN=-1;local fO=hoverDetectGround()if telemeter_1 then fN=telemeter_1.getDistance()end;if fO~=-1 and fN~=-1 then if fO<fN then return fO else return fN end elseif fO~=-1 then return fO else return fN end end;function tablelength(fP)local fQ=0;for _ in pairs(fP)do fQ=fQ+1 end;return fQ end;function BeginProfile(fR)ProfileTimeStart=system.getTime()end;function EndProfile(fR)local fS=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fS;ProfileCount=ProfileCount+1;if fS>ProfileTimeMax then ProfileTimeMax=fS end;if fS<ProfileTimeMin then ProfileTimeMin=fS end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fT=ProfileTimeSum;local fU=ProfileTimeSum/ProfileCount;local fV=ProfileTimeMin;local fW=ProfileTimeMax;local fX=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fT,fU,fV,fW,fX))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fY=radar_1.getEntries()local fZ=radar_1.getData()local f_=ConvertResolutionX(1770)local g0=ConvertResolutionY(330)if#fY>0 then local target=fZ:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ai=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ag=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f_,g0,#fY)local g1={}for bB,bC in pairs(fY)do if radar_1.hasMatchingTransponder(bC)==1 then table.insert(g1,bC)end end;if#g1>0 then local bZ=ConvertResolutionY(15)local bY=ConvertResolutionX(1370)ag=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ag,bY,bZ)for bB,bC in pairs(g1)do bZ=bZ+20;ag=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ag,bY,bZ,radar_1.getConstructName(bC))end end else local g2;g2=fZ:find('worksInEnvironment":false')if g2 then ag=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f_,g0)else ag=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f_,g0)end;if radarPanelID~=nil then ai=0;ToggleRadarPanel()end end end end;function DisplayMessage(ct,dx)if dx~="empty"then ct[#ct+1]=[[<text class="msg" x="50%%" y="310" >]]for g3 in string.gmatch(dx,"([^\n]+)")do ct[#ct+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g3)end;ct[#ct+1]=[[</text>]]end;if ae~=0 then unit.setTimer("msgTick",ae)ae=0 end end;function updateDistance()local bL=system.getTime()local bh=vec3(core.getWorldVelocity())local dQ=vec3(bh):len()local g4=bL-as;if dQ>1.38889 then dQ=dQ/1000;local g5=dQ*(bL-as)TotalDistanceTravelled=TotalDistanceTravelled+g5;a8=a8+g5 end;a9=a9+g4;TotalFlightTime=TotalFlightTime+g4;as=bL end;function composeAxisAccelerationFromTargetSpeedV(g6,g7)local g8=vec3()local g9=vec3()if g6==axisCommandId.longitudinal then g8=vec3(core.getConstructOrientationForward())g9=vec3(core.getConstructWorldOrientationForward())elseif g6==axisCommandId.vertical then g8=vec3(core.getConstructOrientationUp())g9=vec3(core.getConstructWorldOrientationUp())elseif g6==axisCommandId.lateral then g8=vec3(core.getConstructOrientationRight())g9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ga=vec3(core.getWorldGravity())local gb=ga:dot(g9)local gc=vec3(core.getWorldAirFrictionAcceleration())local gd=gc:dot(g9)local ge=vec3(core.getVelocity())local gf=ge:dot(g8)local gg=g7*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gg-gf)local gh=targetSpeedPID2:get()local gi=(gh-gd-gb)*g9;return gi end;function composeAxisAccelerationFromTargetSpeed(g6,g7)local g8=vec3()local g9=vec3()if g6==axisCommandId.longitudinal then g8=vec3(core.getConstructOrientationForward())g9=vec3(core.getConstructWorldOrientationForward())elseif g6==axisCommandId.vertical then g8=vec3(core.getConstructOrientationUp())g9=vec3(core.getConstructWorldOrientationUp())elseif g6==axisCommandId.lateral then g8=vec3(core.getConstructOrientationRight())g9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ga=vec3(core.getWorldGravity())local gb=ga:dot(g9)local gc=vec3(core.getWorldAirFrictionAcceleration())local gd=gc:dot(g9)local ge=vec3(core.getVelocity())local gf=ge:dot(g8)local gg=g7*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gg-gf)local gh=targetSpeedPID:get()local gi=(gh-gd-gb)*g9;return gi end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b3=Atlas()for bB,bC in pairs(b3[0])do if aH==nil or bC.center.x<aH then aH=bC.center.x end;if aI==nil or bC.center.x>aI then aI=bC.center.x end;if aJ==nil or bC.center.y<aJ then aJ=bC.center.y end;if aK==nil or bC.center.y>aK then aK=bC.center.y end end;b4=""local gj=1.1*(aI-aH)/1920;local gk=1.4*(aK-aJ)/1080;for bB,bC in pairs(b3[0])do local bY=960+bC.center.x/gj;local bZ=540+bC.center.y/gk;b4=b4 ..'<circle cx="'..bY..'" cy="'..bZ..'" r="'..bC.radius/gj*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bC.name,"Moon")and not string.match(bC.name,"Sanctuary")and not string.match(bC.name,"Space")then b4=b4 .."<text x='"..bY.."' y='"..bZ+bC.radius/gj*30+20 .."' font-size='28' fill="..av.." text-anchor='middle' font-family='Montserrat'>"..bC.name.."</text>"end end;local cg=vec3(core.getConstructWorldPos())local bY=960+cg.x/gj;local bZ=540+cg.y/gk;b4=b4 ..'<circle cx="'..bY..'" cy="'..bZ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='"..bY.."' y='"..bZ-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b4=b4 ..[[</svg>]]b5=gj;b6=gk;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b4)local cg=vec3(core.getConstructWorldPos())local bY=960+cg.x/gj;local bZ=540+cg.y/gk;b4='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='80' y='105' font-size='18' fill="..av.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b7=screen_2.addContent((bY-80)/19.20,(bZ-80)/10.80,b4)end end;function PlanetRef()local function gl(gm)return type(gm)=='number'end;local function gn(gm)return type(tonumber(gm))=='number'end;local function go(gp)return type(gp)=='table'end;local function gq(gr)return type(gr)=='string'end;local function gs(bC)return go(bC)and gl(bC.x and bC.y and bC.z)end;local function gt(gu)return go(gu)and gl(gu.latitude and gu.longitude and gu.altitude and gu.bodyId and gu.systemId)end;local gv=math.pi/180;local gw=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ch='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gx=utils.clamp;local function float_eq(c6,c7)if c6==0 then return math.abs(c7)<1e-09 end;if c7==0 then return math.abs(c6)<1e-09 end;return math.abs(c6-c7)<math.max(math.abs(c6),math.abs(c7))*epsilon end;local function gy(gm)local bD=string.gsub(string.reverse(e('%.4f',gm)),'^0*%.?','')return bD==''and'0'or string.reverse(bD)end;local function gz(gA)if gs(gA)then return e('{x=%.3f,y=%.3f,z=%.3f}',gA.x,gA.y,gA.z)end;if go(gA)and not getmetatable(gA)then local gB={}local gC=next(gA)if type(gC)=='nil'or gC==1 then gB=gA else for bB,bC in pairs(gA)do local eb=gz(bC)if type(bB)=='number'then table.insert(gB,e('[%s]=%s',bB,eb))else table.insert(gB,e('%s=%s',bB,eb))end end end;return e('{%s}',table.concat(gB,','))end;if gq(gA)then return e("'%s'",gA:gsub("'",[[\']]))end;return tostring(gA)end;local gD={}gD.__index=gD;gD.__tostring=function(gA,gE)local gF={}for bB in pairs(gA)do table.insert(gF,bB)end;table.sort(gF)local gB={}for _,bB in ipairs(gF)do local eb=gz(gA[bB])if type(bB)=='number'then table.insert(gB,e('[%s]=%s',bB,eb))else table.insert(gB,e('%s=%s',bB,eb))end end;if gE then return e('%s%s',gE,table.concat(gB,',\n'..gE))end;return e('{%s}',table.concat(gB,','))end;gD.__eq=function(gG,gH)return gG.planetarySystemId==gH.planetarySystemId and gG.bodyId==gH.bodyId and float_eq(gG.radius,gH.radius)and float_eq(gG.center.x,gH.center.x)and float_eq(gG.center.y,gH.center.y)and float_eq(gG.center.z,gH.center.z)and float_eq(gG.GM,gH.GM)end;local function gI(ci,cj,gJ,c9,gK)assert(gn(ci),'Argument 1 (planetarySystemId) must be a number:'..type(ci))assert(gn(cj),'Argument 2 (bodyId) must be a number:'..type(cj))assert(gn(gJ),'Argument 3 (radius) must be a number:'..type(gJ))assert(go(c9),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c9))assert(gn(gK),'Argument 5 (GM) must be a number:'..type(gK))return setmetatable({planetarySystemId=tonumber(ci),bodyId=tonumber(cj),radius=tonumber(gJ),center=vec3(c9),GM=tonumber(gK)},gD)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gL)return e('::pos{%d,%d,%s,%s,%s}',gL.systemId,gL.bodyId,gy(gL.latitude*gw),gy(gL.longitude*gw),gy(gL.altitude))end;MapPosition.__eq=function(gG,gH)return gG.bodyId==gH.bodyId and gG.systemId==gH.systemId and float_eq(gG.latitude,gH.latitude)and float_eq(gG.altitude,gH.altitude)and(float_eq(gG.longitude,gH.longitude)or float_eq(gG.latitude,math.pi/2)or float_eq(gG.latitude,-math.pi/2))end;local function gM(gN,cj,cd,ce,cc)local ci=gN;if gq(gN)and not ce and not cc and not cj and not cd then ci,cj,cd,ce,cc=string.match(gN,ch)assert(ci,'Argument 1 (position string) is malformed.')else assert(gn(ci),'Argument 1 (systemId) must be a number:'..type(ci))assert(gn(cj),'Argument 2 (bodyId) must be a number:'..type(cj))assert(gn(cd),'Argument 3 (latitude) must be in degrees:'..type(cd))assert(gn(ce),'Argument 4 (longitude) must be in degrees:'..type(ce))assert(gn(cc),'Argument 5 (altitude) must be in meters:'..type(cc))end;ci=tonumber(ci)cj=tonumber(cj)cd=tonumber(cd)ce=tonumber(ce)cc=tonumber(cc)if cj==0 then return setmetatable({latitude=cd,longitude=ce,altitude=cc,bodyId=cj,systemId=ci},MapPosition)end;return setmetatable({latitude=gv*gx(cd,-90,90),longitude=gv*(ce%360),altitude=cc,bodyId=cj,systemId=ci},MapPosition)end;local gO={}gO.__index=gO;gO.__tostring=function(gA,gE)local gP=gE and gE..'  'local gQ={}local gF={}for bB in pairs(gA)do table.insert(gF,bB)end;table.sort(gF)for _,gR in ipairs(gF)do bdy=gA[gR]local gS=gD.__tostring(bdy,gP)if gE then table.insert(gQ,e('[%s]={\n%s\n%s}',gR,gS,gE))else table.insert(gQ,e('  [%s]=%s',gR,gS))end end;if gE then return e('\n%s%s%s',gE,table.concat(gQ,',\n'..gE),gE)end;return e('{\n%s\n}',table.concat(gQ,',\n'))end;local function gT(gU)local b3={}local pid;for _,bC in pairs(gU)do local cp=bC.planetarySystemId;if type(cp)~='number'then error('Invalid planetary system ID: '..tostring(cp))elseif pid and cp~=pid then error('Mismatch planetary system IDs: '..cp..' and '..pid)end;local gV=bC.bodyId;if type(gV)~='number'then error('Invalid body ID: '..tostring(gV))elseif b3[gV]then error('Duplicate body ID: '..tostring(gV))end;setmetatable(bC.center,getmetatable(vec3.unit_x))b3[gV]=setmetatable(bC,gD)pid=cp end;return setmetatable(b3,gO)end;b8={}local function gW(gU)return setmetatable({galaxyAtlas=gU or{}},b8)end;b8.__index=function(gp,i)if type(i)=='number'then local system=gp.galaxyAtlas[i]return gT(system)end;return rawget(b8,i)end;b8.__pairs=function(gA)return function(gp,bB)local gX,nv=next(gp,bB)return gX,nv and gT(nv)end,gA.galaxyAtlas,nil end;b8.__tostring=function(gA)local gY={}for _,gZ in pairs(gA or{})do local g_=gZ:getPlanetarySystemId()local h0=gO.__tostring(gZ,'    ')table.insert(gY,e('  [%s]={%s\n  }',g_,h0))end;return e('{\n%s\n}\n',table.concat(gY,',\n'))end;b8.BodyParameters=gI;b8.MapPosition=gM;b8.PlanetarySystem=gT;function b8.createBodyParameters(h1,cj,h2,h3,h4,h5,h6)assert(gn(h1),'Argument 1 (planetarySystemId) must be a number:'..type(h1))assert(gn(cj),'Argument 2 (bodyId) must be a number:'..type(cj))assert(gn(h2),'Argument 3 (surfaceArea) must be a number:'..type(h2))assert(go(h3),'Argument 4 (aPosition) must be an array or vec3:'..type(h3))assert(go(h4),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h4))assert(gn(h5),'Argument 6 (altitude) must be in meters:'..type(h5))assert(gn(h6),'Argument 7 (gravityAtPosition) must be number:'..type(h6))local gJ=math.sqrt(h2/4/math.pi)local af=gJ+h5;local h7=vec3(h3)+af*vec3(h4)local gK=h6*af*af;return gI(h1,cj,gJ,h7,gK)end;b8.isMapPosition=gt;function b8:getPlanetarySystem(gN)if i==nil then i=0 end;if nv==nil then nv=0 end;local h1=gN;if gt(gN)then h1=gN.systemId end;if type(h1)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gO then system=gT(system)end;return system end end end;function gO:castIntersections(h8,fA,h9,ha)local h9=h9 or function(ff)return 1.05*ff.radius end;local hb={}if ha then for _,i in ipairs(ha)do hb[i]=self[i]end else ha={}for bB,ff in pairs(self)do table.insert(ha,bB)hb[bB]=ff end end;local function hc(hd,he)local hf=hb[hd].center-h8;local hg=hb[he].center-h8;return hf:len()<hg:len()end;table.sort(ha,hc)local hh=fA:normalize()for i,cp in ipairs(ha)do local ff=hb[cp]local hi=ff.center-h8;local gJ=h9(ff)local hj=hi:dot(hh)local hk=hj^2-(hi:len2()-gJ^2)if hk>=0 then local hl=math.sqrt(hk)local fd=hj+hl;local fe=hj-hl;if fe>0 then return ff,fd,fe elseif fd>0 then return ff,fd,nil end end end;return nil,nil,nil end;function gO:closestBody(hm)assert(type(hm)=='table','Invalid coordinates.')local hn,ff;local ho=vec3(hm)for _,hp in pairs(self)do local hq=(hp.center-ho):len2()if(not ff or hq<hn)and hp.name~="Space"then ff=hp;hn=hq end end;return ff end;function gO:convertToBodyIdAndWorldCoordinates(gN)local hr=gN;if gq(gN)then hr=gM(gN)end;if hr.bodyId==0 then return 0,vec3(hr.latitude,hr.longitude,hr.altitude)end;local hp=self:getBodyParameters(hr)if hp then return hr.bodyId,hp:convertToWorldCoordinates(hr)end end;function gO:getBodyParameters(gN)local cj=gN;if gt(gN)then cj=gN.bodyId end;assert(gn(cj),'Argument 1 (bodyId) must be a number:'..type(cj))return self[cj]end;function gO:getPlanetarySystemId()local _,bC=next(self)return bC and bC.planetarySystemId end;function gD:convertToMapPosition(c9)assert(go(c9),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c9))local ca=vec3(c9)if self.bodyId==0 then return setmetatable({latitude=ca.x,longitude=ca.y,altitude=ca.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cb=ca-self.center;local af=cb:len()local cc=af-self.radius;local cd=0;local ce=0;if not float_eq(af,0)then local cf=math.atan(cb.y,cb.x)ce=cf>=0 and cf or 2*math.pi+cf;cd=math.pi/2-math.acos(cb.z/af)end;return setmetatable({latitude=cd,longitude=ce,altitude=cc,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gD:convertToWorldCoordinates(gN)local hr=gq(gN)and gM(gN)or gN;if hr.bodyId==0 then return vec3(hr.latitude,hr.longitude,hr.altitude)end;assert(gt(hr),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hr.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hr.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ck=math.cos(hr.latitude)return self.center+(self.radius+hr.altitude)*vec3(ck*math.cos(hr.longitude),ck*math.sin(hr.longitude),math.sin(hr.latitude))end;function gD:getAltitude(c9)return(vec3(c9)-self.center):len()-self.radius end;function gD:getDistance(c9)return(vec3(c9)-self.center):len()end;function gD:getGravity(c9)local hs=self.center-vec3(c9)local ht=hs:len2()return self.GM/ht*hs/math.sqrt(ht)end;return setmetatable(b8,{__call=function(_,...)return gW(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gq(gr)return type(gr)=='string'end;local function go(gp)return type(gp)=='table'end;local function float_eq(c6,c7)if c6==0 then return math.abs(c7)<1e-09 end;if c7==0 then return math.abs(c6)<1e-09 end;return math.abs(c6-c7)<math.max(math.abs(c6),math.abs(c7))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cc)assert(self.body)local af=cc+self.body.radius;if not float_eq(af,0)then local orbit=math.sqrt(self.body.GM/af)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gN,bh)assert(self.body)assert(go(gN)or gq(gN))assert(go(bh))local cg=(gq(gN)or PlanetRef.isMapPosition(gN))and self.body:convertToWorldCoordinates(gN)or vec3(gN)local bC=vec3(bh)local hu=cg-self.body.center;local hg=bC:len2()local hv=hu:len()local hw=self.body.GM;local hx=((hg-hw/hv)*hu-hu:dot(bC)*bC)/hw;local c6=hw/(2*hw/hv-hg)local hy=hx:len()local hh=hx:normalize()local hz=c6*(1-hy)local hA=c6*(1+hy)local hB=hz*hh+self.body.center;local hC=hy<=1 and-hA*hh+self.body.center or nil;local hD=math.sqrt(c6*hw*(1-hy*hy))local hE=hC and 2*math.pi*math.sqrt(c6^3/hw)local hF=math.acos(hx:dot(hu)/(hy*hv))if hu:dot(bC)<0 then hF=-(hF-2*math.pi)end;local hG=math.acos((math.cos(hF)+hy)/(1+hy*math.cos(hF)))local hH=hG;if hH<0 then hH=hH+2*math.pi end;local hI=hH-hy*math.sin(hH)local hJ=0;local hK=0;local hL=0;if hE~=nil then hJ=hI/(2*math.pi/hE)hK=hE-hJ;hL=hK+hE/2;if hF-math.pi>0 then hK=hJ;hL=hK+hE/2 end;if hL>hE then hL=hL-hE end end;return{periapsis={position=hB,speed=hD/hz,circularOrbitSpeed=math.sqrt(hw/hz),altitude=hz-self.body.radius},apoapsis=hC and{position=hC,speed=hD/hA,circularOrbitSpeed=math.sqrt(hw/hA),altitude=hA-self.body.radius},currentVelocity=bC,currentPosition=cg,eccentricity=hy,period=hE,eccentricAnomaly=hG,meanAnomaly=hI,timeToPeriapsis=hK,timeToApoapsis=hL}end;local function hM(hN)local hp=PlanetRef.BodyParameters(hN.planetarySystemId,hN.bodyId,hN.radius,hN.center,hN.GM)return setmetatable({body=hp},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hM(...)end})end;function Kinematics()local ba={}local hO=30000000/3600;local hP=hO*hO;local hQ=100;local function hR(bC)return 1/math.sqrt(1-bC*bC/hP)end;function ba.computeAccelerationTime(hS,hT,hU)local hV=hO*math.asin(hS/hO)return(hO*math.asin(hU/hO)-hV)/hT end;function ba.computeDistanceAndTime(hS,hU,hW,hX,hY,hZ)hY=hY or 0;hZ=hZ or 0;local h_=hS<=hU;local i0=hX*(h_ and 1 or-1)/hW;local i1=-hZ/hW;local i2=i0+i1;if h_ and i2<=0 or not h_ and i2>=0 then return-1,-1 end;local i3,i4=0,0;if i0~=0 and hY>0 then local hV=math.asin(hS/hO)local i5=math.pi*(i0/2+i1)local i6=i0*hY;local i7=hO*math.pi;local bC=function(gp)local cU=(i5*gp-i6*math.sin(math.pi*gp/2/hY)+i7*hV)/i7;local i8=math.tan(cU)return hO*i8/math.sqrt(i8*i8+1)end;local i9=h_ and function(gr)return gr>=hU end or function(gr)return gr<=hU end;i4=2*hY;if i9(bC(i4))then local ia=0;while math.abs(i4-ia)>0.5 do local gp=(i4+ia)/2;if i9(bC(gp))then i4=gp else ia=gp end end end;local ib=hS;local ic=i4/hQ;for id=1,hQ do local bS=bC(id*ic)i3=i3+(bS+ib)*ic/2;ib=bS end;if i4<2*hY then return i3,i4 end;hS=ib end;local hV=hO*math.asin(hS/hO)local bE=(hO*math.asin(hU/hO)-hV)/i2;local ie=hP*math.cos(hV/hO)/i2;local af=ie-hP*math.cos((i2*bE+hV)/hO)/i2;return af+i3,bE+i4 end;function ba.computeTravelTime(hS,hT,af)if af==0 then return 0 end;if hT>0 then local hV=hO*math.asin(hS/hO)local ie=hP*math.cos(hV/hO)/hT;return(hO*math.acos(hT*(ie-af)/hP)-hV)/hT end;if hS==0 then return-1 end;assert(hS>0,'Acceleration and initial speed are both zero.')return af/hS end;function ba.lorentz(bC)return hR(bC)end;return ba end;function safeZone(ig)local gJ=500000;local ih,ii,ij=math.huge;local ik=false;local il=vec3({13771471,7435803,-128971})local im=18000000;ih=vec3(ig):dist(il)if ih<im then return true,math.abs(ih-im),"Safe Zone",0 end;ii=vec3(ig):dist(vec3(planet.center))if ii<gJ then ik=true end;if math.abs(ii-gJ)<math.abs(ih-im)then return ik,math.abs(ii-gJ),planet.name,planet.bodyId else return ik,math.abs(ih-im),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.41;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b8=PlanetRef()b9=b8(Atlas())ba=Kinematics()bc=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(io)if dbHud_1 then if not aa then for bB,bC in pairs(b)do dbHud_1.setStringValue(bC,g(_G[bC]))if io and dbHud_2 then dbHud_2.setStringValue(bC,g(_G[bC]))end end;for bB,bC in pairs(a)do dbHud_1.setStringValue(bC,g(_G[bC]))if io and dbHud_2 then dbHud_2.setStringValue(bC,g(_G[bC]))end end;c("Saved Variables to Datacore")if io and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bN=j()if door and(bN>0 or bN==0 and aq<10000)then for _,bC in pairs(door)do bC.toggle()end end;if switch then for _,bC in pairs(switch)do bC.toggle()end end;if forcefield and(bN>0 or bN==0 and aq<10000)then for _,bC in pairs(forcefield)do bC.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(ip)if ip=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iq=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iq and not Autopilot then af=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else af=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(bi)a3,a4=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(bi)a3,a4=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dx,dy=getDistanceDisplayString(af)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dx..'", "unit":"'..dy..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dx,dy=getDistanceDisplayString(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dx..'", "unit":"'..dy..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a2)..'", "unit":""}')dx,dy=getDistanceDisplayString(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dx..'", "unit":"'..dy..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dx,dy=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dx)..'", "unit":"'..dy..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ip=="oneSecond"then an=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local ct={}local dG=GetFlightStyle()DrawOdometer(ct,a8,TotalDistanceTravelled,dG,a9)if ShouldCheckDamage then CheckDamage(ct)end;ah=table.concat(ct,"")collectgarbage("collect")elseif ip=="fiveSecond"then ao=dbHud_1.getStringValue("SPBAutopilotTargetName")if ao~=nil and ao~=""and ao~="SatNavNotChanged"then local bD=json.decode(dbHud_1.getStringValue("SavedLocations"))if bD~=nil then _G["SavedLocations"]=bD;local cr=-1;local cn;for bB,bC in pairs(SavedLocations)do if bC.name and bC.name=="SatNav Location"then cr=bB;break end end;if cr~=-1 then cn=SavedLocations[cr]cr=-1;for bB,bC in pairs(b3[0])do if bC.name and bC.name=="SatNav Location"then cr=bB;break end end;if cr>-1 then b3[0][cr]=cn end;UpdateAtlasLocationsList()W=cn.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ao then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ip=="msgTick"then local ct={}DisplayMessage(ct,"empty")W="empty"unit.stopTimer("msgTick")ae=3 elseif ip=="animateTick"then be=true;bd=false;ac=0;ad=0;unit.stopTimer("animateTick")elseif ip=="hudTick"then local ct={}HUDPrologue(ct)if showHud then UpdateHud(ct)else DisplayOrbitScreen(ct)DrawWarnings(ct)end;HUDEpilogue(ct)ct[#ct+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(ct,W)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(ct)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(ct)if screen_1.getMouseState()==1 then CheckButtons()end;ct[#ct+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(ct)if not bd and not be then local ir=table.concat(ct,"")ct={}ct[#ct+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)ct[#ct+1]=b4;ct[#ct+1]=ir;ct[#ct+1]="</body>"bd=true;ct[#ct+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ct,"")system.setScreen(content)elseif be then local ir=table.concat(ct,"")ct={}ct[#ct+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)ct[#ct+1]=b4;ct[#ct+1]=ir;ct[#ct+1]="</body>"end;if not bd then ct[#ct+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if af>DeadZone then DrawCursorLine(ct)end else SetButtonContains()DrawButtons(ct)end;ct[#ct+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)end;ct[#ct+1]=[[</svg></body>]]content=table.concat(ct,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ip=="apTick"then bg=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ap=j()>0;local bE=system.getTime()local is=bE-bo;bo=bE;local cw=vec3(core.getConstructWorldOrientationForward())local cx=vec3(core.getConstructWorldOrientationRight())local it=vec3(core.getConstructWorldOrientationUp())local cy=vec3(core.getWorldVertical())local iu=vec3(core.getConstructWorldPos())local iv=core.getVelocity()local dI=getRoll(cy,cw,cx)local dJ=dI/180*math.pi;local dK=math.cos(dJ)local dL=math.sin(dJ)local cz=getPitch(cy,cw,cx)local iw=getPitch(cy,cw,cx*dK+it*dL)local ix=-math.deg(cP(it,bh,cw))local iy=math.deg(cP(cx,bh,cw))bn=ap and ix<-YawStallAngle or ix>YawStallAngle or iy<-PitchStallAngle or iy>PitchStallAngle;bl=system.getMouseDeltaX()bm=system.getMouseDeltaY()if InvertMouse and not V then bm=-bm end;P=0;T=0;O=0;bh=vec3(core.getWorldVelocity())bi=vec3(bh):len()sys=b9[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bc(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bh)am=hoverDetectGround()local bP=planet:getGravity(core.getConstructWorldPos()):len()*n()bp=0;bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iu)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ac=screen_1.getMouseX()*ResolutionX;ad=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not bd then ac=ac+bl;ad=ad+bm end else ac=0;ad=0 end else ac=ac+bl;ad=ad+bm;af=math.sqrt(ac*ac+ad*ad)if not V and o()==0 then if userControlScheme=="virtual joystick"then if ac>0 and ac>DeadZone then P=P-(ac-DeadZone)*MouseXSensitivity elseif ac<0 and ac<DeadZone*-1 then P=P-(ac+DeadZone)*MouseXSensitivity else P=0 end;if ad>0 and ad>DeadZone then O=O-(ad-DeadZone)*MouseYSensitivity elseif ad<0 and ad<DeadZone*-1 then O=O-(ad+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then ac=0;ad=0;O=(-utils.smoothstep(bm,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bl,-100,100)+0.5)*2*L else ac=0;ad=0 end end end;local iz=bi>8334;if bi>SpaceSpeedLimit/3.6 and not ap and not Autopilot and not iz then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iz and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iz;if ap and j()>0.09 then if bi>br/3.6 and not AtmoSpeedAssist and not au then BrakeIsOn=true;au=true elseif not AtmoSpeedAssist and au then if bi<br/3.6 then BrakeIsOn=false;au=false end end end;if BrakeIsOn then S=1 else S=0 end;aq=core.getAltitude()if aq==0 then aq=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if aj then BrakeIsOn=false;local iA=false;if CustomTarget~=nil then iA=AlignToWorldVector(CustomTarget.position-iu,0.01)else iA=AlignToWorldVector(vec3(bh),0.01)end;bf=true;if iA and(math.abs(dI)<2 or math.abs(iw)>85)and bi>=br/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;aj=false;al=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(br))z=0 end elseif bi>I then AlignToWorldVector(vec3(bh),0.01)end end;if RetrogradeIsOn then if ap then RetrogradeIsOn=false elseif bi>I then AlignToWorldVector(-vec3(bh))end end;if not ProgradeIsOn and aj then if j()==0 then J=true;BeginReentry()aj=false;al=true else aj=false;ToggleAutopilot()end end;local ef=vec3(core.getWorldVertical())*-1;local ed=bh.x*ef.x+bh.y*ef.y+bh.z*ef.z;if al and(aq<HoldAltitude+200 and aq>HoldAltitude-200)and bi*3.6>br-100 and math.abs(ed)<20 and j()>=0.1 and(CustomTarget.position-iu):len()>2000+aq then ToggleAutopilot()al=false end;if Autopilot and j()==0 and not aj then local iB=AutopilotTargetCoords;local iC=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iD=(CustomTarget.position-a7.center):normalize()local iE=iD:project_on_plane((a7.center-iu):normalize()):normalize()local iF=a7.center+iE*(a7.radius+AutopilotTargetOrbit)local iG=CustomTarget.position+(CustomTarget.position-a7.center):normalize()*(AutopilotTargetOrbit-a7:getAltitude(CustomTarget.position))if not TargetSet then if(iu-iF):len()<(iu-iG):len()then iB=iF;AutopilotTargetCoords=iB else iB=CustomTarget.position+(CustomTarget.position-a7.center):normalize()*(AutopilotTargetOrbit-a7:getAltitude(CustomTarget.position))AutopilotTargetCoords=iB end;local cA=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)iC=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;iC=true;TargetSet=true;AutopilotRealigned=true;iB=CustomTarget.position+(iu-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iD=(iu+bh*100000-a7.center):normalize()local iE=iD:project_on_plane((a7.center-iu):normalize()):normalize()if iE:len()<1 then iD=(iu+vec3(core.getConstructWorldOrientationForward())*100000-a7.center):normalize()iE=iD:project_on_plane((a7.center-iu):normalize()):normalize()end;iB=a7.center+iE*(a7.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iB;TargetSet=true;iC=true;AutopilotRealigned=true;local cA=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)end end;AutopilotDistance=(vec3(iB)-vec3(core.getConstructWorldPos())):len()local fc,fd,fe=b9:getPlanetarySystem(0):castIntersections(iu,bh:normalize(),function(ff)if ff.noAtmosphericDensityAltitude>0 then return ff.radius+ff.noAtmosphericDensityAltitude else return ff.radius+ff.surfaceMaxAltitude*1.5 end end)local fg=fd;if fe~=nil and fd~=nil then fg=math.min(fe,fd)end;if fg~=nil and fg<AutopilotDistance and fc.name==a7.name then AutopilotDistance=fg end;local iA=true;local iH=(a7.center-(vec3(core.getConstructWorldPos())+vec3(bh):normalize()*AutopilotDistance)):len()-a7.radius;local dx,dy=getDistanceDisplayString(iH)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dx..'", "unit":"'..dy..'"}')local a1,a2;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(bi)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(bi)end;if bi>300 and AutopilotAccelerating then local du=vec3(iB)-vec3(core.getConstructWorldPos())local iI=utils.clamp(math.deg(cP(it,bh:normalize(),du:normalize()))*bi/500,-90,90)local iJ=utils.clamp(math.deg(cP(cx,bh:normalize(),du:normalize()))*bi/500,-90,90)if math.abs(iI)<20 and math.abs(iJ)<20 then iI=iI*2;iJ=iJ*2 end;if math.abs(iI)<2 and math.abs(iJ)<2 then iI=iI*2;iJ=iJ*2 end;local ix=-math.deg(cP(it,cw,bh:normalize()))local iy=-math.deg(cP(cx,cw,bh:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iJ-iy)local iK=utils.clamp(apPitchPID:get(),-1,1)O=O+iK;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iI-ix)local iL=utils.clamp(apYawPID:get(),-1,1)P=P+iL;iC=true;if math.abs(iI)>2 or math.abs(iJ)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iH<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bc(a7):escapeAndOrbitalSpeed(iH)end end;if not AutopilotCruising and not AutopilotBraking and not iC then iA=AlignToWorldVector((iB-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iA=AlignToWorldVector(-vec3(bh):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fE=unit.getThrottle()if AtmoSpeedAssist then fE=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fE==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)z=1 end;local _,iM=bc(a7):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local du,iN,iO;if CustomTarget~=nil then du=CustomTarget.position-iu;iN=planet:getAltitude(CustomTarget.position)iO=math.sqrt(du:len()^2-(aq-iN)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bi<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bi<=iM and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;local cA=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iM=bc(a7):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bi<=iM then if CustomTarget~=nil then if bh:normalize():dot(du:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cA=zeroConvertToMapPosition(a7,CustomTarget.position)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;BrakeIsOn=false;local cA=zeroConvertToMapPosition(a7,CustomTarget.position)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;aj=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fE=unit.getThrottle()if AtmoSpeedAssist then fE=z end;if fE>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iA then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not aj then AutopilotTargetCoords=vec3(a7.center)+(AutopilotTargetOrbit+a7.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iA then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;local cA=zeroConvertToMapPosition(a7,CustomTarget.position)cA="::pos{"..cA.systemId..","..cA.bodyId..","..cA.latitude..","..cA.longitude..","..cA.altitude.."}"system.setWaypoint(cA)end;if U then bf=true;local iJ=0;local cg=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iP=cg-vec3(core.getConstructWorldPos())local iQ=vec3(iP):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iR=vec3(iP):project_on(vec3(core.getConstructWorldOrientationRight())):len()local af=math.sqrt(iQ*iQ+iR*iR)AlignToWorldVector(iP:normalize())local iS=40;local iT=af<iS;local iU=100;local g7=utils.clamp((af-iS)/2,10,iU)O=0;local iA=math.abs(P)<0.1;if iA and bi<g7 and not iT then BrakeIsOn=false;iJ=-20 else BrakeIsOn=true;iJ=0 end;local iV=0;if math.abs(iJ-cz)>iV then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iJ-cz)local iK=pitchPID:get()O=iK end end;if VertTakeOff then bf=true;local iW=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))VertTakeOffMode=string.lower(VertTakeOffMode)if VertTakeOffMode=="agg"and not ExternalAGG then BrakeIsOn=false;if aq<1000 then bs=0;ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else ab=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)VertTakeOff=false;bf=autoRollPreference;ToggleAntigrav()end elseif VertTakeOffMode=="space"or VertTakeOffMode=="orbit"then if j()>0.08 then bs=0;BrakeIsOn=false;ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then if iW<0 then W="Unable to take off. Landing."bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true else BrakeIsOn=false end;if SpaceEngineVertUp then bs=0;ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else ab=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)bs=36;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)end else if VertTakeOffMode=="orbit"then bf=autoRollPreference;IntoOrbit=true;OrbitAchieved=false;CancelIntoOrbit=false;by=false;bw=nil;bx=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end;VertTakeOff=false else local iX=0;if planet.hasAtmosphere then iX=math.floor(VertParkingAlt+planet.noAtmosphericDensityAltitude)else iX=math.floor(VertParkingAlt+planet.surfaceMaxAltitude)end;if aq>=iX then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;ab=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)BrakeIsOn=true;S=1;W="Takeoff completed. Parking."bf=autoRollPreference;VertTakeOff=false else if SpaceEngineVertUp then bs=0;ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)else ab=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)bs=36;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)end end end end else W="Incorrect settings. Takeoff aborted."bf=autoRollPreference;VertTakeOff=false end;if bs~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iY=utils.clamp(bs-iw,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iY)local iZ=utils.clamp(vTpitchPID:get(),-1,1)O=iZ end end;if IntoOrbit then local iW=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local i_,iM=bc(OrbitTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-OrbitTargetPlanet.center):len()-OrbitTargetPlanet.radius)local j0=getRoll(cy,cw,cx)if not OrbitTargetSet then if OrbitTargetPlanet.hasAtmosphere then OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.noAtmosphericDensityAltitude)else OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.surfaceMaxAltitude)end;OrbitTargetSet=true end;if orbit.periapsis~=nil and orbit.eccentricity<1 and aq>OrbitTargetOrbit and aq<OrbitTargetOrbit*1.3 and orbit.periapsis.altitude>0 then if orbit.apoapsis~=nil then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;if orbit.periapsis.altitude>OrbitTargetOrbit*0.9 and orbit.periapsis.altitude<OrbitTargetOrbit*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;z=0;bu=0;bv=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)OrbitAchieved=true;if iw>2 or iw<-2 then bw=0 else W="Orbit established"bt=nil;bz=false;OrbitTargetSet=false;OrbitTargetPlanet=nil;bf=autoRollPreference;ToggleIntoOrbit()end else bt="Adjusting Orbit"bz=true;if orbit.periapsis.altitude<OrbitTargetOrbit then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if bi+10>iM then if iW>15 then bw=-80;bu=0.5;BrakeIsOn=false elseif iW<-15 then bw=80;bu=0.5;BrakeIsOn=false else bu=0;BrakeIsOn=true end elseif bi-10<iM then bw=80;bu=0.5;BrakeIsOn=false else bu=0;BrakeIsOn=true end else bw=80;bu=0.5;BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then bu=0;BrakeIsOn=true elseif orbit.periapsis.altitude<OrbitTargetOrbit*1.2 then bw=-80;bu=0.5;BrakeIsOn=false end end end end;if bu>0 and iw<=bw+3 and iw>=bw-3 then z=bu;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bu)elseif not OrbitAchieved then z=0.05;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0.05)end else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;local j1=i_%50;local j2=0;if j1>0 then j2=i_-j1+50 else j2=i_ end;BrakeIsOn=false;bv=j2*2.5;if not by then local j3=false;local j4=false;if aq<OrbitTargetOrbit then bt="Aligning to orbital path"else bt="Aligning to orbital point"end;bw=0;bx=0;if iw<=bw+1 and iw>=bw-1 then j3=true else j3=false end;if j0<=bx+1 and j0>=bx-1 then j4=true else j4=false end;if j3 and j4 then bw=nil;bx=nil;by=true end else if aq<OrbitTargetOrbit*0.8 then bt="Escaping planet gravity"bw=35 elseif aq>=OrbitTargetOrbit*0.8 and aq<OrbitTargetOrbit*1.01 then bt="Approaching orbital corridor"bw=utils.map(aq,OrbitTargetOrbit*0.6,OrbitTargetOrbit,35,0)elseif aq>=OrbitTargetOrbit*1.01 and aq<OrbitTargetOrbit*1.5 then bt="Approaching orbital corridor"if iW<0 or bz then bw=utils.map(aq,OrbitTargetOrbit*1.5,OrbitTargetOrbit*1.01,-30,0)else bw=utils.map(aq,OrbitTargetOrbit*0.99,OrbitTargetOrbit*1.5,0,30)end elseif aq>OrbitTargetOrbit*1.5 then bw=-80;bt="Reentering orbital corridor"end end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bv)end;if bw~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local j5=bw-iw;OrbitPitchPID:inject(j5)local j6=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=j6 end;if bx~=nil then if iw<85 then local j7=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(j7*0.01,0,j7*0.1)end;local j8=bx-j0;OrbitRollPID:inject(j8)local j9=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=j9 end end elseif CancelIntoOrbit then BrakeIsOn=true;S=1;W="Orbitting cancelled, parking"OrbitTargetSet=false;OrbitTargetPlanet=nil;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)CancelIntoOrbit=false end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dV=unit.getClosestPlanetInfluence()>0;local ja=HoldAltitude-aq;local jb=500+bi;local jc=1;if AutoTakeoff then jc=utils.clamp(bi/100,0.1,1)end;local iJ=(utils.smoothstep(ja,-jb,jb)-0.5)*2*MaxPitch*jc;if not Reentry and not aj and not VectorToTarget and cw:dot(bh:normalize())<0.99 then iJ=(utils.smoothstep(ja,-jb*utils.clamp(20-19*j()*10,1,20),jb*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jc end;if not AltitudeHold then iJ=0 end;if LockPitch~=nil then if dV then iJ=LockPitch else LockPitch=nil end end;bf=true;local jd=O;if Reentry then local ReentrySpeed=math.floor(br)local je,jf=ba.computeDistanceAndTime(bi,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jg=aq-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and aq>planet.noAtmosphericDensityAltitude+5000 and bi<=ReentrySpeed/3.6 and bi>ReentrySpeed/3.6-10 and math.abs(bh:normalize():dot(cw))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(je>-1 and jg<=je or aq<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not J then iJ=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iJ=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aq>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif aq<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==br then J=false;Reentry=false;bf=true end end end;if bi>I and not ak and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bh))end;if(VectorToTarget or ak)and AutopilotTargetIndex>0 and j()>0.01 then local du;if CustomTarget~=nil then du=CustomTarget.position-vec3(core.getConstructWorldPos())else du=a7.center-iu end;local it=vec3(core.getConstructWorldOrientationUp())local iI=math.deg(cP(cy:normalize(),bh,du))*2;local jh=math.rad(math.abs(dI))if bi>minRollVelocity and j()>0.01 then local ji=utils.clamp(90-iJ*2,-90,90)bp=utils.clamp(iI*2,-ji,ji)local jj=iI;iI=utils.clamp(utils.clamp(iI,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jh)+4*(iw-iJ)*math.sin(math.rad(dI)),-YawStallAngle*0.85,YawStallAngle*0.85)iJ=utils.clamp(utils.clamp(iJ*math.cos(jh),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jj)*math.sin(jh),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bp=0;iI=utils.clamp(iI,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jk=ix-iI;if not bn and bi>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jk)local iL=utils.clamp(yawPID:get(),-1,1)P=P+iL elseif ap and am>-1 or bi<minRollVelocity then AlignToWorldVector(du)elseif bn and j()>0.01 then if(ix<-YawStallAngle or ix>YawStallAngle)and j()>0.01 then AlignToWorldVector(bh)end;if(iy<-PitchStallAngle or iy>PitchStallAngle)and j()>0.01 then iJ=utils.clamp(iw-iy,iw-PitchStallAngle*0.85,iw+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ak then local iN=planet:getAltitude(CustomTarget.position)local jg=math.sqrt(du:len()^2-(aq-iN)^2)local jl=LastMaxBrakeInAtmo;if jl then jl=jl*utils.clamp(bi/100,0.1,1)*j()else jl=LastMaxBrake end;if j()<0.01 then jl=LastMaxBrake else end;local ed=bh.x*ef.x+bh.y*ef.y+bh.z*ef.z;local jm=bh:len()-math.abs(ed)local jn=vec3(core.getWorldAirFrictionAcceleration())local jo=math.sqrt(jn:len()-jn:project_on(ef):len())*n()if bi>100 then a1,a2=ba.computeDistanceAndTime(bi,100,n(),0,0,jl+jo)local jp,jq=ba.computeDistanceAndTime(100,0,n(),0,0,jl/2)a1=a1+jp else a1,a2=ba.computeDistanceAndTime(bi,0,n(),0,0,jl/2)end;StrongBrakes=true;if not ak and jg<=a1+bi*is/2 and(bh:project_on_plane(cy):normalize():dot(du:project_on_plane(cy):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jm<0.1 or jg<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jg)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jg end end;if bn and j()>0.01 and am==-1 and bi>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bh)iJ=utils.clamp(iw-iy,iw-PitchStallAngle*0.85,iw+PitchStallAngle*0.85)end;O=jd;local fN=-1;local iV=0.1;if BrakeLanding then iJ=0;local ed=bh.x*ef.x+bh.y*ef.y+bh.z*ef.z;local jr=false;local js=30;if bb~=nil and bb>0 then local jo=0;local dO=utils.clamp(j(),0.4,2)local jl=LastMaxBrakeInAtmo*utils.clamp(bi/100,0.1,1)*dO;local jt=bb*dO+jl+jo-bP;local ju=jl+jo-bP;local jv=jl/2+jo-bP;local jw=bi-math.sqrt(math.abs(jv/2)*20/(0.5*n()))*utils.sign(jv)if jw<0 then jw=0 end;local jx;if bi>100 then local jy,_=ba.computeDistanceAndTime(bi,100,n(),0,0,jl)local jz,_=ba.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jl))jx=jy+jz else jx=ba.computeDistanceAndTime(bi,0,n(),0,0,math.sqrt(jl))end;if jx<20 then BrakeIsOn=false else local jA=0;if jw>100 then local jB,_=ba.computeDistanceAndTime(jw,100,n(),0,0,jt)local jC,_=ba.computeDistanceAndTime(100,0,n(),0,0,bb*dO+math.sqrt(jl)+jo-bP)jA=jB+jC else jA,_=ba.computeDistanceAndTime(jw,0,n(),0,0,bb*dO+math.sqrt(jl)+jo-bP)end;jA=(jA+15+bi*is)*1.1;local jD=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jD then local iN=planet:getAltitude(CustomTarget.position)local jE=aq-iN-100;local du=CustomTarget.position-vec3(core.getConstructWorldPos())local iO=math.sqrt(du:len()^2-(aq-iN)^2)if iO>100 then jD=false elseif jE<=jA or jA==-1 then BrakeIsOn=true;jr=true else BrakeIsOn=false;jr=true end end;if not jD and CalculateBrakeLandingSpeed then if jA>=js then BrakeIsOn=true else BrakeIsOn=false end;jr=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fN=am;if fN>-1 then bf=autoRollPreference;if bi<1 or bh:normalize():dot(cy)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)ab=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bh:normalize():dot(-ef)<0.999 then BrakeIsOn=true elseif ed<-brakeLandingRate and not jr then BrakeIsOn=true elseif not jr then BrakeIsOn=false end end;if AutoTakeoff or ak then local fc,fe,fd=b9:getPlanetarySystem(0):castIntersections(iu,(AutopilotTargetCoords-iu):normalize(),function(ff)return ff.radius+ff.noAtmosphericDensityAltitude end)if math.abs(iJ)<15 and aq/HoldAltitude>0.75 then AutoTakeoff=false;if not ak then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ak and bi<I then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 elseif ak then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;BrakeIsOn=true end elseif ak and j()==0 and a7~=nil and(fc==nil or fc.name==a7.name)then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jF=hoverDetectGround()>-1;local jG=cz;if(VectorToTarget or ak)and not jF and bi>minRollVelocity and j()>0.01 then local jh=math.rad(math.abs(dI))jG=cz*math.abs(math.cos(jh))+iy*math.sin(jh)end;local jH=utils.clamp(iJ-jG,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jH=utils.clamp(iJ-jG,-85,MaxPitch)elseif j()<0.01 then jH=utils.clamp(iJ-jG,-MaxPitch,MaxPitch)end;if math.abs(dI)<5 or VectorToTarget or BrakeLanding or jF or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jH)local iK=pitchPID:get()O=O+iK end end;X=orbit.eccentricity;if antigrav and not ExternalAGG and aq<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if AchieveOrbit then local jI=1000;if planet.name~="Space"then if planet.hasAtmosphere then jI=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jI=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jI=1000 end;local _,iM=bc(planet):escapeAndOrbitalSpeed((iu-planet.center):len()-planet.radius)bf=true;local jJ;if OrbitToTarget and CustomTarget~=nil then jJ=(target.position-iu):normalize():project_on_plane(cy):normalize()else jJ=cw:project_on_plane(cy):normalize()end;jJ=jJ*iM;jJ=(jJ+-cy*(aq-jI)):normalize()*iM end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jK=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jL=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jM=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jN=S;local jO=vec3(core.getWorldVertical())if jO==nil or jO:len()==0 then jO=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jP=vec3(core.getConstructWorldOrientationUp())local jQ=vec3(core.getConstructWorldOrientationForward())local jR=vec3(core.getConstructWorldOrientationRight())local jS=vec3(core.getWorldVelocity())local jT=vec3(core.getWorldVelocity()):normalize()local jU=getRoll(jO,jQ,jR)local jV=math.abs(jU)local jW=utils.sign(jU)local j=j()local jX=vec3(core.getWorldAngularVelocity())local jY=jK*pitchSpeedFactor*jR+jL*rollSpeedFactor*jQ+jM*yawSpeedFactor*jP;if jO:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or aj or AltitudeHold)then local dI=getRoll(jO,jQ,jR)local dJ=dI/180*math.pi;local dK=math.cos(dJ)local dL=math.sin(dJ)local iw=getPitch(jO,jQ,jR*dK+jP*dL)if bf==true and math.abs(bp-jU)>autoRollRollThreshold and jL==0 and math.abs(iw)<85 then local jZ=bp;local j7=autoRollFactor;if j==0 then j7=j7/4;bp=0;jZ=0 end;if rollPID==nil then rollPID=pid.new(j7*0.01,0,j7*0.1)end;rollPID:inject(jZ-jU)local j_=rollPID:get()jY=jY+j_*jQ end end;if jO:len()>0.01 and j>0.0 then local k0=20.0;if turnAssist==true and jV>k0 and jK==0 and jM==0 then local k1=turnAssistFactor*0.1;local k2=turnAssistFactor*0.025;local k3=(jV-k0)/(180-k0)*180;local k4=0;if k3<90 then k4=k3/90 elseif k3<180 then k4=(180-k3)/90 end;k4=k4*k4;local k5=-jW*k2*(1.0-k4)local k6=k1*k4;jY=jY+k6*jR+k5*jP end end;local k7=1;local k8=0;local k9=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then br=utils.clamp(br+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then br=utils.clamp(br-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local ed=-jO:dot(jS)if ap and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(br/3.6-jS:dot(jQ))local ka=throttlePID:get()C=utils.clamp(ka,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jS:len()-br/3.6)local kb=utils.clamp(brakePID:get(),0,1)if j>0 and ed<-80 or j>0.005 then A=kb end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local kc=''local kd=vec3()local ke=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,ab*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",ke,k8)local kf='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kf=kf..ExtraLongitudeTags end;local kg=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kh=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kf,axisCommandId.longitudinal)local ki=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kc=kc..' , '.."lateral airfoil , lateral ground "kd=kd+ki;if kd:len()>constants.epsilon then Nav:setEngineForceCommand(kc,kd,k8,'','','',k9)end;Nav:setEngineForceCommand(kf,kh,k7)local kj='thrust analog vertical fueled 'local kk='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kk=kk..ExtraLateralTags end;if ExtraVerticalTags~="none"then kj=kj..ExtraVerticalTags end;if ab~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kj,ke,k7)else Nav:setEngineForceCommand(kj,vec3(),k7)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kk,ki,k7)else Nav:setEngineForceCommand(kk,vec3(),k7)end;if jN==0 then jN=A end;local kl=-jN*(brakeSpeedFactor*jS+brakeFlatFactor*jT)Nav:setEngineForceCommand('brake',kl)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kl=-jN*(brakeSpeedFactor*jS+brakeFlatFactor*jT)Nav:setEngineForceCommand('brake',kl)local kc=''local kd=vec3()local km=false;local kf='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kf=kf..ExtraLongitudeTags end;local kg=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if kg==axisCommandType.byThrottle then local kh=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kf,axisCommandId.longitudinal)Nav:setEngineForceCommand(kf,kh,k7)elseif kg==axisCommandType.byTargetSpeed then local kh=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kc=kc..' , '..kf;kd=kd+kh;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then km=true end end;local kk='thrust analog lateral 'if ExtraLateralTags~="none"then kk=kk..ExtraLateralTags end;local kn=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kn==axisCommandType.byThrottle then local ko=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kk,axisCommandId.lateral)Nav:setEngineForceCommand(kk,ko,k7)elseif kn==axisCommandType.byTargetSpeed then local ki=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kc=kc..' , '..kk;kd=kd+ki end;local kj='thrust analog vertical 'if ExtraVerticalTags~="none"then kj=kj..ExtraVerticalTags end;local kp=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kp==axisCommandType.byThrottle then local ke=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kj,axisCommandId.vertical)if ab~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kj,ke,k7,'airfoil','ground','',k9)else Nav:setEngineForceCommand(kj,vec3(),k7)Nav:setEngineForceCommand('airfoil vertical',ke,k7,'airfoil','','',k9)Nav:setEngineForceCommand('ground vertical',ke,k7,'ground','','',k9)end elseif kp==axisCommandType.byTargetSpeed then if ab<0 then Nav:setEngineForceCommand('hover',vec3(),k7)end;local kq=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kc=kc..' , '..kj;kd=kd+kq end;local g7=unit.getAxisCommandValue(0)if kd:len()>constants.epsilon then if S~=0 or km or math.abs(jT:dot(jQ))<0.8 or bh:len()>g7/3.6 then kc=kc..', brake'end;Nav:setEngineForceCommand(kc,kd,k8,'','','',k9)end end;local kr=torqueFactor*(jY-jX)local ks=vec3(core.getWorldAirFrictionAngularAcceleration())kr=kr-ks;Nav:setEngineTorqueCommand('torque',kr,k7,'airfoil','','',k9)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local bS=vec3(core.getVelocity()):len()local kt=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ku=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bS*3.6>ku*(1-kt)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS*3.6<ku*(1-kt)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fE=unit.getThrottle()if AtmoSpeedAssist then fE=z*100 end;local g7=fE/100;if j==0 then g7=g7*MaxGameVelocity;if bS>=g7*(1-kt)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS<g7*(1-kt)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else g7=g7*ReentrySpeed/3.6;if bS>=g7*(1-kt)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS<g7*(1-kt)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bD=coroutine.resume(beginSetup)if bD then SetupComplete=true end else Nav:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kv)if kv=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and am==-1 and(j()>0 or aq<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kv=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kv=="forward"then N=N-1 elseif kv=="backward"then N=N+1 elseif kv=="left"then Q=Q-1 elseif kv=="right"then Q=Q+1 elseif kv=="yawright"then R=R-1 elseif kv=="yawleft"then R=R+1 elseif kv=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kv=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kv=="up"then ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kv=="down"then ab=ab-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kv=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kv=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kv=="option1"then IncrementAutopilotTargetIndex()H=false elseif kv=="option2"then DecrementAutopilotTargetIndex()H=false elseif kv=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kv=="option4"then ToggleAutopilot()H=false elseif kv=="option5"then ToggleLockPitch()H=false elseif kv=="option6"then ToggleAltitudeHold()H=false elseif kv=="option7"then wipeSaveVariables()H=false elseif kv=="option8"then ToggleFollowMode()H=false elseif kv=="option9"then if gyro~=nil then gyro.toggle()at=gyro.getState()==1 end;H=false elseif kv=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;be=false;bd=false end elseif kv=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kv=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kv=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif kv=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kv=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kv=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kv=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kv)if kv=="forward"then N=0 elseif kv=="backward"then N=0 elseif kv=="left"then Q=0 elseif kv=="right"then Q=0 elseif kv=="yawright"then R=0 elseif kv=="yawleft"then R=0 elseif kv=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kv=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kv=="up"then ab=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kv=="down"then ab=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kv=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end;H=false elseif kv=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end;H=false elseif kv=="lshift"then if system.isViewLocked()==1 then V=false;ac=0;ad=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;be=false;bd=false end elseif kv=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kv=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kv)if kv=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kv=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kv=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kv=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dz)local i;local kw="/commands /setname /G /agg /addlocation /copydatabank"local kx,ky=nil,nil;local kz="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dz," ")kx=dz;if i~=nil then kx=string.sub(dz,0,i-1)ky=string.sub(dz,i+1)elseif not string.find(kw,kx)then for g3 in string.gmatch(kz,"([^\n]+)")do c(g3)end;return end;if kx=="/setname"then if ky==nil or ky==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(ky)else W="Select a saved target to rename first"end elseif kx=="/addlocation"then if ky==nil or ky==""or string.find(ky,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(ky,"::")local cm=string.sub(ky,1,i-2)local cg=string.sub(ky,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ch='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ci,cj,cd,ce,cc=string.match(cg,ch)local planet=b3[tonumber(ci)][tonumber(cj)]AddNewLocationByWaypoint(cm,planet,cg)W="Added "..cm.." to saved locations,\nplanet "..planet.name.." at "..cg;ae=5 elseif kx=="/agg"then if ky==nil or ky==""then W="Usage: /agg targetheight"return end;ky=tonumber(ky)if ky<1000 then ky=1000 end;AntigravTargetAltitude=ky;W="AGG Target Height set to "..ky elseif kx=="/G"then if ky==nil or ky==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if ky=="dump"then for bB,bC in pairs(a)do if type(_G[bC])=="boolean"then if _G[bC]==true then c(bC.." true")else c(bC.." false")end elseif _G[bC]==nil then c(bC.." nil")else c(bC.." ".._G[bC])end end;return end;i=string.find(ky," ")local kA=string.sub(ky,0,i-1)local kB=string.sub(ky,i+1)for bB,bC in pairs(a)do if bC==kA then W="Variable "..kA.." changed to "..kB;local kC=type(_G[bC])if kC=="number"then kB=tonumber(kB)elseif kC=="boolean"then if string.lower(kB)=="true"then kB=true else kB=false end end;_G[bC]=kB;return end end;W="No such global variable: "..kA elseif kx=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
