name: ButtonsHud - Dimencia and Archaegeo v5.443 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        circleRad = 400 --export: (Default: 400)
        DeadZone = 50 --export: (Default: 50)
        DisplayOrbit = true --export: (Default: true) 
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollPreference = false --export: (Default: false)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssist = true --export: (Default: true)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        minRollVelocity = 150 --export: (Default: 150)
        VertTakeOffEngine = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=j()>0;local an=core.getAltitude()local ao=core.getElementIdList()local ap=system.getTime()local aq=nil;local ar=false;local as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local au={}local av=0;local aw=0;local ax=""local ay=true;local az={}local aA=1;local aB=0.001;local aC=ResolutionX;local aD=ResolutionY;local aE=nil;local aF=nil;local aG=nil;local aH=nil;local aI=false;local aJ=false;local aK=0;local aL=nil;local aM={}local aN={}local aO={}local aP=0;local aQ=false;local aR={}local aS={}local aT=d(1/apTickRate)*2;local aU={}local aV={}local aW={}local aX={}local aY=false;local aZ=16;local a_=0;local b0=nil;local b1=""local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=false;local bb=false;local bc=autoRollPreference;local bd=vec3(core.getWorldVelocity())local be=vec3(bd):len()local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=system.getTime()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=0;function LoadVariables()if dbHud_1 then local bC=dbHud_1.hasKey;if not useTheseSettings then for bD,bE in pairs(a)do if bC(bE)then local bF=f(dbHud_1.getStringValue(bE))if bF~=nil then c(bE.." "..dbHud_1.getStringValue(bE))_G[bE]=bF;aI=true end end end end;coroutine.yield()for bD,bE in pairs(b)do if bC(bE)then local bF=f(dbHud_1.getStringValue(bE))if bF~=nil then c(bE.." "..dbHud_1.getStringValue(bE))_G[bE]=bF;aI=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 elseif aI then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bG=system.getTime()if LastStartTime+180<bG then LastMaxBrakeInAtmo=0 end;if aI then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aC=ResolutionX;aD=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bc=autoRollPreference end;LastStartTime=bG;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]bn=AtmoSpeedLimit end;function CalculateFuelVolume(bH,bI)if bH>bI then bI=bH end;if ContainerOptimization>0 then bI=bI-bI*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bI=bI-bI*FuelTankOptimization*0.05 end;return bI end;function ProcessElements()local bJ=fuelX~=0 and fuelY~=0;for bD in pairs(ao)do local type=l(ao[bD])if string.match(type,'^.*Space Engine$')then if string.match(tostring(core.getElementTagsById(ao[bD])),'^.*vertical.*$')then local bK=core.getElementRotationById(ao[bD])if bK[4]<0 then if utils.round(-bK[4],0.1)==0.5 then bz=true;system.print("Space Engine Up detected")end else if utils.round(bK[4],0.1)==0.5 then bA=true;system.print("Space Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bL=h(ao[bD])if bL>10000 then aZ=128 elseif bL>1000 then aZ=64 elseif bL>150 then aZ=32 end end;aP=aP+h(ao[bD])if bJ and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bL=h(ao[bD])local bM=m(ao[bD])local bH=0;local bN=system.getTime()if type=="Atmospheric Fuel Tank"then local bI=400;local bO=35.03;if bL>10000 then bI=51200;bO=5480 elseif bL>1300 then bI=6400;bO=988.67 elseif bL>150 then bI=1600;bO=182.67 end;bH=bM-bO;if fuelTankHandlingAtmo>0 then bI=bI+bI*fuelTankHandlingAtmo*0.2 end;bI=CalculateFuelVolume(bH,bI)aM[#aM+1]={ao[bD],core.getElementNameById(ao[bD]),bI,bO,bH,bN}end;if type=="Rocket Fuel Tank"then local bI=320;local bO=173.42;if bL>65000 then bI=40000;bO=25740 elseif bL>6000 then bI=5120;bO=4720 elseif bL>700 then bI=640;bO=886.72 end;bH=bM-bO;if fuelTankHandlingRocket>0 then bI=bI+bI*fuelTankHandlingRocket*0.1 end;bI=CalculateFuelVolume(bH,bI)aO[#aO+1]={ao[bD],core.getElementNameById(ao[bD]),bI,bO,bH,bN}end;if type=="Space Fuel Tank"then local bI=2400;local bO=182.67;if bL>10000 then bI=76800;bO=5480 elseif bL>1300 then bI=9600;bO=988.67 end;bH=bM-bO;if fuelTankHandlingSpace>0 then bI=bI+bI*fuelTankHandlingSpace*0.2 end;bI=CalculateFuelVolume(bH,bI)aN[#aN+1]={ao[bD],core.getElementNameById(ao[bD]),bI,bO,bH,bN}end end end end;function SetupChecks()if gyro~=nil then aq=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;local bP=j()if door and(bP>0 or bP==0 and an<10000)then for _,bE in pairs(door)do bE.toggle()end end;if switch then for _,bE in pairs(switch)do bE.toggle()end end;if forcefield and(bP>0 or bP==0 and an<10000)then for _,bE in pairs(forcefield)do bE.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bQ=AboveGroundLevel()if bQ~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bf)if bf==0 and not M then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if am and bQ~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=am end;function ConvertResolutionX(bE)if ResolutionX==1920 then return bE else return round(ResolutionX*bE/1920,0)end end;function ConvertResolutionY(bE)if ResolutionY==1080 then return bE else return round(ResolutionY*bE/1080,0)end end;function RefreshLastMaxBrake(bR,bS)if bR==nil then bR=core.g()end;bR=round(bR,5)local bT=j()if bS~=nil and bS or(aL==nil or aL~=bR)then local bd=core.getVelocity()local bU=vec3(bd):len()local bV=f(unit.getData()).maxBrake;if bV~=nil and bV>0 and am then bV=bV/utils.clamp(bU/100,0.1,1)bV=bV/bT;if bT>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bV)/2 else LastMaxBrakeInAtmo=bV end end end;if bV~=nil and bV>0 then LastMaxBrake=bV end;aL=bR end end;function MakeButton(bW,bX,bY,bZ,b_,c0,c1,c2,c3)local c4={enableName=bW,disableName=bX,width=bY,height=bZ,x=b_,y=c0,toggleVar=c1,toggleFunction=c2,drawCondition=c3,hovered=false}table.insert(az,c4)return c4 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bD,bE in pairs(b0[0])do table.insert(AtlasOrdered,{name=bE.name,index=bD})end;local function c5(c6,c7)return c6.name<c7.name end;table.sort(AtlasOrdered,c5)end;function AddLocationsToAtlas()for bD,bE in pairs(SavedLocations)do table.insert(b0[0],bE)end;UpdateAtlasLocationsList()end;function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*epsilon end;function zeroConvertToMapPosition(ca,cb)local cc=vec3(cb)if ca.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=ca.planetarySystemId},MapPosition)end;local cd=cc-ca.center;local ac=cd:len()local ce=ac-ca.radius;local cf=0;local cg=0;if not float_eq(ac,0)then local ch=math.atan(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ac)end;return setmetatable({latitude=math.deg(cf),longitude=math.deg(cg),altitude=ce,bodyId=ca.bodyId,systemId=ca.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(ci)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ck,cl,cf,cg,ce=string.match(ci,cj)if ck=="0"and cl=="0"then return vec3(tonumber(cf),tonumber(cg),tonumber(ce))end;cg=math.rad(cg)cf=math.rad(cf)local planet=b0[tonumber(ck)][tonumber(cl)]local cm=math.cos(cf)local cn=vec3(cm*math.cos(cg),cm*math.sin(cg),math.sin(cf))return planet.center+(planet.radius+ce)*cn end;function AddNewLocationByWaypoint(co,planet,ci)if dbHud_1 then local cp={}local position=zeroConvertToWorldCoordinates(ci)if planet.name=="Space"then cp={position=position,name=co,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bP=false;if planet.hasAtmosphere then bP=true else bP=false end;cp={position=position,name=co,atmosphere=bP,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cp;table.insert(b0[0],cp)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cq=planet.name..". "..#SavedLocations;if radar_1 then local cr,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cr~=nil and cr~=""then cq=cq.." "..radar_1.getConstructName(cr)end end;local cp={}local bP=false;if planet.hasAtmosphere then bP=true end;cp={position=position,name=cq,atmosphere=bP,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cp;table.insert(b0[0],cp)UpdateAtlasLocationsList()W="Location saved as "..cq else W="Databank must be installed to save locations"end end;function UpdatePosition(cs)local ct=-1;local cp;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name==CustomTarget.name then ct=bD;break end end;if ct~=-1 then local cu;if cs~=nil then cp={position=SavedLocations[ct].position,name=cs,atmosphere=SavedLocations[ct].atmosphere,planetname=SavedLocations[ct].planetname,gravity=SavedLocations[ct].gravity}else cp={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ct].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ct]=cp;ct=-1;for bD,bE in pairs(b0[0])do if bE.name and bE.name==CustomTarget.name then ct=bD end end;if ct>-1 then b0[0][ct]=cp end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local ct=-1;for bD,bE in pairs(b0[0])do if bE.name and bE.name==CustomTarget.name then ct=bD end end;if ct>-1 then table.remove(b0[0],ct)end;ct=-1;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name==CustomTarget.name then W=bE.name.." saved location cleared"ct=bD;break end end;if ct~=-1 then table.remove(SavedLocations,ct)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cv)cv[#cv+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;function ToggleWidgets()if ay then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ay=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ay=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cw,cx,b_,c0,bY,bZ)if cw>b_ and cw<b_+bY and cx>c0 and cx<c0+bZ then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=an+AutoTakeoffAltitude end;by=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if by then CancelIntoOrbit=false else CancelIntoOrbit=true end;by=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;bB=0 elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;bB=0;if bx==nil then bx=planet end else W="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local cA=vec3(core.getWorldVertical())local cB=getPitch(cA,cy,cz)LockPitch=cB;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bG=system.getTime()if bG-bl<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 end;bl=-1;if AltitudeHold then return end end else bl=bG end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bc=true;LockPitch=nil;by=false;if hoverDetectGround()==-1 or not am then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+2000;IntoOrbit=true;by=false end else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=an;IntoOrbit=true;by=false end end;if not ah and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=an+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ah then HoldAltitude=100000 end else bc=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bc=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()local bG=system.getTime()if bG-bm<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bG end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah then UpdateAutopilotTarget()local cC=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then by=false;if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if an>100000 or an==0 then by=false;Autopilot=true else ag=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then local cD=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a4.name==planet.name and cD)then ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ah=true;ToggleAltitudeHold()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=an;TargetSet=false;Reentry=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bc=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bc=autoRollPreference;ag=false;ai=false;a8=0 end end;function CheckDamage(cv)local cE=0;ax=""local cF=aP;local cG=0;local cH=0;local cI=0;local cJ=0;local cK=""for bD in pairs(ao)do local bL=0;local cL=0;cL=h(ao[bD])bL=k(ao[bD])cG=cG+bL;if bL<cL then if bL==0 then cI=cI+1 else cH=cH+1 end;if aQ and#au==0 then position=vec3(core.getElementPositionById(ao[bD]))local b_=position.x-aZ;local c0=position.y-aZ;local cM=position.z-aZ;table.insert(au,core.spawnArrowSticker(b_,c0,cM+1,"down"))table.insert(au,core.spawnArrowSticker(b_,c0,cM+1,"down"))core.rotateSticker(au[2],0,0,90)table.insert(au,core.spawnArrowSticker(b_+1,c0,cM,"north"))table.insert(au,core.spawnArrowSticker(b_+1,c0,cM,"north"))core.rotateSticker(au[4],90,90,0)table.insert(au,core.spawnArrowSticker(b_-1,c0,cM,"south"))table.insert(au,core.spawnArrowSticker(b_-1,c0,cM,"south"))core.rotateSticker(au[6],90,-90,0)table.insert(au,core.spawnArrowSticker(b_,c0-1,cM,"east"))table.insert(au,core.spawnArrowSticker(b_,c0-1,cM,"east"))core.rotateSticker(au[8],90,0,90)table.insert(au,core.spawnArrowSticker(b_,c0+1,cM,"west"))table.insert(au,core.spawnArrowSticker(b_,c0+1,cM,"west"))core.rotateSticker(au[10],-90,0,90)table.insert(au,ao[bD])end elseif aQ and#au>0 and au[11]==ao[bD]then for cN in pairs(au)do core.deleteSticker(au[cN])end;au={}end end;cE=d(cG/cF*100)if cE<100 then cv[#cv+1]=[[<g class="pbright txt">]]cJ=d(cE*2.55)cK=e("rgb(%d,%d,%d)",255-cJ,cJ,0)if cE<100 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cK,cE)if cI>0 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cK,cI,cH)elseif cH>0 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cK,cH)end end;cv[#cv+1]=[[<\g>]]end end;function DrawCursorLine(cv)local cO=d(utils.clamp(ac/(aC/4)*255,0,255))cv[#cv+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(t+0.5)+cO,d(v+0.5)-cO,d(u+0.5)-cO)end;function getPitch(cP,cQ,c7)local cR=cP:cross(c7):normalize_inplace()local cB=math.acos(utils.clamp(cR:dot(-cQ),-1,1))*constants.rad2deg;if cR:cross(-cQ):dot(c7)<0 then cB=-cB end;return cB end;local function cS(cT,cU,cV)cU=cU:project_on_plane(cT)cV=cV:project_on_plane(cT)return p(cU:cross(cV):dot(cT),cU:dot(cV))end;function clearAll()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;ag=false;ah=false;J=false;bc=autoRollPreference;VectorToTarget=false;TurnBurn=false;aq=false;LockPitch=nil else ak=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ab=5 else if aJ then for bD,bE in pairs(a)do dbHud_1.setStringValue(bE,g(nil))end;for bD,bE in pairs(b)do if bE~="SavedLocations"then dbHud_1.setStringValue(bE,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ab=5;aJ=false;aI=false;a7=true else W="Press ALT-7 again to confirm wipe of ALL data"aJ=true end end end;function CheckButtons()for _,bE in pairs(az)do if bE.hovered then if not bE.drawCondition or bE.drawCondition()then bE.toggleFunction()end;bE.hovered=false end end end;function SetButtonContains()local b_=a9+aC/2;local c0=aa+aD/2;for _,bE in pairs(az)do bE.hovered=Contains(b_,c0,bE.x,bE.y,bE.width,bE.height)end end;function DrawButton(cv,cW,hover,b_,c0,cX,cY,cZ,c_,d0,d1)if type(d0)=="function"then d0=d0()end;if type(d1)=="function"then d1=d1()end;cv[#cv+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",b_,c0,cX,cY)if cW then cv[#cv+1]=e("%s'",cZ)else cv[#cv+1]=c_ end;if hover then cv[#cv+1]=" style='stroke:white; stroke-width:2'"else cv[#cv+1]=" style='stroke:black; stroke-width:1'"end;cv[#cv+1]="></rect>"cv[#cv+1]=e("<text x='%f' y='%f' font-size='24' fill='",b_+cX/2,c0+cY/2+5)if cW then cv[#cv+1]="black"else cv[#cv+1]="white"end;cv[#cv+1]="' text-anchor='middle' font-family='Montserrat'>"if cW then cv[#cv+1]=e("%s</text>",d0)else cv[#cv+1]=e("%s</text>",d1)end end;function DrawButtons(cv)local d2="rgb(50,50,50)'"local d3="rgb(210,200,200)"local d4=DrawButton;for _,bE in pairs(az)do local bX=bE.disableName;local bW=bE.enableName;if type(bX)=="function"then bX=bX()end;if type(bW)=="function"then bW=bW()end;if not bE.drawCondition or bE.drawCondition()then d4(cv,bE.toggleVar(),bE.hovered,bE.x,bE.y,bE.width,bE.height,d3,d2,bX,bW)end end end;function DrawTank(cv,aY,b_,d5,d6,d7,d8,d9)local da=1;local db=2;local dc=3;local dd=4;local de=5;local df=6;local dg=""local dh=0;local di=fuelY;local dj=fuelY+10;if o()==1 and not RemoteHud then di=di-50;dj=dj-50 end;cv[#cv+1]=[[<g class="pdim txtfuel">]]if d6=="ATMO"then dg="atmofueltank"elseif d6=="SPACE"then dg="spacefueltank"else dg="rocketfueltank"end;dh=_G[dg.."_size"]if#d7>0 then for i=1,#d7 do local cq=string.sub(d7[i][db],1,12)local dk=0;for cN=1,dh do if d7[i][db]==f(unit[dg.."_"..cN].getData()).name then dk=cN;break end end;if aY or d8[i]==nil or d9[i]==nil then local dl=0;local dm=0;local dn=0;local dp=0;local bN=system.getTime()if dk~=0 then d9[i]=f(unit[dg.."_"..dk].getData()).percentage;d8[i]=f(unit[dg.."_"..dk].getData()).timeLeft;if d8[i]=="n/a"then d8[i]=0 end else dn=m(d7[i][da])-d7[i][dd]dl=d7[i][dc]d9[i]=d(0.5+dn*100/dl)dm=d7[i][de]dp=d7[i][df]if dm<=dn then d8[i]=0 else d8[i]=d(0.5+dn/((dm-dn)/(bN-dp)))end;d7[i][de]=dn;d7[i][df]=bN end end;if cq==d5 then cq=e("%s %d",d6,i)end;if dk==0 then cq=cq.." *"end;local dq;if d8[i]==0 then dq="n/a"else dq=FormatTimeString(d8[i])end;if d9[i]~=nil then local cJ=d(d9[i]*2.55)local cK=e("rgb(%d,%d,%d)",255-cJ,cJ,0)local dr=""if dq~="n/a"and d8[i]<120 or d9[i]<5 then if aY then dr=[[class="red"]]end end;cv[#cv+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],b_,di,dr,cq,b_,dj,cK,d9[i],dq)di=di+30;dj=dj+30 end end end;cv[#cv+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bd)bd=vec3(bd)local cB=-math.deg(math.atan(bd.y,bd.z))+180;cB=cB-90;if cB<0 then cB=360+cB end;if cB>180 then cB=-180+cB-180 end;return-cB end;function getRelativeYaw(bd)bd=vec3(bd)local ds=math.deg(math.atan(bd.y,bd.x))-90;if ds<-180 then ds=360+ds end;return ds end;function AlignToWorldVector(dt,du,dv)if not am or not bi or aj~=-1 or be<I then local dw=dv;if dw==nil then dw=DampingMultiplier end;if du==nil then du=aB end;dt=vec3(dt):normalize()local dx=vec3(core.getConstructWorldOrientationForward())-dt;local dy=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationRight())*aA;local dz=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dy/2 end;if aw==0 then aw=dz/2 end;if math.abs(dy)<0.1 then P=P-dy*2 else P=P-(dy+(dy-av)*dw)end;if math.abs(dz)<0.1 then O=O+dz*2 else O=O+dz+(dz-aw)*dw end;av=dy;aw=dz;if math.abs(dy)<du and math.abs(dz)<du then return true end;return false elseif bi and aj==-1 then dt=vec3(core.getWorldVelocity())local dw=dv;if dw==nil then dw=DampingMultiplier end;if du==nil then du=aB end;dt=vec3(dt):normalize()local dx=vec3(core.getConstructWorldOrientationForward())-dt;local dy=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationRight())*aA;local dz=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dy/2 end;if aw==0 then aw=dz/2 end;if math.abs(dy)<0.1 then P=P-dy*5 else P=P-(dy+(dy-av)*dw)end;if math.abs(dz)<0.1 then O=O+dz*5 else O=O+dz+(dz-aw)*dw end;av=dy;aw=dz;if math.abs(dy)<du and math.abs(dz)<du then return true end;return false end end;function getAPEnableName()local cq=AutopilotTargetName;if cq==nil then local dA,dB=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cq=CustomTarget.name.." "..dA..dB end;if cq==nil then cq="None"end;return"Engage Autopilot: "..cq end;function getAPDisableName()local cq=AutopilotTargetName;if cq==nil then cq=CustomTarget.name end;if cq==nil then cq="None"end;return"Disable Autopilot: "..cq end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;bc=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ab=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bc=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bc=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dC,dD=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..dC..dD;cmdCruise(math.floor(bn))end;AutoTakeoff=false end;function SetupButtons()local dE=50;local dF=260;local dG=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dF,dE,aC/2-dF/2,aD/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dF,dE,aC/2-dF/2-50-dG.width,aD/2-dE+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dF,dE,aC/2-dF/2+dG.width+50,aD/2-dE+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dH=MakeButton(getAPEnableName,getAPDisableName,600,60,aC/2-600/2,aD/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dH.height,dH.x+dH.width+30,dH.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dH.height,dH.x+dH.width+30,dH.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dH.height,dH.x-200-30,dH.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dE=60;dF=300;local b_=10;local c0=aD/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dF,dE,b_,c0,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dF,dE,b_+dF+20,c0,function()return AltitudeHold end,ToggleAltitudeHold)c0=c0+dE+20;MakeButton("Engage Autoland","Disable Autoland",dF,dE,b_,c0,function()return AutoLanding end,ToggleAutoLanding)local dI,dJ,dK;if VertTakeOffEngine then dI="Engage Vertical Takeoff"dJ="Disable Vertical Takeoff"dK=VertTakeOff else dI="Engage Auto Takeoff"dJ="Disable Auto Takeoff"dK=AutoTakeoff end;MakeButton(dI,dJ,dF,dE,b_+dF+20,c0,function()return dK end,ToggleAutoTakeoff)c0=c0+dE+20;MakeButton("Show Orbit Display","Hide Orbit Display",dF,dE,b_,c0,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dF,dE,b_+dF+20,c0,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)c0=c0+dE+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dF,dE,b_,c0,function()return Reentry end,function()ag=true;ProgradeToggle()end,function()return an>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dF,dE,b_+dF+20,c0,function()return Reentry end,BeginReentry,function()return an>ReentryAltitude end)c0=c0+dE+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dF,dE,b_,c0,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dF,dE,b_+dF+20,c0,function()return aQ end,function()aQ=not aQ;if aQ then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)c0=c0+dE+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dF,dE,b_,c0,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;c0=c0+dE+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dF*2,dE,b_,c0,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dL=Nav.axisCommandManager:getAxisCommandType(0)local dM="TRAVEL"if dL==1 then dM="CRUISE"end;if Autopilot then dM="AUTOPILOT"end;return dM end;function UpdateHud(cv)local ce=an;local bd=core.getVelocity()local bU=vec3(bd):len()local cA=vec3(core.getWorldVertical())local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local dN=vec3(core.getConstructWorldOrientationUp())local dO=getRoll(cA,cy,cz)local dP=dO/180*math.pi;local dQ=math.cos(dP)local dR=math.sin(dP)local cB=getPitch(cA,cy,cz*dQ+dN*dR)local dS=dO;local dT=cB;local dU=j()local dV=d(unit.getThrottle())local dW=bU*3.6;local dX=unit.getAxisCommandValue(0)local dY=ConvertResolutionX(1770)local dZ=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dX=z;dV=z*100 end;local dM=GetFlightStyle()local d_="ROLL"local cD=unit.getClosestPlanetInfluence()>0;if dV==nil then dV=0 end;if not cD then if bU>5 then cB=getRelativePitch(bd)dO=getRelativeYaw(bd)else cB=0;dO=0 end;d_="YAW"end;if x>50000 and not am then local e0;if x>200000 then e0=round(x/200000,2).." su"else e0=round(x/1000,1).." km"end;cv[#cv+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dY,dZ,e0)end;cv[#cv+1]=ae;cv[#cv+1]=ax;cv[#cv+1]=ad;if a_%aT==0 then aY=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cv,aY,fuelX,"Atmospheric ","ATMO",aM,aW,aX)DrawTank(cv,aY,fuelX+100,"Space fuel t","SPACE",aN,aU,aV)DrawTank(cv,aY,fuelX+200,"Rocket fuel ","ROCKET",aO,aR,aS)end;if aY then aY=false;a_=0 end;a_=a_+1;DrawVerticalSpeed(cv,ce)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cD then DrawRollLines(cv,centerX,centerY,dS,d_,cD)DrawArtificialHorizon(cv,dT,dS,centerX,centerY,cD,d(getRelativeYaw(bd)),bU)else DrawRollLines(cv,centerX,centerY,dO,d_,cD)DrawArtificialHorizon(cv,cB,dO,centerX,centerY,cD,d(dO),bU)end;DrawAltitudeDisplay(cv,ce,cD)DrawPrograde(cv,bd,bU,centerX,centerY)end end;DrawThrottle(cv,dM,dV,dX)DrawSpeed(cv,dW)DrawWarnings(cv)DisplayOrbitScreen(cv)if screen_2 then local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/b2;local c0=450+ci.y/b3;screen_2.moveContent(b4,(b_-80)/19.2,(c0-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cv)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local e1=as;local e2=at;local e3=as;local e4=at;if IsInFreeLook()and not brightHud then e1=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]e2=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cv[#cv+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],e1,e1,e3,e3,e2,e2,e4,e4,ResolutionX,ResolutionY)end;function HUDEpilogue(cv)cv[#cv+1]="</svg>"end;function DrawSpeed(cv,dW)local e5=throtPosY-10;local e6=throtPosX+10;cv[#cv+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e5=75 end;cv[#cv+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e6,e5,d(dW))end;function DrawOdometer(cv,a5,TotalDistanceTravelled,dM,a6,dU)local e7=ConvertResolutionX(1240)local e8=ConvertResolutionY(55)local e9=e8+10;local dU=j()local bR=core.g()local ea=0;local eb=0;local ec=0;RefreshLastMaxBrake(bR)if am then ec=LastMaxBrakeInAtmo else ec=LastMaxBrake end;maxThrust=Nav:maxForceForward()aK=n()if not ShowOdometer then return end;local ed=vec3(core.getWorldAcceleration()):len()/9.80665;if bR>0.1 then eb=aK*bR;ea=maxThrust/bR end;cv[#cv+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e7=ConvertResolutionX(1120)e8=ConvertResolutionY(55)e9=e8+10 elseif am then local ee=ConvertResolutionX(770)cv[#cv+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ee,e8,ee,e9,dU)end;cv[#cv+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e7,e8,e7,e9,bR/9.80665,e7,e8+20,e7,e9+20,ed)cv[#cv+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cv[#cv+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a5,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a6),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aK/1000,ConvertResolutionX(1240),ConvertResolutionY(10),ec/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dM)if bR>0.1 then cv[#cv+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ea/1000,ConvertResolutionX(1240),ConvertResolutionY(20),eb/1000)else cv[#cv+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cv[#cv+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dM)end;cv[#cv+1]="</g>"end;function DrawThrottle(cv,dM,dV,dX)dV=math.floor(dV+0.5)local di=throtPosY+10;local dj=throtPosY+20;if o()==1 and not RemoteHud then di=55;dj=65 end;local ef="CRUISE"local unit="km/h"local eg=dX;if dM=="TRAVEL"or dM=="AUTOPILOT"then ef="THROT"unit="%"eg=dV;local eh="dim"if dV<0 then eh="red"end;cv[#cv+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eh,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dV),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cv[#cv+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,di,ef,throtPosX+10,dj,eg,unit)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dV=math.floor(C*100+0.5)local eh="red"if dV<0 then eh="red"end;cv[#cv+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],eh,1-math.abs(dV),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cv[#cv+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,di+40,"LIMIT",throtPosX+10,dj+40,dV,"%")end;if am and AtmoSpeedAssist or Reentry then cv[#cv+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,di-40,"LIMIT: ",bn.." km/h")elseif not am and Autopilot then cv[#cv+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,di-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cv,ce)if ce<200000 and not am or ce and am then local ei=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local ej=0;if math.abs(ei)>1 then ej=45*math.log(math.abs(ei),10)if ei<0 then ej=-ej end end;cv[#cv+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(ei),d(ej))end end;function getHeading(cQ)local ek=-vec3(core.getWorldVertical())cQ=cQ-cQ:project_on(ek)local el=vec3(0,0,1)el=el-el:project_on(ek)local em=el:cross(ek)local ej=el:angle_between(cQ)*constants.rad2deg;if cQ:dot(em)<0 then ej=360-ej end;return ej end;function DrawRollLines(cv,centerX,centerY,dS,d_,cD)local en=circleRad;local eo=20;eo=d(eo)local ep=d(dS)if cD then for i=-45,45,5 do local eq=i;cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],eq,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cv[#cv+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+en+eo-len,centerX,centerY+en+eo)end;cv[#cv+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+en+eo-35,d_,centerX,centerY+en+eo-25,ep)cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dS,centerX,centerY)cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+en+eo-20,centerX+5,centerY+en+eo-20,centerX,centerY+en+eo-15)cv[#cv+1]="</g>"end;local ds=ep;if cD then ds=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local er=20;local es=d(ds)local et=0;local eu=centerY+en+eo+20;local ev=centerX;if d_~="YAW"then eu=ConvertResolutionY(130)ev=ConvertResolutionX(960)end;local ew=[[<path class="txttick line" d="]]for i=d(es-(er+10)-es%5+0.5),d(es+er+10+es%5+0.5),5 do local b_=ev+-i*5+ds*5;if i%10==0 then et=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cv[#cv+1]=e([[
                            <text x="%f" y="%f">%d</text>]],b_+5,eu-12,q)elseif i%5==0 then et=5 end;if et==10 then ew=e([[%s M %f %f v %d]],ew,b_,eu-5,et)else ew=e([[%s M %f %f v %d]],ew,b_,eu-2.5,et)end end;cv[#cv+1]=ew..[["/>]]cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ev-5,eu+10,ev+5,eu+10,ev,eu+5)if cD then d_="HDG"end;cv[#cv+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],ev,eu+25,es,ev,eu+35,d_)end;function DrawArtificialHorizon(cv,dT,dS,centerX,centerY,cD,ex,bU)local en=circleRad;local ey=d(en*3/5)if en>0 then local ez=d(dT)local len=0;local ew=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dS,centerX,centerY)if not am then ew=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cv[#cv+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],en-1,centerX,centerY)cv[#cv+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ez-30-ez%5+0.5),d(ez+30+ez%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c0=centerY+-i*5+dT*5;if len==30 then ew=e([[%s M %d %f h %d]],ew,centerX-ey-len,c0,len)if am then cv[#cv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dS,centerX,centerY,centerX-ey+10,c0,i)cv[#cv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dS,centerX,centerY,centerX+ey-10,c0,i)if i==0 or i==180 or i==-180 then cv[#cv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dS,centerX,centerY,centerX-ey+20,c0,ey*2-40)end else cv[#cv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ey+10,c0,i)cv[#cv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ey-10,c0,i)end;ew=e([[%s M %d %f h %d]],ew,centerX+ey,c0,len)else ew=e([[%s M %d %f h %d]],ew,centerX-ey-len,c0,len)ew=e([[%s M %d %f h %d]],ew,centerX+ey,c0,len)end end;cv[#cv+1]=ew..[["/>]]local eA="PITCH"if not cD then eA="REL PITCH"end;if dT>90 and not am then dT=90-(dT-90)elseif dT<-90 and not am then dT=-90-(dT+90)end;if en>200 then if am then if bU>I then cv[#cv+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ex)end;cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dS,centerX,centerY)else cv[#cv+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ey+25,centerY-5,centerX-ey+20,centerY,centerX-ey+25,centerY+5,centerX-ey+50,centerY+4,ez)cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ey-25,centerY-5,centerX+ey-20,centerY,centerX+ey-25,centerY+5,centerX+ey-30,centerY+4,ez)cv[#cv+1]="</g>"end;local eB=d(en/3)cv[#cv+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eB,centerY,en-eB)if not am and cD then cv[#cv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dS,centerX,centerY,centerX-ey+10,centerY,ey*2-20)end;cv[#cv+1]="</g>"if en<200 then if am and bU>I then cv[#cv+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-en,eA,centerX,centerY-en+10,ez,centerX,centerY-15,"Yaw",centerX,centerY+20,ex)else cv[#cv+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-en,eA,centerX,centerY-en+15,ez)end end end end;function DrawAltitudeDisplay(cv,ce,cD)local eC=altMeterX;local eD=altMeterY;local eE=78;local eF=19;local eG=AboveGroundLevel()if eG~=-1 then table.insert(cv,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eC+eE,eD+eF+20,eG))end;if cD and(ce<200000 and not am or ce and am)then table.insert(cv,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eC-1,eD-4,eE+2,eF+6,eC+1,eD-1,eE-4,eF))local ct=0;local eH=1;local eI=0;local eJ=ce<0;local eK=9;if eJ then eK=0 end;local ce=math.abs(ce)while ct<6 do local eL=11;local eM=16;local eN=9;local eO=14;local dr="altsm"if ct>2 then eM=eM+3;eL=eL+2;eO=eO+2;eN=eN-6;dr="altbig"end;if eJ then dr=dr.." red"end;local eP=ce/eH%10;local eQ=d(eP)local eR=d((eQ+1)%10)local eS=eI;if ct==0 then eS=eP-eQ;if eJ then eS=1-eS end end;if eJ and(ct==0 or eI~=0)then local eT=eR;eR=eQ;eQ=eT end;local eU=eM*(eS-1)local eV=eU+eM;local b_=eC+eN+(6-ct)*eL;local c0=eD+eO;table.insert(cv,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dr,b_,c0+eU,eR,b_,c0+eV,eQ))ct=ct+1;eH=eH*10;if eQ==eK then eI=eS else eI=0 end end;table.insert(cv,[[</g></g>]])end end;function DrawPrograde(cv,bd,bU,centerX,centerY)if bU>5 and not am or bU>I then local en=circleRad;local eW=20;local eX=20;local eY=vec3(bd)local eZ=getRelativePitch(eY)local e_=getRelativeYaw(eY)local f0=14;local f1=f0/2;local f2=-e_/eX*en;local f3=eZ/eW*en;local b_=centerX+f2;local c0=centerY+f3;local ac=math.sqrt(f2^2+f3^2)local f4=[[<circle
                cx="]]..b_..[["
                cy="]]..c0 ..[["
                r="]]..f1/f0 ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..b_..[["
                cy="]]..c0 ..[["
                r="]]..f1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..b_-f0 ..[[,]]..c0 ..[[ h ]]..f1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..b_+f1 ..[[,]]..c0 ..[[ h ]]..f1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..b_..[[,]]..c0-f0 ..[[ v ]]..f1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ac<en then cv[#cv+1]=f4 else local ej=math.atan(f3,f2)local f5=4;local f6=centerX+en*math.cos(ej)local f7=centerY+en*math.sin(ej)cv[#cv+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ej*180/math.pi,f6,f7,f6-f5,f7-f5/2,f5*2,f5,f6+f5,f7-f5,f5,f5,-f5,f5)end;if not am then eZ=getRelativePitch(-eY)e_=getRelativeYaw(-eY)f2=-e_/eX*en;f3=eZ/eW*en;b_=centerX+f2;c0=centerY+f3;ac=math.sqrt(f2^2+f3^2)if ac<en then local f8=[[<circle
                        cx="]]..b_..[["
                        cy="]]..c0 ..[["
                        r="]]..f1 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..b_..[[,]]..c0-f0 ..[[ v ]]..f1 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..b_..[[,]]..c0 ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..b_..[[,]]..c0 ..[[)" />
                     <path
                        d="M ]]..b_-f1 ..[[,]]..c0 ..[[ h ]]..f0 ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..b_..[[,]]..c0 ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..b_..[[,]]..c0 ..[[)"/>]]cv[#cv+1]=f8 end end end end;function DrawWarnings(cv)cv[#cv+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cv[#cv+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cv[#cv+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cv[#cv+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cv[#cv+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f9=ConvertResolutionX(960)local fa=ConvertResolutionY(860)local fb=ConvertResolutionY(880)local fc=ConvertResolutionY(900)local fd=ConvertResolutionY(960)local fe=ConvertResolutionY(200)local ff=ConvertResolutionY(150)local fg=ConvertResolutionY(960)if o()==1 and not RemoteHud then fa=ConvertResolutionY(135)fb=ConvertResolutionY(155)fc=ConvertResolutionY(175)fe=ConvertResolutionY(115)ff=ConvertResolutionY(95)end;if BrakeIsOn then cv[#cv+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f9,fa)elseif A>0 then cv[#cv+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f9,fa,A)end;if am and bi and hoverDetectGround()==-1 then cv[#cv+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f9,fe+50)end;if aq then cv[#cv+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f9,fg)end;if GearExtended then if M then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f9,fb)else cv[#cv+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f9,fb)end;local dA,dB=getDistanceDisplayString(Nav:getTargetGroundAltitude())cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f9,fc,dA..dB)end;if Z then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f9,fd+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(an-antigrav.getBaseAltitude())<501 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f9,fe+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cv[#cv+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f9,fe+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f9,fe+20,AutopilotStatus)elseif LockPitch~=nil then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f9,fe+20,d(LockPitch))elseif U then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f9,fe+20)elseif Reentry then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f9,fe+20)end;local fh,fi,fj=b6:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bd:normalize(),function(fk)if fk.noAtmosphericDensityAltitude>0 then return fk.radius+fk.noAtmosphericDensityAltitude else return fk.radius+fk.surfaceMaxAltitude*1.5 end end)local fl=fi;if fj~=nil and fi~=nil then fl=math.min(fj,fi)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local dA,dB=getDistanceDisplayString(HoldAltitude)cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f9,fe,dA..dB)if BrakeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f9,fe+50)end else local dA,dB=getDistanceDisplayString2(HoldAltitude)cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f9,fe,dA..dB)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f9,fe)elseif j()<0.09 and j()>0.05 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f9,fe)elseif j()<0.05 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f9,fe)end end;if IntoOrbit then if bp~=nil then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f9,fe,bp)end end;if BrakeLanding then if StrongBrakes then cv[#cv+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f9,fe)else cv[#cv+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f9,fe)end end;if ProgradeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f9,fe)end;if RetrogradeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f9,fe)end;if TurnBurn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f9,ff)elseif fl~=nil and j()==0 then local dA,dB=getDistanceDisplayString(fl)local travelTime=b7.computeTravelTime(be,0,fl)local fm="Collision"if fh.noAtmosphericDensityAltitude>0 then fm="Atmosphere"end;cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f9,ff,fh.name,fm,FormatTimeString(travelTime),dA..dB)end;if VectorToTarget and not IntoOrbit then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f9,fe+30,VectorStatus)end;cv[#cv+1]="</g>"end;function DisplayOrbitScreen(cv)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fn=OrbitMapX;local fo=OrbitMapY;local fp=OrbitMapSize;local fq=4;fo=fo+fq;local fr=15;local b_=fn+fp+fn/2+fq;local c0=fo+fp/2+5+fq;local fs,ft,fu,fv;fs=fp/4;fv=0;cv[#cv+1]=[[<g class="pbright txtorb txtmid">]]cv[#cv+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fp+fn*2,fp+fo,fq,fq)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fu=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fs*2)ft=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fu*(1-orbit.eccentricity)fv=fs-orbit.periapsis.altitude/fu-planet.radius/fu;local fw=""if orbit.periapsis.altitude<=0 then fw='redout'end;cv[#cv+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fw,fn+fp/2+fv+fq,fo+fp/2+fq,fs,ft)cv[#cv+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fn+fp/2+fq,fo+fp/2+fq,planet.radius/fu)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cv[#cv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b_-35,c0-5,fn+fp/2+fs+fv,c0-5)cv[#cv+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],b_,c0)c0=c0+fr;local dA,dB=getDistanceDisplayString(orbit.apoapsis.altitude)cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,dA..dB)c0=c0+fr;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,FormatTimeString(orbit.timeToApoapsis))c0=c0+fr;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,getSpeedDisplayString(orbit.apoapsis.speed))end;c0=fo+fp/2+5+fq;b_=fn-fn/2+10+fq;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cv[#cv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b_+35,c0-5,fn+fp/2-fs+fv,c0-5)cv[#cv+1]=e([[<text x="%f" y="%f">Periapsis</text>]],b_,c0)c0=c0+fr;local dA,dB=getDistanceDisplayString(orbit.periapsis.altitude)cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,dA..dB)c0=c0+fr;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,FormatTimeString(orbit.timeToPeriapsis))c0=c0+fr;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,getSpeedDisplayString(orbit.periapsis.speed))end;cv[#cv+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fn+fp/2+fq,20+fq,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fx=orbit.timeToApoapsis/orbit.period*2*math.pi;local fy=fs*math.cos(fx)local fz=ft*math.sin(fx)cv[#cv+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fn+fp/2+fy+fv+fq,fo+fp/2+fz+fq)end;cv[#cv+1]=[[</g>]]end end;function getDistanceDisplayString(ac)local fA=ac>100000;local bF,dB=""if fA then bF,dB=round(ac/1000/200,1),"SU"elseif ac<1000 then bF,dB=round(ac,1),"m"else bF,dB=round(ac/1000,1),"Km"end;return bF,dB end;function getDistanceDisplayString2(ac)local fA=ac>100000;local bF,dB=""if fA then bF,dB=round(ac/1000/200,2)," SU"elseif ac<1000 then bF,dB=round(ac,2)," M"else bF,dB=round(ac/1000,2)," KM"end;return bF,dB end;function getSpeedDisplayString(bU)return d(round(bU*3.6,0)+0.5).." km/h"end;function FormatTimeString(fB)local fC=0;local fD=0;local fE=0;if fB<60 then fB=d(fB)elseif fB<3600 then fC=d(fB/60)fB=d(fB%60)elseif fB<86400 then fD=d(fB/3600)fC=d(fB%3600/60)else fE=d(fB/86400)fD=d(fB%86400/3600)end;if fE>0 then return fE.."d "..fD.."h "elseif fD>0 then return fD.."h "..fC.."m "elseif fC>0 then return fC.."m "..fB.."s"elseif fB>0 then return fB.."s"else return"0s"end end;function getMagnitudeInDirection(dt,fF)dt=vec3(dt)fF=vec3(fF):normalize()local bF=dt*fF;return bF.x+bF.y+bF.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local fG=AtlasOrdered[AutopilotTargetIndex].index;local fH=b0[0][fG]if fH.center then AutopilotTargetName=fH.name;a4=b6[0][fG]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fH;for _,bE in pairs(b6[0])do if bE.name==CustomTarget.planetname then a4=bE;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fG=AtlasOrdered[AutopilotTargetIndex].index;local fH=b0[0][fG]if fH.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fG=AtlasOrdered[AutopilotTargetIndex].index;local fH=b0[0][fG]if fH.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fI=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return fI end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bd=core.getWorldVelocity()local bU=vec3(bd):len()local fJ=unit.getThrottle()/100;if AtmoSpeedAssist then fJ=z end;local fK,fL=b7.computeDistanceAndTime(vec3(bd):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fJ,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fM;if not TurnBurn and bU>0 then _,fM=GetAutopilotBrakeDistanceAndTime(bU)else _,fM=GetAutopilotTBBrakeDistanceAndTime(bU)end;local fN=0;local fO=0;if AutopilotCruising or not Autopilot and bU>5 then fO=b7.computeTravelTime(bU,0,AutopilotDistance)elseif a0+fK<AutopilotDistance then fN=AutopilotDistance-(a0+fK)fO=b7.computeTravelTime(8333.0556,0,fN)else local fP=(AutopilotDistance-a0)/fK;fK=AutopilotDistance-a0;fL=fL*fP end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fO elseif AutopilotBraking then return fM elseif AutopilotCruising then return fO+fM else return fL+a1+fO end end;function GetAutopilotBrakeDistanceAndTime(bU)if not am then RefreshLastMaxBrake()return b7.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bU)RefreshLastMaxBrake()return b7.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fQ=-1;local fR=-1;if vBooster then fQ=vBooster.distance()end;if hover then fR=hover.distance()end;if fQ~=-1 and fR~=-1 then if fQ<fR then return fQ else return fR end elseif fQ~=-1 then return fQ elseif fR~=-1 then return fR else return-1 end end;function AboveGroundLevel()local fS=-1;local fT=hoverDetectGround()if telemeter_1 then fS=telemeter_1.getDistance()end;if fT~=-1 and fS~=-1 then if fT<fS then return fT else return fS end elseif fT~=-1 then return fT else return fS end end;function tablelength(fU)local fV=0;for _ in pairs(fU)do fV=fV+1 end;return fV end;function BeginProfile(fW)ProfileTimeStart=system.getTime()end;function EndProfile(fW)local fX=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fX;ProfileCount=ProfileCount+1;if fX>ProfileTimeMax then ProfileTimeMax=fX end;if fX<ProfileTimeMin then ProfileTimeMin=fX end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fY=ProfileTimeSum;local fZ=ProfileTimeSum/ProfileCount;local f_=ProfileTimeMin;local g0=ProfileTimeMax;local g1=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fY,fZ,f_,g0,g1))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local g2=radar_1.getEntries()local g3=radar_1.getData()local g4=ConvertResolutionX(1770)local g5=ConvertResolutionY(330)if#g2>0 then local g6=g3:find('identifiedConstructs":%[%]')if g6==nil and perisPanelID==nil then af=1;ToggleRadarPanel()end;if g6~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ad=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g4,g5,#g2)local g7={}for bD,bE in pairs(g2)do if radar_1.hasMatchingTransponder(bE)==1 then table.insert(g7,bE)end end;if#g7>0 then local c0=ConvertResolutionY(15)local b_=ConvertResolutionX(1370)ad=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,b_,c0)for bD,bE in pairs(g7)do c0=c0+20;ad=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,b_,c0,radar_1.getConstructName(bE))end end else local g8;g8=g3:find('worksInEnvironment":false')if g8 then ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g4,g5)else ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g4,g5)end;if radarPanelID~=nil then af=0;ToggleRadarPanel()end end end end;function DisplayMessage(cv,dA)if dA~="empty"then cv[#cv+1]=[[<text class="msg" x="50%%" y="310" >]]for g9 in string.gmatch(dA,"([^\n]+)")do cv[#cv+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g9)end;cv[#cv+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function updateDistance()local bN=system.getTime()local bd=vec3(core.getWorldVelocity())local dW=vec3(bd):len()local ga=bN-ap;if dW>1.38889 then dW=dW/1000;local gb=dW*(bN-ap)TotalDistanceTravelled=TotalDistanceTravelled+gb;a5=a5+gb end;a6=a6+ga;TotalFlightTime=TotalFlightTime+ga;ap=bN end;function composeAxisAccelerationFromTargetSpeedV(gc,gd)local ge=vec3()local gf=vec3()if gc==axisCommandId.longitudinal then ge=vec3(core.getConstructOrientationForward())gf=vec3(core.getConstructWorldOrientationForward())elseif gc==axisCommandId.vertical then ge=vec3(core.getConstructOrientationUp())gf=vec3(core.getConstructWorldOrientationUp())elseif gc==axisCommandId.lateral then ge=vec3(core.getConstructOrientationRight())gf=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gg=vec3(core.getWorldGravity())local gh=gg:dot(gf)local gi=vec3(core.getWorldAirFrictionAcceleration())local gj=gi:dot(gf)local gk=vec3(core.getVelocity())local gl=gk:dot(ge)local gm=gd*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gm-gl)local gn=targetSpeedPID2:get()local go=(gn-gj-gh)*gf;return go end;function composeAxisAccelerationFromTargetSpeed(gc,gd)local ge=vec3()local gf=vec3()if gc==axisCommandId.longitudinal then ge=vec3(core.getConstructOrientationForward())gf=vec3(core.getConstructWorldOrientationForward())elseif gc==axisCommandId.vertical then ge=vec3(core.getConstructOrientationUp())gf=vec3(core.getConstructWorldOrientationUp())elseif gc==axisCommandId.lateral then ge=vec3(core.getConstructOrientationRight())gf=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gg=vec3(core.getWorldGravity())local gh=gg:dot(gf)local gi=vec3(core.getWorldAirFrictionAcceleration())local gj=gi:dot(gf)local gk=vec3(core.getVelocity())local gl=gk:dot(ge)local gm=gd*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gm-gl)local gn=targetSpeedPID:get()local go=(gn-gj-gh)*gf;return go end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b0=Atlas()for bD,bE in pairs(b0[0])do if aE==nil or bE.center.x<aE then aE=bE.center.x end;if aF==nil or bE.center.x>aF then aF=bE.center.x end;if aG==nil or bE.center.y<aG then aG=bE.center.y end;if aH==nil or bE.center.y>aH then aH=bE.center.y end end;b1=""local gp=1.1*(aF-aE)/1920;local gq=1.4*(aH-aG)/1080;for bD,bE in pairs(b0[0])do local b_=960+bE.center.x/gp;local c0=540+bE.center.y/gq;b1=b1 ..'<circle cx="'..b_..'" cy="'..c0 ..'" r="'..bE.radius/gp*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bE.name,"Moon")and not string.match(bE.name,"Sanctuary")and not string.match(bE.name,"Space")then b1=b1 .."<text x='"..b_.."' y='"..c0+bE.radius/gp*30+20 .."' font-size='28' fill="..as.." text-anchor='middle' font-family='Montserrat'>"..bE.name.."</text>"end end;local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/gp;local c0=540+ci.y/gq;b1=b1 ..'<circle cx="'..b_..'" cy="'..c0 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='"..b_.."' y='"..c0-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b1=b1 ..[[</svg>]]b2=gp;b3=gq;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b1)local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/gp;local c0=540+ci.y/gq;b1='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='80' y='105' font-size='18' fill="..as.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b4=screen_2.addContent((b_-80)/19.20,(c0-80)/10.80,b1)end end;function PlanetRef()local function gr(gs)return type(gs)=='number'end;local function gt(gs)return type(tonumber(gs))=='number'end;local function gu(gv)return type(gv)=='table'end;local function gw(gx)return type(gx)=='string'end;local function gy(bE)return gu(bE)and gr(bE.x and bE.y and bE.z)end;local function gz(gA)return gu(gA)and gr(gA.latitude and gA.longitude and gA.altitude and gA.bodyId and gA.systemId)end;local gB=math.pi/180;local gC=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gD=utils.clamp;local function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*epsilon end;local function gE(gs)local bF=string.gsub(string.reverse(e('%.4f',gs)),'^0*%.?','')return bF==''and'0'or string.reverse(bF)end;local function gF(gG)if gy(gG)then return e('{x=%.3f,y=%.3f,z=%.3f}',gG.x,gG.y,gG.z)end;if gu(gG)and not getmetatable(gG)then local gH={}local gI=next(gG)if type(gI)=='nil'or gI==1 then gH=gG else for bD,bE in pairs(gG)do local eg=gF(bE)if type(bD)=='number'then table.insert(gH,e('[%s]=%s',bD,eg))else table.insert(gH,e('%s=%s',bD,eg))end end end;return e('{%s}',table.concat(gH,','))end;if gw(gG)then return e("'%s'",gG:gsub("'",[[\']]))end;return tostring(gG)end;local gJ={}gJ.__index=gJ;gJ.__tostring=function(gG,gK)local gL={}for bD in pairs(gG)do table.insert(gL,bD)end;table.sort(gL)local gH={}for _,bD in ipairs(gL)do local eg=gF(gG[bD])if type(bD)=='number'then table.insert(gH,e('[%s]=%s',bD,eg))else table.insert(gH,e('%s=%s',bD,eg))end end;if gK then return e('%s%s',gK,table.concat(gH,',\n'..gK))end;return e('{%s}',table.concat(gH,','))end;gJ.__eq=function(gM,gN)return gM.planetarySystemId==gN.planetarySystemId and gM.bodyId==gN.bodyId and float_eq(gM.radius,gN.radius)and float_eq(gM.center.x,gN.center.x)and float_eq(gM.center.y,gN.center.y)and float_eq(gM.center.z,gN.center.z)and float_eq(gM.GM,gN.GM)end;local function gO(ck,cl,gP,cb,gQ)assert(gt(ck),'Argument 1 (planetarySystemId) must be a number:'..type(ck))assert(gt(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gt(gP),'Argument 3 (radius) must be a number:'..type(gP))assert(gu(cb),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cb))assert(gt(gQ),'Argument 5 (GM) must be a number:'..type(gQ))return setmetatable({planetarySystemId=tonumber(ck),bodyId=tonumber(cl),radius=tonumber(gP),center=vec3(cb),GM=tonumber(gQ)},gJ)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gR)return e('::pos{%d,%d,%s,%s,%s}',gR.systemId,gR.bodyId,gE(gR.latitude*gC),gE(gR.longitude*gC),gE(gR.altitude))end;MapPosition.__eq=function(gM,gN)return gM.bodyId==gN.bodyId and gM.systemId==gN.systemId and float_eq(gM.latitude,gN.latitude)and float_eq(gM.altitude,gN.altitude)and(float_eq(gM.longitude,gN.longitude)or float_eq(gM.latitude,math.pi/2)or float_eq(gM.latitude,-math.pi/2))end;local function gS(gT,cl,cf,cg,ce)local ck=gT;if gw(gT)and not cg and not ce and not cl and not cf then ck,cl,cf,cg,ce=string.match(gT,cj)assert(ck,'Argument 1 (position string) is malformed.')else assert(gt(ck),'Argument 1 (systemId) must be a number:'..type(ck))assert(gt(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gt(cf),'Argument 3 (latitude) must be in degrees:'..type(cf))assert(gt(cg),'Argument 4 (longitude) must be in degrees:'..type(cg))assert(gt(ce),'Argument 5 (altitude) must be in meters:'..type(ce))end;ck=tonumber(ck)cl=tonumber(cl)cf=tonumber(cf)cg=tonumber(cg)ce=tonumber(ce)if cl==0 then return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=cl,systemId=ck},MapPosition)end;return setmetatable({latitude=gB*gD(cf,-90,90),longitude=gB*(cg%360),altitude=ce,bodyId=cl,systemId=ck},MapPosition)end;local gU={}gU.__index=gU;gU.__tostring=function(gG,gK)local gV=gK and gK..'  'local gW={}local gL={}for bD in pairs(gG)do table.insert(gL,bD)end;table.sort(gL)for _,gX in ipairs(gL)do bdy=gG[gX]local gY=gJ.__tostring(bdy,gV)if gK then table.insert(gW,e('[%s]={\n%s\n%s}',gX,gY,gK))else table.insert(gW,e('  [%s]=%s',gX,gY))end end;if gK then return e('\n%s%s%s',gK,table.concat(gW,',\n'..gK),gK)end;return e('{\n%s\n}',table.concat(gW,',\n'))end;local function gZ(g_)local b0={}local pid;for _,bE in pairs(g_)do local cr=bE.planetarySystemId;if type(cr)~='number'then error('Invalid planetary system ID: '..tostring(cr))elseif pid and cr~=pid then error('Mismatch planetary system IDs: '..cr..' and '..pid)end;local h0=bE.bodyId;if type(h0)~='number'then error('Invalid body ID: '..tostring(h0))elseif b0[h0]then error('Duplicate body ID: '..tostring(h0))end;setmetatable(bE.center,getmetatable(vec3.unit_x))b0[h0]=setmetatable(bE,gJ)pid=cr end;return setmetatable(b0,gU)end;b5={}local function h1(g_)return setmetatable({galaxyAtlas=g_ or{}},b5)end;b5.__index=function(gv,i)if type(i)=='number'then local system=gv.galaxyAtlas[i]return gZ(system)end;return rawget(b5,i)end;b5.__pairs=function(gG)return function(gv,bD)local h2,nv=next(gv,bD)return h2,nv and gZ(nv)end,gG.galaxyAtlas,nil end;b5.__tostring=function(gG)local h3={}for _,h4 in pairs(gG or{})do local h5=h4:getPlanetarySystemId()local h6=gU.__tostring(h4,'    ')table.insert(h3,e('  [%s]={%s\n  }',h5,h6))end;return e('{\n%s\n}\n',table.concat(h3,',\n'))end;b5.BodyParameters=gO;b5.MapPosition=gS;b5.PlanetarySystem=gZ;function b5.createBodyParameters(h7,cl,h8,h9,ha,hb,hc)assert(gt(h7),'Argument 1 (planetarySystemId) must be a number:'..type(h7))assert(gt(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gt(h8),'Argument 3 (surfaceArea) must be a number:'..type(h8))assert(gu(h9),'Argument 4 (aPosition) must be an array or vec3:'..type(h9))assert(gu(ha),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ha))assert(gt(hb),'Argument 6 (altitude) must be in meters:'..type(hb))assert(gt(hc),'Argument 7 (gravityAtPosition) must be number:'..type(hc))local gP=math.sqrt(h8/4/math.pi)local ac=gP+hb;local hd=vec3(h9)+ac*vec3(ha)local gQ=hc*ac*ac;return gO(h7,cl,gP,hd,gQ)end;b5.isMapPosition=gz;function b5:getPlanetarySystem(gT)if i==nil then i=0 end;if nv==nil then nv=0 end;local h7=gT;if gz(gT)then h7=gT.systemId end;if type(h7)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gU then system=gZ(system)end;return system end end end;function gU:castIntersections(he,fF,hf,hg)local hf=hf or function(fk)return 1.05*fk.radius end;local hh={}if hg then for _,i in ipairs(hg)do hh[i]=self[i]end else hg={}for bD,fk in pairs(self)do table.insert(hg,bD)hh[bD]=fk end end;local function hi(hj,hk)local hl=hh[hj].center-he;local hm=hh[hk].center-he;return hl:len()<hm:len()end;table.sort(hg,hi)local hn=fF:normalize()for i,cr in ipairs(hg)do local fk=hh[cr]local ho=fk.center-he;local gP=hf(fk)local hp=ho:dot(hn)local hq=hp^2-(ho:len2()-gP^2)if hq>=0 then local hr=math.sqrt(hq)local fi=hp+hr;local fj=hp-hr;if fj>0 then return fk,fi,fj elseif fi>0 then return fk,fi,nil end end end;return nil,nil,nil end;function gU:closestBody(hs)assert(type(hs)=='table','Invalid coordinates.')local ht,fk;local hu=vec3(hs)for _,hv in pairs(self)do local hw=(hv.center-hu):len2()if(not fk or hw<ht)and hv.name~="Space"then fk=hv;ht=hw end end;return fk end;function gU:convertToBodyIdAndWorldCoordinates(gT)local hx=gT;if gw(gT)then hx=gS(gT)end;if hx.bodyId==0 then return 0,vec3(hx.latitude,hx.longitude,hx.altitude)end;local hv=self:getBodyParameters(hx)if hv then return hx.bodyId,hv:convertToWorldCoordinates(hx)end end;function gU:getBodyParameters(gT)local cl=gT;if gz(gT)then cl=gT.bodyId end;assert(gt(cl),'Argument 1 (bodyId) must be a number:'..type(cl))return self[cl]end;function gU:getPlanetarySystemId()local _,bE=next(self)return bE and bE.planetarySystemId end;function gJ:convertToMapPosition(cb)assert(gu(cb),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cb))local cc=vec3(cb)if self.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cd=cc-self.center;local ac=cd:len()local ce=ac-self.radius;local cf=0;local cg=0;if not float_eq(ac,0)then local ch=math.atan(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ac)end;return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gJ:convertToWorldCoordinates(gT)local hx=gw(gT)and gS(gT)or gT;if hx.bodyId==0 then return vec3(hx.latitude,hx.longitude,hx.altitude)end;assert(gz(hx),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hx.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hx.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cm=math.cos(hx.latitude)return self.center+(self.radius+hx.altitude)*vec3(cm*math.cos(hx.longitude),cm*math.sin(hx.longitude),math.sin(hx.latitude))end;function gJ:getAltitude(cb)return(vec3(cb)-self.center):len()-self.radius end;function gJ:getDistance(cb)return(vec3(cb)-self.center):len()end;function gJ:getGravity(cb)local hy=self.center-vec3(cb)local hz=hy:len2()return self.GM/hz*hy/math.sqrt(hz)end;return setmetatable(b5,{__call=function(_,...)return h1(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gw(gx)return type(gx)=='string'end;local function gu(gv)return type(gv)=='table'end;local function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ce)assert(self.body)local ac=ce+self.body.radius;if not float_eq(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gT,bd)assert(self.body)assert(gu(gT)or gw(gT))assert(gu(bd))local ci=(gw(gT)or PlanetRef.isMapPosition(gT))and self.body:convertToWorldCoordinates(gT)or vec3(gT)local bE=vec3(bd)local hA=ci-self.body.center;local hm=bE:len2()local hB=hA:len()local hC=self.body.GM;local hD=((hm-hC/hB)*hA-hA:dot(bE)*bE)/hC;local c8=hC/(2*hC/hB-hm)local hE=hD:len()local hn=hD:normalize()local hF=c8*(1-hE)local hG=c8*(1+hE)local hH=hF*hn+self.body.center;local hI=hE<=1 and-hG*hn+self.body.center or nil;local hJ=math.sqrt(c8*hC*(1-hE*hE))local hK=hI and 2*math.pi*math.sqrt(c8^3/hC)local hL=math.acos(hD:dot(hA)/(hE*hB))if hA:dot(bE)<0 then hL=-(hL-2*math.pi)end;local hM=math.acos((math.cos(hL)+hE)/(1+hE*math.cos(hL)))local hN=hM;if hN<0 then hN=hN+2*math.pi end;local hO=hN-hE*math.sin(hN)local hP=0;local hQ=0;local hR=0;if hK~=nil then hP=hO/(2*math.pi/hK)hQ=hK-hP;hR=hQ+hK/2;if hL-math.pi>0 then hQ=hP;hR=hQ+hK/2 end;if hR>hK then hR=hR-hK end end;return{periapsis={position=hH,speed=hJ/hF,circularOrbitSpeed=math.sqrt(hC/hF),altitude=hF-self.body.radius},apoapsis=hI and{position=hI,speed=hJ/hG,circularOrbitSpeed=math.sqrt(hC/hG),altitude=hG-self.body.radius},currentVelocity=bE,currentPosition=ci,eccentricity=hE,period=hK,eccentricAnomaly=hM,meanAnomaly=hO,timeToPeriapsis=hQ,timeToApoapsis=hR}end;local function hS(hT)local hv=PlanetRef.BodyParameters(hT.planetarySystemId,hT.bodyId,hT.radius,hT.center,hT.GM)return setmetatable({body=hv},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hS(...)end})end;function Kinematics()local b7={}local hU=30000000/3600;local hV=hU*hU;local hW=100;local function hX(bE)return 1/math.sqrt(1-bE*bE/hV)end;function b7.computeAccelerationTime(hY,hZ,h_)local i0=hU*math.asin(hY/hU)return(hU*math.asin(h_/hU)-i0)/hZ end;function b7.computeDistanceAndTime(hY,h_,i1,i2,i3,i4)i3=i3 or 0;i4=i4 or 0;local i5=hY<=h_;local i6=i2*(i5 and 1 or-1)/i1;local i7=-i4/i1;local i8=i6+i7;if i5 and i8<=0 or not i5 and i8>=0 then return-1,-1 end;local i9,ia=0,0;if i6~=0 and i3>0 then local i0=math.asin(hY/hU)local ib=math.pi*(i6/2+i7)local ic=i6*i3;local id=hU*math.pi;local bE=function(gv)local cX=(ib*gv-ic*math.sin(math.pi*gv/2/i3)+id*i0)/id;local ie=math.tan(cX)return hU*ie/math.sqrt(ie*ie+1)end;local ig=i5 and function(gx)return gx>=h_ end or function(gx)return gx<=h_ end;ia=2*i3;if ig(bE(ia))then local ih=0;while math.abs(ia-ih)>0.5 do local gv=(ia+ih)/2;if ig(bE(gv))then ia=gv else ih=gv end end end;local ii=hY;local ij=ia/hW;for ik=1,hW do local bU=bE(ik*ij)i9=i9+(bU+ii)*ij/2;ii=bU end;if ia<2*i3 then return i9,ia end;hY=ii end;local i0=hU*math.asin(hY/hU)local bG=(hU*math.asin(h_/hU)-i0)/i8;local il=hV*math.cos(i0/hU)/i8;local ac=il-hV*math.cos((i8*bG+i0)/hU)/i8;return ac+i9,bG+ia end;function b7.computeTravelTime(hY,hZ,ac)if ac==0 then return 0 end;if hZ>0 then local i0=hU*math.asin(hY/hU)local il=hV*math.cos(i0/hU)/hZ;return(hU*math.acos(hZ*(il-ac)/hV)-i0)/hZ end;if hY==0 then return-1 end;assert(hY>0,'Acceleration and initial speed are both zero.')return ac/hY end;function b7.lorentz(bE)return hX(bE)end;return b7 end;function safeZone(im)local gP=500000;local io,ip,iq=math.huge;local ir=false;local is=vec3({13771471,7435803,-128971})local it=18000000;io=vec3(im):dist(is)if io<it then return true,math.abs(io-it),"Safe Zone",0 end;ip=vec3(im):dist(vec3(planet.center))if ip<gP then ir=true end;if math.abs(ip-gP)<math.abs(io-it)then return ir,math.abs(ip-gP),planet.name,planet.bodyId else return ir,math.abs(io-it),"Safe Zone",0 end end;function cmdThrottle(eg,iu)if iu==nil then iu=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not iu then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,eg)z=round(eg*100,0)end;function cmdCruise(eg,iu)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not iu then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,eg)end;function SaveDataBank(iv)if dbHud_1 then if not a7 then for bD,bE in pairs(b)do dbHud_1.setStringValue(bE,g(_G[bE]))if iv and dbHud_2 then dbHud_2.setStringValue(bE,g(_G[bE]))end end;for bD,bE in pairs(a)do dbHud_1.setStringValue(bE,g(_G[bE]))if iv and dbHud_2 then dbHud_2.setStringValue(bE,g(_G[bE]))end end;c("Saved Variables to Datacore")if iv and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStart()VERSION_NUMBER=5.443;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b5=PlanetRef()b6=b5(Atlas())b7=Kinematics()b9=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bP=j()if door and(bP>0 or bP==0 and an<10000)then for _,bE in pairs(door)do bE.toggle()end end;if switch then for _,bE in pairs(switch)do bE.toggle()end end;if forcefield and(bP>0 or bP==0 and an<10000)then for _,bE in pairs(forcefield)do bE.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(iw)if iw=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local ix=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if ix and not Autopilot then ac=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ac=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dA,dB=getDistanceDisplayString(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dA,dB=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dA,dB=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dA,dB=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dA)..'", "unit":"'..dB..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iw=="oneSecond"then ak=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cv={}local dM=GetFlightStyle()DrawOdometer(cv,a5,TotalDistanceTravelled,dM,a6)if ShouldCheckDamage then CheckDamage(cv)end;ae=table.concat(cv,"")collectgarbage("collect")elseif iw=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local bF=json.decode(dbHud_1.getStringValue("SavedLocations"))if bF~=nil then _G["SavedLocations"]=bF;local ct=-1;local cp;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name=="SatNav Location"then ct=bD;break end end;if ct~=-1 then cp=SavedLocations[ct]ct=-1;for bD,bE in pairs(b0[0])do if bE.name and bE.name=="SatNav Location"then ct=bD;break end end;if ct>-1 then b0[0][ct]=cp end;UpdateAtlasLocationsList()W=cp.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iw=="msgTick"then local cv={}DisplayMessage(cv,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif iw=="animateTick"then bb=true;ba=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif iw=="hudTick"then local cv={}HUDPrologue(cv)if showHud then UpdateHud(cv)else DisplayOrbitScreen(cv)DrawWarnings(cv)end;HUDEpilogue(cv)cv[#cv+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cv,W)end;if o()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then DrawDeadZone(cv)end end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cv)if screen_1.getMouseState()==1 then CheckButtons()end;cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cv)if not ba and not bb then local iy=table.concat(cv,"")cv={}cv[#cv+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cv[#cv+1]=b1;cv[#cv+1]=iy;cv[#cv+1]="</body>"ba=true;cv[#cv+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cv,"")system.setScreen(content)elseif bb then local iy=table.concat(cv,"")cv={}cv[#cv+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cv[#cv+1]=b1;cv[#cv+1]=iy;cv[#cv+1]="</body>"end;if not ba then cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if ac>DeadZone then if DisplayDeadZone then DrawCursorLine(cv)end end else SetButtonContains()DrawButtons(cv)end;cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end;cv[#cv+1]=[[</svg></body>]]content=table.concat(cv,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iw=="apTick"then am=j()>0;local bG=system.getTime()local iz=bG-bj;bj=bG;local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local iA=vec3(core.getConstructWorldOrientationUp())local cA=vec3(core.getWorldVertical())local iB=vec3(core.getConstructWorldPos())local dO=getRoll(cA,cy,cz)local dP=dO/180*math.pi;local dQ=math.cos(dP)local dR=math.sin(dP)local cB=getPitch(cA,cy,cz)local iC=getPitch(cA,cy,cz*dQ+iA*dR)local iD=-math.deg(cS(iA,bd,cy))local iE=math.deg(cS(cz,bd,cy))bi=am and iD<-YawStallAngle or iD>YawStallAngle or iE<-PitchStallAngle or iE>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not V then bh=-bh end;P=0;T=0;O=0;bd=vec3(core.getWorldVelocity())be=vec3(bd):len()sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bd)aj=hoverDetectGround()local bR=planet:getGravity(core.getConstructWorldPos()):len()*n()bk=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iB)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*ResolutionX;aa=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not ba then a9=a9+bg;aa=aa+bh end else a9=0;aa=0 end else a9=a9+bg;aa=aa+bh;ac=math.sqrt(a9*a9+aa*aa)if not V and o()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bh,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bg,-100,100)+0.5)*2*L else a9=0;aa=0 end end end;local iF=be>8334;if be>SpaceSpeedLimit/3.6 and not am and not Autopilot and not iF then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iF and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iF;if am and j()>0.09 then if be>bn/3.6 and not AtmoSpeedAssist and not ar then BrakeIsOn=true;ar=true elseif not AtmoSpeedAssist and ar then if be<bn/3.6 then BrakeIsOn=false;ar=false end end end;if BrakeIsOn then S=1 else S=0 end;an=core.getAltitude()if an==0 then an=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ag then BrakeIsOn=false;local iG=false;if CustomTarget~=nil then iG=AlignToWorldVector(CustomTarget.position-iB,0.01)else iG=AlignToWorldVector(vec3(bd),0.01)end;bc=true;if iG and(math.abs(dO)<2 or math.abs(iC)>85)and be>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()elseif am and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bn))z=0 end elseif be>I then AlignToWorldVector(vec3(bd),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif be>I then AlignToWorldVector(-vec3(bd))end end;if not ProgradeIsOn and ag then if j()==0 then J=true;BeginReentry()ag=false;ai=true else ag=false;ToggleAutopilot()end end;local ek=vec3(core.getWorldVertical())*-1;local ei=bd.x*ek.x+bd.y*ek.y+bd.z*ek.z;if ai and CustomTarget~=nil and(an<HoldAltitude+200 and an>HoldAltitude-200)and be*3.6>bn-100 and math.abs(ei)<20 and j()>=0.1 and(CustomTarget.position-iB):len()>2000+an then ToggleAutopilot()ai=false end;if VertTakeOff then bc=true;if ei<-30 then W="Unable to achieve lift. Safety Landing."a8=0;bc=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if an<antigrav.getBaseAltitude()-100 then bo=0;a8=15;BrakeIsOn=false elseif ei>0 then BrakeIsOn=true;a8=0 elseif ei<-30 then BrakeIsOn=true;a8=15 elseif an>=antigrav.getBaseAltitude()then BrakeIsOn=true;a8=0;VertTakeOff=false;W="Takeoff complete. Singularity engaged"end else if j()>0.08 then bo=0;BrakeIsOn=false;a8=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bA then bo=0;a8=20 else a8=0;bo=36;cmdCruise(3500)end else bc=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iH=utils.clamp(bo-iC,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iH)local iI=utils.clamp(vTpitchPID:get(),-1,1)O=iI end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=a4 else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.noAtmosphericDensityAltitude)else bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.surfaceMaxAltitude)end;bv=true end;if AltitudeHold or VectorToTarget then if not ah then bw=HoldAltitude;bs=true;AltitudeHold=false end;if VectorToTarget then bu.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local iJ,iK=b9(bx):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bx.center):len()-bx.radius)local iL=dO;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and an>bw*0.9 and an<bw*1.4 then local function iM(eg,iN)bq=iN;if iC<=iN+3 and iC>=iN-3 then z=eg;cmdThrottle(eg)else z=0.05;cmdThrottle(0.05)end end;if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;z=0;cmdThrottle(0)by=true;bq=0;if bu.VectorToTarget then local dx=CustomTarget.position-iB;local a0,_=b7.computeDistanceAndTime(be,bn/3.6,n(),0,0,LastMaxBrake)if bd:normalize():dot(dx:normalize())>0.85 and dx:len()>10000+a0+an then bp="Orbiting to Target"else W="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;J=true;ai=true;BeginReentry()bu.VectorToTarget=false end end;if not bu.VectorToTarget then bp=nil;bt=false;bv=false;bx=nil;bc=autoRollPreference;if not ai then W="Orbit established"end;bu.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;by=false;bB=0 end else bB=bB+1;if bB>=2 then by=true end end else bp="Adjusting Orbit"bt=true;cmdCruise(iK*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iO=ei;local iP=an-bw;local iQ=math.abs(iP)if ei<10 and math.abs(iC)<10 and iQ<100 then iO=ei*2 end;if iO<10 and math.abs(iC)<10 and iQ<100 then iO=iO*2 end;if iO<5 and math.abs(iC)<5 and iQ<100 then iO=iO*4 end;VSpdPID:inject(iO)bq=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(iP)bq=utils.clamp(bq-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local iR=2.75;local iS=math.abs(utils.round(iJ*iR))local iT=iS%50;if iT>0 then iS=iS-iT+50 end;BrakeIsOn=false;if not bs then local iU=false;local iV=false;if an<bw then bp="Aligning to orbital path"else bp="Aligning to orbital point"end;bq=0;br=0;if iC<=bq+1 and iC>=bq-1 then iU=true else iU=false end;if iL<=br+1 and iL>=br-1 then iV=true else iV=false end;if iU and iV then bq=nil;br=nil;bs=true end else if an<bw*0.8 then bp="Escaping planet gravity"bq=utils.map(ei,200,0,-15,80)elseif an>=bw*0.8 and an<bw*1.15 then bp="Approaching orbital corridor"iS=iS*0.75;bq=utils.map(ei,100,-100,-15,65)elseif an>=bw*1.15 and an<bw*1.5 then bp="Approaching orbital corridor"iS=iS*0.75;if ei<0 or bt then bq=utils.map(an,bw*1.5,bw*1.01,-30,0)else bq=utils.map(an,bw*0.99,bw*1.5,0,30)end elseif an>bw*1.5 then bp="Reentering orbital corridor"if ei<-100 then bq=45;iS=iS*1.25 else bq=-80;iS=iS*0.75 end end end;cmdCruise(math.floor(iS))end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local iW=bq-iC;OrbitPitchPID:inject(iW)local iX=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=iX end;if br~=nil then if iC<85 then local iY=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(iY*0.01,0,iY*0.1)end;local iZ=br-iL;OrbitRollPID:inject(iZ)local i_=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=i_ end end elseif CancelIntoOrbit then bv=false;bx=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not ag then local j0,j1=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local j2=(CustomTarget.position-a4.center):normalize()local j3=j2:project_on_plane((a4.center-iB):normalize()):normalize()local j4=a4.center+j3*(a4.radius+AutopilotTargetOrbit)local j5=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(iB-j4):len()<(iB-j5):len()then j0=j4;AutopilotTargetCoords=j0 else j0=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=j0 end;local cC=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)j1=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;j1=true;TargetSet=true;AutopilotRealigned=true;j0=CustomTarget.position+(iB-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local j2=(iB+bd*100000-a4.center):normalize()local j3=j2:project_on_plane((a4.center-iB):normalize()):normalize()if j3:len()<1 then j2=(iB+vec3(core.getConstructWorldOrientationForward())*100000-a4.center):normalize()j3=j2:project_on_plane((a4.center-iB):normalize()):normalize()end;j0=a4.center+j3*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=j0;TargetSet=true;j1=true;AutopilotRealigned=true;local cC=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)end end;AutopilotDistance=(vec3(j0)-vec3(core.getConstructWorldPos())):len()local fh,fi,fj=b6:getPlanetarySystem(0):castIntersections(iB,bd:normalize(),function(fk)if fk.noAtmosphericDensityAltitude>0 then return fk.radius+fk.noAtmosphericDensityAltitude else return fk.radius+fk.surfaceMaxAltitude*1.5 end end)local fl=fi;if fj~=nil and fi~=nil then fl=math.min(fj,fi)end;if fl~=nil and fl<AutopilotDistance and fh.name==a4.name then AutopilotDistance=fl end;local iG=true;local j6=(a4.center-(vec3(core.getConstructWorldPos())+vec3(bd):normalize()*AutopilotDistance)):len()-a4.radius;local dA,dB=getDistanceDisplayString(j6)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dA..'", "unit":"'..dB..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)end;if be>300 and AutopilotAccelerating then local dx=vec3(j0)-vec3(core.getConstructWorldPos())local j7=utils.clamp(math.deg(cS(iA,bd:normalize(),dx:normalize()))*be/500,-90,90)local j8=utils.clamp(math.deg(cS(cz,bd:normalize(),dx:normalize()))*be/500,-90,90)if math.abs(j7)<20 and math.abs(j8)<20 then j7=j7*2;j8=j8*2 end;if math.abs(j7)<2 and math.abs(j8)<2 then j7=j7*2;j8=j8*2 end;local iD=-math.deg(cS(iA,cy,bd:normalize()))local iE=-math.deg(cS(cz,cy,bd:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(j8-iE)local j9=utils.clamp(apPitchPID:get(),-1,1)O=O+j9;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(j7-iD)local ja=utils.clamp(apYawPID:get(),-1,1)P=P+ja;j1=true;if math.abs(j7)>2 or math.abs(j8)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if j6<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(j6)end end;if not AutopilotCruising and not AutopilotBraking and not j1 then iG=AlignToWorldVector((j0-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iG=AlignToWorldVector(-vec3(bd):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fJ=unit.getThrottle()if AtmoSpeedAssist then fJ=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fJ==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)z=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then cmdThrottle(100,true)z=1 end;local _,iK=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dx;if CustomTarget~=nil then dx=CustomTarget.position-iB end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and be<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and be<=iK and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cC=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iK=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if be<=iK then if CustomTarget~=nil then if bd:normalize():dot(dx:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cC=zeroConvertToMapPosition(a4,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cC=zeroConvertToMapPosition(a4,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ag=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fJ=unit.getThrottle()if AtmoSpeedAssist then fJ=z end;if fJ>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iG then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iG then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then cmdThrottle(AutopilotInterplanetaryThrottle,true)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cC=zeroConvertToMapPosition(a4,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)end;if U then bc=true;local j8=0;local ci=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local jb=ci-vec3(core.getConstructWorldPos())local jc=vec3(jb):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jd=vec3(jb):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ac=math.sqrt(jc*jc+jd*jd)AlignToWorldVector(jb:normalize())local je=40;local jf=ac<je;local jg=100;local gd=utils.clamp((ac-je)/2,10,jg)O=0;local iG=math.abs(P)<0.1;if iG and be<gd and not jf then BrakeIsOn=false;j8=-20 else BrakeIsOn=true;j8=0 end;local jh=0;if math.abs(j8-cB)>jh then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(j8-cB)local j9=pitchPID:get()O=j9 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cD=unit.getClosestPlanetInfluence()>0;local ji=HoldAltitude-an;local jj=500+be;local jk=1;if AutoTakeoff then jk=utils.clamp(be/100,0.1,1)end;local j8=(utils.smoothstep(ji,-jj,jj)-0.5)*2*MaxPitch*jk;if not Reentry and not ag and not VectorToTarget and cy:dot(bd:normalize())<0.99 then j8=(utils.smoothstep(ji,-jj*utils.clamp(20-19*j()*10,1,20),jj*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jk end;if not AltitudeHold then j8=0 end;if LockPitch~=nil then if cD and not IntoOrbit then j8=LockPitch else LockPitch=nil end end;bc=true;local jl=O;if Reentry then local ReentrySpeed=math.floor(bn)local jm,jn=b7.computeDistanceAndTime(be,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jo=an-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and an>planet.noAtmosphericDensityAltitude+5000 and be<=ReentrySpeed/3.6 and be>ReentrySpeed/3.6-10 and math.abs(bd:normalize():dot(cy))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jm>-1 and jo<=jm or an<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not J then j8=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;j8=0;bc=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and an>planet.noAtmosphericDensityAltitude+5000 then bc=true elseif an<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bn then J=false;Reentry=false;bc=true end end end;if be>I and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bd))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and j()>0.01 then local dx;if CustomTarget~=nil then dx=CustomTarget.position-vec3(core.getConstructWorldPos())else dx=a4.center-iB end;local j7=math.deg(cS(cA:normalize(),bd,dx))*2;local jp=math.rad(math.abs(dO))if be>minRollVelocity and j()>0.01 then local jq=utils.clamp(90-j8*2,-90,90)bk=utils.clamp(j7*2,-jq,jq)local jr=j7;j7=utils.clamp(utils.clamp(j7,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jp)+4*(iC-j8)*math.sin(math.rad(dO)),-YawStallAngle*0.85,YawStallAngle*0.85)j8=utils.clamp(utils.clamp(j8*math.cos(jp),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jr)*math.sin(jp),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bk=0;j7=utils.clamp(j7,-YawStallAngle*0.85,YawStallAngle*0.85)end;local js=iD-j7;if not bi and be>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(js)local ja=utils.clamp(yawPID:get(),-1,1)P=P+ja elseif am and aj>-1 or be<minRollVelocity then AlignToWorldVector(dx)elseif bi and j()>0.01 then if(iD<-YawStallAngle or iD>YawStallAngle)and j()>0.01 then AlignToWorldVector(bd)end;if(iE<-PitchStallAngle or iE>PitchStallAngle)and j()>0.01 then j8=utils.clamp(iC-iE,iC-PitchStallAngle*0.85,iC+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ah then local jt=planet:getAltitude(CustomTarget.position)local jo=math.sqrt(dx:len()^2-(an-jt)^2)local ju=LastMaxBrakeInAtmo;if ju then ju=ju*utils.clamp(be/100,0.1,1)*j()else ju=LastMaxBrake end;if j()<0.01 then ju=LastMaxBrake end;local jv=bd:len()-math.abs(ei)local jw=vec3(core.getWorldAirFrictionAcceleration())local jx=math.sqrt(jw:len()-jw:project_on(ek):len())*n()if be>100 then a0,a1=b7.computeDistanceAndTime(be,100,n(),0,0,ju+jx)local jy,jz=b7.computeDistanceAndTime(100,0,n(),0,0,ju/2)a0=a0+jy else a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,ju/2)end;StrongBrakes=true;if not ah and not Reentry and jo<=a0+be*iz/2 and(bd:project_on_plane(cA):normalize():dot(dx:project_on_plane(cA):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jv<0.1 or jo<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jo)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jo end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ah or Reentry)then if CustomTarget~=nil and a4.name==planet.name then local dx=CustomTarget.position-vec3(core.getConstructWorldPos())local jt=planet:getAltitude(CustomTarget.position)local jo=math.sqrt(dx:len()^2-(an-jt)^2)local ju=LastMaxBrakeInAtmo;if not by then bv=false;IntoOrbit=true else ju=LastMaxBrake;a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,ju/2)StrongBrakes=true;if jo<=a0+be*iz/2 and bd:project_on_plane(cA):normalize():dot(dx:project_on_plane(cA):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=jo end end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ah or VectorToTarget or IntoOrbit or Reentry)then if not by then IntoOrbit=true end end;if bi and j()>0.01 and aj==-1 and be>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bd)j8=utils.clamp(iC-iE,iC-PitchStallAngle*0.85,iC+PitchStallAngle*0.85)end;O=jl;local fS=-1;if BrakeLanding then j8=0;local jA=false;local jB=30;if b8~=nil and b8>0 then local jx=0;local dU=utils.clamp(j(),0.4,2)local ju=LastMaxBrakeInAtmo*utils.clamp(be/100,0.1,1)*dU;local jC=b8*dU+ju+jx-bR;local jD=ju/2+jx-bR;local jE=be-math.sqrt(math.abs(jD/2)*20/(0.5*n()))*utils.sign(jD)if jE<0 then jE=0 end;local jF;if be>100 then local jG,_=b7.computeDistanceAndTime(be,100,n(),0,0,ju)local jH,_=b7.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(ju))jF=jG+jH else jF=b7.computeDistanceAndTime(be,0,n(),0,0,math.sqrt(ju))end;if jF<20 then BrakeIsOn=false else local jI=0;if jE>100 then local jJ,_=b7.computeDistanceAndTime(jE,100,n(),0,0,jC)local jK,_=b7.computeDistanceAndTime(100,0,n(),0,0,b8*dU+math.sqrt(ju)+jx-bR)jI=jJ+jK else jI,_=b7.computeDistanceAndTime(jE,0,n(),0,0,b8*dU+math.sqrt(ju)+jx-bR)end;jI=(jI+15+be*iz)*1.1;local jL=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jL then local jt=planet:getAltitude(CustomTarget.position)local jM=an-jt-100;local dx=CustomTarget.position-vec3(core.getConstructWorldPos())local jN=math.sqrt(dx:len()^2-(an-jt)^2)if jN>100 then jL=false elseif jM<=jI or jI==-1 then BrakeIsOn=true;jA=true else BrakeIsOn=false;jA=true end end;if not jL and CalculateBrakeLandingSpeed then if jI>=jB then BrakeIsOn=true else BrakeIsOn=false end;jA=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fS=aj;if fS>-1 then bc=autoRollPreference;if be<1 or bd:normalize():dot(cA)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bd:normalize():dot(-ek)<0.999 then BrakeIsOn=true elseif ei<-brakeLandingRate and not jA then BrakeIsOn=true elseif not jA then BrakeIsOn=false end end;if AutoTakeoff or ah then local fh,fj,fi;if AutopilotTargetCoords~=nil then fh,fj,fi=b6:getPlanetarySystem(0):castIntersections(iB,(AutopilotTargetCoords-iB):normalize(),function(fk)return fk.radius+fk.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if an>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(j8)<15 and an/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and be<I then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)z=0 elseif ah then cmdThrottle(0)z=0;BrakeIsOn=true end elseif ah and j()==0 and a4~=nil and(fh==nil or fh.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jO=hoverDetectGround()>-1;local jP=cB;if(VectorToTarget or ah)and not jO and be>minRollVelocity and j()>0.01 then local jp=math.rad(math.abs(dO))jP=cB*math.abs(math.cos(jp))+iE*math.sin(jp)end;local jQ=utils.clamp(j8-jP,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jQ=utils.clamp(j8-jP,-85,MaxPitch)elseif j()<0.01 then jQ=utils.clamp(j8-jP,-MaxPitch,MaxPitch)end;if math.abs(dO)<5 or VectorToTarget or BrakeLanding or jO or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jQ)local j9=pitchPID:get()O=O+j9 end end;if antigrav~=nil and(antigrav and not ExternalAGG and an<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jR=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jS=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jT=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jU=S;local jV=vec3(core.getWorldVertical())if jV==nil or jV:len()==0 then jV=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jW=vec3(core.getConstructWorldOrientationUp())local jX=vec3(core.getConstructWorldOrientationForward())local jY=vec3(core.getConstructWorldOrientationRight())local jZ=vec3(core.getWorldVelocity())local j_=vec3(core.getWorldVelocity()):normalize()local k0=getRoll(jV,jX,jY)local k1=math.abs(k0)local k2=utils.sign(k0)local j=j()local k3=vec3(core.getWorldAngularVelocity())local k4=jR*pitchSpeedFactor*jY+jS*rollSpeedFactor*jX+jT*yawSpeedFactor*jW;if jV:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local dO=getRoll(jV,jX,jY)local dP=dO/180*math.pi;local dQ=math.cos(dP)local dR=math.sin(dP)local iC=getPitch(jV,jX,jY*dQ+jW*dR)if bc==true and math.abs(bk-k0)>autoRollRollThreshold and jS==0 and math.abs(iC)<85 then local k5=bk;local iY=autoRollFactor;if j==0 then iY=iY/4;bk=0;k5=0 end;if rollPID==nil then rollPID=pid.new(iY*0.01,0,iY*0.1)end;rollPID:inject(k5-k0)local k6=rollPID:get()k4=k4+k6*jX end end;if jV:len()>0.01 and j>0.0 then local k7=20.0;if turnAssist==true and k1>k7 and jR==0 and jT==0 then local k8=turnAssistFactor*0.1;local k9=turnAssistFactor*0.025;local ka=(k1-k7)/(180-k7)*180;local kb=0;if ka<90 then kb=ka/90 elseif ka<180 then kb=(180-ka)/90 end;kb=kb*kb;local kc=-k2*k9*(1.0-kb)local kd=k8*kb;k4=k4+kd*jY+kc*jW end end;local ke=1;local kf=0;local kg=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local ei=-jV:dot(jZ)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-jZ:dot(jX))local kh=throttlePID:get()C=utils.clamp(kh,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jZ:len()-bn/3.6)local ki=utils.clamp(brakePID:get(),0,1)if j>0 and ei<-80 or j>0.005 then A=ki end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local kj=''local kk=vec3()local kl=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kl,kf)local km='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then km=km..ExtraLongitudeTags end;local kn=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local ko=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(km,axisCommandId.longitudinal)local kp=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kj=kj..' , '.."lateral airfoil , lateral ground "kk=kk+kp;if kk:len()>constants.epsilon then Nav:setEngineForceCommand(kj,kk,kf,'','','',kg)end;Nav:setEngineForceCommand(km,ko,ke)local kq='thrust analog vertical fueled 'local kr='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kr=kr..ExtraLateralTags end;if ExtraVerticalTags~="none"then kq=kq..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kq,kl,ke)else Nav:setEngineForceCommand(kq,vec3(),ke)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kr,kp,ke)else Nav:setEngineForceCommand(kr,vec3(),ke)end;if jU==0 then jU=A end;local ks=-jU*(brakeSpeedFactor*jZ+brakeFlatFactor*j_)Nav:setEngineForceCommand('brake',ks)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local gd=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jZ:len()-gd/3.6)local ki=utils.clamp(brakePID:get(),0,1)jU=utils.clamp(jU+ki,0,1)end;local ks=-jU*(brakeSpeedFactor*jZ+brakeFlatFactor*j_)Nav:setEngineForceCommand('brake',ks)local kj=''local kk=vec3()local kt=false;local km='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then km=km..ExtraLongitudeTags end;local kn=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if kn==axisCommandType.byThrottle then local ko=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(km,axisCommandId.longitudinal)Nav:setEngineForceCommand(km,ko,ke)elseif kn==axisCommandType.byTargetSpeed then local ko=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kj=kj..' , '..km;kk=kk+ko;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kt=true end end;local kr='thrust analog lateral 'if ExtraLateralTags~="none"then kr=kr..ExtraLateralTags end;local ku=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ku==axisCommandType.byThrottle then local kv=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kr,axisCommandId.lateral)Nav:setEngineForceCommand(kr,kv,ke)elseif ku==axisCommandType.byTargetSpeed then local kp=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kj=kj..' , '..kr;kk=kk+kp end;local kq='thrust analog vertical 'if ExtraVerticalTags~="none"then kq=kq..ExtraVerticalTags end;local kw=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kw==axisCommandType.byThrottle then local kl=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kq,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kq,kl,ke,'airfoil','ground','',kg)else Nav:setEngineForceCommand(kq,vec3(),ke)Nav:setEngineForceCommand('airfoil vertical',kl,ke,'airfoil','','',kg)Nav:setEngineForceCommand('ground vertical',kl,ke,'ground','','',kg)end elseif kw==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),ke)end;local kx=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kj=kj..' , '..kq;kk=kk+kx end;if kk:len()>constants.epsilon then if S~=0 or kt or math.abs(j_:dot(jX))<0.8 then kj=kj..', brake'end;Nav:setEngineForceCommand(kj,kk,kf,'','','',kg)end end;local ky=torqueFactor*(k4-k3)local kz=vec3(core.getWorldAirFrictionAngularAcceleration())ky=ky-kz;Nav:setEngineTorqueCommand('torque',ky,ke,'airfoil','','',kg)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bU=vec3(core.getVelocity()):len()local kA=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kB=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bU*3.6>kB*(1-kA)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU*3.6<kB*(1-kA)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fJ=unit.getThrottle()if AtmoSpeedAssist then fJ=z*100 end;local gd=fJ/100;if j==0 then gd=gd*MaxGameVelocity;if bU>=gd*(1-kA)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU<gd*(1-kA)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gd=gd*ReentrySpeed/3.6;if bU>=gd*(1-kA)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU<gd*(1-kA)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bF=coroutine.resume(beginSetup)if bF then SetupComplete=true end else Nav:update()if not ba and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kC)if kC=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and aj==-1 and(j()>0 or an<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bc=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kC=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kC=="forward"then N=N-1 elseif kC=="backward"then N=N+1 elseif kC=="left"then Q=Q-1 elseif kC=="right"then Q=Q+1 elseif kC=="yawright"then R=R-1 elseif kC=="yawleft"then R=R+1 elseif kC=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kC=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kC=="up"then a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kC=="down"then a8=a8-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kC=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kC=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kC=="option1"then if not Autopilot then IncrementAutopilotTargetIndex()H=false end elseif kC=="option2"then if not Autopilot then DecrementAutopilotTargetIndex()H=false end elseif kC=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kC=="option4"then ToggleAutopilot()H=false elseif kC=="option5"then ToggleLockPitch()H=false elseif kC=="option6"then ToggleAltitudeHold()H=false elseif kC=="option7"then wipeSaveVariables()H=false elseif kC=="option8"then ToggleFollowMode()H=false elseif kC=="option9"then if gyro~=nil then gyro.toggle()aq=gyro.getState()==1 end;H=false elseif kC=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;bb=false;ba=false end elseif kC=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kC=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kC=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kC=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kC=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kC=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kC=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kC)if kC=="forward"then N=0 elseif kC=="backward"then N=0 elseif kC=="left"then Q=0 elseif kC=="right"then Q=0 elseif kC=="yawright"then R=0 elseif kC=="yawleft"then R=0 elseif kC=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kC=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kC=="up"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kC=="down"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kC=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kC=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kC=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;bb=false;ba=false end elseif kC=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kC=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kC)if kC=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kC=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kC=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kC=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dC)local i;local kD="/commands /setname /G /agg /addlocation /copydatabank"local kE,kF=nil,nil;local kG="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dC," ")kE=dC;if i~=nil then kE=string.sub(dC,0,i-1)kF=string.sub(dC,i+1)elseif not string.find(kD,kE)then for g9 in string.gmatch(kG,"([^\n]+)")do c(g9)end;return end;if kE=="/setname"then if kF==nil or kF==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kF)else W="Select a saved target to rename first"end elseif kE=="/addlocation"then if kF==nil or kF==""or string.find(kF,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kF,"::")local co=string.sub(kF,1,i-2)local ci=string.sub(kF,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..q..','..q..','..q..','..q..','..q..'}'local ck,cl,cf,cg,ce=string.match(ci,cj)local planet=b0[tonumber(ck)][tonumber(cl)]AddNewLocationByWaypoint(co,planet,ci)W="Added "..co.." to saved locations,\nplanet "..planet.name.." at "..ci;ab=5 elseif kE=="/agg"then if kF==nil or kF==""then W="Usage: /agg targetheight"return end;kF=tonumber(kF)if kF<1000 then kF=1000 end;AntigravTargetAltitude=kF;W="AGG Target Height set to "..kF elseif kE=="/G"then if kF==nil or kF==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kF=="dump"then for bD,bE in pairs(a)do if type(_G[bE])=="boolean"then if _G[bE]==true then c(bE.." true")else c(bE.." false")end elseif _G[bE]==nil then c(bE.." nil")else c(bE.." ".._G[bE])end end;return end;i=string.find(kF," ")local kH=string.sub(kF,0,i-1)local kI=string.sub(kF,i+1)for bD,bE in pairs(a)do if bE==kH then W="Variable "..kH.." changed to "..kI;local kJ=type(_G[bE])if kJ=="number"then kI=tonumber(kI)elseif kJ=="boolean"then if string.lower(kI)=="true"then kI=true else kI=false end end;_G[bE]=kI;return end end;W="No such global variable: "..kH elseif kE=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
