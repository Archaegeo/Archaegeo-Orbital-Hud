name: ButtonsHud - Dimencia and Archaegeo v5.341 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=SafeR;local t=SafeB;local u=SafeG;local v=false;local w=0;local x=""local y=0;local z=0;local A=false;local B=0;local C=false;local D=round(ResolutionX/2,0)local E=round(ResolutionY/2,0)local F=false;local G=true;local H=55;local I=false;local J=1;local K=1;local L=false;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=false;local U=false;local V="empty"local W=1;local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=false;local a5=false;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=j()>0;local ap=core.getAltitude()local aq=core.getElementIdList()local ar=system.getTime()local as=nil;local at=false;local au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]local av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bg=vec3(core.getWorldVelocity())local bh=vec3(bg):len()local bi=math.cos(YawStallAngle*constants.deg2rad)local bj=LandingGearGroundHeight;local bk=system.getMouseDeltaX()local bl=system.getMouseDeltaY()local bm=false;local bn=system.getTime()local bo=0;local bp=0;local bq=AtmoSpeedLimit;function LoadVariables()if dbHud_1 then local br=dbHud_1.hasKey;if not useTheseSettings then for bs,bt in pairs(a)do if br(bt)then local bu=f(dbHud_1.getStringValue(bt))if bu~=nil then c(bt.." "..dbHud_1.getStringValue(bt))_G[bt]=bu;aK=true end end end end;coroutine.yield()for bs,bt in pairs(b)do if br(bt)then local bu=f(dbHud_1.getStringValue(bt))if bu~=nil then c(bt.." "..dbHud_1.getStringValue(bt))_G[bt]=bu;aK=true end end end;if useTheseSettings then V="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ad=5 elseif aK then V="Loaded Saved Variables (see Lua Chat Tab for list)"else V="No Saved Variables Found - Stand up / leave remote to save settings"end else V="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bv=system.getTime()if LastStartTime+180<bv then LastMaxBrakeInAtmo=0 end;if aK then D=round(ResolutionX/2,0)E=round(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference end;LastStartTime=bv;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then V="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;bi=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]bq=AtmoSpeedLimit end;function CalculateFuelVolume(bw,bx)if bw>bx then bx=bw end;if ContainerOptimization>0 then bx=bx-bx*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bx=bx-bx*FuelTankOptimization*0.05 end;return bx end;function ProcessElements()local by=fuelX~=0 and fuelY~=0;for bs in pairs(aq)do local type=l(aq[bs])if type=="Landing Gear"then L=true end;if type=="Dynamic Core Unit"then local bz=h(aq[bs])if bz>10000 then b0=128 elseif bz>1000 then b0=64 elseif bz>150 then b0=32 end end;aR=aR+h(aq[bs])if by and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bz=h(aq[bs])local bA=m(aq[bs])local bw=0;local bB=system.getTime()if type=="Atmospheric Fuel Tank"then local bx=400;local bC=35.03;if bz>10000 then bx=51200;bC=5480 elseif bz>1300 then bx=6400;bC=988.67 elseif bz>150 then bx=1600;bC=182.67 end;bw=bA-bC;if fuelTankHandlingAtmo>0 then bx=bx+bx*fuelTankHandlingAtmo*0.2 end;bx=CalculateFuelVolume(bw,bx)aO[#aO+1]={aq[bs],core.getElementNameById(aq[bs]),bx,bC,bw,bB}end;if type=="Rocket Fuel Tank"then local bx=320;local bC=173.42;if bz>65000 then bx=40000;bC=25740 elseif bz>6000 then bx=5120;bC=4720 elseif bz>700 then bx=640;bC=886.72 end;bw=bA-bC;if fuelTankHandlingRocket>0 then bx=bx+bx*fuelTankHandlingRocket*0.1 end;bx=CalculateFuelVolume(bw,bx)aQ[#aQ+1]={aq[bs],core.getElementNameById(aq[bs]),bx,bC,bw,bB}end;if type=="Space Fuel Tank"then local bx=2400;local bC=182.67;if bz>10000 then bx=76800;bC=5480 elseif bz>1300 then bx=9600;bC=988.67 end;bw=bA-bC;if fuelTankHandlingSpace>0 then bx=bx+bx*fuelTankHandlingSpace*0.2 end;bx=CalculateFuelVolume(bw,bx)aP[#aP+1]={aq[bs],core.getElementNameById(aq[bs]),bx,bC,bw,bB}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a4=true else a5=true end end;local bD=j()if door and(bD>0 or bD==0 and ap<10000)then for _,bt in pairs(door)do bt.toggle()end end;if switch then for _,bt in pairs(switch)do bt.toggle()end end;if forcefield and(bD>0 or bD==0 and ap<10000)then for _,bt in pairs(forcefield)do bt.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if L then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bE=AboveGroundLevel()if bE~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not L then GearExtended=true end else BrakeIsOn=false end;if bj~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bj)if bj==0 and not L then GearExtended=true;BrakeIsOn=true end else bj=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bE~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ao end;function ConvertResolutionX(bt)if ResolutionX==1920 then return bt else return round(ResolutionX*bt/1920,0)end end;function ConvertResolutionY(bt)if ResolutionY==1080 then return bt else return round(ResolutionY*bt/1080,0)end end;function RefreshLastMaxBrake(bF,bG)if bF==nil then bF=core.g()end;bF=round(bF,5)local bH=j()if bG~=nil and bG or(aN==nil or aN~=bF)then local bg=core.getVelocity()local bI=vec3(bg):len()local bJ=f(unit.getData()).maxBrake;if bJ~=nil and bJ>0 and ao then bJ=bJ/utils.clamp(bI/100,0.1,1)bJ=bJ/bH;if bH>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bJ)/2 else LastMaxBrakeInAtmo=bJ end end end;if bJ~=nil and bJ>0 then LastMaxBrake=bJ end;aN=bF end end;function MakeButton(bK,bL,bM,bN,bO,bP,bQ,bR,bS)local bT={enableName=bK,disableName=bL,width=bM,height=bN,x=bO,y=bP,toggleVar=bQ,toggleFunction=bR,drawCondition=bS,hovered=false}table.insert(aB,bT)return bT end;function UpdateAtlasLocationsList()AtlasOrdered={}for bs,bt in pairs(b2[0])do table.insert(AtlasOrdered,{name=bt.name,index=bs})end;local function bU(bV,bW)return bV.name<bW.name end;table.sort(AtlasOrdered,bU)end;function AddLocationsToAtlas()for bs,bt in pairs(SavedLocations)do table.insert(b2[0],bt)end;UpdateAtlasLocationsList()end;function float_eq(bX,bY)if bX==0 then return math.abs(bY)<1e-09 end;if bY==0 then return math.abs(bX)<1e-09 end;return math.abs(bX-bY)<math.max(math.abs(bX),math.abs(bY))*epsilon end;function zeroConvertToMapPosition(bZ,b_)local c0=vec3(b_)if bZ.bodyId==0 then return setmetatable({latitude=c0.x,longitude=c0.y,altitude=c0.z,bodyId=0,systemId=bZ.planetarySystemId},MapPosition)end;local c1=c0-bZ.center;local ae=c1:len()local c2=ae-bZ.radius;local c3=0;local c4=0;if not float_eq(ae,0)then local c5=math.atan(c1.y,c1.x)c4=c5>=0 and c5 or 2*math.pi+c5;c3=math.pi/2-math.acos(c1.z/ae)end;return setmetatable({latitude=math.deg(c3),longitude=math.deg(c4),altitude=c2,bodyId=bZ.bodyId,systemId=bZ.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(c6)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c7='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c8,c9,c3,c4,c2=string.match(c6,c7)if c8=="0"and c9=="0"then return vec3(tonumber(c3),tonumber(c4),tonumber(c2))end;c4=math.rad(c4)c3=math.rad(c3)local planet=b2[tonumber(c8)][tonumber(c9)]local ca=math.cos(c3)local cb=vec3(ca*math.cos(c4),ca*math.sin(c4),math.sin(c3))return planet.center+(planet.radius+c2)*cb end;function AddNewLocationByWaypoint(cc,planet,c6)if dbHud_1 then local cd={}local position=zeroConvertToWorldCoordinates(c6)if planet.name=="Space"then cd={position=position,name=cc,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bD=false;if planet.hasAtmosphere then bD=true else bD=false end;cd={position=position,name=cc,atmosphere=bD,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cd;table.insert(b2[0],cd)UpdateAtlasLocationsList()else V="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local ce=planet.name..". "..#SavedLocations;if radar_1 then local cf,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cf~=nil and cf~=""then ce=ce.." "..radar_1.getConstructName(cf)end end;local cd={}local bD=false;if planet.hasAtmosphere then bD=true end;cd={position=position,name=ce,atmosphere=bD,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cd;table.insert(b2[0],cd)UpdateAtlasLocationsList()V="Location saved as "..ce else V="Databank must be installed to save locations"end end;function UpdatePosition(cg)local ch=-1;local cd;for bs,bt in pairs(SavedLocations)do if bt.name and bt.name==CustomTarget.name then ch=bs;break end end;if ch~=-1 then local ci;if cg~=nil then cd={position=SavedLocations[ch].position,name=cg,atmosphere=SavedLocations[ch].atmosphere,planetname=SavedLocations[ch].planetname,gravity=SavedLocations[ch].gravity}else cd={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ch].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ch]=cd;ch=-1;for bs,bt in pairs(b2[0])do if bt.name and bt.name==CustomTarget.name then ch=bs end end;if ch>-1 then b2[0][ch]=cd end;UpdateAtlasLocationsList()V=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else V="Name Not Found"end end;function ClearCurrentPosition()local ch=-1;for bs,bt in pairs(b2[0])do if bt.name and bt.name==CustomTarget.name then ch=bs end end;if ch>-1 then table.remove(b2[0],ch)end;ch=-1;for bs,bt in pairs(SavedLocations)do if bt.name and bt.name==CustomTarget.name then V=bt.name.." saved location cleared"ch=bs;break end end;if ch~=-1 then table.remove(SavedLocations,ch)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cj)cj[#cj+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;function ToggleWidgets()if aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aA=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aA=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(ck,cl,bO,bP,bM,bN)if ck>bO and ck<bO+bM and cl>bP and cl<bP+bN then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local cm=vec3(core.getConstructWorldOrientationForward())local cn=vec3(core.getConstructWorldOrientationRight())local co=vec3(core.getWorldVertical())local cp=getPitch(co,cm,cn)LockPitch=cp;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bv=system.getTime()if bv-bp<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bp=-1;if AltitudeHold then return end end else bp=bv end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;T=false;BrakeLanding=false;Reentry=false;be=true;LockPitch=nil;if hoverDetectGround()==-1 or not ao or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bp>-1 then HoldAltitude=ap end;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bp>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end else be=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then T=not T;if T then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else V="Follow Mode only works with Remote controller"T=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local cq=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ap>100000 or ap==0 then Autopilot=true else ai=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;T=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;F=false;LockPitch=nil;WaypointSet=false else aj=true;ToggleAltitudeHold()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;F=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;be=autoRollPreference;ai=false;ak=false end end;function CheckDamage(cj)local cr=0;az=""local cs=aR;local ct=0;local cu=0;local cv=0;local cw=0;local cx=""for bs in pairs(aq)do local bz=0;local cy=0;cy=h(aq[bs])bz=k(aq[bs])ct=ct+bz;if bz<cy then if bz==0 then cv=cv+1 else cu=cu+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bs]))local bO=position.x-b0;local bP=position.y-b0;local cz=position.z-b0;table.insert(aw,core.spawnArrowSticker(bO,bP,cz+1,"down"))table.insert(aw,core.spawnArrowSticker(bO,bP,cz+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(bO+1,bP,cz,"north"))table.insert(aw,core.spawnArrowSticker(bO+1,bP,cz,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(bO-1,bP,cz,"south"))table.insert(aw,core.spawnArrowSticker(bO-1,bP,cz,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(bO,bP-1,cz,"east"))table.insert(aw,core.spawnArrowSticker(bO,bP-1,cz,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(bO,bP+1,cz,"west"))table.insert(aw,core.spawnArrowSticker(bO,bP+1,cz,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bs])end elseif aS and#aw>0 and aw[11]==aq[bs]then for cA in pairs(aw)do core.deleteSticker(aw[cA])end;aw={}end end;cr=d(ct/cs*100)if cr<100 then cj[#cj+1]=[[<g class="pbright txt">]]cw=d(cr*2.55)cx=e("rgb(%d,%d,%d)",255-cw,cw,0)if cr<100 then cj[#cj+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cx,cr)if cv>0 then cj[#cj+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cx,cv,cu)elseif cu>0 then cj[#cj+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cx,cu)end end;cj[#cj+1]=[[<\g>]]end end;function DrawCursorLine(cj)local cB=d(utils.clamp(ae/(aE/4)*255,0,255))cj[#cj+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,d(s+0.5)+cB,d(u+0.5)-cB,d(t+0.5)-cB)end;function getPitch(cC,cD,bW)local cE=cC:cross(bW):normalize_inplace()local cp=math.acos(utils.clamp(cE:dot(-cD),-1,1))*constants.rad2deg;if cE:cross(-cD):dot(bW)<0 then cp=-cp end;return cp end;local cF=math.atan;local function cG(cH,cI,cJ)cI=cI:project_on_plane(cH)cJ=cJ:project_on_plane(cH)return cF(cI:cross(cJ):dot(cH),cI:dot(cJ))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;T=false;F=false;ai=false;aj=false;I=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil else am=true end end;function wipeSaveVariables()if not dbHud_1 then V="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ad=5 else if aL then for bs,bt in pairs(a)do dbHud_1.setStringValue(bt,g(nil))end;for bs,bt in pairs(b)do if bt~="SavedLocations"then dbHud_1.setStringValue(bt,g(nil))end end;V="Databank wiped. New variables will save after re-enter seat and exit"ad=5;aL=false;aK=false;a9=true else V="Press ALT-7 again to confirm wipe of ALL data"aL=true end end end;function CheckButtons()for _,bt in pairs(aB)do if bt.hovered then if not bt.drawCondition or bt.drawCondition()then bt.toggleFunction()end;bt.hovered=false end end end;function SetButtonContains()local bO=ab+aE/2;local bP=ac+aF/2;for _,bt in pairs(aB)do bt.hovered=Contains(bO,bP,bt.x,bt.y,bt.width,bt.height)end end;function DrawButton(cj,cK,hover,bO,bP,cL,cM,cN,cO,cP,cQ)if type(cP)=="function"then cP=cP()end;if type(cQ)=="function"then cQ=cQ()end;cj[#cj+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bO,bP,cL,cM)if cK then cj[#cj+1]=e("%s'",cN)else cj[#cj+1]=cO end;if hover then cj[#cj+1]=" style='stroke:white; stroke-width:2'"else cj[#cj+1]=" style='stroke:black; stroke-width:1'"end;cj[#cj+1]="></rect>"cj[#cj+1]=e("<text x='%f' y='%f' font-size='24' fill='",bO+cL/2,bP+cM/2+5)if cK then cj[#cj+1]="black"else cj[#cj+1]="white"end;cj[#cj+1]="' text-anchor='middle' font-family='Montserrat'>"if cK then cj[#cj+1]=e("%s</text>",cP)else cj[#cj+1]=e("%s</text>",cQ)end end;function DrawButtons(cj)local cR="rgb(50,50,50)'"local cS="rgb(210,200,200)"local cT=DrawButton;for _,bt in pairs(aB)do local bL=bt.disableName;local bK=bt.enableName;if type(bL)=="function"then bL=bL()end;if type(bK)=="function"then bK=bK()end;if not bt.drawCondition or bt.drawCondition()then cT(cj,bt.toggleVar(),bt.hovered,bt.x,bt.y,bt.width,bt.height,cS,cR,bL,bK)end end end;function DrawTank(cj,a_,bO,cU,cV,cW,cX,cY)local cZ=1;local c_=2;local d0=3;local d1=4;local d2=5;local d3=6;local d4=""local d5=0;local d6=fuelY;local d7=fuelY+10;if o()==1 and not RemoteHud then d6=d6-50;d7=d7-50 end;cj[#cj+1]=[[<g class="pdim txtfuel">]]if cV=="ATMO"then d4="atmofueltank"elseif cV=="SPACE"then d4="spacefueltank"else d4="rocketfueltank"end;d5=_G[d4 .."_size"]if#cW>0 then for i=1,#cW do local ce=string.sub(cW[i][c_],1,12)local d8=0;for cA=1,d5 do if cW[i][c_]==f(unit[d4 .."_"..cA].getData()).name then d8=cA;break end end;if a_ or cX[i]==nil or cY[i]==nil then local d9=0;local da=0;local db=0;local dc=0;local bB=system.getTime()if d8~=0 then cY[i]=f(unit[d4 .."_"..d8].getData()).percentage;cX[i]=f(unit[d4 .."_"..d8].getData()).timeLeft;if cX[i]=="n/a"then cX[i]=0 end else db=m(cW[i][cZ])-cW[i][d1]d9=cW[i][d0]cY[i]=d(0.5+db*100/d9)da=cW[i][d2]dc=cW[i][d3]if da<=db then cX[i]=0 else cX[i]=d(0.5+db/((da-db)/(bB-dc)))end;cW[i][d2]=db;cW[i][d3]=bB end end;if ce==cU then ce=e("%s %d",cV,i)end;if d8==0 then ce=ce.." *"end;local dd;if cX[i]==0 then dd="n/a"else dd=FormatTimeString(cX[i])end;if cY[i]~=nil then local cw=d(cY[i]*2.55)local cx=e("rgb(%d,%d,%d)",255-cw,cw,0)local de=""if dd~="n/a"and cX[i]<120 or cY[i]<5 then if a_ then de=[[class="red"]]end end;cj[#cj+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bO,d6,de,ce,bO,d7,cx,cY[i],dd)d6=d6+30;d7=d7+30 end end end;cj[#cj+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bg)bg=vec3(bg)local cp=-math.deg(math.atan(bg.y,bg.z))+180;cp=cp-90;if cp<0 then cp=360+cp end;if cp>180 then cp=-180+cp-180 end;return-cp end;function getRelativeYaw(bg)bg=vec3(bg)local df=math.deg(math.atan(bg.y,bg.x))-90;if df<-180 then df=360+df end;return df end;function AlignToWorldVector(dg,dh,di)if not ao or not bm or al~=-1 or bh<H then local dj=di;if dj==nil then dj=DampingMultiplier end;if dh==nil then dh=aD end;dg=vec3(dg):normalize()local dk=vec3(core.getConstructWorldOrientationForward())-dg;local dl=-getMagnitudeInDirection(dk,core.getConstructWorldOrientationRight())*aC;local dm=-getMagnitudeInDirection(dk,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dl/2 end;if ay==0 then ay=dm/2 end;if math.abs(dl)<0.1 then O=O-dl*2 else O=O-(dl+(dl-ax)*dj)end;if math.abs(dm)<0.1 then N=N+dm*2 else N=N+dm+(dm-ay)*dj end;ax=dl;ay=dm;if math.abs(dl)<dh and math.abs(dm)<dh then return true end;return false elseif bm and al==-1 then dg=vec3(core.getWorldVelocity())local dj=di;if dj==nil then dj=DampingMultiplier end;if dh==nil then dh=aD end;dg=vec3(dg):normalize()local dk=vec3(core.getConstructWorldOrientationForward())-dg;local dl=-getMagnitudeInDirection(dk,core.getConstructWorldOrientationRight())*aC;local dm=-getMagnitudeInDirection(dk,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dl/2 end;if ay==0 then ay=dm/2 end;if math.abs(dl)<0.1 then O=O-dl*5 else O=O-(dl+(dl-ax)*dj)end;if math.abs(dm)<0.1 then N=N+dm*5 else N=N+dm+(dm-ay)*dj end;ax=dl;ay=dm;if math.abs(dl)<dh and math.abs(dm)<dh then return true end;return false end end;function getAPEnableName()local ce=AutopilotTargetName;if ce==nil then local dn,dp=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())ce=CustomTarget.name.." "..dn..dp end;if ce==nil then ce="None"end;return"Engage Autopilot: "..ce end;function getAPDisableName()local ce=AutopilotTargetName;if ce==nil then ce=CustomTarget.name end;if ce==nil then ce="None"end;return"Disable Autopilot: "..ce end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then V="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then V="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not I then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then V="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;V="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dq,dr=getDistanceDisplayString(HoldAltitude)V="Beginning Re-entry.  Target speed: "..bq.." Target Altitude: "..dq..dr end;AutoTakeoff=false end;function SetupButtons()local ds=50;local dt=260;local du=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dt,ds,aE/2-dt/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then V="Brakes in Toggle Mode"else V="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dt,ds,aE/2-dt/2-50-du.width,aF/2-ds+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dt,ds,aE/2-dt/2+du.width+50,aF/2-ds+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dv=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dv.height,dv.x+dv.width+30,dv.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dv.height,dv.x+dv.width+30,dv.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dv.height,dv.x-200-30,dv.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ds=60;dt=300;local bO=10;local bP=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dt,ds,bO,bP,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dt,ds,bO+dt+20,bP,function()return AltitudeHold end,ToggleAltitudeHold)bP=bP+ds+20;MakeButton("Engage Autoland","Disable Autoland",dt,ds,bO,bP,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dt,ds,bO+dt+20,bP,function()return AutoTakeoff end,ToggleAutoTakeoff)bP=bP+ds+20;MakeButton("Show Orbit Display","Hide Orbit Display",dt,ds,bO,bP,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then V="Orbit Display Enabled"else V="Orbit Display Disabled"end end)bP=bP+ds+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dt,ds,bO,bP,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dt,ds,bO+dt+20,bP,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)bP=bP+ds+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dt,ds,bO,bP,function()return T end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dt,ds,bO+dt+20,bP,function()return aS end,function()aS=not aS;if aS then V="Repair Arrows Enabled"else V="Repair Arrows Diabled"end end,function()return o()==1 end)bP=bP+ds+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dt,ds,bO,bP,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bP=bP+ds+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dt*2,ds,bO,bP,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dw=Nav.axisCommandManager:getAxisCommandType(0)local dx="TRAVEL"if dw==1 then dx="CRUISE"end;if Autopilot then dx="AUTOPILOT"end;return dx end;function UpdateHud(cj)local c2=ap;local bg=core.getVelocity()local bI=vec3(bg):len()local co=vec3(core.getWorldVertical())local cm=vec3(core.getConstructWorldOrientationForward())local cn=vec3(core.getConstructWorldOrientationRight())local dy=vec3(core.getConstructWorldOrientationUp())local dz=getRoll(co,cm,cn)local dA=dz/180*math.pi;local dB=math.cos(dA)local dC=math.sin(dA)local cp=getPitch(co,cm,cn*dB+dy*dC)local dD=dz;local dE=cp;local dF=j()local dG=d(unit.getThrottle())local dH=bI*3.6;local dI=unit.getAxisCommandValue(0)local dJ=ConvertResolutionX(1770)local dK=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dI=y;dG=y*100 end;local dx=GetFlightStyle()local dL="ROLL"local dM=unit.getClosestPlanetInfluence()>0;if dG==nil then dG=0 end;if not dM then if bI>5 then cp=getRelativePitch(bg)dz=getRelativeYaw(bg)else cp=0;dz=0 end;dL="YAW"end;if w>50000 and not ao then local dN;if w>200000 then dN=round(w/200000,2).." su"else dN=round(w/1000,1).." km"end;cj[#cj+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dJ,dK,dN)end;cj[#cj+1]=ag;cj[#cj+1]=az;cj[#cj+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cj,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cj,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cj,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cj,c2)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dM then DrawRollLines(cj,centerX,centerY,dD,dL,dM)DrawArtificialHorizon(cj,dE,dD,centerX,centerY,dM,d(getRelativeYaw(bg)),bI)else DrawRollLines(cj,centerX,centerY,dz,dL,dM)DrawArtificialHorizon(cj,cp,dz,centerX,centerY,dM,d(dz),bI)end;DrawAltitudeDisplay(cj,c2,dM)DrawPrograde(cj,bg,bI,centerX,centerY)end end;DrawThrottle(cj,dx,dG,dI)DrawSpeed(cj,dH)DrawWarnings(cj)DisplayOrbitScreen(cj)if screen_2 then local c6=vec3(core.getConstructWorldPos())local bO=960+c6.x/b4;local bP=450+c6.y/b5;screen_2.moveContent(b6,(bO-80)/19.2,(bP-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cj)if not v then s=PvPR;u=PvPG;t=PvPB else s=SafeR;u=SafeG;t=SafeB end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local dO=au;local dP=av;local dQ=au;local dR=av;if IsInFreeLook()and not brightHud then dO=[[rgb(]]..d(s*0.4+0.5)..","..d(u*0.4+0.5)..","..d(t*0.3+0.5)..[[)]]dP=[[rgb(]]..d(s*0.3+0.5)..","..d(u*0.3+0.5)..","..d(t*0.2+0.5)..[[)]]end;cj[#cj+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dO,dO,dQ,dQ,dP,dP,dR,dR,ResolutionX,ResolutionY)end;function HUDEpilogue(cj)cj[#cj+1]="</svg>"end;function DrawSpeed(cj,dH)local dS=throtPosY-10;local dT=throtPosX+10;cj[#cj+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dS=75 end;cj[#cj+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dT,dS,d(dH))end;function DrawOdometer(cj,a7,TotalDistanceTravelled,dx,a8,dF)local dU=ConvertResolutionX(1240)local dV=ConvertResolutionY(55)local dW=dV+10;local dF=j()local bF=core.g()local dX=0;local dY=0;local dZ=0;RefreshLastMaxBrake(bF)if ao then dZ=LastMaxBrakeInAtmo else dZ=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local d_=vec3(core.getWorldAcceleration()):len()/9.80665;if bF>0.1 then dY=aM*bF;dX=maxThrust/bF end;cj[#cj+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dU=ConvertResolutionX(1120)dV=ConvertResolutionY(55)dW=dV+10 elseif ao then local e0=ConvertResolutionX(770)cj[#cj+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],e0,dV,e0,dW,dF)end;cj[#cj+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dU,dV,dU,dW,bF/9.80665,dU,dV+20,dU,dW+20,d_)cj[#cj+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cj[#cj+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dZ/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dx)if bF>0.1 then cj[#cj+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dX/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dY/1000)else cj[#cj+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cj[#cj+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dx)end;cj[#cj+1]="</g>"end;function DrawThrottle(cj,dx,dG,dI)dG=math.floor(dG+0.5)local d6=throtPosY+10;local d7=throtPosY+20;if o()==1 and not RemoteHud then d6=55;d7=65 end;local e1="CRUISE"local unit="km/h"local e2=dI;if dx=="TRAVEL"or dx=="AUTOPILOT"then e1="THROT"unit="%"e2=dG;local e3="dim"if dG<0 then e3="red"end;cj[#cj+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],e3,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dG),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cj[#cj+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,d6,e1,throtPosX+10,d7,e2,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and A then dG=math.floor(B*100+0.5)local e3="red"if dG<0 then e3="red"end;cj[#cj+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],e3,1-math.abs(dG),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cj[#cj+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,d6+40,"LIMIT",throtPosX+10,d7+40,dG,"%")end;if ao and AtmoSpeedAssist or Reentry then cj[#cj+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d6-40,"LIMIT: ",bq.." km/h")elseif not ao and Autopilot then cj[#cj+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d6-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cj,c2)if c2<200000 and not ao or c2 and ao then local e4=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local e5=0;if math.abs(e4)>1 then e5=45*math.log(math.abs(e4),10)if e4<0 then e5=-e5 end end;cj[#cj+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(e4),d(e5))end end;function getHeading(cD)local e6=-vec3(core.getWorldVertical())cD=cD-cD:project_on(e6)local e7=vec3(0,0,1)e7=e7-e7:project_on(e6)local e8=e7:cross(e6)local e5=e7:angle_between(cD)*constants.rad2deg;if cD:dot(e8)<0 then e5=360-e5 end;return e5 end;function DrawRollLines(cj,centerX,centerY,dD,dL,dM)local e9=circleRad;local ea=20;ea=d(ea)local eb=d(dD)if dM then for i=-45,45,5 do local ec=i;cj[#cj+1]=e([[<g transform="rotate(%f,%d,%d)">]],ec,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cj[#cj+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e9+ea-len,centerX,centerY+e9+ea)end;cj[#cj+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+e9+ea-35,dL,centerX,centerY+e9+ea-25,eb)cj[#cj+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dD,centerX,centerY)cj[#cj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e9+ea-20,centerX+5,centerY+e9+ea-20,centerX,centerY+e9+ea-15)cj[#cj+1]="</g>"end;local df=eb;if dM then df=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ed=20;local ee=d(df)local ef=0;local eg=centerY+e9+ea+20;local eh=centerX;if dL~="YAW"then eg=ConvertResolutionY(130)eh=ConvertResolutionX(960)end;local ei=[[<path class="txttick line" d="]]for i=d(ee-(ed+10)-ee%5+0.5),d(ee+ed+10+ee%5+0.5),5 do local bO=eh+-i*5+df*5;if i%10==0 then ef=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cj[#cj+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bO+5,eg-12,p)elseif i%5==0 then ef=5 end;if ef==10 then ei=e([[%s M %f %f v %d]],ei,bO,eg-5,ef)else ei=e([[%s M %f %f v %d]],ei,bO,eg-2.5,ef)end end;cj[#cj+1]=ei..[["/>]]cj[#cj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eh-5,eg+10,eh+5,eg+10,eh,eg+5)if dM then dL="HDG"end;cj[#cj+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eh,eg+25,ee,eh,eg+35,dL)end;function DrawArtificialHorizon(cj,dE,dD,centerX,centerY,dM,ej,bI)local e9=circleRad;local ek=d(e9*3/5)if e9>0 then local el=d(dE)local len=0;local ei=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dD,centerX,centerY)if not ao then ei=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cj[#cj+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e9-1,centerX,centerY)cj[#cj+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(el-30-el%5+0.5),d(el+30+el%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bP=centerY+-i*5+dE*5;if len==30 then ei=e([[%s M %d %f h %d]],ei,centerX-ek-len,bP,len)if ao then cj[#cj+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dD,centerX,centerY,centerX-ek+10,bP,i)cj[#cj+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dD,centerX,centerY,centerX+ek-10,bP,i)if i==0 or i==180 or i==-180 then cj[#cj+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dD,centerX,centerY,centerX-ek+20,bP,ek*2-40)end else cj[#cj+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ek+10,bP,i)cj[#cj+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ek-10,bP,i)end;ei=e([[%s M %d %f h %d]],ei,centerX+ek,bP,len)else ei=e([[%s M %d %f h %d]],ei,centerX-ek-len,bP,len)ei=e([[%s M %d %f h %d]],ei,centerX+ek,bP,len)end end;cj[#cj+1]=ei..[["/>]]local em="PITCH"if not dM then em="REL PITCH"end;if dE>90 and not ao then dE=90-(dE-90)elseif dE<-90 and not ao then dE=-90-(dE+90)end;if e9>200 then if ao then if bI>H then cj[#cj+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ej)end;cj[#cj+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dD,centerX,centerY)else cj[#cj+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cj[#cj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ek+25,centerY-5,centerX-ek+20,centerY,centerX-ek+25,centerY+5,centerX-ek+50,centerY+4,el)cj[#cj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ek-25,centerY-5,centerX+ek-20,centerY,centerX+ek-25,centerY+5,centerX+ek-30,centerY+4,el)cj[#cj+1]="</g>"end;local en=d(e9/3)cj[#cj+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-en,centerY,e9-en)if not ao and dM then cj[#cj+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dD,centerX,centerY,centerX-ek+10,centerY,ek*2-20)end;cj[#cj+1]="</g>"if e9<200 then if ao and bI>H then cj[#cj+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e9,em,centerX,centerY-e9+10,el,centerX,centerY-15,"Yaw",centerX,centerY+20,ej)else cj[#cj+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e9,em,centerX,centerY-e9+15,el)end end end end;function DrawAltitudeDisplay(cj,c2,dM)local eo=altMeterX;local ep=altMeterY;local eq=78;local er=19;local es=AboveGroundLevel()if es~=-1 then table.insert(cj,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eo+eq,ep+er+20,es))end;if dM and(c2<200000 and not ao or c2 and ao)then table.insert(cj,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eo-1,ep-4,eq+2,er+6,eo+1,ep-1,eq-4,er))local ch=0;local et=1;local eu=0;local ev=c2<0;local ew=9;if ev then ew=0 end;local c2=math.abs(c2)while ch<6 do local ex=11;local ey=16;local ez=9;local eA=14;local de="altsm"if ch>2 then ey=ey+3;ex=ex+2;eA=eA+2;ez=ez-6;de="altbig"end;if ev then de=de.." red"end;local eB=c2/et%10;local eC=d(eB)local eD=d((eC+1)%10)local eE=eu;if ch==0 then eE=eB-eC;if ev then eE=1-eE end end;if ev and(ch==0 or eu~=0)then local eF=eD;eD=eC;eC=eF end;local eG=ey*(eE-1)local eH=eG+ey;local bO=eo+ez+(6-ch)*ex;local bP=ep+eA;table.insert(cj,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],de,bO,bP+eG,eD,bO,bP+eH,eC))ch=ch+1;et=et*10;if eC==ew then eu=eE else eu=0 end end;table.insert(cj,[[</g></g>]])end end;function DrawPrograde(cj,bg,bI,centerX,centerY)if bI>5 and not ao or bI>H then local e9=circleRad;local eI=20;local eJ=20;local eK=vec3(bg)local eL=getRelativePitch(eK)local eM=getRelativeYaw(eK)local eN=14;local eO=eN/2;local eP=-eM/eJ*e9;local eQ=eL/eI*e9;local bO=centerX+eP;local bP=centerY+eQ;local ae=math.sqrt(eP^2+eQ^2)local eR=[[<circle
                cx="]]..bO..[["
                cy="]]..bP..[["
                r="]]..eO/eN..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bO..[["
                cy="]]..bP..[["
                r="]]..eO..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bO-eN..[[,]]..bP..[[ h ]]..eO..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bO+eO..[[,]]..bP..[[ h ]]..eO..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bO..[[,]]..bP-eN..[[ v ]]..eO..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<e9 then cj[#cj+1]=eR else local e5=math.atan(eQ,eP)local eS=4;local eT=centerX+e9*math.cos(e5)local eU=centerY+e9*math.sin(e5)cj[#cj+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',e5*180/math.pi,eT,eU,eT-eS,eU-eS/2,eS*2,eS,eT+eS,eU-eS,eS,eS,-eS,eS)end;if not ao then eL=getRelativePitch(-eK)eM=getRelativeYaw(-eK)eP=-eM/eJ*e9;eQ=eL/eI*e9;bO=centerX+eP;bP=centerY+eQ;ae=math.sqrt(eP^2+eQ^2)if ae<e9 then local eV=[[<circle
                        cx="]]..bO..[["
                        cy="]]..bP..[["
                        r="]]..eO..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bO..[[,]]..bP-eN..[[ v ]]..eO..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bO..[[,]]..bP..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bO..[[,]]..bP..[[)" />
                     <path
                        d="M ]]..bO-eO..[[,]]..bP..[[ h ]]..eN..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bO..[[,]]..bP..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bO..[[,]]..bP..[[)"/>]]cj[#cj+1]=eV end end end end;function DrawWarnings(cj)cj[#cj+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cj[#cj+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cj[#cj+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cj[#cj+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cj[#cj+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eW=ConvertResolutionX(960)local eX=ConvertResolutionY(860)local eY=ConvertResolutionY(880)local eZ=ConvertResolutionY(900)local e_=ConvertResolutionY(960)local f0=ConvertResolutionY(200)local f1=ConvertResolutionY(150)local f2=ConvertResolutionY(960)if o()==1 and not RemoteHud then eX=ConvertResolutionY(135)eY=ConvertResolutionY(155)eZ=ConvertResolutionY(175)f0=ConvertResolutionY(115)f1=ConvertResolutionY(95)end;if BrakeIsOn then cj[#cj+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eW,eX)elseif z>0 then cj[#cj+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eW,eX,z)end;if ao and bm and hoverDetectGround()==-1 then cj[#cj+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eW,f0+50)end;if as then cj[#cj+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eW,f2)end;if GearExtended then if L then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eW,eY)else cj[#cj+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eW,eY)end;local dn,dp=getDistanceDisplayString(Nav:getTargetGroundAltitude())cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eW,eZ,dn..dp)end;if Z then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eW,e_+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eW,f0+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cj[#cj+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eW,f0+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eW,f0+20,AutopilotStatus)elseif LockPitch~=nil then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eW,f0+20,d(LockPitch))elseif T then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eW,f0+20)elseif Reentry then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eW,f0+20)end;local f3,f4,f5=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bg:normalize(),function(f6)if f6.noAtmosphericDensityAltitude>0 then return f6.radius+f6.noAtmosphericDensityAltitude else return f6.radius+f6.surfaceMaxAltitude*1.5 end end)local f7=f4;if f5~=nil and f4~=nil then f7=math.min(f5,f4)end;if AltitudeHold then if AutoTakeoff then local dn,dp=getDistanceDisplayString(HoldAltitude)cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eW,f0,dn..dp)if BrakeIsOn then cj[#cj+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eW,f0+50)end else local dn,dp=getDistanceDisplayString2(HoldAltitude)cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eW,f0,dn..dp)end end;if BrakeLanding then if StrongBrakes then cj[#cj+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eW,f0)else cj[#cj+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eW,f0)end end;if ProgradeIsOn then cj[#cj+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eW,f0)end;if RetrogradeIsOn then cj[#cj+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eW,f0)end;if TurnBurn then cj[#cj+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eW,f1)elseif f7~=nil and j()==0 then local dn,dp=getDistanceDisplayString(f7)local travelTime=b9.computeTravelTime(bh,0,f7)local f8="Collision"if f3.noAtmosphericDensityAltitude>0 then f8="Atmosphere"end;cj[#cj+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eW,f1,f3.name,f8,FormatTimeString(travelTime),dn..dp)end;if VectorToTarget then cj[#cj+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eW,f0+30,VectorStatus)end;cj[#cj+1]="</g>"end;function DisplayOrbitScreen(cj)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local f9=OrbitMapX;local fa=OrbitMapY;local fb=OrbitMapSize;local fc=4;fa=fa+fc;local fd=15;local bO=f9+fb+f9/2+fc;local bP=fa+fb/2+5+fc;local fe,ff,fg,fh;fe=fb/4;fh=0;cj[#cj+1]=[[<g class="pbright txtorb txtmid">]]cj[#cj+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fb+f9*2,fb+fa,fc,fc)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fg=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fe*2)ff=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fg*(1-orbit.eccentricity)fh=fe-orbit.periapsis.altitude/fg-planet.radius/fg;local fi=""if orbit.periapsis.altitude<=0 then fi='redout'end;cj[#cj+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fi,f9+fb/2+fh+fc,fa+fb/2+fc,fe,ff)cj[#cj+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',f9+fb/2+fc,fa+fb/2+fc,planet.radius/fg)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cj[#cj+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bO-35,bP-5,f9+fb/2+fe+fh,bP-5)cj[#cj+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bO,bP)bP=bP+fd;local dn,dp=getDistanceDisplayString(orbit.apoapsis.altitude)cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,dn..dp)bP=bP+fd;cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,FormatTimeString(orbit.timeToApoapsis))bP=bP+fd;cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,getSpeedDisplayString(orbit.apoapsis.speed))end;bP=fa+fb/2+5+fc;bO=f9-f9/2+10+fc;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cj[#cj+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bO+35,bP-5,f9+fb/2-fe+fh,bP-5)cj[#cj+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bO,bP)bP=bP+fd;local dn,dp=getDistanceDisplayString(orbit.periapsis.altitude)cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,dn..dp)bP=bP+fd;cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,FormatTimeString(orbit.timeToPeriapsis))bP=bP+fd;cj[#cj+1]=e([[<text x="%f" y="%f">%s</text>]],bO,bP,getSpeedDisplayString(orbit.periapsis.speed))end;cj[#cj+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],f9+fb/2+fc,20+fc,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fj=orbit.timeToApoapsis/orbit.period*2*math.pi;local fk=fe*math.cos(fj)local fl=ff*math.sin(fj)cj[#cj+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',f9+fb/2+fk+fh+fc,fa+fb/2+fl+fc)end;cj[#cj+1]=[[</g>]]end end;function getDistanceDisplayString(ae)local fm=ae>100000;local bu,dp=""if fm then bu,dp=round(ae/1000/200,1),"SU"elseif ae<1000 then bu,dp=round(ae,1),"m"else bu,dp=round(ae/1000,1),"Km"end;return bu,dp end;function getDistanceDisplayString2(ae)local fm=ae>100000;local bu,dp=""if fm then bu,dp=round(ae/1000/200,2)," SU"elseif ae<1000 then bu,dp=round(ae,2)," M"else bu,dp=round(ae/1000,2)," KM"end;return bu,dp end;function getSpeedDisplayString(bI)return d(round(bI*3.6,0)+0.5).." km/h"end;function FormatTimeString(fn)local fo=0;local fp=0;local fq=0;if fn<60 then fn=d(fn)elseif fn<3600 then fo=d(fn/60)fn=d(fn%60)elseif fn<86400 then fp=d(fn/3600)fo=d(fn%3600/60)else fq=d(fn/86400)fp=d(fn%86400/3600)end;if fq>0 then return fq.."d "..fp.."h "elseif fp>0 then return fp.."h "..fo.."m "elseif fo>0 then return fo.."m "..fn.."s"elseif fn>0 then return fn.."s"else return"0s"end end;function getMagnitudeInDirection(dg,fr)dg=vec3(dg)fr=vec3(fr):normalize()local bu=dg*fr;return bu.x+bu.y+bu.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local fs=AtlasOrdered[AutopilotTargetIndex].index;local ft=b2[0][fs]if ft.center then AutopilotTargetName=ft.name;a6=b8[0][fs]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ft;for _,bt in pairs(b8[0])do if bt.name==CustomTarget.planetname then a6=bt;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fs=AtlasOrdered[AutopilotTargetIndex].index;local ft=b2[0][fs]if ft.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fs=AtlasOrdered[AutopilotTargetIndex].index;local ft=b2[0][fs]if ft.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fu=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return fu end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bg=core.getWorldVelocity()local bI=vec3(bg):len()local fv=unit.getThrottle()/100;if AtmoSpeedAssist then fv=y end;local fw,fx=b9.computeDistanceAndTime(vec3(bg):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fv,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fy;if not TurnBurn and bI>0 then _,fy=GetAutopilotBrakeDistanceAndTime(bI)else _,fy=GetAutopilotTBBrakeDistanceAndTime(bI)end;local fz=0;local fA=0;if AutopilotCruising or not Autopilot and bI>5 then fA=b9.computeTravelTime(bI,0,AutopilotDistance)elseif a0+fw<AutopilotDistance then fz=AutopilotDistance-(a0+fw)fA=b9.computeTravelTime(8333.0556,0,fz)else local fB=(AutopilotDistance-a0)/fw;fw=AutopilotDistance-a0;fx=fx*fB end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fA elseif AutopilotBraking then return fy elseif AutopilotCruising then return fA+fy else return fx+a1+fA end end;function GetAutopilotBrakeDistanceAndTime(bI)if not ao then RefreshLastMaxBrake()return b9.computeDistanceAndTime(bI,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bI,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bI)RefreshLastMaxBrake()return b9.computeDistanceAndTime(bI,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fC=-1;local fD=-1;if vBooster then fC=vBooster.distance()end;if hover then fD=hover.distance()end;if fC~=-1 and fD~=-1 then if fC<fD then return fC else return fD end elseif fC~=-1 then return fC elseif fD~=-1 then return fD else return-1 end end;function AboveGroundLevel()local fE=-1;local fF=hoverDetectGround()if telemeter_1 then fE=telemeter_1.getDistance()end;if fF~=-1 and fE~=-1 then if fF<fE then return fF else return fE end elseif fF~=-1 then return fF else return fE end end;function tablelength(fG)local fH=0;for _ in pairs(fG)do fH=fH+1 end;return fH end;function BeginProfile(fI)ProfileTimeStart=system.getTime()end;function EndProfile(fI)local fJ=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fJ;ProfileCount=ProfileCount+1;if fJ>ProfileTimeMax then ProfileTimeMax=fJ end;if fJ<ProfileTimeMin then ProfileTimeMin=fJ end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fK=ProfileTimeSum;local fL=ProfileTimeSum/ProfileCount;local fM=ProfileTimeMin;local fN=ProfileTimeMax;local fO=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fK,fL,fM,fN,fO))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fP=radar_1.getEntries()local fQ=radar_1.getData()local fR=ConvertResolutionX(1770)local fS=ConvertResolutionY(330)if#fP>0 then local target=fQ:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ah=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;af=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fR,fS,#fP)local fT={}for bs,bt in pairs(fP)do if radar_1.hasMatchingTransponder(bt)==1 then table.insert(fT,bt)end end;if#fT>0 then local bP=ConvertResolutionY(15)local bO=ConvertResolutionX(1370)af=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,bO,bP)for bs,bt in pairs(fT)do bP=bP+20;af=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,bO,bP,radar_1.getConstructName(bt))end end else local fU;fU=fQ:find('worksInEnvironment":false')if fU then af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fR,fS)else af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fR,fS)end;if radarPanelID~=nil then ah=0;ToggleRadarPanel()end end end end;function DisplayMessage(cj,dn)if dn~="empty"then cj[#cj+1]=[[<text class="msg" x="50%%" y="310" >]]for fV in string.gmatch(dn,"([^\n]+)")do cj[#cj+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fV)end;cj[#cj+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bB=system.getTime()local bg=vec3(core.getWorldVelocity())local dH=vec3(bg):len()local fW=bB-ar;if dH>1.38889 then dH=dH/1000;local fX=dH*(bB-ar)TotalDistanceTravelled=TotalDistanceTravelled+fX;a7=a7+fX end;a8=a8+fW;TotalFlightTime=TotalFlightTime+fW;ar=bB end;function composeAxisAccelerationFromTargetSpeedV(fY,fZ)local f_=vec3()local g0=vec3()if fY==axisCommandId.longitudinal then f_=vec3(core.getConstructOrientationForward())g0=vec3(core.getConstructWorldOrientationForward())elseif fY==axisCommandId.vertical then f_=vec3(core.getConstructOrientationUp())g0=vec3(core.getConstructWorldOrientationUp())elseif fY==axisCommandId.lateral then f_=vec3(core.getConstructOrientationRight())g0=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g1=vec3(core.getWorldGravity())local g2=g1:dot(g0)local g3=vec3(core.getWorldAirFrictionAcceleration())local g4=g3:dot(g0)local g5=vec3(core.getVelocity())local g6=g5:dot(f_)local g7=fZ*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(g7-g6)local g8=targetSpeedPID2:get()local g9=(g8-g4-g2)*g0;return g9 end;function composeAxisAccelerationFromTargetSpeed(fY,fZ)local f_=vec3()local g0=vec3()if fY==axisCommandId.longitudinal then f_=vec3(core.getConstructOrientationForward())g0=vec3(core.getConstructWorldOrientationForward())elseif fY==axisCommandId.vertical then f_=vec3(core.getConstructOrientationUp())g0=vec3(core.getConstructWorldOrientationUp())elseif fY==axisCommandId.lateral then f_=vec3(core.getConstructOrientationRight())g0=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g1=vec3(core.getWorldGravity())local g2=g1:dot(g0)local g3=vec3(core.getWorldAirFrictionAcceleration())local g4=g3:dot(g0)local g5=vec3(core.getVelocity())local g6=g5:dot(f_)local g7=fZ*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(g7-g6)local g8=targetSpeedPID:get()local g9=(g8-g4-g2)*g0;return g9 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bs,bt in pairs(b2[0])do if aG==nil or bt.center.x<aG then aG=bt.center.x end;if aH==nil or bt.center.x>aH then aH=bt.center.x end;if aI==nil or bt.center.y<aI then aI=bt.center.y end;if aJ==nil or bt.center.y>aJ then aJ=bt.center.y end end;b3=""local ga=1.1*(aH-aG)/1920;local gb=1.4*(aJ-aI)/1080;for bs,bt in pairs(b2[0])do local bO=960+bt.center.x/ga;local bP=540+bt.center.y/gb;b3=b3 ..'<circle cx="'..bO..'" cy="'..bP..'" r="'..bt.radius/ga*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bt.name,"Moon")and not string.match(bt.name,"Sanctuary")and not string.match(bt.name,"Space")then b3=b3 .."<text x='"..bO.."' y='"..bP+bt.radius/ga*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bt.name.."</text>"end end;local c6=vec3(core.getConstructWorldPos())local bO=960+c6.x/ga;local bP=540+c6.y/gb;b3=b3 ..'<circle cx="'..bO..'" cy="'..bP..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..bO.."' y='"..bP-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=ga;b5=gb;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local c6=vec3(core.getConstructWorldPos())local bO=960+c6.x/ga;local bP=540+c6.y/gb;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((bO-80)/19.20,(bP-80)/10.80,b3)end end;function PlanetRef()local function gc(gd)return type(gd)=='number'end;local function ge(gd)return type(tonumber(gd))=='number'end;local function gf(gg)return type(gg)=='table'end;local function gh(gi)return type(gi)=='string'end;local function gj(bt)return gf(bt)and gc(bt.x and bt.y and bt.z)end;local function gk(gl)return gf(gl)and gc(gl.latitude and gl.longitude and gl.altitude and gl.bodyId and gl.systemId)end;local gm=math.pi/180;local gn=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c7='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local go=utils.clamp;local function float_eq(bX,bY)if bX==0 then return math.abs(bY)<1e-09 end;if bY==0 then return math.abs(bX)<1e-09 end;return math.abs(bX-bY)<math.max(math.abs(bX),math.abs(bY))*epsilon end;local function gp(gd)local bu=string.gsub(string.reverse(e('%.4f',gd)),'^0*%.?','')return bu==''and'0'or string.reverse(bu)end;local function gq(gr)if gj(gr)then return e('{x=%.3f,y=%.3f,z=%.3f}',gr.x,gr.y,gr.z)end;if gf(gr)and not getmetatable(gr)then local gs={}local gt=next(gr)if type(gt)=='nil'or gt==1 then gs=gr else for bs,bt in pairs(gr)do local e2=gq(bt)if type(bs)=='number'then table.insert(gs,e('[%s]=%s',bs,e2))else table.insert(gs,e('%s=%s',bs,e2))end end end;return e('{%s}',table.concat(gs,','))end;if gh(gr)then return e("'%s'",gr:gsub("'",[[\']]))end;return tostring(gr)end;local gu={}gu.__index=gu;gu.__tostring=function(gr,gv)local gw={}for bs in pairs(gr)do table.insert(gw,bs)end;table.sort(gw)local gs={}for _,bs in ipairs(gw)do local e2=gq(gr[bs])if type(bs)=='number'then table.insert(gs,e('[%s]=%s',bs,e2))else table.insert(gs,e('%s=%s',bs,e2))end end;if gv then return e('%s%s',gv,table.concat(gs,',\n'..gv))end;return e('{%s}',table.concat(gs,','))end;gu.__eq=function(gx,gy)return gx.planetarySystemId==gy.planetarySystemId and gx.bodyId==gy.bodyId and float_eq(gx.radius,gy.radius)and float_eq(gx.center.x,gy.center.x)and float_eq(gx.center.y,gy.center.y)and float_eq(gx.center.z,gy.center.z)and float_eq(gx.GM,gy.GM)end;local function gz(c8,c9,gA,b_,gB)assert(ge(c8),'Argument 1 (planetarySystemId) must be a number:'..type(c8))assert(ge(c9),'Argument 2 (bodyId) must be a number:'..type(c9))assert(ge(gA),'Argument 3 (radius) must be a number:'..type(gA))assert(gf(b_),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(b_))assert(ge(gB),'Argument 5 (GM) must be a number:'..type(gB))return setmetatable({planetarySystemId=tonumber(c8),bodyId=tonumber(c9),radius=tonumber(gA),center=vec3(b_),GM=tonumber(gB)},gu)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gC)return e('::pos{%d,%d,%s,%s,%s}',gC.systemId,gC.bodyId,gp(gC.latitude*gn),gp(gC.longitude*gn),gp(gC.altitude))end;MapPosition.__eq=function(gx,gy)return gx.bodyId==gy.bodyId and gx.systemId==gy.systemId and float_eq(gx.latitude,gy.latitude)and float_eq(gx.altitude,gy.altitude)and(float_eq(gx.longitude,gy.longitude)or float_eq(gx.latitude,math.pi/2)or float_eq(gx.latitude,-math.pi/2))end;local function gD(gE,c9,c3,c4,c2)local c8=gE;if gh(gE)and not c4 and not c2 and not c9 and not c3 then c8,c9,c3,c4,c2=string.match(gE,c7)assert(c8,'Argument 1 (position string) is malformed.')else assert(ge(c8),'Argument 1 (systemId) must be a number:'..type(c8))assert(ge(c9),'Argument 2 (bodyId) must be a number:'..type(c9))assert(ge(c3),'Argument 3 (latitude) must be in degrees:'..type(c3))assert(ge(c4),'Argument 4 (longitude) must be in degrees:'..type(c4))assert(ge(c2),'Argument 5 (altitude) must be in meters:'..type(c2))end;c8=tonumber(c8)c9=tonumber(c9)c3=tonumber(c3)c4=tonumber(c4)c2=tonumber(c2)if c9==0 then return setmetatable({latitude=c3,longitude=c4,altitude=c2,bodyId=c9,systemId=c8},MapPosition)end;return setmetatable({latitude=gm*go(c3,-90,90),longitude=gm*(c4%360),altitude=c2,bodyId=c9,systemId=c8},MapPosition)end;local gF={}gF.__index=gF;gF.__tostring=function(gr,gv)local gG=gv and gv..'  'local gH={}local gw={}for bs in pairs(gr)do table.insert(gw,bs)end;table.sort(gw)for _,gI in ipairs(gw)do bdy=gr[gI]local gJ=gu.__tostring(bdy,gG)if gv then table.insert(gH,e('[%s]={\n%s\n%s}',gI,gJ,gv))else table.insert(gH,e('  [%s]=%s',gI,gJ))end end;if gv then return e('\n%s%s%s',gv,table.concat(gH,',\n'..gv),gv)end;return e('{\n%s\n}',table.concat(gH,',\n'))end;local function gK(gL)local b2={}local pid;for _,bt in pairs(gL)do local cf=bt.planetarySystemId;if type(cf)~='number'then error('Invalid planetary system ID: '..tostring(cf))elseif pid and cf~=pid then error('Mismatch planetary system IDs: '..cf..' and '..pid)end;local gM=bt.bodyId;if type(gM)~='number'then error('Invalid body ID: '..tostring(gM))elseif b2[gM]then error('Duplicate body ID: '..tostring(gM))end;setmetatable(bt.center,getmetatable(vec3.unit_x))b2[gM]=setmetatable(bt,gu)pid=cf end;return setmetatable(b2,gF)end;b7={}local function gN(gL)return setmetatable({galaxyAtlas=gL or{}},b7)end;b7.__index=function(gg,i)if type(i)=='number'then local system=gg.galaxyAtlas[i]return gK(system)end;return rawget(b7,i)end;b7.__pairs=function(gr)return function(gg,bs)local gO,nv=next(gg,bs)return gO,nv and gK(nv)end,gr.galaxyAtlas,nil end;b7.__tostring=function(gr)local gP={}for _,gQ in pairs(gr or{})do local gR=gQ:getPlanetarySystemId()local gS=gF.__tostring(gQ,'    ')table.insert(gP,e('  [%s]={%s\n  }',gR,gS))end;return e('{\n%s\n}\n',table.concat(gP,',\n'))end;b7.BodyParameters=gz;b7.MapPosition=gD;b7.PlanetarySystem=gK;function b7.createBodyParameters(gT,c9,gU,gV,gW,gX,gY)assert(ge(gT),'Argument 1 (planetarySystemId) must be a number:'..type(gT))assert(ge(c9),'Argument 2 (bodyId) must be a number:'..type(c9))assert(ge(gU),'Argument 3 (surfaceArea) must be a number:'..type(gU))assert(gf(gV),'Argument 4 (aPosition) must be an array or vec3:'..type(gV))assert(gf(gW),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gW))assert(ge(gX),'Argument 6 (altitude) must be in meters:'..type(gX))assert(ge(gY),'Argument 7 (gravityAtPosition) must be number:'..type(gY))local gA=math.sqrt(gU/4/math.pi)local ae=gA+gX;local gZ=vec3(gV)+ae*vec3(gW)local gB=gY*ae*ae;return gz(gT,c9,gA,gZ,gB)end;b7.isMapPosition=gk;function b7:getPlanetarySystem(gE)if i==nil then i=0 end;if nv==nil then nv=0 end;local gT=gE;if gk(gE)then gT=gE.systemId end;if type(gT)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gF then system=gK(system)end;return system end end end;function gF:castIntersections(g_,fr,h0,h1)local h0=h0 or function(f6)return 1.05*f6.radius end;local h2={}if h1 then for _,i in ipairs(h1)do h2[i]=self[i]end else h1={}for bs,f6 in pairs(self)do table.insert(h1,bs)h2[bs]=f6 end end;local function h3(h4,h5)local h6=h2[h4].center-g_;local h7=h2[h5].center-g_;return h6:len()<h7:len()end;table.sort(h1,h3)local h8=fr:normalize()for i,cf in ipairs(h1)do local f6=h2[cf]local h9=f6.center-g_;local gA=h0(f6)local ha=h9:dot(h8)local hb=ha^2-(h9:len2()-gA^2)if hb>=0 then local hc=math.sqrt(hb)local f4=ha+hc;local f5=ha-hc;if f5>0 then return f6,f4,f5 elseif f4>0 then return f6,f4,nil end end end;return nil,nil,nil end;function gF:closestBody(hd)assert(type(hd)=='table','Invalid coordinates.')local he,f6;local hf=vec3(hd)for _,hg in pairs(self)do local hh=(hg.center-hf):len2()if(not f6 or hh<he)and hg.name~="Space"then f6=hg;he=hh end end;return f6 end;function gF:convertToBodyIdAndWorldCoordinates(gE)local hi=gE;if gh(gE)then hi=gD(gE)end;if hi.bodyId==0 then return 0,vec3(hi.latitude,hi.longitude,hi.altitude)end;local hg=self:getBodyParameters(hi)if hg then return hi.bodyId,hg:convertToWorldCoordinates(hi)end end;function gF:getBodyParameters(gE)local c9=gE;if gk(gE)then c9=gE.bodyId end;assert(ge(c9),'Argument 1 (bodyId) must be a number:'..type(c9))return self[c9]end;function gF:getPlanetarySystemId()local _,bt=next(self)return bt and bt.planetarySystemId end;function gu:convertToMapPosition(b_)assert(gf(b_),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(b_))local c0=vec3(b_)if self.bodyId==0 then return setmetatable({latitude=c0.x,longitude=c0.y,altitude=c0.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c1=c0-self.center;local ae=c1:len()local c2=ae-self.radius;local c3=0;local c4=0;if not float_eq(ae,0)then local c5=math.atan(c1.y,c1.x)c4=c5>=0 and c5 or 2*math.pi+c5;c3=math.pi/2-math.acos(c1.z/ae)end;return setmetatable({latitude=c3,longitude=c4,altitude=c2,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gu:convertToWorldCoordinates(gE)local hi=gh(gE)and gD(gE)or gE;if hi.bodyId==0 then return vec3(hi.latitude,hi.longitude,hi.altitude)end;assert(gk(hi),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hi.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hi.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ca=math.cos(hi.latitude)return self.center+(self.radius+hi.altitude)*vec3(ca*math.cos(hi.longitude),ca*math.sin(hi.longitude),math.sin(hi.latitude))end;function gu:getAltitude(b_)return(vec3(b_)-self.center):len()-self.radius end;function gu:getDistance(b_)return(vec3(b_)-self.center):len()end;function gu:getGravity(b_)local hj=self.center-vec3(b_)local hk=hj:len2()return self.GM/hk*hj/math.sqrt(hk)end;return setmetatable(b7,{__call=function(_,...)return gN(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gh(gi)return type(gi)=='string'end;local function gf(gg)return type(gg)=='table'end;local function float_eq(bX,bY)if bX==0 then return math.abs(bY)<1e-09 end;if bY==0 then return math.abs(bX)<1e-09 end;return math.abs(bX-bY)<math.max(math.abs(bX),math.abs(bY))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c2)assert(self.body)local ae=c2+self.body.radius;if not float_eq(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gE,bg)assert(self.body)assert(gf(gE)or gh(gE))assert(gf(bg))local c6=(gh(gE)or PlanetRef.isMapPosition(gE))and self.body:convertToWorldCoordinates(gE)or vec3(gE)local bt=vec3(bg)local hl=c6-self.body.center;local h7=bt:len2()local hm=hl:len()local hn=self.body.GM;local ho=((h7-hn/hm)*hl-hl:dot(bt)*bt)/hn;local bX=hn/(2*hn/hm-h7)local hp=ho:len()local h8=ho:normalize()local hq=bX*(1-hp)local hr=bX*(1+hp)local hs=hq*h8+self.body.center;local ht=hp<=1 and-hr*h8+self.body.center or nil;local hu=math.sqrt(bX*hn*(1-hp*hp))local hv=ht and 2*math.pi*math.sqrt(bX^3/hn)local hw=math.acos(ho:dot(hl)/(hp*hm))if hl:dot(bt)<0 then hw=-(hw-2*math.pi)end;local hx=math.acos((math.cos(hw)+hp)/(1+hp*math.cos(hw)))local hy=hx;if hy<0 then hy=hy+2*math.pi end;local hz=hy-hp*math.sin(hy)local hA=0;local hB=0;local hC=0;if hv~=nil then hA=hz/(2*math.pi/hv)hB=hv-hA;hC=hB+hv/2;if hw-math.pi>0 then hB=hA;hC=hB+hv/2 end;if hC>hv then hC=hC-hv end end;return{periapsis={position=hs,speed=hu/hq,circularOrbitSpeed=math.sqrt(hn/hq),altitude=hq-self.body.radius},apoapsis=ht and{position=ht,speed=hu/hr,circularOrbitSpeed=math.sqrt(hn/hr),altitude=hr-self.body.radius},currentVelocity=bt,currentPosition=c6,eccentricity=hp,period=hv,eccentricAnomaly=hx,meanAnomaly=hz,timeToPeriapsis=hB,timeToApoapsis=hC}end;local function hD(hE)local hg=PlanetRef.BodyParameters(hE.planetarySystemId,hE.bodyId,hE.radius,hE.center,hE.GM)return setmetatable({body=hg},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hD(...)end})end;function Kinematics()local b9={}local hF=30000000/3600;local hG=hF*hF;local hH=100;local function hI(bt)return 1/math.sqrt(1-bt*bt/hG)end;function b9.computeAccelerationTime(hJ,hK,hL)local hM=hF*math.asin(hJ/hF)return(hF*math.asin(hL/hF)-hM)/hK end;function b9.computeDistanceAndTime(hJ,hL,hN,hO,hP,hQ)hP=hP or 0;hQ=hQ or 0;local hR=hJ<=hL;local hS=hO*(hR and 1 or-1)/hN;local hT=-hQ/hN;local hU=hS+hT;if hR and hU<=0 or not hR and hU>=0 then return-1,-1 end;local hV,hW=0,0;if hS~=0 and hP>0 then local hM=math.asin(hJ/hF)local hX=math.pi*(hS/2+hT)local hY=hS*hP;local hZ=hF*math.pi;local bt=function(gg)local cL=(hX*gg-hY*math.sin(math.pi*gg/2/hP)+hZ*hM)/hZ;local h_=math.tan(cL)return hF*h_/math.sqrt(h_*h_+1)end;local i0=hR and function(gi)return gi>=hL end or function(gi)return gi<=hL end;hW=2*hP;if i0(bt(hW))then local i1=0;while math.abs(hW-i1)>0.5 do local gg=(hW+i1)/2;if i0(bt(gg))then hW=gg else i1=gg end end end;local i2=hJ;local i3=hW/hH;for i4=1,hH do local bI=bt(i4*i3)hV=hV+(bI+i2)*i3/2;i2=bI end;if hW<2*hP then return hV,hW end;hJ=i2 end;local hM=hF*math.asin(hJ/hF)local bv=(hF*math.asin(hL/hF)-hM)/hU;local i5=hG*math.cos(hM/hF)/hU;local ae=i5-hG*math.cos((hU*bv+hM)/hF)/hU;return ae+hV,bv+hW end;function b9.computeTravelTime(hJ,hK,ae)if ae==0 then return 0 end;if hK>0 then local hM=hF*math.asin(hJ/hF)local i5=hG*math.cos(hM/hF)/hK;return(hF*math.acos(hK*(i5-ae)/hG)-hM)/hK end;if hJ==0 then return-1 end;assert(hJ>0,'Acceleration and initial speed are both zero.')return ae/hJ end;function b9.lorentz(bt)return hI(bt)end;return b9 end;function safeZone(i6)local gA=500000;local i7,i8,i9=math.huge;local ia=false;local ib=vec3({13771471,7435803,-128971})local ic=18000000;i7=vec3(i6):dist(ib)if i7<ic then return true,math.abs(i7-ic),"Safe Zone",0 end;i8=vec3(i6):dist(vec3(planet.center))if i8<gA then ia=true end;if math.abs(i8-gA)<math.abs(i7-ic)then return ia,math.abs(i8-gA),planet.name,planet.bodyId else return ia,math.abs(i7-ic),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.341;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(id)if dbHud_1 then if not a9 then for bs,bt in pairs(b)do dbHud_1.setStringValue(bt,g(_G[bt]))if id and dbHud_2 then dbHud_2.setStringValue(bt,g(_G[bt]))end end;for bs,bt in pairs(a)do dbHud_1.setStringValue(bt,g(_G[bt]))if id and dbHud_2 then dbHud_2.setStringValue(bt,g(_G[bt]))end end;c("Saved Variables to Datacore")if id and dbHud_2 then V="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bD=j()if door and(bD>0 or bD==0 and ap<10000)then for _,bt in pairs(door)do bt.toggle()end end;if switch then for _,bt in pairs(switch)do bt.toggle()end end;if forcefield and(bD>0 or bD==0 and ap<10000)then for _,bt in pairs(forcefield)do bt.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(ie)if ie=="tenthSecond"then if j()>0 and j()<0.1 and not InSpaceRange and not EngagedSpace and not Reentry then InSpaceRange=true;EngagedSpace=true;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then WaitingToThrottle=true;Nav.control.cancelCurrentControlMasterMode()C=true end elseif InSpaceRange and EngagedSpace and WaitingToThrottle then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()C=false end;WaitingToThrottle=false elseif InSpaceRange and(j()>=0.1 or j()==0)then InSpaceRange=false;EngagedSpace=false;WaitingToThrottle=false end;if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then y=1;Nav.control.cancelCurrentControlMasterMode()C=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local ig=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if ig and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dn,dp=getDistanceDisplayString(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dn..'", "unit":"'..dp..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dn,dp=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dn..'", "unit":"'..dp..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dn,dp=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dn..'", "unit":"'..dp..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dn,dp=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dn)..'", "unit":"'..dp..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ie=="oneSecond"then am=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cj={}local dx=GetFlightStyle()DrawOdometer(cj,a7,TotalDistanceTravelled,dx,a8)if ShouldCheckDamage then CheckDamage(cj)end;ag=table.concat(cj,"")collectgarbage("collect")elseif ie=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bu=json.decode(dbHud_1.getStringValue("SavedLocations"))if bu~=nil then _G["SavedLocations"]=bu;local ch=-1;local cd;for bs,bt in pairs(SavedLocations)do if bt.name and bt.name=="SatNav Location"then ch=bs;break end end;if ch~=-1 then cd=SavedLocations[ch]ch=-1;for bs,bt in pairs(b2[0])do if bt.name and bt.name=="SatNav Location"then ch=bs;break end end;if ch>-1 then b2[0][ch]=cd end;UpdateAtlasLocationsList()V=cd.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ie=="msgTick"then local cj={}DisplayMessage(cj,"empty")V="empty"unit.stopTimer("msgTick")ad=3 elseif ie=="animateTick"then bd=true;bc=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif ie=="hudTick"then local cj={}HUDPrologue(cj)if showHud then UpdateHud(cj)else DisplayOrbitScreen(cj)DrawWarnings(cj)end;HUDEpilogue(cj)cj[#cj+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if V~="empty"then DisplayMessage(cj,V)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cj)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cj)if screen_1.getMouseState()==1 then CheckButtons()end;cj[#cj+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)elseif system.isViewLocked()==0 then if o()==1 and U then SetButtonContains()DrawButtons(cj)if not bc and not bd then local ih=table.concat(cj,"")cj={}cj[#cj+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cj[#cj+1]=b3;cj[#cj+1]=ih;cj[#cj+1]="</body>"bc=true;cj[#cj+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cj,"")system.setScreen(content)elseif bd then local ih=table.concat(cj,"")cj={}cj[#cj+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cj[#cj+1]=b3;cj[#cj+1]=ih;cj[#cj+1]="</body>"end;if not bc then cj[#cj+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end else CheckButtons()end else if not U and o()==0 then CheckButtons()if ae>DeadZone then DrawCursorLine(cj)end else SetButtonContains()DrawButtons(cj)end;cj[#cj+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end;cj[#cj+1]=[[</svg></body>]]content=table.concat(cj,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ie=="apTick"then bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ao=j()>0;local bv=system.getTime()local ii=bv-bn;bn=bv;local cm=vec3(core.getConstructWorldOrientationForward())local cn=vec3(core.getConstructWorldOrientationRight())local ij=vec3(core.getConstructWorldOrientationUp())local co=vec3(core.getWorldVertical())local ik=vec3(core.getConstructWorldPos())local il=core.getVelocity()local dz=getRoll(co,cm,cn)local dA=dz/180*math.pi;local dB=math.cos(dA)local dC=math.sin(dA)local cp=getPitch(co,cm,cn)local im=getPitch(co,cm,cn*dB+ij*dC)local io=-math.deg(cG(ij,bg,cm))local ip=math.deg(cG(cn,bg,cm))bm=ao and io<-YawStallAngle or io>YawStallAngle or ip<-PitchStallAngle or ip>PitchStallAngle;bk=system.getMouseDeltaX()bl=system.getMouseDeltaY()if InvertMouse and not U then bl=-bl end;O=0;S=0;N=0;bg=vec3(core.getWorldVelocity())bh=vec3(bg):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bg)al=hoverDetectGround()local bF=planet:getGravity(core.getConstructWorldPos()):len()*n()bo=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]v,w,x,_=safeZone(ik)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and U then if not bc then ab=ab+bk;ac=ac+bl end else ab=0;ac=0 end else ab=ab+bk;ac=ac+bl;ae=math.sqrt(ab*ab+ac*ac)if not U and o()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then O=O-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then O=O-(ab+DeadZone)*MouseXSensitivity else O=0 end;if ac>0 and ac>DeadZone then N=N-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then N=N-(ac+DeadZone)*MouseYSensitivity else N=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;N=(-utils.smoothstep(bl,-100,100)+0.5)*2*J;O=(-utils.smoothstep(bk,-100,100)+0.5)*2*K else ab=0;ac=0 end end end;local iq=bh>8334;if bh>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not iq then V="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if not iq and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iq;if ao and j()>0.09 then if bh>bq/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bh<bq/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then R=1 else R=0 end;ap=core.getAltitude()if ap==0 then ap=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local ir=false;if CustomTarget~=nil then ir=AlignToWorldVector(CustomTarget.position-ik,0.01)else ir=AlignToWorldVector(vec3(bg),0.01)end;be=true;if ir and(math.abs(dz)<2 or math.abs(im)>85)and bh>=bq/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ai=false;ak=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bq))y=0 end elseif bh>H then AlignToWorldVector(vec3(bg),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bh>H then AlignToWorldVector(-vec3(bg))end end;if not ProgradeIsOn and ai then if j()==0 then I=true;BeginReentry()ai=false;ak=true else ai=false;ToggleAutopilot()end end;local e6=vec3(core.getWorldVertical())*-1;local e4=bg.x*e6.x+bg.y*e6.y+bg.z*e6.z;if ak and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bh*3.6>bq-100 and math.abs(e4)<20 and j()>=0.1 and(CustomTarget.position-ik):len()>2000+ap then ToggleAutopilot()ak=false end;if Autopilot and j()==0 and not ai then local is=AutopilotTargetCoords;local it=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iu=(CustomTarget.position-a6.center):normalize()local iv=iu:project_on_plane((a6.center-ik):normalize()):normalize()local iw=a6.center+iv*(a6.radius+AutopilotTargetOrbit)local ix=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if not TargetSet then if(ik-iw):len()<(ik-ix):len()then is=iw;AutopilotTargetCoords=is else is=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=is end;local cq=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)it=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;it=true;TargetSet=true;AutopilotRealigned=true;is=CustomTarget.position+(ik-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iu=(ik+bg*100000-a6.center):normalize()local iv=iu:project_on_plane((a6.center-ik):normalize()):normalize()if iv:len()<1 then iu=(ik+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()iv=iu:project_on_plane((a6.center-ik):normalize()):normalize()end;is=a6.center+iv*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=is;TargetSet=true;it=true;AutopilotRealigned=true;local cq=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)end end;AutopilotDistance=(vec3(is)-vec3(core.getConstructWorldPos())):len()local f3,f4,f5=b8:getPlanetarySystem(0):castIntersections(ik,bg:normalize(),function(f6)if f6.noAtmosphericDensityAltitude>0 then return f6.radius+f6.noAtmosphericDensityAltitude else return f6.radius+f6.surfaceMaxAltitude*1.5 end end)local f7=f4;if f5~=nil and f4~=nil then f7=math.min(f5,f4)end;if f7~=nil and f7<AutopilotDistance and f3.name==a6.name then AutopilotDistance=f7 end;local ir=true;local iy=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bg):normalize()*AutopilotDistance)):len()-a6.radius;local dn,dp=getDistanceDisplayString(iy)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dn..'", "unit":"'..dp..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)end;if bh>300 and AutopilotAccelerating then local dk=vec3(is)-vec3(core.getConstructWorldPos())local iz=utils.clamp(math.deg(cG(ij,bg:normalize(),dk:normalize()))*bh/500,-90,90)local iA=utils.clamp(math.deg(cG(cn,bg:normalize(),dk:normalize()))*bh/500,-90,90)if math.abs(iz)<20 and math.abs(iA)<20 then iz=iz*2;iA=iA*2 end;if math.abs(iz)<2 and math.abs(iA)<2 then iz=iz*2;iA=iA*2 end;local io=-math.deg(cG(ij,cm,bg:normalize()))local ip=-math.deg(cG(cn,cm,bg:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iA-ip)local iB=utils.clamp(apPitchPID:get(),-1,1)N=N+iB;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iz-io)local iC=utils.clamp(apYawPID:get(),-1,1)O=O+iC;it=true;if math.abs(iz)>2 or math.abs(iA)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iy<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(iy)end end;if not AutopilotCruising and not AutopilotBraking and not it then ir=AlignToWorldVector((is-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then ir=AlignToWorldVector(-vec3(bg):normalize())end;if AutopilotAccelerating then if not F then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true end;local fv=unit.getThrottle()if AtmoSpeedAssist then fv=y end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fv==0 and F then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;R=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)y=1 end;local _,iD=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dk,iE,iF;if CustomTarget~=nil then dk=CustomTarget.position-ik;iE=planet:getAltitude(CustomTarget.position)iF=math.sqrt(dk:len()^2-(ap-iE)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bh<50 then V="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bh<=iD and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cq=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iD=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bh<=iD then if CustomTarget~=nil then if bg:normalize():dot(dk:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cq=zeroConvertToMapPosition(a6,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)WaypointSet=true end else V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local cq=zeroConvertToMapPosition(a6,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V="Autopilot completed, orbit established"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fv=unit.getThrottle()if AtmoSpeedAssist then fv=y end;if fv>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if ir then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif ir then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not F then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cq=zeroConvertToMapPosition(a6,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)end;if T then be=true;local iA=0;local c6=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iG=c6-vec3(core.getConstructWorldPos())local iH=vec3(iG):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iI=vec3(iG):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(iH*iH+iI*iI)AlignToWorldVector(iG:normalize())local iJ=40;local iK=ae<iJ;local iL=100;local fZ=utils.clamp((ae-iJ)/2,10,iL)N=0;local ir=math.abs(O)<0.1;if ir and bh<fZ and not iK then BrakeIsOn=false;iA=-20 else BrakeIsOn=true;iA=0 end;local iM=0;if math.abs(iA-cp)>iM then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iA-cp)local iB=pitchPID:get()N=iB end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dM=unit.getClosestPlanetInfluence()>0;local iN=HoldAltitude-ap;local iO=500+bh;local iP=1;if AutoTakeoff then iP=utils.clamp(bh/100,0.1,1)end;local iA=(utils.smoothstep(iN,-iO,iO)-0.5)*2*MaxPitch*iP;if not Reentry and not ai and not VectorToTarget and cm:dot(bg:normalize())<0.99 then iA=(utils.smoothstep(iN,-iO*utils.clamp(20-19*j()*10,1,20),iO*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*iP end;if not AltitudeHold then iA=0 end;if LockPitch~=nil then if dM then iA=LockPitch else LockPitch=nil end end;be=true;local iQ=N;if Reentry then local ReentrySpeed=math.floor(bq)local iR,iS=b9.computeDistanceAndTime(bh,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local iT=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bh<=ReentrySpeed/3.6 and bh>ReentrySpeed/3.6-10 and math.abs(bg:normalize():dot(cm))>0.9 then Nav.control.cancelCurrentControlMasterMode()y=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(iR>-1 and iT<=iR or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not I then iA=-80;if j()>0.02 then V="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iA=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bq then I=false;Reentry=false;be=true end end end;if bh>H and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bg))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and j()>0.01 then local dk;if CustomTarget~=nil then dk=CustomTarget.position-vec3(core.getConstructWorldPos())else dk=a6.center-ik end;local ij=vec3(core.getConstructWorldOrientationUp())local iz=math.deg(cG(co:normalize(),bg,dk))*2;local iU=math.rad(math.abs(dz))if bh>minRollVelocity and j()>0.01 then local iV=utils.clamp(90-iA*2,-90,90)bo=utils.clamp(iz*2,-iV,iV)local iW=iz;iz=utils.clamp(utils.clamp(iz,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(iU)+4*(im-iA)*math.sin(math.rad(dz)),-YawStallAngle*0.85,YawStallAngle*0.85)iA=utils.clamp(utils.clamp(iA*math.cos(iU),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(iW)*math.sin(iU),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bo=0;iz=utils.clamp(iz,-YawStallAngle*0.85,YawStallAngle*0.85)end;local iX=io-iz;if not bm and bh>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(iX)local iC=utils.clamp(yawPID:get(),-1,1)O=O+iC elseif ao and al>-1 or bh<minRollVelocity then AlignToWorldVector(dk)elseif bm and j()>0.01 then if(io<-YawStallAngle or io>YawStallAngle)and j()>0.01 then AlignToWorldVector(bg)end;if(ip<-PitchStallAngle or ip>PitchStallAngle)and j()>0.01 then iA=utils.clamp(im-ip,im-PitchStallAngle*0.85,im+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local iE=planet:getAltitude(CustomTarget.position)local iT=math.sqrt(dk:len()^2-(ap-iE)^2)local iY=LastMaxBrakeInAtmo;if iY then iY=iY*utils.clamp(bh/100,0.1,1)*j()else iY=LastMaxBrake end;if j()<0.01 then iY=LastMaxBrake else end;local e4=bg.x*e6.x+bg.y*e6.y+bg.z*e6.z;local iZ=bg:len()-math.abs(e4)local i_=vec3(core.getWorldAirFrictionAcceleration())local j0=math.sqrt(i_:len()-i_:project_on(e6):len())*n()if bh>100 then a0,a1=b9.computeDistanceAndTime(bh,100,n(),0,0,iY+j0)local j1,j2=b9.computeDistanceAndTime(100,0,n(),0,0,iY/2)a0=a0+j1 else a0,a1=b9.computeDistanceAndTime(bh,0,n(),0,0,iY/2)end;StrongBrakes=true;if not aj and iT<=a0+bh*ii/2 and(bg:project_on_plane(co):normalize():dot(dk:project_on_plane(co):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(iZ<0.1 or iT<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<iT)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=iT end end;if bm and j()>0.01 and al==-1 and bh>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bg)iA=utils.clamp(im-ip,im-PitchStallAngle*0.85,im+PitchStallAngle*0.85)end;N=iQ;local fE=-1;local iM=0.1;if BrakeLanding then iA=0;local e4=bg.x*e6.x+bg.y*e6.y+bg.z*e6.z;local j3=false;local j4=30;if ba~=nil and ba>0 then local j0=0;local dF=utils.clamp(j(),0.4,2)local iY=LastMaxBrakeInAtmo*utils.clamp(bh/100,0.1,1)*dF;local j5=ba*dF+iY+j0-bF;local j6=iY+j0-bF;local j7=iY/2+j0-bF;local j8=bh-math.sqrt(math.abs(j7/2)*20/(0.5*n()))*utils.sign(j7)if j8<0 then j8=0 end;local j9;if bh>100 then local ja,_=b9.computeDistanceAndTime(bh,100,n(),0,0,iY)local jb,_=b9.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(iY))j9=ja+jb else j9=b9.computeDistanceAndTime(bh,0,n(),0,0,math.sqrt(iY))end;if j9<20 then BrakeIsOn=false else local jc=0;if j8>100 then local jd,_=b9.computeDistanceAndTime(j8,100,n(),0,0,j5)local je,_=b9.computeDistanceAndTime(100,0,n(),0,0,ba*dF+math.sqrt(iY)+j0-bF)jc=jd+je else jc,_=b9.computeDistanceAndTime(j8,0,n(),0,0,ba*dF+math.sqrt(iY)+j0-bF)end;jc=(jc+15+bh*ii)*1.1;local jf=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jf then local iE=planet:getAltitude(CustomTarget.position)local jg=ap-iE-100;local dk=CustomTarget.position-vec3(core.getConstructWorldPos())local iF=math.sqrt(dk:len()^2-(ap-iE)^2)if iF>100 then jf=false elseif jg<=jc or jc==-1 then BrakeIsOn=true;j3=true else BrakeIsOn=false;j3=true end end;if not jf and CalculateBrakeLandingSpeed then if jc>=j4 then BrakeIsOn=true else BrakeIsOn=false end;j3=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fE=al;if fE>-1 then be=autoRollPreference;if bh<1 or bg:normalize():dot(co)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bg:normalize():dot(-e6)<0.999 then BrakeIsOn=true elseif e4<-brakeLandingRate and not j3 then BrakeIsOn=true elseif not j3 then BrakeIsOn=false end end;if AutoTakeoff or aj then local f3,f5,f4=b8:getPlanetarySystem(0):castIntersections(ik,(AutopilotTargetCoords-ik):normalize(),function(f6)return f6.radius+f6.noAtmosphericDensityAltitude end)if math.abs(iA)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bh<H then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 elseif aj then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;BrakeIsOn=true end elseif aj and j()==0 and a6~=nil and(f3==nil or f3.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jh=hoverDetectGround()>-1;local ji=cp;if(VectorToTarget or aj)and not jh and bh>minRollVelocity and j()>0.01 then local iU=math.rad(math.abs(dz))ji=cp*math.abs(math.cos(iU))+ip*math.sin(iU)end;local jj=utils.clamp(iA-ji,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jj=utils.clamp(iA-ji,-85,MaxPitch)elseif j()<0.01 then jj=utils.clamp(iA-ji,-MaxPitch,MaxPitch)end;if math.abs(dz)<5 or VectorToTarget or BrakeLanding or jh or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jj)local iB=pitchPID:get()N=N+iB end end;W=orbit.eccentricity;if antigrav and not ExternalAGG and ap<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if AchieveOrbit then local jk=1000;if planet.name~="Space"then if planet.hasAtmosphere then jk=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jk=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jk=1000 end;local _,iD=bb(planet):escapeAndOrbitalSpeed((ik-planet.center):len()-planet.radius)be=true;local jl;if OrbitToTarget and CustomTarget~=nil then jl=(target.position-ik):normalize():project_on_plane(co):normalize()else jl=cm:project_on_plane(co):normalize()end;jl=jl*iD;jl=(jl+-co*(ap-jk)):normalize()*iD end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and C then y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)C=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not C then y=0;C=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jm=utils.clamp(M+N+system.getControlDeviceForwardInput(),-1,1)local jn=utils.clamp(P+S+system.getControlDeviceYawInput(),-1,1)local jo=utils.clamp(Q+O-system.getControlDeviceLeftRightInput(),-1,1)local jp=R;local jq=vec3(core.getWorldVertical())if jq==nil or jq:len()==0 then jq=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jr=vec3(core.getConstructWorldOrientationUp())local js=vec3(core.getConstructWorldOrientationForward())local jt=vec3(core.getConstructWorldOrientationRight())local ju=vec3(core.getWorldVelocity())local jv=vec3(core.getWorldVelocity()):normalize()local jw=getRoll(jq,js,jt)local jx=math.abs(jw)local jy=utils.sign(jw)local j=j()local jz=vec3(core.getWorldAngularVelocity())local jA=jm*pitchSpeedFactor*jt+jn*rollSpeedFactor*js+jo*yawSpeedFactor*jr;if jq:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local dz=getRoll(jq,js,jt)local dA=dz/180*math.pi;local dB=math.cos(dA)local dC=math.sin(dA)local im=getPitch(jq,js,jt*dB+jr*dC)if be==true and math.abs(bo-jw)>autoRollRollThreshold and jn==0 and math.abs(im)<85 then local jB=bo;local jC=autoRollFactor;if j==0 then jC=jC/4;bo=0;jB=0 end;if rollPID==nil then rollPID=pid.new(jC*0.01,0,jC*0.1)end;rollPID:inject(jB-jw)local jD=rollPID:get()jA=jA+jD*js end end;if jq:len()>0.01 and j>0.0 then local jE=20.0;if turnAssist==true and jx>jE and jm==0 and jo==0 then local jF=turnAssistFactor*0.1;local jG=turnAssistFactor*0.025;local jH=(jx-jE)/(180-jE)*180;local jI=0;if jH<90 then jI=jH/90 elseif jH<180 then jI=(180-jH)/90 end;jI=jI*jI;local jJ=-jy*jG*(1.0-jI)local jK=jF*jI;jA=jA+jK*jt+jJ*jr end end;local jL=1;local jM=0;local jN=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bq=utils.clamp(bq+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bq=utils.clamp(bq-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y-speedChangeLarge/100,-1,1),2)end end;z=0;local e4=-jq:dot(ju)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bq/3.6-ju:dot(js))local jO=throttlePID:get()B=utils.clamp(jO,-1,1)if B<y and j>0.005 then A=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(B,0.01,1))else A=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(ju:len()-bq/3.6)local jP=utils.clamp(brakePID:get(),0,1)if j>0 and e4<-80 or j>0.005 then z=jP end;if z>0 then if A and B==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else B=utils.clamp(B,0.01,1)end;local jQ=''local jR=vec3()local jS=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",jS,jM)local jT='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jT=jT..ExtraLongitudeTags end;local jU=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local jV=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jT,axisCommandId.longitudinal)local jW=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)jQ=jQ..' , '.."lateral airfoil , lateral ground "jR=jR+jW;if jR:len()>constants.epsilon then Nav:setEngineForceCommand(jQ,jR,jM,'','','',jN)end;Nav:setEngineForceCommand(jT,jV,jL)local jX='thrust analog vertical fueled 'local jY='thrust analog lateral fueled 'if ExtraLateralTags~="none"then jY=jY..ExtraLateralTags end;if ExtraVerticalTags~="none"then jX=jX..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jX,jS,jL)else Nav:setEngineForceCommand(jX,vec3(),jL)end;if LeftAmount~=0 then Nav:setEngineForceCommand(jY,jW,jL)else Nav:setEngineForceCommand(jY,vec3(),jL)end;if jp==0 then jp=z end;local jZ=-jp*(brakeSpeedFactor*ju+brakeFlatFactor*jv)Nav:setEngineForceCommand('brake',jZ)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;local jZ=-jp*(brakeSpeedFactor*ju+brakeFlatFactor*jv)Nav:setEngineForceCommand('brake',jZ)local jQ=''local jR=vec3()local j_=false;local jT='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jT=jT..ExtraLongitudeTags end;local jU=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jU==axisCommandType.byThrottle then local jV=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jT,axisCommandId.longitudinal)Nav:setEngineForceCommand(jT,jV,jL)elseif jU==axisCommandType.byTargetSpeed then local jV=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jQ=jQ..' , '..jT;jR=jR+jV;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then j_=true end end;local jY='thrust analog lateral 'if ExtraLateralTags~="none"then jY=jY..ExtraLateralTags end;local k0=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if k0==axisCommandType.byThrottle then local k1=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jY,axisCommandId.lateral)Nav:setEngineForceCommand(jY,k1,jL)elseif k0==axisCommandType.byTargetSpeed then local jW=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jQ=jQ..' , '..jY;jR=jR+jW end;local jX='thrust analog vertical 'if ExtraVerticalTags~="none"then jX=jX..ExtraVerticalTags end;local k2=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if k2==axisCommandType.byThrottle then local jS=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jX,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jX,jS,jL,'airfoil','ground','',jN)else Nav:setEngineForceCommand(jX,vec3(),jL)Nav:setEngineForceCommand('airfoil vertical',jS,jL,'airfoil','','',jN)Nav:setEngineForceCommand('ground vertical',jS,jL,'ground','','',jN)end elseif k2==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),jL)end;local k3=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jQ=jQ..' , '..jX;jR=jR+k3 end;local fZ=unit.getAxisCommandValue(0)if jR:len()>constants.epsilon then if R~=0 or j_ or math.abs(jv:dot(js))<0.8 or bg:len()>fZ/3.6 then jQ=jQ..', brake'end;Nav:setEngineForceCommand(jQ,jR,jM,'','','',jN)end end;local k4=torqueFactor*(jA-jz)local k5=vec3(core.getWorldAirFrictionAngularAcceleration())k4=k4-k5;Nav:setEngineTorqueCommand('torque',k4,jL,'airfoil','','',jN)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bI=vec3(core.getVelocity()):len()local k6=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local k7=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bI*3.6>k7*(1-k6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bI*3.6<k7*(1-k6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fv=unit.getThrottle()if AtmoSpeedAssist then fv=y*100 end;local fZ=fv/100;if j==0 then fZ=fZ*MaxGameVelocity;if bI>=fZ*(1-k6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bI<fZ*(1-k6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fZ=fZ*ReentrySpeed/3.6;if bI>=fZ*(1-k6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bI<fZ*(1-k6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bu=coroutine.resume(beginSetup)if bu then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(k8)if k8=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if(vBooster or hover)and al==-1 and(j()>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if L and not BrakeLanding then Nav.control.extendLandingGears()end else if L then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif k8=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif k8=="forward"then M=M-1 elseif k8=="backward"then M=M+1 elseif k8=="left"then P=P-1 elseif k8=="right"then P=P+1 elseif k8=="yawright"then Q=Q-1 elseif k8=="yawleft"then Q=Q+1 elseif k8=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif k8=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif k8=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif k8=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif k8=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif k8=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif k8=="option1"then IncrementAutopilotTargetIndex()G=false elseif k8=="option2"then DecrementAutopilotTargetIndex()G=false elseif k8=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;G=false;ToggleWidgets()elseif k8=="option4"then ToggleAutopilot()G=false elseif k8=="option5"then ToggleLockPitch()G=false elseif k8=="option6"then ToggleAltitudeHold()G=false elseif k8=="option7"then wipeSaveVariables()G=false elseif k8=="option8"then ToggleFollowMode()G=false elseif k8=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end;G=false elseif k8=="lshift"then if system.isViewLocked()==1 then U=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then U=true;bd=false;bc=false end elseif k8=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif k8=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif k8=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif k8=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()y=0 elseif k8=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif k8=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif k8=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(k8)if k8=="forward"then M=0 elseif k8=="backward"then M=0 elseif k8=="left"then P=0 elseif k8=="right"then P=0 elseif k8=="yawright"then Q=0 elseif k8=="yawleft"then Q=0 elseif k8=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif k8=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif k8=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif k8=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif k8=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif k8=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif k8=="lshift"then if system.isViewLocked()==1 then U=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then U=false;bd=false;bc=false end elseif k8=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif k8=="lalt"then if o()==0 and freeLookToggle then if G then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else G=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(k8)if k8=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif k8=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif k8=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif k8=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dq)local i;local k9="/commands /setname /G /agg /addlocation /copydatabank"local ka,kb=nil,nil;local kc="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dq," ")ka=dq;if i~=nil then ka=string.sub(dq,0,i-1)kb=string.sub(dq,i+1)elseif not string.find(k9,ka)then for fV in string.gmatch(kc,"([^\n]+)")do c(fV)end;return end;if ka=="/setname"then if kb==nil or kb==""then V="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kb)else V="Select a saved target to rename first"end elseif ka=="/addlocation"then if kb==nil or kb==""or string.find(kb,"::")==nil then V="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kb,"::")local cc=string.sub(kb,1,i-2)local c6=string.sub(kb,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c7='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c8,c9,c3,c4,c2=string.match(c6,c7)local planet=b2[tonumber(c8)][tonumber(c9)]AddNewLocationByWaypoint(cc,planet,c6)V="Added "..cc.." to saved locations,\nplanet "..planet.name.." at "..c6;ad=5 elseif ka=="/agg"then if kb==nil or kb==""then V="Usage: /agg targetheight"return end;kb=tonumber(kb)if kb<1000 then kb=1000 end;AntigravTargetAltitude=kb;V="AGG Target Height set to "..kb elseif ka=="/G"then if kb==nil or kb==""then V="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kb=="dump"then for bs,bt in pairs(a)do if type(_G[bt])=="boolean"then if _G[bt]==true then c(bt.." true")else c(bt.." false")end elseif _G[bt]==nil then c(bt.." nil")else c(bt.." ".._G[bt])end end;return end;i=string.find(kb," ")local kd=string.sub(kb,0,i-1)local ke=string.sub(kb,i+1)for bs,bt in pairs(a)do if bt==kd then V="Variable "..kd.." changed to "..ke;local kf=type(_G[bt])if kf=="number"then ke=tonumber(ke)elseif kf=="boolean"then if string.lower(ke)=="true"then ke=true else ke=false end end;_G[bt]=ke;return end end;V="No such global variable: "..kd elseif ka=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else V="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
