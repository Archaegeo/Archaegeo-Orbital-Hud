name: ButtonsHud - ShadowMage v5.340 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Will VTOL on AutoTakeOff.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;OrbitTargetSet=false;OrbitTargetCoords=nil;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitRetriggerTarget=false;OrbitAchieved=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=SafeR;local t=SafeB;local u=SafeG;local v=false;local w=0;local x=""local y=0;local z=0;local A=false;local B=0;local C=false;local D=round(ResolutionX/2,0)local E=round(ResolutionY/2,0)local F=false;local G=true;local H=55;local I=false;local J=1;local K=1;local L=false;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=false;local U=false;local V="empty"local W=1;local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=false;local a5=false;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=j()>0;local ap=core.getAltitude()local aq=core.getElementIdList()local ar=system.getTime()local as=nil;local at=false;local au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]local av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bg=vec3(core.getWorldVelocity())local bh=vec3(bg):len()local bi=math.cos(YawStallAngle*constants.deg2rad)local bj=LandingGearGroundHeight;local bk=system.getMouseDeltaX()local bl=system.getMouseDeltaY()local bm=false;local bn=system.getTime()local bo=0;local bp=0;local bq=nil;local br=nil;local bs=nil;local bt=AtmoSpeedLimit;local bu=nil;local bv=0;local bw=0;local bx=0;local by=0;local bz=false;local bA=false;function LoadVariables()if dbHud_1 then local bB=dbHud_1.hasKey;if not useTheseSettings then for bC,bD in pairs(a)do if bB(bD)then local bE=f(dbHud_1.getStringValue(bD))if bE~=nil then c(bD.." "..dbHud_1.getStringValue(bD))_G[bD]=bE;aK=true end end end end;coroutine.yield()for bC,bD in pairs(b)do if bB(bD)then local bE=f(dbHud_1.getStringValue(bD))if bE~=nil then c(bD.." "..dbHud_1.getStringValue(bD))_G[bD]=bE;aK=true end end end;if useTheseSettings then V="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ad=5 elseif aK then V="Loaded Saved Variables (see Lua Chat Tab for list)"else V="No Saved Variables Found - Stand up / leave remote to save settings"end else V="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bF=system.getTime()if LastStartTime+180<bF then LastMaxBrakeInAtmo=0 end;if aK then D=round(ResolutionX/2,0)E=round(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference end;LastStartTime=bF;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then V="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;bi=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]bt=AtmoSpeedLimit end;function CalculateFuelVolume(bG,bH)if bG>bH then bH=bG end;if ContainerOptimization>0 then bH=bH-bH*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bH=bH-bH*FuelTankOptimization*0.05 end;return bH end;function ProcessElements()local bI=fuelX~=0 and fuelY~=0;for bC in pairs(aq)do local type=l(aq[bC])if type=="Landing Gear"then L=true end;if type=="Dynamic Core Unit"then local bJ=h(aq[bC])if bJ>10000 then b0=128 elseif bJ>1000 then b0=64 elseif bJ>150 then b0=32 end end;aR=aR+h(aq[bC])if bI and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bJ=h(aq[bC])local bK=m(aq[bC])local bG=0;local bL=system.getTime()if type=="Atmospheric Fuel Tank"then local bH=400;local bM=35.03;if bJ>10000 then bH=51200;bM=5480 elseif bJ>1300 then bH=6400;bM=988.67 elseif bJ>150 then bH=1600;bM=182.67 end;bG=bK-bM;if fuelTankHandlingAtmo>0 then bH=bH+bH*fuelTankHandlingAtmo*0.2 end;bH=CalculateFuelVolume(bG,bH)aO[#aO+1]={aq[bC],core.getElementNameById(aq[bC]),bH,bM,bG,bL}end;if type=="Rocket Fuel Tank"then local bH=320;local bM=173.42;if bJ>65000 then bH=40000;bM=25740 elseif bJ>6000 then bH=5120;bM=4720 elseif bJ>700 then bH=640;bM=886.72 end;bG=bK-bM;if fuelTankHandlingRocket>0 then bH=bH+bH*fuelTankHandlingRocket*0.1 end;bH=CalculateFuelVolume(bG,bH)aQ[#aQ+1]={aq[bC],core.getElementNameById(aq[bC]),bH,bM,bG,bL}end;if type=="Space Fuel Tank"then local bH=2400;local bM=182.67;if bJ>10000 then bH=76800;bM=5480 elseif bJ>1300 then bH=9600;bM=988.67 end;bG=bK-bM;if fuelTankHandlingSpace>0 then bH=bH+bH*fuelTankHandlingSpace*0.2 end;bH=CalculateFuelVolume(bG,bH)aP[#aP+1]={aq[bC],core.getElementNameById(aq[bC]),bH,bM,bG,bL}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a4=true else a5=true end end;local bN=j()if door and(bN>0 or bN==0 and ap<10000)then for _,bD in pairs(door)do bD.toggle()end end;if switch then for _,bD in pairs(switch)do local bO=bD.getId()local bP=core.getElementNameById(bO)if bP=="navBlinkSwitch"then bq=bD elseif bP=="navLightSwitch"then br=bD elseif bP=="headLightSwitch"then bs=bD else bD.toggle()end end end;if forcefield and(bN>0 or bN==0 and ap<10000)then for _,bD in pairs(forcefield)do bD.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if L then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bQ=AboveGroundLevel()if bQ~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not L then GearExtended=true end else BrakeIsOn=false end;if bj~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bj)if bj==0 and not L then GearExtended=true;BrakeIsOn=true end else bj=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bQ~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ao end;function ConvertResolutionX(bD)if ResolutionX==1920 then return bD else return round(ResolutionX*bD/1920,0)end end;function ConvertResolutionY(bD)if ResolutionY==1080 then return bD else return round(ResolutionY*bD/1080,0)end end;function RefreshLastMaxBrake(bR,bS)if bR==nil then bR=core.g()end;bR=round(bR,5)local bT=j()if bS~=nil and bS or(aN==nil or aN~=bR)then local bg=core.getVelocity()local bU=vec3(bg):len()local bV=f(unit.getData()).maxBrake;if bV~=nil and bV>0 and ao then bV=bV/utils.clamp(bU/100,0.1,1)bV=bV/bT;if bT>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bV)/2 else LastMaxBrakeInAtmo=bV end end end;if bV~=nil and bV>0 then LastMaxBrake=bV end;aN=bR end end;function MakeButton(bW,bX,bY,bZ,b_,c0,c1,c2,c3)local c4={enableName=bW,disableName=bX,width=bY,height=bZ,x=b_,y=c0,toggleVar=c1,toggleFunction=c2,drawCondition=c3,hovered=false}table.insert(aB,c4)return c4 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bC,bD in pairs(b2[0])do table.insert(AtlasOrdered,{name=bD.name,index=bC})end;local function c5(c6,c7)return c6.name<c7.name end;table.sort(AtlasOrdered,c5)end;function AddLocationsToAtlas()for bC,bD in pairs(SavedLocations)do table.insert(b2[0],bD)end;UpdateAtlasLocationsList()end;function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*epsilon end;function zeroConvertToMapPosition(ca,cb)local cc=vec3(cb)if ca.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=ca.planetarySystemId},MapPosition)end;local cd=cc-ca.center;local ae=cd:len()local ce=ae-ca.radius;local cf=0;local cg=0;if not float_eq(ae,0)then local ch=math.atan(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ae)end;return setmetatable({latitude=math.deg(cf),longitude=math.deg(cg),altitude=ce,bodyId=ca.bodyId,systemId=ca.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(ci)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..p..','..p..','..p..','..p..','..p..'}'local ck,cl,cf,cg,ce=string.match(ci,cj)if ck=="0"and cl=="0"then return vec3(tonumber(cf),tonumber(cg),tonumber(ce))end;cg=math.rad(cg)cf=math.rad(cf)local planet=b2[tonumber(ck)][tonumber(cl)]local cm=math.cos(cf)local cn=vec3(cm*math.cos(cg),cm*math.sin(cg),math.sin(cf))return planet.center+(planet.radius+ce)*cn end;function AddNewLocationByWaypoint(co,planet,ci)if dbHud_1 then local cp={}local position=zeroConvertToWorldCoordinates(ci)if planet.name=="Space"then cp={position=position,name=co,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bN=false;if planet.hasAtmosphere then bN=true else bN=false end;cp={position=position,name=co,atmosphere=bN,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cp;table.insert(b2[0],cp)UpdateAtlasLocationsList()else V="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bP=planet.name..". "..#SavedLocations;if radar_1 then local cq,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cq~=nil and cq~=""then bP=bP.." "..radar_1.getConstructName(cq)end end;local cp={}local bN=false;if planet.hasAtmosphere then bN=true end;cp={position=position,name=bP,atmosphere=bN,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cp;table.insert(b2[0],cp)UpdateAtlasLocationsList()V="Location saved as "..bP else V="Databank must be installed to save locations"end end;function UpdatePosition(cr)local cs=-1;local cp;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name==CustomTarget.name then cs=bC;break end end;if cs~=-1 then local ct;if cr~=nil then cp={position=SavedLocations[cs].position,name=cr,atmosphere=SavedLocations[cs].atmosphere,planetname=SavedLocations[cs].planetname,gravity=SavedLocations[cs].gravity}else cp={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cs].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cs]=cp;cs=-1;for bC,bD in pairs(b2[0])do if bD.name and bD.name==CustomTarget.name then cs=bC end end;if cs>-1 then b2[0][cs]=cp end;UpdateAtlasLocationsList()V=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else V="Name Not Found"end end;function ClearCurrentPosition()local cs=-1;for bC,bD in pairs(b2[0])do if bD.name and bD.name==CustomTarget.name then cs=bC end end;if cs>-1 then table.remove(b2[0],cs)end;cs=-1;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name==CustomTarget.name then V=bD.name.." saved location cleared"cs=bC;break end end;if cs~=-1 then table.remove(SavedLocations,cs)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cu)cu[#cu+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;function ToggleWidgets()if aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aA=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aA=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cv,cw,b_,c0,bY,bZ)if cv>b_ and cv<b_+bY and cw>c0 and cw<c0+bZ then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if OrbitAchieved then CancelIntoOrbit=false else CancelIntoOrbit=true end;IntoOrbit=false;bz=false;bx=nil;by=nil;OrbitTargetPlanet=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;CancelIntoOrbit=false;bz=false;bx=nil;orbitYaw=nil;by=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end else V="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local cz=vec3(core.getWorldVertical())local cA=getPitch(cz,cx,cy)LockPitch=cA;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bF=system.getTime()if bF-bp<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bp=-1;if AltitudeHold then return end end else bp=bF end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;T=false;BrakeLanding=false;Reentry=false;be=true;LockPitch=nil;if hoverDetectGround()==-1 or not ao or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bp>-1 then HoldAltitude=ap end;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bp>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end else be=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then T=not T;if T then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else V="Follow Mode only works with Remote controller"T=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local cB=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ap>100000 or ap==0 then Autopilot=true else ai=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;T=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;F=false;LockPitch=nil;WaypointSet=false else aj=true;ToggleAltitudeHold()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;F=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;be=autoRollPreference;ai=false;ak=false;aa=0 end end;function CheckDamage(cu)local cC=0;az=""local cD=aR;local cE=0;local cF=0;local cG=0;local cH=0;local cI=""for bC in pairs(aq)do local bJ=0;local cJ=0;cJ=h(aq[bC])bJ=k(aq[bC])cE=cE+bJ;if bJ<cJ then if bJ==0 then cG=cG+1 else cF=cF+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bC]))local b_=position.x-b0;local c0=position.y-b0;local cK=position.z-b0;table.insert(aw,core.spawnArrowSticker(b_,c0,cK+1,"down"))table.insert(aw,core.spawnArrowSticker(b_,c0,cK+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(b_+1,c0,cK,"north"))table.insert(aw,core.spawnArrowSticker(b_+1,c0,cK,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(b_-1,c0,cK,"south"))table.insert(aw,core.spawnArrowSticker(b_-1,c0,cK,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(b_,c0-1,cK,"east"))table.insert(aw,core.spawnArrowSticker(b_,c0-1,cK,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(b_,c0+1,cK,"west"))table.insert(aw,core.spawnArrowSticker(b_,c0+1,cK,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bC])end elseif aS and#aw>0 and aw[11]==aq[bC]then for cL in pairs(aw)do core.deleteSticker(aw[cL])end;aw={}end end;cC=d(cE/cD*100)if cC<100 then cu[#cu+1]=[[<g class="pbright txt">]]cH=d(cC*2.55)cI=e("rgb(%d,%d,%d)",255-cH,cH,0)if cC<100 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cI,cC)if cG>0 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cI,cG,cF)elseif cF>0 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cI,cF)end end;cu[#cu+1]=[[<\g>]]end end;function DrawCursorLine(cu)local cM=d(utils.clamp(ae/(aE/4)*255,0,255))cu[#cu+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,d(s+0.5)+cM,d(u+0.5)-cM,d(t+0.5)-cM)end;function getPitch(cN,cO,c7)local cP=cN:cross(c7):normalize_inplace()local cA=math.acos(utils.clamp(cP:dot(-cO),-1,1))*constants.rad2deg;if cP:cross(-cO):dot(c7)<0 then cA=-cA end;return cA end;local cQ=math.atan;local function cR(cS,cT,cU)cT=cT:project_on_plane(cS)cU=cU:project_on_plane(cS)return cQ(cT:cross(cU):dot(cS),cT:dot(cU))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;T=false;F=false;ai=false;aj=false;I=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil else am=true end end;function wipeSaveVariables()if not dbHud_1 then V="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ad=5 else if aL then for bC,bD in pairs(a)do dbHud_1.setStringValue(bD,g(nil))end;for bC,bD in pairs(b)do if bD~="SavedLocations"then dbHud_1.setStringValue(bD,g(nil))end end;V="Databank wiped. New variables will save after re-enter seat and exit"ad=5;aL=false;aK=false;a9=true else V="Press ALT-7 again to confirm wipe of ALL data"aL=true end end end;function CheckButtons()for _,bD in pairs(aB)do if bD.hovered then if not bD.drawCondition or bD.drawCondition()then bD.toggleFunction()end;bD.hovered=false end end end;function SetButtonContains()local b_=ab+aE/2;local c0=ac+aF/2;for _,bD in pairs(aB)do bD.hovered=Contains(b_,c0,bD.x,bD.y,bD.width,bD.height)end end;function DrawButton(cu,cV,hover,b_,c0,cW,cX,cY,cZ,c_,d0)if type(c_)=="function"then c_=c_()end;if type(d0)=="function"then d0=d0()end;cu[#cu+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",b_,c0,cW,cX)if cV then cu[#cu+1]=e("%s'",cY)else cu[#cu+1]=cZ end;if hover then cu[#cu+1]=" style='stroke:white; stroke-width:2'"else cu[#cu+1]=" style='stroke:black; stroke-width:1'"end;cu[#cu+1]="></rect>"cu[#cu+1]=e("<text x='%f' y='%f' font-size='24' fill='",b_+cW/2,c0+cX/2+5)if cV then cu[#cu+1]="black"else cu[#cu+1]="white"end;cu[#cu+1]="' text-anchor='middle' font-family='Montserrat'>"if cV then cu[#cu+1]=e("%s</text>",c_)else cu[#cu+1]=e("%s</text>",d0)end end;function DrawButtons(cu)local d1="rgb(50,50,50)'"local d2="rgb(210,200,200)"local d3=DrawButton;for _,bD in pairs(aB)do local bX=bD.disableName;local bW=bD.enableName;if type(bX)=="function"then bX=bX()end;if type(bW)=="function"then bW=bW()end;if not bD.drawCondition or bD.drawCondition()then d3(cu,bD.toggleVar(),bD.hovered,bD.x,bD.y,bD.width,bD.height,d2,d1,bX,bW)end end end;function DrawTank(cu,a_,b_,d4,d5,d6,d7,d8)local d9=1;local da=2;local db=3;local dc=4;local dd=5;local de=6;local df=""local dg=0;local dh=fuelY;local di=fuelY+10;if o()==1 and not RemoteHud then dh=dh-50;di=di-50 end;cu[#cu+1]=[[<g class="pdim txtfuel">]]if d5=="ATMO"then df="atmofueltank"elseif d5=="SPACE"then df="spacefueltank"else df="rocketfueltank"end;dg=_G[df.."_size"]if#d6>0 then for i=1,#d6 do local bP=string.sub(d6[i][da],1,12)local dj=0;for cL=1,dg do if d6[i][da]==f(unit[df.."_"..cL].getData()).name then dj=cL;break end end;if a_ or d7[i]==nil or d8[i]==nil then local dk=0;local dl=0;local dm=0;local dn=0;local bL=system.getTime()if dj~=0 then d8[i]=f(unit[df.."_"..dj].getData()).percentage;d7[i]=f(unit[df.."_"..dj].getData()).timeLeft;if d7[i]=="n/a"then d7[i]=0 end else dm=m(d6[i][d9])-d6[i][dc]dk=d6[i][db]d8[i]=d(0.5+dm*100/dk)dl=d6[i][dd]dn=d6[i][de]if dl<=dm then d7[i]=0 else d7[i]=d(0.5+dm/((dl-dm)/(bL-dn)))end;d6[i][dd]=dm;d6[i][de]=bL end end;if bP==d4 then bP=e("%s %d",d5,i)end;if dj==0 then bP=bP.." *"end;local dp;if d7[i]==0 then dp="n/a"else dp=FormatTimeString(d7[i])end;if d8[i]~=nil then local cH=d(d8[i]*2.55)local cI=e("rgb(%d,%d,%d)",255-cH,cH,0)local dq=""if dp~="n/a"and d7[i]<120 or d8[i]<5 then if a_ then dq=[[class="red"]]end end;cu[#cu+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],b_,dh,dq,bP,b_,di,cI,d8[i],dp)dh=dh+30;di=di+30 end end end;cu[#cu+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bg)bg=vec3(bg)local cA=-math.deg(math.atan(bg.y,bg.z))+180;cA=cA-90;if cA<0 then cA=360+cA end;if cA>180 then cA=-180+cA-180 end;return-cA end;function getRelativeYaw(bg)bg=vec3(bg)local dr=math.deg(math.atan(bg.y,bg.x))-90;if dr<-180 then dr=360+dr end;return dr end;function AlignToWorldVector(ds,dt,du)if not ao or not bm or al~=-1 or bh<H then local dv=du;if dv==nil then dv=DampingMultiplier end;if dt==nil then dt=aD end;ds=vec3(ds):normalize()local dw=vec3(core.getConstructWorldOrientationForward())-ds;local dx=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationRight())*aC;local dy=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dx/2 end;if ay==0 then ay=dy/2 end;if math.abs(dx)<0.1 then O=O-dx*2 else O=O-(dx+(dx-ax)*dv)end;if math.abs(dy)<0.1 then N=N+dy*2 else N=N+dy+(dy-ay)*dv end;ax=dx;ay=dy;if math.abs(dx)<dt and math.abs(dy)<dt then return true end;return false elseif bm and al==-1 then ds=vec3(core.getWorldVelocity())local dv=du;if dv==nil then dv=DampingMultiplier end;if dt==nil then dt=aD end;ds=vec3(ds):normalize()local dw=vec3(core.getConstructWorldOrientationForward())-ds;local dx=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationRight())*aC;local dy=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dx/2 end;if ay==0 then ay=dy/2 end;if math.abs(dx)<0.1 then O=O-dx*5 else O=O-(dx+(dx-ax)*dv)end;if math.abs(dy)<0.1 then N=N+dy*5 else N=N+dy+(dy-ay)*dv end;ax=dx;ay=dy;if math.abs(dx)<dt and math.abs(dy)<dt then return true end;return false end end;function getAPEnableName()local bP=AutopilotTargetName;if bP==nil then local dz,dA=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())bP=CustomTarget.name.." "..dz..dA end;if bP==nil then bP="None"end;return"Engage Autopilot: "..bP end;function getAPDisableName()local bP=AutopilotTargetName;if bP==nil then bP=CustomTarget.name end;if bP==nil then bP="None"end;return"Disable Autopilot: "..bP end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then V="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then V="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not I then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then V="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;V="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dB,dC=getDistanceDisplayString(HoldAltitude)V="Beginning Re-entry.  Target speed: "..bt.." Target Altitude: "..dB..dC end;AutoTakeoff=false end;function SetupButtons()local dD=50;local dE=260;local dF=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dE,dD,aE/2-dE/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then V="Brakes in Toggle Mode"else V="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dE,dD,aE/2-dE/2-50-dF.width,aF/2-dD+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dE,dD,aE/2-dE/2+dF.width+50,aF/2-dD+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dG=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dG.height,dG.x+dG.width+30,dG.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dG.height,dG.x+dG.width+30,dG.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dG.height,dG.x-200-30,dG.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dD=60;dE=300;local b_=10;local c0=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dE,dD,b_,c0,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dE,dD,b_+dE+20,c0,function()return AltitudeHold end,ToggleAltitudeHold)c0=c0+dD+20;MakeButton("Engage Autoland","Disable Autoland",dE,dD,b_,c0,function()return AutoLanding end,ToggleAutoLanding)if VertTakeOffEngine then MakeButton("Engage Vertical Takeoff","Disable Vertical Takeoff",dE,dD,b_+dE+20,c0,function()return VertTakeOff end,ToggleAutoTakeoff)else MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dE,dD,b_+dE+20,c0,function()return AutoTakeoff end,ToggleAutoTakeoff)end;c0=c0+dD+20;MakeButton("Show Orbit Display","Hide Orbit Display",dE,dD,b_,c0,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then V="Orbit Display Enabled"else V="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dE,dD,b_+dE+20,c0,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)c0=c0+dD+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dE,dD,b_,c0,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dE,dD,b_+dE+20,c0,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)c0=c0+dD+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dE,dD,b_,c0,function()return T end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dE,dD,b_+dE+20,c0,function()return aS end,function()aS=not aS;if aS then V="Repair Arrows Enabled"else V="Repair Arrows Diabled"end end,function()return o()==1 end)c0=c0+dD+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dE,dD,b_,c0,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;c0=c0+dD+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dE*2,dD,b_,c0,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dH=Nav.axisCommandManager:getAxisCommandType(0)local dI="TRAVEL"if dH==1 then dI="CRUISE"end;if Autopilot then dI="AUTOPILOT"end;return dI end;function UpdateHud(cu)local ce=ap;local bg=core.getVelocity()local bU=vec3(bg):len()local cz=vec3(core.getWorldVertical())local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local dJ=vec3(core.getConstructWorldOrientationUp())local dK=getRoll(cz,cx,cy)local dL=dK/180*math.pi;local dM=math.cos(dL)local dN=math.sin(dL)local cA=getPitch(cz,cx,cy*dM+dJ*dN)local dO=dK;local dP=cA;local dQ=j()local dR=d(unit.getThrottle())local dS=bU*3.6;local dT=unit.getAxisCommandValue(0)local dU=ConvertResolutionX(1770)local dV=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dT=y;dR=y*100 end;local dI=GetFlightStyle()local dW="ROLL"local dX=unit.getClosestPlanetInfluence()>0;if dR==nil then dR=0 end;if not dX then if bU>5 then cA=getRelativePitch(bg)dK=getRelativeYaw(bg)else cA=0;dK=0 end;dW="YAW"end;if w>50000 and not ao then local dY;if w>200000 then dY=round(w/200000,2).." su"else dY=round(w/1000,1).." km"end;cu[#cu+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dU,dV,dY)end;cu[#cu+1]=ag;cu[#cu+1]=az;cu[#cu+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cu,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cu,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cu,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cu,ce)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dX then DrawRollLines(cu,centerX,centerY,dO,dW,dX)DrawArtificialHorizon(cu,dP,dO,centerX,centerY,dX,d(getRelativeYaw(bg)),bU)else DrawRollLines(cu,centerX,centerY,dK,dW,dX)DrawArtificialHorizon(cu,cA,dK,centerX,centerY,dX,d(dK),bU)end;DrawAltitudeDisplay(cu,ce,dX)DrawPrograde(cu,bg,bU,centerX,centerY)end end;DrawThrottle(cu,dI,dR,dT)DrawSpeed(cu,dS)DrawWarnings(cu)DisplayOrbitScreen(cu)if screen_2 then local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/b4;local c0=450+ci.y/b5;screen_2.moveContent(b6,(b_-80)/19.2,(c0-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cu)if not v then s=PvPR;u=PvPG;t=PvPB else s=SafeR;u=SafeG;t=SafeB end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local dZ=au;local d_=av;local e0=au;local e1=av;if IsInFreeLook()and not brightHud then dZ=[[rgb(]]..d(s*0.4+0.5)..","..d(u*0.4+0.5)..","..d(t*0.3+0.5)..[[)]]d_=[[rgb(]]..d(s*0.3+0.5)..","..d(u*0.3+0.5)..","..d(t*0.2+0.5)..[[)]]end;cu[#cu+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dZ,dZ,e0,e0,d_,d_,e1,e1,ResolutionX,ResolutionY)end;function HUDEpilogue(cu)cu[#cu+1]="</svg>"end;function DrawSpeed(cu,dS)local e2=throtPosY-10;local e3=throtPosX+10;cu[#cu+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e2=75 end;cu[#cu+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e3,e2,d(dS))end;function DrawOdometer(cu,a7,TotalDistanceTravelled,dI,a8,dQ)local e4=ConvertResolutionX(1240)local e5=ConvertResolutionY(55)local e6=e5+10;local dQ=j()local bR=core.g()local e7=0;local e8=0;local e9=0;RefreshLastMaxBrake(bR)if ao then e9=LastMaxBrakeInAtmo else e9=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local ea=vec3(core.getWorldAcceleration()):len()/9.80665;if bR>0.1 then e8=aM*bR;e7=maxThrust/bR end;cu[#cu+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e4=ConvertResolutionX(1120)e5=ConvertResolutionY(55)e6=e5+10 elseif ao then local eb=ConvertResolutionX(770)cu[#cu+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],eb,e5,eb,e6,dQ)end;cu[#cu+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e4,e5,e4,e6,bR/9.80665,e4,e5+20,e4,e6+20,ea)cu[#cu+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cu[#cu+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),e9/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dI)if bR>0.1 then cu[#cu+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e7/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e8/1000)else cu[#cu+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cu[#cu+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dI)end;cu[#cu+1]="</g>"end;function DrawThrottle(cu,dI,dR,dT)dR=math.floor(dR+0.5)local dh=throtPosY+10;local di=throtPosY+20;if o()==1 and not RemoteHud then dh=55;di=65 end;local ec="CRUISE"local unit="km/h"local ed=dT;if dI=="TRAVEL"or dI=="AUTOPILOT"then ec="THROT"unit="%"ed=dR;local ee="dim"if dR<0 then ee="red"end;cu[#cu+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ee,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dR),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cu[#cu+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,dh,ec,throtPosX+10,di,ed,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and A then dR=math.floor(B*100+0.5)local ee="red"if dR<0 then ee="red"end;cu[#cu+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ee,1-math.abs(dR),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cu[#cu+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,dh+40,"LIMIT",throtPosX+10,di+40,dR,"%")end;if ao and AtmoSpeedAssist or Reentry then cu[#cu+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dh-40,"LIMIT: ",bt.." km/h")elseif not ao and Autopilot then cu[#cu+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dh-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cu,ce)if ce<200000 and not ao or ce and ao then local ef=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local eg=0;if math.abs(ef)>1 then eg=45*math.log(math.abs(ef),10)if ef<0 then eg=-eg end end;cu[#cu+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(ef),d(eg))end end;function getHeading(cO)local eh=-vec3(core.getWorldVertical())cO=cO-cO:project_on(eh)local ei=vec3(0,0,1)ei=ei-ei:project_on(eh)local ej=ei:cross(eh)local eg=ei:angle_between(cO)*constants.rad2deg;if cO:dot(ej)<0 then eg=360-eg end;return eg end;function DrawRollLines(cu,centerX,centerY,dO,dW,dX)local ek=circleRad;local el=20;el=d(el)local em=d(dO)if dX then for i=-45,45,5 do local en=i;cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],en,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cu[#cu+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+ek+el-len,centerX,centerY+ek+el)end;cu[#cu+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+ek+el-35,dW,centerX,centerY+ek+el-25,em)cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dO,centerX,centerY)cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+ek+el-20,centerX+5,centerY+ek+el-20,centerX,centerY+ek+el-15)cu[#cu+1]="</g>"end;local dr=em;if dX then dr=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local eo=20;local ep=d(dr)local eq=0;local er=centerY+ek+el+20;local es=centerX;if dW~="YAW"then er=ConvertResolutionY(130)es=ConvertResolutionX(960)end;local et=[[<path class="txttick line" d="]]for i=d(ep-(eo+10)-ep%5+0.5),d(ep+eo+10+ep%5+0.5),5 do local b_=es+-i*5+dr*5;if i%10==0 then eq=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cu[#cu+1]=e([[
                            <text x="%f" y="%f">%d</text>]],b_+5,er-12,p)elseif i%5==0 then eq=5 end;if eq==10 then et=e([[%s M %f %f v %d]],et,b_,er-5,eq)else et=e([[%s M %f %f v %d]],et,b_,er-2.5,eq)end end;cu[#cu+1]=et..[["/>]]cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],es-5,er+10,es+5,er+10,es,er+5)if dX then dW="HDG"end;cu[#cu+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],es,er+25,ep,es,er+35,dW)end;function DrawArtificialHorizon(cu,dP,dO,centerX,centerY,dX,eu,bU)local ek=circleRad;local ev=d(ek*3/5)if ek>0 then local ew=d(dP)local len=0;local et=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dO,centerX,centerY)if not ao then et=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cu[#cu+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],ek-1,centerX,centerY)cu[#cu+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ew-30-ew%5+0.5),d(ew+30+ew%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c0=centerY+-i*5+dP*5;if len==30 then et=e([[%s M %d %f h %d]],et,centerX-ev-len,c0,len)if ao then cu[#cu+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dO,centerX,centerY,centerX-ev+10,c0,i)cu[#cu+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dO,centerX,centerY,centerX+ev-10,c0,i)if i==0 or i==180 or i==-180 then cu[#cu+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dO,centerX,centerY,centerX-ev+20,c0,ev*2-40)end else cu[#cu+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ev+10,c0,i)cu[#cu+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ev-10,c0,i)end;et=e([[%s M %d %f h %d]],et,centerX+ev,c0,len)else et=e([[%s M %d %f h %d]],et,centerX-ev-len,c0,len)et=e([[%s M %d %f h %d]],et,centerX+ev,c0,len)end end;cu[#cu+1]=et..[["/>]]local ex="PITCH"if not dX then ex="REL PITCH"end;if dP>90 and not ao then dP=90-(dP-90)elseif dP<-90 and not ao then dP=-90-(dP+90)end;if ek>200 then if ao then if bU>H then cu[#cu+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,eu)end;cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dO,centerX,centerY)else cu[#cu+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ev+25,centerY-5,centerX-ev+20,centerY,centerX-ev+25,centerY+5,centerX-ev+50,centerY+4,ew)cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ev-25,centerY-5,centerX+ev-20,centerY,centerX+ev-25,centerY+5,centerX+ev-30,centerY+4,ew)cu[#cu+1]="</g>"end;local ey=d(ek/3)cu[#cu+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ey,centerY,ek-ey)if not ao and dX then cu[#cu+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dO,centerX,centerY,centerX-ev+10,centerY,ev*2-20)end;cu[#cu+1]="</g>"if ek<200 then if ao and bU>H then cu[#cu+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ek,ex,centerX,centerY-ek+10,ew,centerX,centerY-15,"Yaw",centerX,centerY+20,eu)else cu[#cu+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ek,ex,centerX,centerY-ek+15,ew)end end end end;function DrawAltitudeDisplay(cu,ce,dX)local ez=altMeterX;local eA=altMeterY;local eB=78;local eC=19;local eD=AboveGroundLevel()if eD~=-1 then table.insert(cu,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ez+eB,eA+eC+20,eD))end;if dX and(ce<200000 and not ao or ce and ao)then table.insert(cu,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ez-1,eA-4,eB+2,eC+6,ez+1,eA-1,eB-4,eC))local cs=0;local eE=1;local eF=0;local eG=ce<0;local eH=9;if eG then eH=0 end;local ce=math.abs(ce)while cs<6 do local eI=11;local eJ=16;local eK=9;local eL=14;local dq="altsm"if cs>2 then eJ=eJ+3;eI=eI+2;eL=eL+2;eK=eK-6;dq="altbig"end;if eG then dq=dq.." red"end;local eM=ce/eE%10;local eN=d(eM)local eO=d((eN+1)%10)local eP=eF;if cs==0 then eP=eM-eN;if eG then eP=1-eP end end;if eG and(cs==0 or eF~=0)then local eQ=eO;eO=eN;eN=eQ end;local eR=eJ*(eP-1)local eS=eR+eJ;local b_=ez+eK+(6-cs)*eI;local c0=eA+eL;table.insert(cu,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dq,b_,c0+eR,eO,b_,c0+eS,eN))cs=cs+1;eE=eE*10;if eN==eH then eF=eP else eF=0 end end;table.insert(cu,[[</g></g>]])end end;function DrawPrograde(cu,bg,bU,centerX,centerY)if bU>5 and not ao or bU>H then local ek=circleRad;local eT=20;local eU=20;local eV=vec3(bg)local eW=getRelativePitch(eV)local eX=getRelativeYaw(eV)local eY=14;local eZ=eY/2;local e_=-eX/eU*ek;local f0=eW/eT*ek;local b_=centerX+e_;local c0=centerY+f0;local ae=math.sqrt(e_^2+f0^2)local f1=[[<circle
                cx="]]..b_..[["
                cy="]]..c0 ..[["
                r="]]..eZ/eY..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..b_..[["
                cy="]]..c0 ..[["
                r="]]..eZ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..b_-eY..[[,]]..c0 ..[[ h ]]..eZ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..b_+eZ..[[,]]..c0 ..[[ h ]]..eZ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..b_..[[,]]..c0-eY..[[ v ]]..eZ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<ek then cu[#cu+1]=f1 else local eg=math.atan(f0,e_)local f2=4;local f3=centerX+ek*math.cos(eg)local f4=centerY+ek*math.sin(eg)cu[#cu+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',eg*180/math.pi,f3,f4,f3-f2,f4-f2/2,f2*2,f2,f3+f2,f4-f2,f2,f2,-f2,f2)end;if not ao then eW=getRelativePitch(-eV)eX=getRelativeYaw(-eV)e_=-eX/eU*ek;f0=eW/eT*ek;b_=centerX+e_;c0=centerY+f0;ae=math.sqrt(e_^2+f0^2)if ae<ek then local f5=[[<circle
                        cx="]]..b_..[["
                        cy="]]..c0 ..[["
                        r="]]..eZ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..b_..[[,]]..c0-eY..[[ v ]]..eZ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..b_..[[,]]..c0 ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..b_..[[,]]..c0 ..[[)" />
                     <path
                        d="M ]]..b_-eZ..[[,]]..c0 ..[[ h ]]..eY..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..b_..[[,]]..c0 ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..b_..[[,]]..c0 ..[[)"/>]]cu[#cu+1]=f5 end end end end;function DrawWarnings(cu)cu[#cu+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cu[#cu+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cu[#cu+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cu[#cu+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cu[#cu+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f6=ConvertResolutionX(960)local f7=ConvertResolutionY(860)local f8=ConvertResolutionY(880)local f9=ConvertResolutionY(900)local fa=ConvertResolutionY(960)local fb=ConvertResolutionY(200)local fc=ConvertResolutionY(150)local fd=ConvertResolutionY(960)if o()==1 and not RemoteHud then f7=ConvertResolutionY(135)f8=ConvertResolutionY(155)f9=ConvertResolutionY(175)fb=ConvertResolutionY(115)fc=ConvertResolutionY(95)end;if BrakeIsOn then cu[#cu+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f6,f7)elseif z>0 then cu[#cu+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f6,f7,z)end;if ao and bm and hoverDetectGround()==-1 then cu[#cu+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f6,fb+50)end;if as then cu[#cu+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f6,fd)end;if GearExtended then if L then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f6,f8)else cu[#cu+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f6,f8)end;local dz,dA=getDistanceDisplayString(Nav:getTargetGroundAltitude())cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f6,f9,dz..dA)end;if Z then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f6,fa+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f6,fb+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cu[#cu+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f6,fb+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f6,fb+20,AutopilotStatus)elseif LockPitch~=nil then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f6,fb+20,d(LockPitch))elseif T then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f6,fb+20)elseif Reentry then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f6,fb+20)end;local fe,ff,fg=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bg:normalize(),function(fh)if fh.noAtmosphericDensityAltitude>0 then return fh.radius+fh.noAtmosphericDensityAltitude else return fh.radius+fh.surfaceMaxAltitude*1.5 end end)local fi=ff;if fg~=nil and ff~=nil then fi=math.min(fg,ff)end;if AltitudeHold then if AutoTakeoff then local dz,dA=getDistanceDisplayString(HoldAltitude)cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f6,fb,dz..dA)if BrakeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f6,fb+50)end else local dz,dA=getDistanceDisplayString2(HoldAltitude)cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f6,fb,dz..dA)end end;if VertTakeOff then if j()>0.1 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f6,fb)elseif j()<0.09 and j()>0.05 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f6,fb)elseif j()<0.05 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f6,fb,VertTargetPlanet.name)end end;if IntoOrbit then if bu~=nil then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f6,fb,bu)end end;if BrakeLanding then if StrongBrakes then cu[#cu+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f6,fb)else cu[#cu+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f6,fb)end end;if ProgradeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f6,fb)end;if RetrogradeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f6,fb)end;if TurnBurn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f6,fc)elseif fi~=nil and j()==0 then local dz,dA=getDistanceDisplayString(fi)local travelTime=b9.computeTravelTime(bh,0,fi)local fj="Collision"if fe.noAtmosphericDensityAltitude>0 then fj="Atmosphere"end;cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f6,fc,fe.name,fj,FormatTimeString(travelTime),dz..dA)end;if VectorToTarget then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f6,fb+30,VectorStatus)end;cu[#cu+1]="</g>"end;function DisplayOrbitScreen(cu)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fk=OrbitMapX;local fl=OrbitMapY;local fm=OrbitMapSize;local fn=4;fl=fl+fn;local fo=15;local b_=fk+fm+fk/2+fn;local c0=fl+fm/2+5+fn;local fp,fq,fr,fs;fp=fm/4;fs=0;cu[#cu+1]=[[<g class="pbright txtorb txtmid">]]cu[#cu+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fm+fk*2,fm+fl,fn,fn)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fr=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fp*2)fq=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fr*(1-orbit.eccentricity)fs=fp-orbit.periapsis.altitude/fr-planet.radius/fr;local ft=""if orbit.periapsis.altitude<=0 then ft='redout'end;cu[#cu+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ft,fk+fm/2+fs+fn,fl+fm/2+fn,fp,fq)cu[#cu+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fk+fm/2+fn,fl+fm/2+fn,planet.radius/fr)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cu[#cu+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b_-35,c0-5,fk+fm/2+fp+fs,c0-5)cu[#cu+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],b_,c0)c0=c0+fo;local dz,dA=getDistanceDisplayString(orbit.apoapsis.altitude)cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,dz..dA)c0=c0+fo;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,FormatTimeString(orbit.timeToApoapsis))c0=c0+fo;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,getSpeedDisplayString(orbit.apoapsis.speed))end;c0=fl+fm/2+5+fn;b_=fk-fk/2+10+fn;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cu[#cu+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b_+35,c0-5,fk+fm/2-fp+fs,c0-5)cu[#cu+1]=e([[<text x="%f" y="%f">Periapsis</text>]],b_,c0)c0=c0+fo;local dz,dA=getDistanceDisplayString(orbit.periapsis.altitude)cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,dz..dA)c0=c0+fo;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,FormatTimeString(orbit.timeToPeriapsis))c0=c0+fo;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],b_,c0,getSpeedDisplayString(orbit.periapsis.speed))end;cu[#cu+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fk+fm/2+fn,20+fn,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fu=orbit.timeToApoapsis/orbit.period*2*math.pi;local fv=fp*math.cos(fu)local fw=fq*math.sin(fu)cu[#cu+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fk+fm/2+fv+fs+fn,fl+fm/2+fw+fn)end;cu[#cu+1]=[[</g>]]end end;function getDistanceDisplayString(ae)local fx=ae>100000;local bE,dA=""if fx then bE,dA=round(ae/1000/200,1),"SU"elseif ae<1000 then bE,dA=round(ae,1),"m"else bE,dA=round(ae/1000,1),"Km"end;return bE,dA end;function getDistanceDisplayString2(ae)local fx=ae>100000;local bE,dA=""if fx then bE,dA=round(ae/1000/200,2)," SU"elseif ae<1000 then bE,dA=round(ae,2)," M"else bE,dA=round(ae/1000,2)," KM"end;return bE,dA end;function getSpeedDisplayString(bU)return d(round(bU*3.6,0)+0.5).." km/h"end;function FormatTimeString(fy)local fz=0;local fA=0;local fB=0;if fy<60 then fy=d(fy)elseif fy<3600 then fz=d(fy/60)fy=d(fy%60)elseif fy<86400 then fA=d(fy/3600)fz=d(fy%3600/60)else fB=d(fy/86400)fA=d(fy%86400/3600)end;if fB>0 then return fB.."d "..fA.."h "elseif fA>0 then return fA.."h "..fz.."m "elseif fz>0 then return fz.."m "..fy.."s"elseif fy>0 then return fy.."s"else return"0s"end end;function getMagnitudeInDirection(ds,fC)ds=vec3(ds)fC=vec3(fC):normalize()local bE=ds*fC;return bE.x+bE.y+bE.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local fD=AtlasOrdered[AutopilotTargetIndex].index;local fE=b2[0][fD]if fE.center then AutopilotTargetName=fE.name;a6=b8[0][fD]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fE;for _,bD in pairs(b8[0])do if bD.name==CustomTarget.planetname then a6=bD;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fD=AtlasOrdered[AutopilotTargetIndex].index;local fE=b2[0][fD]if fE.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fD=AtlasOrdered[AutopilotTargetIndex].index;local fE=b2[0][fD]if fE.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fF=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return fF end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bg=core.getWorldVelocity()local bU=vec3(bg):len()local fG=unit.getThrottle()/100;if AtmoSpeedAssist then fG=y end;local fH,fI=b9.computeDistanceAndTime(vec3(bg):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fG,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fJ;if not TurnBurn and bU>0 then _,fJ=GetAutopilotBrakeDistanceAndTime(bU)else _,fJ=GetAutopilotTBBrakeDistanceAndTime(bU)end;local fK=0;local fL=0;if AutopilotCruising or not Autopilot and bU>5 then fL=b9.computeTravelTime(bU,0,AutopilotDistance)elseif a0+fH<AutopilotDistance then fK=AutopilotDistance-(a0+fH)fL=b9.computeTravelTime(8333.0556,0,fK)else local fM=(AutopilotDistance-a0)/fH;fH=AutopilotDistance-a0;fI=fI*fM end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fL elseif AutopilotBraking then return fJ elseif AutopilotCruising then return fL+fJ else return fI+a1+fL end end;function GetAutopilotBrakeDistanceAndTime(bU)if not ao then RefreshLastMaxBrake()return b9.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bU)RefreshLastMaxBrake()return b9.computeDistanceAndTime(bU,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fN=-1;local fO=-1;if vBooster then fN=vBooster.distance()end;if hover then fO=hover.distance()end;if fN~=-1 and fO~=-1 then if fN<fO then return fN else return fO end elseif fN~=-1 then return fN elseif fO~=-1 then return fO else return-1 end end;function AboveGroundLevel()local fP=-1;local fQ=hoverDetectGround()if telemeter_1 then fP=telemeter_1.getDistance()end;if fQ~=-1 and fP~=-1 then if fQ<fP then return fQ else return fP end elseif fQ~=-1 then return fQ else return fP end end;function tablelength(fR)local fS=0;for _ in pairs(fR)do fS=fS+1 end;return fS end;function BeginProfile(fT)ProfileTimeStart=system.getTime()end;function EndProfile(fT)local fU=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fU;ProfileCount=ProfileCount+1;if fU>ProfileTimeMax then ProfileTimeMax=fU end;if fU<ProfileTimeMin then ProfileTimeMin=fU end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fV=ProfileTimeSum;local fW=ProfileTimeSum/ProfileCount;local fX=ProfileTimeMin;local fY=ProfileTimeMax;local fZ=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fV,fW,fX,fY,fZ))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local f_=radar_1.getEntries()local g0=radar_1.getData()local g1=ConvertResolutionX(1770)local g2=ConvertResolutionY(330)if#f_>0 then local target=g0:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ah=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;af=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g1,g2,#f_)local g3={}for bC,bD in pairs(f_)do if radar_1.hasMatchingTransponder(bD)==1 then table.insert(g3,bD)end end;if#g3>0 then local c0=ConvertResolutionY(15)local b_=ConvertResolutionX(1370)af=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,b_,c0)for bC,bD in pairs(g3)do c0=c0+20;af=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,b_,c0,radar_1.getConstructName(bD))end end else local g4;g4=g0:find('worksInEnvironment":false')if g4 then af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g1,g2)else af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g1,g2)end;if radarPanelID~=nil then ah=0;ToggleRadarPanel()end end end end;function DisplayMessage(cu,dz)if dz~="empty"then cu[#cu+1]=[[<text class="msg" x="50%%" y="310" >]]for g5 in string.gmatch(dz,"([^\n]+)")do cu[#cu+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g5)end;cu[#cu+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bL=system.getTime()local bg=vec3(core.getWorldVelocity())local dS=vec3(bg):len()local g6=bL-ar;if dS>1.38889 then dS=dS/1000;local g7=dS*(bL-ar)TotalDistanceTravelled=TotalDistanceTravelled+g7;a7=a7+g7 end;a8=a8+g6;TotalFlightTime=TotalFlightTime+g6;ar=bL end;function composeAxisAccelerationFromTargetSpeedV(g8,g9)local ga=vec3()local gb=vec3()if g8==axisCommandId.longitudinal then ga=vec3(core.getConstructOrientationForward())gb=vec3(core.getConstructWorldOrientationForward())elseif g8==axisCommandId.vertical then ga=vec3(core.getConstructOrientationUp())gb=vec3(core.getConstructWorldOrientationUp())elseif g8==axisCommandId.lateral then ga=vec3(core.getConstructOrientationRight())gb=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gc=vec3(core.getWorldGravity())local gd=gc:dot(gb)local ge=vec3(core.getWorldAirFrictionAcceleration())local gf=ge:dot(gb)local gg=vec3(core.getVelocity())local gh=gg:dot(ga)local gi=g9*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gi-gh)local gj=targetSpeedPID2:get()local gk=(gj-gf-gd)*gb;return gk end;function composeAxisAccelerationFromTargetSpeed(g8,g9)local ga=vec3()local gb=vec3()if g8==axisCommandId.longitudinal then ga=vec3(core.getConstructOrientationForward())gb=vec3(core.getConstructWorldOrientationForward())elseif g8==axisCommandId.vertical then ga=vec3(core.getConstructOrientationUp())gb=vec3(core.getConstructWorldOrientationUp())elseif g8==axisCommandId.lateral then ga=vec3(core.getConstructOrientationRight())gb=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gc=vec3(core.getWorldGravity())local gd=gc:dot(gb)local ge=vec3(core.getWorldAirFrictionAcceleration())local gf=ge:dot(gb)local gg=vec3(core.getVelocity())local gh=gg:dot(ga)local gi=g9*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gi-gh)local gj=targetSpeedPID:get()local gk=(gj-gf-gd)*gb;return gk end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bC,bD in pairs(b2[0])do if aG==nil or bD.center.x<aG then aG=bD.center.x end;if aH==nil or bD.center.x>aH then aH=bD.center.x end;if aI==nil or bD.center.y<aI then aI=bD.center.y end;if aJ==nil or bD.center.y>aJ then aJ=bD.center.y end end;b3=""local gl=1.1*(aH-aG)/1920;local gm=1.4*(aJ-aI)/1080;for bC,bD in pairs(b2[0])do local b_=960+bD.center.x/gl;local c0=540+bD.center.y/gm;b3=b3 ..'<circle cx="'..b_..'" cy="'..c0 ..'" r="'..bD.radius/gl*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bD.name,"Moon")and not string.match(bD.name,"Sanctuary")and not string.match(bD.name,"Space")then b3=b3 .."<text x='"..b_.."' y='"..c0+bD.radius/gl*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bD.name.."</text>"end end;local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/gl;local c0=540+ci.y/gm;b3=b3 ..'<circle cx="'..b_..'" cy="'..c0 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..b_.."' y='"..c0-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=gl;b5=gm;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local ci=vec3(core.getConstructWorldPos())local b_=960+ci.x/gl;local c0=540+ci.y/gm;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((b_-80)/19.20,(c0-80)/10.80,b3)end end;function PlanetRef()local function gn(go)return type(go)=='number'end;local function gp(go)return type(tonumber(go))=='number'end;local function gq(gr)return type(gr)=='table'end;local function gs(gt)return type(gt)=='string'end;local function gu(bD)return gq(bD)and gn(bD.x and bD.y and bD.z)end;local function gv(gw)return gq(gw)and gn(gw.latitude and gw.longitude and gw.altitude and gw.bodyId and gw.systemId)end;local gx=math.pi/180;local gy=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gz=utils.clamp;local function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*epsilon end;local function gA(go)local bE=string.gsub(string.reverse(e('%.4f',go)),'^0*%.?','')return bE==''and'0'or string.reverse(bE)end;local function gB(gC)if gu(gC)then return e('{x=%.3f,y=%.3f,z=%.3f}',gC.x,gC.y,gC.z)end;if gq(gC)and not getmetatable(gC)then local gD={}local gE=next(gC)if type(gE)=='nil'or gE==1 then gD=gC else for bC,bD in pairs(gC)do local ed=gB(bD)if type(bC)=='number'then table.insert(gD,e('[%s]=%s',bC,ed))else table.insert(gD,e('%s=%s',bC,ed))end end end;return e('{%s}',table.concat(gD,','))end;if gs(gC)then return e("'%s'",gC:gsub("'",[[\']]))end;return tostring(gC)end;local gF={}gF.__index=gF;gF.__tostring=function(gC,gG)local gH={}for bC in pairs(gC)do table.insert(gH,bC)end;table.sort(gH)local gD={}for _,bC in ipairs(gH)do local ed=gB(gC[bC])if type(bC)=='number'then table.insert(gD,e('[%s]=%s',bC,ed))else table.insert(gD,e('%s=%s',bC,ed))end end;if gG then return e('%s%s',gG,table.concat(gD,',\n'..gG))end;return e('{%s}',table.concat(gD,','))end;gF.__eq=function(gI,gJ)return gI.planetarySystemId==gJ.planetarySystemId and gI.bodyId==gJ.bodyId and float_eq(gI.radius,gJ.radius)and float_eq(gI.center.x,gJ.center.x)and float_eq(gI.center.y,gJ.center.y)and float_eq(gI.center.z,gJ.center.z)and float_eq(gI.GM,gJ.GM)end;local function gK(ck,cl,gL,cb,gM)assert(gp(ck),'Argument 1 (planetarySystemId) must be a number:'..type(ck))assert(gp(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gp(gL),'Argument 3 (radius) must be a number:'..type(gL))assert(gq(cb),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cb))assert(gp(gM),'Argument 5 (GM) must be a number:'..type(gM))return setmetatable({planetarySystemId=tonumber(ck),bodyId=tonumber(cl),radius=tonumber(gL),center=vec3(cb),GM=tonumber(gM)},gF)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gN)return e('::pos{%d,%d,%s,%s,%s}',gN.systemId,gN.bodyId,gA(gN.latitude*gy),gA(gN.longitude*gy),gA(gN.altitude))end;MapPosition.__eq=function(gI,gJ)return gI.bodyId==gJ.bodyId and gI.systemId==gJ.systemId and float_eq(gI.latitude,gJ.latitude)and float_eq(gI.altitude,gJ.altitude)and(float_eq(gI.longitude,gJ.longitude)or float_eq(gI.latitude,math.pi/2)or float_eq(gI.latitude,-math.pi/2))end;local function gO(gP,cl,cf,cg,ce)local ck=gP;if gs(gP)and not cg and not ce and not cl and not cf then ck,cl,cf,cg,ce=string.match(gP,cj)assert(ck,'Argument 1 (position string) is malformed.')else assert(gp(ck),'Argument 1 (systemId) must be a number:'..type(ck))assert(gp(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gp(cf),'Argument 3 (latitude) must be in degrees:'..type(cf))assert(gp(cg),'Argument 4 (longitude) must be in degrees:'..type(cg))assert(gp(ce),'Argument 5 (altitude) must be in meters:'..type(ce))end;ck=tonumber(ck)cl=tonumber(cl)cf=tonumber(cf)cg=tonumber(cg)ce=tonumber(ce)if cl==0 then return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=cl,systemId=ck},MapPosition)end;return setmetatable({latitude=gx*gz(cf,-90,90),longitude=gx*(cg%360),altitude=ce,bodyId=cl,systemId=ck},MapPosition)end;local gQ={}gQ.__index=gQ;gQ.__tostring=function(gC,gG)local gR=gG and gG..'  'local gS={}local gH={}for bC in pairs(gC)do table.insert(gH,bC)end;table.sort(gH)for _,gT in ipairs(gH)do bdy=gC[gT]local gU=gF.__tostring(bdy,gR)if gG then table.insert(gS,e('[%s]={\n%s\n%s}',gT,gU,gG))else table.insert(gS,e('  [%s]=%s',gT,gU))end end;if gG then return e('\n%s%s%s',gG,table.concat(gS,',\n'..gG),gG)end;return e('{\n%s\n}',table.concat(gS,',\n'))end;local function gV(gW)local b2={}local pid;for _,bD in pairs(gW)do local cq=bD.planetarySystemId;if type(cq)~='number'then error('Invalid planetary system ID: '..tostring(cq))elseif pid and cq~=pid then error('Mismatch planetary system IDs: '..cq..' and '..pid)end;local gX=bD.bodyId;if type(gX)~='number'then error('Invalid body ID: '..tostring(gX))elseif b2[gX]then error('Duplicate body ID: '..tostring(gX))end;setmetatable(bD.center,getmetatable(vec3.unit_x))b2[gX]=setmetatable(bD,gF)pid=cq end;return setmetatable(b2,gQ)end;b7={}local function gY(gW)return setmetatable({galaxyAtlas=gW or{}},b7)end;b7.__index=function(gr,i)if type(i)=='number'then local system=gr.galaxyAtlas[i]return gV(system)end;return rawget(b7,i)end;b7.__pairs=function(gC)return function(gr,bC)local gZ,nv=next(gr,bC)return gZ,nv and gV(nv)end,gC.galaxyAtlas,nil end;b7.__tostring=function(gC)local g_={}for _,h0 in pairs(gC or{})do local h1=h0:getPlanetarySystemId()local h2=gQ.__tostring(h0,'    ')table.insert(g_,e('  [%s]={%s\n  }',h1,h2))end;return e('{\n%s\n}\n',table.concat(g_,',\n'))end;b7.BodyParameters=gK;b7.MapPosition=gO;b7.PlanetarySystem=gV;function b7.createBodyParameters(h3,cl,h4,h5,h6,h7,h8)assert(gp(h3),'Argument 1 (planetarySystemId) must be a number:'..type(h3))assert(gp(cl),'Argument 2 (bodyId) must be a number:'..type(cl))assert(gp(h4),'Argument 3 (surfaceArea) must be a number:'..type(h4))assert(gq(h5),'Argument 4 (aPosition) must be an array or vec3:'..type(h5))assert(gq(h6),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h6))assert(gp(h7),'Argument 6 (altitude) must be in meters:'..type(h7))assert(gp(h8),'Argument 7 (gravityAtPosition) must be number:'..type(h8))local gL=math.sqrt(h4/4/math.pi)local ae=gL+h7;local h9=vec3(h5)+ae*vec3(h6)local gM=h8*ae*ae;return gK(h3,cl,gL,h9,gM)end;b7.isMapPosition=gv;function b7:getPlanetarySystem(gP)if i==nil then i=0 end;if nv==nil then nv=0 end;local h3=gP;if gv(gP)then h3=gP.systemId end;if type(h3)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gQ then system=gV(system)end;return system end end end;function gQ:castIntersections(ha,fC,hb,hc)local hb=hb or function(fh)return 1.05*fh.radius end;local hd={}if hc then for _,i in ipairs(hc)do hd[i]=self[i]end else hc={}for bC,fh in pairs(self)do table.insert(hc,bC)hd[bC]=fh end end;local function he(hf,hg)local hh=hd[hf].center-ha;local hi=hd[hg].center-ha;return hh:len()<hi:len()end;table.sort(hc,he)local hj=fC:normalize()for i,cq in ipairs(hc)do local fh=hd[cq]local hk=fh.center-ha;local gL=hb(fh)local hl=hk:dot(hj)local hm=hl^2-(hk:len2()-gL^2)if hm>=0 then local hn=math.sqrt(hm)local ff=hl+hn;local fg=hl-hn;if fg>0 then return fh,ff,fg elseif ff>0 then return fh,ff,nil end end end;return nil,nil,nil end;function gQ:closestBody(ho)assert(type(ho)=='table','Invalid coordinates.')local hp,fh;local hq=vec3(ho)for _,hr in pairs(self)do local hs=(hr.center-hq):len2()if(not fh or hs<hp)and hr.name~="Space"then fh=hr;hp=hs end end;return fh end;function gQ:convertToBodyIdAndWorldCoordinates(gP)local ht=gP;if gs(gP)then ht=gO(gP)end;if ht.bodyId==0 then return 0,vec3(ht.latitude,ht.longitude,ht.altitude)end;local hr=self:getBodyParameters(ht)if hr then return ht.bodyId,hr:convertToWorldCoordinates(ht)end end;function gQ:getBodyParameters(gP)local cl=gP;if gv(gP)then cl=gP.bodyId end;assert(gp(cl),'Argument 1 (bodyId) must be a number:'..type(cl))return self[cl]end;function gQ:getPlanetarySystemId()local _,bD=next(self)return bD and bD.planetarySystemId end;function gF:convertToMapPosition(cb)assert(gq(cb),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cb))local cc=vec3(cb)if self.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cd=cc-self.center;local ae=cd:len()local ce=ae-self.radius;local cf=0;local cg=0;if not float_eq(ae,0)then local ch=math.atan(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ae)end;return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gF:convertToWorldCoordinates(gP)local ht=gs(gP)and gO(gP)or gP;if ht.bodyId==0 then return vec3(ht.latitude,ht.longitude,ht.altitude)end;assert(gv(ht),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ht.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ht.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cm=math.cos(ht.latitude)return self.center+(self.radius+ht.altitude)*vec3(cm*math.cos(ht.longitude),cm*math.sin(ht.longitude),math.sin(ht.latitude))end;function gF:getAltitude(cb)return(vec3(cb)-self.center):len()-self.radius end;function gF:getDistance(cb)return(vec3(cb)-self.center):len()end;function gF:getGravity(cb)local hu=self.center-vec3(cb)local hv=hu:len2()return self.GM/hv*hu/math.sqrt(hv)end;return setmetatable(b7,{__call=function(_,...)return gY(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gs(gt)return type(gt)=='string'end;local function gq(gr)return type(gr)=='table'end;local function float_eq(c8,c9)if c8==0 then return math.abs(c9)<1e-09 end;if c9==0 then return math.abs(c8)<1e-09 end;return math.abs(c8-c9)<math.max(math.abs(c8),math.abs(c9))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ce)assert(self.body)local ae=ce+self.body.radius;if not float_eq(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gP,bg)assert(self.body)assert(gq(gP)or gs(gP))assert(gq(bg))local ci=(gs(gP)or PlanetRef.isMapPosition(gP))and self.body:convertToWorldCoordinates(gP)or vec3(gP)local bD=vec3(bg)local hw=ci-self.body.center;local hi=bD:len2()local hx=hw:len()local hy=self.body.GM;local hz=((hi-hy/hx)*hw-hw:dot(bD)*bD)/hy;local c8=hy/(2*hy/hx-hi)local hA=hz:len()local hj=hz:normalize()local hB=c8*(1-hA)local hC=c8*(1+hA)local hD=hB*hj+self.body.center;local hE=hA<=1 and-hC*hj+self.body.center or nil;local hF=math.sqrt(c8*hy*(1-hA*hA))local hG=hE and 2*math.pi*math.sqrt(c8^3/hy)local hH=math.acos(hz:dot(hw)/(hA*hx))if hw:dot(bD)<0 then hH=-(hH-2*math.pi)end;local hI=math.acos((math.cos(hH)+hA)/(1+hA*math.cos(hH)))local hJ=hI;if hJ<0 then hJ=hJ+2*math.pi end;local hK=hJ-hA*math.sin(hJ)local hL=0;local hM=0;local hN=0;if hG~=nil then hL=hK/(2*math.pi/hG)hM=hG-hL;hN=hM+hG/2;if hH-math.pi>0 then hM=hL;hN=hM+hG/2 end;if hN>hG then hN=hN-hG end end;return{periapsis={position=hD,speed=hF/hB,circularOrbitSpeed=math.sqrt(hy/hB),altitude=hB-self.body.radius},apoapsis=hE and{position=hE,speed=hF/hC,circularOrbitSpeed=math.sqrt(hy/hC),altitude=hC-self.body.radius},currentVelocity=bD,currentPosition=ci,eccentricity=hA,period=hG,eccentricAnomaly=hI,meanAnomaly=hK,timeToPeriapsis=hM,timeToApoapsis=hN}end;local function hO(hP)local hr=PlanetRef.BodyParameters(hP.planetarySystemId,hP.bodyId,hP.radius,hP.center,hP.GM)return setmetatable({body=hr},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hO(...)end})end;function Kinematics()local b9={}local hQ=30000000/3600;local hR=hQ*hQ;local hS=100;local function hT(bD)return 1/math.sqrt(1-bD*bD/hR)end;function b9.computeAccelerationTime(hU,hV,hW)local hX=hQ*math.asin(hU/hQ)return(hQ*math.asin(hW/hQ)-hX)/hV end;function b9.computeDistanceAndTime(hU,hW,hY,hZ,h_,i0)h_=h_ or 0;i0=i0 or 0;local i1=hU<=hW;local i2=hZ*(i1 and 1 or-1)/hY;local i3=-i0/hY;local i4=i2+i3;if i1 and i4<=0 or not i1 and i4>=0 then return-1,-1 end;local i5,i6=0,0;if i2~=0 and h_>0 then local hX=math.asin(hU/hQ)local i7=math.pi*(i2/2+i3)local i8=i2*h_;local i9=hQ*math.pi;local bD=function(gr)local cW=(i7*gr-i8*math.sin(math.pi*gr/2/h_)+i9*hX)/i9;local ia=math.tan(cW)return hQ*ia/math.sqrt(ia*ia+1)end;local ib=i1 and function(gt)return gt>=hW end or function(gt)return gt<=hW end;i6=2*h_;if ib(bD(i6))then local ic=0;while math.abs(i6-ic)>0.5 do local gr=(i6+ic)/2;if ib(bD(gr))then i6=gr else ic=gr end end end;local id=hU;local ie=i6/hS;for ig=1,hS do local bU=bD(ig*ie)i5=i5+(bU+id)*ie/2;id=bU end;if i6<2*h_ then return i5,i6 end;hU=id end;local hX=hQ*math.asin(hU/hQ)local bF=(hQ*math.asin(hW/hQ)-hX)/i4;local ih=hR*math.cos(hX/hQ)/i4;local ae=ih-hR*math.cos((i4*bF+hX)/hQ)/i4;return ae+i5,bF+i6 end;function b9.computeTravelTime(hU,hV,ae)if ae==0 then return 0 end;if hV>0 then local hX=hQ*math.asin(hU/hQ)local ih=hR*math.cos(hX/hQ)/hV;return(hQ*math.acos(hV*(ih-ae)/hR)-hX)/hV end;if hU==0 then return-1 end;assert(hU>0,'Acceleration and initial speed are both zero.')return ae/hU end;function b9.lorentz(bD)return hT(bD)end;return b9 end;function safeZone(ii)local gL=500000;local ij,ik,il=math.huge;local im=false;local io=vec3({13771471,7435803,-128971})local ip=18000000;ij=vec3(ii):dist(io)if ij<ip then return true,math.abs(ij-ip),"Safe Zone",0 end;ik=vec3(ii):dist(vec3(planet.center))if ik<gL then im=true end;if math.abs(ik-gL)<math.abs(ij-ip)then return im,math.abs(ik-gL),planet.name,planet.bodyId else return im,math.abs(ij-ip),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.340;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;if br~=nil then br.activate()end;if bs~=nil then bs.activate()end end)end;function SaveDataBank(iq)if dbHud_1 then if not a9 then for bC,bD in pairs(b)do dbHud_1.setStringValue(bD,g(_G[bD]))if iq and dbHud_2 then dbHud_2.setStringValue(bD,g(_G[bD]))end end;for bC,bD in pairs(a)do dbHud_1.setStringValue(bD,g(_G[bD]))if iq and dbHud_2 then dbHud_2.setStringValue(bD,g(_G[bD]))end end;c("Saved Variables to Datacore")if iq and dbHud_2 then V="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bN=j()if door and(bN>0 or bN==0 and ap<10000)then for _,bD in pairs(door)do bD.toggle()end end;if forcefield and(bN>0 or bN==0 and ap<10000)then for _,bD in pairs(forcefield)do bD.toggle()end end;SaveDataBank()if button then button.activate()end;if br~=nil then br.deactivate()end end;function script.onTick(ir)if ir=="tenthSecond"then if bq~=nil then bq.deactivate()end;if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then y=1;Nav.control.cancelCurrentControlMasterMode()C=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local is=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if is and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dz,dA=getDistanceDisplayString(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dz,dA=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dz,dA=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dz,dA=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dz)..'", "unit":"'..dA..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ir=="oneSecond"then if bq~=nil then bq.activate()end;am=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cu={}local dI=GetFlightStyle()DrawOdometer(cu,a7,TotalDistanceTravelled,dI,a8)if ShouldCheckDamage then CheckDamage(cu)end;ag=table.concat(cu,"")collectgarbage("collect")elseif ir=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bE=json.decode(dbHud_1.getStringValue("SavedLocations"))if bE~=nil then _G["SavedLocations"]=bE;local cs=-1;local cp;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name=="SatNav Location"then cs=bC;break end end;if cs~=-1 then cp=SavedLocations[cs]cs=-1;for bC,bD in pairs(b2[0])do if bD.name and bD.name=="SatNav Location"then cs=bC;break end end;if cs>-1 then b2[0][cs]=cp end;UpdateAtlasLocationsList()V=cp.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ir=="msgTick"then local cu={}DisplayMessage(cu,"empty")V="empty"unit.stopTimer("msgTick")ad=3 elseif ir=="animateTick"then bd=true;bc=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif ir=="hudTick"then local cu={}HUDPrologue(cu)if showHud then UpdateHud(cu)else DisplayOrbitScreen(cu)DrawWarnings(cu)end;HUDEpilogue(cu)cu[#cu+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if V~="empty"then DisplayMessage(cu,V)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cu)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cu)if screen_1.getMouseState()==1 then CheckButtons()end;cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)elseif system.isViewLocked()==0 then if o()==1 and U then SetButtonContains()DrawButtons(cu)if not bc and not bd then local it=table.concat(cu,"")cu={}cu[#cu+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cu[#cu+1]=b3;cu[#cu+1]=it;cu[#cu+1]="</body>"bc=true;cu[#cu+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cu,"")system.setScreen(content)elseif bd then local it=table.concat(cu,"")cu={}cu[#cu+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cu[#cu+1]=b3;cu[#cu+1]=it;cu[#cu+1]="</body>"end;if not bc then cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end else CheckButtons()end else if not U and o()==0 then CheckButtons()if ae>DeadZone then DrawCursorLine(cu)end else SetButtonContains()DrawButtons(cu)end;cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end;cu[#cu+1]=[[</svg></body>]]content=table.concat(cu,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ir=="apTick"then bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ao=j()>0;local bF=system.getTime()local iu=bF-bn;bn=bF;local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local iv=vec3(core.getConstructWorldOrientationUp())local cz=vec3(core.getWorldVertical())local iw=vec3(core.getConstructWorldPos())local ix=core.getVelocity()local dK=getRoll(cz,cx,cy)local dL=dK/180*math.pi;local dM=math.cos(dL)local dN=math.sin(dL)local cA=getPitch(cz,cx,cy)local iy=getPitch(cz,cx,cy*dM+iv*dN)local iz=-math.deg(cR(iv,bg,cx))local iA=math.deg(cR(cy,bg,cx))bm=ao and iz<-YawStallAngle or iz>YawStallAngle or iA<-PitchStallAngle or iA>PitchStallAngle;v,w,x,_=safeZone(iw)bk=system.getMouseDeltaX()bl=system.getMouseDeltaY()if InvertMouse and not U then bl=-bl end;O=0;S=0;N=0;bg=vec3(core.getWorldVelocity())bh=vec3(bg):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bg)al=hoverDetectGround()local bR=planet:getGravity(core.getConstructWorldPos()):len()*n()bo=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and U then if not bc then ab=ab+bk;ac=ac+bl end else ab=0;ac=0 end else ab=ab+bk;ac=ac+bl;ae=math.sqrt(ab*ab+ac*ac)if not U and o()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then O=O-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then O=O-(ab+DeadZone)*MouseXSensitivity else O=0 end;if ac>0 and ac>DeadZone then N=N-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then N=N-(ac+DeadZone)*MouseYSensitivity else N=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;N=(-utils.smoothstep(bl,-100,100)+0.5)*2*J;O=(-utils.smoothstep(bk,-100,100)+0.5)*2*K else ab=0;ac=0 end end end;local iB=bh>8334;if bh>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not iB then V="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if not iB and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iB;if ao and j()>0.09 then if bh>bt/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bh<bt/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then R=1 else R=0 end;ap=core.getAltitude()if ap==0 then ap=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local iC=false;if CustomTarget~=nil then iC=AlignToWorldVector(CustomTarget.position-iw,0.01)else iC=AlignToWorldVector(vec3(bg),0.01)end;be=true;if iC and(math.abs(dK)<2 or math.abs(iy)>85)and bh>=bt/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ai=false;ak=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bt))y=0 end elseif bh>H then AlignToWorldVector(vec3(bg),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bh>H then AlignToWorldVector(-vec3(bg))end end;if not ProgradeIsOn and ai then if j()==0 then I=true;BeginReentry()ai=false;ak=true else ai=false;ToggleAutopilot()end end;local eh=vec3(core.getWorldVertical())*-1;local ef=bg.x*eh.x+bg.y*eh.y+bg.z*eh.z;if ak and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bh*3.6>bt-100 and math.abs(ef)<20 and j()>=0.1 and(CustomTarget.position-iw):len()>2000+ap then ToggleAutopilot()ak=false end;if Autopilot and j()==0 and not ai then local iD=AutopilotTargetCoords;local iE=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iF=(CustomTarget.position-a6.center):normalize()local iG=iF:project_on_plane((a6.center-iw):normalize()):normalize()local iH=a6.center+iG*(a6.radius+AutopilotTargetOrbit)local iI=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if not TargetSet then if(iw-iH):len()<(iw-iI):len()then iD=iH;AutopilotTargetCoords=iD else iD=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=iD end;local cB=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)iE=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;iE=true;TargetSet=true;AutopilotRealigned=true;iD=CustomTarget.position+(iw-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iF=(iw+bg*100000-a6.center):normalize()local iG=iF:project_on_plane((a6.center-iw):normalize()):normalize()if iG:len()<1 then iF=(iw+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()iG=iF:project_on_plane((a6.center-iw):normalize()):normalize()end;iD=a6.center+iG*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iD;TargetSet=true;iE=true;AutopilotRealigned=true;local cB=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)end end;AutopilotDistance=(vec3(iD)-vec3(core.getConstructWorldPos())):len()local fe,ff,fg=b8:getPlanetarySystem(0):castIntersections(iw,bg:normalize(),function(fh)if fh.noAtmosphericDensityAltitude>0 then return fh.radius+fh.noAtmosphericDensityAltitude else return fh.radius+fh.surfaceMaxAltitude*1.5 end end)local fi=ff;if fg~=nil and ff~=nil then fi=math.min(fg,ff)end;if fi~=nil and fi<AutopilotDistance and fe.name==a6.name then AutopilotDistance=fi end;local iC=true;local iJ=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bg):normalize()*AutopilotDistance)):len()-a6.radius;local dz,dA=getDistanceDisplayString(iJ)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dz..'", "unit":"'..dA..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)end;if bh>300 and AutopilotAccelerating then local dw=vec3(iD)-vec3(core.getConstructWorldPos())local iK=utils.clamp(math.deg(cR(iv,bg:normalize(),dw:normalize()))*bh/500,-90,90)local iL=utils.clamp(math.deg(cR(cy,bg:normalize(),dw:normalize()))*bh/500,-90,90)if math.abs(iK)<20 and math.abs(iL)<20 then iK=iK*2;iL=iL*2 end;if math.abs(iK)<2 and math.abs(iL)<2 then iK=iK*2;iL=iL*2 end;local iz=-math.deg(cR(iv,cx,bg:normalize()))local iA=-math.deg(cR(cy,cx,bg:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iL-iA)local iM=utils.clamp(apPitchPID:get(),-1,1)N=N+iM;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iK-iz)local iN=utils.clamp(apYawPID:get(),-1,1)O=O+iN;iE=true;if math.abs(iK)>2 or math.abs(iL)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iJ<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(iJ)end end;if not AutopilotCruising and not AutopilotBraking and not iE then iC=AlignToWorldVector((iD-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iC=AlignToWorldVector(-vec3(bg):normalize())end;if AutopilotAccelerating then if not F then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true end;local fG=unit.getThrottle()if AtmoSpeedAssist then fG=y end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fG==0 and F then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;R=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)y=1 end;local _,iO=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dw,iP,iQ;if CustomTarget~=nil then dw=CustomTarget.position-iw;iP=planet:getAltitude(CustomTarget.position)iQ=math.sqrt(dw:len()^2-(ap-iP)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bh<50 then V="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bh<=iO and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cB=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iO=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bh<=iO then if CustomTarget~=nil then if bg:normalize():dot(dw:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cB=zeroConvertToMapPosition(a6,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)WaypointSet=true end else V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local cB=zeroConvertToMapPosition(a6,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V="Autopilot completed, orbit established"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fG=unit.getThrottle()if AtmoSpeedAssist then fG=y end;if fG>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iC then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iC then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not F then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cB=zeroConvertToMapPosition(a6,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)end;if T then be=true;local iL=0;local ci=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iR=ci-vec3(core.getConstructWorldPos())local iS=vec3(iR):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iT=vec3(iR):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(iS*iS+iT*iT)AlignToWorldVector(iR:normalize())local iU=40;local iV=ae<iU;local iW=100;local g9=utils.clamp((ae-iU)/2,10,iW)N=0;local iC=math.abs(O)<0.1;if iC and bh<g9 and not iV then BrakeIsOn=false;iL=-20 else BrakeIsOn=true;iL=0 end;local iX=0;if math.abs(iL-cA)>iX then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iL-cA)local iM=pitchPID:get()N=iM end end;if VertTakeOff then Autopilot=false;AltitudeHold=false;if VertTargetPlanet==nil then VertTargetPlanet=planet end;local iY=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local iZ=nil;if j()>0.08 then iZ=0;be=true;BrakeIsOn=false;aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then aa=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)iZ=36;if iY<10 then BrakeIsOn=true;R=1 else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)BrakeIsOn=true;R=1;V="Takeoff completed. Parking."ToggleAutoTakeoff()end;if iZ~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local i_=utils.clamp(iZ-iy,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(i_)local j0=utils.clamp(vTpitchPID:get(),-1,1)N=j0 end end;if IntoOrbit then local iY=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local j1,iO=bb(OrbitTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-OrbitTargetPlanet.center):len()-OrbitTargetPlanet.radius)local j2=getHeading(vec3(core.getConstructWorldOrientationForward()))local j3=getRoll(cz,cx,cy)if not OrbitTargetSet then if OrbitTargetPlanet.hasAtmosphere then OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.noAtmosphericDensityAltitude)else OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.surfaceMaxAltitude)end;OrbitTargetSet=true end;if orbit.periapsis~=nil and orbit.eccentricity<1 and ap>OrbitTargetOrbit and ap<OrbitTargetOrbit*1.3 and orbit.periapsis.altitude>0 then if orbit.apoapsis~=nil then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;if orbit.periapsis.altitude>OrbitTargetOrbit*0.9 and orbit.periapsis.altitude<OrbitTargetOrbit*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;y=0;bv=0;bw=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)OrbitAchieved=true;if iy>2 or iy<-2 then bx=0 else V="Orbit established"bu=nil;bA=false;OrbitTargetSet=false;OrbitTargetPlanet=nil;be=autoRollPreference;ToggleIntoOrbit()end else bu="Adjusting Orbit"bA=true;if orbit.periapsis.altitude<OrbitTargetOrbit then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if bh+10>iO then if iY>15 then bx=-80;bv=0.5;BrakeIsOn=false elseif iY<-15 then bx=80;bv=0.5;BrakeIsOn=false else bv=0;BrakeIsOn=true end elseif bh-10<iO then bx=80;bv=0.5;BrakeIsOn=false else bv=0;BrakeIsOn=true end else bx=80;bv=0.5;BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then bv=0;BrakeIsOn=true elseif orbit.periapsis.altitude<OrbitTargetOrbit*1.2 then bx=-80;bv=0.5;BrakeIsOn=false end end end end;if bv>0 and iy<=bx+3 and iy>=bx-3 then y=bv;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bv)elseif not OrbitAchieved then y=0.05;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0.05)end else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;local j4=j1%50;local j5=0;if j4>0 then j5=j1-j4+50 else j5=j1 end;BrakeIsOn=false;bw=j5*2.5;if not bz then local j6=false;local j7=false;if ap<OrbitTargetOrbit then bu="Aligning to orbital path"else bu="Aligning to orbital point"end;bx=0;by=0;if iy<=bx+1 and iy>=bx-1 then j6=true else j6=false end;if j3<=by+1 and j3>=by-1 then j7=true else j7=false end;if j6 and j7 then bx=nil;by=nil;bz=true end else if ap<OrbitTargetOrbit*0.8 then bu="Escaping planet gravity"bx=35 elseif ap>=OrbitTargetOrbit*0.8 and ap<OrbitTargetOrbit*1.01 then bu="Approaching orbital corridor"bx=utils.map(ap,OrbitTargetOrbit*0.6,OrbitTargetOrbit,35,0)elseif ap>=OrbitTargetOrbit*1.01 and ap<OrbitTargetOrbit*1.5 then bu="Approaching orbital corridor"if iY<0 or bA then bx=utils.map(ap,OrbitTargetOrbit*1.5,OrbitTargetOrbit*1.01,-30,0)else bx=utils.map(ap,OrbitTargetOrbit*0.99,OrbitTargetOrbit*1.5,0,30)end elseif ap>OrbitTargetOrbit*1.5 then bx=-80;bu="Reentering orbital corridor"end end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bw)end;if bx~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local j8=bx-iy;OrbitPitchPID:inject(j8)local j9=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)N=j9 end;if by~=nil then if iy<85 then local ja=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(ja*0.01,0,ja*0.1)end;local jb=by-j3;OrbitRollPID:inject(jb)local jc=utils.clamp(OrbitRollPID:get(),-0.5,0.5)S=jc end end elseif CancelIntoOrbit then BrakeIsOn=true;R=1;V="Orbitting cancelled, parking"OrbitTargetSet=false;OrbitTargetPlanet=nil;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)CancelIntoOrbit=false end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dX=unit.getClosestPlanetInfluence()>0;local jd=HoldAltitude-ap;local je=500+bh;local jf=1;if AutoTakeoff then jf=utils.clamp(bh/100,0.1,1)end;local iL=(utils.smoothstep(jd,-je,je)-0.5)*2*MaxPitch*jf;if not Reentry and not ai and not VectorToTarget and cx:dot(bg:normalize())<0.99 then iL=(utils.smoothstep(jd,-je*utils.clamp(20-19*j()*10,1,20),je*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jf end;if not AltitudeHold then iL=0 end;if LockPitch~=nil then if dX then iL=LockPitch else LockPitch=nil end end;be=true;local jg=N;if Reentry then local ReentrySpeed=math.floor(bt)local jh,ji=b9.computeDistanceAndTime(bh,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jj=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bh<=ReentrySpeed/3.6 and bh>ReentrySpeed/3.6-10 and math.abs(bg:normalize():dot(cx))>0.9 then Nav.control.cancelCurrentControlMasterMode()y=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jh>-1 and jj<=jh or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not I then iL=-80;if j()>0.02 then V="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iL=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bt then I=false;Reentry=false;be=true end end end;if bh>H and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bg))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and j()>0.01 then local dw;if CustomTarget~=nil then dw=CustomTarget.position-vec3(core.getConstructWorldPos())else dw=a6.center-iw end;local iv=vec3(core.getConstructWorldOrientationUp())local iK=math.deg(cR(cz:normalize(),bg,dw))*2;local jk=math.rad(math.abs(dK))if bh>minRollVelocity and j()>0.01 then local jl=utils.clamp(90-iL*2,-90,90)bo=utils.clamp(iK*2,-jl,jl)local jm=iK;iK=utils.clamp(utils.clamp(iK,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jk)+4*(iy-iL)*math.sin(math.rad(dK)),-YawStallAngle*0.85,YawStallAngle*0.85)iL=utils.clamp(utils.clamp(iL*math.cos(jk),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jm)*math.sin(jk),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bo=0;iK=utils.clamp(iK,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jn=iz-iK;if not bm and bh>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jn)local iN=utils.clamp(yawPID:get(),-1,1)O=O+iN elseif ao and al>-1 or bh<minRollVelocity then AlignToWorldVector(dw)elseif bm and j()>0.01 then if(iz<-YawStallAngle or iz>YawStallAngle)and j()>0.01 then AlignToWorldVector(bg)end;if(iA<-PitchStallAngle or iA>PitchStallAngle)and j()>0.01 then iL=utils.clamp(iy-iA,iy-PitchStallAngle*0.85,iy+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local iP=planet:getAltitude(CustomTarget.position)local jj=math.sqrt(dw:len()^2-(ap-iP)^2)local jo=LastMaxBrakeInAtmo;if jo then jo=jo*utils.clamp(bh/100,0.1,1)*j()else jo=LastMaxBrake end;if j()<0.01 then jo=LastMaxBrake else end;local ef=bg.x*eh.x+bg.y*eh.y+bg.z*eh.z;local jp=bg:len()-math.abs(ef)local jq=vec3(core.getWorldAirFrictionAcceleration())local jr=math.sqrt(jq:len()-jq:project_on(eh):len())*n()if bh>100 then a0,a1=b9.computeDistanceAndTime(bh,100,n(),0,0,jo+jr)local js,jt=b9.computeDistanceAndTime(100,0,n(),0,0,jo/2)a0=a0+js else a0,a1=b9.computeDistanceAndTime(bh,0,n(),0,0,jo/2)end;StrongBrakes=true;if not aj and jj<=a0+bh*iu/2 and(bg:project_on_plane(cz):normalize():dot(dw:project_on_plane(cz):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jp<0.1 or jj<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jj)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jj end end;if bm and j()>0.01 and al==-1 and bh>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bg)iL=utils.clamp(iy-iA,iy-PitchStallAngle*0.85,iy+PitchStallAngle*0.85)end;N=jg;local fP=-1;local iX=0.1;if BrakeLanding then iL=0;local ef=bg.x*eh.x+bg.y*eh.y+bg.z*eh.z;local ju=false;local jv=30;if ba~=nil and ba>0 then local jr=0;local dQ=utils.clamp(j(),0.4,2)local jo=LastMaxBrakeInAtmo*utils.clamp(bh/100,0.1,1)*dQ;local jw=ba*dQ+jo+jr-bR;local jx=jo+jr-bR;local jy=jo/2+jr-bR;local jz=bh-math.sqrt(math.abs(jy/2)*20/(0.5*n()))*utils.sign(jy)if jz<0 then jz=0 end;local jA;if bh>100 then local jB,_=b9.computeDistanceAndTime(bh,100,n(),0,0,jo)local jC,_=b9.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jo))jA=jB+jC else jA=b9.computeDistanceAndTime(bh,0,n(),0,0,math.sqrt(jo))end;if jA<20 then BrakeIsOn=false else local jD=0;if jz>100 then local jE,_=b9.computeDistanceAndTime(jz,100,n(),0,0,jw)local jF,_=b9.computeDistanceAndTime(100,0,n(),0,0,ba*dQ+math.sqrt(jo)+jr-bR)jD=jE+jF else jD,_=b9.computeDistanceAndTime(jz,0,n(),0,0,ba*dQ+math.sqrt(jo)+jr-bR)end;jD=(jD+15+bh*iu)*1.1;local jG=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jG then local iP=planet:getAltitude(CustomTarget.position)local jH=ap-iP-100;local dw=CustomTarget.position-vec3(core.getConstructWorldPos())local iQ=math.sqrt(dw:len()^2-(ap-iP)^2)if iQ>100 then jG=false elseif jH<=jD or jD==-1 then BrakeIsOn=true;ju=true else BrakeIsOn=false;ju=true end end;if not jG and CalculateBrakeLandingSpeed then if jD>=jv then BrakeIsOn=true else BrakeIsOn=false end;ju=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fP=al;if fP>-1 then be=autoRollPreference;if bh<1 or bg:normalize():dot(cz)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bg:normalize():dot(-eh)<0.999 then BrakeIsOn=true elseif ef<-brakeLandingRate and not ju then BrakeIsOn=true elseif not ju then BrakeIsOn=false end end;if AutoTakeoff or aj then local fe,fg,ff=b8:getPlanetarySystem(0):castIntersections(iw,(AutopilotTargetCoords-iw):normalize(),function(fh)return fh.radius+fh.noAtmosphericDensityAltitude end)if math.abs(iL)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bh<H then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 elseif aj then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;BrakeIsOn=true end elseif aj and j()==0 and a6~=nil and(fe==nil or fe.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jI=hoverDetectGround()>-1;local jJ=cA;if(VectorToTarget or aj)and not jI and bh>minRollVelocity and j()>0.01 then local jk=math.rad(math.abs(dK))jJ=cA*math.abs(math.cos(jk))+iA*math.sin(jk)end;local jK=utils.clamp(iL-jJ,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jK=utils.clamp(iL-jJ,-85,MaxPitch)elseif j()<0.01 then jK=utils.clamp(iL-jJ,-MaxPitch,MaxPitch)end;if math.abs(dK)<5 or VectorToTarget or BrakeLanding or jI or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jK)local iM=pitchPID:get()N=N+iM end end;W=orbit.eccentricity;if antigrav and not ExternalAGG and ap<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if bs~=nil then local jL=core.getAltitude()if jL<HeadlightGroundHeight then bs.activate()else bs.deactivate()end end;if AchieveOrbit then local jM=1000;if planet.name~="Space"then if planet.hasAtmosphere then jM=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jM=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jM=1000 end;local _,iO=bb(planet):escapeAndOrbitalSpeed((iw-planet.center):len()-planet.radius)be=true;local jN;if OrbitToTarget and CustomTarget~=nil then jN=(target.position-iw):normalize():project_on_plane(cz):normalize()else jN=cx:project_on_plane(cz):normalize()end;jN=jN*iO;jN=(jN+-cz*(ap-jM)):normalize()*iO end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and C then y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)C=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not C then y=0;C=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jO=utils.clamp(M+N+system.getControlDeviceForwardInput(),-1,1)local jP=utils.clamp(P+S+system.getControlDeviceYawInput(),-1,1)local jQ=utils.clamp(Q+O-system.getControlDeviceLeftRightInput(),-1,1)local jR=R;local jS=vec3(core.getWorldVertical())if jS==nil or jS:len()==0 then jS=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jT=vec3(core.getConstructWorldOrientationUp())local jU=vec3(core.getConstructWorldOrientationForward())local jV=vec3(core.getConstructWorldOrientationRight())local jW=vec3(core.getWorldVelocity())local jX=vec3(core.getWorldVelocity()):normalize()local jY=getRoll(jS,jU,jV)local jZ=math.abs(jY)local j_=utils.sign(jY)local j=j()local k0=vec3(core.getWorldAngularVelocity())local k1=jO*pitchSpeedFactor*jV+jP*rollSpeedFactor*jU+jQ*yawSpeedFactor*jT;if jS:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local dK=getRoll(jS,jU,jV)local dL=dK/180*math.pi;local dM=math.cos(dL)local dN=math.sin(dL)local iy=getPitch(jS,jU,jV*dM+jT*dN)if be==true and math.abs(bo-jY)>autoRollRollThreshold and jP==0 and math.abs(iy)<85 then local k2=bo;local ja=autoRollFactor;if j==0 then ja=ja/4;bo=0;k2=0 end;if rollPID==nil then rollPID=pid.new(ja*0.01,0,ja*0.1)end;rollPID:inject(k2-jY)local k3=rollPID:get()k1=k1+k3*jU end end;if jS:len()>0.01 and j>0.0 then local k4=20.0;if turnAssist==true and jZ>k4 and jO==0 and jQ==0 then local k5=turnAssistFactor*0.1;local k6=turnAssistFactor*0.025;local k7=(jZ-k4)/(180-k4)*180;local k8=0;if k7<90 then k8=k7/90 elseif k7<180 then k8=(180-k7)/90 end;k8=k8*k8;local k9=-j_*k6*(1.0-k8)local ka=k5*k8;k1=k1+ka*jV+k9*jT end end;local kb=1;local kc=0;local kd=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y-speedChangeLarge/100,-1,1),2)end end;z=0;local ef=-jS:dot(jW)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bt/3.6-jW:dot(jU))local ke=throttlePID:get()B=utils.clamp(ke,-1,1)if B<y and j>0.005 then A=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(B,0.01,1))else A=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jW:len()-bt/3.6)local kf=utils.clamp(brakePID:get(),0,1)if j>0 and ef<-80 or j>0.005 then z=kf end;if z>0 then if A and B==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else B=utils.clamp(B,0.01,1)end;local kg=''local kh=vec3()local ki=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",ki,kc)local kj='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kj=kj..ExtraLongitudeTags end;local kk=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kl=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kj,axisCommandId.longitudinal)local km=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kg=kg..' , '.."lateral airfoil , lateral ground "kh=kh+km;if kh:len()>constants.epsilon then Nav:setEngineForceCommand(kg,kh,kc,'','','',kd)end;Nav:setEngineForceCommand(kj,kl,kb)local kn='thrust analog vertical fueled 'local ko='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ko=ko..ExtraLateralTags end;if ExtraVerticalTags~="none"then kn=kn..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kn,ki,kb)else Nav:setEngineForceCommand(kn,vec3(),kb)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ko,km,kb)else Nav:setEngineForceCommand(ko,vec3(),kb)end;if jR==0 then jR=z end;local kp=-jR*(brakeSpeedFactor*jW+brakeFlatFactor*jX)Nav:setEngineForceCommand('brake',kp)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;local kp=-jR*(brakeSpeedFactor*jW+brakeFlatFactor*jX)Nav:setEngineForceCommand('brake',kp)local kg=''local kh=vec3()local kq=false;local kj='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kj=kj..ExtraLongitudeTags end;local kk=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if kk==axisCommandType.byThrottle then local kl=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kj,axisCommandId.longitudinal)Nav:setEngineForceCommand(kj,kl,kb)elseif kk==axisCommandType.byTargetSpeed then local kl=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kg=kg..' , '..kj;kh=kh+kl;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kq=true end end;local ko='thrust analog lateral 'if ExtraLateralTags~="none"then ko=ko..ExtraLateralTags end;local kr=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kr==axisCommandType.byThrottle then local ks=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ko,axisCommandId.lateral)Nav:setEngineForceCommand(ko,ks,kb)elseif kr==axisCommandType.byTargetSpeed then local km=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kg=kg..' , '..ko;kh=kh+km end;local kn='thrust analog vertical 'if ExtraVerticalTags~="none"then kn=kn..ExtraVerticalTags end;local kt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kt==axisCommandType.byThrottle then local ki=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kn,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kn,ki,kb,'airfoil','ground','',kd)else Nav:setEngineForceCommand(kn,vec3(),kb)Nav:setEngineForceCommand('airfoil vertical',ki,kb,'airfoil','','',kd)Nav:setEngineForceCommand('ground vertical',ki,kb,'ground','','',kd)end elseif kt==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),kb)end;local ku=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kg=kg..' , '..kn;kh=kh+ku end;local g9=unit.getAxisCommandValue(0)if kh:len()>constants.epsilon then if R~=0 or kq or math.abs(jX:dot(jU))<0.8 or bg:len()>g9/3.6 then kg=kg..', brake'end;Nav:setEngineForceCommand(kg,kh,kc,'','','',kd)end end;local kv=torqueFactor*(k1-k0)local kw=vec3(core.getWorldAirFrictionAngularAcceleration())kv=kv-kw;Nav:setEngineTorqueCommand('torque',kv,kb,'airfoil','','',kd)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bU=vec3(core.getVelocity()):len()local kx=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ky=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bU*3.6>ky*(1-kx)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU*3.6<ky*(1-kx)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fG=unit.getThrottle()if AtmoSpeedAssist then fG=y*100 end;local g9=fG/100;if j==0 then g9=g9*MaxGameVelocity;if bU>=g9*(1-kx)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU<g9*(1-kx)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else g9=g9*ReentrySpeed/3.6;if bU>=g9*(1-kx)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bU<g9*(1-kx)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bE=coroutine.resume(beginSetup)if bE then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kz)if kz=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if(vBooster or hover)and al==-1 and(j()>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if L and not BrakeLanding then Nav.control.extendLandingGears()end else if L then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kz=="forward"then M=M-1 elseif kz=="backward"then M=M+1 elseif kz=="left"then P=P-1 elseif kz=="right"then P=P+1 elseif kz=="yawright"then Q=Q-1 elseif kz=="yawleft"then Q=Q+1 elseif kz=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kz=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kz=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kz=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kz=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kz=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kz=="option1"then IncrementAutopilotTargetIndex()G=false elseif kz=="option2"then DecrementAutopilotTargetIndex()G=false elseif kz=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;G=false;ToggleWidgets()elseif kz=="option4"then ToggleAutopilot()G=false elseif kz=="option5"then ToggleLockPitch()G=false elseif kz=="option6"then ToggleAltitudeHold()G=false elseif kz=="option7"then wipeSaveVariables()G=false elseif kz=="option8"then ToggleFollowMode()G=false elseif kz=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end;G=false elseif kz=="lshift"then if system.isViewLocked()==1 then U=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then U=true;bd=false;bc=false end elseif kz=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kz=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kz=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kz=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()y=0 elseif kz=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kz=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kz=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kz)if kz=="forward"then M=0 elseif kz=="backward"then M=0 elseif kz=="left"then P=0 elseif kz=="right"then P=0 elseif kz=="yawright"then Q=0 elseif kz=="yawleft"then Q=0 elseif kz=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kz=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kz=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kz=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kz=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif kz=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif kz=="lshift"then if system.isViewLocked()==1 then U=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then U=false;bd=false;bc=false end elseif kz=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kz=="lalt"then if o()==0 and freeLookToggle then if G then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else G=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kz)if kz=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kz=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kz=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kz=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dB)local i;local kA="/commands /setname /G /agg /addlocation /copydatabank"local kB,kC=nil,nil;local kD="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dB," ")kB=dB;if i~=nil then kB=string.sub(dB,0,i-1)kC=string.sub(dB,i+1)elseif not string.find(kA,kB)then for g5 in string.gmatch(kD,"([^\n]+)")do c(g5)end;return end;if kB=="/setname"then if kC==nil or kC==""then V="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kC)else V="Select a saved target to rename first"end elseif kB=="/addlocation"then if kC==nil or kC==""or string.find(kC,"::")==nil then V="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kC,"::")local co=string.sub(kC,1,i-2)local ci=string.sub(kC,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cj='::pos{'..p..','..p..','..p..','..p..','..p..'}'local ck,cl,cf,cg,ce=string.match(ci,cj)local planet=b2[tonumber(ck)][tonumber(cl)]AddNewLocationByWaypoint(co,planet,ci)V="Added "..co.." to saved locations,\nplanet "..planet.name.." at "..ci;ad=5 elseif kB=="/agg"then if kC==nil or kC==""then V="Usage: /agg targetheight"return end;kC=tonumber(kC)if kC<1000 then kC=1000 end;AntigravTargetAltitude=kC;V="AGG Target Height set to "..kC elseif kB=="/G"then if kC==nil or kC==""then V="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kC=="dump"then for bC,bD in pairs(a)do if type(_G[bD])=="boolean"then if _G[bD]==true then c(bD.." true")else c(bD.." false")end elseif _G[bD]==nil then c(bD.." nil")else c(bD.." ".._G[bD])end end;return end;i=string.find(kC," ")local kE=string.sub(kC,0,i-1)local kF=string.sub(kC,i+1)for bC,bD in pairs(a)do if bD==kE then V="Variable "..kE.." changed to "..kF;local kG=type(_G[bD])if kG=="number"then kF=tonumber(kF)elseif kG=="boolean"then if string.lower(kF)=="true"then kF=true else kF=false end end;_G[bD]=kF;return end end;V="No such global variable: "..kE elseif kB=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else V="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
