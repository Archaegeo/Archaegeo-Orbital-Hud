name: ButtonsHud - Dimencia and Archaegeo v5.44 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 250 --export: (Default: 250)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        circleRad = 400 --export: (Default: 400)
        DeadZone = 50 --export: (Default: 50)
        DisplayOrbit = true --export: (Default: true) 
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollPreference = false --export: (Default: false)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssist = true --export: (Default: true)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        minRollVelocity = 150 --export: (Default: 150)
        VertTakeOffEngine = false --export: (Default: false)
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=j()>0;local an=core.getAltitude()local ao=core.getElementIdList()local ap=system.getTime()local aq=nil;local ar=false;local as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local au={}local av=0;local aw=0;local ax=""local ay=true;local az={}local aA=1;local aB=0.001;local aC=ResolutionX;local aD=ResolutionY;local aE=nil;local aF=nil;local aG=nil;local aH=nil;local aI=false;local aJ=false;local aK=0;local aL=nil;local aM={}local aN={}local aO={}local aP=0;local aQ=false;local aR={}local aS={}local aT=d(1/apTickRate)*2;local aU={}local aV={}local aW={}local aX={}local aY=false;local aZ=16;local a_=0;local b0=nil;local b1=""local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=false;local bb=false;local bc=autoRollPreference;local bd=vec3(core.getWorldVelocity())local be=vec3(bd):len()local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=system.getTime()local bk=0;local bl=0;local bm=AtmoSpeedLimit;local bn=0;local bo=nil;local bp=0;local bq=0;local br=false;local bs=false;local bt={VectorToTarget=false}local bu=false;local bv=0;local bw=nil;local bx=false;local by=false;local bz=false;local bA=false;function LoadVariables()if dbHud_1 then local bB=dbHud_1.hasKey;if not useTheseSettings then for bC,bD in pairs(a)do if bB(bD)then local bE=f(dbHud_1.getStringValue(bD))if bE~=nil then c(bD.." "..dbHud_1.getStringValue(bD))_G[bD]=bE;aI=true end end end end;coroutine.yield()for bC,bD in pairs(b)do if bB(bD)then local bE=f(dbHud_1.getStringValue(bD))if bE~=nil then c(bD.." "..dbHud_1.getStringValue(bD))_G[bD]=bE;aI=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 elseif aI then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bF=system.getTime()if LastStartTime+180<bF then LastMaxBrakeInAtmo=0 end;if aI then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aC=ResolutionX;aD=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bc=autoRollPreference end;LastStartTime=bF;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;minimumRateOfChange=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]bm=AtmoSpeedLimit end;function CalculateFuelVolume(bG,bH)if bG>bH then bH=bG end;if ContainerOptimization>0 then bH=bH-bH*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bH=bH-bH*FuelTankOptimization*0.05 end;return bH end;function ProcessElements()local bI=fuelX~=0 and fuelY~=0;for bC in pairs(ao)do local type=l(ao[bC])if string.match(type,'^.*Space Engine$')then if string.match(tostring(core.getElementTagsById(ao[bC])),'^.*vertical.*$')then local bJ=core.getElementRotationById(ao[bC])if bJ[4]<0 then if utils.round(-bJ[4],0.1)==0.5 then by=true;system.print("Space Engine Up detected")end else if utils.round(bJ[4],0.1)==0.5 then bz=true;system.print("Space Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bK=h(ao[bC])if bK>10000 then aZ=128 elseif bK>1000 then aZ=64 elseif bK>150 then aZ=32 end end;aP=aP+h(ao[bC])if bI and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bK=h(ao[bC])local bL=m(ao[bC])local bG=0;local bM=system.getTime()if type=="Atmospheric Fuel Tank"then local bH=400;local bN=35.03;if bK>10000 then bH=51200;bN=5480 elseif bK>1300 then bH=6400;bN=988.67 elseif bK>150 then bH=1600;bN=182.67 end;bG=bL-bN;if fuelTankHandlingAtmo>0 then bH=bH+bH*fuelTankHandlingAtmo*0.2 end;bH=CalculateFuelVolume(bG,bH)aM[#aM+1]={ao[bC],core.getElementNameById(ao[bC]),bH,bN,bG,bM}end;if type=="Rocket Fuel Tank"then local bH=320;local bN=173.42;if bK>65000 then bH=40000;bN=25740 elseif bK>6000 then bH=5120;bN=4720 elseif bK>700 then bH=640;bN=886.72 end;bG=bL-bN;if fuelTankHandlingRocket>0 then bH=bH+bH*fuelTankHandlingRocket*0.1 end;bH=CalculateFuelVolume(bG,bH)aO[#aO+1]={ao[bC],core.getElementNameById(ao[bC]),bH,bN,bG,bM}end;if type=="Space Fuel Tank"then local bH=2400;local bN=182.67;if bK>10000 then bH=76800;bN=5480 elseif bK>1300 then bH=9600;bN=988.67 end;bG=bL-bN;if fuelTankHandlingSpace>0 then bH=bH+bH*fuelTankHandlingSpace*0.2 end;bH=CalculateFuelVolume(bG,bH)aN[#aN+1]={ao[bC],core.getElementNameById(ao[bC]),bH,bN,bG,bM}end end end end;function SetupChecks()if gyro~=nil then aq=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;local bO=j()if door and(bO>0 or bO==0 and an<10000)then for _,bD in pairs(door)do bD.toggle()end end;if switch then for _,bD in pairs(switch)do bD.toggle()end end;if forcefield and(bO>0 or bO==0 and an<10000)then for _,bD in pairs(forcefield)do bD.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bP=AboveGroundLevel()if bP~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bf)if bf==0 and not M then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if am and bP~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=am end;function ConvertResolutionX(bD)if ResolutionX==1920 then return bD else return round(ResolutionX*bD/1920,0)end end;function ConvertResolutionY(bD)if ResolutionY==1080 then return bD else return round(ResolutionY*bD/1080,0)end end;function RefreshLastMaxBrake(bQ,bR)if bQ==nil then bQ=core.g()end;bQ=round(bQ,5)local bS=j()if bR~=nil and bR or(aL==nil or aL~=bQ)then local bd=core.getVelocity()local bT=vec3(bd):len()local bU=f(unit.getData()).maxBrake;if bU~=nil and bU>0 and am then bU=bU/utils.clamp(bT/100,0.1,1)bU=bU/bS;if bS>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bU)/2 else LastMaxBrakeInAtmo=bU end end end;if bU~=nil and bU>0 then LastMaxBrake=bU end;aL=bQ end end;function MakeButton(bV,bW,bX,bY,bZ,b_,c0,c1,c2)local c3={enableName=bV,disableName=bW,width=bX,height=bY,x=bZ,y=b_,toggleVar=c0,toggleFunction=c1,drawCondition=c2,hovered=false}table.insert(az,c3)return c3 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bC,bD in pairs(b0[0])do table.insert(AtlasOrdered,{name=bD.name,index=bC})end;local function c4(c5,c6)return c5.name<c6.name end;table.sort(AtlasOrdered,c4)end;function AddLocationsToAtlas()for bC,bD in pairs(SavedLocations)do table.insert(b0[0],bD)end;UpdateAtlasLocationsList()end;function float_eq(c7,c8)if c7==0 then return math.abs(c8)<1e-09 end;if c8==0 then return math.abs(c7)<1e-09 end;return math.abs(c7-c8)<math.max(math.abs(c7),math.abs(c8))*epsilon end;function zeroConvertToMapPosition(c9,ca)local cb=vec3(ca)if c9.bodyId==0 then return setmetatable({latitude=cb.x,longitude=cb.y,altitude=cb.z,bodyId=0,systemId=c9.planetarySystemId},MapPosition)end;local cc=cb-c9.center;local ac=cc:len()local cd=ac-c9.radius;local ce=0;local cf=0;if not float_eq(ac,0)then local cg=math.atan(cc.y,cc.x)cf=cg>=0 and cg or 2*math.pi+cg;ce=math.pi/2-math.acos(cc.z/ac)end;return setmetatable({latitude=math.deg(ce),longitude=math.deg(cf),altitude=cd,bodyId=c9.bodyId,systemId=c9.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(ch)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ci='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cj,ck,ce,cf,cd=string.match(ch,ci)if cj=="0"and ck=="0"then return vec3(tonumber(ce),tonumber(cf),tonumber(cd))end;cf=math.rad(cf)ce=math.rad(ce)local planet=b0[tonumber(cj)][tonumber(ck)]local cl=math.cos(ce)local cm=vec3(cl*math.cos(cf),cl*math.sin(cf),math.sin(ce))return planet.center+(planet.radius+cd)*cm end;function AddNewLocationByWaypoint(cn,planet,ch)if dbHud_1 then local co={}local position=zeroConvertToWorldCoordinates(ch)if planet.name=="Space"then co={position=position,name=cn,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bO=false;if planet.hasAtmosphere then bO=true else bO=false end;co={position=position,name=cn,atmosphere=bO,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=co;table.insert(b0[0],co)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cp=planet.name..". "..#SavedLocations;if radar_1 then local cq,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cq~=nil and cq~=""then cp=cp.." "..radar_1.getConstructName(cq)end end;local co={}local bO=false;if planet.hasAtmosphere then bO=true end;co={position=position,name=cp,atmosphere=bO,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=co;table.insert(b0[0],co)UpdateAtlasLocationsList()W="Location saved as "..cp else W="Databank must be installed to save locations"end end;function UpdatePosition(cr)local cs=-1;local co;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name==CustomTarget.name then cs=bC;break end end;if cs~=-1 then local ct;if cr~=nil then co={position=SavedLocations[cs].position,name=cr,atmosphere=SavedLocations[cs].atmosphere,planetname=SavedLocations[cs].planetname,gravity=SavedLocations[cs].gravity}else co={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cs].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cs]=co;cs=-1;for bC,bD in pairs(b0[0])do if bD.name and bD.name==CustomTarget.name then cs=bC end end;if cs>-1 then b0[0][cs]=co end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cs=-1;for bC,bD in pairs(b0[0])do if bD.name and bD.name==CustomTarget.name then cs=bC end end;if cs>-1 then table.remove(b0[0],cs)end;cs=-1;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name==CustomTarget.name then W=bD.name.." saved location cleared"cs=bC;break end end;if cs~=-1 then table.remove(SavedLocations,cs)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cu)cu[#cu+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;function ToggleWidgets()if ay then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ay=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ay=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cv,cw,bZ,b_,bX,bY)if cv>bZ and cv<bZ+bX and cw>b_ and cw<b_+bY then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=an+AutoTakeoffAltitude end;bx=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if bx then CancelIntoOrbit=false else CancelIntoOrbit=true end;bx=false;IntoOrbit=false;br=false;bp=nil;bq=nil;bw=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bx=false;CancelIntoOrbit=false;br=false;bp=nil;bq=nil;if bw==nil then bw=planet end else W="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local cz=vec3(core.getWorldVertical())local cA=getPitch(cz,cx,cy)LockPitch=cA;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bF=system.getTime()if bF-bl<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 end;bl=-1;if AltitudeHold then return end end else bl=bF end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bc=true;LockPitch=nil;bx=false;if hoverDetectGround()==-1 or not am then AutoTakeoff=false;if bl>-1 then HoldAltitude=an;CancelIntoOrbit=true;bx=true else HoldAltitude=an;IntoOrbit=true;bx=false end;if not ah and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=an+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ah then HoldAltitude=100000 end else bc=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bc=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah then UpdateAutopilotTarget()local cB=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then bx=false;if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if an>100000 or an==0 then bx=false;Autopilot=true else ag=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then local cC=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a4.name==planet.name and cC)then ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ah=true;ToggleAltitudeHold()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=an;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bc=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;IntoOrbit=false;LockPitch=nil;bc=autoRollPreference;ag=false;ai=false;a8=0 end end;function CheckDamage(cu)local cD=0;ax=""local cE=aP;local cF=0;local cG=0;local cH=0;local cI=0;local cJ=""for bC in pairs(ao)do local bK=0;local cK=0;cK=h(ao[bC])bK=k(ao[bC])cF=cF+bK;if bK<cK then if bK==0 then cH=cH+1 else cG=cG+1 end;if aQ and#au==0 then position=vec3(core.getElementPositionById(ao[bC]))local bZ=position.x-aZ;local b_=position.y-aZ;local cL=position.z-aZ;table.insert(au,core.spawnArrowSticker(bZ,b_,cL+1,"down"))table.insert(au,core.spawnArrowSticker(bZ,b_,cL+1,"down"))core.rotateSticker(au[2],0,0,90)table.insert(au,core.spawnArrowSticker(bZ+1,b_,cL,"north"))table.insert(au,core.spawnArrowSticker(bZ+1,b_,cL,"north"))core.rotateSticker(au[4],90,90,0)table.insert(au,core.spawnArrowSticker(bZ-1,b_,cL,"south"))table.insert(au,core.spawnArrowSticker(bZ-1,b_,cL,"south"))core.rotateSticker(au[6],90,-90,0)table.insert(au,core.spawnArrowSticker(bZ,b_-1,cL,"east"))table.insert(au,core.spawnArrowSticker(bZ,b_-1,cL,"east"))core.rotateSticker(au[8],90,0,90)table.insert(au,core.spawnArrowSticker(bZ,b_+1,cL,"west"))table.insert(au,core.spawnArrowSticker(bZ,b_+1,cL,"west"))core.rotateSticker(au[10],-90,0,90)table.insert(au,ao[bC])end elseif aQ and#au>0 and au[11]==ao[bC]then for cM in pairs(au)do core.deleteSticker(au[cM])end;au={}end end;cD=d(cF/cE*100)if cD<100 then cu[#cu+1]=[[<g class="pbright txt">]]cI=d(cD*2.55)cJ=e("rgb(%d,%d,%d)",255-cI,cI,0)if cD<100 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cJ,cD)if cH>0 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cJ,cH,cG)elseif cG>0 then cu[#cu+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cJ,cG)end end;cu[#cu+1]=[[<\g>]]end end;function DrawCursorLine(cu)local cN=d(utils.clamp(ac/(aC/4)*255,0,255))cu[#cu+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(t+0.5)+cN,d(v+0.5)-cN,d(u+0.5)-cN)end;function getPitch(cO,cP,c6)local cQ=cO:cross(c6):normalize_inplace()local cA=math.acos(utils.clamp(cQ:dot(-cP),-1,1))*constants.rad2deg;if cQ:cross(-cP):dot(c6)<0 then cA=-cA end;return cA end;local function cR(cS,cT,cU)cT=cT:project_on_plane(cS)cU=cU:project_on_plane(cS)return p(cT:cross(cU):dot(cS),cT:dot(cU))end;function clearAll()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;ag=false;ah=false;J=false;bc=autoRollPreference;VectorToTarget=false;TurnBurn=false;aq=false;LockPitch=nil else ak=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ab=5 else if aJ then for bC,bD in pairs(a)do dbHud_1.setStringValue(bD,g(nil))end;for bC,bD in pairs(b)do if bD~="SavedLocations"then dbHud_1.setStringValue(bD,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ab=5;aJ=false;aI=false;a7=true else W="Press ALT-7 again to confirm wipe of ALL data"aJ=true end end end;function CheckButtons()for _,bD in pairs(az)do if bD.hovered then if not bD.drawCondition or bD.drawCondition()then bD.toggleFunction()end;bD.hovered=false end end end;function SetButtonContains()local bZ=a9+aC/2;local b_=aa+aD/2;for _,bD in pairs(az)do bD.hovered=Contains(bZ,b_,bD.x,bD.y,bD.width,bD.height)end end;function DrawButton(cu,cV,hover,bZ,b_,cW,cX,cY,cZ,c_,d0)if type(c_)=="function"then c_=c_()end;if type(d0)=="function"then d0=d0()end;cu[#cu+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bZ,b_,cW,cX)if cV then cu[#cu+1]=e("%s'",cY)else cu[#cu+1]=cZ end;if hover then cu[#cu+1]=" style='stroke:white; stroke-width:2'"else cu[#cu+1]=" style='stroke:black; stroke-width:1'"end;cu[#cu+1]="></rect>"cu[#cu+1]=e("<text x='%f' y='%f' font-size='24' fill='",bZ+cW/2,b_+cX/2+5)if cV then cu[#cu+1]="black"else cu[#cu+1]="white"end;cu[#cu+1]="' text-anchor='middle' font-family='Montserrat'>"if cV then cu[#cu+1]=e("%s</text>",c_)else cu[#cu+1]=e("%s</text>",d0)end end;function DrawButtons(cu)local d1="rgb(50,50,50)'"local d2="rgb(210,200,200)"local d3=DrawButton;for _,bD in pairs(az)do local bW=bD.disableName;local bV=bD.enableName;if type(bW)=="function"then bW=bW()end;if type(bV)=="function"then bV=bV()end;if not bD.drawCondition or bD.drawCondition()then d3(cu,bD.toggleVar(),bD.hovered,bD.x,bD.y,bD.width,bD.height,d2,d1,bW,bV)end end end;function DrawTank(cu,aY,bZ,d4,d5,d6,d7,d8)local d9=1;local da=2;local db=3;local dc=4;local dd=5;local de=6;local df=""local dg=0;local dh=fuelY;local di=fuelY+10;if o()==1 and not RemoteHud then dh=dh-50;di=di-50 end;cu[#cu+1]=[[<g class="pdim txtfuel">]]if d5=="ATMO"then df="atmofueltank"elseif d5=="SPACE"then df="spacefueltank"else df="rocketfueltank"end;dg=_G[df.."_size"]if#d6>0 then for i=1,#d6 do local cp=string.sub(d6[i][da],1,12)local dj=0;for cM=1,dg do if d6[i][da]==f(unit[df.."_"..cM].getData()).name then dj=cM;break end end;if aY or d7[i]==nil or d8[i]==nil then local dk=0;local dl=0;local dm=0;local dn=0;local bM=system.getTime()if dj~=0 then d8[i]=f(unit[df.."_"..dj].getData()).percentage;d7[i]=f(unit[df.."_"..dj].getData()).timeLeft;if d7[i]=="n/a"then d7[i]=0 end else dm=m(d6[i][d9])-d6[i][dc]dk=d6[i][db]d8[i]=d(0.5+dm*100/dk)dl=d6[i][dd]dn=d6[i][de]if dl<=dm then d7[i]=0 else d7[i]=d(0.5+dm/((dl-dm)/(bM-dn)))end;d6[i][dd]=dm;d6[i][de]=bM end end;if cp==d4 then cp=e("%s %d",d5,i)end;if dj==0 then cp=cp.." *"end;local dp;if d7[i]==0 then dp="n/a"else dp=FormatTimeString(d7[i])end;if d8[i]~=nil then local cI=d(d8[i]*2.55)local cJ=e("rgb(%d,%d,%d)",255-cI,cI,0)local dq=""if dp~="n/a"and d7[i]<120 or d8[i]<5 then if aY then dq=[[class="red"]]end end;cu[#cu+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bZ,dh,dq,cp,bZ,di,cJ,d8[i],dp)dh=dh+30;di=di+30 end end end;cu[#cu+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bd)bd=vec3(bd)local cA=-math.deg(math.atan(bd.y,bd.z))+180;cA=cA-90;if cA<0 then cA=360+cA end;if cA>180 then cA=-180+cA-180 end;return-cA end;function getRelativeYaw(bd)bd=vec3(bd)local dr=math.deg(math.atan(bd.y,bd.x))-90;if dr<-180 then dr=360+dr end;return dr end;function AlignToWorldVector(ds,dt,du)if not am or not bi or aj~=-1 or be<I then local dv=du;if dv==nil then dv=DampingMultiplier end;if dt==nil then dt=aB end;ds=vec3(ds):normalize()local dw=vec3(core.getConstructWorldOrientationForward())-ds;local dx=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationRight())*aA;local dy=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dx/2 end;if aw==0 then aw=dy/2 end;if math.abs(dx)<0.1 then P=P-dx*2 else P=P-(dx+(dx-av)*dv)end;if math.abs(dy)<0.1 then O=O+dy*2 else O=O+dy+(dy-aw)*dv end;av=dx;aw=dy;if math.abs(dx)<dt and math.abs(dy)<dt then return true end;return false elseif bi and aj==-1 then ds=vec3(core.getWorldVelocity())local dv=du;if dv==nil then dv=DampingMultiplier end;if dt==nil then dt=aB end;ds=vec3(ds):normalize()local dw=vec3(core.getConstructWorldOrientationForward())-ds;local dx=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationRight())*aA;local dy=-getMagnitudeInDirection(dw,core.getConstructWorldOrientationUp())*aA;if av==0 then av=dx/2 end;if aw==0 then aw=dy/2 end;if math.abs(dx)<0.1 then P=P-dx*5 else P=P-(dx+(dx-av)*dv)end;if math.abs(dy)<0.1 then O=O+dy*5 else O=O+dy+(dy-aw)*dv end;av=dx;aw=dy;if math.abs(dx)<dt and math.abs(dy)<dt then return true end;return false end end;function getAPEnableName()local cp=AutopilotTargetName;if cp==nil then local dz,dA=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cp=CustomTarget.name.." "..dz..dA end;if cp==nil then cp="None"end;return"Engage Autopilot: "..cp end;function getAPDisableName()local cp=AutopilotTargetName;if cp==nil then cp=CustomTarget.name end;if cp==nil then cp="None"end;return"Disable Autopilot: "..cp end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;bc=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ab=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bc=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;bc=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dB,dC=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bm.." Target Altitude: "..dB..dC end;AutoTakeoff=false end;function SetupButtons()local dD=50;local dE=260;local dF=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dE,dD,aC/2-dE/2,aD/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dE,dD,aC/2-dE/2-50-dF.width,aD/2-dD+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dE,dD,aC/2-dE/2+dF.width+50,aD/2-dD+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dG=MakeButton(getAPEnableName,getAPDisableName,600,60,aC/2-600/2,aD/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dG.height,dG.x+dG.width+30,dG.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dG.height,dG.x+dG.width+30,dG.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dG.height,dG.x-200-30,dG.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dD=60;dE=300;local bZ=10;local b_=aD/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dE,dD,bZ,b_,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dE,dD,bZ+dE+20,b_,function()return AltitudeHold end,ToggleAltitudeHold)b_=b_+dD+20;MakeButton("Engage Autoland","Disable Autoland",dE,dD,bZ,b_,function()return AutoLanding end,ToggleAutoLanding)local dH,dI,dJ;if VertTakeOffEngine then dH="Engage Vertical Takeoff"dI="Disable Vertical Takeoff"dJ=VertTakeOff else dH="Engage Auto Takeoff"dI="Disable Auto Takeoff"dJ=AutoTakeoff end;MakeButton(dH,dI,dE,dD,bZ+dE+20,b_,function()return dJ end,ToggleAutoTakeoff)b_=b_+dD+20;MakeButton("Show Orbit Display","Hide Orbit Display",dE,dD,bZ,b_,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dE,dD,bZ+dE+20,b_,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)b_=b_+dD+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dE,dD,bZ,b_,function()return Reentry end,function()ag=true;bA=not bA;ProgradeToggle()end,function()return an>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dE,dD,bZ+dE+20,b_,function()return Reentry end,BeginReentry,function()return an>ReentryAltitude end)b_=b_+dD+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dE,dD,bZ,b_,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dE,dD,bZ+dE+20,b_,function()return aQ end,function()aQ=not aQ;if aQ then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)b_=b_+dD+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dE,dD,bZ,b_,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;b_=b_+dD+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dE*2,dD,bZ,b_,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dK=Nav.axisCommandManager:getAxisCommandType(0)local dL="TRAVEL"if dK==1 then dL="CRUISE"end;if Autopilot then dL="AUTOPILOT"end;return dL end;function UpdateHud(cu)local cd=an;local bd=core.getVelocity()local bT=vec3(bd):len()local cz=vec3(core.getWorldVertical())local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local dM=vec3(core.getConstructWorldOrientationUp())local dN=getRoll(cz,cx,cy)local dO=dN/180*math.pi;local dP=math.cos(dO)local dQ=math.sin(dO)local cA=getPitch(cz,cx,cy*dP+dM*dQ)local dR=dN;local dS=cA;local dT=j()local dU=d(unit.getThrottle())local dV=bT*3.6;local dW=unit.getAxisCommandValue(0)local dX=ConvertResolutionX(1770)local dY=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dW=z;dU=z*100 end;local dL=GetFlightStyle()local dZ="ROLL"local cC=unit.getClosestPlanetInfluence()>0;if dU==nil then dU=0 end;if not cC then if bT>5 then cA=getRelativePitch(bd)dN=getRelativeYaw(bd)else cA=0;dN=0 end;dZ="YAW"end;if x>50000 and not am then local d_;if x>200000 then d_=round(x/200000,2).." su"else d_=round(x/1000,1).." km"end;cu[#cu+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dX,dY,d_)end;cu[#cu+1]=ae;cu[#cu+1]=ax;cu[#cu+1]=ad;if a_%aT==0 then aY=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cu,aY,fuelX,"Atmospheric ","ATMO",aM,aW,aX)DrawTank(cu,aY,fuelX+100,"Space fuel t","SPACE",aN,aU,aV)DrawTank(cu,aY,fuelX+200,"Rocket fuel ","ROCKET",aO,aR,aS)end;if aY then aY=false;a_=0 end;a_=a_+1;DrawVerticalSpeed(cu,cd)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cC then DrawRollLines(cu,centerX,centerY,dR,dZ,cC)DrawArtificialHorizon(cu,dS,dR,centerX,centerY,cC,d(getRelativeYaw(bd)),bT)else DrawRollLines(cu,centerX,centerY,dN,dZ,cC)DrawArtificialHorizon(cu,cA,dN,centerX,centerY,cC,d(dN),bT)end;DrawAltitudeDisplay(cu,cd,cC)DrawPrograde(cu,bd,bT,centerX,centerY)end end;DrawThrottle(cu,dL,dU,dW)DrawSpeed(cu,dV)DrawWarnings(cu)DisplayOrbitScreen(cu)if screen_2 then local ch=vec3(core.getConstructWorldPos())local bZ=960+ch.x/b2;local b_=450+ch.y/b3;screen_2.moveContent(b4,(bZ-80)/19.2,(b_-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cu)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local e0=as;local e1=at;local e2=as;local e3=at;if IsInFreeLook()and not brightHud then e0=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]e1=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cu[#cu+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],e0,e0,e2,e2,e1,e1,e3,e3,ResolutionX,ResolutionY)end;function HUDEpilogue(cu)cu[#cu+1]="</svg>"end;function DrawSpeed(cu,dV)local e4=throtPosY-10;local e5=throtPosX+10;cu[#cu+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e4=75 end;cu[#cu+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e5,e4,d(dV))end;function DrawOdometer(cu,a5,TotalDistanceTravelled,dL,a6,dT)local e6=ConvertResolutionX(1240)local e7=ConvertResolutionY(55)local e8=e7+10;local dT=j()local bQ=core.g()local e9=0;local ea=0;local eb=0;RefreshLastMaxBrake(bQ)if am then eb=LastMaxBrakeInAtmo else eb=LastMaxBrake end;maxThrust=Nav:maxForceForward()aK=n()if not ShowOdometer then return end;local ec=vec3(core.getWorldAcceleration()):len()/9.80665;if bQ>0.1 then ea=aK*bQ;e9=maxThrust/bQ end;cu[#cu+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e6=ConvertResolutionX(1120)e7=ConvertResolutionY(55)e8=e7+10 elseif am then local ed=ConvertResolutionX(770)cu[#cu+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ed,e7,ed,e8,dT)end;cu[#cu+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e6,e7,e6,e8,bQ/9.80665,e6,e7+20,e6,e8+20,ec)cu[#cu+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cu[#cu+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a5,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a6),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aK/1000,ConvertResolutionX(1240),ConvertResolutionY(10),eb/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dL)if bQ>0.1 then cu[#cu+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e9/1000,ConvertResolutionX(1240),ConvertResolutionY(20),ea/1000)else cu[#cu+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cu[#cu+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dL)end;cu[#cu+1]="</g>"end;function DrawThrottle(cu,dL,dU,dW)dU=math.floor(dU+0.5)local dh=throtPosY+10;local di=throtPosY+20;if o()==1 and not RemoteHud then dh=55;di=65 end;local ee="CRUISE"local unit="km/h"local ef=dW;if dL=="TRAVEL"or dL=="AUTOPILOT"then ee="THROT"unit="%"ef=dU;local eg="dim"if dU<0 then eg="red"end;cu[#cu+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eg,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dU),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cu[#cu+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,dh,ee,throtPosX+10,di,ef,unit)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dU=math.floor(C*100+0.5)local eg="red"if dU<0 then eg="red"end;cu[#cu+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eg,1-math.abs(dU),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cu[#cu+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,dh+40,"LIMIT",throtPosX+10,di+40,dU,"%")end;if am and AtmoSpeedAssist or Reentry then cu[#cu+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dh-40,"LIMIT: ",bm.." km/h")elseif not am and Autopilot then cu[#cu+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dh-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cu,cd)if cd<200000 and not am or cd and am then local eh=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local ei=0;if math.abs(eh)>1 then ei=45*math.log(math.abs(eh),10)if eh<0 then ei=-ei end end;cu[#cu+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(eh),d(ei))end end;function getHeading(cP)local ej=-vec3(core.getWorldVertical())cP=cP-cP:project_on(ej)local ek=vec3(0,0,1)ek=ek-ek:project_on(ej)local el=ek:cross(ej)local ei=ek:angle_between(cP)*constants.rad2deg;if cP:dot(el)<0 then ei=360-ei end;return ei end;function DrawRollLines(cu,centerX,centerY,dR,dZ,cC)local em=circleRad;local en=20;en=d(en)local eo=d(dR)if cC then for i=-45,45,5 do local ep=i;cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],ep,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cu[#cu+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+em+en-len,centerX,centerY+em+en)end;cu[#cu+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+em+en-35,dZ,centerX,centerY+em+en-25,eo)cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dR,centerX,centerY)cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+em+en-20,centerX+5,centerY+em+en-20,centerX,centerY+em+en-15)cu[#cu+1]="</g>"end;local dr=eo;if cC then dr=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local eq=20;local er=d(dr)local es=0;local et=centerY+em+en+20;local eu=centerX;if dZ~="YAW"then et=ConvertResolutionY(130)eu=ConvertResolutionX(960)end;local ev=[[<path class="txttick line" d="]]for i=d(er-(eq+10)-er%5+0.5),d(er+eq+10+er%5+0.5),5 do local bZ=eu+-i*5+dr*5;if i%10==0 then es=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cu[#cu+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bZ+5,et-12,q)elseif i%5==0 then es=5 end;if es==10 then ev=e([[%s M %f %f v %d]],ev,bZ,et-5,es)else ev=e([[%s M %f %f v %d]],ev,bZ,et-2.5,es)end end;cu[#cu+1]=ev..[["/>]]cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eu-5,et+10,eu+5,et+10,eu,et+5)if cC then dZ="HDG"end;cu[#cu+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eu,et+25,er,eu,et+35,dZ)end;function DrawArtificialHorizon(cu,dS,dR,centerX,centerY,cC,ew,bT)local em=circleRad;local ex=d(em*3/5)if em>0 then local ey=d(dS)local len=0;local ev=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dR,centerX,centerY)if not am then ev=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cu[#cu+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],em-1,centerX,centerY)cu[#cu+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ey-30-ey%5+0.5),d(ey+30+ey%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local b_=centerY+-i*5+dS*5;if len==30 then ev=e([[%s M %d %f h %d]],ev,centerX-ex-len,b_,len)if am then cu[#cu+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dR,centerX,centerY,centerX-ex+10,b_,i)cu[#cu+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dR,centerX,centerY,centerX+ex-10,b_,i)if i==0 or i==180 or i==-180 then cu[#cu+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dR,centerX,centerY,centerX-ex+20,b_,ex*2-40)end else cu[#cu+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ex+10,b_,i)cu[#cu+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ex-10,b_,i)end;ev=e([[%s M %d %f h %d]],ev,centerX+ex,b_,len)else ev=e([[%s M %d %f h %d]],ev,centerX-ex-len,b_,len)ev=e([[%s M %d %f h %d]],ev,centerX+ex,b_,len)end end;cu[#cu+1]=ev..[["/>]]local ez="PITCH"if not cC then ez="REL PITCH"end;if dS>90 and not am then dS=90-(dS-90)elseif dS<-90 and not am then dS=-90-(dS+90)end;if em>200 then if am then if bT>I then cu[#cu+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ew)end;cu[#cu+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dR,centerX,centerY)else cu[#cu+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ex+25,centerY-5,centerX-ex+20,centerY,centerX-ex+25,centerY+5,centerX-ex+50,centerY+4,ey)cu[#cu+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ex-25,centerY-5,centerX+ex-20,centerY,centerX+ex-25,centerY+5,centerX+ex-30,centerY+4,ey)cu[#cu+1]="</g>"end;local eA=d(em/3)cu[#cu+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eA,centerY,em-eA)if not am and cC then cu[#cu+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dR,centerX,centerY,centerX-ex+10,centerY,ex*2-20)end;cu[#cu+1]="</g>"if em<200 then if am and bT>I then cu[#cu+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-em,ez,centerX,centerY-em+10,ey,centerX,centerY-15,"Yaw",centerX,centerY+20,ew)else cu[#cu+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-em,ez,centerX,centerY-em+15,ey)end end end end;function DrawAltitudeDisplay(cu,cd,cC)local eB=altMeterX;local eC=altMeterY;local eD=78;local eE=19;local eF=AboveGroundLevel()if eF~=-1 then table.insert(cu,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eB+eD,eC+eE+20,eF))end;if cC and(cd<200000 and not am or cd and am)then table.insert(cu,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eB-1,eC-4,eD+2,eE+6,eB+1,eC-1,eD-4,eE))local cs=0;local eG=1;local eH=0;local eI=cd<0;local eJ=9;if eI then eJ=0 end;local cd=math.abs(cd)while cs<6 do local eK=11;local eL=16;local eM=9;local eN=14;local dq="altsm"if cs>2 then eL=eL+3;eK=eK+2;eN=eN+2;eM=eM-6;dq="altbig"end;if eI then dq=dq.." red"end;local eO=cd/eG%10;local eP=d(eO)local eQ=d((eP+1)%10)local eR=eH;if cs==0 then eR=eO-eP;if eI then eR=1-eR end end;if eI and(cs==0 or eH~=0)then local eS=eQ;eQ=eP;eP=eS end;local eT=eL*(eR-1)local eU=eT+eL;local bZ=eB+eM+(6-cs)*eK;local b_=eC+eN;table.insert(cu,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dq,bZ,b_+eT,eQ,bZ,b_+eU,eP))cs=cs+1;eG=eG*10;if eP==eJ then eH=eR else eH=0 end end;table.insert(cu,[[</g></g>]])end end;function DrawPrograde(cu,bd,bT,centerX,centerY)if bT>5 and not am or bT>I then local em=circleRad;local eV=20;local eW=20;local eX=vec3(bd)local eY=getRelativePitch(eX)local eZ=getRelativeYaw(eX)local e_=14;local f0=e_/2;local f1=-eZ/eW*em;local f2=eY/eV*em;local bZ=centerX+f1;local b_=centerY+f2;local ac=math.sqrt(f1^2+f2^2)local f3=[[<circle
                cx="]]..bZ..[["
                cy="]]..b_..[["
                r="]]..f0/e_..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bZ..[["
                cy="]]..b_..[["
                r="]]..f0 ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bZ-e_..[[,]]..b_..[[ h ]]..f0 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bZ+f0 ..[[,]]..b_..[[ h ]]..f0 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bZ..[[,]]..b_-e_..[[ v ]]..f0 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ac<em then cu[#cu+1]=f3 else local ei=math.atan(f2,f1)local f4=4;local f5=centerX+em*math.cos(ei)local f6=centerY+em*math.sin(ei)cu[#cu+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ei*180/math.pi,f5,f6,f5-f4,f6-f4/2,f4*2,f4,f5+f4,f6-f4,f4,f4,-f4,f4)end;if not am then eY=getRelativePitch(-eX)eZ=getRelativeYaw(-eX)f1=-eZ/eW*em;f2=eY/eV*em;bZ=centerX+f1;b_=centerY+f2;ac=math.sqrt(f1^2+f2^2)if ac<em then local f7=[[<circle
                        cx="]]..bZ..[["
                        cy="]]..b_..[["
                        r="]]..f0 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bZ..[[,]]..b_-e_..[[ v ]]..f0 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bZ..[[,]]..b_..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bZ..[[,]]..b_..[[)" />
                     <path
                        d="M ]]..bZ-f0 ..[[,]]..b_..[[ h ]]..e_..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bZ..[[,]]..b_..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bZ..[[,]]..b_..[[)"/>]]cu[#cu+1]=f7 end end end end;function DrawWarnings(cu)cu[#cu+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cu[#cu+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cu[#cu+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cu[#cu+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cu[#cu+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f8=ConvertResolutionX(960)local f9=ConvertResolutionY(860)local fa=ConvertResolutionY(880)local fb=ConvertResolutionY(900)local fc=ConvertResolutionY(960)local fd=ConvertResolutionY(200)local fe=ConvertResolutionY(150)local ff=ConvertResolutionY(960)if o()==1 and not RemoteHud then f9=ConvertResolutionY(135)fa=ConvertResolutionY(155)fb=ConvertResolutionY(175)fd=ConvertResolutionY(115)fe=ConvertResolutionY(95)end;if BrakeIsOn then cu[#cu+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f8,f9)elseif A>0 then cu[#cu+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f8,f9,A)end;if am and bi and hoverDetectGround()==-1 then cu[#cu+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f8,fd+50)end;if aq then cu[#cu+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f8,ff)end;if GearExtended then if M then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f8,fa)else cu[#cu+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f8,fa)end;local dz,dA=getDistanceDisplayString(Nav:getTargetGroundAltitude())cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f8,fb,dz..dA)end;if Z then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f8,fc+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(an-antigrav.getBaseAltitude())<501 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f8,fd+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cu[#cu+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f8,fd+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f8,fd+20,AutopilotStatus)elseif LockPitch~=nil then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f8,fd+20,d(LockPitch))elseif U then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f8,fd+20)elseif Reentry then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f8,fd+20)end;local fg,fh,fi=b6:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bd:normalize(),function(fj)if fj.noAtmosphericDensityAltitude>0 then return fj.radius+fj.noAtmosphericDensityAltitude else return fj.radius+fj.surfaceMaxAltitude*1.5 end end)local fk=fh;if fi~=nil and fh~=nil then fk=math.min(fi,fh)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local dz,dA=getDistanceDisplayString(HoldAltitude)cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f8,fd,dz..dA)if BrakeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f8,fd+50)end else local dz,dA=getDistanceDisplayString2(HoldAltitude)cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f8,fd,dz..dA)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f8,fd)elseif j()<0.09 and j()>0.05 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f8,fd)elseif j()<0.05 then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f8,fd)end end;if IntoOrbit then if bo~=nil then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f8,fd,bo)end end;if BrakeLanding then if StrongBrakes then cu[#cu+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f8,fd)else cu[#cu+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f8,fd)end end;if ProgradeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f8,fd)end;if RetrogradeIsOn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f8,fd)end;if TurnBurn then cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f8,fe)elseif fk~=nil and j()==0 then local dz,dA=getDistanceDisplayString(fk)local travelTime=b7.computeTravelTime(be,0,fk)local fl="Collision"if fg.noAtmosphericDensityAltitude>0 then fl="Atmosphere"end;cu[#cu+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f8,fe,fg.name,fl,FormatTimeString(travelTime),dz..dA)end;if VectorToTarget and not IntoOrbit then cu[#cu+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f8,fd+30,VectorStatus)end;cu[#cu+1]="</g>"end;function DisplayOrbitScreen(cu)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fm=OrbitMapX;local fn=OrbitMapY;local fo=OrbitMapSize;local fp=4;fn=fn+fp;local fq=15;local bZ=fm+fo+fm/2+fp;local b_=fn+fo/2+5+fp;local fr,fs,ft,fu;fr=fo/4;fu=0;cu[#cu+1]=[[<g class="pbright txtorb txtmid">]]cu[#cu+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fo+fm*2,fo+fn,fp,fp)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ft=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fr*2)fs=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ft*(1-orbit.eccentricity)fu=fr-orbit.periapsis.altitude/ft-planet.radius/ft;local fv=""if orbit.periapsis.altitude<=0 then fv='redout'end;cu[#cu+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fv,fm+fo/2+fu+fp,fn+fo/2+fp,fr,fs)cu[#cu+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fm+fo/2+fp,fn+fo/2+fp,planet.radius/ft)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cu[#cu+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bZ-35,b_-5,fm+fo/2+fr+fu,b_-5)cu[#cu+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bZ,b_)b_=b_+fq;local dz,dA=getDistanceDisplayString(orbit.apoapsis.altitude)cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,dz..dA)b_=b_+fq;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,FormatTimeString(orbit.timeToApoapsis))b_=b_+fq;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,getSpeedDisplayString(orbit.apoapsis.speed))end;b_=fn+fo/2+5+fp;bZ=fm-fm/2+10+fp;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cu[#cu+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bZ+35,b_-5,fm+fo/2-fr+fu,b_-5)cu[#cu+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bZ,b_)b_=b_+fq;local dz,dA=getDistanceDisplayString(orbit.periapsis.altitude)cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,dz..dA)b_=b_+fq;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,FormatTimeString(orbit.timeToPeriapsis))b_=b_+fq;cu[#cu+1]=e([[<text x="%f" y="%f">%s</text>]],bZ,b_,getSpeedDisplayString(orbit.periapsis.speed))end;cu[#cu+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fm+fo/2+fp,20+fp,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fw=orbit.timeToApoapsis/orbit.period*2*math.pi;local fx=fr*math.cos(fw)local fy=fs*math.sin(fw)cu[#cu+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fm+fo/2+fx+fu+fp,fn+fo/2+fy+fp)end;cu[#cu+1]=[[</g>]]end end;function getDistanceDisplayString(ac)local fz=ac>100000;local bE,dA=""if fz then bE,dA=round(ac/1000/200,1),"SU"elseif ac<1000 then bE,dA=round(ac,1),"m"else bE,dA=round(ac/1000,1),"Km"end;return bE,dA end;function getDistanceDisplayString2(ac)local fz=ac>100000;local bE,dA=""if fz then bE,dA=round(ac/1000/200,2)," SU"elseif ac<1000 then bE,dA=round(ac,2)," M"else bE,dA=round(ac/1000,2)," KM"end;return bE,dA end;function getSpeedDisplayString(bT)return d(round(bT*3.6,0)+0.5).." km/h"end;function FormatTimeString(fA)local fB=0;local fC=0;local fD=0;if fA<60 then fA=d(fA)elseif fA<3600 then fB=d(fA/60)fA=d(fA%60)elseif fA<86400 then fC=d(fA/3600)fB=d(fA%3600/60)else fD=d(fA/86400)fC=d(fA%86400/3600)end;if fD>0 then return fD.."d "..fC.."h "elseif fC>0 then return fC.."h "..fB.."m "elseif fB>0 then return fB.."m "..fA.."s"elseif fA>0 then return fA.."s"else return"0s"end end;function getMagnitudeInDirection(ds,fE)ds=vec3(ds)fE=vec3(fE):normalize()local bE=ds*fE;return bE.x+bE.y+bE.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local fF=AtlasOrdered[AutopilotTargetIndex].index;local fG=b0[0][fF]if fG.center then AutopilotTargetName=fG.name;a4=b6[0][fF]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fG;for _,bD in pairs(b6[0])do if bD.name==CustomTarget.planetname then a4=bD;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fF=AtlasOrdered[AutopilotTargetIndex].index;local fG=b0[0][fF]if fG.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fF=AtlasOrdered[AutopilotTargetIndex].index;local fG=b0[0][fF]if fG.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fH=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return fH end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bd=core.getWorldVelocity()local bT=vec3(bd):len()local fI=unit.getThrottle()/100;if AtmoSpeedAssist then fI=z end;local fJ,fK=b7.computeDistanceAndTime(vec3(bd):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fI,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fL;if not TurnBurn and bT>0 then _,fL=GetAutopilotBrakeDistanceAndTime(bT)else _,fL=GetAutopilotTBBrakeDistanceAndTime(bT)end;local fM=0;local fN=0;if AutopilotCruising or not Autopilot and bT>5 then fN=b7.computeTravelTime(bT,0,AutopilotDistance)elseif a0+fJ<AutopilotDistance then fM=AutopilotDistance-(a0+fJ)fN=b7.computeTravelTime(8333.0556,0,fM)else local fO=(AutopilotDistance-a0)/fJ;fJ=AutopilotDistance-a0;fK=fK*fO end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fN elseif AutopilotBraking then return fL elseif AutopilotCruising then return fN+fL else return fK+a1+fN end end;function GetAutopilotBrakeDistanceAndTime(bT)if not am then RefreshLastMaxBrake()return b7.computeDistanceAndTime(bT,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(bT,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bT)RefreshLastMaxBrake()return b7.computeDistanceAndTime(bT,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fP=-1;local fQ=-1;if vBooster then fP=vBooster.distance()end;if hover then fQ=hover.distance()end;if fP~=-1 and fQ~=-1 then if fP<fQ then return fP else return fQ end elseif fP~=-1 then return fP elseif fQ~=-1 then return fQ else return-1 end end;function AboveGroundLevel()local fR=-1;local fS=hoverDetectGround()if telemeter_1 then fR=telemeter_1.getDistance()end;if fS~=-1 and fR~=-1 then if fS<fR then return fS else return fR end elseif fS~=-1 then return fS else return fR end end;function tablelength(fT)local fU=0;for _ in pairs(fT)do fU=fU+1 end;return fU end;function BeginProfile(fV)ProfileTimeStart=system.getTime()end;function EndProfile(fV)local fW=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fW;ProfileCount=ProfileCount+1;if fW>ProfileTimeMax then ProfileTimeMax=fW end;if fW<ProfileTimeMin then ProfileTimeMin=fW end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fX=ProfileTimeSum;local fY=ProfileTimeSum/ProfileCount;local fZ=ProfileTimeMin;local f_=ProfileTimeMax;local g0=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fX,fY,fZ,f_,g0))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local g1=radar_1.getEntries()local g2=radar_1.getData()local g3=ConvertResolutionX(1770)local g4=ConvertResolutionY(330)if#g1>0 then local g5=g2:find('identifiedConstructs":%[%]')if g5==nil and perisPanelID==nil then af=1;ToggleRadarPanel()end;if g5~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ad=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g3,g4,#g1)local g6={}for bC,bD in pairs(g1)do if radar_1.hasMatchingTransponder(bD)==1 then table.insert(g6,bD)end end;if#g6>0 then local b_=ConvertResolutionY(15)local bZ=ConvertResolutionX(1370)ad=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,bZ,b_)for bC,bD in pairs(g6)do b_=b_+20;ad=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,bZ,b_,radar_1.getConstructName(bD))end end else local g7;g7=g2:find('worksInEnvironment":false')if g7 then ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g3,g4)else ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g3,g4)end;if radarPanelID~=nil then af=0;ToggleRadarPanel()end end end end;function DisplayMessage(cu,dz)if dz~="empty"then cu[#cu+1]=[[<text class="msg" x="50%%" y="310" >]]for g8 in string.gmatch(dz,"([^\n]+)")do cu[#cu+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g8)end;cu[#cu+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function updateDistance()local bM=system.getTime()local bd=vec3(core.getWorldVelocity())local dV=vec3(bd):len()local g9=bM-ap;if dV>1.38889 then dV=dV/1000;local ga=dV*(bM-ap)TotalDistanceTravelled=TotalDistanceTravelled+ga;a5=a5+ga end;a6=a6+g9;TotalFlightTime=TotalFlightTime+g9;ap=bM end;function composeAxisAccelerationFromTargetSpeedV(gb,gc)local gd=vec3()local ge=vec3()if gb==axisCommandId.longitudinal then gd=vec3(core.getConstructOrientationForward())ge=vec3(core.getConstructWorldOrientationForward())elseif gb==axisCommandId.vertical then gd=vec3(core.getConstructOrientationUp())ge=vec3(core.getConstructWorldOrientationUp())elseif gb==axisCommandId.lateral then gd=vec3(core.getConstructOrientationRight())ge=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gf=vec3(core.getWorldGravity())local gg=gf:dot(ge)local gh=vec3(core.getWorldAirFrictionAcceleration())local gi=gh:dot(ge)local gj=vec3(core.getVelocity())local gk=gj:dot(gd)local gl=gc*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gl-gk)local gm=targetSpeedPID2:get()local gn=(gm-gi-gg)*ge;return gn end;function composeAxisAccelerationFromTargetSpeed(gb,gc)local gd=vec3()local ge=vec3()if gb==axisCommandId.longitudinal then gd=vec3(core.getConstructOrientationForward())ge=vec3(core.getConstructWorldOrientationForward())elseif gb==axisCommandId.vertical then gd=vec3(core.getConstructOrientationUp())ge=vec3(core.getConstructWorldOrientationUp())elseif gb==axisCommandId.lateral then gd=vec3(core.getConstructOrientationRight())ge=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gf=vec3(core.getWorldGravity())local gg=gf:dot(ge)local gh=vec3(core.getWorldAirFrictionAcceleration())local gi=gh:dot(ge)local gj=vec3(core.getVelocity())local gk=gj:dot(gd)local gl=gc*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gl-gk)local gm=targetSpeedPID:get()local gn=(gm-gi-gg)*ge;return gn end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b0=Atlas()for bC,bD in pairs(b0[0])do if aE==nil or bD.center.x<aE then aE=bD.center.x end;if aF==nil or bD.center.x>aF then aF=bD.center.x end;if aG==nil or bD.center.y<aG then aG=bD.center.y end;if aH==nil or bD.center.y>aH then aH=bD.center.y end end;b1=""local go=1.1*(aF-aE)/1920;local gp=1.4*(aH-aG)/1080;for bC,bD in pairs(b0[0])do local bZ=960+bD.center.x/go;local b_=540+bD.center.y/gp;b1=b1 ..'<circle cx="'..bZ..'" cy="'..b_..'" r="'..bD.radius/go*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bD.name,"Moon")and not string.match(bD.name,"Sanctuary")and not string.match(bD.name,"Space")then b1=b1 .."<text x='"..bZ.."' y='"..b_+bD.radius/go*30+20 .."' font-size='28' fill="..as.." text-anchor='middle' font-family='Montserrat'>"..bD.name.."</text>"end end;local ch=vec3(core.getConstructWorldPos())local bZ=960+ch.x/go;local b_=540+ch.y/gp;b1=b1 ..'<circle cx="'..bZ..'" cy="'..b_..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='"..bZ.."' y='"..b_-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b1=b1 ..[[</svg>]]b2=go;b3=gp;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b1)local ch=vec3(core.getConstructWorldPos())local bZ=960+ch.x/go;local b_=540+ch.y/gp;b1='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='80' y='105' font-size='18' fill="..as.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b4=screen_2.addContent((bZ-80)/19.20,(b_-80)/10.80,b1)end end;function PlanetRef()local function gq(gr)return type(gr)=='number'end;local function gs(gr)return type(tonumber(gr))=='number'end;local function gt(gu)return type(gu)=='table'end;local function gv(gw)return type(gw)=='string'end;local function gx(bD)return gt(bD)and gq(bD.x and bD.y and bD.z)end;local function gy(gz)return gt(gz)and gq(gz.latitude and gz.longitude and gz.altitude and gz.bodyId and gz.systemId)end;local gA=math.pi/180;local gB=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ci='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gC=utils.clamp;local function float_eq(c7,c8)if c7==0 then return math.abs(c8)<1e-09 end;if c8==0 then return math.abs(c7)<1e-09 end;return math.abs(c7-c8)<math.max(math.abs(c7),math.abs(c8))*epsilon end;local function gD(gr)local bE=string.gsub(string.reverse(e('%.4f',gr)),'^0*%.?','')return bE==''and'0'or string.reverse(bE)end;local function gE(gF)if gx(gF)then return e('{x=%.3f,y=%.3f,z=%.3f}',gF.x,gF.y,gF.z)end;if gt(gF)and not getmetatable(gF)then local gG={}local gH=next(gF)if type(gH)=='nil'or gH==1 then gG=gF else for bC,bD in pairs(gF)do local ef=gE(bD)if type(bC)=='number'then table.insert(gG,e('[%s]=%s',bC,ef))else table.insert(gG,e('%s=%s',bC,ef))end end end;return e('{%s}',table.concat(gG,','))end;if gv(gF)then return e("'%s'",gF:gsub("'",[[\']]))end;return tostring(gF)end;local gI={}gI.__index=gI;gI.__tostring=function(gF,gJ)local gK={}for bC in pairs(gF)do table.insert(gK,bC)end;table.sort(gK)local gG={}for _,bC in ipairs(gK)do local ef=gE(gF[bC])if type(bC)=='number'then table.insert(gG,e('[%s]=%s',bC,ef))else table.insert(gG,e('%s=%s',bC,ef))end end;if gJ then return e('%s%s',gJ,table.concat(gG,',\n'..gJ))end;return e('{%s}',table.concat(gG,','))end;gI.__eq=function(gL,gM)return gL.planetarySystemId==gM.planetarySystemId and gL.bodyId==gM.bodyId and float_eq(gL.radius,gM.radius)and float_eq(gL.center.x,gM.center.x)and float_eq(gL.center.y,gM.center.y)and float_eq(gL.center.z,gM.center.z)and float_eq(gL.GM,gM.GM)end;local function gN(cj,ck,gO,ca,gP)assert(gs(cj),'Argument 1 (planetarySystemId) must be a number:'..type(cj))assert(gs(ck),'Argument 2 (bodyId) must be a number:'..type(ck))assert(gs(gO),'Argument 3 (radius) must be a number:'..type(gO))assert(gt(ca),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ca))assert(gs(gP),'Argument 5 (GM) must be a number:'..type(gP))return setmetatable({planetarySystemId=tonumber(cj),bodyId=tonumber(ck),radius=tonumber(gO),center=vec3(ca),GM=tonumber(gP)},gI)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gQ)return e('::pos{%d,%d,%s,%s,%s}',gQ.systemId,gQ.bodyId,gD(gQ.latitude*gB),gD(gQ.longitude*gB),gD(gQ.altitude))end;MapPosition.__eq=function(gL,gM)return gL.bodyId==gM.bodyId and gL.systemId==gM.systemId and float_eq(gL.latitude,gM.latitude)and float_eq(gL.altitude,gM.altitude)and(float_eq(gL.longitude,gM.longitude)or float_eq(gL.latitude,math.pi/2)or float_eq(gL.latitude,-math.pi/2))end;local function gR(gS,ck,ce,cf,cd)local cj=gS;if gv(gS)and not cf and not cd and not ck and not ce then cj,ck,ce,cf,cd=string.match(gS,ci)assert(cj,'Argument 1 (position string) is malformed.')else assert(gs(cj),'Argument 1 (systemId) must be a number:'..type(cj))assert(gs(ck),'Argument 2 (bodyId) must be a number:'..type(ck))assert(gs(ce),'Argument 3 (latitude) must be in degrees:'..type(ce))assert(gs(cf),'Argument 4 (longitude) must be in degrees:'..type(cf))assert(gs(cd),'Argument 5 (altitude) must be in meters:'..type(cd))end;cj=tonumber(cj)ck=tonumber(ck)ce=tonumber(ce)cf=tonumber(cf)cd=tonumber(cd)if ck==0 then return setmetatable({latitude=ce,longitude=cf,altitude=cd,bodyId=ck,systemId=cj},MapPosition)end;return setmetatable({latitude=gA*gC(ce,-90,90),longitude=gA*(cf%360),altitude=cd,bodyId=ck,systemId=cj},MapPosition)end;local gT={}gT.__index=gT;gT.__tostring=function(gF,gJ)local gU=gJ and gJ..'  'local gV={}local gK={}for bC in pairs(gF)do table.insert(gK,bC)end;table.sort(gK)for _,gW in ipairs(gK)do bdy=gF[gW]local gX=gI.__tostring(bdy,gU)if gJ then table.insert(gV,e('[%s]={\n%s\n%s}',gW,gX,gJ))else table.insert(gV,e('  [%s]=%s',gW,gX))end end;if gJ then return e('\n%s%s%s',gJ,table.concat(gV,',\n'..gJ),gJ)end;return e('{\n%s\n}',table.concat(gV,',\n'))end;local function gY(gZ)local b0={}local pid;for _,bD in pairs(gZ)do local cq=bD.planetarySystemId;if type(cq)~='number'then error('Invalid planetary system ID: '..tostring(cq))elseif pid and cq~=pid then error('Mismatch planetary system IDs: '..cq..' and '..pid)end;local g_=bD.bodyId;if type(g_)~='number'then error('Invalid body ID: '..tostring(g_))elseif b0[g_]then error('Duplicate body ID: '..tostring(g_))end;setmetatable(bD.center,getmetatable(vec3.unit_x))b0[g_]=setmetatable(bD,gI)pid=cq end;return setmetatable(b0,gT)end;b5={}local function h0(gZ)return setmetatable({galaxyAtlas=gZ or{}},b5)end;b5.__index=function(gu,i)if type(i)=='number'then local system=gu.galaxyAtlas[i]return gY(system)end;return rawget(b5,i)end;b5.__pairs=function(gF)return function(gu,bC)local h1,nv=next(gu,bC)return h1,nv and gY(nv)end,gF.galaxyAtlas,nil end;b5.__tostring=function(gF)local h2={}for _,h3 in pairs(gF or{})do local h4=h3:getPlanetarySystemId()local h5=gT.__tostring(h3,'    ')table.insert(h2,e('  [%s]={%s\n  }',h4,h5))end;return e('{\n%s\n}\n',table.concat(h2,',\n'))end;b5.BodyParameters=gN;b5.MapPosition=gR;b5.PlanetarySystem=gY;function b5.createBodyParameters(h6,ck,h7,h8,h9,ha,hb)assert(gs(h6),'Argument 1 (planetarySystemId) must be a number:'..type(h6))assert(gs(ck),'Argument 2 (bodyId) must be a number:'..type(ck))assert(gs(h7),'Argument 3 (surfaceArea) must be a number:'..type(h7))assert(gt(h8),'Argument 4 (aPosition) must be an array or vec3:'..type(h8))assert(gt(h9),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h9))assert(gs(ha),'Argument 6 (altitude) must be in meters:'..type(ha))assert(gs(hb),'Argument 7 (gravityAtPosition) must be number:'..type(hb))local gO=math.sqrt(h7/4/math.pi)local ac=gO+ha;local hc=vec3(h8)+ac*vec3(h9)local gP=hb*ac*ac;return gN(h6,ck,gO,hc,gP)end;b5.isMapPosition=gy;function b5:getPlanetarySystem(gS)if i==nil then i=0 end;if nv==nil then nv=0 end;local h6=gS;if gy(gS)then h6=gS.systemId end;if type(h6)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gT then system=gY(system)end;return system end end end;function gT:castIntersections(hd,fE,he,hf)local he=he or function(fj)return 1.05*fj.radius end;local hg={}if hf then for _,i in ipairs(hf)do hg[i]=self[i]end else hf={}for bC,fj in pairs(self)do table.insert(hf,bC)hg[bC]=fj end end;local function hh(hi,hj)local hk=hg[hi].center-hd;local hl=hg[hj].center-hd;return hk:len()<hl:len()end;table.sort(hf,hh)local hm=fE:normalize()for i,cq in ipairs(hf)do local fj=hg[cq]local hn=fj.center-hd;local gO=he(fj)local ho=hn:dot(hm)local hp=ho^2-(hn:len2()-gO^2)if hp>=0 then local hq=math.sqrt(hp)local fh=ho+hq;local fi=ho-hq;if fi>0 then return fj,fh,fi elseif fh>0 then return fj,fh,nil end end end;return nil,nil,nil end;function gT:closestBody(hr)assert(type(hr)=='table','Invalid coordinates.')local hs,fj;local ht=vec3(hr)for _,hu in pairs(self)do local hv=(hu.center-ht):len2()if(not fj or hv<hs)and hu.name~="Space"then fj=hu;hs=hv end end;return fj end;function gT:convertToBodyIdAndWorldCoordinates(gS)local hw=gS;if gv(gS)then hw=gR(gS)end;if hw.bodyId==0 then return 0,vec3(hw.latitude,hw.longitude,hw.altitude)end;local hu=self:getBodyParameters(hw)if hu then return hw.bodyId,hu:convertToWorldCoordinates(hw)end end;function gT:getBodyParameters(gS)local ck=gS;if gy(gS)then ck=gS.bodyId end;assert(gs(ck),'Argument 1 (bodyId) must be a number:'..type(ck))return self[ck]end;function gT:getPlanetarySystemId()local _,bD=next(self)return bD and bD.planetarySystemId end;function gI:convertToMapPosition(ca)assert(gt(ca),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ca))local cb=vec3(ca)if self.bodyId==0 then return setmetatable({latitude=cb.x,longitude=cb.y,altitude=cb.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cc=cb-self.center;local ac=cc:len()local cd=ac-self.radius;local ce=0;local cf=0;if not float_eq(ac,0)then local cg=math.atan(cc.y,cc.x)cf=cg>=0 and cg or 2*math.pi+cg;ce=math.pi/2-math.acos(cc.z/ac)end;return setmetatable({latitude=ce,longitude=cf,altitude=cd,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gI:convertToWorldCoordinates(gS)local hw=gv(gS)and gR(gS)or gS;if hw.bodyId==0 then return vec3(hw.latitude,hw.longitude,hw.altitude)end;assert(gy(hw),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hw.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hw.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cl=math.cos(hw.latitude)return self.center+(self.radius+hw.altitude)*vec3(cl*math.cos(hw.longitude),cl*math.sin(hw.longitude),math.sin(hw.latitude))end;function gI:getAltitude(ca)return(vec3(ca)-self.center):len()-self.radius end;function gI:getDistance(ca)return(vec3(ca)-self.center):len()end;function gI:getGravity(ca)local hx=self.center-vec3(ca)local hy=hx:len2()return self.GM/hy*hx/math.sqrt(hy)end;return setmetatable(b5,{__call=function(_,...)return h0(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gv(gw)return type(gw)=='string'end;local function gt(gu)return type(gu)=='table'end;local function float_eq(c7,c8)if c7==0 then return math.abs(c8)<1e-09 end;if c8==0 then return math.abs(c7)<1e-09 end;return math.abs(c7-c8)<math.max(math.abs(c7),math.abs(c8))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cd)assert(self.body)local ac=cd+self.body.radius;if not float_eq(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gS,bd)assert(self.body)assert(gt(gS)or gv(gS))assert(gt(bd))local ch=(gv(gS)or PlanetRef.isMapPosition(gS))and self.body:convertToWorldCoordinates(gS)or vec3(gS)local bD=vec3(bd)local hz=ch-self.body.center;local hl=bD:len2()local hA=hz:len()local hB=self.body.GM;local hC=((hl-hB/hA)*hz-hz:dot(bD)*bD)/hB;local c7=hB/(2*hB/hA-hl)local hD=hC:len()local hm=hC:normalize()local hE=c7*(1-hD)local hF=c7*(1+hD)local hG=hE*hm+self.body.center;local hH=hD<=1 and-hF*hm+self.body.center or nil;local hI=math.sqrt(c7*hB*(1-hD*hD))local hJ=hH and 2*math.pi*math.sqrt(c7^3/hB)local hK=math.acos(hC:dot(hz)/(hD*hA))if hz:dot(bD)<0 then hK=-(hK-2*math.pi)end;local hL=math.acos((math.cos(hK)+hD)/(1+hD*math.cos(hK)))local hM=hL;if hM<0 then hM=hM+2*math.pi end;local hN=hM-hD*math.sin(hM)local hO=0;local hP=0;local hQ=0;if hJ~=nil then hO=hN/(2*math.pi/hJ)hP=hJ-hO;hQ=hP+hJ/2;if hK-math.pi>0 then hP=hO;hQ=hP+hJ/2 end;if hQ>hJ then hQ=hQ-hJ end end;return{periapsis={position=hG,speed=hI/hE,circularOrbitSpeed=math.sqrt(hB/hE),altitude=hE-self.body.radius},apoapsis=hH and{position=hH,speed=hI/hF,circularOrbitSpeed=math.sqrt(hB/hF),altitude=hF-self.body.radius},currentVelocity=bD,currentPosition=ch,eccentricity=hD,period=hJ,eccentricAnomaly=hL,meanAnomaly=hN,timeToPeriapsis=hP,timeToApoapsis=hQ}end;local function hR(hS)local hu=PlanetRef.BodyParameters(hS.planetarySystemId,hS.bodyId,hS.radius,hS.center,hS.GM)return setmetatable({body=hu},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hR(...)end})end;function Kinematics()local b7={}local hT=30000000/3600;local hU=hT*hT;local hV=100;local function hW(bD)return 1/math.sqrt(1-bD*bD/hU)end;function b7.computeAccelerationTime(hX,hY,hZ)local h_=hT*math.asin(hX/hT)return(hT*math.asin(hZ/hT)-h_)/hY end;function b7.computeDistanceAndTime(hX,hZ,i0,i1,i2,i3)i2=i2 or 0;i3=i3 or 0;local i4=hX<=hZ;local i5=i1*(i4 and 1 or-1)/i0;local i6=-i3/i0;local i7=i5+i6;if i4 and i7<=0 or not i4 and i7>=0 then return-1,-1 end;local i8,i9=0,0;if i5~=0 and i2>0 then local h_=math.asin(hX/hT)local ia=math.pi*(i5/2+i6)local ib=i5*i2;local ic=hT*math.pi;local bD=function(gu)local cW=(ia*gu-ib*math.sin(math.pi*gu/2/i2)+ic*h_)/ic;local id=math.tan(cW)return hT*id/math.sqrt(id*id+1)end;local ie=i4 and function(gw)return gw>=hZ end or function(gw)return gw<=hZ end;i9=2*i2;if ie(bD(i9))then local ig=0;while math.abs(i9-ig)>0.5 do local gu=(i9+ig)/2;if ie(bD(gu))then i9=gu else ig=gu end end end;local ih=hX;local ii=i9/hV;for ij=1,hV do local bT=bD(ij*ii)i8=i8+(bT+ih)*ii/2;ih=bT end;if i9<2*i2 then return i8,i9 end;hX=ih end;local h_=hT*math.asin(hX/hT)local bF=(hT*math.asin(hZ/hT)-h_)/i7;local ik=hU*math.cos(h_/hT)/i7;local ac=ik-hU*math.cos((i7*bF+h_)/hT)/i7;return ac+i8,bF+i9 end;function b7.computeTravelTime(hX,hY,ac)if ac==0 then return 0 end;if hY>0 then local h_=hT*math.asin(hX/hT)local ik=hU*math.cos(h_/hT)/hY;return(hT*math.acos(hY*(ik-ac)/hU)-h_)/hY end;if hX==0 then return-1 end;assert(hX>0,'Acceleration and initial speed are both zero.')return ac/hX end;function b7.lorentz(bD)return hW(bD)end;return b7 end;function safeZone(il)local gO=500000;local im,io,ip=math.huge;local iq=false;local ir=vec3({13771471,7435803,-128971})local is=18000000;im=vec3(il):dist(ir)if im<is then return true,math.abs(im-is),"Safe Zone",0 end;io=vec3(il):dist(vec3(planet.center))if io<gO then iq=true end;if math.abs(io-gO)<math.abs(im-is)then return iq,math.abs(io-gO),planet.name,planet.bodyId else return iq,math.abs(im-is),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.44;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b5=PlanetRef()b6=b5(Atlas())b7=Kinematics()b9=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(it)if dbHud_1 then if not a7 then for bC,bD in pairs(b)do dbHud_1.setStringValue(bD,g(_G[bD]))if it and dbHud_2 then dbHud_2.setStringValue(bD,g(_G[bD]))end end;for bC,bD in pairs(a)do dbHud_1.setStringValue(bD,g(_G[bD]))if it and dbHud_2 then dbHud_2.setStringValue(bD,g(_G[bD]))end end;c("Saved Variables to Datacore")if it and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bO=j()if door and(bO>0 or bO==0 and an<10000)then for _,bD in pairs(door)do bD.toggle()end end;if switch then for _,bD in pairs(switch)do bD.toggle()end end;if forcefield and(bO>0 or bO==0 and an<10000)then for _,bD in pairs(forcefield)do bD.toggle()end end;SaveDataBank()if button then button.activate()end end;local function iu(ef,iv)if iv==nil then iv=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not iv then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,ef)end;local function iw(ef,iv)if iv==nil then iv=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not iv then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ef)end;function script.onTick(ix)if ix=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iy=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iy and not Autopilot then ac=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ac=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dz,dA=getDistanceDisplayString(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dz,dA=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dz,dA=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dz..'", "unit":"'..dA..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dz,dA=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dz)..'", "unit":"'..dA..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ix=="oneSecond"then ak=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cu={}local dL=GetFlightStyle()DrawOdometer(cu,a5,TotalDistanceTravelled,dL,a6)if ShouldCheckDamage then CheckDamage(cu)end;ae=table.concat(cu,"")collectgarbage("collect")elseif ix=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local bE=json.decode(dbHud_1.getStringValue("SavedLocations"))if bE~=nil then _G["SavedLocations"]=bE;local cs=-1;local co;for bC,bD in pairs(SavedLocations)do if bD.name and bD.name=="SatNav Location"then cs=bC;break end end;if cs~=-1 then co=SavedLocations[cs]cs=-1;for bC,bD in pairs(b0[0])do if bD.name and bD.name=="SatNav Location"then cs=bC;break end end;if cs>-1 then b0[0][cs]=co end;UpdateAtlasLocationsList()W=co.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ix=="msgTick"then local cu={}DisplayMessage(cu,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif ix=="animateTick"then bb=true;ba=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif ix=="hudTick"then local cu={}HUDPrologue(cu)if showHud then UpdateHud(cu)else DisplayOrbitScreen(cu)DrawWarnings(cu)end;HUDEpilogue(cu)cu[#cu+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cu,W)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cu)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cu)if screen_1.getMouseState()==1 then CheckButtons()end;cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cu)if not ba and not bb then local iz=table.concat(cu,"")cu={}cu[#cu+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cu[#cu+1]=b1;cu[#cu+1]=iz;cu[#cu+1]="</body>"ba=true;cu[#cu+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cu,"")system.setScreen(content)elseif bb then local iz=table.concat(cu,"")cu={}cu[#cu+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cu[#cu+1]=b1;cu[#cu+1]=iz;cu[#cu+1]="</body>"end;if not ba then cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if ac>DeadZone then DrawCursorLine(cu)end else SetButtonContains()DrawButtons(cu)end;cu[#cu+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end;cu[#cu+1]=[[</svg></body>]]content=table.concat(cu,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ix=="apTick"then rateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())am=j()>0;local bF=system.getTime()local iA=bF-bj;bj=bF;local cx=vec3(core.getConstructWorldOrientationForward())local cy=vec3(core.getConstructWorldOrientationRight())local iB=vec3(core.getConstructWorldOrientationUp())local cz=vec3(core.getWorldVertical())local iC=vec3(core.getConstructWorldPos())local dN=getRoll(cz,cx,cy)local dO=dN/180*math.pi;local dP=math.cos(dO)local dQ=math.sin(dO)local cA=getPitch(cz,cx,cy)local iD=getPitch(cz,cx,cy*dP+iB*dQ)local iE=-math.deg(cR(iB,bd,cx))local iF=math.deg(cR(cy,bd,cx))bi=am and iE<-YawStallAngle or iE>YawStallAngle or iF<-PitchStallAngle or iF>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not V then bh=-bh end;P=0;T=0;O=0;bd=vec3(core.getWorldVelocity())be=vec3(bd):len()sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bd)aj=hoverDetectGround()local bQ=planet:getGravity(core.getConstructWorldPos()):len()*n()bk=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iC)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*ResolutionX;aa=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not ba then a9=a9+bg;aa=aa+bh end else a9=0;aa=0 end else a9=a9+bg;aa=aa+bh;ac=math.sqrt(a9*a9+aa*aa)if not V and o()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bh,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bg,-100,100)+0.5)*2*L else a9=0;aa=0 end end end;local iG=be>8334;if be>SpaceSpeedLimit/3.6 and not am and not Autopilot and not iG then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iG and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iG;if am and j()>0.09 then if be>bm/3.6 and not AtmoSpeedAssist and not ar then BrakeIsOn=true;ar=true elseif not AtmoSpeedAssist and ar then if be<bm/3.6 then BrakeIsOn=false;ar=false end end end;if BrakeIsOn then S=1 else S=0 end;an=core.getAltitude()if an==0 then an=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ag then BrakeIsOn=false;local iH=false;if CustomTarget~=nil then iH=AlignToWorldVector(CustomTarget.position-iC,0.01)else iH=AlignToWorldVector(vec3(bd),0.01)end;bc=true;if iH and(math.abs(dN)<2 or math.abs(iD)>85)and be>=bm/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()else iw(math.floor(bm))z=0 end elseif be>I then AlignToWorldVector(vec3(bd),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif be>I then AlignToWorldVector(-vec3(bd))end end;if not ProgradeIsOn and ag then if j()==0 then J=true;BeginReentry()ag=false;ai=true else ag=false;ToggleAutopilot()end end;local ej=vec3(core.getWorldVertical())*-1;local eh=bd.x*ej.x+bd.y*ej.y+bd.z*ej.z;if ai and CustomTarget~=nil and(an<HoldAltitude+200 and an>HoldAltitude-200)and be*3.6>bm-100 and math.abs(eh)<20 and j()>=0.1 and(CustomTarget.position-iC):len()>2000+an then ToggleAutopilot()ai=false end;if VertTakeOff then bc=true;if eh<-30 then W="Unable to achieve lift. Safety Landing."a8=0;bc=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if an<antigrav.getBaseAltitude()-100 then bn=0;a8=15;BrakeIsOn=false elseif eh>0 then BrakeIsOn=true;a8=0 elseif eh<-30 then BrakeIsOn=true;a8=15 elseif an>=antigrav.getBaseAltitude()then BrakeIsOn=true;a8=0;VertTakeOff=false;W="Takeoff complete. Singularity engaged"end else if j()>0.08 then bn=0;BrakeIsOn=false;a8=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bz then bn=0;a8=20 else a8=0;bn=36;iw(3500)end else bc=autoRollPreference;IntoOrbit=true;bx=false;CancelIntoOrbit=false;br=false;bp=nil;bq=nil;if bw==nil then bw=planet end;VertTakeOff=false end end;if bn~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iI=utils.clamp(bn-iD,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iI)local iJ=utils.clamp(vTpitchPID:get(),-1,1)O=iJ end end;if IntoOrbit then if bw==nil then if VectorToTarget then bw=a4 else bw=planet end end;if not bu then if bw.hasAtmosphere then bv=math.floor(bw.radius*(TargetOrbitRadius-1)+bw.noAtmosphericDensityAltitude)else bv=math.floor(bw.radius*(TargetOrbitRadius-1)+bw.surfaceMaxAltitude)end;bu=true end;if AltitudeHold or VectorToTarget then if not ah then bv=HoldAltitude;br=true;AltitudeHold=false end;if VectorToTarget then bt.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local iK,iL=b9(bw):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bw.center):len()-bw.radius)local iM=dN;if orbit.periapsis~=nil and orbit.eccentricity<1 and an>bv and an<bv*1.3 and orbit.periapsis.altitude>0 then local function iN(ef,iO)bp=iO;if iD<=iO+3 and iD>=iO-3 then z=ef;iu(ef)else z=0.05;iu(0.05)end end;if orbit.apoapsis~=nil then if orbit.periapsis.altitude>bv*0.9 and orbit.periapsis.altitude<bv*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;z=0;iu(0)bx=true;if iD>2 or iD<-2 then bp=0 else bo=nil;bs=false;bu=false;bw=nil;bc=autoRollPreference;W="Orbit established"if bt.VectorToTarget then VectorToTarget=bt.VectorToTarget end;bt.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;br=false;bp=nil;bq=nil;bw=nil end else bo="Adjusting Orbit"bs=true;if orbit.periapsis.altitude<bv then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if be+10>iL then if eh>5 then iN(0.5,-80)BrakeIsOn=false elseif eh<-5 then iN(0.5,80)BrakeIsOn=false else iu(0)BrakeIsOn=true end elseif be-10<iL then iN(0.5,80)BrakeIsOn=false else iu(0)BrakeIsOn=true end else iN(0.5,80)BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then iu(0)BrakeIsOn=true elseif orbit.periapsis.altitude<bv*1.2 then iN(0.5,-80)BrakeIsOn=false end end end end else local iP=2.75;local iQ=math.abs(utils.round(iK*iP))local iR=iQ%50;if iR>0 then iQ=iQ-iR+50 end;BrakeIsOn=false;if not br then local iS=false;local iT=false;if an<bv then bo="Aligning to orbital path"else bo="Aligning to orbital point"end;bp=0;bq=0;if iD<=bp+1 and iD>=bp-1 then iS=true else iS=false end;if iM<=bq+1 and iM>=bq-1 then iT=true else iT=false end;if iS and iT then bp=nil;bq=nil;br=true end else if an<bv*0.8 then bo="Escaping planet gravity"bp=35 elseif an>=bv*0.8 and an<bv*1.01 then bo="Approaching orbital corridor"if eh>100 then iQ=iQ*0.75;bp=-50 else bp=utils.map(an,bv*0.6,bv,35,0)end elseif an>=bv*1.01 and an<bv*1.5 then bo="Approaching orbital corridor"if eh<0 or bs then bp=utils.map(an,bv*1.5,bv*1.01,-30,0)else bp=utils.map(an,bv*0.99,bv*1.5,0,30)end elseif an>bv*1.5 then bo="Reentering orbital corridor"if eh<-100 then bp=45;iQ=iQ*1.25 else bp=-80;iQ=iQ*0.75 end end end;iw(math.floor(iQ))end;if bp~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local iU=bp-iD;OrbitPitchPID:inject(iU)local iV=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=iV end;if bq~=nil then if iD<85 then local iW=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(iW*0.01,0,iW*0.1)end;local iX=bq-iM;OrbitRollPID:inject(iX)local iY=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=iY end end elseif CancelIntoOrbit then bu=false;bw=nil;iu(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not ag then local iZ,i_=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local j0=(CustomTarget.position-a4.center):normalize()local j1=j0:project_on_plane((a4.center-iC):normalize()):normalize()local j2=a4.center+j1*(a4.radius+AutopilotTargetOrbit)local j3=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(iC-j2):len()<(iC-j3):len()then iZ=j2;AutopilotTargetCoords=iZ else iZ=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=iZ end;local cB=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)i_=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;i_=true;TargetSet=true;AutopilotRealigned=true;iZ=CustomTarget.position+(iC-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local j0=(iC+bd*100000-a4.center):normalize()local j1=j0:project_on_plane((a4.center-iC):normalize()):normalize()if j1:len()<1 then j0=(iC+vec3(core.getConstructWorldOrientationForward())*100000-a4.center):normalize()j1=j0:project_on_plane((a4.center-iC):normalize()):normalize()end;iZ=a4.center+j1*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iZ;TargetSet=true;i_=true;AutopilotRealigned=true;local cB=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)end end;AutopilotDistance=(vec3(iZ)-vec3(core.getConstructWorldPos())):len()local fg,fh,fi=b6:getPlanetarySystem(0):castIntersections(iC,bd:normalize(),function(fj)if fj.noAtmosphericDensityAltitude>0 then return fj.radius+fj.noAtmosphericDensityAltitude else return fj.radius+fj.surfaceMaxAltitude*1.5 end end)local fk=fh;if fi~=nil and fh~=nil then fk=math.min(fi,fh)end;if fk~=nil and fk<AutopilotDistance and fg.name==a4.name then AutopilotDistance=fk end;local iH=true;local j4=(a4.center-(vec3(core.getConstructWorldPos())+vec3(bd):normalize()*AutopilotDistance)):len()-a4.radius;local dz,dA=getDistanceDisplayString(j4)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dz..'", "unit":"'..dA..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)end;if be>300 and AutopilotAccelerating then local dw=vec3(iZ)-vec3(core.getConstructWorldPos())local j5=utils.clamp(math.deg(cR(iB,bd:normalize(),dw:normalize()))*be/500,-90,90)local j6=utils.clamp(math.deg(cR(cy,bd:normalize(),dw:normalize()))*be/500,-90,90)if math.abs(j5)<20 and math.abs(j6)<20 then j5=j5*2;j6=j6*2 end;if math.abs(j5)<2 and math.abs(j6)<2 then j5=j5*2;j6=j6*2 end;local iE=-math.deg(cR(iB,cx,bd:normalize()))local iF=-math.deg(cR(cy,cx,bd:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(j6-iF)local j7=utils.clamp(apPitchPID:get(),-1,1)O=O+j7;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(j5-iE)local j8=utils.clamp(apYawPID:get(),-1,1)P=P+j8;i_=true;if math.abs(j5)>2 or math.abs(j6)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if j4<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(j4)end end;if not AutopilotCruising and not AutopilotBraking and not i_ then iH=AlignToWorldVector((iZ-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iH=AlignToWorldVector(-vec3(bd):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;iu(AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fI=unit.getThrottle()if AtmoSpeedAssist then fI=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fI==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;iu(0)z=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;iu(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then iu(100,true)z=1 end;local _,iL=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dw;if CustomTarget~=nil then dw=CustomTarget.position-iC end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and be<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and be<=iL and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"iu(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cB=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iL=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if be<=iL then if CustomTarget~=nil then if bd:normalize():dot(dw:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cB=zeroConvertToMapPosition(a4,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"iu(0)z=0;G=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cB=zeroConvertToMapPosition(a4,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ag=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fI=unit.getThrottle()if AtmoSpeedAssist then fI=z end;if fI>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iH then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iH then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then iu(AutopilotInterplanetaryThrottle,true)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;iu(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cB=zeroConvertToMapPosition(a4,CustomTarget.position)cB="::pos{"..cB.systemId..","..cB.bodyId..","..cB.latitude..","..cB.longitude..","..cB.altitude.."}"system.setWaypoint(cB)end;if U then bc=true;local j6=0;local ch=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local j9=ch-vec3(core.getConstructWorldPos())local ja=vec3(j9):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jb=vec3(j9):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ac=math.sqrt(ja*ja+jb*jb)AlignToWorldVector(j9:normalize())local jc=40;local jd=ac<jc;local je=100;local gc=utils.clamp((ac-jc)/2,10,je)O=0;local iH=math.abs(P)<0.1;if iH and be<gc and not jd then BrakeIsOn=false;j6=-20 else BrakeIsOn=true;j6=0 end;local jf=0;if math.abs(j6-cA)>jf then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(j6-cA)local j7=pitchPID:get()O=j7 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cC=unit.getClosestPlanetInfluence()>0;local jg=HoldAltitude-an;local jh=500+be;local ji=1;if AutoTakeoff then ji=utils.clamp(be/100,0.1,1)end;local j6=(utils.smoothstep(jg,-jh,jh)-0.5)*2*MaxPitch*ji;if not Reentry and not ag and not VectorToTarget and cx:dot(bd:normalize())<0.99 then j6=(utils.smoothstep(jg,-jh*utils.clamp(20-19*j()*10,1,20),jh*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*ji end;if not AltitudeHold then j6=0 end;if LockPitch~=nil then if cC and not IntoOrbit then j6=LockPitch else LockPitch=nil end end;bc=true;local jj=O;if Reentry then local ReentrySpeed=math.floor(bm)local jk,jl=b7.computeDistanceAndTime(be,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jm=an-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and an>planet.noAtmosphericDensityAltitude+5000 and be<=ReentrySpeed/3.6 and be>ReentrySpeed/3.6-10 and math.abs(bd:normalize():dot(cx))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jk>-1 and jm<=jk or an<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;iw(ReentrySpeed,true)if not J then j6=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;j6=0;bc=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and an>planet.noAtmosphericDensityAltitude+5000 then bc=true elseif an<=planet.noAtmosphericDensityAltitude+5000 then iw(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bm then J=false;Reentry=false;bc=true end end end;if be>I and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bd))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and j()>0.01 then local dw;if CustomTarget~=nil then dw=CustomTarget.position-vec3(core.getConstructWorldPos())else dw=a4.center-iC end;local j5=math.deg(cR(cz:normalize(),bd,dw))*2;local jn=math.rad(math.abs(dN))if be>minRollVelocity and j()>0.01 then local jo=utils.clamp(90-j6*2,-90,90)bk=utils.clamp(j5*2,-jo,jo)local jp=j5;j5=utils.clamp(utils.clamp(j5,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jn)+4*(iD-j6)*math.sin(math.rad(dN)),-YawStallAngle*0.85,YawStallAngle*0.85)j6=utils.clamp(utils.clamp(j6*math.cos(jn),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jp)*math.sin(jn),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bk=0;j5=utils.clamp(j5,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jq=iE-j5;if not bi and be>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jq)local j8=utils.clamp(yawPID:get(),-1,1)P=P+j8 elseif am and aj>-1 or be<minRollVelocity then AlignToWorldVector(dw)elseif bi and j()>0.01 then if(iE<-YawStallAngle or iE>YawStallAngle)and j()>0.01 then AlignToWorldVector(bd)end;if(iF<-PitchStallAngle or iF>PitchStallAngle)and j()>0.01 then j6=utils.clamp(iD-iF,iD-PitchStallAngle*0.85,iD+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ah then local jr=planet:getAltitude(CustomTarget.position)local jm=math.sqrt(dw:len()^2-(an-jr)^2)local js=LastMaxBrakeInAtmo;if js then js=js*utils.clamp(be/100,0.1,1)*j()else js=LastMaxBrake end;if j()<0.01 then js=LastMaxBrake end;local jt=bd:len()-math.abs(eh)local ju=vec3(core.getWorldAirFrictionAcceleration())local jv=math.sqrt(ju:len()-ju:project_on(ej):len())*n()if be>100 then a0,a1=b7.computeDistanceAndTime(be,100,n(),0,0,js+jv)local jw,jx=b7.computeDistanceAndTime(100,0,n(),0,0,js/2)a0=a0+jw else a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,js/2)end;StrongBrakes=true;if not ah and not Reentry and jm<=a0+be*iA/2 and(bd:project_on_plane(cz):normalize():dot(dw:project_on_plane(cz):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"iu(0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jt<0.1 or jm<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jm)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jm end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ah or Reentry)then if CustomTarget~=nil and a4.name==planet.name then local dw=CustomTarget.position-vec3(core.getConstructWorldPos())local jr=planet:getAltitude(CustomTarget.position)local jm=math.sqrt(dw:len()^2-(an-jr)^2)local js=LastMaxBrakeInAtmo;if not bx and jm>100000 then bu=false;IntoOrbit=true else js=LastMaxBrake;a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,js/2)StrongBrakes=true;if jm<=a0+be*iA/2 and bd:project_on_plane(cz):normalize():dot(dw:project_on_plane(cz):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=jm end end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ah or VectorToTarget or IntoOrbit or Reentry)then if not bx then IntoOrbit=true end end;if bi and j()>0.01 and aj==-1 and be>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bd)j6=utils.clamp(iD-iF,iD-PitchStallAngle*0.85,iD+PitchStallAngle*0.85)end;O=jj;local fR=-1;if BrakeLanding then j6=0;local jy=false;local jz=30;if b8~=nil and b8>0 then local jv=0;local dT=utils.clamp(j(),0.4,2)local js=LastMaxBrakeInAtmo*utils.clamp(be/100,0.1,1)*dT;local jA=b8*dT+js+jv-bQ;local jB=js/2+jv-bQ;local jC=be-math.sqrt(math.abs(jB/2)*20/(0.5*n()))*utils.sign(jB)if jC<0 then jC=0 end;local jD;if be>100 then local jE,_=b7.computeDistanceAndTime(be,100,n(),0,0,js)local jF,_=b7.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(js))jD=jE+jF else jD=b7.computeDistanceAndTime(be,0,n(),0,0,math.sqrt(js))end;if jD<20 then BrakeIsOn=false else local jG=0;if jC>100 then local jH,_=b7.computeDistanceAndTime(jC,100,n(),0,0,jA)local jI,_=b7.computeDistanceAndTime(100,0,n(),0,0,b8*dT+math.sqrt(js)+jv-bQ)jG=jH+jI else jG,_=b7.computeDistanceAndTime(jC,0,n(),0,0,b8*dT+math.sqrt(js)+jv-bQ)end;jG=(jG+15+be*iA)*1.1;local jJ=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jJ then local jr=planet:getAltitude(CustomTarget.position)local jK=an-jr-100;local dw=CustomTarget.position-vec3(core.getConstructWorldPos())local jL=math.sqrt(dw:len()^2-(an-jr)^2)if jL>100 then jJ=false elseif jK<=jG or jG==-1 then BrakeIsOn=true;jy=true else BrakeIsOn=false;jy=true end end;if not jJ and CalculateBrakeLandingSpeed then if jG>=jz then BrakeIsOn=true else BrakeIsOn=false end;jy=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fR=aj;if fR>-1 then bc=autoRollPreference;if be<1 or bd:normalize():dot(cz)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bd:normalize():dot(-ej)<0.999 then BrakeIsOn=true elseif eh<-brakeLandingRate and not jy then BrakeIsOn=true elseif not jy then BrakeIsOn=false end end;if AutoTakeoff or ah then local fg,fi,fh;if AutopilotTargetCoords~=nil then fg,fi,fh=b6:getPlanetarySystem(0):castIntersections(iC,(AutopilotTargetCoords-iC):normalize(),function(fj)return fj.radius+fj.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if an>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;iu(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(j6)<15 and an/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and be<I then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;iu(0)z=0 elseif ah then iu(0)z=0;BrakeIsOn=true end elseif ah and j()==0 and a4~=nil and(fg==nil or fg.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jM=hoverDetectGround()>-1;local jN=cA;if(VectorToTarget or ah)and not jM and be>minRollVelocity and j()>0.01 then local jn=math.rad(math.abs(dN))jN=cA*math.abs(math.cos(jn))+iF*math.sin(jn)end;local jO=utils.clamp(j6-jN,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jO=utils.clamp(j6-jN,-85,MaxPitch)elseif j()<0.01 then jO=utils.clamp(j6-jN,-MaxPitch,MaxPitch)end;if math.abs(dN)<5 or VectorToTarget or BrakeLanding or jM or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jO)local j7=pitchPID:get()O=O+j7 end end;if antigrav~=nil and(antigrav and not ExternalAGG and an<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jP=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jQ=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jR=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jS=S;local jT=vec3(core.getWorldVertical())if jT==nil or jT:len()==0 then jT=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jU=vec3(core.getConstructWorldOrientationUp())local jV=vec3(core.getConstructWorldOrientationForward())local jW=vec3(core.getConstructWorldOrientationRight())local jX=vec3(core.getWorldVelocity())local jY=vec3(core.getWorldVelocity()):normalize()local jZ=getRoll(jT,jV,jW)local j_=math.abs(jZ)local k0=utils.sign(jZ)local j=j()local k1=vec3(core.getWorldAngularVelocity())local k2=jP*pitchSpeedFactor*jW+jQ*rollSpeedFactor*jV+jR*yawSpeedFactor*jU;if jT:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local dN=getRoll(jT,jV,jW)local dO=dN/180*math.pi;local dP=math.cos(dO)local dQ=math.sin(dO)local iD=getPitch(jT,jV,jW*dP+jU*dQ)if bc==true and math.abs(bk-jZ)>autoRollRollThreshold and jQ==0 and math.abs(iD)<85 then local k3=bk;local iW=autoRollFactor;if j==0 then iW=iW/4;bk=0;k3=0 end;if rollPID==nil then rollPID=pid.new(iW*0.01,0,iW*0.1)end;rollPID:inject(k3-jZ)local k4=rollPID:get()k2=k2+k4*jV end end;if jT:len()>0.01 and j>0.0 then local k5=20.0;if turnAssist==true and j_>k5 and jP==0 and jR==0 then local k6=turnAssistFactor*0.1;local k7=turnAssistFactor*0.025;local k8=(j_-k5)/(180-k5)*180;local k9=0;if k8<90 then k9=k8/90 elseif k8<180 then k9=(180-k8)/90 end;k9=k9*k9;local ka=-k0*k7*(1.0-k9)local kb=k6*k9;k2=k2+kb*jW+ka*jU end end;local kc=1;local kd=0;local ke=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bm=utils.clamp(bm+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bm=utils.clamp(bm-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local eh=-jT:dot(jX)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bm/3.6-jX:dot(jV))local kf=throttlePID:get()C=utils.clamp(kf,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jX:len()-bm/3.6)local kg=utils.clamp(brakePID:get(),0,1)if j>0 and eh<-80 or j>0.005 then A=kg end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local kh=''local ki=vec3()local kj=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kj,kd)local kk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kk=kk..ExtraLongitudeTags end;local kl=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local km=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kk,axisCommandId.longitudinal)local kn=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kh=kh..' , '.."lateral airfoil , lateral ground "ki=ki+kn;if ki:len()>constants.epsilon then Nav:setEngineForceCommand(kh,ki,kd,'','','',ke)end;Nav:setEngineForceCommand(kk,km,kc)local ko='thrust analog vertical fueled 'local kp='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kp=kp..ExtraLateralTags end;if ExtraVerticalTags~="none"then ko=ko..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(ko,kj,kc)else Nav:setEngineForceCommand(ko,vec3(),kc)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kp,kn,kc)else Nav:setEngineForceCommand(kp,vec3(),kc)end;if jS==0 then jS=A end;local kq=-jS*(brakeSpeedFactor*jX+brakeFlatFactor*jY)Nav:setEngineForceCommand('brake',kq)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kq=-jS*(brakeSpeedFactor*jX+brakeFlatFactor*jY)Nav:setEngineForceCommand('brake',kq)local kh=''local ki=vec3()local kr=false;local kk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kk=kk..ExtraLongitudeTags end;local kl=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if kl==axisCommandType.byThrottle then local km=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kk,axisCommandId.longitudinal)Nav:setEngineForceCommand(kk,km,kc)elseif kl==axisCommandType.byTargetSpeed then local km=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kh=kh..' , '..kk;ki=ki+km;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kr=true end end;local kp='thrust analog lateral 'if ExtraLateralTags~="none"then kp=kp..ExtraLateralTags end;local ks=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ks==axisCommandType.byThrottle then local kt=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kp,axisCommandId.lateral)Nav:setEngineForceCommand(kp,kt,kc)elseif ks==axisCommandType.byTargetSpeed then local kn=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kh=kh..' , '..kp;ki=ki+kn end;local ko='thrust analog vertical 'if ExtraVerticalTags~="none"then ko=ko..ExtraVerticalTags end;local ku=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ku==axisCommandType.byThrottle then local kj=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ko,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(ko,kj,kc,'airfoil','ground','',ke)else Nav:setEngineForceCommand(ko,vec3(),kc)Nav:setEngineForceCommand('airfoil vertical',kj,kc,'airfoil','','',ke)Nav:setEngineForceCommand('ground vertical',kj,kc,'ground','','',ke)end elseif ku==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),kc)end;local kv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kh=kh..' , '..ko;ki=ki+kv end;local gc=unit.getAxisCommandValue(0)if ki:len()>constants.epsilon then if S~=0 or kr or math.abs(jY:dot(jV))<0.8 or bd:len()>gc/3.6 then kh=kh..', brake'end;Nav:setEngineForceCommand(kh,ki,kd,'','','',ke)end end;local kw=torqueFactor*(k2-k1)local kx=vec3(core.getWorldAirFrictionAngularAcceleration())kw=kw-kx;Nav:setEngineTorqueCommand('torque',kw,kc,'airfoil','','',ke)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bT=vec3(core.getVelocity()):len()local ky=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kz=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bT*3.6>kz*(1-ky)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT*3.6<kz*(1-ky)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fI=unit.getThrottle()if AtmoSpeedAssist then fI=z*100 end;local gc=fI/100;if j==0 then gc=gc*MaxGameVelocity;if bT>=gc*(1-ky)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT<gc*(1-ky)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gc=gc*ReentrySpeed/3.6;if bT>=gc*(1-ky)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT<gc*(1-ky)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bE=coroutine.resume(beginSetup)if bE then SetupComplete=true end else Nav:update()if not ba and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kA)if kA=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and aj==-1 and(j()>0 or an<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bc=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kA=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kA=="forward"then N=N-1 elseif kA=="backward"then N=N+1 elseif kA=="left"then Q=Q-1 elseif kA=="right"then Q=Q+1 elseif kA=="yawright"then R=R-1 elseif kA=="yawleft"then R=R+1 elseif kA=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kA=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kA=="up"then a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kA=="down"then a8=a8-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kA=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kA=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kA=="option1"then if not Autopilot then IncrementAutopilotTargetIndex()H=false end elseif kA=="option2"then if not Autopilot then DecrementAutopilotTargetIndex()H=false end elseif kA=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kA=="option4"then ToggleAutopilot()H=false elseif kA=="option5"then ToggleLockPitch()H=false elseif kA=="option6"then ToggleAltitudeHold()H=false elseif kA=="option7"then wipeSaveVariables()H=false elseif kA=="option8"then ToggleFollowMode()H=false elseif kA=="option9"then if gyro~=nil then gyro.toggle()aq=gyro.getState()==1 end;H=false elseif kA=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;bb=false;ba=false end elseif kA=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kA=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kA=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kA=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kA=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kA=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kA=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kA)if kA=="forward"then N=0 elseif kA=="backward"then N=0 elseif kA=="left"then Q=0 elseif kA=="right"then Q=0 elseif kA=="yawright"then R=0 elseif kA=="yawleft"then R=0 elseif kA=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kA=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kA=="up"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kA=="down"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kA=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kA=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kA=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;bb=false;ba=false end elseif kA=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kA=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kA)if kA=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kA=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kA=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kA=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dB)local i;local kB="/commands /setname /G /agg /addlocation /copydatabank"local kC,kD=nil,nil;local kE="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dB," ")kC=dB;if i~=nil then kC=string.sub(dB,0,i-1)kD=string.sub(dB,i+1)elseif not string.find(kB,kC)then for g8 in string.gmatch(kE,"([^\n]+)")do c(g8)end;return end;if kC=="/setname"then if kD==nil or kD==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kD)else W="Select a saved target to rename first"end elseif kC=="/addlocation"then if kD==nil or kD==""or string.find(kD,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kD,"::")local cn=string.sub(kD,1,i-2)local ch=string.sub(kD,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ci='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cj,ck,ce,cf,cd=string.match(ch,ci)local planet=b0[tonumber(cj)][tonumber(ck)]AddNewLocationByWaypoint(cn,planet,ch)W="Added "..cn.." to saved locations,\nplanet "..planet.name.." at "..ch;ab=5 elseif kC=="/agg"then if kD==nil or kD==""then W="Usage: /agg targetheight"return end;kD=tonumber(kD)if kD<1000 then kD=1000 end;AntigravTargetAltitude=kD;W="AGG Target Height set to "..kD elseif kC=="/G"then if kD==nil or kD==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kD=="dump"then for bC,bD in pairs(a)do if type(_G[bD])=="boolean"then if _G[bD]==true then c(bD.." true")else c(bD.." false")end elseif _G[bD]==nil then c(bD.." nil")else c(bD.." ".._G[bD])end end;return end;i=string.find(kD," ")local kF=string.sub(kD,0,i-1)local kG=string.sub(kD,i+1)for bC,bD in pairs(a)do if bD==kF then W="Variable "..kF.." changed to "..kG;local kH=type(_G[bD])if kH=="number"then kG=tonumber(kG)elseif kH=="boolean"then if string.lower(kG)=="true"then kG=true else kG=false end end;_G[bD]=kG;return end end;W="No such global variable: "..kF elseif kC=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
