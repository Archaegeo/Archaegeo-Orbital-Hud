name: ButtonsHud - ShadowMage v5.331 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=0;local t=0;local u=false;local v=0;local w=false;local x=round(ResolutionX/2,0)local y=round(ResolutionY/2,0)local z=false;local A=true;local B=55;local C=false;local D=1;local E=1;local F=false;local G=0;local H=0;local I=0;local J=0;local K=0;local L=0;local M=0;local N=false;local O=false;local P="empty"local Q=1;local R=5;local S=5;local T=false;local U,V=0;local W,X=0;local Y=false;local Z=false;local a0=nil;local a1=0;local a2=0;local a3=false;local a4=0;local a5=0;local a6=0;local a7=3;local a8=0;local a9=""local aa=""local ab=0;local ac=false;local ad=false;local ae=false;local af=-1;local ag=false;local ah=""local ai=j()>0;local aj=core.getAltitude()local ak=core.getElementIdList()local al=system.getTime()local am=nil;local an=false;local ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local aq={}local ar=0;local as=0;local at=""local au=true;local av={}local aw=1;local ax=0.001;local ay=ResolutionX;local az=ResolutionY;local aA=nil;local aB=nil;local aC=nil;local aD=nil;local aE=false;local aF=false;local aG=0;local aH=nil;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN={}local aO={}local aP=d(1/apTickRate)*2;local aQ={}local aR={}local aS={}local aT={}local aU=false;local aV=16;local aW=0;local aX=nil;local aY=""local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local ba=vec3(core.getWorldVelocity())local bb=vec3(ba):len()local bc=math.cos(YawStallAngle*constants.deg2rad)local bd=LandingGearGroundHeight;local be=system.getMouseDeltaX()local bf=system.getMouseDeltaY()local bg=false;local bh=system.getTime()local bi=0;local bj=0;local bk=nil;local bl=nil;local bm=nil;local bn=AtmoSpeedLimit;function round(p,q)local r=10^(q or 0)return math.floor(p*r+0.5)/r end;function LoadVariables()if dbHud_1 then local bo=dbHud_1.hasKey;if not useTheseSettings then for bp,bq in pairs(a)do if bo(bq)then local br=f(dbHud_1.getStringValue(bq))if br~=nil then c(bq.." "..dbHud_1.getStringValue(bq))_G[bq]=br;aE=true end end end end;coroutine.yield()for bp,bq in pairs(b)do if bo(bq)then local br=f(dbHud_1.getStringValue(bq))if br~=nil then c(bq.." "..dbHud_1.getStringValue(bq))_G[bq]=br;aE=true end end end;if useTheseSettings then P="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a7=5 elseif aE then P="Loaded Saved Variables (see Lua Chat Tab for list)"else P="No Saved Variables Found - Stand up / leave remote to save settings"end else P="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bs=system.getTime()if LastStartTime+180<bs then LastMaxBrakeInAtmo=0 end;if aE then x=round(ResolutionX/2,0)y=round(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference end;LastStartTime=bs;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then P="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a7=5 end;bc=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]bn=AtmoSpeedLimit end;function CalculateFuelVolume(bt,bu)if bt>bu then bu=bt end;if ContainerOptimization>0 then bu=bu-bu*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bu=bu-bu*FuelTankOptimization*0.05 end;return bu end;function ProcessElements()local bv=fuelX~=0 and fuelY~=0;for bp in pairs(ak)do local type=l(ak[bp])if type=="Landing Gear"then F=true end;if type=="Dynamic Core Unit"then local bw=h(ak[bp])if bw>10000 then aV=128 elseif bw>1000 then aV=64 elseif bw>150 then aV=32 end end;aL=aL+h(ak[bp])if bv and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bw=h(ak[bp])local bx=m(ak[bp])local bt=0;local by=system.getTime()if type=="Atmospheric Fuel Tank"then local bu=400;local bz=35.03;if bw>10000 then bu=51200;bz=5480 elseif bw>1300 then bu=6400;bz=988.67 elseif bw>150 then bu=1600;bz=182.67 end;bt=bx-bz;if fuelTankHandlingAtmo>0 then bu=bu+bu*fuelTankHandlingAtmo*0.2 end;bu=CalculateFuelVolume(bt,bu)aI[#aI+1]={ak[bp],core.getElementNameById(ak[bp]),bu,bz,bt,by}end;if type=="Rocket Fuel Tank"then local bu=320;local bz=173.42;if bw>65000 then bu=40000;bz=25740 elseif bw>6000 then bu=5120;bz=4720 elseif bw>700 then bu=640;bz=886.72 end;bt=bx-bz;if fuelTankHandlingRocket>0 then bu=bu+bu*fuelTankHandlingRocket*0.1 end;bu=CalculateFuelVolume(bt,bu)aK[#aK+1]={ak[bp],core.getElementNameById(ak[bp]),bu,bz,bt,by}end;if type=="Space Fuel Tank"then local bu=2400;local bz=182.67;if bw>10000 then bu=76800;bz=5480 elseif bw>1300 then bu=9600;bz=988.67 end;bt=bx-bz;if fuelTankHandlingSpace>0 then bu=bu+bu*fuelTankHandlingSpace*0.2 end;bu=CalculateFuelVolume(bt,bu)aJ[#aJ+1]={ak[bp],core.getElementNameById(ak[bp]),bu,bz,bt,by}end end end end;function SetupChecks()if gyro~=nil then am=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then Y=true else Z=true end end;local bA=j()if door and(bA>0 or bA==0 and aj<10000)then for _,bq in pairs(door)do bq.toggle()end end;if switch then for _,bq in pairs(switch)do local bB=bq.getId()local bC=core.getElementNameById(bB)if bC=="navBlinkSwitch"then bk=bq elseif bC=="navLightSwitch"then bl=bq elseif bC=="headLightSwitch"then bm=bq else bq.toggle()end end end;if forcefield and(bA>0 or bA==0 and aj<10000)then for _,bq in pairs(forcefield)do bq.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if F then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bD=AboveGroundLevel()if bD~=-1 or not ai and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not F then GearExtended=true end else BrakeIsOn=false end;if bd~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bd)if bd==0 and not F then GearExtended=true;BrakeIsOn=true end else bd=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ai and bD~=-1 then b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ai end;function ConvertResolutionX(bq)if ResolutionX==1920 then return bq else return round(ResolutionX*bq/1920,0)end end;function ConvertResolutionY(bq)if ResolutionY==1080 then return bq else return round(ResolutionY*bq/1080,0)end end;function RefreshLastMaxBrake(bE,bF)if bE==nil then bE=core.g()end;bE=round(bE,5)local bG=j()if bF~=nil and bF or(aH==nil or aH~=bE)then local ba=core.getVelocity()local bH=vec3(ba):len()local bI=f(unit.getData()).maxBrake;if bI~=nil and bI>0 and ai then bI=bI/utils.clamp(bH/100,0.1,1)bI=bI/bG;if bG>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bI)/2 else LastMaxBrakeInAtmo=bI end end end;if bI~=nil and bI>0 then LastMaxBrake=bI end;aH=bE end end;function MakeButton(bJ,bK,bL,bM,bN,bO,bP,bQ,bR)local bS={enableName=bJ,disableName=bK,width=bL,height=bM,x=bN,y=bO,toggleVar=bP,toggleFunction=bQ,drawCondition=bR,hovered=false}table.insert(av,bS)return bS end;function UpdateAtlasLocationsList()AtlasOrdered={}for bp,bq in pairs(aX[0])do table.insert(AtlasOrdered,{name=bq.name,index=bp})end;local function bT(bU,bV)return bU.name<bV.name end;table.sort(AtlasOrdered,bT)end;function AddLocationsToAtlas()for bp,bq in pairs(SavedLocations)do table.insert(aX[0],bq)end;UpdateAtlasLocationsList()end;function float_eq(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*epsilon end;function zeroConvertToMapPosition(bY,bZ)local b_=vec3(bZ)if bY.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=bY.planetarySystemId},MapPosition)end;local c0=b_-bY.center;local a8=c0:len()local c1=a8-bY.radius;local c2=0;local c3=0;if not float_eq(a8,0)then local c4=math.atan(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a8)end;return setmetatable({latitude=math.deg(c2),longitude=math.deg(c3),altitude=c1,bodyId=bY.bodyId,systemId=bY.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(c5)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c6='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c7,c8,c2,c3,c1=string.match(c5,c6)if c7=="0"and c8=="0"then return vec3(tonumber(c2),tonumber(c3),tonumber(c1))end;c3=math.rad(c3)c2=math.rad(c2)local planet=aX[tonumber(c7)][tonumber(c8)]local c9=math.cos(c2)local ca=vec3(c9*math.cos(c3),c9*math.sin(c3),math.sin(c2))return planet.center+(planet.radius+c1)*ca end;function AddNewLocationByWaypoint(cb,planet,c5)if dbHud_1 then local cc={}local position=zeroConvertToWorldCoordinates(c5)if planet.name=="Space"then cc={position=position,name=cb,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bA=false;if planet.hasAtmosphere then bA=true else bA=false end;cc={position=position,name=cb,atmosphere=bA,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cc;table.insert(aX[0],cc)UpdateAtlasLocationsList()else P="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bC=planet.name..". "..#SavedLocations;if radar_1 then local cd,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cd~=nil and cd~=""then bC=bC.." "..radar_1.getConstructName(cd)end end;local cc={}local bA=false;if planet.hasAtmosphere then bA=true end;cc={position=position,name=bC,atmosphere=bA,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cc;table.insert(aX[0],cc)UpdateAtlasLocationsList()P="Location saved as "..bC else P="Databank must be installed to save locations"end end;function UpdatePosition(ce)local cf=-1;local cc;for bp,bq in pairs(SavedLocations)do if bq.name and bq.name==CustomTarget.name then cf=bp;break end end;if cf~=-1 then local cg;if ce~=nil then cc={position=SavedLocations[cf].position,name=ce,atmosphere=SavedLocations[cf].atmosphere,planetname=SavedLocations[cf].planetname,gravity=SavedLocations[cf].gravity}else cc={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cf].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cf]=cc;cf=-1;for bp,bq in pairs(aX[0])do if bq.name and bq.name==CustomTarget.name then cf=bp end end;if cf>-1 then aX[0][cf]=cc end;UpdateAtlasLocationsList()P=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else P="Name Not Found"end end;function ClearCurrentPosition()local cf=-1;for bp,bq in pairs(aX[0])do if bq.name and bq.name==CustomTarget.name then cf=bp end end;if cf>-1 then table.remove(aX[0],cf)end;cf=-1;for bp,bq in pairs(SavedLocations)do if bq.name and bq.name==CustomTarget.name then P=bq.name.." saved location cleared"cf=bp;break end end;if cf~=-1 then table.remove(SavedLocations,cf)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ch)ch[#ch+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ab==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ab==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ab=0 end end;function ToggleWidgets()if au then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;au=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;au=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(ci,cj,bN,bO,bL,bM)if ci>bN and ci<bN+bL and cj>bO and cj<bO+bM then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aj+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local ck=vec3(core.getConstructWorldOrientationForward())local cl=vec3(core.getConstructWorldOrientationRight())local cm=vec3(core.getWorldVertical())local cn=getPitch(cm,ck,cl)LockPitch=cn;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bs=system.getTime()if bs-bj<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bj=-1;if AltitudeHold then return end end else bj=bs end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;N=false;BrakeLanding=false;Reentry=false;b8=true;LockPitch=nil;if hoverDetectGround()==-1 or not ai or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bj>-1 then HoldAltitude=aj end;if not ad and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bj>-1 then HoldAltitude=aj+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ad then HoldAltitude=100000 end else b8=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then N=not N;if N then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else P="Follow Mode only works with Remote controller"N=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ad then UpdateAutopilotTarget()local co=zeroConvertToMapPosition(a0,AutopilotTargetCoords)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aj>100000 or aj==0 then Autopilot=true else ac=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;N=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;z=false;LockPitch=nil;WaypointSet=false else ad=true;ToggleAltitudeHold()end else ad=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;z=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aj;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b8=autoRollPreference;ac=false;ae=false end end;function CheckDamage(ch)local cp=0;at=""local cq=aL;local cr=0;local cs=0;local ct=0;local cu=0;local cv=""for bp in pairs(ak)do local bw=0;local cw=0;cw=h(ak[bp])bw=k(ak[bp])cr=cr+bw;if bw<cw then if bw==0 then ct=ct+1 else cs=cs+1 end;if aM and#aq==0 then position=vec3(core.getElementPositionById(ak[bp]))local bN=position.x-aV;local bO=position.y-aV;local cx=position.z-aV;table.insert(aq,core.spawnArrowSticker(bN,bO,cx+1,"down"))table.insert(aq,core.spawnArrowSticker(bN,bO,cx+1,"down"))core.rotateSticker(aq[2],0,0,90)table.insert(aq,core.spawnArrowSticker(bN+1,bO,cx,"north"))table.insert(aq,core.spawnArrowSticker(bN+1,bO,cx,"north"))core.rotateSticker(aq[4],90,90,0)table.insert(aq,core.spawnArrowSticker(bN-1,bO,cx,"south"))table.insert(aq,core.spawnArrowSticker(bN-1,bO,cx,"south"))core.rotateSticker(aq[6],90,-90,0)table.insert(aq,core.spawnArrowSticker(bN,bO-1,cx,"east"))table.insert(aq,core.spawnArrowSticker(bN,bO-1,cx,"east"))core.rotateSticker(aq[8],90,0,90)table.insert(aq,core.spawnArrowSticker(bN,bO+1,cx,"west"))table.insert(aq,core.spawnArrowSticker(bN,bO+1,cx,"west"))core.rotateSticker(aq[10],-90,0,90)table.insert(aq,ak[bp])end elseif aM and#aq>0 and aq[11]==ak[bp]then for cy in pairs(aq)do core.deleteSticker(aq[cy])end;aq={}end end;cp=d(cr/cq*100)if cp<100 then ch[#ch+1]=[[<g class="pbright txt">]]cu=d(cp*2.55)cv=e("rgb(%d,%d,%d)",255-cu,cu,0)if cp<100 then ch[#ch+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cv,cp)if ct>0 then ch[#ch+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cv,ct,cs)elseif cs>0 then ch[#ch+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cv,cs)end end;ch[#ch+1]=[[<\g>]]end end;function DrawCursorLine(ch)local cz=d(utils.clamp(a8/(ay/4)*255,0,255))ch[#ch+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a5,a6,d(PrimaryR+0.5)+cz,d(PrimaryG+0.5)-cz,d(PrimaryB+0.5)-cz)end;function getPitch(cA,cB,bV)local cC=cA:cross(bV):normalize_inplace()local cn=math.acos(utils.clamp(cC:dot(-cB),-1,1))*constants.rad2deg;if cC:cross(-cB):dot(bV)<0 then cn=-cn end;return cn end;local cD=math.atan;local function cE(cF,cG,cH)cG=cG:project_on_plane(cF)cH=cH:project_on_plane(cF)return cD(cG:cross(cH):dot(cF),cG:dot(cH))end;function clearAll()if ag then ag=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;N=false;z=false;ac=false;ad=false;C=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;am=false;LockPitch=nil else ag=true end end;function wipeSaveVariables()if not dbHud_1 then P="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a7=5 else if aF then for bp,bq in pairs(a)do dbHud_1.setStringValue(bq,g(nil))end;for bp,bq in pairs(b)do if bq~="SavedLocations"then dbHud_1.setStringValue(bq,g(nil))end end;P="Databank wiped. New variables will save after re-enter seat and exit"a7=5;aF=false;aE=false;a3=true else P="Press ALT-7 again to confirm wipe of ALL data"aF=true end end end;function CheckButtons()for _,bq in pairs(av)do if bq.hovered then if not bq.drawCondition or bq.drawCondition()then bq.toggleFunction()end;bq.hovered=false end end end;function SetButtonContains()local bN=a5+ay/2;local bO=a6+az/2;for _,bq in pairs(av)do bq.hovered=Contains(bN,bO,bq.x,bq.y,bq.width,bq.height)end end;function DrawButton(ch,cI,hover,bN,bO,cJ,cK,cL,cM,cN,cO)if type(cN)=="function"then cN=cN()end;if type(cO)=="function"then cO=cO()end;ch[#ch+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bN,bO,cJ,cK)if cI then ch[#ch+1]=e("%s'",cL)else ch[#ch+1]=cM end;if hover then ch[#ch+1]=" style='stroke:white; stroke-width:2'"else ch[#ch+1]=" style='stroke:black; stroke-width:1'"end;ch[#ch+1]="></rect>"ch[#ch+1]=e("<text x='%f' y='%f' font-size='24' fill='",bN+cJ/2,bO+cK/2+5)if cI then ch[#ch+1]="black"else ch[#ch+1]="white"end;ch[#ch+1]="' text-anchor='middle' font-family='Montserrat'>"if cI then ch[#ch+1]=e("%s</text>",cN)else ch[#ch+1]=e("%s</text>",cO)end end;function DrawButtons(ch)local cP="rgb(50,50,50)'"local cQ="rgb(210,200,200)"local cR=DrawButton;for _,bq in pairs(av)do local bK=bq.disableName;local bJ=bq.enableName;if type(bK)=="function"then bK=bK()end;if type(bJ)=="function"then bJ=bJ()end;if not bq.drawCondition or bq.drawCondition()then cR(ch,bq.toggleVar(),bq.hovered,bq.x,bq.y,bq.width,bq.height,cQ,cP,bK,bJ)end end end;function DrawTank(ch,aU,bN,cS,cT,cU,cV,cW)local cX=1;local cY=2;local cZ=3;local c_=4;local d0=5;local d1=6;local d2=""local d3=0;local d4=fuelY;local d5=fuelY+10;if o()==1 and not RemoteHud then d4=d4-50;d5=d5-50 end;ch[#ch+1]=[[<g class="pdim txtfuel">]]if cT=="ATMO"then d2="atmofueltank"elseif cT=="SPACE"then d2="spacefueltank"else d2="rocketfueltank"end;d3=_G[d2 .."_size"]if#cU>0 then for i=1,#cU do local bC=string.sub(cU[i][cY],1,12)local d6=0;for cy=1,d3 do if cU[i][cY]==f(unit[d2 .."_"..cy].getData()).name then d6=cy;break end end;if aU or cV[i]==nil or cW[i]==nil then local d7=0;local d8=0;local d9=0;local da=0;local by=system.getTime()if d6~=0 then cW[i]=f(unit[d2 .."_"..d6].getData()).percentage;cV[i]=f(unit[d2 .."_"..d6].getData()).timeLeft;if cV[i]=="n/a"then cV[i]=0 end else d9=m(cU[i][cX])-cU[i][c_]d7=cU[i][cZ]cW[i]=d(0.5+d9*100/d7)d8=cU[i][d0]da=cU[i][d1]if d8<=d9 then cV[i]=0 else cV[i]=d(0.5+d9/((d8-d9)/(by-da)))end;cU[i][d0]=d9;cU[i][d1]=by end end;if bC==cS then bC=e("%s %d",cT,i)end;if d6==0 then bC=bC.." *"end;local db;if cV[i]==0 then db="n/a"else db=FormatTimeString(cV[i])end;if cW[i]~=nil then local cu=d(cW[i]*2.55)local cv=e("rgb(%d,%d,%d)",255-cu,cu,0)local dc=""if db~="n/a"and cV[i]<120 or cW[i]<5 then if aU then dc=[[class="red"]]end end;ch[#ch+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bN,d4,dc,bC,bN,d5,cv,cW[i],db)d4=d4+30;d5=d5+30 end end end;ch[#ch+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(ba)ba=vec3(ba)local cn=-math.deg(math.atan(ba.y,ba.z))+180;cn=cn-90;if cn<0 then cn=360+cn end;if cn>180 then cn=-180+cn-180 end;return-cn end;function getRelativeYaw(ba)ba=vec3(ba)local dd=math.deg(math.atan(ba.y,ba.x))-90;if dd<-180 then dd=360+dd end;return dd end;function AlignToWorldVector(de,df,dg)if not ai or not bg or af~=-1 or bb<B then local dh=dg;if dh==nil then dh=DampingMultiplier end;if df==nil then df=ax end;de=vec3(de):normalize()local di=vec3(core.getConstructWorldOrientationForward())-de;local dj=-getMagnitudeInDirection(di,core.getConstructWorldOrientationRight())*aw;local dk=-getMagnitudeInDirection(di,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=dj/2 end;if as==0 then as=dk/2 end;if math.abs(dj)<0.1 then I=I-dj*2 else I=I-(dj+(dj-ar)*dh)end;if math.abs(dk)<0.1 then H=H+dk*2 else H=H+dk+(dk-as)*dh end;ar=dj;as=dk;if math.abs(dj)<df and math.abs(dk)<df then return true end;return false elseif bg and af==-1 then de=vec3(core.getWorldVelocity())local dh=dg;if dh==nil then dh=DampingMultiplier end;if df==nil then df=ax end;de=vec3(de):normalize()local di=vec3(core.getConstructWorldOrientationForward())-de;local dj=-getMagnitudeInDirection(di,core.getConstructWorldOrientationRight())*aw;local dk=-getMagnitudeInDirection(di,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=dj/2 end;if as==0 then as=dk/2 end;if math.abs(dj)<0.1 then I=I-dj*5 else I=I-(dj+(dj-ar)*dh)end;if math.abs(dk)<0.1 then H=H+dk*5 else H=H+dk+(dk-as)*dh end;ar=dj;as=dk;if math.abs(dj)<df and math.abs(dk)<df then return true end;return false end end;function getAPEnableName()local bC=AutopilotTargetName;if bC==nil then local dl,dm=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())bC=CustomTarget.name.." "..dl..dm end;if bC==nil then bC="None"end;return"Engage Autopilot: "..bC end;function getAPDisableName()local bC=AutopilotTargetName;if bC==nil then bC=CustomTarget.name end;if bC==nil then bC="None"end;return"Disable Autopilot: "..bC end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then P="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then P="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a7=5 elseif not C then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then P="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;P="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dn,dp=getDistanceDisplayString(HoldAltitude)P="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..dn..dp end;AutoTakeoff=false end;function SetupButtons()local dq=50;local dr=260;local ds=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dr,dq,ay/2-dr/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then P="Brakes in Toggle Mode"else P="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dr,dq,ay/2-dr/2-50-ds.width,az/2-dq+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dr,dq,ay/2-dr/2+ds.width+50,az/2-dq+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dt=MakeButton(getAPEnableName,getAPDisableName,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dt.height,dt.x+dt.width+30,dt.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dt.height,dt.x+dt.width+30,dt.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dt.height,dt.x-200-30,dt.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dq=60;dr=300;local bN=10;local bO=az/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dr,dq,bN,bO,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dr,dq,bN+dr+20,bO,function()return AltitudeHold end,ToggleAltitudeHold)bO=bO+dq+20;MakeButton("Engage Autoland","Disable Autoland",dr,dq,bN,bO,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dr,dq,bN+dr+20,bO,function()return AutoTakeoff end,ToggleAutoTakeoff)bO=bO+dq+20;MakeButton("Show Orbit Display","Hide Orbit Display",dr,dq,bN,bO,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then P="Orbit Display Enabled"else P="Orbit Display Disabled"end end)bO=bO+dq+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dr,dq,bN,bO,function()return Reentry end,function()ac=true;ProgradeToggle()end,function()return aj>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dr,dq,bN+dr+20,bO,function()return Reentry end,BeginReentry,function()return aj>ReentryAltitude end)bO=bO+dq+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dr,dq,bN,bO,function()return N end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dr,dq,bN+dr+20,bO,function()return aM end,function()aM=not aM;if aM then P="Repair Arrows Enabled"else P="Repair Arrows Diabled"end end,function()return o()==1 end)bO=bO+dq+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dr,dq,bN,bO,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bO=bO+dq+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dr*2,dq,bN,bO,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local du=Nav.axisCommandManager:getAxisCommandType(0)local dv="TRAVEL"if du==1 then dv="CRUISE"end;if Autopilot then dv="AUTOPILOT"end;return dv end;function UpdateHud(ch)local c1=aj;local ba=core.getVelocity()local bH=vec3(ba):len()local cm=vec3(core.getWorldVertical())local ck=vec3(core.getConstructWorldOrientationForward())local cl=vec3(core.getConstructWorldOrientationRight())local dw=vec3(core.getConstructWorldOrientationUp())local dx=getRoll(cm,ck,cl)local dy=dx/180*math.pi;local dz=math.cos(dy)local dA=math.sin(dy)local cn=getPitch(cm,ck,cl*dz+dw*dA)local dB=dx;local dC=cn;local dD=j()local dE=d(unit.getThrottle())local dF=bH*3.6;local dG=unit.getAxisCommandValue(0)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dG=s;dE=s*100 end;local dv=GetFlightStyle()local dH="ROLL"local dI=unit.getClosestPlanetInfluence()>0;if dE==nil then dE=0 end;if not dI then if bH>5 then cn=getRelativePitch(ba)dx=getRelativeYaw(ba)else cn=0;dx=0 end;dH="YAW"end;ch[#ch+1]=aa;ch[#ch+1]=at;ch[#ch+1]=a9;if aW%aP==0 then aU=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ch,aU,fuelX,"Atmospheric ","ATMO",aI,aS,aT)DrawTank(ch,aU,fuelX+100,"Space fuel t","SPACE",aJ,aQ,aR)DrawTank(ch,aU,fuelX+200,"Rocket fuel ","ROCKET",aK,aN,aO)end;if aU then aU=false;aW=0 end;aW=aW+1;DrawVerticalSpeed(ch,c1)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dI then DrawRollLines(ch,centerX,centerY,dB,dH,dI)DrawArtificialHorizon(ch,dC,dB,centerX,centerY,dI,d(getRelativeYaw(ba)),bH)else DrawRollLines(ch,centerX,centerY,dx,dH,dI)DrawArtificialHorizon(ch,cn,dx,centerX,centerY,dI,d(dx),bH)end;DrawAltitudeDisplay(ch,c1,dI)DrawPrograde(ch,ba,bH,centerX,centerY)end end;DrawThrottle(ch,dv,dE,dG)DrawSpeed(ch,dF)DrawWarnings(ch)DisplayOrbitScreen(ch)if screen_2 then local c5=vec3(core.getConstructWorldPos())local bN=960+c5.x/aZ;local bO=450+c5.y/a_;screen_2.moveContent(b0,(bN-80)/19.2,(bO-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(ch)local dJ=ao;local dK=ap;local dL=ao;local dM=ap;if IsInFreeLook()and not brightHud then dJ=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dK=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;ch[#ch+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dJ,dJ,dL,dL,dK,dK,dM,dM,ResolutionX,ResolutionY)end;function HUDEpilogue(ch)ch[#ch+1]="</svg>"end;function DrawSpeed(ch,dF)local dN=throtPosY-10;local dO=throtPosX+10;ch[#ch+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dN=75 end;ch[#ch+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dO,dN,d(dF))end;function DrawOdometer(ch,a1,TotalDistanceTravelled,dv,a2,dD)local dP=ConvertResolutionX(1240)local dQ=ConvertResolutionY(55)local dR=dQ+10;local dD=j()local bE=core.g()local dS=0;local dT=0;local dU=0;RefreshLastMaxBrake(bE)if ai then dU=LastMaxBrakeInAtmo else dU=LastMaxBrake end;maxThrust=Nav:maxForceForward()aG=n()if not ShowOdometer then return end;local dV=vec3(core.getWorldAcceleration()):len()/9.80665;if bE>0.1 then dT=aG*bE;dS=maxThrust/bE end;ch[#ch+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dP=ConvertResolutionX(1120)dQ=ConvertResolutionY(55)dR=dQ+10 elseif ai then local dW=ConvertResolutionX(770)ch[#ch+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dW,dQ,dW,dR,dD)end;ch[#ch+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dP,dQ,dP,dR,bE/9.80665,dP,dQ+20,dP,dR+20,dV)ch[#ch+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then ch[#ch+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a1,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a2),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aG/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dU/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dv)if bE>0.1 then ch[#ch+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dS/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dT/1000)else ch[#ch+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else ch[#ch+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dv)end;ch[#ch+1]="</g>"end;function DrawThrottle(ch,dv,dE,dG)dE=math.floor(dE+0.5)local d4=throtPosY+10;local d5=throtPosY+20;if o()==1 and not RemoteHud then d4=55;d5=65 end;local dX="CRUISE"local unit="km/h"local dY=dG;if dv=="TRAVEL"or dv=="AUTOPILOT"then dX="THROT"unit="%"dY=dE;local dZ="dim"if dE<0 then dZ="red"end;ch[#ch+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dZ,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dE),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ch[#ch+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,d4,dX,throtPosX+10,d5,dY,unit)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and u then dE=math.floor(v*100+0.5)local dZ="red"if dE<0 then dZ="red"end;ch[#ch+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dZ,1-math.abs(dE),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)ch[#ch+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,d4+40,"LIMIT",throtPosX+10,d5+40,dE,"%")end;if ai and AtmoSpeedAssist or Reentry then ch[#ch+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d4-40,"LIMIT: ",bn.." km/h")elseif not ai and Autopilot then ch[#ch+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d4-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(ch,c1)if c1<200000 and not ai or c1 and ai then local d_=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local e0=0;if math.abs(d_)>1 then e0=45*math.log(math.abs(d_),10)if d_<0 then e0=-e0 end end;ch[#ch+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(d_),d(e0))end end;function getHeading(cB)local e1=-vec3(core.getWorldVertical())cB=cB-cB:project_on(e1)local e2=vec3(0,0,1)e2=e2-e2:project_on(e1)local e3=e2:cross(e1)local e0=e2:angle_between(cB)*constants.rad2deg;if cB:dot(e3)<0 then e0=360-e0 end;return e0 end;function DrawRollLines(ch,centerX,centerY,dB,dH,dI)local e4=circleRad;local e5=20;e5=d(e5)local e6=d(dB)if dI then for i=-45,45,5 do local e7=i;ch[#ch+1]=e([[<g transform="rotate(%f,%d,%d)">]],e7,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ch[#ch+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e4+e5-len,centerX,centerY+e4+e5)end;ch[#ch+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+e4+e5-35,dH,centerX,centerY+e4+e5-25,e6)ch[#ch+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dB,centerX,centerY)ch[#ch+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e4+e5-20,centerX+5,centerY+e4+e5-20,centerX,centerY+e4+e5-15)ch[#ch+1]="</g>"end;local dd=e6;if dI then dd=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local e8=20;local e9=d(dd)local ea=0;local eb=centerY+e4+e5+20;local ec=centerX;if dH~="YAW"then eb=ConvertResolutionY(130)ec=ConvertResolutionX(960)end;local ed=[[<path class="txttick line" d="]]for i=d(e9-(e8+10)-e9%5+0.5),d(e9+e8+10+e9%5+0.5),5 do local bN=ec+-i*5+dd*5;if i%10==0 then ea=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;ch[#ch+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bN+5,eb-12,p)elseif i%5==0 then ea=5 end;if ea==10 then ed=e([[%s M %f %f v %d]],ed,bN,eb-5,ea)else ed=e([[%s M %f %f v %d]],ed,bN,eb-2.5,ea)end end;ch[#ch+1]=ed..[["/>]]ch[#ch+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ec-5,eb+10,ec+5,eb+10,ec,eb+5)if dI then dH="HDG"end;ch[#ch+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],ec,eb+25,e9,ec,eb+35,dH)end;function DrawArtificialHorizon(ch,dC,dB,centerX,centerY,dI,ee,bH)local e4=circleRad;local ef=d(e4*3/5)if e4>0 then local eg=d(dC)local len=0;local ed=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dB,centerX,centerY)if not ai then ed=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ch[#ch+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e4-1,centerX,centerY)ch[#ch+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eg-30-eg%5+0.5),d(eg+30+eg%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bO=centerY+-i*5+dC*5;if len==30 then ed=e([[%s M %d %f h %d]],ed,centerX-ef-len,bO,len)if ai then ch[#ch+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dB,centerX,centerY,centerX-ef+10,bO,i)ch[#ch+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dB,centerX,centerY,centerX+ef-10,bO,i)if i==0 or i==180 or i==-180 then ch[#ch+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dB,centerX,centerY,centerX-ef+20,bO,ef*2-40)end else ch[#ch+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ef+10,bO,i)ch[#ch+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ef-10,bO,i)end;ed=e([[%s M %d %f h %d]],ed,centerX+ef,bO,len)else ed=e([[%s M %d %f h %d]],ed,centerX-ef-len,bO,len)ed=e([[%s M %d %f h %d]],ed,centerX+ef,bO,len)end end;ch[#ch+1]=ed..[["/>]]local eh="PITCH"if not dI then eh="REL PITCH"end;if dC>90 and not ai then dC=90-(dC-90)elseif dC<-90 and not ai then dC=-90-(dC+90)end;if e4>200 then if ai then if bH>B then ch[#ch+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ee)end;ch[#ch+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dB,centerX,centerY)else ch[#ch+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ch[#ch+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ef+25,centerY-5,centerX-ef+20,centerY,centerX-ef+25,centerY+5,centerX-ef+50,centerY+4,eg)ch[#ch+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ef-25,centerY-5,centerX+ef-20,centerY,centerX+ef-25,centerY+5,centerX+ef-30,centerY+4,eg)ch[#ch+1]="</g>"end;local ei=d(e4/3)ch[#ch+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ei,centerY,e4-ei)if not ai and dI then ch[#ch+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dB,centerX,centerY,centerX-ef+10,centerY,ef*2-20)end;ch[#ch+1]="</g>"if e4<200 then if ai and bH>B then ch[#ch+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e4,eh,centerX,centerY-e4+10,eg,centerX,centerY-15,"Yaw",centerX,centerY+20,ee)else ch[#ch+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e4,eh,centerX,centerY-e4+15,eg)end end end end;function DrawAltitudeDisplay(ch,c1,dI)local ej=altMeterX;local ek=altMeterY;local el=78;local em=19;local en=AboveGroundLevel()if en~=-1 then table.insert(ch,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ej+el,ek+em+20,en))end;if dI and(c1<200000 and not ai or c1 and ai)then table.insert(ch,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ej-1,ek-4,el+2,em+6,ej+1,ek-1,el-4,em))local cf=0;local eo=1;local ep=0;local eq=c1<0;local er=9;if eq then er=0 end;local c1=math.abs(c1)while cf<6 do local es=11;local et=16;local eu=9;local ev=14;local dc="altsm"if cf>2 then et=et+3;es=es+2;ev=ev+2;eu=eu-6;dc="altbig"end;if eq then dc=dc.." red"end;local ew=c1/eo%10;local ex=d(ew)local ey=d((ex+1)%10)local ez=ep;if cf==0 then ez=ew-ex;if eq then ez=1-ez end end;if eq and(cf==0 or ep~=0)then local eA=ey;ey=ex;ex=eA end;local eB=et*(ez-1)local eC=eB+et;local bN=ej+eu+(6-cf)*es;local bO=ek+ev;table.insert(ch,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dc,bN,bO+eB,ey,bN,bO+eC,ex))cf=cf+1;eo=eo*10;if ex==er then ep=ez else ep=0 end end;table.insert(ch,[[</g></g>]])end end;function DrawPrograde(ch,ba,bH,centerX,centerY)if bH>5 and not ai or bH>B then local e4=circleRad;local eD=20;local eE=20;local eF=vec3(ba)local eG=getRelativePitch(eF)local eH=getRelativeYaw(eF)local eI=14;local eJ=eI/2;local eK=-eH/eE*e4;local eL=eG/eD*e4;local bN=centerX+eK;local bO=centerY+eL;local a8=math.sqrt(eK^2+eL^2)local eM=[[<circle
                cx="]]..bN..[["
                cy="]]..bO..[["
                r="]]..eJ/eI..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bN..[["
                cy="]]..bO..[["
                r="]]..eJ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bN-eI..[[,]]..bO..[[ h ]]..eJ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bN+eJ..[[,]]..bO..[[ h ]]..eJ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bN..[[,]]..bO-eI..[[ v ]]..eJ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a8<e4 then ch[#ch+1]=eM else local e0=math.atan(eL,eK)local eN=4;local eO=centerX+e4*math.cos(e0)local eP=centerY+e4*math.sin(e0)ch[#ch+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',e0*180/math.pi,eO,eP,eO-eN,eP-eN/2,eN*2,eN,eO+eN,eP-eN,eN,eN,-eN,eN)end;if not ai then eG=getRelativePitch(-eF)eH=getRelativeYaw(-eF)eK=-eH/eE*e4;eL=eG/eD*e4;bN=centerX+eK;bO=centerY+eL;a8=math.sqrt(eK^2+eL^2)if a8<e4 then local eQ=[[<circle
                        cx="]]..bN..[["
                        cy="]]..bO..[["
                        r="]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bN..[[,]]..bO-eI..[[ v ]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bN..[[,]]..bO..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bN..[[,]]..bO..[[)" />
                     <path
                        d="M ]]..bN-eJ..[[,]]..bO..[[ h ]]..eI..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bN..[[,]]..bO..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bN..[[,]]..bO..[[)"/>]]ch[#ch+1]=eQ end end end end;function DrawWarnings(ch)ch[#ch+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)ch[#ch+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ch[#ch+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))ch[#ch+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))ch[#ch+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eR=ConvertResolutionX(960)local eS=ConvertResolutionY(860)local eT=ConvertResolutionY(880)local eU=ConvertResolutionY(900)local eV=ConvertResolutionY(960)local eW=ConvertResolutionY(200)local eX=ConvertResolutionY(150)local eY=ConvertResolutionY(960)if o()==1 and not RemoteHud then eS=ConvertResolutionY(135)eT=ConvertResolutionY(155)eU=ConvertResolutionY(175)eW=ConvertResolutionY(115)eX=ConvertResolutionY(95)end;if BrakeIsOn then ch[#ch+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eR,eS)elseif t>0 then ch[#ch+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eR,eS,t)end;if ai and bg and hoverDetectGround()==-1 then ch[#ch+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eR,eW+50)end;if am then ch[#ch+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eR,eY)end;if GearExtended then if F then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eR,eT)else ch[#ch+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eR,eT)end;local dl,dm=getDistanceDisplayString(Nav:getTargetGroundAltitude())ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eR,eU,dl..dm)end;if T then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eR,eV+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aj-antigrav.getBaseAltitude())<501 then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eR,eW+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else ch[#ch+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eR,eW+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eR,eW+20,AutopilotStatus)elseif LockPitch~=nil then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eR,eW+20,d(LockPitch))elseif N then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eR,eW+20)elseif Reentry then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eR,eW+20)end;local eZ,e_,f0=b2:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),ba:normalize(),function(f1)if f1.noAtmosphericDensityAltitude>0 then return f1.radius+f1.noAtmosphericDensityAltitude else return f1.radius+f1.surfaceMaxAltitude*1.5 end end)local f2=e_;if f0~=nil and e_~=nil then f2=math.min(f0,e_)end;if AltitudeHold then if AutoTakeoff then local dl,dm=getDistanceDisplayString(HoldAltitude)ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eR,eW,dl..dm)if BrakeIsOn then ch[#ch+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eR,eW+50)end else local dl,dm=getDistanceDisplayString2(HoldAltitude)ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eR,eW,dl..dm)end end;if BrakeLanding then if StrongBrakes then ch[#ch+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eR,eW)else ch[#ch+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eR,eW)end end;if ProgradeIsOn then ch[#ch+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eR,eW)end;if RetrogradeIsOn then ch[#ch+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eR,eW)end;if TurnBurn then ch[#ch+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eR,eX)elseif f2~=nil and j()==0 then local dl,dm=getDistanceDisplayString(f2)local travelTime=b3.computeTravelTime(bb,0,f2)local f3="Collision"if eZ.noAtmosphericDensityAltitude>0 then f3="Atmosphere"end;ch[#ch+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eR,eX,eZ.name,f3,FormatTimeString(travelTime),dl..dm)end;if VectorToTarget then ch[#ch+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eR,eW+30,VectorStatus)end;ch[#ch+1]="</g>"end;function DisplayOrbitScreen(ch)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local f4=OrbitMapX;local f5=OrbitMapY;local f6=OrbitMapSize;local f7=4;f5=f5+f7;local f8=15;local bN=f4+f6+f4/2+f7;local bO=f5+f6/2+5+f7;local f9,fa,fb,fc;f9=f6/4;fc=0;ch[#ch+1]=[[<g class="pbright txtorb txtmid">]]ch[#ch+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',f6+f4*2,f6+f5,f7,f7)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fb=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(f9*2)fa=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fb*(1-orbit.eccentricity)fc=f9-orbit.periapsis.altitude/fb-planet.radius/fb;local fd=""if orbit.periapsis.altitude<=0 then fd='redout'end;ch[#ch+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fd,f4+f6/2+fc+f7,f5+f6/2+f7,f9,fa)ch[#ch+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',f4+f6/2+f7,f5+f6/2+f7,planet.radius/fb)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ch[#ch+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bN-35,bO-5,f4+f6/2+f9+fc,bO-5)ch[#ch+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bN,bO)bO=bO+f8;local dl,dm=getDistanceDisplayString(orbit.apoapsis.altitude)ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,dl..dm)bO=bO+f8;ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,FormatTimeString(orbit.timeToApoapsis))bO=bO+f8;ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,getSpeedDisplayString(orbit.apoapsis.speed))end;bO=f5+f6/2+5+f7;bN=f4-f4/2+10+f7;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ch[#ch+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bN+35,bO-5,f4+f6/2-f9+fc,bO-5)ch[#ch+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bN,bO)bO=bO+f8;local dl,dm=getDistanceDisplayString(orbit.periapsis.altitude)ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,dl..dm)bO=bO+f8;ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,FormatTimeString(orbit.timeToPeriapsis))bO=bO+f8;ch[#ch+1]=e([[<text x="%f" y="%f">%s</text>]],bN,bO,getSpeedDisplayString(orbit.periapsis.speed))end;ch[#ch+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],f4+f6/2+f7,20+f7,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fe=orbit.timeToApoapsis/orbit.period*2*math.pi;local ff=f9*math.cos(fe)local fg=fa*math.sin(fe)ch[#ch+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',f4+f6/2+ff+fc+f7,f5+f6/2+fg+f7)end;ch[#ch+1]=[[</g>]]end end;function getDistanceDisplayString(a8)local fh=a8>100000;local br,dm=""if fh then br,dm=round(a8/1000/200,1),"SU"elseif a8<1000 then br,dm=round(a8,1),"m"else br,dm=round(a8/1000,1),"Km"end;return br,dm end;function getDistanceDisplayString2(a8)local fh=a8>100000;local br,dm=""if fh then br,dm=round(a8/1000/200,2)," SU"elseif a8<1000 then br,dm=round(a8,2)," M"else br,dm=round(a8/1000,2)," KM"end;return br,dm end;function getSpeedDisplayString(bH)return d(round(bH*3.6,0)+0.5).." km/h"end;function FormatTimeString(fi)local fj=0;local fk=0;local fl=0;if fi<60 then fi=d(fi)elseif fi<3600 then fj=d(fi/60)fi=d(fi%60)elseif fi<86400 then fk=d(fi/3600)fj=d(fi%3600/60)else fl=d(fi/86400)fk=d(fi%86400/3600)end;if fl>0 then return fl.."d "..fk.."h "elseif fk>0 then return fk.."h "..fj.."m "elseif fj>0 then return fj.."m "..fi.."s"elseif fi>0 then return fi.."s"else return"0s"end end;function getMagnitudeInDirection(de,fm)de=vec3(de)fm=vec3(fm):normalize()local br=de*fm;return br.x+br.y+br.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a0=nil;CustomTarget=nil;return true end;local fn=AtlasOrdered[AutopilotTargetIndex].index;local fo=aX[0][fn]if fo.center then AutopilotTargetName=fo.name;a0=b2[0][fn]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fo;for _,bq in pairs(b2[0])do if bq.name==CustomTarget.planetname then a0=bq;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a0.center)else AutopilotTargetCoords=CustomTarget.position end;if a0.planetname~="Space"then if a0.hasAtmosphere then AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fn=AtlasOrdered[AutopilotTargetIndex].index;local fo=aX[0][fn]if fo.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fn=AtlasOrdered[AutopilotTargetIndex].index;local fo=aX[0][fn]if fo.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fp=LastMaxBrakeInAtmo/a0:getGravity(a0.center+vec3(0,0,1)*a0.radius):len()return fp end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a0.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local ba=core.getWorldVelocity()local bH=vec3(ba):len()local fq=unit.getThrottle()/100;if AtmoSpeedAssist then fq=s end;local fr,fs=b3.computeDistanceAndTime(vec3(ba):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fq,warmup,0)local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ft;if not TurnBurn and bH>0 then _,ft=GetAutopilotBrakeDistanceAndTime(bH)else _,ft=GetAutopilotTBBrakeDistanceAndTime(bH)end;local fu=0;local fv=0;if AutopilotCruising or not Autopilot and bH>5 then fv=b3.computeTravelTime(bH,0,AutopilotDistance)elseif U+fr<AutopilotDistance then fu=AutopilotDistance-(U+fr)fv=b3.computeTravelTime(8333.0556,0,fu)else local fw=(AutopilotDistance-U)/fr;fr=AutopilotDistance-U;fs=fs*fw end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fv elseif AutopilotBraking then return ft elseif AutopilotCruising then return fv+ft else return fs+V+fv end end;function GetAutopilotBrakeDistanceAndTime(bH)if not ai then RefreshLastMaxBrake()return b3.computeDistanceAndTime(bH,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b3.computeDistanceAndTime(bH,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bH)RefreshLastMaxBrake()return b3.computeDistanceAndTime(bH,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fx=-1;local fy=-1;if vBooster then fx=vBooster.distance()end;if hover then fy=hover.distance()end;if fx~=-1 and fy~=-1 then if fx<fy then return fx else return fy end elseif fx~=-1 then return fx elseif fy~=-1 then return fy else return-1 end end;function AboveGroundLevel()local fz=-1;local fA=hoverDetectGround()if telemeter_1 then fz=telemeter_1.getDistance()end;if fA~=-1 and fz~=-1 then if fA<fz then return fA else return fz end elseif fA~=-1 then return fA else return fz end end;function tablelength(fB)local fC=0;for _ in pairs(fB)do fC=fC+1 end;return fC end;function BeginProfile(fD)ProfileTimeStart=system.getTime()end;function EndProfile(fD)local fE=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fE;ProfileCount=ProfileCount+1;if fE>ProfileTimeMax then ProfileTimeMax=fE end;if fE<ProfileTimeMin then ProfileTimeMin=fE end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fF=ProfileTimeSum;local fG=ProfileTimeSum/ProfileCount;local fH=ProfileTimeMin;local fI=ProfileTimeMax;local fJ=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fF,fG,fH,fI,fJ))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fK=radar_1.getEntries()local fL=radar_1.getData()local fM=ConvertResolutionX(1770)local fN=ConvertResolutionY(330)if#fK>0 then local fO=fL:find('identifiedConstructs":%[%]')if fO==nil and perisPanelID==nil then ab=1;ToggleRadarPanel()end;if fO~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a9=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fM,fN,#fK)local fP={}for bp,bq in pairs(fK)do if radar_1.hasMatchingTransponder(bq)==1 then table.insert(fP,bq)end end;if#fP>0 then local bO=ConvertResolutionY(15)local bN=ConvertResolutionX(1370)a9=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a9,bN,bO)for bp,bq in pairs(fP)do bO=bO+20;a9=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a9,bN,bO,radar_1.getConstructName(bq))end end else local fQ;fQ=fL:find('worksInEnvironment":false')if fQ then a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fM,fN)else a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fM,fN)end;if radarPanelID~=nil then ab=0;ToggleRadarPanel()end end end end;function DisplayMessage(ch,dl)if dl~="empty"then ch[#ch+1]=[[<text class="msg" x="50%%" y="310" >]]for fR in string.gmatch(dl,"([^\n]+)")do ch[#ch+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fR)end;ch[#ch+1]=[[</text>]]end;if a7~=0 then unit.setTimer("msgTick",a7)a7=0 end end;function updateDistance()local by=system.getTime()local ba=vec3(core.getWorldVelocity())local dF=vec3(ba):len()local fS=by-al;if dF>1.38889 then dF=dF/1000;local fT=dF*(by-al)TotalDistanceTravelled=TotalDistanceTravelled+fT;a1=a1+fT end;a2=a2+fS;TotalFlightTime=TotalFlightTime+fS;al=by end;function composeAxisAccelerationFromTargetSpeedV(fU,fV)local fW=vec3()local fX=vec3()if fU==axisCommandId.longitudinal then fW=vec3(core.getConstructOrientationForward())fX=vec3(core.getConstructWorldOrientationForward())elseif fU==axisCommandId.vertical then fW=vec3(core.getConstructOrientationUp())fX=vec3(core.getConstructWorldOrientationUp())elseif fU==axisCommandId.lateral then fW=vec3(core.getConstructOrientationRight())fX=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fY=vec3(core.getWorldGravity())local fZ=fY:dot(fX)local f_=vec3(core.getWorldAirFrictionAcceleration())local g0=f_:dot(fX)local g1=vec3(core.getVelocity())local g2=g1:dot(fW)local g3=fV*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(g3-g2)local g4=targetSpeedPID2:get()local g5=(g4-g0-fZ)*fX;return g5 end;function composeAxisAccelerationFromTargetSpeed(fU,fV)local fW=vec3()local fX=vec3()if fU==axisCommandId.longitudinal then fW=vec3(core.getConstructOrientationForward())fX=vec3(core.getConstructWorldOrientationForward())elseif fU==axisCommandId.vertical then fW=vec3(core.getConstructOrientationUp())fX=vec3(core.getConstructWorldOrientationUp())elseif fU==axisCommandId.lateral then fW=vec3(core.getConstructOrientationRight())fX=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fY=vec3(core.getWorldGravity())local fZ=fY:dot(fX)local f_=vec3(core.getWorldAirFrictionAcceleration())local g0=f_:dot(fX)local g1=vec3(core.getVelocity())local g2=g1:dot(fW)local g3=fV*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(g3-g2)local g4=targetSpeedPID:get()local g5=(g4-g0-fZ)*fX;return g5 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aX=Atlas()for bp,bq in pairs(aX[0])do if aA==nil or bq.center.x<aA then aA=bq.center.x end;if aB==nil or bq.center.x>aB then aB=bq.center.x end;if aC==nil or bq.center.y<aC then aC=bq.center.y end;if aD==nil or bq.center.y>aD then aD=bq.center.y end end;aY=""local g6=1.1*(aB-aA)/1920;local g7=1.4*(aD-aC)/1080;for bp,bq in pairs(aX[0])do local bN=960+bq.center.x/g6;local bO=540+bq.center.y/g7;aY=aY..'<circle cx="'..bN..'" cy="'..bO..'" r="'..bq.radius/g6*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bq.name,"Moon")and not string.match(bq.name,"Sanctuary")and not string.match(bq.name,"Space")then aY=aY.."<text x='"..bN.."' y='"..bO+bq.radius/g6*30+20 .."' font-size='28' fill="..ao.." text-anchor='middle' font-family='Montserrat'>"..bq.name.."</text>"end end;local c5=vec3(core.getConstructWorldPos())local bN=960+c5.x/g6;local bO=540+c5.y/g7;aY=aY..'<circle cx="'..bN..'" cy="'..bO..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='"..bN.."' y='"..bO-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aY=aY..[[</svg>]]aZ=g6;a_=g7;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aY)local c5=vec3(core.getConstructWorldPos())local bN=960+c5.x/g6;local bO=540+c5.y/g7;aY='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='80' y='105' font-size='18' fill="..ao.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b0=screen_2.addContent((bN-80)/19.20,(bO-80)/10.80,aY)end end;function PlanetRef()local function g8(g9)return type(g9)=='number'end;local function ga(g9)return type(tonumber(g9))=='number'end;local function gb(gc)return type(gc)=='table'end;local function gd(ge)return type(ge)=='string'end;local function gf(bq)return gb(bq)and g8(bq.x and bq.y and bq.z)end;local function gg(gh)return gb(gh)and g8(gh.latitude and gh.longitude and gh.altitude and gh.bodyId and gh.systemId)end;local gi=math.pi/180;local gj=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c6='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gk=utils.clamp;local function float_eq(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*epsilon end;local function gl(g9)local br=string.gsub(string.reverse(e('%.4f',g9)),'^0*%.?','')return br==''and'0'or string.reverse(br)end;local function gm(gn)if gf(gn)then return e('{x=%.3f,y=%.3f,z=%.3f}',gn.x,gn.y,gn.z)end;if gb(gn)and not getmetatable(gn)then local go={}local gp=next(gn)if type(gp)=='nil'or gp==1 then go=gn else for bp,bq in pairs(gn)do local dY=gm(bq)if type(bp)=='number'then table.insert(go,e('[%s]=%s',bp,dY))else table.insert(go,e('%s=%s',bp,dY))end end end;return e('{%s}',table.concat(go,','))end;if gd(gn)then return e("'%s'",gn:gsub("'",[[\']]))end;return tostring(gn)end;local gq={}gq.__index=gq;gq.__tostring=function(gn,gr)local gs={}for bp in pairs(gn)do table.insert(gs,bp)end;table.sort(gs)local go={}for _,bp in ipairs(gs)do local dY=gm(gn[bp])if type(bp)=='number'then table.insert(go,e('[%s]=%s',bp,dY))else table.insert(go,e('%s=%s',bp,dY))end end;if gr then return e('%s%s',gr,table.concat(go,',\n'..gr))end;return e('{%s}',table.concat(go,','))end;gq.__eq=function(gt,gu)return gt.planetarySystemId==gu.planetarySystemId and gt.bodyId==gu.bodyId and float_eq(gt.radius,gu.radius)and float_eq(gt.center.x,gu.center.x)and float_eq(gt.center.y,gu.center.y)and float_eq(gt.center.z,gu.center.z)and float_eq(gt.GM,gu.GM)end;local function gv(c7,c8,gw,bZ,gx)assert(ga(c7),'Argument 1 (planetarySystemId) must be a number:'..type(c7))assert(ga(c8),'Argument 2 (bodyId) must be a number:'..type(c8))assert(ga(gw),'Argument 3 (radius) must be a number:'..type(gw))assert(gb(bZ),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bZ))assert(ga(gx),'Argument 5 (GM) must be a number:'..type(gx))return setmetatable({planetarySystemId=tonumber(c7),bodyId=tonumber(c8),radius=tonumber(gw),center=vec3(bZ),GM=tonumber(gx)},gq)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gy)return e('::pos{%d,%d,%s,%s,%s}',gy.systemId,gy.bodyId,gl(gy.latitude*gj),gl(gy.longitude*gj),gl(gy.altitude))end;MapPosition.__eq=function(gt,gu)return gt.bodyId==gu.bodyId and gt.systemId==gu.systemId and float_eq(gt.latitude,gu.latitude)and float_eq(gt.altitude,gu.altitude)and(float_eq(gt.longitude,gu.longitude)or float_eq(gt.latitude,math.pi/2)or float_eq(gt.latitude,-math.pi/2))end;local function gz(gA,c8,c2,c3,c1)local c7=gA;if gd(gA)and not c3 and not c1 and not c8 and not c2 then c7,c8,c2,c3,c1=string.match(gA,c6)assert(c7,'Argument 1 (position string) is malformed.')else assert(ga(c7),'Argument 1 (systemId) must be a number:'..type(c7))assert(ga(c8),'Argument 2 (bodyId) must be a number:'..type(c8))assert(ga(c2),'Argument 3 (latitude) must be in degrees:'..type(c2))assert(ga(c3),'Argument 4 (longitude) must be in degrees:'..type(c3))assert(ga(c1),'Argument 5 (altitude) must be in meters:'..type(c1))end;c7=tonumber(c7)c8=tonumber(c8)c2=tonumber(c2)c3=tonumber(c3)c1=tonumber(c1)if c8==0 then return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=c8,systemId=c7},MapPosition)end;return setmetatable({latitude=gi*gk(c2,-90,90),longitude=gi*(c3%360),altitude=c1,bodyId=c8,systemId=c7},MapPosition)end;local gB={}gB.__index=gB;gB.__tostring=function(gn,gr)local gC=gr and gr..'  'local gD={}local gs={}for bp in pairs(gn)do table.insert(gs,bp)end;table.sort(gs)for _,gE in ipairs(gs)do bdy=gn[gE]local gF=gq.__tostring(bdy,gC)if gr then table.insert(gD,e('[%s]={\n%s\n%s}',gE,gF,gr))else table.insert(gD,e('  [%s]=%s',gE,gF))end end;if gr then return e('\n%s%s%s',gr,table.concat(gD,',\n'..gr),gr)end;return e('{\n%s\n}',table.concat(gD,',\n'))end;local function gG(gH)local aX={}local pid;for _,bq in pairs(gH)do local cd=bq.planetarySystemId;if type(cd)~='number'then error('Invalid planetary system ID: '..tostring(cd))elseif pid and cd~=pid then error('Mismatch planetary system IDs: '..cd..' and '..pid)end;local gI=bq.bodyId;if type(gI)~='number'then error('Invalid body ID: '..tostring(gI))elseif aX[gI]then error('Duplicate body ID: '..tostring(gI))end;setmetatable(bq.center,getmetatable(vec3.unit_x))aX[gI]=setmetatable(bq,gq)pid=cd end;return setmetatable(aX,gB)end;b1={}local function gJ(gH)return setmetatable({galaxyAtlas=gH or{}},b1)end;b1.__index=function(gc,i)if type(i)=='number'then local system=gc.galaxyAtlas[i]return gG(system)end;return rawget(b1,i)end;b1.__pairs=function(gn)return function(gc,bp)local gK,nv=next(gc,bp)return gK,nv and gG(nv)end,gn.galaxyAtlas,nil end;b1.__tostring=function(gn)local gL={}for _,gM in pairs(gn or{})do local gN=gM:getPlanetarySystemId()local gO=gB.__tostring(gM,'    ')table.insert(gL,e('  [%s]={%s\n  }',gN,gO))end;return e('{\n%s\n}\n',table.concat(gL,',\n'))end;b1.BodyParameters=gv;b1.MapPosition=gz;b1.PlanetarySystem=gG;function b1.createBodyParameters(gP,c8,gQ,gR,gS,gT,gU)assert(ga(gP),'Argument 1 (planetarySystemId) must be a number:'..type(gP))assert(ga(c8),'Argument 2 (bodyId) must be a number:'..type(c8))assert(ga(gQ),'Argument 3 (surfaceArea) must be a number:'..type(gQ))assert(gb(gR),'Argument 4 (aPosition) must be an array or vec3:'..type(gR))assert(gb(gS),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gS))assert(ga(gT),'Argument 6 (altitude) must be in meters:'..type(gT))assert(ga(gU),'Argument 7 (gravityAtPosition) must be number:'..type(gU))local gw=math.sqrt(gQ/4/math.pi)local a8=gw+gT;local gV=vec3(gR)+a8*vec3(gS)local gx=gU*a8*a8;return gv(gP,c8,gw,gV,gx)end;b1.isMapPosition=gg;function b1:getPlanetarySystem(gA)if i==nil then i=0 end;if nv==nil then nv=0 end;local gP=gA;if gg(gA)then gP=gA.systemId end;if type(gP)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gB then system=gG(system)end;return system end end end;function gB:castIntersections(gW,fm,gX,gY)local gX=gX or function(f1)return 1.05*f1.radius end;local gZ={}if gY then for _,i in ipairs(gY)do gZ[i]=self[i]end else gY={}for bp,f1 in pairs(self)do table.insert(gY,bp)gZ[bp]=f1 end end;local function g_(h0,h1)local h2=gZ[h0].center-gW;local h3=gZ[h1].center-gW;return h2:len()<h3:len()end;table.sort(gY,g_)local h4=fm:normalize()for i,cd in ipairs(gY)do local f1=gZ[cd]local h5=f1.center-gW;local gw=gX(f1)local h6=h5:dot(h4)local h7=h6^2-(h5:len2()-gw^2)if h7>=0 then local h8=math.sqrt(h7)local e_=h6+h8;local f0=h6-h8;if f0>0 then return f1,e_,f0 elseif e_>0 then return f1,e_,nil end end end;return nil,nil,nil end;function gB:closestBody(h9)assert(type(h9)=='table','Invalid coordinates.')local ha,f1;local hb=vec3(h9)for _,hc in pairs(self)do local hd=(hc.center-hb):len2()if(not f1 or hd<ha)and hc.name~="Space"then f1=hc;ha=hd end end;return f1 end;function gB:convertToBodyIdAndWorldCoordinates(gA)local he=gA;if gd(gA)then he=gz(gA)end;if he.bodyId==0 then return 0,vec3(he.latitude,he.longitude,he.altitude)end;local hc=self:getBodyParameters(he)if hc then return he.bodyId,hc:convertToWorldCoordinates(he)end end;function gB:getBodyParameters(gA)local c8=gA;if gg(gA)then c8=gA.bodyId end;assert(ga(c8),'Argument 1 (bodyId) must be a number:'..type(c8))return self[c8]end;function gB:getPlanetarySystemId()local _,bq=next(self)return bq and bq.planetarySystemId end;function gq:convertToMapPosition(bZ)assert(gb(bZ),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bZ))local b_=vec3(bZ)if self.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c0=b_-self.center;local a8=c0:len()local c1=a8-self.radius;local c2=0;local c3=0;if not float_eq(a8,0)then local c4=math.atan(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a8)end;return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gq:convertToWorldCoordinates(gA)local he=gd(gA)and gz(gA)or gA;if he.bodyId==0 then return vec3(he.latitude,he.longitude,he.altitude)end;assert(gg(he),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(he.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(he.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local c9=math.cos(he.latitude)return self.center+(self.radius+he.altitude)*vec3(c9*math.cos(he.longitude),c9*math.sin(he.longitude),math.sin(he.latitude))end;function gq:getAltitude(bZ)return(vec3(bZ)-self.center):len()-self.radius end;function gq:getDistance(bZ)return(vec3(bZ)-self.center):len()end;function gq:getGravity(bZ)local hf=self.center-vec3(bZ)local hg=hf:len2()return self.GM/hg*hf/math.sqrt(hg)end;return setmetatable(b1,{__call=function(_,...)return gJ(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gd(ge)return type(ge)=='string'end;local function gb(gc)return type(gc)=='table'end;local function float_eq(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c1)assert(self.body)local a8=c1+self.body.radius;if not float_eq(a8,0)then local orbit=math.sqrt(self.body.GM/a8)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gA,ba)assert(self.body)assert(gb(gA)or gd(gA))assert(gb(ba))local c5=(gd(gA)or PlanetRef.isMapPosition(gA))and self.body:convertToWorldCoordinates(gA)or vec3(gA)local bq=vec3(ba)local hh=c5-self.body.center;local h3=bq:len2()local hi=hh:len()local hj=self.body.GM;local hk=((h3-hj/hi)*hh-hh:dot(bq)*bq)/hj;local bW=hj/(2*hj/hi-h3)local hl=hk:len()local h4=hk:normalize()local hm=bW*(1-hl)local hn=bW*(1+hl)local ho=hm*h4+self.body.center;local hp=hl<=1 and-hn*h4+self.body.center or nil;local hq=math.sqrt(bW*hj*(1-hl*hl))local hr=hp and 2*math.pi*math.sqrt(bW^3/hj)local hs=math.acos(hk:dot(hh)/(hl*hi))if hh:dot(bq)<0 then hs=-(hs-2*math.pi)end;local ht=math.acos((math.cos(hs)+hl)/(1+hl*math.cos(hs)))local hu=ht;if hu<0 then hu=hu+2*math.pi end;local hv=hu-hl*math.sin(hu)local hw=0;local hx=0;local hy=0;if hr~=nil then hw=hv/(2*math.pi/hr)hx=hr-hw;hy=hx+hr/2;if hs-math.pi>0 then hx=hw;hy=hx+hr/2 end;if hy>hr then hy=hy-hr end end;return{periapsis={position=ho,speed=hq/hm,circularOrbitSpeed=math.sqrt(hj/hm),altitude=hm-self.body.radius},apoapsis=hp and{position=hp,speed=hq/hn,circularOrbitSpeed=math.sqrt(hj/hn),altitude=hn-self.body.radius},currentVelocity=bq,currentPosition=c5,eccentricity=hl,period=hr,eccentricAnomaly=ht,meanAnomaly=hv,timeToPeriapsis=hx,timeToApoapsis=hy}end;local function hz(hA)local hc=PlanetRef.BodyParameters(hA.planetarySystemId,hA.bodyId,hA.radius,hA.center,hA.GM)return setmetatable({body=hc},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hz(...)end})end;function Kinematics()local b3={}local hB=30000000/3600;local hC=hB*hB;local hD=100;local function hE(bq)return 1/math.sqrt(1-bq*bq/hC)end;function b3.computeAccelerationTime(hF,hG,hH)local hI=hB*math.asin(hF/hB)return(hB*math.asin(hH/hB)-hI)/hG end;function b3.computeDistanceAndTime(hF,hH,hJ,hK,hL,hM)hL=hL or 0;hM=hM or 0;local hN=hF<=hH;local hO=hK*(hN and 1 or-1)/hJ;local hP=-hM/hJ;local hQ=hO+hP;if hN and hQ<=0 or not hN and hQ>=0 then return-1,-1 end;local hR,hS=0,0;if hO~=0 and hL>0 then local hI=math.asin(hF/hB)local hT=math.pi*(hO/2+hP)local hU=hO*hL;local hV=hB*math.pi;local bq=function(gc)local cJ=(hT*gc-hU*math.sin(math.pi*gc/2/hL)+hV*hI)/hV;local hW=math.tan(cJ)return hB*hW/math.sqrt(hW*hW+1)end;local hX=hN and function(ge)return ge>=hH end or function(ge)return ge<=hH end;hS=2*hL;if hX(bq(hS))then local hY=0;while math.abs(hS-hY)>0.5 do local gc=(hS+hY)/2;if hX(bq(gc))then hS=gc else hY=gc end end end;local hZ=hF;local h_=hS/hD;for i0=1,hD do local bH=bq(i0*h_)hR=hR+(bH+hZ)*h_/2;hZ=bH end;if hS<2*hL then return hR,hS end;hF=hZ end;local hI=hB*math.asin(hF/hB)local bs=(hB*math.asin(hH/hB)-hI)/hQ;local i1=hC*math.cos(hI/hB)/hQ;local a8=i1-hC*math.cos((hQ*bs+hI)/hB)/hQ;return a8+hR,bs+hS end;function b3.computeTravelTime(hF,hG,a8)if a8==0 then return 0 end;if hG>0 then local hI=hB*math.asin(hF/hB)local i1=hC*math.cos(hI/hB)/hG;return(hB*math.acos(hG*(i1-a8)/hC)-hI)/hG end;if hF==0 then return-1 end;assert(hF>0,'Acceleration and initial speed are both zero.')return a8/hF end;function b3.lorentz(bq)return hE(bq)end;return b3 end;function script.onStart()VERSION_NUMBER=5.331;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b1=PlanetRef()b2=b1(Atlas())b3=Kinematics()b5=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;if bl~=nil then bl.activate()end;if bm~=nil then bm.activate()end end)end;function SaveDataBank(i2)if dbHud_1 then if not a3 then for bp,bq in pairs(b)do dbHud_1.setStringValue(bq,g(_G[bq]))if i2 and dbHud_2 then dbHud_2.setStringValue(bq,g(_G[bq]))end end;for bp,bq in pairs(a)do dbHud_1.setStringValue(bq,g(_G[bq]))if i2 and dbHud_2 then dbHud_2.setStringValue(bq,g(_G[bq]))end end;c("Saved Variables to Datacore")if i2 and dbHud_2 then P="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bA=j()if door and(bA>0 or bA==0 and aj<10000)then for _,bq in pairs(door)do bq.toggle()end end;if forcefield and(bA>0 or bA==0 and aj<10000)then for _,bq in pairs(forcefield)do bq.toggle()end end;SaveDataBank()if button then button.activate()end;if bl~=nil then bl.deactivate()end end;function script.onTick(i3)if i3=="tenthSecond"then if bk~=nil then bk.deactivate()end;if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then s=1;Nav.control.cancelCurrentControlMasterMode()w=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local i4=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if i4 and not Autopilot then a8=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a8=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)W,X=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)W,X=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dl,dm=getDistanceDisplayString(a8)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dl..'", "unit":"'..dm..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dl,dm=getDistanceDisplayString(U)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dl..'", "unit":"'..dm..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(V)..'", "unit":""}')dl,dm=getDistanceDisplayString(W)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dl..'", "unit":"'..dm..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(X)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dl,dm=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dl)..'", "unit":"'..dm..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif i3=="oneSecond"then if bk~=nil then bk.activate()end;ag=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local ch={}local dv=GetFlightStyle()DrawOdometer(ch,a1,TotalDistanceTravelled,dv,a2)if ShouldCheckDamage then CheckDamage(ch)end;aa=table.concat(ch,"")collectgarbage("collect")elseif i3=="fiveSecond"then ah=dbHud_1.getStringValue("SPBAutopilotTargetName")if ah~=nil and ah~=""and ah~="SatNavNotChanged"then local br=json.decode(dbHud_1.getStringValue("SavedLocations"))if br~=nil then _G["SavedLocations"]=br;local cf=-1;local cc;for bp,bq in pairs(SavedLocations)do if bq.name and bq.name=="SatNav Location"then cf=bp;break end end;if cf~=-1 then cc=SavedLocations[cf]cf=-1;for bp,bq in pairs(aX[0])do if bq.name and bq.name=="SatNav Location"then cf=bp;break end end;if cf>-1 then aX[0][cf]=cc end;UpdateAtlasLocationsList()P=cc.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ah then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif i3=="msgTick"then local ch={}DisplayMessage(ch,"empty")P="empty"unit.stopTimer("msgTick")a7=3 elseif i3=="animateTick"then b7=true;b6=false;a5=0;a6=0;unit.stopTimer("animateTick")elseif i3=="hudTick"then local ch={}HUDPrologue(ch)if showHud then UpdateHud(ch)else DisplayOrbitScreen(ch)DrawWarnings(ch)end;HUDEpilogue(ch)ch[#ch+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if P~="empty"then DisplayMessage(ch,P)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(ch)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(ch)if screen_1.getMouseState()==1 then CheckButtons()end;ch[#ch+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)elseif system.isViewLocked()==0 then if o()==1 and O then SetButtonContains()DrawButtons(ch)if not b6 and not b7 then local i5=table.concat(ch,"")ch={}ch[#ch+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)ch[#ch+1]=aY;ch[#ch+1]=i5;ch[#ch+1]="</body>"b6=true;ch[#ch+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ch,"")system.setScreen(content)elseif b7 then local i5=table.concat(ch,"")ch={}ch[#ch+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)ch[#ch+1]=aY;ch[#ch+1]=i5;ch[#ch+1]="</body>"end;if not b6 then ch[#ch+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end else CheckButtons()end else if not O and o()==0 then CheckButtons()if a8>DeadZone then DrawCursorLine(ch)end else SetButtonContains()DrawButtons(ch)end;ch[#ch+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end;ch[#ch+1]=[[</svg></body>]]content=table.concat(ch,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif i3=="apTick"then b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ai=j()>0;local bs=system.getTime()local i6=bs-bh;bh=bs;local ck=vec3(core.getConstructWorldOrientationForward())local cl=vec3(core.getConstructWorldOrientationRight())local i7=vec3(core.getConstructWorldOrientationUp())local cm=vec3(core.getWorldVertical())local i8=vec3(core.getConstructWorldPos())local i9=core.getVelocity()local dx=getRoll(cm,ck,cl)local dy=dx/180*math.pi;local dz=math.cos(dy)local dA=math.sin(dy)local cn=getPitch(cm,ck,cl)local ia=getPitch(cm,ck,cl*dz+i7*dA)local ib=-math.deg(cE(i7,ba,ck))local ic=math.deg(cE(cl,ba,ck))bg=ai and ib<-YawStallAngle or ib>YawStallAngle or ic<-PitchStallAngle or ic>PitchStallAngle;local id=150;be=system.getMouseDeltaX()bf=system.getMouseDeltaY()if InvertMouse and not O then bf=-bf end;I=0;M=0;H=0;ba=vec3(core.getWorldVelocity())bb=vec3(ba):len()sys=b2[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b5(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),ba)af=hoverDetectGround()local bE=planet:getGravity(core.getConstructWorldPos()):len()*n()bi=0;b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a5=screen_1.getMouseX()*ResolutionX;a6=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and O then if not b6 then a5=a5+be;a6=a6+bf end else a5=0;a6=0 end else a5=a5+be;a6=a6+bf;a8=math.sqrt(a5*a5+a6*a6)if not O and o()==0 then if userControlScheme=="virtual joystick"then if a5>0 and a5>DeadZone then I=I-(a5-DeadZone)*MouseXSensitivity elseif a5<0 and a5<DeadZone*-1 then I=I-(a5+DeadZone)*MouseXSensitivity else I=0 end;if a6>0 and a6>DeadZone then H=H-(a6-DeadZone)*MouseYSensitivity elseif a6<0 and a6<DeadZone*-1 then H=H-(a6+DeadZone)*MouseYSensitivity else H=0 end elseif userControlScheme=="mouse"then a5=0;a6=0;H=(-utils.smoothstep(bf,-100,100)+0.5)*2*D;I=(-utils.smoothstep(be,-100,100)+0.5)*2*E else a5=0;a6=0 end end end;local ie=bb>8334;if bb>SpaceSpeedLimit/3.6 and not ai and not Autopilot and not ie then P="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end;if not ie and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=ie;if ai and j()>0.09 then if bb>bn/3.6 and not AtmoSpeedAssist and not an then BrakeIsOn=true;an=true elseif not AtmoSpeedAssist and an then if bb<bn/3.6 then BrakeIsOn=false;an=false end end end;if BrakeIsOn then L=1 else L=0 end;aj=core.getAltitude()if aj==0 then aj=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ac then BrakeIsOn=false;local ig=false;if CustomTarget~=nil then ig=AlignToWorldVector(CustomTarget.position-i8,0.01)else ig=AlignToWorldVector(vec3(ba),0.01)end;b8=true;if ig and(math.abs(dx)<2 or math.abs(ia)>85)and bb>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;C=true;ac=false;ae=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bn))s=0 end elseif bb>B then AlignToWorldVector(vec3(ba),0.01)end end;if RetrogradeIsOn then if ai then RetrogradeIsOn=false elseif bb>B then AlignToWorldVector(-vec3(ba))end end;if not ProgradeIsOn and ac then if j()==0 then C=true;BeginReentry()ac=false;ae=true else ac=false;ToggleAutopilot()end end;local e1=vec3(core.getWorldVertical())*-1;local d_=ba.x*e1.x+ba.y*e1.y+ba.z*e1.z;if ae and(aj<HoldAltitude+200 and aj>HoldAltitude-200)and bb*3.6>bn-100 and math.abs(d_)<20 and j()>=0.1 and(CustomTarget.position-i8):len()>2000+aj then ToggleAutopilot()ae=false end;if Autopilot and j()==0 and not ac then local ih=AutopilotTargetCoords;local ii=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local ij=(CustomTarget.position-a0.center):normalize()local ik=ij:project_on_plane((a0.center-i8):normalize()):normalize()local il=a0.center+ik*(a0.radius+AutopilotTargetOrbit)local im=CustomTarget.position+(CustomTarget.position-a0.center):normalize()*(AutopilotTargetOrbit-a0:getAltitude(CustomTarget.position))if not TargetSet then if(i8-il):len()<(i8-im):len()then ih=il;AutopilotTargetCoords=ih else ih=CustomTarget.position+(CustomTarget.position-a0.center):normalize()*(AutopilotTargetOrbit-a0:getAltitude(CustomTarget.position))AutopilotTargetCoords=ih end;local co=zeroConvertToMapPosition(a0,AutopilotTargetCoords)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)ii=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ii=true;TargetSet=true;AutopilotRealigned=true;ih=CustomTarget.position+(i8-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local ij=(i8+ba*100000-a0.center):normalize()local ik=ij:project_on_plane((a0.center-i8):normalize()):normalize()if ik:len()<1 then ij=(i8+vec3(core.getConstructWorldOrientationForward())*100000-a0.center):normalize()ik=ij:project_on_plane((a0.center-i8):normalize()):normalize()end;ih=a0.center+ik*(a0.radius+AutopilotTargetOrbit)AutopilotTargetCoords=ih;TargetSet=true;ii=true;AutopilotRealigned=true;local co=zeroConvertToMapPosition(a0,AutopilotTargetCoords)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)end end;AutopilotDistance=(vec3(ih)-vec3(core.getConstructWorldPos())):len()local eZ,e_,f0=b2:getPlanetarySystem(0):castIntersections(i8,ba:normalize(),function(f1)if f1.noAtmosphericDensityAltitude>0 then return f1.radius+f1.noAtmosphericDensityAltitude else return f1.radius+f1.surfaceMaxAltitude*1.5 end end)local f2=e_;if f0~=nil and e_~=nil then f2=math.min(f0,e_)end;if f2~=nil and f2<AutopilotDistance and eZ.name==a0.name then AutopilotDistance=f2 end;local ig=true;local io=(a0.center-(vec3(core.getConstructWorldPos())+vec3(ba):normalize()*AutopilotDistance)):len()-a0.radius;local dl,dm=getDistanceDisplayString(io)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dl..'", "unit":"'..dm..'"}')local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)end;if bb>300 and AutopilotAccelerating then local di=vec3(ih)-vec3(core.getConstructWorldPos())local ip=utils.clamp(math.deg(cE(i7,ba:normalize(),di:normalize()))*bb/500,-90,90)local iq=utils.clamp(math.deg(cE(cl,ba:normalize(),di:normalize()))*bb/500,-90,90)if math.abs(ip)<20 and math.abs(iq)<20 then ip=ip*2;iq=iq*2 end;if math.abs(ip)<2 and math.abs(iq)<2 then ip=ip*2;iq=iq*2 end;local ib=-math.deg(cE(i7,ck,ba:normalize()))local ic=-math.deg(cE(cl,ck,ba:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iq-ic)local ir=utils.clamp(apPitchPID:get(),-1,1)H=H+ir;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ip-ib)local is=utils.clamp(apYawPID:get(),-1,1)I=I+is;ii=true;if math.abs(ip)>2 or math.abs(iq)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if io<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(io)end end;if not AutopilotCruising and not AutopilotBraking and not ii then ig=AlignToWorldVector((ih-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then ig=AlignToWorldVector(-vec3(ba):normalize())end;if AutopilotAccelerating then if not z then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)s=round(AutopilotInterplanetaryThrottle,2)z=true end;local fq=unit.getThrottle()if AtmoSpeedAssist then fq=s end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fq==0 and z then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end;if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;L=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)s=1 end;local _,it=b5(a0):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local di,iu,iv;if CustomTarget~=nil then di=CustomTarget.position-i8;iu=planet:getAltitude(CustomTarget.position)iv=math.sqrt(di:len()^2-(aj-iu)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bb<50 then P="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bb<=it and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;local co=zeroConvertToMapPosition(a0,AutopilotTargetCoords)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,it=b5(a0):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bb<=it then if CustomTarget~=nil then if ba:normalize():dot(di:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local co=zeroConvertToMapPosition(a0,CustomTarget.position)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)WaypointSet=true end else P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;BrakeIsOn=false;local co=zeroConvertToMapPosition(a0,CustomTarget.position)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"P="Autopilot completed, orbit established"L=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ac=true end end end end elseif AutopilotCruising then if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fq=unit.getThrottle()if AtmoSpeedAssist then fq=s end;if fq>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if ig then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ac then AutopilotTargetCoords=vec3(a0.center)+(AutopilotTargetOrbit+a0.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif ig then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not z then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)s=round(AutopilotInterplanetaryThrottle,2)z=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"L=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;local co=zeroConvertToMapPosition(a0,CustomTarget.position)co="::pos{"..co.systemId..","..co.bodyId..","..co.latitude..","..co.longitude..","..co.altitude.."}"system.setWaypoint(co)end;if N then b8=true;local iq=0;local c5=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iw=c5-vec3(core.getConstructWorldPos())local ix=vec3(iw):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iy=vec3(iw):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a8=math.sqrt(ix*ix+iy*iy)AlignToWorldVector(iw:normalize())local iz=40;local iA=a8<iz;local iB=100;local fV=utils.clamp((a8-iz)/2,10,iB)H=0;local ig=math.abs(I)<0.1;if ig and bb<fV and not iA then BrakeIsOn=false;iq=-20 else BrakeIsOn=true;iq=0 end;local iC=0;if math.abs(iq-cn)>iC then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iq-cn)local ir=pitchPID:get()H=ir end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dI=unit.getClosestPlanetInfluence()>0;local iD=HoldAltitude-aj;local iE=500+bb;local iF=1;if AutoTakeoff then iF=utils.clamp(bb/100,0.1,1)end;local iq=(utils.smoothstep(iD,-iE,iE)-0.5)*2*MaxPitch*iF;if not Reentry and not ac and not VectorToTarget and ck:dot(ba:normalize())<0.99 then iq=(utils.smoothstep(iD,-iE*utils.clamp(20-19*j()*10,1,20),iE*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*iF end;if not AltitudeHold then iq=0 end;if LockPitch~=nil then if dI then iq=LockPitch else LockPitch=nil end end;b8=true;local iG=H;if Reentry then local ReentrySpeed=math.floor(bn)local iH,iI=b3.computeDistanceAndTime(bb,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local iJ=aj-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and aj>planet.noAtmosphericDensityAltitude+5000 and bb<=ReentrySpeed/3.6 and bb>ReentrySpeed/3.6-10 and math.abs(ba:normalize():dot(ck))>0.9 then Nav.control.cancelCurrentControlMasterMode()s=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(iH>-1 and iJ<=iH or aj<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not C then iq=-80;if j()>0.02 then P="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iq=0;b8=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aj>planet.noAtmosphericDensityAltitude+5000 then b8=true elseif aj<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bn then C=false;Reentry=false;b8=true end end end;if bb>B and not ad and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(ba))end;if(VectorToTarget or ad)and AutopilotTargetIndex>0 and j()>0.01 then local di;if CustomTarget~=nil then di=CustomTarget.position-vec3(core.getConstructWorldPos())else di=a0.center-i8 end;local i7=vec3(core.getConstructWorldOrientationUp())local ip=math.deg(cE(cm:normalize(),ba,di))*2;local iK=math.rad(math.abs(dx))if bb>id and j()>0.01 then local iL=utils.clamp(90-iq*2,-90,90)bi=utils.clamp(ip*2,-iL,iL)local iM=ip;ip=utils.clamp(utils.clamp(ip,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(iK)+4*(ia-iq)*math.sin(math.rad(dx)),-YawStallAngle*0.85,YawStallAngle*0.85)iq=utils.clamp(utils.clamp(iq*math.cos(iK),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(iM)*math.sin(iK),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bi=0;ip=utils.clamp(ip,-90,90)end;local iN=ib-ip;if not bg and bb>id and j()>0.01 then if yawPID==nil then yawPID=pid.new(5*0.01,0,5*0.1)end;yawPID:inject(iN)local is=utils.clamp(yawPID:get(),-1,1)I=I+is elseif ai and af>-1 or bb<id then AlignToWorldVector(di)elseif bg and j()>0.01 then if(ib<-YawStallAngle or ib>YawStallAngle)and j()>0.01 then AlignToWorldVector(ba)end;if(ic<-PitchStallAngle or ic>PitchStallAngle)and j()>0.01 then iq=utils.clamp(ia-ic,ia-PitchStallAngle*0.85,ia+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ad then local iu=planet:getAltitude(CustomTarget.position)local iJ=math.sqrt(di:len()^2-(aj-iu)^2)local iO=LastMaxBrakeInAtmo;if iO then iO=iO*utils.clamp(bb/100,0.1,1)*j()else iO=LastMaxBrake end;if j()<0.01 then iO=LastMaxBrake else end;local d_=ba.x*e1.x+ba.y*e1.y+ba.z*e1.z;local iP=ba:len()-math.abs(d_)local iQ=vec3(core.getWorldAirFrictionAcceleration())local iR=math.sqrt(iQ:len()-iQ:project_on(e1):len())*n()if bb>100 then U,V=b3.computeDistanceAndTime(bb,100,n(),0,0,iO+iR)local iS,iT=b3.computeDistanceAndTime(100,0,n(),0,0,iO/2)U=U+iS else U,V=b3.computeDistanceAndTime(bb,0,n(),0,0,iO/2)end;StrongBrakes=true;if not ad and iJ<=U+bb*i6/2 and(ba:project_on_plane(cm):normalize():dot(di:project_on_plane(cm):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(iP<0.1 or iJ<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<iJ)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=iJ end end;if bg and j()>0.01 and af==-1 and bb>id and VectorStatus~="Finalizing Approach"then AlignToWorldVector(ba)iq=utils.clamp(ia-ic,ia-PitchStallAngle*0.85,ia+PitchStallAngle*0.85)end;H=iG;local fz=-1;local iC=0.1;if BrakeLanding then iq=0;local d_=ba.x*e1.x+ba.y*e1.y+ba.z*e1.z;local iU=false;local iV=30;if b4~=nil and b4>0 then local iR=0;local dD=utils.clamp(j(),0.4,2)local iO=LastMaxBrakeInAtmo*utils.clamp(bb/100,0.1,1)*dD;local iW=b4*dD+iO+iR-bE;local iX=iO+iR-bE;local iY=iO/2+iR-bE;local iZ=bb-math.sqrt(math.abs(iY/2)*20/(0.5*n()))*utils.sign(iY)if iZ<0 then iZ=0 end;local i_;if bb>100 then local j0,_=b3.computeDistanceAndTime(bb,100,n(),0,0,iO)local j1,_=b3.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(iO))i_=j0+j1 else i_=b3.computeDistanceAndTime(bb,0,n(),0,0,math.sqrt(iO))end;if i_<20 then BrakeIsOn=false else local j2=0;if iZ>100 then local j3,_=b3.computeDistanceAndTime(iZ,100,n(),0,0,iW)local j4,_=b3.computeDistanceAndTime(100,0,n(),0,0,b4*dD+math.sqrt(iO)+iR-bE)j2=j3+j4 else j2,_=b3.computeDistanceAndTime(iZ,0,n(),0,0,b4*dD+math.sqrt(iO)+iR-bE)end;j2=(j2+15+bb*i6)*1.1;local j5=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if j5 then local iu=planet:getAltitude(CustomTarget.position)local j6=aj-iu-100;local di=CustomTarget.position-vec3(core.getConstructWorldPos())local iv=math.sqrt(di:len()^2-(aj-iu)^2)if iv>100 then j5=false elseif j6<=j2 or j2==-1 then BrakeIsOn=true;iU=true else BrakeIsOn=false;iU=true end end;if not j5 and CalculateBrakeLandingSpeed then if j2>=iV then BrakeIsOn=true else BrakeIsOn=false end;iU=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fz=af;if fz>-1 then b8=autoRollPreference;if bb<1 or ba:normalize():dot(cm)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a4=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and ba:normalize():dot(-e1)<0.999 then BrakeIsOn=true elseif d_<-brakeLandingRate and not iU then BrakeIsOn=true elseif not iU then BrakeIsOn=false end end;if AutoTakeoff or ad then local eZ,f0,e_=b2:getPlanetarySystem(0):castIntersections(i8,(AutopilotTargetCoords-i8):normalize(),function(f1)return f1.radius+f1.noAtmosphericDensityAltitude end)if math.abs(iq)<15 and aj/HoldAltitude>0.75 then AutoTakeoff=false;if not ad then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ad and bb<B then Autopilot=true;ad=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 elseif ad then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;BrakeIsOn=true end elseif ad and j()==0 and a0~=nil and(eZ==nil or eZ.name==a0.name)then Autopilot=true;ad=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local j7=hoverDetectGround()>-1;local j8=cn;if(VectorToTarget or ad)and not j7 and bb>id and j()>0.01 then local iK=math.rad(math.abs(dx))j8=cn*math.abs(math.cos(iK))+ic*math.sin(iK)end;local j9=utils.clamp(iq-j8,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then j9=utils.clamp(iq-j8,-85,MaxPitch)elseif j()<0.01 then j9=utils.clamp(iq-j8,-MaxPitch,MaxPitch)end;if math.abs(dx)<5 or VectorToTarget or BrakeLanding or j7 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(j9)local ir=pitchPID:get()H=H+ir end end;Q=orbit.eccentricity;if antigrav and not ExternalAGG and aj<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if bm~=nil then local ja=core.getAltitude()if ja<HeadlightGroundHeight then bm.activate()else bm.deactivate()end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and w then s=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)w=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not w then s=0;w=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jb=utils.clamp(G+H+system.getControlDeviceForwardInput(),-1,1)local jc=utils.clamp(J+M+system.getControlDeviceYawInput(),-1,1)local jd=utils.clamp(K+I-system.getControlDeviceLeftRightInput(),-1,1)local je=L;local jf=vec3(core.getWorldVertical())if jf==nil or jf:len()==0 then jf=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jg=vec3(core.getConstructWorldOrientationUp())local jh=vec3(core.getConstructWorldOrientationForward())local ji=vec3(core.getConstructWorldOrientationRight())local jj=vec3(core.getWorldVelocity())local jk=vec3(core.getWorldVelocity()):normalize()local jl=getRoll(jf,jh,ji)local jm=math.abs(jl)local jn=utils.sign(jl)local j=j()local jo=vec3(core.getWorldAngularVelocity())local jp=jb*pitchSpeedFactor*ji+jc*rollSpeedFactor*jh+jd*yawSpeedFactor*jg;if jf:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ac or AltitudeHold)then local dx=getRoll(jf,jh,ji)local dy=dx/180*math.pi;local dz=math.cos(dy)local dA=math.sin(dy)local ia=getPitch(jf,jh,ji*dz+jg*dA)if b8==true and math.abs(bi-jl)>autoRollRollThreshold and jc==0 and math.abs(ia)<85 then local jq=bi;local jr=autoRollFactor;if j==0 then jr=jr/4;bi=0;jq=0 end;if rollPID==nil then rollPID=pid.new(jr*0.01,0,jr*0.1)end;rollPID:inject(jq-jl)local js=rollPID:get()jp=jp+js*jh end end;if jf:len()>0.01 and j>0.0 then local jt=20.0;if turnAssist==true and jm>jt and jb==0 and jd==0 then local ju=turnAssistFactor*0.1;local jv=turnAssistFactor*0.025;local jw=(jm-jt)/(180-jt)*180;local jx=0;if jw<90 then jx=jw/90 elseif jw<180 then jx=(180-jw)/90 end;jx=jx*jx;local jy=-jn*jv*(1.0-jx)local jz=ju*jx;jp=jp+jz*ji+jy*jg end end;local jA=1;local jB=0;local jC=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;A=false else s=round(utils.clamp(s+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;A=false else s=round(utils.clamp(s-speedChangeLarge/100,-1,1),2)end end;t=0;local d_=-jf:dot(jj)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-jj:dot(jh))local jD=throttlePID:get()v=utils.clamp(jD,-1,1)if v<s and(j>0.05 or j>0.01 and d_<0)then u=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(v,0.01,1))else u=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jj:len()-bn/3.6)local jE=utils.clamp(brakePID:get(),0,1)if j>0 and d_<-80 or j>0.05 then t=jE end;if t>0 then if u and v==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else v=utils.clamp(v,0.01,1)end;local jF=''local jG=vec3()local jH=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a4*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",jH,jB)local jI='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jI=jI..ExtraLongitudeTags end;local jJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local jK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jI,axisCommandId.longitudinal)local jL=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,0)jF=jF..' , '.."lateral airfoil , lateral ground "jG=jG+jL;if jG:len()>constants.epsilon then Nav:setEngineForceCommand(jF,jG,jB,'','','',jC)end;Nav:setEngineForceCommand(jI,jK,jA)local jM='thrust analog vertical fueled 'local jN='thrust analog lateral fueled 'if ExtraLateralTags~="none"then jN=jN..ExtraLateralTags end;if ExtraVerticalTags~="none"then jM=jM..ExtraVerticalTags end;if a4~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jM,jH,jA)else Nav:setEngineForceCommand(jM,vec3(),jA)end;if LeftAmount~=0 then Nav:setEngineForceCommand(jN,jL,jA)else Nav:setEngineForceCommand(jN,vec3(),jA)end;if je==0 then je=t end;local jO=-je*(brakeSpeedFactor*jj+brakeFlatFactor*jk)Nav:setEngineForceCommand('brake',jO)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;local jO=-je*(brakeSpeedFactor*jj+brakeFlatFactor*jk)Nav:setEngineForceCommand('brake',jO)local jF=''local jG=vec3()local jP=false;local jI='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jI=jI..ExtraLongitudeTags end;local jJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jJ==axisCommandType.byThrottle then local jK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jI,axisCommandId.longitudinal)Nav:setEngineForceCommand(jI,jK,jA)elseif jJ==axisCommandType.byTargetSpeed then local jK=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jF=jF..' , '..jI;jG=jG+jK;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then jP=true end end;local jN='thrust analog lateral 'if ExtraLateralTags~="none"then jN=jN..ExtraLateralTags end;local jQ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jQ==axisCommandType.byThrottle then local jR=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jN,axisCommandId.lateral)Nav:setEngineForceCommand(jN,jR,jA)elseif jQ==axisCommandType.byTargetSpeed then local jL=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jF=jF..' , '..jN;jG=jG+jL end;local jM='thrust analog vertical 'if ExtraVerticalTags~="none"then jM=jM..ExtraVerticalTags end;local jS=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jS==axisCommandType.byThrottle then local jH=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jM,axisCommandId.vertical)if a4~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jM,jH,jA,'airfoil','ground','',jC)else Nav:setEngineForceCommand(jM,vec3(),jA)Nav:setEngineForceCommand('airfoil vertical',jH,jA,'airfoil','','',jC)Nav:setEngineForceCommand('ground vertical',jH,jA,'ground','','',jC)end elseif jS==axisCommandType.byTargetSpeed then if a4<0 then Nav:setEngineForceCommand('hover',vec3(),jA)end;local jT=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jF=jF..' , '..jM;jG=jG+jT end;local fV=unit.getAxisCommandValue(0)if jG:len()>constants.epsilon then if L~=0 or jP or math.abs(jk:dot(jh))<0.8 or ba:len()>fV/3.6 then jF=jF..', brake'end;Nav:setEngineForceCommand(jF,jG,jB,'','','',jC)end end;local jU=torqueFactor*(jp-jo)local jV=vec3(core.getWorldAirFrictionAngularAcceleration())jU=jU-jV;Nav:setEngineTorqueCommand('torque',jU,jA,'airfoil','','',jC)Nav:setBoosterCommand('rocket_engine')if T and not VanillaRockets then local bH=vec3(core.getVelocity()):len()local jW=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jX=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bH*3.6>jX*(1-jW)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bH*3.6<jX*(1-jW)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fq=unit.getThrottle()if AtmoSpeedAssist then fq=s*100 end;local fV=fq/100;if j==0 then fV=fV*MaxGameVelocity;if bH>=fV*(1-jW)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bH<fV*(1-jW)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fV=fV*ReentrySpeed/3.6;if bH>=fV*(1-jW)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bH<fV*(1-jW)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,br=coroutine.resume(beginSetup)if br then SetupComplete=true end else Nav:update()if not b6 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jY)if jY=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if(vBooster or hover)and af==-1 and(j()>0 or aj<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b8=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if F and not BrakeLanding then Nav.control.extendLandingGears()end else if F then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jY=="forward"then G=G-1 elseif jY=="backward"then G=G+1 elseif jY=="left"then J=J-1 elseif jY=="right"then J=J+1 elseif jY=="yawright"then K=K-1 elseif jY=="yawleft"then K=K+1 elseif jY=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif jY=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif jY=="up"then a4=a4+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jY=="down"then a4=a4-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jY=="groundaltitudeup"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jY=="groundaltitudedown"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jY=="option1"then IncrementAutopilotTargetIndex()A=false elseif jY=="option2"then DecrementAutopilotTargetIndex()A=false elseif jY=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;A=false;ToggleWidgets()elseif jY=="option4"then ToggleAutopilot()A=false elseif jY=="option5"then ToggleLockPitch()A=false elseif jY=="option6"then ToggleAltitudeHold()A=false elseif jY=="option7"then wipeSaveVariables()A=false elseif jY=="option8"then ToggleFollowMode()A=false elseif jY=="option9"then if gyro~=nil then gyro.toggle()am=gyro.getState()==1 end;A=false elseif jY=="lshift"then if system.isViewLocked()==1 then O=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then O=true;b7=false;b6=false end elseif jY=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jY=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jY=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not T then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;T=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;T=false end elseif jY=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()s=0 elseif jY=="speedup"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif jY=="speeddown"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif jY=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jY)if jY=="forward"then G=0 elseif jY=="backward"then G=0 elseif jY=="left"then J=0 elseif jY=="right"then J=0 elseif jY=="yawright"then K=0 elseif jY=="yawleft"then K=0 elseif jY=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif jY=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif jY=="up"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jY=="down"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jY=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jY=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jY=="lshift"then if system.isViewLocked()==1 then O=false;a5=0;a6=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then O=false;b7=false;b6=false end elseif jY=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jY=="lalt"then if o()==0 and freeLookToggle then if A then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else A=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(jY)if jY=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jY=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jY=="speedup"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif jY=="speeddown"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dn)local i;local jZ="/commands /setname /G /agg /addlocation /copydatabank"local j_,k0=nil,nil;local k1="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dn," ")j_=dn;if i~=nil then j_=string.sub(dn,0,i-1)k0=string.sub(dn,i+1)elseif not string.find(jZ,j_)then for fR in string.gmatch(k1,"([^\n]+)")do c(fR)end;return end;if j_=="/setname"then if k0==nil or k0==""then P="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(k0)else P="Select a saved target to rename first"end elseif j_=="/addlocation"then if k0==nil or k0==""or string.find(k0,"::")==nil then P="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(k0,"::")local cb=string.sub(k0,1,i-2)local c5=string.sub(k0,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c6='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c7,c8,c2,c3,c1=string.match(c5,c6)local planet=aX[tonumber(c7)][tonumber(c8)]AddNewLocationByWaypoint(cb,planet,c5)P="Added "..cb.." to saved locations,\nplanet "..planet.name.." at "..c5;a7=5 elseif j_=="/agg"then if k0==nil or k0==""then P="Usage: /agg targetheight"return end;k0=tonumber(k0)if k0<1000 then k0=1000 end;AntigravTargetAltitude=k0;P="AGG Target Height set to "..k0 elseif j_=="/G"then if k0==nil or k0==""then P="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if k0=="dump"then for bp,bq in pairs(a)do if type(_G[bq])=="boolean"then if _G[bq]==true then c(bq.." true")else c(bq.." false")end elseif _G[bq]==nil then c(bq.." nil")else c(bq.." ".._G[bq])end end;return end;i=string.find(k0," ")local k2=string.sub(k0,0,i-1)local k3=string.sub(k0,i+1)for bp,bq in pairs(a)do if bq==k2 then P="Variable "..k2 .." changed to "..k3;local k4=type(_G[bq])if k4=="number"then k3=tonumber(k3)elseif k4=="boolean"then if string.lower(k3)=="true"then k3=true else k3=false end end;_G[bq]=k3;return end end;P="No such global variable: "..k2 elseif j_=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else P="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
