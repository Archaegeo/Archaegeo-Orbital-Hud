name: ButtonsHud - ShadowMage v5.340 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Will VTOL on AutoTakeOff.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;OrbitTargetSet=false;OrbitTargetCoords=nil;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitRetriggerTarget=false;OrbitAchieved=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=SafeR;local t=SafeB;local u=SafeG;local v=false;local w=0;local x=""local y=0;local z=0;local A=false;local B=0;local C=false;local D=round(ResolutionX/2,0)local E=round(ResolutionY/2,0)local F=false;local G=true;local H=55;local I=false;local J=1;local K=1;local L=false;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=false;local U=false;local V="empty"local W=1;local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=false;local a5=false;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=j()>0;local ap=core.getAltitude()local aq=core.getElementIdList()local ar=system.getTime()local as=nil;local at=false;local au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]local av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bg=vec3(core.getWorldVelocity())local bh=vec3(bg):len()local bi=math.cos(YawStallAngle*constants.deg2rad)local bj=LandingGearGroundHeight;local bk=system.getMouseDeltaX()local bl=system.getMouseDeltaY()local bm=false;local bn=system.getTime()local bo=0;local bp=0;local bq=nil;local br=nil;local bs=nil;local bt=AtmoSpeedLimit;local bu=nil;local bv=0;local bw=0;local bx=0;local by=0;local bz=0;local bA=false;local bB=false;function LoadVariables()if dbHud_1 then local bC=dbHud_1.hasKey;if not useTheseSettings then for bD,bE in pairs(a)do if bC(bE)then local bF=f(dbHud_1.getStringValue(bE))if bF~=nil then c(bE.." "..dbHud_1.getStringValue(bE))_G[bE]=bF;aK=true end end end end;coroutine.yield()for bD,bE in pairs(b)do if bC(bE)then local bF=f(dbHud_1.getStringValue(bE))if bF~=nil then c(bE.." "..dbHud_1.getStringValue(bE))_G[bE]=bF;aK=true end end end;if useTheseSettings then V="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ad=5 elseif aK then V="Loaded Saved Variables (see Lua Chat Tab for list)"else V="No Saved Variables Found - Stand up / leave remote to save settings"end else V="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bG=system.getTime()if LastStartTime+180<bG then LastMaxBrakeInAtmo=0 end;if aK then D=round(ResolutionX/2,0)E=round(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference end;LastStartTime=bG;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then V="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;bi=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]bt=AtmoSpeedLimit end;function CalculateFuelVolume(bH,bI)if bH>bI then bI=bH end;if ContainerOptimization>0 then bI=bI-bI*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bI=bI-bI*FuelTankOptimization*0.05 end;return bI end;function ProcessElements()local bJ=fuelX~=0 and fuelY~=0;for bD in pairs(aq)do local type=l(aq[bD])if type=="Landing Gear"then L=true end;if type=="Dynamic Core Unit"then local bK=h(aq[bD])if bK>10000 then b0=128 elseif bK>1000 then b0=64 elseif bK>150 then b0=32 end end;aR=aR+h(aq[bD])if bJ and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bK=h(aq[bD])local bL=m(aq[bD])local bH=0;local bM=system.getTime()if type=="Atmospheric Fuel Tank"then local bI=400;local bN=35.03;if bK>10000 then bI=51200;bN=5480 elseif bK>1300 then bI=6400;bN=988.67 elseif bK>150 then bI=1600;bN=182.67 end;bH=bL-bN;if fuelTankHandlingAtmo>0 then bI=bI+bI*fuelTankHandlingAtmo*0.2 end;bI=CalculateFuelVolume(bH,bI)aO[#aO+1]={aq[bD],core.getElementNameById(aq[bD]),bI,bN,bH,bM}end;if type=="Rocket Fuel Tank"then local bI=320;local bN=173.42;if bK>65000 then bI=40000;bN=25740 elseif bK>6000 then bI=5120;bN=4720 elseif bK>700 then bI=640;bN=886.72 end;bH=bL-bN;if fuelTankHandlingRocket>0 then bI=bI+bI*fuelTankHandlingRocket*0.1 end;bI=CalculateFuelVolume(bH,bI)aQ[#aQ+1]={aq[bD],core.getElementNameById(aq[bD]),bI,bN,bH,bM}end;if type=="Space Fuel Tank"then local bI=2400;local bN=182.67;if bK>10000 then bI=76800;bN=5480 elseif bK>1300 then bI=9600;bN=988.67 end;bH=bL-bN;if fuelTankHandlingSpace>0 then bI=bI+bI*fuelTankHandlingSpace*0.2 end;bI=CalculateFuelVolume(bH,bI)aP[#aP+1]={aq[bD],core.getElementNameById(aq[bD]),bI,bN,bH,bM}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a4=true else a5=true end end;local bO=j()if door and(bO>0 or bO==0 and ap<10000)then for _,bE in pairs(door)do bE.toggle()end end;if switch then for _,bE in pairs(switch)do local bP=bE.getId()local bQ=core.getElementNameById(bP)if bQ=="navBlinkSwitch"then bq=bE elseif bQ=="navLightSwitch"then br=bE elseif bQ=="headLightSwitch"then bs=bE else bE.toggle()end end end;if forcefield and(bO>0 or bO==0 and ap<10000)then for _,bE in pairs(forcefield)do bE.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if L then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bR=AboveGroundLevel()if bR~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not L then GearExtended=true end else BrakeIsOn=false end;if bj~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bj)if bj==0 and not L then GearExtended=true;BrakeIsOn=true end else bj=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bR~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ao end;function ConvertResolutionX(bE)if ResolutionX==1920 then return bE else return round(ResolutionX*bE/1920,0)end end;function ConvertResolutionY(bE)if ResolutionY==1080 then return bE else return round(ResolutionY*bE/1080,0)end end;function RefreshLastMaxBrake(bS,bT)if bS==nil then bS=core.g()end;bS=round(bS,5)local bU=j()if bT~=nil and bT or(aN==nil or aN~=bS)then local bg=core.getVelocity()local bV=vec3(bg):len()local bW=f(unit.getData()).maxBrake;if bW~=nil and bW>0 and ao then bW=bW/utils.clamp(bV/100,0.1,1)bW=bW/bU;if bU>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bW)/2 else LastMaxBrakeInAtmo=bW end end end;if bW~=nil and bW>0 then LastMaxBrake=bW end;aN=bS end end;function MakeButton(bX,bY,bZ,b_,c0,c1,c2,c3,c4)local c5={enableName=bX,disableName=bY,width=bZ,height=b_,x=c0,y=c1,toggleVar=c2,toggleFunction=c3,drawCondition=c4,hovered=false}table.insert(aB,c5)return c5 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bD,bE in pairs(b2[0])do table.insert(AtlasOrdered,{name=bE.name,index=bD})end;local function c6(c7,c8)return c7.name<c8.name end;table.sort(AtlasOrdered,c6)end;function AddLocationsToAtlas()for bD,bE in pairs(SavedLocations)do table.insert(b2[0],bE)end;UpdateAtlasLocationsList()end;function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*epsilon end;function zeroConvertToMapPosition(cb,cc)local cd=vec3(cc)if cb.bodyId==0 then return setmetatable({latitude=cd.x,longitude=cd.y,altitude=cd.z,bodyId=0,systemId=cb.planetarySystemId},MapPosition)end;local ce=cd-cb.center;local ae=ce:len()local cf=ae-cb.radius;local cg=0;local ch=0;if not float_eq(ae,0)then local ci=math.atan(ce.y,ce.x)ch=ci>=0 and ci or 2*math.pi+ci;cg=math.pi/2-math.acos(ce.z/ae)end;return setmetatable({latitude=math.deg(cg),longitude=math.deg(ch),altitude=cf,bodyId=cb.bodyId,systemId=cb.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cj)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..p..','..p..','..p..','..p..','..p..'}'local cl,cm,cg,ch,cf=string.match(cj,ck)if cl=="0"and cm=="0"then return vec3(tonumber(cg),tonumber(ch),tonumber(cf))end;ch=math.rad(ch)cg=math.rad(cg)local planet=b2[tonumber(cl)][tonumber(cm)]local cn=math.cos(cg)local co=vec3(cn*math.cos(ch),cn*math.sin(ch),math.sin(cg))return planet.center+(planet.radius+cf)*co end;function AddNewLocationByWaypoint(cp,planet,cj)if dbHud_1 then local cq={}local position=zeroConvertToWorldCoordinates(cj)if planet.name=="Space"then cq={position=position,name=cp,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bO=false;if planet.hasAtmosphere then bO=true else bO=false end;cq={position=position,name=cp,atmosphere=bO,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cq;table.insert(b2[0],cq)UpdateAtlasLocationsList()else V="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bQ=planet.name..". "..#SavedLocations;if radar_1 then local cr,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cr~=nil and cr~=""then bQ=bQ.." "..radar_1.getConstructName(cr)end end;local cq={}local bO=false;if planet.hasAtmosphere then bO=true end;cq={position=position,name=bQ,atmosphere=bO,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cq;table.insert(b2[0],cq)UpdateAtlasLocationsList()V="Location saved as "..bQ else V="Databank must be installed to save locations"end end;function UpdatePosition(cs)local ct=-1;local cq;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name==CustomTarget.name then ct=bD;break end end;if ct~=-1 then local cu;if cs~=nil then cq={position=SavedLocations[ct].position,name=cs,atmosphere=SavedLocations[ct].atmosphere,planetname=SavedLocations[ct].planetname,gravity=SavedLocations[ct].gravity}else cq={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ct].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ct]=cq;ct=-1;for bD,bE in pairs(b2[0])do if bE.name and bE.name==CustomTarget.name then ct=bD end end;if ct>-1 then b2[0][ct]=cq end;UpdateAtlasLocationsList()V=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else V="Name Not Found"end end;function ClearCurrentPosition()local ct=-1;for bD,bE in pairs(b2[0])do if bE.name and bE.name==CustomTarget.name then ct=bD end end;if ct>-1 then table.remove(b2[0],ct)end;ct=-1;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name==CustomTarget.name then V=bE.name.." saved location cleared"ct=bD;break end end;if ct~=-1 then table.remove(SavedLocations,ct)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cv)cv[#cv+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;function ToggleWidgets()if aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aA=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aA=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cw,cx,c0,c1,bZ,b_)if cw>c0 and cw<c0+bZ and cx>c1 and cx<c1+b_ then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if OrbitAchieved then CancelIntoOrbit=false else CancelIntoOrbit=true end;IntoOrbit=false;bA=false;bx=nil;by=nil;bz=nil;OrbitTargetPlanet=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;CancelIntoOrbit=false;bA=false;bx=nil;by=nil;bz=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end else V="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local cA=vec3(core.getWorldVertical())local cB=getPitch(cA,cy,cz)LockPitch=cB;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bG=system.getTime()if bG-bp<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bp=-1;if AltitudeHold then return end end else bp=bG end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;T=false;BrakeLanding=false;Reentry=false;be=true;LockPitch=nil;if hoverDetectGround()==-1 or not ao or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bp>-1 then HoldAltitude=ap end;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bp>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end else be=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then T=not T;if T then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else V="Follow Mode only works with Remote controller"T=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local cC=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ap>100000 or ap==0 then Autopilot=true else ai=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;T=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;F=false;LockPitch=nil;WaypointSet=false else aj=true;ToggleAltitudeHold()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;F=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;be=autoRollPreference;ai=false;ak=false;aa=0 end end;function CheckDamage(cv)local cD=0;az=""local cE=aR;local cF=0;local cG=0;local cH=0;local cI=0;local cJ=""for bD in pairs(aq)do local bK=0;local cK=0;cK=h(aq[bD])bK=k(aq[bD])cF=cF+bK;if bK<cK then if bK==0 then cH=cH+1 else cG=cG+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bD]))local c0=position.x-b0;local c1=position.y-b0;local cL=position.z-b0;table.insert(aw,core.spawnArrowSticker(c0,c1,cL+1,"down"))table.insert(aw,core.spawnArrowSticker(c0,c1,cL+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(c0+1,c1,cL,"north"))table.insert(aw,core.spawnArrowSticker(c0+1,c1,cL,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(c0-1,c1,cL,"south"))table.insert(aw,core.spawnArrowSticker(c0-1,c1,cL,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(c0,c1-1,cL,"east"))table.insert(aw,core.spawnArrowSticker(c0,c1-1,cL,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(c0,c1+1,cL,"west"))table.insert(aw,core.spawnArrowSticker(c0,c1+1,cL,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bD])end elseif aS and#aw>0 and aw[11]==aq[bD]then for cM in pairs(aw)do core.deleteSticker(aw[cM])end;aw={}end end;cD=d(cF/cE*100)if cD<100 then cv[#cv+1]=[[<g class="pbright txt">]]cI=d(cD*2.55)cJ=e("rgb(%d,%d,%d)",255-cI,cI,0)if cD<100 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cJ,cD)if cH>0 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cJ,cH,cG)elseif cG>0 then cv[#cv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cJ,cG)end end;cv[#cv+1]=[[<\g>]]end end;function DrawCursorLine(cv)local cN=d(utils.clamp(ae/(aE/4)*255,0,255))cv[#cv+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,d(s+0.5)+cN,d(u+0.5)-cN,d(t+0.5)-cN)end;function getPitch(cO,cP,c8)local cQ=cO:cross(c8):normalize_inplace()local cB=math.acos(utils.clamp(cQ:dot(-cP),-1,1))*constants.rad2deg;if cQ:cross(-cP):dot(c8)<0 then cB=-cB end;return cB end;local cR=math.atan;local function cS(cT,cU,cV)cU=cU:project_on_plane(cT)cV=cV:project_on_plane(cT)return cR(cU:cross(cV):dot(cT),cU:dot(cV))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;T=false;F=false;ai=false;aj=false;I=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil else am=true end end;function wipeSaveVariables()if not dbHud_1 then V="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ad=5 else if aL then for bD,bE in pairs(a)do dbHud_1.setStringValue(bE,g(nil))end;for bD,bE in pairs(b)do if bE~="SavedLocations"then dbHud_1.setStringValue(bE,g(nil))end end;V="Databank wiped. New variables will save after re-enter seat and exit"ad=5;aL=false;aK=false;a9=true else V="Press ALT-7 again to confirm wipe of ALL data"aL=true end end end;function CheckButtons()for _,bE in pairs(aB)do if bE.hovered then if not bE.drawCondition or bE.drawCondition()then bE.toggleFunction()end;bE.hovered=false end end end;function SetButtonContains()local c0=ab+aE/2;local c1=ac+aF/2;for _,bE in pairs(aB)do bE.hovered=Contains(c0,c1,bE.x,bE.y,bE.width,bE.height)end end;function DrawButton(cv,cW,hover,c0,c1,cX,cY,cZ,c_,d0,d1)if type(d0)=="function"then d0=d0()end;if type(d1)=="function"then d1=d1()end;cv[#cv+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c0,c1,cX,cY)if cW then cv[#cv+1]=e("%s'",cZ)else cv[#cv+1]=c_ end;if hover then cv[#cv+1]=" style='stroke:white; stroke-width:2'"else cv[#cv+1]=" style='stroke:black; stroke-width:1'"end;cv[#cv+1]="></rect>"cv[#cv+1]=e("<text x='%f' y='%f' font-size='24' fill='",c0+cX/2,c1+cY/2+5)if cW then cv[#cv+1]="black"else cv[#cv+1]="white"end;cv[#cv+1]="' text-anchor='middle' font-family='Montserrat'>"if cW then cv[#cv+1]=e("%s</text>",d0)else cv[#cv+1]=e("%s</text>",d1)end end;function DrawButtons(cv)local d2="rgb(50,50,50)'"local d3="rgb(210,200,200)"local d4=DrawButton;for _,bE in pairs(aB)do local bY=bE.disableName;local bX=bE.enableName;if type(bY)=="function"then bY=bY()end;if type(bX)=="function"then bX=bX()end;if not bE.drawCondition or bE.drawCondition()then d4(cv,bE.toggleVar(),bE.hovered,bE.x,bE.y,bE.width,bE.height,d3,d2,bY,bX)end end end;function DrawTank(cv,a_,c0,d5,d6,d7,d8,d9)local da=1;local db=2;local dc=3;local dd=4;local de=5;local df=6;local dg=""local dh=0;local di=fuelY;local dj=fuelY+10;if o()==1 and not RemoteHud then di=di-50;dj=dj-50 end;cv[#cv+1]=[[<g class="pdim txtfuel">]]if d6=="ATMO"then dg="atmofueltank"elseif d6=="SPACE"then dg="spacefueltank"else dg="rocketfueltank"end;dh=_G[dg.."_size"]if#d7>0 then for i=1,#d7 do local bQ=string.sub(d7[i][db],1,12)local dk=0;for cM=1,dh do if d7[i][db]==f(unit[dg.."_"..cM].getData()).name then dk=cM;break end end;if a_ or d8[i]==nil or d9[i]==nil then local dl=0;local dm=0;local dn=0;local dp=0;local bM=system.getTime()if dk~=0 then d9[i]=f(unit[dg.."_"..dk].getData()).percentage;d8[i]=f(unit[dg.."_"..dk].getData()).timeLeft;if d8[i]=="n/a"then d8[i]=0 end else dn=m(d7[i][da])-d7[i][dd]dl=d7[i][dc]d9[i]=d(0.5+dn*100/dl)dm=d7[i][de]dp=d7[i][df]if dm<=dn then d8[i]=0 else d8[i]=d(0.5+dn/((dm-dn)/(bM-dp)))end;d7[i][de]=dn;d7[i][df]=bM end end;if bQ==d5 then bQ=e("%s %d",d6,i)end;if dk==0 then bQ=bQ.." *"end;local dq;if d8[i]==0 then dq="n/a"else dq=FormatTimeString(d8[i])end;if d9[i]~=nil then local cI=d(d9[i]*2.55)local cJ=e("rgb(%d,%d,%d)",255-cI,cI,0)local dr=""if dq~="n/a"and d8[i]<120 or d9[i]<5 then if a_ then dr=[[class="red"]]end end;cv[#cv+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],c0,di,dr,bQ,c0,dj,cJ,d9[i],dq)di=di+30;dj=dj+30 end end end;cv[#cv+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bg)bg=vec3(bg)local cB=-math.deg(math.atan(bg.y,bg.z))+180;cB=cB-90;if cB<0 then cB=360+cB end;if cB>180 then cB=-180+cB-180 end;return-cB end;function getRelativeYaw(bg)bg=vec3(bg)local ds=math.deg(math.atan(bg.y,bg.x))-90;if ds<-180 then ds=360+ds end;return ds end;function AlignToWorldVector(dt,du,dv)if not ao or not bm or al~=-1 or bh<H then local dw=dv;if dw==nil then dw=DampingMultiplier end;if du==nil then du=aD end;dt=vec3(dt):normalize()local dx=vec3(core.getConstructWorldOrientationForward())-dt;local dy=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationRight())*aC;local dz=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dy/2 end;if ay==0 then ay=dz/2 end;if math.abs(dy)<0.1 then O=O-dy*2 else O=O-(dy+(dy-ax)*dw)end;if math.abs(dz)<0.1 then N=N+dz*2 else N=N+dz+(dz-ay)*dw end;ax=dy;ay=dz;if math.abs(dy)<du and math.abs(dz)<du then return true end;return false elseif bm and al==-1 then dt=vec3(core.getWorldVelocity())local dw=dv;if dw==nil then dw=DampingMultiplier end;if du==nil then du=aD end;dt=vec3(dt):normalize()local dx=vec3(core.getConstructWorldOrientationForward())-dt;local dy=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationRight())*aC;local dz=-getMagnitudeInDirection(dx,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dy/2 end;if ay==0 then ay=dz/2 end;if math.abs(dy)<0.1 then O=O-dy*5 else O=O-(dy+(dy-ax)*dw)end;if math.abs(dz)<0.1 then N=N+dz*5 else N=N+dz+(dz-ay)*dw end;ax=dy;ay=dz;if math.abs(dy)<du and math.abs(dz)<du then return true end;return false end end;function getAPEnableName()local bQ=AutopilotTargetName;if bQ==nil then local dA,dB=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())bQ=CustomTarget.name.." "..dA..dB end;if bQ==nil then bQ="None"end;return"Engage Autopilot: "..bQ end;function getAPDisableName()local bQ=AutopilotTargetName;if bQ==nil then bQ=CustomTarget.name end;if bQ==nil then bQ="None"end;return"Disable Autopilot: "..bQ end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then V="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then V="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not I then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then V="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;V="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dC,dD=getDistanceDisplayString(HoldAltitude)V="Beginning Re-entry.  Target speed: "..bt.." Target Altitude: "..dC..dD end;AutoTakeoff=false end;function SetupButtons()local dE=50;local dF=260;local dG=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dF,dE,aE/2-dF/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then V="Brakes in Toggle Mode"else V="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dF,dE,aE/2-dF/2-50-dG.width,aF/2-dE+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dF,dE,aE/2-dF/2+dG.width+50,aF/2-dE+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dH=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dH.height,dH.x+dH.width+30,dH.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dH.height,dH.x+dH.width+30,dH.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dH.height,dH.x-200-30,dH.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dE=60;dF=300;local c0=10;local c1=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dF,dE,c0,c1,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dF,dE,c0+dF+20,c1,function()return AltitudeHold end,ToggleAltitudeHold)c1=c1+dE+20;MakeButton("Engage Autoland","Disable Autoland",dF,dE,c0,c1,function()return AutoLanding end,ToggleAutoLanding)if VertTakeOffEngine then MakeButton("Engage Vertical Takeoff","Disable Vertical Takeoff",dF,dE,c0+dF+20,c1,function()return VertTakeOff end,ToggleAutoTakeoff)else MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dF,dE,c0+dF+20,c1,function()return AutoTakeoff end,ToggleAutoTakeoff)end;c1=c1+dE+20;MakeButton("Show Orbit Display","Hide Orbit Display",dF,dE,c0,c1,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then V="Orbit Display Enabled"else V="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dF,dE,c0+dF+20,c1,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)c1=c1+dE+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dF,dE,c0,c1,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dF,dE,c0+dF+20,c1,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)c1=c1+dE+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dF,dE,c0,c1,function()return T end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dF,dE,c0+dF+20,c1,function()return aS end,function()aS=not aS;if aS then V="Repair Arrows Enabled"else V="Repair Arrows Diabled"end end,function()return o()==1 end)c1=c1+dE+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dF,dE,c0,c1,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;c1=c1+dE+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dF*2,dE,c0,c1,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dI=Nav.axisCommandManager:getAxisCommandType(0)local dJ="TRAVEL"if dI==1 then dJ="CRUISE"end;if Autopilot then dJ="AUTOPILOT"end;return dJ end;function UpdateHud(cv)local cf=ap;local bg=core.getVelocity()local bV=vec3(bg):len()local cA=vec3(core.getWorldVertical())local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local dK=vec3(core.getConstructWorldOrientationUp())local dL=getRoll(cA,cy,cz)local dM=dL/180*math.pi;local dN=math.cos(dM)local dO=math.sin(dM)local cB=getPitch(cA,cy,cz*dN+dK*dO)local dP=dL;local dQ=cB;local dR=j()local dS=d(unit.getThrottle())local dT=bV*3.6;local dU=unit.getAxisCommandValue(0)local dV=ConvertResolutionX(1770)local dW=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dU=y;dS=y*100 end;local dJ=GetFlightStyle()local dX="ROLL"local dY=unit.getClosestPlanetInfluence()>0;if dS==nil then dS=0 end;if not dY then if bV>5 then cB=getRelativePitch(bg)dL=getRelativeYaw(bg)else cB=0;dL=0 end;dX="YAW"end;if w>50000 and not ao then local dZ;if w>200000 then dZ=round(w/200000,2).." su"else dZ=round(w/1000,1).." km"end;cv[#cv+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dV,dW,dZ)end;cv[#cv+1]=ag;cv[#cv+1]=az;cv[#cv+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cv,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cv,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cv,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cv,cf)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dY then DrawRollLines(cv,centerX,centerY,dP,dX,dY)DrawArtificialHorizon(cv,dQ,dP,centerX,centerY,dY,d(getRelativeYaw(bg)),bV)else DrawRollLines(cv,centerX,centerY,dL,dX,dY)DrawArtificialHorizon(cv,cB,dL,centerX,centerY,dY,d(dL),bV)end;DrawAltitudeDisplay(cv,cf,dY)DrawPrograde(cv,bg,bV,centerX,centerY)end end;DrawThrottle(cv,dJ,dS,dU)DrawSpeed(cv,dT)DrawWarnings(cv)DisplayOrbitScreen(cv)if screen_2 then local cj=vec3(core.getConstructWorldPos())local c0=960+cj.x/b4;local c1=450+cj.y/b5;screen_2.moveContent(b6,(c0-80)/19.2,(c1-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cv)if not v then s=PvPR;u=PvPG;t=PvPB else s=SafeR;u=SafeG;t=SafeB end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local d_=au;local e0=av;local e1=au;local e2=av;if IsInFreeLook()and not brightHud then d_=[[rgb(]]..d(s*0.4+0.5)..","..d(u*0.4+0.5)..","..d(t*0.3+0.5)..[[)]]e0=[[rgb(]]..d(s*0.3+0.5)..","..d(u*0.3+0.5)..","..d(t*0.2+0.5)..[[)]]end;cv[#cv+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d_,d_,e1,e1,e0,e0,e2,e2,ResolutionX,ResolutionY)end;function HUDEpilogue(cv)cv[#cv+1]="</svg>"end;function DrawSpeed(cv,dT)local e3=throtPosY-10;local e4=throtPosX+10;cv[#cv+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e3=75 end;cv[#cv+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],e4,e3,d(dT))end;function DrawOdometer(cv,a7,TotalDistanceTravelled,dJ,a8,dR)local e5=ConvertResolutionX(1240)local e6=ConvertResolutionY(55)local e7=e6+10;local dR=j()local bS=core.g()local e8=0;local e9=0;local ea=0;RefreshLastMaxBrake(bS)if ao then ea=LastMaxBrakeInAtmo else ea=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local eb=vec3(core.getWorldAcceleration()):len()/9.80665;if bS>0.1 then e9=aM*bS;e8=maxThrust/bS end;cv[#cv+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e5=ConvertResolutionX(1120)e6=ConvertResolutionY(55)e7=e6+10 elseif ao then local ec=ConvertResolutionX(770)cv[#cv+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ec,e6,ec,e7,dR)end;cv[#cv+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e5,e6,e5,e7,bS/9.80665,e5,e6+20,e5,e7+20,eb)cv[#cv+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cv[#cv+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),ea/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dJ)if bS>0.1 then cv[#cv+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e8/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e9/1000)else cv[#cv+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cv[#cv+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dJ)end;cv[#cv+1]="</g>"end;function DrawThrottle(cv,dJ,dS,dU)dS=math.floor(dS+0.5)local di=throtPosY+10;local dj=throtPosY+20;if o()==1 and not RemoteHud then di=55;dj=65 end;local ed="CRUISE"local unit="km/h"local ee=dU;if dJ=="TRAVEL"or dJ=="AUTOPILOT"then ed="THROT"unit="%"ee=dS;local ef="dim"if dS<0 then ef="red"end;cv[#cv+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ef,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dS),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cv[#cv+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,di,ed,throtPosX+10,dj,ee,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and A then dS=math.floor(B*100+0.5)local ef="red"if dS<0 then ef="red"end;cv[#cv+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ef,1-math.abs(dS),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cv[#cv+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,di+40,"LIMIT",throtPosX+10,dj+40,dS,"%")end;if ao and AtmoSpeedAssist or Reentry then cv[#cv+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,di-40,"LIMIT: ",bt.." km/h")elseif not ao and Autopilot then cv[#cv+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,di-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cv,cf)if cf<200000 and not ao or cf and ao then local eg=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local eh=0;if math.abs(eg)>1 then eh=45*math.log(math.abs(eg),10)if eg<0 then eh=-eh end end;cv[#cv+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(eg),d(eh))end end;function getHeading(cP)local ei=-vec3(core.getWorldVertical())cP=cP-cP:project_on(ei)local ej=vec3(0,0,1)ej=ej-ej:project_on(ei)local ek=ej:cross(ei)local eh=ej:angle_between(cP)*constants.rad2deg;if cP:dot(ek)<0 then eh=360-eh end;return eh end;function DrawRollLines(cv,centerX,centerY,dP,dX,dY)local el=circleRad;local em=20;em=d(em)local en=d(dP)if dY then for i=-45,45,5 do local eo=i;cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],eo,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cv[#cv+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+el+em-len,centerX,centerY+el+em)end;cv[#cv+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+el+em-35,dX,centerX,centerY+el+em-25,en)cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+el+em-20,centerX+5,centerY+el+em-20,centerX,centerY+el+em-15)cv[#cv+1]="</g>"end;local ds=en;if dY then ds=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ep=20;local eq=d(ds)local er=0;local es=centerY+el+em+20;local et=centerX;if dX~="YAW"then es=ConvertResolutionY(130)et=ConvertResolutionX(960)end;local eu=[[<path class="txttick line" d="]]for i=d(eq-(ep+10)-eq%5+0.5),d(eq+ep+10+eq%5+0.5),5 do local c0=et+-i*5+ds*5;if i%10==0 then er=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cv[#cv+1]=e([[
                            <text x="%f" y="%f">%d</text>]],c0+5,es-12,p)elseif i%5==0 then er=5 end;if er==10 then eu=e([[%s M %f %f v %d]],eu,c0,es-5,er)else eu=e([[%s M %f %f v %d]],eu,c0,es-2.5,er)end end;cv[#cv+1]=eu..[["/>]]cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],et-5,es+10,et+5,es+10,et,es+5)if dY then dX="HDG"end;cv[#cv+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],et,es+25,eq,et,es+35,dX)end;function DrawArtificialHorizon(cv,dQ,dP,centerX,centerY,dY,ev,bV)local el=circleRad;local ew=d(el*3/5)if el>0 then local ex=d(dQ)local len=0;local eu=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dP,centerX,centerY)if not ao then eu=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cv[#cv+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],el-1,centerX,centerY)cv[#cv+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ex-30-ex%5+0.5),d(ex+30+ex%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c1=centerY+-i*5+dQ*5;if len==30 then eu=e([[%s M %d %f h %d]],eu,centerX-ew-len,c1,len)if ao then cv[#cv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX-ew+10,c1,i)cv[#cv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX+ew-10,c1,i)if i==0 or i==180 or i==-180 then cv[#cv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-ew+20,c1,ew*2-40)end else cv[#cv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ew+10,c1,i)cv[#cv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ew-10,c1,i)end;eu=e([[%s M %d %f h %d]],eu,centerX+ew,c1,len)else eu=e([[%s M %d %f h %d]],eu,centerX-ew-len,c1,len)eu=e([[%s M %d %f h %d]],eu,centerX+ew,c1,len)end end;cv[#cv+1]=eu..[["/>]]local ey="PITCH"if not dY then ey="REL PITCH"end;if dQ>90 and not ao then dQ=90-(dQ-90)elseif dQ<-90 and not ao then dQ=-90-(dQ+90)end;if el>200 then if ao then if bV>H then cv[#cv+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ev)end;cv[#cv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)else cv[#cv+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ew+25,centerY-5,centerX-ew+20,centerY,centerX-ew+25,centerY+5,centerX-ew+50,centerY+4,ex)cv[#cv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ew-25,centerY-5,centerX+ew-20,centerY,centerX+ew-25,centerY+5,centerX+ew-30,centerY+4,ex)cv[#cv+1]="</g>"end;local ez=d(el/3)cv[#cv+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ez,centerY,el-ez)if not ao and dY then cv[#cv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-ew+10,centerY,ew*2-20)end;cv[#cv+1]="</g>"if el<200 then if ao and bV>H then cv[#cv+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-el,ey,centerX,centerY-el+10,ex,centerX,centerY-15,"Yaw",centerX,centerY+20,ev)else cv[#cv+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-el,ey,centerX,centerY-el+15,ex)end end end end;function DrawAltitudeDisplay(cv,cf,dY)local eA=altMeterX;local eB=altMeterY;local eC=78;local eD=19;local eE=AboveGroundLevel()if eE~=-1 then table.insert(cv,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eA+eC,eB+eD+20,eE))end;if dY and(cf<200000 and not ao or cf and ao)then table.insert(cv,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eA-1,eB-4,eC+2,eD+6,eA+1,eB-1,eC-4,eD))local ct=0;local eF=1;local eG=0;local eH=cf<0;local eI=9;if eH then eI=0 end;local cf=math.abs(cf)while ct<6 do local eJ=11;local eK=16;local eL=9;local eM=14;local dr="altsm"if ct>2 then eK=eK+3;eJ=eJ+2;eM=eM+2;eL=eL-6;dr="altbig"end;if eH then dr=dr.." red"end;local eN=cf/eF%10;local eO=d(eN)local eP=d((eO+1)%10)local eQ=eG;if ct==0 then eQ=eN-eO;if eH then eQ=1-eQ end end;if eH and(ct==0 or eG~=0)then local eR=eP;eP=eO;eO=eR end;local eS=eK*(eQ-1)local eT=eS+eK;local c0=eA+eL+(6-ct)*eJ;local c1=eB+eM;table.insert(cv,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dr,c0,c1+eS,eP,c0,c1+eT,eO))ct=ct+1;eF=eF*10;if eO==eI then eG=eQ else eG=0 end end;table.insert(cv,[[</g></g>]])end end;function DrawPrograde(cv,bg,bV,centerX,centerY)if bV>5 and not ao or bV>H then local el=circleRad;local eU=20;local eV=20;local eW=vec3(bg)local eX=getRelativePitch(eW)local eY=getRelativeYaw(eW)local eZ=14;local e_=eZ/2;local f0=-eY/eV*el;local f1=eX/eU*el;local c0=centerX+f0;local c1=centerY+f1;local ae=math.sqrt(f0^2+f1^2)local f2=[[<circle
                cx="]]..c0 ..[["
                cy="]]..c1 ..[["
                r="]]..e_/eZ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..c0 ..[["
                cy="]]..c1 ..[["
                r="]]..e_..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..c0-eZ..[[,]]..c1 ..[[ h ]]..e_..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c0+e_..[[,]]..c1 ..[[ h ]]..e_..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c0 ..[[,]]..c1-eZ..[[ v ]]..e_..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<el then cv[#cv+1]=f2 else local eh=math.atan(f1,f0)local f3=4;local f4=centerX+el*math.cos(eh)local f5=centerY+el*math.sin(eh)cv[#cv+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',eh*180/math.pi,f4,f5,f4-f3,f5-f3/2,f3*2,f3,f4+f3,f5-f3,f3,f3,-f3,f3)end;if not ao then eX=getRelativePitch(-eW)eY=getRelativeYaw(-eW)f0=-eY/eV*el;f1=eX/eU*el;c0=centerX+f0;c1=centerY+f1;ae=math.sqrt(f0^2+f1^2)if ae<el then local f6=[[<circle
                        cx="]]..c0 ..[["
                        cy="]]..c1 ..[["
                        r="]]..e_..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..c0 ..[[,]]..c1-eZ..[[ v ]]..e_..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..c0 ..[[,]]..c1 ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..c0 ..[[,]]..c1 ..[[)" />
                     <path
                        d="M ]]..c0-e_..[[,]]..c1 ..[[ h ]]..eZ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..c0 ..[[,]]..c1 ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..c0 ..[[,]]..c1 ..[[)"/>]]cv[#cv+1]=f6 end end end end;function DrawWarnings(cv)cv[#cv+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cv[#cv+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cv[#cv+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cv[#cv+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cv[#cv+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f7=ConvertResolutionX(960)local f8=ConvertResolutionY(860)local f9=ConvertResolutionY(880)local fa=ConvertResolutionY(900)local fb=ConvertResolutionY(960)local fc=ConvertResolutionY(200)local fd=ConvertResolutionY(150)local fe=ConvertResolutionY(960)if o()==1 and not RemoteHud then f8=ConvertResolutionY(135)f9=ConvertResolutionY(155)fa=ConvertResolutionY(175)fc=ConvertResolutionY(115)fd=ConvertResolutionY(95)end;if BrakeIsOn then cv[#cv+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f7,f8)elseif z>0 then cv[#cv+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f7,f8,z)end;if ao and bm and hoverDetectGround()==-1 then cv[#cv+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f7,fc+50)end;if as then cv[#cv+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f7,fe)end;if GearExtended then if L then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f7,f9)else cv[#cv+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f7,f9)end;local dA,dB=getDistanceDisplayString(Nav:getTargetGroundAltitude())cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f7,fa,dA..dB)end;if Z then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f7,fb+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f7,fc+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cv[#cv+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f7,fc+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f7,fc+20,AutopilotStatus)elseif LockPitch~=nil then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f7,fc+20,d(LockPitch))elseif T then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f7,fc+20)elseif Reentry then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f7,fc+20)end;local ff,fg,fh=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bg:normalize(),function(fi)if fi.noAtmosphericDensityAltitude>0 then return fi.radius+fi.noAtmosphericDensityAltitude else return fi.radius+fi.surfaceMaxAltitude*1.5 end end)local fj=fg;if fh~=nil and fg~=nil then fj=math.min(fh,fg)end;if AltitudeHold then if AutoTakeoff then local dA,dB=getDistanceDisplayString(HoldAltitude)cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f7,fc,dA..dB)if BrakeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f7,fc+50)end else local dA,dB=getDistanceDisplayString2(HoldAltitude)cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f7,fc,dA..dB)end end;if VertTakeOff then if j()>0.1 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f7,fc)elseif j()<0.09 and j()>0.05 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f7,fc)elseif j()<0.05 then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f7,fc,VertTargetPlanet.name)end end;if IntoOrbit then if bu~=nil then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f7,fc,bu)end end;if BrakeLanding then if StrongBrakes then cv[#cv+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f7,fc)else cv[#cv+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f7,fc)end end;if ProgradeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f7,fc)end;if RetrogradeIsOn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f7,fc)end;if TurnBurn then cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f7,fd)elseif fj~=nil and j()==0 then local dA,dB=getDistanceDisplayString(fj)local travelTime=b9.computeTravelTime(bh,0,fj)local fk="Collision"if ff.noAtmosphericDensityAltitude>0 then fk="Atmosphere"end;cv[#cv+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f7,fd,ff.name,fk,FormatTimeString(travelTime),dA..dB)end;if VectorToTarget then cv[#cv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f7,fc+30,VectorStatus)end;cv[#cv+1]="</g>"end;function DisplayOrbitScreen(cv)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fl=OrbitMapX;local fm=OrbitMapY;local fn=OrbitMapSize;local fo=4;fm=fm+fo;local fp=15;local c0=fl+fn+fl/2+fo;local c1=fm+fn/2+5+fo;local fq,fr,fs,ft;fq=fn/4;ft=0;cv[#cv+1]=[[<g class="pbright txtorb txtmid">]]cv[#cv+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fn+fl*2,fn+fm,fo,fo)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fs=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fq*2)fr=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fs*(1-orbit.eccentricity)ft=fq-orbit.periapsis.altitude/fs-planet.radius/fs;local fu=""if orbit.periapsis.altitude<=0 then fu='redout'end;cv[#cv+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fu,fl+fn/2+ft+fo,fm+fn/2+fo,fq,fr)cv[#cv+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fl+fn/2+fo,fm+fn/2+fo,planet.radius/fs)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cv[#cv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c0-35,c1-5,fl+fn/2+fq+ft,c1-5)cv[#cv+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],c0,c1)c1=c1+fp;local dA,dB=getDistanceDisplayString(orbit.apoapsis.altitude)cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,dA..dB)c1=c1+fp;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,FormatTimeString(orbit.timeToApoapsis))c1=c1+fp;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,getSpeedDisplayString(orbit.apoapsis.speed))end;c1=fm+fn/2+5+fo;c0=fl-fl/2+10+fo;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cv[#cv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c0+35,c1-5,fl+fn/2-fq+ft,c1-5)cv[#cv+1]=e([[<text x="%f" y="%f">Periapsis</text>]],c0,c1)c1=c1+fp;local dA,dB=getDistanceDisplayString(orbit.periapsis.altitude)cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,dA..dB)c1=c1+fp;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,FormatTimeString(orbit.timeToPeriapsis))c1=c1+fp;cv[#cv+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,getSpeedDisplayString(orbit.periapsis.speed))end;cv[#cv+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fl+fn/2+fo,20+fo,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fv=orbit.timeToApoapsis/orbit.period*2*math.pi;local fw=fq*math.cos(fv)local fx=fr*math.sin(fv)cv[#cv+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fl+fn/2+fw+ft+fo,fm+fn/2+fx+fo)end;cv[#cv+1]=[[</g>]]end end;function getDistanceDisplayString(ae)local fy=ae>100000;local bF,dB=""if fy then bF,dB=round(ae/1000/200,1),"SU"elseif ae<1000 then bF,dB=round(ae,1),"m"else bF,dB=round(ae/1000,1),"Km"end;return bF,dB end;function getDistanceDisplayString2(ae)local fy=ae>100000;local bF,dB=""if fy then bF,dB=round(ae/1000/200,2)," SU"elseif ae<1000 then bF,dB=round(ae,2)," M"else bF,dB=round(ae/1000,2)," KM"end;return bF,dB end;function getSpeedDisplayString(bV)return d(round(bV*3.6,0)+0.5).." km/h"end;function FormatTimeString(fz)local fA=0;local fB=0;local fC=0;if fz<60 then fz=d(fz)elseif fz<3600 then fA=d(fz/60)fz=d(fz%60)elseif fz<86400 then fB=d(fz/3600)fA=d(fz%3600/60)else fC=d(fz/86400)fB=d(fz%86400/3600)end;if fC>0 then return fC.."d "..fB.."h "elseif fB>0 then return fB.."h "..fA.."m "elseif fA>0 then return fA.."m "..fz.."s"elseif fz>0 then return fz.."s"else return"0s"end end;function getMagnitudeInDirection(dt,fD)dt=vec3(dt)fD=vec3(fD):normalize()local bF=dt*fD;return bF.x+bF.y+bF.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local fE=AtlasOrdered[AutopilotTargetIndex].index;local fF=b2[0][fE]if fF.center then AutopilotTargetName=fF.name;a6=b8[0][fE]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fF;for _,bE in pairs(b8[0])do if bE.name==CustomTarget.planetname then a6=bE;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fE=AtlasOrdered[AutopilotTargetIndex].index;local fF=b2[0][fE]if fF.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fE=AtlasOrdered[AutopilotTargetIndex].index;local fF=b2[0][fE]if fF.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fG=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return fG end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bg=core.getWorldVelocity()local bV=vec3(bg):len()local fH=unit.getThrottle()/100;if AtmoSpeedAssist then fH=y end;local fI,fJ=b9.computeDistanceAndTime(vec3(bg):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fH,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fK;if not TurnBurn and bV>0 then _,fK=GetAutopilotBrakeDistanceAndTime(bV)else _,fK=GetAutopilotTBBrakeDistanceAndTime(bV)end;local fL=0;local fM=0;if AutopilotCruising or not Autopilot and bV>5 then fM=b9.computeTravelTime(bV,0,AutopilotDistance)elseif a0+fI<AutopilotDistance then fL=AutopilotDistance-(a0+fI)fM=b9.computeTravelTime(8333.0556,0,fL)else local fN=(AutopilotDistance-a0)/fI;fI=AutopilotDistance-a0;fJ=fJ*fN end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fM elseif AutopilotBraking then return fK elseif AutopilotCruising then return fM+fK else return fJ+a1+fM end end;function GetAutopilotBrakeDistanceAndTime(bV)if not ao then RefreshLastMaxBrake()return b9.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bV)RefreshLastMaxBrake()return b9.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fO=-1;local fP=-1;if vBooster then fO=vBooster.distance()end;if hover then fP=hover.distance()end;if fO~=-1 and fP~=-1 then if fO<fP then return fO else return fP end elseif fO~=-1 then return fO elseif fP~=-1 then return fP else return-1 end end;function AboveGroundLevel()local fQ=-1;local fR=hoverDetectGround()if telemeter_1 then fQ=telemeter_1.getDistance()end;if fR~=-1 and fQ~=-1 then if fR<fQ then return fR else return fQ end elseif fR~=-1 then return fR else return fQ end end;function tablelength(fS)local fT=0;for _ in pairs(fS)do fT=fT+1 end;return fT end;function BeginProfile(fU)ProfileTimeStart=system.getTime()end;function EndProfile(fU)local fV=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fV;ProfileCount=ProfileCount+1;if fV>ProfileTimeMax then ProfileTimeMax=fV end;if fV<ProfileTimeMin then ProfileTimeMin=fV end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fW=ProfileTimeSum;local fX=ProfileTimeSum/ProfileCount;local fY=ProfileTimeMin;local fZ=ProfileTimeMax;local f_=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fW,fX,fY,fZ,f_))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local g0=radar_1.getEntries()local g1=radar_1.getData()local g2=ConvertResolutionX(1770)local g3=ConvertResolutionY(330)if#g0>0 then local target=g1:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ah=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;af=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g2,g3,#g0)local g4={}for bD,bE in pairs(g0)do if radar_1.hasMatchingTransponder(bE)==1 then table.insert(g4,bE)end end;if#g4>0 then local c1=ConvertResolutionY(15)local c0=ConvertResolutionX(1370)af=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,c0,c1)for bD,bE in pairs(g4)do c1=c1+20;af=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,c0,c1,radar_1.getConstructName(bE))end end else local g5;g5=g1:find('worksInEnvironment":false')if g5 then af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g2,g3)else af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g2,g3)end;if radarPanelID~=nil then ah=0;ToggleRadarPanel()end end end end;function DisplayMessage(cv,dA)if dA~="empty"then cv[#cv+1]=[[<text class="msg" x="50%%" y="310" >]]for g6 in string.gmatch(dA,"([^\n]+)")do cv[#cv+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g6)end;cv[#cv+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bM=system.getTime()local bg=vec3(core.getWorldVelocity())local dT=vec3(bg):len()local g7=bM-ar;if dT>1.38889 then dT=dT/1000;local g8=dT*(bM-ar)TotalDistanceTravelled=TotalDistanceTravelled+g8;a7=a7+g8 end;a8=a8+g7;TotalFlightTime=TotalFlightTime+g7;ar=bM end;function composeAxisAccelerationFromTargetSpeedV(g9,ga)local gb=vec3()local gc=vec3()if g9==axisCommandId.longitudinal then gb=vec3(core.getConstructOrientationForward())gc=vec3(core.getConstructWorldOrientationForward())elseif g9==axisCommandId.vertical then gb=vec3(core.getConstructOrientationUp())gc=vec3(core.getConstructWorldOrientationUp())elseif g9==axisCommandId.lateral then gb=vec3(core.getConstructOrientationRight())gc=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gd=vec3(core.getWorldGravity())local ge=gd:dot(gc)local gf=vec3(core.getWorldAirFrictionAcceleration())local gg=gf:dot(gc)local gh=vec3(core.getVelocity())local gi=gh:dot(gb)local gj=ga*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gj-gi)local gk=targetSpeedPID2:get()local gl=(gk-gg-ge)*gc;return gl end;function composeAxisAccelerationFromTargetSpeed(g9,ga)local gb=vec3()local gc=vec3()if g9==axisCommandId.longitudinal then gb=vec3(core.getConstructOrientationForward())gc=vec3(core.getConstructWorldOrientationForward())elseif g9==axisCommandId.vertical then gb=vec3(core.getConstructOrientationUp())gc=vec3(core.getConstructWorldOrientationUp())elseif g9==axisCommandId.lateral then gb=vec3(core.getConstructOrientationRight())gc=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gd=vec3(core.getWorldGravity())local ge=gd:dot(gc)local gf=vec3(core.getWorldAirFrictionAcceleration())local gg=gf:dot(gc)local gh=vec3(core.getVelocity())local gi=gh:dot(gb)local gj=ga*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gj-gi)local gk=targetSpeedPID:get()local gl=(gk-gg-ge)*gc;return gl end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bD,bE in pairs(b2[0])do if aG==nil or bE.center.x<aG then aG=bE.center.x end;if aH==nil or bE.center.x>aH then aH=bE.center.x end;if aI==nil or bE.center.y<aI then aI=bE.center.y end;if aJ==nil or bE.center.y>aJ then aJ=bE.center.y end end;b3=""local gm=1.1*(aH-aG)/1920;local gn=1.4*(aJ-aI)/1080;for bD,bE in pairs(b2[0])do local c0=960+bE.center.x/gm;local c1=540+bE.center.y/gn;b3=b3 ..'<circle cx="'..c0 ..'" cy="'..c1 ..'" r="'..bE.radius/gm*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bE.name,"Moon")and not string.match(bE.name,"Sanctuary")and not string.match(bE.name,"Space")then b3=b3 .."<text x='"..c0 .."' y='"..c1+bE.radius/gm*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bE.name.."</text>"end end;local cj=vec3(core.getConstructWorldPos())local c0=960+cj.x/gm;local c1=540+cj.y/gn;b3=b3 ..'<circle cx="'..c0 ..'" cy="'..c1 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..c0 .."' y='"..c1-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=gm;b5=gn;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cj=vec3(core.getConstructWorldPos())local c0=960+cj.x/gm;local c1=540+cj.y/gn;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((c0-80)/19.20,(c1-80)/10.80,b3)end end;function PlanetRef()local function go(gp)return type(gp)=='number'end;local function gq(gp)return type(tonumber(gp))=='number'end;local function gr(gs)return type(gs)=='table'end;local function gt(gu)return type(gu)=='string'end;local function gv(bE)return gr(bE)and go(bE.x and bE.y and bE.z)end;local function gw(gx)return gr(gx)and go(gx.latitude and gx.longitude and gx.altitude and gx.bodyId and gx.systemId)end;local gy=math.pi/180;local gz=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gA=utils.clamp;local function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*epsilon end;local function gB(gp)local bF=string.gsub(string.reverse(e('%.4f',gp)),'^0*%.?','')return bF==''and'0'or string.reverse(bF)end;local function gC(gD)if gv(gD)then return e('{x=%.3f,y=%.3f,z=%.3f}',gD.x,gD.y,gD.z)end;if gr(gD)and not getmetatable(gD)then local gE={}local gF=next(gD)if type(gF)=='nil'or gF==1 then gE=gD else for bD,bE in pairs(gD)do local ee=gC(bE)if type(bD)=='number'then table.insert(gE,e('[%s]=%s',bD,ee))else table.insert(gE,e('%s=%s',bD,ee))end end end;return e('{%s}',table.concat(gE,','))end;if gt(gD)then return e("'%s'",gD:gsub("'",[[\']]))end;return tostring(gD)end;local gG={}gG.__index=gG;gG.__tostring=function(gD,gH)local gI={}for bD in pairs(gD)do table.insert(gI,bD)end;table.sort(gI)local gE={}for _,bD in ipairs(gI)do local ee=gC(gD[bD])if type(bD)=='number'then table.insert(gE,e('[%s]=%s',bD,ee))else table.insert(gE,e('%s=%s',bD,ee))end end;if gH then return e('%s%s',gH,table.concat(gE,',\n'..gH))end;return e('{%s}',table.concat(gE,','))end;gG.__eq=function(gJ,gK)return gJ.planetarySystemId==gK.planetarySystemId and gJ.bodyId==gK.bodyId and float_eq(gJ.radius,gK.radius)and float_eq(gJ.center.x,gK.center.x)and float_eq(gJ.center.y,gK.center.y)and float_eq(gJ.center.z,gK.center.z)and float_eq(gJ.GM,gK.GM)end;local function gL(cl,cm,gM,cc,gN)assert(gq(cl),'Argument 1 (planetarySystemId) must be a number:'..type(cl))assert(gq(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gq(gM),'Argument 3 (radius) must be a number:'..type(gM))assert(gr(cc),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cc))assert(gq(gN),'Argument 5 (GM) must be a number:'..type(gN))return setmetatable({planetarySystemId=tonumber(cl),bodyId=tonumber(cm),radius=tonumber(gM),center=vec3(cc),GM=tonumber(gN)},gG)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gO)return e('::pos{%d,%d,%s,%s,%s}',gO.systemId,gO.bodyId,gB(gO.latitude*gz),gB(gO.longitude*gz),gB(gO.altitude))end;MapPosition.__eq=function(gJ,gK)return gJ.bodyId==gK.bodyId and gJ.systemId==gK.systemId and float_eq(gJ.latitude,gK.latitude)and float_eq(gJ.altitude,gK.altitude)and(float_eq(gJ.longitude,gK.longitude)or float_eq(gJ.latitude,math.pi/2)or float_eq(gJ.latitude,-math.pi/2))end;local function gP(gQ,cm,cg,ch,cf)local cl=gQ;if gt(gQ)and not ch and not cf and not cm and not cg then cl,cm,cg,ch,cf=string.match(gQ,ck)assert(cl,'Argument 1 (position string) is malformed.')else assert(gq(cl),'Argument 1 (systemId) must be a number:'..type(cl))assert(gq(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gq(cg),'Argument 3 (latitude) must be in degrees:'..type(cg))assert(gq(ch),'Argument 4 (longitude) must be in degrees:'..type(ch))assert(gq(cf),'Argument 5 (altitude) must be in meters:'..type(cf))end;cl=tonumber(cl)cm=tonumber(cm)cg=tonumber(cg)ch=tonumber(ch)cf=tonumber(cf)if cm==0 then return setmetatable({latitude=cg,longitude=ch,altitude=cf,bodyId=cm,systemId=cl},MapPosition)end;return setmetatable({latitude=gy*gA(cg,-90,90),longitude=gy*(ch%360),altitude=cf,bodyId=cm,systemId=cl},MapPosition)end;local gR={}gR.__index=gR;gR.__tostring=function(gD,gH)local gS=gH and gH..'  'local gT={}local gI={}for bD in pairs(gD)do table.insert(gI,bD)end;table.sort(gI)for _,gU in ipairs(gI)do bdy=gD[gU]local gV=gG.__tostring(bdy,gS)if gH then table.insert(gT,e('[%s]={\n%s\n%s}',gU,gV,gH))else table.insert(gT,e('  [%s]=%s',gU,gV))end end;if gH then return e('\n%s%s%s',gH,table.concat(gT,',\n'..gH),gH)end;return e('{\n%s\n}',table.concat(gT,',\n'))end;local function gW(gX)local b2={}local pid;for _,bE in pairs(gX)do local cr=bE.planetarySystemId;if type(cr)~='number'then error('Invalid planetary system ID: '..tostring(cr))elseif pid and cr~=pid then error('Mismatch planetary system IDs: '..cr..' and '..pid)end;local gY=bE.bodyId;if type(gY)~='number'then error('Invalid body ID: '..tostring(gY))elseif b2[gY]then error('Duplicate body ID: '..tostring(gY))end;setmetatable(bE.center,getmetatable(vec3.unit_x))b2[gY]=setmetatable(bE,gG)pid=cr end;return setmetatable(b2,gR)end;b7={}local function gZ(gX)return setmetatable({galaxyAtlas=gX or{}},b7)end;b7.__index=function(gs,i)if type(i)=='number'then local system=gs.galaxyAtlas[i]return gW(system)end;return rawget(b7,i)end;b7.__pairs=function(gD)return function(gs,bD)local g_,nv=next(gs,bD)return g_,nv and gW(nv)end,gD.galaxyAtlas,nil end;b7.__tostring=function(gD)local h0={}for _,h1 in pairs(gD or{})do local h2=h1:getPlanetarySystemId()local h3=gR.__tostring(h1,'    ')table.insert(h0,e('  [%s]={%s\n  }',h2,h3))end;return e('{\n%s\n}\n',table.concat(h0,',\n'))end;b7.BodyParameters=gL;b7.MapPosition=gP;b7.PlanetarySystem=gW;function b7.createBodyParameters(h4,cm,h5,h6,h7,h8,h9)assert(gq(h4),'Argument 1 (planetarySystemId) must be a number:'..type(h4))assert(gq(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gq(h5),'Argument 3 (surfaceArea) must be a number:'..type(h5))assert(gr(h6),'Argument 4 (aPosition) must be an array or vec3:'..type(h6))assert(gr(h7),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h7))assert(gq(h8),'Argument 6 (altitude) must be in meters:'..type(h8))assert(gq(h9),'Argument 7 (gravityAtPosition) must be number:'..type(h9))local gM=math.sqrt(h5/4/math.pi)local ae=gM+h8;local ha=vec3(h6)+ae*vec3(h7)local gN=h9*ae*ae;return gL(h4,cm,gM,ha,gN)end;b7.isMapPosition=gw;function b7:getPlanetarySystem(gQ)if i==nil then i=0 end;if nv==nil then nv=0 end;local h4=gQ;if gw(gQ)then h4=gQ.systemId end;if type(h4)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gR then system=gW(system)end;return system end end end;function gR:castIntersections(hb,fD,hc,hd)local hc=hc or function(fi)return 1.05*fi.radius end;local he={}if hd then for _,i in ipairs(hd)do he[i]=self[i]end else hd={}for bD,fi in pairs(self)do table.insert(hd,bD)he[bD]=fi end end;local function hf(hg,hh)local hi=he[hg].center-hb;local hj=he[hh].center-hb;return hi:len()<hj:len()end;table.sort(hd,hf)local hk=fD:normalize()for i,cr in ipairs(hd)do local fi=he[cr]local hl=fi.center-hb;local gM=hc(fi)local hm=hl:dot(hk)local hn=hm^2-(hl:len2()-gM^2)if hn>=0 then local ho=math.sqrt(hn)local fg=hm+ho;local fh=hm-ho;if fh>0 then return fi,fg,fh elseif fg>0 then return fi,fg,nil end end end;return nil,nil,nil end;function gR:closestBody(hp)assert(type(hp)=='table','Invalid coordinates.')local hq,fi;local hr=vec3(hp)for _,hs in pairs(self)do local ht=(hs.center-hr):len2()if(not fi or ht<hq)and hs.name~="Space"then fi=hs;hq=ht end end;return fi end;function gR:convertToBodyIdAndWorldCoordinates(gQ)local hu=gQ;if gt(gQ)then hu=gP(gQ)end;if hu.bodyId==0 then return 0,vec3(hu.latitude,hu.longitude,hu.altitude)end;local hs=self:getBodyParameters(hu)if hs then return hu.bodyId,hs:convertToWorldCoordinates(hu)end end;function gR:getBodyParameters(gQ)local cm=gQ;if gw(gQ)then cm=gQ.bodyId end;assert(gq(cm),'Argument 1 (bodyId) must be a number:'..type(cm))return self[cm]end;function gR:getPlanetarySystemId()local _,bE=next(self)return bE and bE.planetarySystemId end;function gG:convertToMapPosition(cc)assert(gr(cc),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cc))local cd=vec3(cc)if self.bodyId==0 then return setmetatable({latitude=cd.x,longitude=cd.y,altitude=cd.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ce=cd-self.center;local ae=ce:len()local cf=ae-self.radius;local cg=0;local ch=0;if not float_eq(ae,0)then local ci=math.atan(ce.y,ce.x)ch=ci>=0 and ci or 2*math.pi+ci;cg=math.pi/2-math.acos(ce.z/ae)end;return setmetatable({latitude=cg,longitude=ch,altitude=cf,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gG:convertToWorldCoordinates(gQ)local hu=gt(gQ)and gP(gQ)or gQ;if hu.bodyId==0 then return vec3(hu.latitude,hu.longitude,hu.altitude)end;assert(gw(hu),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hu.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hu.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cn=math.cos(hu.latitude)return self.center+(self.radius+hu.altitude)*vec3(cn*math.cos(hu.longitude),cn*math.sin(hu.longitude),math.sin(hu.latitude))end;function gG:getAltitude(cc)return(vec3(cc)-self.center):len()-self.radius end;function gG:getDistance(cc)return(vec3(cc)-self.center):len()end;function gG:getGravity(cc)local hv=self.center-vec3(cc)local hw=hv:len2()return self.GM/hw*hv/math.sqrt(hw)end;return setmetatable(b7,{__call=function(_,...)return gZ(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gt(gu)return type(gu)=='string'end;local function gr(gs)return type(gs)=='table'end;local function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cf)assert(self.body)local ae=cf+self.body.radius;if not float_eq(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gQ,bg)assert(self.body)assert(gr(gQ)or gt(gQ))assert(gr(bg))local cj=(gt(gQ)or PlanetRef.isMapPosition(gQ))and self.body:convertToWorldCoordinates(gQ)or vec3(gQ)local bE=vec3(bg)local hx=cj-self.body.center;local hj=bE:len2()local hy=hx:len()local hz=self.body.GM;local hA=((hj-hz/hy)*hx-hx:dot(bE)*bE)/hz;local c9=hz/(2*hz/hy-hj)local hB=hA:len()local hk=hA:normalize()local hC=c9*(1-hB)local hD=c9*(1+hB)local hE=hC*hk+self.body.center;local hF=hB<=1 and-hD*hk+self.body.center or nil;local hG=math.sqrt(c9*hz*(1-hB*hB))local hH=hF and 2*math.pi*math.sqrt(c9^3/hz)local hI=math.acos(hA:dot(hx)/(hB*hy))if hx:dot(bE)<0 then hI=-(hI-2*math.pi)end;local hJ=math.acos((math.cos(hI)+hB)/(1+hB*math.cos(hI)))local hK=hJ;if hK<0 then hK=hK+2*math.pi end;local hL=hK-hB*math.sin(hK)local hM=0;local hN=0;local hO=0;if hH~=nil then hM=hL/(2*math.pi/hH)hN=hH-hM;hO=hN+hH/2;if hI-math.pi>0 then hN=hM;hO=hN+hH/2 end;if hO>hH then hO=hO-hH end end;return{periapsis={position=hE,speed=hG/hC,circularOrbitSpeed=math.sqrt(hz/hC),altitude=hC-self.body.radius},apoapsis=hF and{position=hF,speed=hG/hD,circularOrbitSpeed=math.sqrt(hz/hD),altitude=hD-self.body.radius},currentVelocity=bE,currentPosition=cj,eccentricity=hB,period=hH,eccentricAnomaly=hJ,meanAnomaly=hL,timeToPeriapsis=hN,timeToApoapsis=hO}end;local function hP(hQ)local hs=PlanetRef.BodyParameters(hQ.planetarySystemId,hQ.bodyId,hQ.radius,hQ.center,hQ.GM)return setmetatable({body=hs},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hP(...)end})end;function Kinematics()local b9={}local hR=30000000/3600;local hS=hR*hR;local hT=100;local function hU(bE)return 1/math.sqrt(1-bE*bE/hS)end;function b9.computeAccelerationTime(hV,hW,hX)local hY=hR*math.asin(hV/hR)return(hR*math.asin(hX/hR)-hY)/hW end;function b9.computeDistanceAndTime(hV,hX,hZ,h_,i0,i1)i0=i0 or 0;i1=i1 or 0;local i2=hV<=hX;local i3=h_*(i2 and 1 or-1)/hZ;local i4=-i1/hZ;local i5=i3+i4;if i2 and i5<=0 or not i2 and i5>=0 then return-1,-1 end;local i6,i7=0,0;if i3~=0 and i0>0 then local hY=math.asin(hV/hR)local i8=math.pi*(i3/2+i4)local i9=i3*i0;local ia=hR*math.pi;local bE=function(gs)local cX=(i8*gs-i9*math.sin(math.pi*gs/2/i0)+ia*hY)/ia;local ib=math.tan(cX)return hR*ib/math.sqrt(ib*ib+1)end;local ic=i2 and function(gu)return gu>=hX end or function(gu)return gu<=hX end;i7=2*i0;if ic(bE(i7))then local id=0;while math.abs(i7-id)>0.5 do local gs=(i7+id)/2;if ic(bE(gs))then i7=gs else id=gs end end end;local ie=hV;local ig=i7/hT;for ih=1,hT do local bV=bE(ih*ig)i6=i6+(bV+ie)*ig/2;ie=bV end;if i7<2*i0 then return i6,i7 end;hV=ie end;local hY=hR*math.asin(hV/hR)local bG=(hR*math.asin(hX/hR)-hY)/i5;local ii=hS*math.cos(hY/hR)/i5;local ae=ii-hS*math.cos((i5*bG+hY)/hR)/i5;return ae+i6,bG+i7 end;function b9.computeTravelTime(hV,hW,ae)if ae==0 then return 0 end;if hW>0 then local hY=hR*math.asin(hV/hR)local ii=hS*math.cos(hY/hR)/hW;return(hR*math.acos(hW*(ii-ae)/hS)-hY)/hW end;if hV==0 then return-1 end;assert(hV>0,'Acceleration and initial speed are both zero.')return ae/hV end;function b9.lorentz(bE)return hU(bE)end;return b9 end;function safeZone(ij)local gM=500000;local ik,il,im=math.huge;local io=false;local ip=vec3({13771471,7435803,-128971})local iq=18000000;ik=vec3(ij):dist(ip)if ik<iq then return true,math.abs(ik-iq),"Safe Zone",0 end;il=vec3(ij):dist(vec3(planet.center))if il<gM then io=true end;if math.abs(il-gM)<math.abs(ik-iq)then return io,math.abs(il-gM),planet.name,planet.bodyId else return io,math.abs(ik-iq),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.340;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;if br~=nil then br.activate()end;if bs~=nil then bs.activate()end end)end;function SaveDataBank(ir)if dbHud_1 then if not a9 then for bD,bE in pairs(b)do dbHud_1.setStringValue(bE,g(_G[bE]))if ir and dbHud_2 then dbHud_2.setStringValue(bE,g(_G[bE]))end end;for bD,bE in pairs(a)do dbHud_1.setStringValue(bE,g(_G[bE]))if ir and dbHud_2 then dbHud_2.setStringValue(bE,g(_G[bE]))end end;c("Saved Variables to Datacore")if ir and dbHud_2 then V="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bO=j()if door and(bO>0 or bO==0 and ap<10000)then for _,bE in pairs(door)do bE.toggle()end end;if forcefield and(bO>0 or bO==0 and ap<10000)then for _,bE in pairs(forcefield)do bE.toggle()end end;SaveDataBank()if button then button.activate()end;if br~=nil then br.deactivate()end end;function script.onTick(is)if is=="tenthSecond"then if bq~=nil then bq.deactivate()end;if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then y=1;Nav.control.cancelCurrentControlMasterMode()C=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local it=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if it and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dA,dB=getDistanceDisplayString(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dA,dB=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dA,dB=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dA..'", "unit":"'..dB..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dA,dB=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dA)..'", "unit":"'..dB..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif is=="oneSecond"then if bq~=nil then bq.activate()end;am=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cv={}local dJ=GetFlightStyle()DrawOdometer(cv,a7,TotalDistanceTravelled,dJ,a8)if ShouldCheckDamage then CheckDamage(cv)end;ag=table.concat(cv,"")collectgarbage("collect")elseif is=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bF=json.decode(dbHud_1.getStringValue("SavedLocations"))if bF~=nil then _G["SavedLocations"]=bF;local ct=-1;local cq;for bD,bE in pairs(SavedLocations)do if bE.name and bE.name=="SatNav Location"then ct=bD;break end end;if ct~=-1 then cq=SavedLocations[ct]ct=-1;for bD,bE in pairs(b2[0])do if bE.name and bE.name=="SatNav Location"then ct=bD;break end end;if ct>-1 then b2[0][ct]=cq end;UpdateAtlasLocationsList()V=cq.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif is=="msgTick"then local cv={}DisplayMessage(cv,"empty")V="empty"unit.stopTimer("msgTick")ad=3 elseif is=="animateTick"then bd=true;bc=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif is=="hudTick"then local cv={}HUDPrologue(cv)if showHud then UpdateHud(cv)else DisplayOrbitScreen(cv)DrawWarnings(cv)end;HUDEpilogue(cv)cv[#cv+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if V~="empty"then DisplayMessage(cv,V)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cv)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cv)if screen_1.getMouseState()==1 then CheckButtons()end;cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)elseif system.isViewLocked()==0 then if o()==1 and U then SetButtonContains()DrawButtons(cv)if not bc and not bd then local iu=table.concat(cv,"")cv={}cv[#cv+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cv[#cv+1]=b3;cv[#cv+1]=iu;cv[#cv+1]="</body>"bc=true;cv[#cv+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cv,"")system.setScreen(content)elseif bd then local iu=table.concat(cv,"")cv={}cv[#cv+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cv[#cv+1]=b3;cv[#cv+1]=iu;cv[#cv+1]="</body>"end;if not bc then cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end else CheckButtons()end else if not U and o()==0 then CheckButtons()if ae>DeadZone then DrawCursorLine(cv)end else SetButtonContains()DrawButtons(cv)end;cv[#cv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end;cv[#cv+1]=[[</svg></body>]]content=table.concat(cv,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif is=="apTick"then bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ao=j()>0;local bG=system.getTime()local iv=bG-bn;bn=bG;local cy=vec3(core.getConstructWorldOrientationForward())local cz=vec3(core.getConstructWorldOrientationRight())local iw=vec3(core.getConstructWorldOrientationUp())local cA=vec3(core.getWorldVertical())local ix=vec3(core.getConstructWorldPos())local iy=core.getVelocity()local dL=getRoll(cA,cy,cz)local dM=dL/180*math.pi;local dN=math.cos(dM)local dO=math.sin(dM)local cB=getPitch(cA,cy,cz)local iz=getPitch(cA,cy,cz*dN+iw*dO)local iA=-math.deg(cS(iw,bg,cy))local iB=math.deg(cS(cz,bg,cy))bm=ao and iA<-YawStallAngle or iA>YawStallAngle or iB<-PitchStallAngle or iB>PitchStallAngle;v,w,x,_=safeZone(ix)bk=system.getMouseDeltaX()bl=system.getMouseDeltaY()if InvertMouse and not U then bl=-bl end;O=0;S=0;N=0;bg=vec3(core.getWorldVelocity())bh=vec3(bg):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bg)al=hoverDetectGround()local bS=planet:getGravity(core.getConstructWorldPos()):len()*n()bo=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and U then if not bc then ab=ab+bk;ac=ac+bl end else ab=0;ac=0 end else ab=ab+bk;ac=ac+bl;ae=math.sqrt(ab*ab+ac*ac)if not U and o()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then O=O-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then O=O-(ab+DeadZone)*MouseXSensitivity else O=0 end;if ac>0 and ac>DeadZone then N=N-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then N=N-(ac+DeadZone)*MouseYSensitivity else N=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;N=(-utils.smoothstep(bl,-100,100)+0.5)*2*J;O=(-utils.smoothstep(bk,-100,100)+0.5)*2*K else ab=0;ac=0 end end end;local iC=bh>8334;if bh>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not iC then V="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if not iC and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iC;if ao and j()>0.09 then if bh>bt/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bh<bt/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then R=1 else R=0 end;ap=core.getAltitude()if ap==0 then ap=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local iD=false;if CustomTarget~=nil then iD=AlignToWorldVector(CustomTarget.position-ix,0.01)else iD=AlignToWorldVector(vec3(bg),0.01)end;be=true;if iD and(math.abs(dL)<2 or math.abs(iz)>85)and bh>=bt/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ai=false;ak=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bt))y=0 end elseif bh>H then AlignToWorldVector(vec3(bg),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bh>H then AlignToWorldVector(-vec3(bg))end end;if not ProgradeIsOn and ai then if j()==0 then I=true;BeginReentry()ai=false;ak=true else ai=false;ToggleAutopilot()end end;local ei=vec3(core.getWorldVertical())*-1;local eg=bg.x*ei.x+bg.y*ei.y+bg.z*ei.z;if ak and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bh*3.6>bt-100 and math.abs(eg)<20 and j()>=0.1 and(CustomTarget.position-ix):len()>2000+ap then ToggleAutopilot()ak=false end;if Autopilot and j()==0 and not ai then local iE=AutopilotTargetCoords;local iF=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iG=(CustomTarget.position-a6.center):normalize()local iH=iG:project_on_plane((a6.center-ix):normalize()):normalize()local iI=a6.center+iH*(a6.radius+AutopilotTargetOrbit)local iJ=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if not TargetSet then if(ix-iI):len()<(ix-iJ):len()then iE=iI;AutopilotTargetCoords=iE else iE=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=iE end;local cC=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)iF=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;iF=true;TargetSet=true;AutopilotRealigned=true;iE=CustomTarget.position+(ix-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iG=(ix+bg*100000-a6.center):normalize()local iH=iG:project_on_plane((a6.center-ix):normalize()):normalize()if iH:len()<1 then iG=(ix+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()iH=iG:project_on_plane((a6.center-ix):normalize()):normalize()end;iE=a6.center+iH*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iE;TargetSet=true;iF=true;AutopilotRealigned=true;local cC=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)end end;AutopilotDistance=(vec3(iE)-vec3(core.getConstructWorldPos())):len()local ff,fg,fh=b8:getPlanetarySystem(0):castIntersections(ix,bg:normalize(),function(fi)if fi.noAtmosphericDensityAltitude>0 then return fi.radius+fi.noAtmosphericDensityAltitude else return fi.radius+fi.surfaceMaxAltitude*1.5 end end)local fj=fg;if fh~=nil and fg~=nil then fj=math.min(fh,fg)end;if fj~=nil and fj<AutopilotDistance and ff.name==a6.name then AutopilotDistance=fj end;local iD=true;local iK=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bg):normalize()*AutopilotDistance)):len()-a6.radius;local dA,dB=getDistanceDisplayString(iK)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dA..'", "unit":"'..dB..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)end;if bh>300 and AutopilotAccelerating then local dx=vec3(iE)-vec3(core.getConstructWorldPos())local iL=utils.clamp(math.deg(cS(iw,bg:normalize(),dx:normalize()))*bh/500,-90,90)local iM=utils.clamp(math.deg(cS(cz,bg:normalize(),dx:normalize()))*bh/500,-90,90)if math.abs(iL)<20 and math.abs(iM)<20 then iL=iL*2;iM=iM*2 end;if math.abs(iL)<2 and math.abs(iM)<2 then iL=iL*2;iM=iM*2 end;local iA=-math.deg(cS(iw,cy,bg:normalize()))local iB=-math.deg(cS(cz,cy,bg:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iM-iB)local iN=utils.clamp(apPitchPID:get(),-1,1)N=N+iN;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iL-iA)local iO=utils.clamp(apYawPID:get(),-1,1)O=O+iO;iF=true;if math.abs(iL)>2 or math.abs(iM)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iK<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(iK)end end;if not AutopilotCruising and not AutopilotBraking and not iF then iD=AlignToWorldVector((iE-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iD=AlignToWorldVector(-vec3(bg):normalize())end;if AutopilotAccelerating then if not F then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true end;local fH=unit.getThrottle()if AtmoSpeedAssist then fH=y end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fH==0 and F then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;R=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)y=1 end;local _,iP=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dx,iQ,iR;if CustomTarget~=nil then dx=CustomTarget.position-ix;iQ=planet:getAltitude(CustomTarget.position)iR=math.sqrt(dx:len()^2-(ap-iQ)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bh<50 then V="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bh<=iP and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cC=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iP=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bh<=iP then if CustomTarget~=nil then if bg:normalize():dot(dx:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cC=zeroConvertToMapPosition(a6,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)WaypointSet=true end else V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local cC=zeroConvertToMapPosition(a6,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V="Autopilot completed, orbit established"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fH=unit.getThrottle()if AtmoSpeedAssist then fH=y end;if fH>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iD then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iD then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not F then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cC=zeroConvertToMapPosition(a6,CustomTarget.position)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)end;if T then be=true;local iM=0;local cj=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iS=cj-vec3(core.getConstructWorldPos())local iT=vec3(iS):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iU=vec3(iS):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(iT*iT+iU*iU)AlignToWorldVector(iS:normalize())local iV=40;local iW=ae<iV;local iX=100;local ga=utils.clamp((ae-iV)/2,10,iX)N=0;local iD=math.abs(O)<0.1;if iD and bh<ga and not iW then BrakeIsOn=false;iM=-20 else BrakeIsOn=true;iM=0 end;local iY=0;if math.abs(iM-cB)>iY then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iM-cB)local iN=pitchPID:get()N=iN end end;if VertTakeOff then Autopilot=false;AltitudeHold=false;if VertTargetPlanet==nil then VertTargetPlanet=planet end;local iZ=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local i_=nil;if j()>0.08 then i_=0;be=true;BrakeIsOn=false;aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then aa=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)i_=36;if iZ<10 then BrakeIsOn=true;R=1 else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)BrakeIsOn=true;R=1;V="Takeoff completed. Parking."ToggleAutoTakeoff()end;if i_~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local j0=utils.clamp(i_-iz,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(j0)local j1=utils.clamp(vTpitchPID:get(),-1,1)N=j1 end end;if IntoOrbit then local iZ=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local j2,iP=bb(OrbitTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-OrbitTargetPlanet.center):len()-OrbitTargetPlanet.radius)local j3=getHeading(vec3(core.getConstructWorldOrientationForward()))local j4=getRoll(cA,cy,cz)if not OrbitTargetSet then if OrbitTargetPlanet.hasAtmosphere then OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.noAtmosphericDensityAltitude)else OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.surfaceMaxAltitude)end;OrbitTargetSet=true end;if orbit.periapsis~=nil and orbit.eccentricity<1 and ap>OrbitTargetOrbit and ap<OrbitTargetOrbit*1.3 and orbit.periapsis.altitude>0 then if orbit.apoapsis~=nil then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;if orbit.periapsis.altitude>OrbitTargetOrbit*0.9 and orbit.periapsis.altitude<OrbitTargetOrbit*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;y=0;bv=0;bw=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)OrbitAchieved=true;if iz>2 or iz<-2 then bx=0 else V="Orbit established"bu=nil;bB=false;OrbitTargetSet=false;OrbitTargetPlanet=nil;be=autoRollPreference;ToggleIntoOrbit()end else bu="Adjusting Orbit"bB=true;if orbit.periapsis.altitude<OrbitTargetOrbit then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if bh+10>iP then if iZ>15 then bx=-80;bv=0.5;BrakeIsOn=false elseif iZ<-15 then bx=80;bv=0.5;BrakeIsOn=false else bv=0;BrakeIsOn=true end elseif bh-10<iP then bx=80;bv=0.5;BrakeIsOn=false else bv=0;BrakeIsOn=true end else bx=80;bv=0.5;BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then bv=0;BrakeIsOn=true elseif orbit.periapsis.altitude<OrbitTargetOrbit*1.2 then bx=-80;bv=0.5;BrakeIsOn=false end end end end;if bv>0 and iz<=bx+3 and iz>=bx-3 then y=bv;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bv)elseif not OrbitAchieved then y=0.05;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0.05)end else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;local j5=j2%50;local j6=0;if j5>0 then j6=j2-j5+50 else j6=j2 end;BrakeIsOn=false;bw=j6*2.5;if not bA then local j7=false;local j8=false;local j9=false;if ap<OrbitTargetOrbit then bu="Aligning to orbital path"else bu="Aligning to orbital point"end;bx=0;by=270;bz=0;if j3<=by+1 and j3>=by-1 then system.print("Yaw aligned: "..by.." = "..j3)j7=true else j7=false end;if iz<=bx+1 and iz>=bx-1 then system.print("Pitch aligned: "..bx.." = "..iz)j8=true else j8=false end;if j4<=bz+1 and j4>=bz-1 then system.print("Roll aligned: "..bz.." = "..j4)j9=true else j9=false end;if j7 and j8 and j9 then bx=nil;by=nil;bz=nil;bA=true end else if ap<OrbitTargetOrbit*0.8 then bu="Escaping planet gravity"bx=35 elseif ap>=OrbitTargetOrbit*0.8 and ap<OrbitTargetOrbit*1.01 then bu="Approaching orbital corridor"bx=utils.map(ap,OrbitTargetOrbit*0.6,OrbitTargetOrbit,35,0)elseif ap>=OrbitTargetOrbit*1.01 and ap<OrbitTargetOrbit*1.5 then bu="Approaching orbital corridor"if iZ<0 or bB then bx=utils.map(ap,OrbitTargetOrbit*1.5,OrbitTargetOrbit*1.01,-30,0)else bx=utils.map(ap,OrbitTargetOrbit*0.99,OrbitTargetOrbit*1.5,0,30)end elseif ap>OrbitTargetOrbit*1.5 then bx=-80;bu="Reentering orbital corridor"end end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bw)end;if bx~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local ja=bx-iz;OrbitPitchPID:inject(ja)local jb=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)N=jb end;if by~=nil then if OrbitYawPID==nil then OrbitYawPID=pid.new(2*0.01,0,2*0.1)end;local jc=j3-by;OrbitYawPID:inject(jc)local jd=utils.clamp(OrbitYawPID:get(),-0.5,0.5)O=jd end;if bz~=nil then if iz<85 then local je=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(je*0.01,0,je*0.1)end;local jf=bz-j4;OrbitRollPID:inject(jf)local jg=utils.clamp(OrbitRollPID:get(),-0.5,0.5)S=jg end end elseif CancelIntoOrbit then BrakeIsOn=true;R=1;V="Orbitting cancelled, parking"OrbitTargetSet=false;OrbitTargetPlanet=nil;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)CancelIntoOrbit=false end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dY=unit.getClosestPlanetInfluence()>0;local jh=HoldAltitude-ap;local ji=500+bh;local jj=1;if AutoTakeoff then jj=utils.clamp(bh/100,0.1,1)end;local iM=(utils.smoothstep(jh,-ji,ji)-0.5)*2*MaxPitch*jj;if not Reentry and not ai and not VectorToTarget and cy:dot(bg:normalize())<0.99 then iM=(utils.smoothstep(jh,-ji*utils.clamp(20-19*j()*10,1,20),ji*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jj end;if not AltitudeHold then iM=0 end;if LockPitch~=nil then if dY then iM=LockPitch else LockPitch=nil end end;be=true;local jk=N;if Reentry then local ReentrySpeed=math.floor(bt)local jl,jm=b9.computeDistanceAndTime(bh,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jn=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bh<=ReentrySpeed/3.6 and bh>ReentrySpeed/3.6-10 and math.abs(bg:normalize():dot(cy))>0.9 then Nav.control.cancelCurrentControlMasterMode()y=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jl>-1 and jn<=jl or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not I then iM=-80;if j()>0.02 then V="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iM=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bt then I=false;Reentry=false;be=true end end end;if bh>H and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bg))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and j()>0.01 then local dx;if CustomTarget~=nil then dx=CustomTarget.position-vec3(core.getConstructWorldPos())else dx=a6.center-ix end;local iw=vec3(core.getConstructWorldOrientationUp())local iL=math.deg(cS(cA:normalize(),bg,dx))*2;local jo=math.rad(math.abs(dL))if bh>minRollVelocity and j()>0.01 then local jp=utils.clamp(90-iM*2,-90,90)bo=utils.clamp(iL*2,-jp,jp)local jq=iL;iL=utils.clamp(utils.clamp(iL,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jo)+4*(iz-iM)*math.sin(math.rad(dL)),-YawStallAngle*0.85,YawStallAngle*0.85)iM=utils.clamp(utils.clamp(iM*math.cos(jo),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jq)*math.sin(jo),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bo=0;iL=utils.clamp(iL,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jr=iA-iL;if not bm and bh>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jr)local iO=utils.clamp(yawPID:get(),-1,1)O=O+iO elseif ao and al>-1 or bh<minRollVelocity then AlignToWorldVector(dx)elseif bm and j()>0.01 then if(iA<-YawStallAngle or iA>YawStallAngle)and j()>0.01 then AlignToWorldVector(bg)end;if(iB<-PitchStallAngle or iB>PitchStallAngle)and j()>0.01 then iM=utils.clamp(iz-iB,iz-PitchStallAngle*0.85,iz+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local iQ=planet:getAltitude(CustomTarget.position)local jn=math.sqrt(dx:len()^2-(ap-iQ)^2)local js=LastMaxBrakeInAtmo;if js then js=js*utils.clamp(bh/100,0.1,1)*j()else js=LastMaxBrake end;if j()<0.01 then js=LastMaxBrake else end;local eg=bg.x*ei.x+bg.y*ei.y+bg.z*ei.z;local jt=bg:len()-math.abs(eg)local ju=vec3(core.getWorldAirFrictionAcceleration())local jv=math.sqrt(ju:len()-ju:project_on(ei):len())*n()if bh>100 then a0,a1=b9.computeDistanceAndTime(bh,100,n(),0,0,js+jv)local jw,jx=b9.computeDistanceAndTime(100,0,n(),0,0,js/2)a0=a0+jw else a0,a1=b9.computeDistanceAndTime(bh,0,n(),0,0,js/2)end;StrongBrakes=true;if not aj and jn<=a0+bh*iv/2 and(bg:project_on_plane(cA):normalize():dot(dx:project_on_plane(cA):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jt<0.1 or jn<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jn)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jn end end;if bm and j()>0.01 and al==-1 and bh>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bg)iM=utils.clamp(iz-iB,iz-PitchStallAngle*0.85,iz+PitchStallAngle*0.85)end;N=jk;local fQ=-1;local iY=0.1;if BrakeLanding then iM=0;local eg=bg.x*ei.x+bg.y*ei.y+bg.z*ei.z;local jy=false;local jz=30;if ba~=nil and ba>0 then local jv=0;local dR=utils.clamp(j(),0.4,2)local js=LastMaxBrakeInAtmo*utils.clamp(bh/100,0.1,1)*dR;local jA=ba*dR+js+jv-bS;local jB=js+jv-bS;local jC=js/2+jv-bS;local jD=bh-math.sqrt(math.abs(jC/2)*20/(0.5*n()))*utils.sign(jC)if jD<0 then jD=0 end;local jE;if bh>100 then local jF,_=b9.computeDistanceAndTime(bh,100,n(),0,0,js)local jG,_=b9.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(js))jE=jF+jG else jE=b9.computeDistanceAndTime(bh,0,n(),0,0,math.sqrt(js))end;if jE<20 then BrakeIsOn=false else local jH=0;if jD>100 then local jI,_=b9.computeDistanceAndTime(jD,100,n(),0,0,jA)local jJ,_=b9.computeDistanceAndTime(100,0,n(),0,0,ba*dR+math.sqrt(js)+jv-bS)jH=jI+jJ else jH,_=b9.computeDistanceAndTime(jD,0,n(),0,0,ba*dR+math.sqrt(js)+jv-bS)end;jH=(jH+15+bh*iv)*1.1;local jK=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jK then local iQ=planet:getAltitude(CustomTarget.position)local jL=ap-iQ-100;local dx=CustomTarget.position-vec3(core.getConstructWorldPos())local iR=math.sqrt(dx:len()^2-(ap-iQ)^2)if iR>100 then jK=false elseif jL<=jH or jH==-1 then BrakeIsOn=true;jy=true else BrakeIsOn=false;jy=true end end;if not jK and CalculateBrakeLandingSpeed then if jH>=jz then BrakeIsOn=true else BrakeIsOn=false end;jy=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fQ=al;if fQ>-1 then be=autoRollPreference;if bh<1 or bg:normalize():dot(cA)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bg:normalize():dot(-ei)<0.999 then BrakeIsOn=true elseif eg<-brakeLandingRate and not jy then BrakeIsOn=true elseif not jy then BrakeIsOn=false end end;if AutoTakeoff or aj then local ff,fh,fg=b8:getPlanetarySystem(0):castIntersections(ix,(AutopilotTargetCoords-ix):normalize(),function(fi)return fi.radius+fi.noAtmosphericDensityAltitude end)if math.abs(iM)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bh<H then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 elseif aj then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;BrakeIsOn=true end elseif aj and j()==0 and a6~=nil and(ff==nil or ff.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jM=hoverDetectGround()>-1;local jN=cB;if(VectorToTarget or aj)and not jM and bh>minRollVelocity and j()>0.01 then local jo=math.rad(math.abs(dL))jN=cB*math.abs(math.cos(jo))+iB*math.sin(jo)end;local jO=utils.clamp(iM-jN,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jO=utils.clamp(iM-jN,-85,MaxPitch)elseif j()<0.01 then jO=utils.clamp(iM-jN,-MaxPitch,MaxPitch)end;if math.abs(dL)<5 or VectorToTarget or BrakeLanding or jM or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jO)local iN=pitchPID:get()N=N+iN end end;W=orbit.eccentricity;if antigrav and not ExternalAGG and ap<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if bs~=nil then local jP=core.getAltitude()if jP<HeadlightGroundHeight then bs.activate()else bs.deactivate()end end;if AchieveOrbit then local jQ=1000;if planet.name~="Space"then if planet.hasAtmosphere then jQ=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jQ=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jQ=1000 end;local _,iP=bb(planet):escapeAndOrbitalSpeed((ix-planet.center):len()-planet.radius)be=true;local jR;if OrbitToTarget and CustomTarget~=nil then jR=(target.position-ix):normalize():project_on_plane(cA):normalize()else jR=cy:project_on_plane(cA):normalize()end;jR=jR*iP;jR=(jR+-cA*(ap-jQ)):normalize()*iP end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and C then y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)C=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not C then y=0;C=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jS=utils.clamp(M+N+system.getControlDeviceForwardInput(),-1,1)local jT=utils.clamp(P+S+system.getControlDeviceYawInput(),-1,1)local jU=utils.clamp(Q+O-system.getControlDeviceLeftRightInput(),-1,1)local jV=R;local jW=vec3(core.getWorldVertical())if jW==nil or jW:len()==0 then jW=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jX=vec3(core.getConstructWorldOrientationUp())local jY=vec3(core.getConstructWorldOrientationForward())local jZ=vec3(core.getConstructWorldOrientationRight())local j_=vec3(core.getWorldVelocity())local k0=vec3(core.getWorldVelocity()):normalize()local k1=getRoll(jW,jY,jZ)local k2=math.abs(k1)local k3=utils.sign(k1)local j=j()local k4=vec3(core.getWorldAngularVelocity())local k5=jS*pitchSpeedFactor*jZ+jT*rollSpeedFactor*jY+jU*yawSpeedFactor*jX;if jW:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local dL=getRoll(jW,jY,jZ)local dM=dL/180*math.pi;local dN=math.cos(dM)local dO=math.sin(dM)local iz=getPitch(jW,jY,jZ*dN+jX*dO)if be==true and math.abs(bo-k1)>autoRollRollThreshold and jT==0 and math.abs(iz)<85 then local k6=bo;local je=autoRollFactor;if j==0 then je=je/4;bo=0;k6=0 end;if rollPID==nil then rollPID=pid.new(je*0.01,0,je*0.1)end;rollPID:inject(k6-k1)local k7=rollPID:get()k5=k5+k7*jY end end;if jW:len()>0.01 and j>0.0 then local k8=20.0;if turnAssist==true and k2>k8 and jS==0 and jU==0 then local k9=turnAssistFactor*0.1;local ka=turnAssistFactor*0.025;local kb=(k2-k8)/(180-k8)*180;local kc=0;if kb<90 then kc=kb/90 elseif kb<180 then kc=(180-kb)/90 end;kc=kc*kc;local kd=-k3*ka*(1.0-kc)local ke=k9*kc;k5=k5+ke*jZ+kd*jX end end;local kf=1;local kg=0;local kh=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y-speedChangeLarge/100,-1,1),2)end end;z=0;local eg=-jW:dot(j_)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bt/3.6-j_:dot(jY))local ki=throttlePID:get()B=utils.clamp(ki,-1,1)if B<y and j>0.005 then A=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(B,0.01,1))else A=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(j_:len()-bt/3.6)local kj=utils.clamp(brakePID:get(),0,1)if j>0 and eg<-80 or j>0.005 then z=kj end;if z>0 then if A and B==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else B=utils.clamp(B,0.01,1)end;local kk=''local kl=vec3()local km=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",km,kg)local kn='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kn=kn..ExtraLongitudeTags end;local ko=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kp=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kn,axisCommandId.longitudinal)local kq=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kk=kk..' , '.."lateral airfoil , lateral ground "kl=kl+kq;if kl:len()>constants.epsilon then Nav:setEngineForceCommand(kk,kl,kg,'','','',kh)end;Nav:setEngineForceCommand(kn,kp,kf)local kr='thrust analog vertical fueled 'local ks='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ks=ks..ExtraLateralTags end;if ExtraVerticalTags~="none"then kr=kr..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kr,km,kf)else Nav:setEngineForceCommand(kr,vec3(),kf)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ks,kq,kf)else Nav:setEngineForceCommand(ks,vec3(),kf)end;if jV==0 then jV=z end;local kt=-jV*(brakeSpeedFactor*j_+brakeFlatFactor*k0)Nav:setEngineForceCommand('brake',kt)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;local kt=-jV*(brakeSpeedFactor*j_+brakeFlatFactor*k0)Nav:setEngineForceCommand('brake',kt)local kk=''local kl=vec3()local ku=false;local kn='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kn=kn..ExtraLongitudeTags end;local ko=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ko==axisCommandType.byThrottle then local kp=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kn,axisCommandId.longitudinal)Nav:setEngineForceCommand(kn,kp,kf)elseif ko==axisCommandType.byTargetSpeed then local kp=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kk=kk..' , '..kn;kl=kl+kp;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ku=true end end;local ks='thrust analog lateral 'if ExtraLateralTags~="none"then ks=ks..ExtraLateralTags end;local kv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kv==axisCommandType.byThrottle then local kw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ks,axisCommandId.lateral)Nav:setEngineForceCommand(ks,kw,kf)elseif kv==axisCommandType.byTargetSpeed then local kq=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kk=kk..' , '..ks;kl=kl+kq end;local kr='thrust analog vertical 'if ExtraVerticalTags~="none"then kr=kr..ExtraVerticalTags end;local kx=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kx==axisCommandType.byThrottle then local km=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kr,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kr,km,kf,'airfoil','ground','',kh)else Nav:setEngineForceCommand(kr,vec3(),kf)Nav:setEngineForceCommand('airfoil vertical',km,kf,'airfoil','','',kh)Nav:setEngineForceCommand('ground vertical',km,kf,'ground','','',kh)end elseif kx==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),kf)end;local ky=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kk=kk..' , '..kr;kl=kl+ky end;local ga=unit.getAxisCommandValue(0)if kl:len()>constants.epsilon then if R~=0 or ku or math.abs(k0:dot(jY))<0.8 or bg:len()>ga/3.6 then kk=kk..', brake'end;Nav:setEngineForceCommand(kk,kl,kg,'','','',kh)end end;local kz=torqueFactor*(k5-k4)local kA=vec3(core.getWorldAirFrictionAngularAcceleration())kz=kz-kA;Nav:setEngineTorqueCommand('torque',kz,kf,'airfoil','','',kh)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bV=vec3(core.getVelocity()):len()local kB=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kC=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bV*3.6>kC*(1-kB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV*3.6<kC*(1-kB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fH=unit.getThrottle()if AtmoSpeedAssist then fH=y*100 end;local ga=fH/100;if j==0 then ga=ga*MaxGameVelocity;if bV>=ga*(1-kB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV<ga*(1-kB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else ga=ga*ReentrySpeed/3.6;if bV>=ga*(1-kB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV<ga*(1-kB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bF=coroutine.resume(beginSetup)if bF then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kD)if kD=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if(vBooster or hover)and al==-1 and(j()>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if L and not BrakeLanding then Nav.control.extendLandingGears()end else if L then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kD=="forward"then M=M-1 elseif kD=="backward"then M=M+1 elseif kD=="left"then P=P-1 elseif kD=="right"then P=P+1 elseif kD=="yawright"then Q=Q-1 elseif kD=="yawleft"then Q=Q+1 elseif kD=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kD=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kD=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kD=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kD=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kD=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kD=="option1"then IncrementAutopilotTargetIndex()G=false elseif kD=="option2"then DecrementAutopilotTargetIndex()G=false elseif kD=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;G=false;ToggleWidgets()elseif kD=="option4"then ToggleAutopilot()G=false elseif kD=="option5"then ToggleLockPitch()G=false elseif kD=="option6"then ToggleAltitudeHold()G=false elseif kD=="option7"then wipeSaveVariables()G=false elseif kD=="option8"then ToggleFollowMode()G=false elseif kD=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end;G=false elseif kD=="lshift"then if system.isViewLocked()==1 then U=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then U=true;bd=false;bc=false end elseif kD=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kD=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kD=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kD=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()y=0 elseif kD=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kD=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kD=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kD)if kD=="forward"then M=0 elseif kD=="backward"then M=0 elseif kD=="left"then P=0 elseif kD=="right"then P=0 elseif kD=="yawright"then Q=0 elseif kD=="yawleft"then Q=0 elseif kD=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kD=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kD=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kD=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kD=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif kD=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif kD=="lshift"then if system.isViewLocked()==1 then U=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then U=false;bd=false;bc=false end elseif kD=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kD=="lalt"then if o()==0 and freeLookToggle then if G then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else G=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kD)if kD=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kD=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kD=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kD=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dC)local i;local kE="/commands /setname /G /agg /addlocation /copydatabank"local kF,kG=nil,nil;local kH="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dC," ")kF=dC;if i~=nil then kF=string.sub(dC,0,i-1)kG=string.sub(dC,i+1)elseif not string.find(kE,kF)then for g6 in string.gmatch(kH,"([^\n]+)")do c(g6)end;return end;if kF=="/setname"then if kG==nil or kG==""then V="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kG)else V="Select a saved target to rename first"end elseif kF=="/addlocation"then if kG==nil or kG==""or string.find(kG,"::")==nil then V="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kG,"::")local cp=string.sub(kG,1,i-2)local cj=string.sub(kG,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..p..','..p..','..p..','..p..','..p..'}'local cl,cm,cg,ch,cf=string.match(cj,ck)local planet=b2[tonumber(cl)][tonumber(cm)]AddNewLocationByWaypoint(cp,planet,cj)V="Added "..cp.." to saved locations,\nplanet "..planet.name.." at "..cj;ad=5 elseif kF=="/agg"then if kG==nil or kG==""then V="Usage: /agg targetheight"return end;kG=tonumber(kG)if kG<1000 then kG=1000 end;AntigravTargetAltitude=kG;V="AGG Target Height set to "..kG elseif kF=="/G"then if kG==nil or kG==""then V="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kG=="dump"then for bD,bE in pairs(a)do if type(_G[bE])=="boolean"then if _G[bE]==true then c(bE.." true")else c(bE.." false")end elseif _G[bE]==nil then c(bE.." nil")else c(bE.." ".._G[bE])end end;return end;i=string.find(kG," ")local kI=string.sub(kG,0,i-1)local kJ=string.sub(kG,i+1)for bD,bE in pairs(a)do if bE==kI then V="Variable "..kI.." changed to "..kJ;local kK=type(_G[bE])if kK=="number"then kJ=tonumber(kJ)elseif kK=="boolean"then if string.lower(kJ)=="true"then kJ=true else kJ=false end end;_G[bE]=kJ;return end end;V="No such global variable: "..kI elseif kF=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else V="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
