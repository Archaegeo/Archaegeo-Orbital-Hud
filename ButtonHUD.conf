name: ButtonsHud - Dimencia and Archaegeo v5.333 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=0;local t=0;local u=false;local v=0;local w=false;local x=round(ResolutionX/2,0)local y=round(ResolutionY/2,0)local z=false;local A=true;local B=55;local C=false;local D=1;local E=1;local F=false;local G=0;local H=0;local I=0;local J=0;local K=0;local L=0;local M=0;local N=false;local O=false;local P="empty"local Q=1;local R=5;local S=5;local T=false;local U,V=0;local W,X=0;local Y=false;local Z=false;local a0=nil;local a1=0;local a2=0;local a3=false;local a4=0;local a5=0;local a6=0;local a7=3;local a8=0;local a9=""local aa=""local ab=0;local ac=false;local ad=false;local ae=false;local af=-1;local ag=false;local ah=""local ai=j()>0;local aj=core.getAltitude()local ak=core.getElementIdList()local al=system.getTime()local am=nil;local an=false;local ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local aq={}local ar=0;local as=0;local at=""local au=true;local av={}local aw=1;local ax=0.001;local ay=ResolutionX;local az=ResolutionY;local aA=nil;local aB=nil;local aC=nil;local aD=nil;local aE=false;local aF=false;local aG=0;local aH=nil;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN={}local aO={}local aP=d(1/apTickRate)*2;local aQ={}local aR={}local aS={}local aT={}local aU=false;local aV=16;local aW=0;local aX=nil;local aY=""local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local ba=vec3(core.getWorldVelocity())local bb=vec3(ba):len()local bc=math.cos(YawStallAngle*constants.deg2rad)local bd=LandingGearGroundHeight;local be=system.getMouseDeltaX()local bf=system.getMouseDeltaY()local bg=false;local bh=system.getTime()local bi=0;local bj=0;local bk=AtmoSpeedLimit;function round(p,q)local r=10^(q or 0)return math.floor(p*r+0.5)/r end;function LoadVariables()if dbHud_1 then local bl=dbHud_1.hasKey;if not useTheseSettings then for bm,bn in pairs(a)do if bl(bn)then local bo=f(dbHud_1.getStringValue(bn))if bo~=nil then c(bn.." "..dbHud_1.getStringValue(bn))_G[bn]=bo;aE=true end end end end;coroutine.yield()for bm,bn in pairs(b)do if bl(bn)then local bo=f(dbHud_1.getStringValue(bn))if bo~=nil then c(bn.." "..dbHud_1.getStringValue(bn))_G[bn]=bo;aE=true end end end;if useTheseSettings then P="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a7=5 elseif aE then P="Loaded Saved Variables (see Lua Chat Tab for list)"else P="No Saved Variables Found - Stand up / leave remote to save settings"end else P="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bp=system.getTime()if LastStartTime+180<bp then LastMaxBrakeInAtmo=0 end;if aE then x=round(ResolutionX/2,0)y=round(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference end;LastStartTime=bp;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then P="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a7=5 end;bc=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]bk=AtmoSpeedLimit end;function CalculateFuelVolume(bq,br)if bq>br then br=bq end;if ContainerOptimization>0 then br=br-br*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then br=br-br*FuelTankOptimization*0.05 end;return br end;function ProcessElements()local bs=fuelX~=0 and fuelY~=0;for bm in pairs(ak)do local type=l(ak[bm])if type=="Landing Gear"then F=true end;if type=="Dynamic Core Unit"then local bt=h(ak[bm])if bt>10000 then aV=128 elseif bt>1000 then aV=64 elseif bt>150 then aV=32 end end;aL=aL+h(ak[bm])if bs and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bt=h(ak[bm])local bu=m(ak[bm])local bq=0;local bv=system.getTime()if type=="Atmospheric Fuel Tank"then local br=400;local bw=35.03;if bt>10000 then br=51200;bw=5480 elseif bt>1300 then br=6400;bw=988.67 elseif bt>150 then br=1600;bw=182.67 end;bq=bu-bw;if fuelTankHandlingAtmo>0 then br=br+br*fuelTankHandlingAtmo*0.2 end;br=CalculateFuelVolume(bq,br)aI[#aI+1]={ak[bm],core.getElementNameById(ak[bm]),br,bw,bq,bv}end;if type=="Rocket Fuel Tank"then local br=320;local bw=173.42;if bt>65000 then br=40000;bw=25740 elseif bt>6000 then br=5120;bw=4720 elseif bt>700 then br=640;bw=886.72 end;bq=bu-bw;if fuelTankHandlingRocket>0 then br=br+br*fuelTankHandlingRocket*0.1 end;br=CalculateFuelVolume(bq,br)aK[#aK+1]={ak[bm],core.getElementNameById(ak[bm]),br,bw,bq,bv}end;if type=="Space Fuel Tank"then local br=2400;local bw=182.67;if bt>10000 then br=76800;bw=5480 elseif bt>1300 then br=9600;bw=988.67 end;bq=bu-bw;if fuelTankHandlingSpace>0 then br=br+br*fuelTankHandlingSpace*0.2 end;br=CalculateFuelVolume(bq,br)aJ[#aJ+1]={ak[bm],core.getElementNameById(ak[bm]),br,bw,bq,bv}end end end end;function SetupChecks()if gyro~=nil then am=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then Y=true else Z=true end end;local bx=j()if door and(bx>0 or bx==0 and aj<10000)then for _,bn in pairs(door)do bn.toggle()end end;if switch then for _,bn in pairs(switch)do bn.toggle()end end;if forcefield and(bx>0 or bx==0 and aj<10000)then for _,bn in pairs(forcefield)do bn.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if F then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local by=AboveGroundLevel()if by~=-1 or not ai and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not F then GearExtended=true end else BrakeIsOn=false end;if bd~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bd)if bd==0 and not F then GearExtended=true;BrakeIsOn=true end else bd=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ai and by~=-1 then b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ai end;function ConvertResolutionX(bn)if ResolutionX==1920 then return bn else return round(ResolutionX*bn/1920,0)end end;function ConvertResolutionY(bn)if ResolutionY==1080 then return bn else return round(ResolutionY*bn/1080,0)end end;function RefreshLastMaxBrake(bz,bA)if bz==nil then bz=core.g()end;bz=round(bz,5)local bB=j()if bA~=nil and bA or(aH==nil or aH~=bz)then local ba=core.getVelocity()local bC=vec3(ba):len()local bD=f(unit.getData()).maxBrake;if bD~=nil and bD>0 and ai then bD=bD/utils.clamp(bC/100,0.1,1)bD=bD/bB;if bB>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bD)/2 else LastMaxBrakeInAtmo=bD end end end;if bD~=nil and bD>0 then LastMaxBrake=bD end;aH=bz end end;function MakeButton(bE,bF,bG,bH,bI,bJ,bK,bL,bM)local bN={enableName=bE,disableName=bF,width=bG,height=bH,x=bI,y=bJ,toggleVar=bK,toggleFunction=bL,drawCondition=bM,hovered=false}table.insert(av,bN)return bN end;function UpdateAtlasLocationsList()AtlasOrdered={}for bm,bn in pairs(aX[0])do table.insert(AtlasOrdered,{name=bn.name,index=bm})end;local function bO(bP,bQ)return bP.name<bQ.name end;table.sort(AtlasOrdered,bO)end;function AddLocationsToAtlas()for bm,bn in pairs(SavedLocations)do table.insert(aX[0],bn)end;UpdateAtlasLocationsList()end;function float_eq(bR,bS)if bR==0 then return math.abs(bS)<1e-09 end;if bS==0 then return math.abs(bR)<1e-09 end;return math.abs(bR-bS)<math.max(math.abs(bR),math.abs(bS))*epsilon end;function zeroConvertToMapPosition(bT,bU)local bV=vec3(bU)if bT.bodyId==0 then return setmetatable({latitude=bV.x,longitude=bV.y,altitude=bV.z,bodyId=0,systemId=bT.planetarySystemId},MapPosition)end;local bW=bV-bT.center;local a8=bW:len()local bX=a8-bT.radius;local bY=0;local bZ=0;if not float_eq(a8,0)then local b_=math.atan(bW.y,bW.x)bZ=b_>=0 and b_ or 2*math.pi+b_;bY=math.pi/2-math.acos(bW.z/a8)end;return setmetatable({latitude=math.deg(bY),longitude=math.deg(bZ),altitude=bX,bodyId=bT.bodyId,systemId=bT.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(c0)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c1='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c2,c3,bY,bZ,bX=string.match(c0,c1)if c2=="0"and c3=="0"then return vec3(tonumber(bY),tonumber(bZ),tonumber(bX))end;bZ=math.rad(bZ)bY=math.rad(bY)local planet=aX[tonumber(c2)][tonumber(c3)]local c4=math.cos(bY)local c5=vec3(c4*math.cos(bZ),c4*math.sin(bZ),math.sin(bY))return planet.center+(planet.radius+bX)*c5 end;function AddNewLocationByWaypoint(c6,planet,c0)if dbHud_1 then local c7={}local position=zeroConvertToWorldCoordinates(c0)if planet.name=="Space"then c7={position=position,name=c6,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bx=false;if planet.hasAtmosphere then bx=true else bx=false end;c7={position=position,name=c6,atmosphere=bx,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=c7;table.insert(aX[0],c7)UpdateAtlasLocationsList()else P="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local c8=planet.name..". "..#SavedLocations;if radar_1 then local c9,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if c9~=nil and c9~=""then c8=c8 .." "..radar_1.getConstructName(c9)end end;local c7={}local bx=false;if planet.hasAtmosphere then bx=true end;c7={position=position,name=c8,atmosphere=bx,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=c7;table.insert(aX[0],c7)UpdateAtlasLocationsList()P="Location saved as "..c8 else P="Databank must be installed to save locations"end end;function UpdatePosition(ca)local cb=-1;local c7;for bm,bn in pairs(SavedLocations)do if bn.name and bn.name==CustomTarget.name then cb=bm;break end end;if cb~=-1 then local cc;if ca~=nil then c7={position=SavedLocations[cb].position,name=ca,atmosphere=SavedLocations[cb].atmosphere,planetname=SavedLocations[cb].planetname,gravity=SavedLocations[cb].gravity}else c7={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cb].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cb]=c7;cb=-1;for bm,bn in pairs(aX[0])do if bn.name and bn.name==CustomTarget.name then cb=bm end end;if cb>-1 then aX[0][cb]=c7 end;UpdateAtlasLocationsList()P=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else P="Name Not Found"end end;function ClearCurrentPosition()local cb=-1;for bm,bn in pairs(aX[0])do if bn.name and bn.name==CustomTarget.name then cb=bm end end;if cb>-1 then table.remove(aX[0],cb)end;cb=-1;for bm,bn in pairs(SavedLocations)do if bn.name and bn.name==CustomTarget.name then P=bn.name.." saved location cleared"cb=bm;break end end;if cb~=-1 then table.remove(SavedLocations,cb)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cd)cd[#cd+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ab==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ab==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ab=0 end end;function ToggleWidgets()if au then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;au=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;au=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(ce,cf,bI,bJ,bG,bH)if ce>bI and ce<bI+bG and cf>bJ and cf<bJ+bH then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aj+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local cg=vec3(core.getConstructWorldOrientationForward())local ch=vec3(core.getConstructWorldOrientationRight())local ci=vec3(core.getWorldVertical())local cj=getPitch(ci,cg,ch)LockPitch=cj;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bp=system.getTime()if bp-bj<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bj=-1;if AltitudeHold then return end end else bj=bp end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;N=false;BrakeLanding=false;Reentry=false;b8=true;LockPitch=nil;if hoverDetectGround()==-1 or not ai or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bj>-1 then HoldAltitude=aj end;if not ad and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bj>-1 then HoldAltitude=aj+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ad then HoldAltitude=100000 end else b8=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then N=not N;if N then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else P="Follow Mode only works with Remote controller"N=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ad then UpdateAutopilotTarget()local ck=zeroConvertToMapPosition(a0,AutopilotTargetCoords)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aj>100000 or aj==0 then Autopilot=true else ac=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;N=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;z=false;LockPitch=nil;WaypointSet=false else ad=true;ToggleAltitudeHold()end else ad=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;z=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aj;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b8=autoRollPreference;ac=false;ae=false end end;function CheckDamage(cd)local cl=0;at=""local cm=aL;local cn=0;local co=0;local cp=0;local cq=0;local cr=""for bm in pairs(ak)do local bt=0;local cs=0;cs=h(ak[bm])bt=k(ak[bm])cn=cn+bt;if bt<cs then if bt==0 then cp=cp+1 else co=co+1 end;if aM and#aq==0 then position=vec3(core.getElementPositionById(ak[bm]))local bI=position.x-aV;local bJ=position.y-aV;local ct=position.z-aV;table.insert(aq,core.spawnArrowSticker(bI,bJ,ct+1,"down"))table.insert(aq,core.spawnArrowSticker(bI,bJ,ct+1,"down"))core.rotateSticker(aq[2],0,0,90)table.insert(aq,core.spawnArrowSticker(bI+1,bJ,ct,"north"))table.insert(aq,core.spawnArrowSticker(bI+1,bJ,ct,"north"))core.rotateSticker(aq[4],90,90,0)table.insert(aq,core.spawnArrowSticker(bI-1,bJ,ct,"south"))table.insert(aq,core.spawnArrowSticker(bI-1,bJ,ct,"south"))core.rotateSticker(aq[6],90,-90,0)table.insert(aq,core.spawnArrowSticker(bI,bJ-1,ct,"east"))table.insert(aq,core.spawnArrowSticker(bI,bJ-1,ct,"east"))core.rotateSticker(aq[8],90,0,90)table.insert(aq,core.spawnArrowSticker(bI,bJ+1,ct,"west"))table.insert(aq,core.spawnArrowSticker(bI,bJ+1,ct,"west"))core.rotateSticker(aq[10],-90,0,90)table.insert(aq,ak[bm])end elseif aM and#aq>0 and aq[11]==ak[bm]then for cu in pairs(aq)do core.deleteSticker(aq[cu])end;aq={}end end;cl=d(cn/cm*100)if cl<100 then cd[#cd+1]=[[<g class="pbright txt">]]cq=d(cl*2.55)cr=e("rgb(%d,%d,%d)",255-cq,cq,0)if cl<100 then cd[#cd+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cr,cl)if cp>0 then cd[#cd+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cr,cp,co)elseif co>0 then cd[#cd+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cr,co)end end;cd[#cd+1]=[[<\g>]]end end;function DrawCursorLine(cd)local cv=d(utils.clamp(a8/(ay/4)*255,0,255))cd[#cd+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a5,a6,d(PrimaryR+0.5)+cv,d(PrimaryG+0.5)-cv,d(PrimaryB+0.5)-cv)end;function getPitch(cw,cx,bQ)local cy=cw:cross(bQ):normalize_inplace()local cj=math.acos(utils.clamp(cy:dot(-cx),-1,1))*constants.rad2deg;if cy:cross(-cx):dot(bQ)<0 then cj=-cj end;return cj end;local cz=math.atan;local function cA(cB,cC,cD)cC=cC:project_on_plane(cB)cD=cD:project_on_plane(cB)return cz(cC:cross(cD):dot(cB),cC:dot(cD))end;function clearAll()if ag then ag=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;N=false;z=false;ac=false;ad=false;C=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;am=false;LockPitch=nil else ag=true end end;function wipeSaveVariables()if not dbHud_1 then P="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a7=5 else if aF then for bm,bn in pairs(a)do dbHud_1.setStringValue(bn,g(nil))end;for bm,bn in pairs(b)do if bn~="SavedLocations"then dbHud_1.setStringValue(bn,g(nil))end end;P="Databank wiped. New variables will save after re-enter seat and exit"a7=5;aF=false;aE=false;a3=true else P="Press ALT-7 again to confirm wipe of ALL data"aF=true end end end;function CheckButtons()for _,bn in pairs(av)do if bn.hovered then if not bn.drawCondition or bn.drawCondition()then bn.toggleFunction()end;bn.hovered=false end end end;function SetButtonContains()local bI=a5+ay/2;local bJ=a6+az/2;for _,bn in pairs(av)do bn.hovered=Contains(bI,bJ,bn.x,bn.y,bn.width,bn.height)end end;function DrawButton(cd,cE,hover,bI,bJ,cF,cG,cH,cI,cJ,cK)if type(cJ)=="function"then cJ=cJ()end;if type(cK)=="function"then cK=cK()end;cd[#cd+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bI,bJ,cF,cG)if cE then cd[#cd+1]=e("%s'",cH)else cd[#cd+1]=cI end;if hover then cd[#cd+1]=" style='stroke:white; stroke-width:2'"else cd[#cd+1]=" style='stroke:black; stroke-width:1'"end;cd[#cd+1]="></rect>"cd[#cd+1]=e("<text x='%f' y='%f' font-size='24' fill='",bI+cF/2,bJ+cG/2+5)if cE then cd[#cd+1]="black"else cd[#cd+1]="white"end;cd[#cd+1]="' text-anchor='middle' font-family='Montserrat'>"if cE then cd[#cd+1]=e("%s</text>",cJ)else cd[#cd+1]=e("%s</text>",cK)end end;function DrawButtons(cd)local cL="rgb(50,50,50)'"local cM="rgb(210,200,200)"local cN=DrawButton;for _,bn in pairs(av)do local bF=bn.disableName;local bE=bn.enableName;if type(bF)=="function"then bF=bF()end;if type(bE)=="function"then bE=bE()end;if not bn.drawCondition or bn.drawCondition()then cN(cd,bn.toggleVar(),bn.hovered,bn.x,bn.y,bn.width,bn.height,cM,cL,bF,bE)end end end;function DrawTank(cd,aU,bI,cO,cP,cQ,cR,cS)local cT=1;local cU=2;local cV=3;local cW=4;local cX=5;local cY=6;local cZ=""local c_=0;local d0=fuelY;local d1=fuelY+10;if o()==1 and not RemoteHud then d0=d0-50;d1=d1-50 end;cd[#cd+1]=[[<g class="pdim txtfuel">]]if cP=="ATMO"then cZ="atmofueltank"elseif cP=="SPACE"then cZ="spacefueltank"else cZ="rocketfueltank"end;c_=_G[cZ.."_size"]if#cQ>0 then for i=1,#cQ do local c8=string.sub(cQ[i][cU],1,12)local d2=0;for cu=1,c_ do if cQ[i][cU]==f(unit[cZ.."_"..cu].getData()).name then d2=cu;break end end;if aU or cR[i]==nil or cS[i]==nil then local d3=0;local d4=0;local d5=0;local d6=0;local bv=system.getTime()if d2~=0 then cS[i]=f(unit[cZ.."_"..d2].getData()).percentage;cR[i]=f(unit[cZ.."_"..d2].getData()).timeLeft;if cR[i]=="n/a"then cR[i]=0 end else d5=m(cQ[i][cT])-cQ[i][cW]d3=cQ[i][cV]cS[i]=d(0.5+d5*100/d3)d4=cQ[i][cX]d6=cQ[i][cY]if d4<=d5 then cR[i]=0 else cR[i]=d(0.5+d5/((d4-d5)/(bv-d6)))end;cQ[i][cX]=d5;cQ[i][cY]=bv end end;if c8==cO then c8=e("%s %d",cP,i)end;if d2==0 then c8=c8 .." *"end;local d7;if cR[i]==0 then d7="n/a"else d7=FormatTimeString(cR[i])end;if cS[i]~=nil then local cq=d(cS[i]*2.55)local cr=e("rgb(%d,%d,%d)",255-cq,cq,0)local d8=""if d7~="n/a"and cR[i]<120 or cS[i]<5 then if aU then d8=[[class="red"]]end end;cd[#cd+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bI,d0,d8,c8,bI,d1,cr,cS[i],d7)d0=d0+30;d1=d1+30 end end end;cd[#cd+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(ba)ba=vec3(ba)local cj=-math.deg(math.atan(ba.y,ba.z))+180;cj=cj-90;if cj<0 then cj=360+cj end;if cj>180 then cj=-180+cj-180 end;return-cj end;function getRelativeYaw(ba)ba=vec3(ba)local d9=math.deg(math.atan(ba.y,ba.x))-90;if d9<-180 then d9=360+d9 end;return d9 end;function AlignToWorldVector(da,db,dc)if not ai or not bg or af~=-1 or bb<B then local dd=dc;if dd==nil then dd=DampingMultiplier end;if db==nil then db=ax end;da=vec3(da):normalize()local de=vec3(core.getConstructWorldOrientationForward())-da;local df=-getMagnitudeInDirection(de,core.getConstructWorldOrientationRight())*aw;local dg=-getMagnitudeInDirection(de,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=df/2 end;if as==0 then as=dg/2 end;if math.abs(df)<0.1 then I=I-df*2 else I=I-(df+(df-ar)*dd)end;if math.abs(dg)<0.1 then H=H+dg*2 else H=H+dg+(dg-as)*dd end;ar=df;as=dg;if math.abs(df)<db and math.abs(dg)<db then return true end;return false elseif bg and af==-1 then da=vec3(core.getWorldVelocity())local dd=dc;if dd==nil then dd=DampingMultiplier end;if db==nil then db=ax end;da=vec3(da):normalize()local de=vec3(core.getConstructWorldOrientationForward())-da;local df=-getMagnitudeInDirection(de,core.getConstructWorldOrientationRight())*aw;local dg=-getMagnitudeInDirection(de,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=df/2 end;if as==0 then as=dg/2 end;if math.abs(df)<0.1 then I=I-df*5 else I=I-(df+(df-ar)*dd)end;if math.abs(dg)<0.1 then H=H+dg*5 else H=H+dg+(dg-as)*dd end;ar=df;as=dg;if math.abs(df)<db and math.abs(dg)<db then return true end;return false end end;function getAPEnableName()local c8=AutopilotTargetName;if c8==nil then local dh,di=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())c8=CustomTarget.name.." "..dh..di end;if c8==nil then c8="None"end;return"Engage Autopilot: "..c8 end;function getAPDisableName()local c8=AutopilotTargetName;if c8==nil then c8=CustomTarget.name end;if c8==nil then c8="None"end;return"Disable Autopilot: "..c8 end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then P="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then P="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a7=5 elseif not C then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then P="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;P="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dj,dk=getDistanceDisplayString(HoldAltitude)P="Beginning Re-entry.  Target speed: "..bk.." Target Altitude: "..dj..dk end;AutoTakeoff=false end;function SetupButtons()local dl=50;local dm=260;local dn=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dm,dl,ay/2-dm/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then P="Brakes in Toggle Mode"else P="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dm,dl,ay/2-dm/2-50-dn.width,az/2-dl+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dm,dl,ay/2-dm/2+dn.width+50,az/2-dl+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dp=MakeButton(getAPEnableName,getAPDisableName,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dp.height,dp.x+dp.width+30,dp.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dp.height,dp.x+dp.width+30,dp.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dp.height,dp.x-200-30,dp.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dl=60;dm=300;local bI=10;local bJ=az/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dm,dl,bI,bJ,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dm,dl,bI+dm+20,bJ,function()return AltitudeHold end,ToggleAltitudeHold)bJ=bJ+dl+20;MakeButton("Engage Autoland","Disable Autoland",dm,dl,bI,bJ,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dm,dl,bI+dm+20,bJ,function()return AutoTakeoff end,ToggleAutoTakeoff)bJ=bJ+dl+20;MakeButton("Show Orbit Display","Hide Orbit Display",dm,dl,bI,bJ,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then P="Orbit Display Enabled"else P="Orbit Display Disabled"end end)bJ=bJ+dl+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dm,dl,bI,bJ,function()return Reentry end,function()ac=true;ProgradeToggle()end,function()return aj>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dm,dl,bI+dm+20,bJ,function()return Reentry end,BeginReentry,function()return aj>ReentryAltitude end)bJ=bJ+dl+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dm,dl,bI,bJ,function()return N end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dm,dl,bI+dm+20,bJ,function()return aM end,function()aM=not aM;if aM then P="Repair Arrows Enabled"else P="Repair Arrows Diabled"end end,function()return o()==1 end)bJ=bJ+dl+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dm,dl,bI,bJ,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bJ=bJ+dl+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dm*2,dl,bI,bJ,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dq=Nav.axisCommandManager:getAxisCommandType(0)local dr="TRAVEL"if dq==1 then dr="CRUISE"end;if Autopilot then dr="AUTOPILOT"end;return dr end;function UpdateHud(cd)local bX=aj;local ba=core.getVelocity()local bC=vec3(ba):len()local ci=vec3(core.getWorldVertical())local cg=vec3(core.getConstructWorldOrientationForward())local ch=vec3(core.getConstructWorldOrientationRight())local ds=vec3(core.getConstructWorldOrientationUp())local dt=getRoll(ci,cg,ch)local du=dt/180*math.pi;local dv=math.cos(du)local dw=math.sin(du)local cj=getPitch(ci,cg,ch*dv+ds*dw)local dx=dt;local dy=cj;local dz=j()local dA=d(unit.getThrottle())local dB=bC*3.6;local dC=unit.getAxisCommandValue(0)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dC=s;dA=s*100 end;local dr=GetFlightStyle()local dD="ROLL"local dE=unit.getClosestPlanetInfluence()>0;if dA==nil then dA=0 end;if not dE then if bC>5 then cj=getRelativePitch(ba)dt=getRelativeYaw(ba)else cj=0;dt=0 end;dD="YAW"end;cd[#cd+1]=aa;cd[#cd+1]=at;cd[#cd+1]=a9;if aW%aP==0 then aU=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cd,aU,fuelX,"Atmospheric ","ATMO",aI,aS,aT)DrawTank(cd,aU,fuelX+100,"Space fuel t","SPACE",aJ,aQ,aR)DrawTank(cd,aU,fuelX+200,"Rocket fuel ","ROCKET",aK,aN,aO)end;if aU then aU=false;aW=0 end;aW=aW+1;DrawVerticalSpeed(cd,bX)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dE then DrawRollLines(cd,centerX,centerY,dx,dD,dE)DrawArtificialHorizon(cd,dy,dx,centerX,centerY,dE,d(getRelativeYaw(ba)),bC)else DrawRollLines(cd,centerX,centerY,dt,dD,dE)DrawArtificialHorizon(cd,cj,dt,centerX,centerY,dE,d(dt),bC)end;DrawAltitudeDisplay(cd,bX,dE)DrawPrograde(cd,ba,bC,centerX,centerY)end end;DrawThrottle(cd,dr,dA,dC)DrawSpeed(cd,dB)DrawWarnings(cd)DisplayOrbitScreen(cd)if screen_2 then local c0=vec3(core.getConstructWorldPos())local bI=960+c0.x/aZ;local bJ=450+c0.y/a_;screen_2.moveContent(b0,(bI-80)/19.2,(bJ-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cd)local dF=ao;local dG=ap;local dH=ao;local dI=ap;if IsInFreeLook()and not brightHud then dF=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dG=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;cd[#cd+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dF,dF,dH,dH,dG,dG,dI,dI,ResolutionX,ResolutionY)end;function HUDEpilogue(cd)cd[#cd+1]="</svg>"end;function DrawSpeed(cd,dB)local dJ=throtPosY-10;local dK=throtPosX+10;cd[#cd+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dJ=75 end;cd[#cd+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dK,dJ,d(dB))end;function DrawOdometer(cd,a1,TotalDistanceTravelled,dr,a2,dz)local dL=ConvertResolutionX(1240)local dM=ConvertResolutionY(55)local dN=dM+10;local dz=j()local bz=core.g()local dO=0;local dP=0;local dQ=0;RefreshLastMaxBrake(bz)if ai then dQ=LastMaxBrakeInAtmo else dQ=LastMaxBrake end;maxThrust=Nav:maxForceForward()aG=n()if not ShowOdometer then return end;local dR=vec3(core.getWorldAcceleration()):len()/9.80665;if bz>0.1 then dP=aG*bz;dO=maxThrust/bz end;cd[#cd+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dL=ConvertResolutionX(1120)dM=ConvertResolutionY(55)dN=dM+10 elseif ai then local dS=ConvertResolutionX(770)cd[#cd+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dS,dM,dS,dN,dz)end;cd[#cd+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dL,dM,dL,dN,bz/9.80665,dL,dM+20,dL,dN+20,dR)cd[#cd+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cd[#cd+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a1,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a2),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aG/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dQ/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dr)if bz>0.1 then cd[#cd+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dO/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dP/1000)else cd[#cd+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cd[#cd+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dr)end;cd[#cd+1]="</g>"end;function DrawThrottle(cd,dr,dA,dC)dA=math.floor(dA+0.5)local d0=throtPosY+10;local d1=throtPosY+20;if o()==1 and not RemoteHud then d0=55;d1=65 end;local dT="CRUISE"local unit="km/h"local dU=dC;if dr=="TRAVEL"or dr=="AUTOPILOT"then dT="THROT"unit="%"dU=dA;local dV="dim"if dA<0 then dV="red"end;cd[#cd+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dV,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dA),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cd[#cd+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,d0,dT,throtPosX+10,d1,dU,unit)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and u then dA=math.floor(v*100+0.5)local dV="red"if dA<0 then dV="red"end;cd[#cd+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dV,1-math.abs(dA),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cd[#cd+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,d0+40,"LIMIT",throtPosX+10,d1+40,dA,"%")end;if ai and AtmoSpeedAssist or Reentry then cd[#cd+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d0-40,"LIMIT: ",bk.." km/h")elseif not ai and Autopilot then cd[#cd+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,d0-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cd,bX)if bX<200000 and not ai or bX and ai then local dW=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dX=0;if math.abs(dW)>1 then dX=45*math.log(math.abs(dW),10)if dW<0 then dX=-dX end end;cd[#cd+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dW),d(dX))end end;function getHeading(cx)local dY=-vec3(core.getWorldVertical())cx=cx-cx:project_on(dY)local dZ=vec3(0,0,1)dZ=dZ-dZ:project_on(dY)local d_=dZ:cross(dY)local dX=dZ:angle_between(cx)*constants.rad2deg;if cx:dot(d_)<0 then dX=360-dX end;return dX end;function DrawRollLines(cd,centerX,centerY,dx,dD,dE)local e0=circleRad;local e1=20;e1=d(e1)local e2=d(dx)if dE then for i=-45,45,5 do local e3=i;cd[#cd+1]=e([[<g transform="rotate(%f,%d,%d)">]],e3,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cd[#cd+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e0+e1-len,centerX,centerY+e0+e1)end;cd[#cd+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+e0+e1-35,dD,centerX,centerY+e0+e1-25,e2)cd[#cd+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dx,centerX,centerY)cd[#cd+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e0+e1-20,centerX+5,centerY+e0+e1-20,centerX,centerY+e0+e1-15)cd[#cd+1]="</g>"end;local d9=e2;if dE then d9=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local e4=20;local e5=d(d9)local e6=0;local e7=centerY+e0+e1+20;local e8=centerX;if dD~="YAW"then e7=ConvertResolutionY(130)e8=ConvertResolutionX(960)end;local e9=[[<path class="txttick line" d="]]for i=d(e5-(e4+10)-e5%5+0.5),d(e5+e4+10+e5%5+0.5),5 do local bI=e8+-i*5+d9*5;if i%10==0 then e6=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cd[#cd+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bI+5,e7-12,p)elseif i%5==0 then e6=5 end;if e6==10 then e9=e([[%s M %f %f v %d]],e9,bI,e7-5,e6)else e9=e([[%s M %f %f v %d]],e9,bI,e7-2.5,e6)end end;cd[#cd+1]=e9 ..[["/>]]cd[#cd+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e8-5,e7+10,e8+5,e7+10,e8,e7+5)if dE then dD="HDG"end;cd[#cd+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],e8,e7+25,e5,e8,e7+35,dD)end;function DrawArtificialHorizon(cd,dy,dx,centerX,centerY,dE,ea,bC)local e0=circleRad;local eb=d(e0*3/5)if e0>0 then local ec=d(dy)local len=0;local e9=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dx,centerX,centerY)if not ai then e9=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cd[#cd+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e0-1,centerX,centerY)cd[#cd+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ec-30-ec%5+0.5),d(ec+30+ec%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bJ=centerY+-i*5+dy*5;if len==30 then e9=e([[%s M %d %f h %d]],e9,centerX-eb-len,bJ,len)if ai then cd[#cd+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dx,centerX,centerY,centerX-eb+10,bJ,i)cd[#cd+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dx,centerX,centerY,centerX+eb-10,bJ,i)if i==0 or i==180 or i==-180 then cd[#cd+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dx,centerX,centerY,centerX-eb+20,bJ,eb*2-40)end else cd[#cd+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eb+10,bJ,i)cd[#cd+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eb-10,bJ,i)end;e9=e([[%s M %d %f h %d]],e9,centerX+eb,bJ,len)else e9=e([[%s M %d %f h %d]],e9,centerX-eb-len,bJ,len)e9=e([[%s M %d %f h %d]],e9,centerX+eb,bJ,len)end end;cd[#cd+1]=e9 ..[["/>]]local ed="PITCH"if not dE then ed="REL PITCH"end;if dy>90 and not ai then dy=90-(dy-90)elseif dy<-90 and not ai then dy=-90-(dy+90)end;if e0>200 then if ai then if bC>B then cd[#cd+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ea)end;cd[#cd+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dx,centerX,centerY)else cd[#cd+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cd[#cd+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eb+25,centerY-5,centerX-eb+20,centerY,centerX-eb+25,centerY+5,centerX-eb+50,centerY+4,ec)cd[#cd+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eb-25,centerY-5,centerX+eb-20,centerY,centerX+eb-25,centerY+5,centerX+eb-30,centerY+4,ec)cd[#cd+1]="</g>"end;local ee=d(e0/3)cd[#cd+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ee,centerY,e0-ee)if not ai and dE then cd[#cd+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dx,centerX,centerY,centerX-eb+10,centerY,eb*2-20)end;cd[#cd+1]="</g>"if e0<200 then if ai and bC>B then cd[#cd+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e0,ed,centerX,centerY-e0+10,ec,centerX,centerY-15,"Yaw",centerX,centerY+20,ea)else cd[#cd+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-e0,ed,centerX,centerY-e0+15,ec)end end end end;function DrawAltitudeDisplay(cd,bX,dE)local ef=altMeterX;local eg=altMeterY;local eh=78;local ei=19;local ej=AboveGroundLevel()if ej~=-1 then table.insert(cd,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ef+eh,eg+ei+20,ej))end;if dE and(bX<200000 and not ai or bX and ai)then table.insert(cd,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ef-1,eg-4,eh+2,ei+6,ef+1,eg-1,eh-4,ei))local cb=0;local ek=1;local el=0;local em=bX<0;local en=9;if em then en=0 end;local bX=math.abs(bX)while cb<6 do local eo=11;local ep=16;local eq=9;local er=14;local d8="altsm"if cb>2 then ep=ep+3;eo=eo+2;er=er+2;eq=eq-6;d8="altbig"end;if em then d8=d8 .." red"end;local es=bX/ek%10;local et=d(es)local eu=d((et+1)%10)local ev=el;if cb==0 then ev=es-et;if em then ev=1-ev end end;if em and(cb==0 or el~=0)then local ew=eu;eu=et;et=ew end;local ex=ep*(ev-1)local ey=ex+ep;local bI=ef+eq+(6-cb)*eo;local bJ=eg+er;table.insert(cd,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],d8,bI,bJ+ex,eu,bI,bJ+ey,et))cb=cb+1;ek=ek*10;if et==en then el=ev else el=0 end end;table.insert(cd,[[</g></g>]])end end;function DrawPrograde(cd,ba,bC,centerX,centerY)if bC>5 and not ai or bC>B then local e0=circleRad;local ez=20;local eA=20;local eB=vec3(ba)local eC=getRelativePitch(eB)local eD=getRelativeYaw(eB)local eE=14;local eF=eE/2;local eG=-eD/eA*e0;local eH=eC/ez*e0;local bI=centerX+eG;local bJ=centerY+eH;local a8=math.sqrt(eG^2+eH^2)local eI=[[<circle
                cx="]]..bI..[["
                cy="]]..bJ..[["
                r="]]..eF/eE..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bI..[["
                cy="]]..bJ..[["
                r="]]..eF..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bI-eE..[[,]]..bJ..[[ h ]]..eF..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bI+eF..[[,]]..bJ..[[ h ]]..eF..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bI..[[,]]..bJ-eE..[[ v ]]..eF..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a8<e0 then cd[#cd+1]=eI else local dX=math.atan(eH,eG)local eJ=4;local eK=centerX+e0*math.cos(dX)local eL=centerY+e0*math.sin(dX)cd[#cd+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dX*180/math.pi,eK,eL,eK-eJ,eL-eJ/2,eJ*2,eJ,eK+eJ,eL-eJ,eJ,eJ,-eJ,eJ)end;if not ai then eC=getRelativePitch(-eB)eD=getRelativeYaw(-eB)eG=-eD/eA*e0;eH=eC/ez*e0;bI=centerX+eG;bJ=centerY+eH;a8=math.sqrt(eG^2+eH^2)if a8<e0 then local eM=[[<circle
                        cx="]]..bI..[["
                        cy="]]..bJ..[["
                        r="]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bI..[[,]]..bJ-eE..[[ v ]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bI..[[,]]..bJ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bI..[[,]]..bJ..[[)" />
                     <path
                        d="M ]]..bI-eF..[[,]]..bJ..[[ h ]]..eE..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bI..[[,]]..bJ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bI..[[,]]..bJ..[[)"/>]]cd[#cd+1]=eM end end end end;function DrawWarnings(cd)cd[#cd+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cd[#cd+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cd[#cd+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cd[#cd+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cd[#cd+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eN=ConvertResolutionX(960)local eO=ConvertResolutionY(860)local eP=ConvertResolutionY(880)local eQ=ConvertResolutionY(900)local eR=ConvertResolutionY(960)local eS=ConvertResolutionY(200)local eT=ConvertResolutionY(150)local eU=ConvertResolutionY(960)if o()==1 and not RemoteHud then eO=ConvertResolutionY(135)eP=ConvertResolutionY(155)eQ=ConvertResolutionY(175)eS=ConvertResolutionY(115)eT=ConvertResolutionY(95)end;if BrakeIsOn then cd[#cd+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eN,eO)elseif t>0 then cd[#cd+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eN,eO,t)end;if ai and bg and hoverDetectGround()==-1 then cd[#cd+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eN,eS+50)end;if am then cd[#cd+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eN,eU)end;if GearExtended then if F then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eN,eP)else cd[#cd+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eN,eP)end;local dh,di=getDistanceDisplayString(Nav:getTargetGroundAltitude())cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eN,eQ,dh..di)end;if T then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eN,eR+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aj-antigrav.getBaseAltitude())<501 then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eN,eS+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cd[#cd+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eN,eS+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eN,eS+20,AutopilotStatus)elseif LockPitch~=nil then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eN,eS+20,d(LockPitch))elseif N then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eN,eS+20)elseif Reentry then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eN,eS+20)end;local eV,eW,eX=b2:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),ba:normalize(),function(eY)if eY.noAtmosphericDensityAltitude>0 then return eY.radius+eY.noAtmosphericDensityAltitude else return eY.radius+eY.surfaceMaxAltitude*1.5 end end)local eZ=eW;if eX~=nil and eW~=nil then eZ=math.min(eX,eW)end;if AltitudeHold then if AutoTakeoff then local dh,di=getDistanceDisplayString(HoldAltitude)cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eN,eS,dh..di)if BrakeIsOn then cd[#cd+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eN,eS+50)end else local dh,di=getDistanceDisplayString2(HoldAltitude)cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eN,eS,dh..di)end end;if BrakeLanding then if StrongBrakes then cd[#cd+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eN,eS)else cd[#cd+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eN,eS)end end;if ProgradeIsOn then cd[#cd+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eN,eS)end;if RetrogradeIsOn then cd[#cd+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eN,eS)end;if TurnBurn then cd[#cd+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eN,eT)elseif eZ~=nil and j()==0 then local dh,di=getDistanceDisplayString(eZ)local travelTime=b3.computeTravelTime(bb,0,eZ)local e_="Collision"if eV.noAtmosphericDensityAltitude>0 then e_="Atmosphere"end;cd[#cd+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eN,eT,eV.name,e_,FormatTimeString(travelTime),dh..di)end;if VectorToTarget then cd[#cd+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eN,eS+30,VectorStatus)end;cd[#cd+1]="</g>"end;function DisplayOrbitScreen(cd)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local f0=OrbitMapX;local f1=OrbitMapY;local f2=OrbitMapSize;local f3=4;f1=f1+f3;local f4=15;local bI=f0+f2+f0/2+f3;local bJ=f1+f2/2+5+f3;local f5,f6,f7,f8;f5=f2/4;f8=0;cd[#cd+1]=[[<g class="pbright txtorb txtmid">]]cd[#cd+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',f2+f0*2,f2+f1,f3,f3)if orbit.periapsis~=nil and orbit.apoapsis~=nil then f7=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(f5*2)f6=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/f7*(1-orbit.eccentricity)f8=f5-orbit.periapsis.altitude/f7-planet.radius/f7;local f9=""if orbit.periapsis.altitude<=0 then f9='redout'end;cd[#cd+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],f9,f0+f2/2+f8+f3,f1+f2/2+f3,f5,f6)cd[#cd+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',f0+f2/2+f3,f1+f2/2+f3,planet.radius/f7)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cd[#cd+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bI-35,bJ-5,f0+f2/2+f5+f8,bJ-5)cd[#cd+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bI,bJ)bJ=bJ+f4;local dh,di=getDistanceDisplayString(orbit.apoapsis.altitude)cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,dh..di)bJ=bJ+f4;cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,FormatTimeString(orbit.timeToApoapsis))bJ=bJ+f4;cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,getSpeedDisplayString(orbit.apoapsis.speed))end;bJ=f1+f2/2+5+f3;bI=f0-f0/2+10+f3;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cd[#cd+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bI+35,bJ-5,f0+f2/2-f5+f8,bJ-5)cd[#cd+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bI,bJ)bJ=bJ+f4;local dh,di=getDistanceDisplayString(orbit.periapsis.altitude)cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,dh..di)bJ=bJ+f4;cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,FormatTimeString(orbit.timeToPeriapsis))bJ=bJ+f4;cd[#cd+1]=e([[<text x="%f" y="%f">%s</text>]],bI,bJ,getSpeedDisplayString(orbit.periapsis.speed))end;cd[#cd+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],f0+f2/2+f3,20+f3,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fa=orbit.timeToApoapsis/orbit.period*2*math.pi;local fb=f5*math.cos(fa)local fc=f6*math.sin(fa)cd[#cd+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',f0+f2/2+fb+f8+f3,f1+f2/2+fc+f3)end;cd[#cd+1]=[[</g>]]end end;function getDistanceDisplayString(a8)local fd=a8>100000;local bo,di=""if fd then bo,di=round(a8/1000/200,1),"SU"elseif a8<1000 then bo,di=round(a8,1),"m"else bo,di=round(a8/1000,1),"Km"end;return bo,di end;function getDistanceDisplayString2(a8)local fd=a8>100000;local bo,di=""if fd then bo,di=round(a8/1000/200,2)," SU"elseif a8<1000 then bo,di=round(a8,2)," M"else bo,di=round(a8/1000,2)," KM"end;return bo,di end;function getSpeedDisplayString(bC)return d(round(bC*3.6,0)+0.5).." km/h"end;function FormatTimeString(fe)local ff=0;local fg=0;local fh=0;if fe<60 then fe=d(fe)elseif fe<3600 then ff=d(fe/60)fe=d(fe%60)elseif fe<86400 then fg=d(fe/3600)ff=d(fe%3600/60)else fh=d(fe/86400)fg=d(fe%86400/3600)end;if fh>0 then return fh.."d "..fg.."h "elseif fg>0 then return fg.."h "..ff.."m "elseif ff>0 then return ff.."m "..fe.."s"elseif fe>0 then return fe.."s"else return"0s"end end;function getMagnitudeInDirection(da,fi)da=vec3(da)fi=vec3(fi):normalize()local bo=da*fi;return bo.x+bo.y+bo.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a0=nil;CustomTarget=nil;return true end;local fj=AtlasOrdered[AutopilotTargetIndex].index;local fk=aX[0][fj]if fk.center then AutopilotTargetName=fk.name;a0=b2[0][fj]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fk;for _,bn in pairs(b2[0])do if bn.name==CustomTarget.planetname then a0=bn;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a0.center)else AutopilotTargetCoords=CustomTarget.position end;if a0.planetname~="Space"then if a0.hasAtmosphere then AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fj=AtlasOrdered[AutopilotTargetIndex].index;local fk=aX[0][fj]if fk.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fj=AtlasOrdered[AutopilotTargetIndex].index;local fk=aX[0][fj]if fk.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fl=LastMaxBrakeInAtmo/a0:getGravity(a0.center+vec3(0,0,1)*a0.radius):len()return fl end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a0.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local ba=core.getWorldVelocity()local bC=vec3(ba):len()local fm=unit.getThrottle()/100;if AtmoSpeedAssist then fm=s end;local fn,fo=b3.computeDistanceAndTime(vec3(ba):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fm,warmup,0)local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fp;if not TurnBurn and bC>0 then _,fp=GetAutopilotBrakeDistanceAndTime(bC)else _,fp=GetAutopilotTBBrakeDistanceAndTime(bC)end;local fq=0;local fr=0;if AutopilotCruising or not Autopilot and bC>5 then fr=b3.computeTravelTime(bC,0,AutopilotDistance)elseif U+fn<AutopilotDistance then fq=AutopilotDistance-(U+fn)fr=b3.computeTravelTime(8333.0556,0,fq)else local fs=(AutopilotDistance-U)/fn;fn=AutopilotDistance-U;fo=fo*fs end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fr elseif AutopilotBraking then return fp elseif AutopilotCruising then return fr+fp else return fo+V+fr end end;function GetAutopilotBrakeDistanceAndTime(bC)if not ai then RefreshLastMaxBrake()return b3.computeDistanceAndTime(bC,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b3.computeDistanceAndTime(bC,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bC)RefreshLastMaxBrake()return b3.computeDistanceAndTime(bC,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local ft=-1;local fu=-1;if vBooster then ft=vBooster.distance()end;if hover then fu=hover.distance()end;if ft~=-1 and fu~=-1 then if ft<fu then return ft else return fu end elseif ft~=-1 then return ft elseif fu~=-1 then return fu else return-1 end end;function AboveGroundLevel()local fv=-1;local fw=hoverDetectGround()if telemeter_1 then fv=telemeter_1.getDistance()end;if fw~=-1 and fv~=-1 then if fw<fv then return fw else return fv end elseif fw~=-1 then return fw else return fv end end;function tablelength(fx)local fy=0;for _ in pairs(fx)do fy=fy+1 end;return fy end;function BeginProfile(fz)ProfileTimeStart=system.getTime()end;function EndProfile(fz)local fA=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fA;ProfileCount=ProfileCount+1;if fA>ProfileTimeMax then ProfileTimeMax=fA end;if fA<ProfileTimeMin then ProfileTimeMin=fA end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fB=ProfileTimeSum;local fC=ProfileTimeSum/ProfileCount;local fD=ProfileTimeMin;local fE=ProfileTimeMax;local fF=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fB,fC,fD,fE,fF))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fG=radar_1.getEntries()local fH=radar_1.getData()local fI=ConvertResolutionX(1770)local fJ=ConvertResolutionY(330)if#fG>0 then local target=fH:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ab=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a9=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fI,fJ,#fG)local fK={}for bm,bn in pairs(fG)do if radar_1.hasMatchingTransponder(bn)==1 then table.insert(fK,bn)end end;if#fK>0 then local bJ=ConvertResolutionY(15)local bI=ConvertResolutionX(1370)a9=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a9,bI,bJ)for bm,bn in pairs(fK)do bJ=bJ+20;a9=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a9,bI,bJ,radar_1.getConstructName(bn))end end else local fL;fL=fH:find('worksInEnvironment":false')if fL then a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fI,fJ)else a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fI,fJ)end;if radarPanelID~=nil then ab=0;ToggleRadarPanel()end end end end;function DisplayMessage(cd,dh)if dh~="empty"then cd[#cd+1]=[[<text class="msg" x="50%%" y="310" >]]for fM in string.gmatch(dh,"([^\n]+)")do cd[#cd+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fM)end;cd[#cd+1]=[[</text>]]end;if a7~=0 then unit.setTimer("msgTick",a7)a7=0 end end;function updateDistance()local bv=system.getTime()local ba=vec3(core.getWorldVelocity())local dB=vec3(ba):len()local fN=bv-al;if dB>1.38889 then dB=dB/1000;local fO=dB*(bv-al)TotalDistanceTravelled=TotalDistanceTravelled+fO;a1=a1+fO end;a2=a2+fN;TotalFlightTime=TotalFlightTime+fN;al=bv end;function composeAxisAccelerationFromTargetSpeedV(fP,fQ)local fR=vec3()local fS=vec3()if fP==axisCommandId.longitudinal then fR=vec3(core.getConstructOrientationForward())fS=vec3(core.getConstructWorldOrientationForward())elseif fP==axisCommandId.vertical then fR=vec3(core.getConstructOrientationUp())fS=vec3(core.getConstructWorldOrientationUp())elseif fP==axisCommandId.lateral then fR=vec3(core.getConstructOrientationRight())fS=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fT=vec3(core.getWorldGravity())local fU=fT:dot(fS)local fV=vec3(core.getWorldAirFrictionAcceleration())local fW=fV:dot(fS)local fX=vec3(core.getVelocity())local fY=fX:dot(fR)local fZ=fQ*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(fZ-fY)local f_=targetSpeedPID2:get()local g0=(f_-fW-fU)*fS;return g0 end;function composeAxisAccelerationFromTargetSpeed(fP,fQ)local fR=vec3()local fS=vec3()if fP==axisCommandId.longitudinal then fR=vec3(core.getConstructOrientationForward())fS=vec3(core.getConstructWorldOrientationForward())elseif fP==axisCommandId.vertical then fR=vec3(core.getConstructOrientationUp())fS=vec3(core.getConstructWorldOrientationUp())elseif fP==axisCommandId.lateral then fR=vec3(core.getConstructOrientationRight())fS=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fT=vec3(core.getWorldGravity())local fU=fT:dot(fS)local fV=vec3(core.getWorldAirFrictionAcceleration())local fW=fV:dot(fS)local fX=vec3(core.getVelocity())local fY=fX:dot(fR)local fZ=fQ*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(fZ-fY)local f_=targetSpeedPID:get()local g0=(f_-fW-fU)*fS;return g0 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aX=Atlas()for bm,bn in pairs(aX[0])do if aA==nil or bn.center.x<aA then aA=bn.center.x end;if aB==nil or bn.center.x>aB then aB=bn.center.x end;if aC==nil or bn.center.y<aC then aC=bn.center.y end;if aD==nil or bn.center.y>aD then aD=bn.center.y end end;aY=""local g1=1.1*(aB-aA)/1920;local g2=1.4*(aD-aC)/1080;for bm,bn in pairs(aX[0])do local bI=960+bn.center.x/g1;local bJ=540+bn.center.y/g2;aY=aY..'<circle cx="'..bI..'" cy="'..bJ..'" r="'..bn.radius/g1*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bn.name,"Moon")and not string.match(bn.name,"Sanctuary")and not string.match(bn.name,"Space")then aY=aY.."<text x='"..bI.."' y='"..bJ+bn.radius/g1*30+20 .."' font-size='28' fill="..ao.." text-anchor='middle' font-family='Montserrat'>"..bn.name.."</text>"end end;local c0=vec3(core.getConstructWorldPos())local bI=960+c0.x/g1;local bJ=540+c0.y/g2;aY=aY..'<circle cx="'..bI..'" cy="'..bJ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='"..bI.."' y='"..bJ-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aY=aY..[[</svg>]]aZ=g1;a_=g2;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aY)local c0=vec3(core.getConstructWorldPos())local bI=960+c0.x/g1;local bJ=540+c0.y/g2;aY='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='80' y='105' font-size='18' fill="..ao.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b0=screen_2.addContent((bI-80)/19.20,(bJ-80)/10.80,aY)end end;function PlanetRef()local function g3(g4)return type(g4)=='number'end;local function g5(g4)return type(tonumber(g4))=='number'end;local function g6(g7)return type(g7)=='table'end;local function g8(g9)return type(g9)=='string'end;local function ga(bn)return g6(bn)and g3(bn.x and bn.y and bn.z)end;local function gb(gc)return g6(gc)and g3(gc.latitude and gc.longitude and gc.altitude and gc.bodyId and gc.systemId)end;local gd=math.pi/180;local ge=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c1='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gf=utils.clamp;local function float_eq(bR,bS)if bR==0 then return math.abs(bS)<1e-09 end;if bS==0 then return math.abs(bR)<1e-09 end;return math.abs(bR-bS)<math.max(math.abs(bR),math.abs(bS))*epsilon end;local function gg(g4)local bo=string.gsub(string.reverse(e('%.4f',g4)),'^0*%.?','')return bo==''and'0'or string.reverse(bo)end;local function gh(gi)if ga(gi)then return e('{x=%.3f,y=%.3f,z=%.3f}',gi.x,gi.y,gi.z)end;if g6(gi)and not getmetatable(gi)then local gj={}local gk=next(gi)if type(gk)=='nil'or gk==1 then gj=gi else for bm,bn in pairs(gi)do local dU=gh(bn)if type(bm)=='number'then table.insert(gj,e('[%s]=%s',bm,dU))else table.insert(gj,e('%s=%s',bm,dU))end end end;return e('{%s}',table.concat(gj,','))end;if g8(gi)then return e("'%s'",gi:gsub("'",[[\']]))end;return tostring(gi)end;local gl={}gl.__index=gl;gl.__tostring=function(gi,gm)local gn={}for bm in pairs(gi)do table.insert(gn,bm)end;table.sort(gn)local gj={}for _,bm in ipairs(gn)do local dU=gh(gi[bm])if type(bm)=='number'then table.insert(gj,e('[%s]=%s',bm,dU))else table.insert(gj,e('%s=%s',bm,dU))end end;if gm then return e('%s%s',gm,table.concat(gj,',\n'..gm))end;return e('{%s}',table.concat(gj,','))end;gl.__eq=function(go,gp)return go.planetarySystemId==gp.planetarySystemId and go.bodyId==gp.bodyId and float_eq(go.radius,gp.radius)and float_eq(go.center.x,gp.center.x)and float_eq(go.center.y,gp.center.y)and float_eq(go.center.z,gp.center.z)and float_eq(go.GM,gp.GM)end;local function gq(c2,c3,gr,bU,gs)assert(g5(c2),'Argument 1 (planetarySystemId) must be a number:'..type(c2))assert(g5(c3),'Argument 2 (bodyId) must be a number:'..type(c3))assert(g5(gr),'Argument 3 (radius) must be a number:'..type(gr))assert(g6(bU),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bU))assert(g5(gs),'Argument 5 (GM) must be a number:'..type(gs))return setmetatable({planetarySystemId=tonumber(c2),bodyId=tonumber(c3),radius=tonumber(gr),center=vec3(bU),GM=tonumber(gs)},gl)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gt)return e('::pos{%d,%d,%s,%s,%s}',gt.systemId,gt.bodyId,gg(gt.latitude*ge),gg(gt.longitude*ge),gg(gt.altitude))end;MapPosition.__eq=function(go,gp)return go.bodyId==gp.bodyId and go.systemId==gp.systemId and float_eq(go.latitude,gp.latitude)and float_eq(go.altitude,gp.altitude)and(float_eq(go.longitude,gp.longitude)or float_eq(go.latitude,math.pi/2)or float_eq(go.latitude,-math.pi/2))end;local function gu(gv,c3,bY,bZ,bX)local c2=gv;if g8(gv)and not bZ and not bX and not c3 and not bY then c2,c3,bY,bZ,bX=string.match(gv,c1)assert(c2,'Argument 1 (position string) is malformed.')else assert(g5(c2),'Argument 1 (systemId) must be a number:'..type(c2))assert(g5(c3),'Argument 2 (bodyId) must be a number:'..type(c3))assert(g5(bY),'Argument 3 (latitude) must be in degrees:'..type(bY))assert(g5(bZ),'Argument 4 (longitude) must be in degrees:'..type(bZ))assert(g5(bX),'Argument 5 (altitude) must be in meters:'..type(bX))end;c2=tonumber(c2)c3=tonumber(c3)bY=tonumber(bY)bZ=tonumber(bZ)bX=tonumber(bX)if c3==0 then return setmetatable({latitude=bY,longitude=bZ,altitude=bX,bodyId=c3,systemId=c2},MapPosition)end;return setmetatable({latitude=gd*gf(bY,-90,90),longitude=gd*(bZ%360),altitude=bX,bodyId=c3,systemId=c2},MapPosition)end;local gw={}gw.__index=gw;gw.__tostring=function(gi,gm)local gx=gm and gm..'  'local gy={}local gn={}for bm in pairs(gi)do table.insert(gn,bm)end;table.sort(gn)for _,gz in ipairs(gn)do bdy=gi[gz]local gA=gl.__tostring(bdy,gx)if gm then table.insert(gy,e('[%s]={\n%s\n%s}',gz,gA,gm))else table.insert(gy,e('  [%s]=%s',gz,gA))end end;if gm then return e('\n%s%s%s',gm,table.concat(gy,',\n'..gm),gm)end;return e('{\n%s\n}',table.concat(gy,',\n'))end;local function gB(gC)local aX={}local pid;for _,bn in pairs(gC)do local c9=bn.planetarySystemId;if type(c9)~='number'then error('Invalid planetary system ID: '..tostring(c9))elseif pid and c9~=pid then error('Mismatch planetary system IDs: '..c9 ..' and '..pid)end;local gD=bn.bodyId;if type(gD)~='number'then error('Invalid body ID: '..tostring(gD))elseif aX[gD]then error('Duplicate body ID: '..tostring(gD))end;setmetatable(bn.center,getmetatable(vec3.unit_x))aX[gD]=setmetatable(bn,gl)pid=c9 end;return setmetatable(aX,gw)end;b1={}local function gE(gC)return setmetatable({galaxyAtlas=gC or{}},b1)end;b1.__index=function(g7,i)if type(i)=='number'then local system=g7.galaxyAtlas[i]return gB(system)end;return rawget(b1,i)end;b1.__pairs=function(gi)return function(g7,bm)local gF,nv=next(g7,bm)return gF,nv and gB(nv)end,gi.galaxyAtlas,nil end;b1.__tostring=function(gi)local gG={}for _,gH in pairs(gi or{})do local gI=gH:getPlanetarySystemId()local gJ=gw.__tostring(gH,'    ')table.insert(gG,e('  [%s]={%s\n  }',gI,gJ))end;return e('{\n%s\n}\n',table.concat(gG,',\n'))end;b1.BodyParameters=gq;b1.MapPosition=gu;b1.PlanetarySystem=gB;function b1.createBodyParameters(gK,c3,gL,gM,gN,gO,gP)assert(g5(gK),'Argument 1 (planetarySystemId) must be a number:'..type(gK))assert(g5(c3),'Argument 2 (bodyId) must be a number:'..type(c3))assert(g5(gL),'Argument 3 (surfaceArea) must be a number:'..type(gL))assert(g6(gM),'Argument 4 (aPosition) must be an array or vec3:'..type(gM))assert(g6(gN),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gN))assert(g5(gO),'Argument 6 (altitude) must be in meters:'..type(gO))assert(g5(gP),'Argument 7 (gravityAtPosition) must be number:'..type(gP))local gr=math.sqrt(gL/4/math.pi)local a8=gr+gO;local gQ=vec3(gM)+a8*vec3(gN)local gs=gP*a8*a8;return gq(gK,c3,gr,gQ,gs)end;b1.isMapPosition=gb;function b1:getPlanetarySystem(gv)if i==nil then i=0 end;if nv==nil then nv=0 end;local gK=gv;if gb(gv)then gK=gv.systemId end;if type(gK)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gw then system=gB(system)end;return system end end end;function gw:castIntersections(gR,fi,gS,gT)local gS=gS or function(eY)return 1.05*eY.radius end;local gU={}if gT then for _,i in ipairs(gT)do gU[i]=self[i]end else gT={}for bm,eY in pairs(self)do table.insert(gT,bm)gU[bm]=eY end end;local function gV(gW,gX)local gY=gU[gW].center-gR;local gZ=gU[gX].center-gR;return gY:len()<gZ:len()end;table.sort(gT,gV)local g_=fi:normalize()for i,c9 in ipairs(gT)do local eY=gU[c9]local h0=eY.center-gR;local gr=gS(eY)local h1=h0:dot(g_)local h2=h1^2-(h0:len2()-gr^2)if h2>=0 then local h3=math.sqrt(h2)local eW=h1+h3;local eX=h1-h3;if eX>0 then return eY,eW,eX elseif eW>0 then return eY,eW,nil end end end;return nil,nil,nil end;function gw:closestBody(h4)assert(type(h4)=='table','Invalid coordinates.')local h5,eY;local h6=vec3(h4)for _,h7 in pairs(self)do local h8=(h7.center-h6):len2()if(not eY or h8<h5)and h7.name~="Space"then eY=h7;h5=h8 end end;return eY end;function gw:convertToBodyIdAndWorldCoordinates(gv)local h9=gv;if g8(gv)then h9=gu(gv)end;if h9.bodyId==0 then return 0,vec3(h9.latitude,h9.longitude,h9.altitude)end;local h7=self:getBodyParameters(h9)if h7 then return h9.bodyId,h7:convertToWorldCoordinates(h9)end end;function gw:getBodyParameters(gv)local c3=gv;if gb(gv)then c3=gv.bodyId end;assert(g5(c3),'Argument 1 (bodyId) must be a number:'..type(c3))return self[c3]end;function gw:getPlanetarySystemId()local _,bn=next(self)return bn and bn.planetarySystemId end;function gl:convertToMapPosition(bU)assert(g6(bU),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bU))local bV=vec3(bU)if self.bodyId==0 then return setmetatable({latitude=bV.x,longitude=bV.y,altitude=bV.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local bW=bV-self.center;local a8=bW:len()local bX=a8-self.radius;local bY=0;local bZ=0;if not float_eq(a8,0)then local b_=math.atan(bW.y,bW.x)bZ=b_>=0 and b_ or 2*math.pi+b_;bY=math.pi/2-math.acos(bW.z/a8)end;return setmetatable({latitude=bY,longitude=bZ,altitude=bX,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gl:convertToWorldCoordinates(gv)local h9=g8(gv)and gu(gv)or gv;if h9.bodyId==0 then return vec3(h9.latitude,h9.longitude,h9.altitude)end;assert(gb(h9),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(h9.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(h9.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local c4=math.cos(h9.latitude)return self.center+(self.radius+h9.altitude)*vec3(c4*math.cos(h9.longitude),c4*math.sin(h9.longitude),math.sin(h9.latitude))end;function gl:getAltitude(bU)return(vec3(bU)-self.center):len()-self.radius end;function gl:getDistance(bU)return(vec3(bU)-self.center):len()end;function gl:getGravity(bU)local ha=self.center-vec3(bU)local hb=ha:len2()return self.GM/hb*ha/math.sqrt(hb)end;return setmetatable(b1,{__call=function(_,...)return gE(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function g8(g9)return type(g9)=='string'end;local function g6(g7)return type(g7)=='table'end;local function float_eq(bR,bS)if bR==0 then return math.abs(bS)<1e-09 end;if bS==0 then return math.abs(bR)<1e-09 end;return math.abs(bR-bS)<math.max(math.abs(bR),math.abs(bS))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bX)assert(self.body)local a8=bX+self.body.radius;if not float_eq(a8,0)then local orbit=math.sqrt(self.body.GM/a8)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gv,ba)assert(self.body)assert(g6(gv)or g8(gv))assert(g6(ba))local c0=(g8(gv)or PlanetRef.isMapPosition(gv))and self.body:convertToWorldCoordinates(gv)or vec3(gv)local bn=vec3(ba)local hc=c0-self.body.center;local gZ=bn:len2()local hd=hc:len()local he=self.body.GM;local hf=((gZ-he/hd)*hc-hc:dot(bn)*bn)/he;local bR=he/(2*he/hd-gZ)local hg=hf:len()local g_=hf:normalize()local hh=bR*(1-hg)local hi=bR*(1+hg)local hj=hh*g_+self.body.center;local hk=hg<=1 and-hi*g_+self.body.center or nil;local hl=math.sqrt(bR*he*(1-hg*hg))local hm=hk and 2*math.pi*math.sqrt(bR^3/he)local hn=math.acos(hf:dot(hc)/(hg*hd))if hc:dot(bn)<0 then hn=-(hn-2*math.pi)end;local ho=math.acos((math.cos(hn)+hg)/(1+hg*math.cos(hn)))local hp=ho;if hp<0 then hp=hp+2*math.pi end;local hq=hp-hg*math.sin(hp)local hr=0;local hs=0;local ht=0;if hm~=nil then hr=hq/(2*math.pi/hm)hs=hm-hr;ht=hs+hm/2;if hn-math.pi>0 then hs=hr;ht=hs+hm/2 end;if ht>hm then ht=ht-hm end end;return{periapsis={position=hj,speed=hl/hh,circularOrbitSpeed=math.sqrt(he/hh),altitude=hh-self.body.radius},apoapsis=hk and{position=hk,speed=hl/hi,circularOrbitSpeed=math.sqrt(he/hi),altitude=hi-self.body.radius},currentVelocity=bn,currentPosition=c0,eccentricity=hg,period=hm,eccentricAnomaly=ho,meanAnomaly=hq,timeToPeriapsis=hs,timeToApoapsis=ht}end;local function hu(hv)local h7=PlanetRef.BodyParameters(hv.planetarySystemId,hv.bodyId,hv.radius,hv.center,hv.GM)return setmetatable({body=h7},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hu(...)end})end;function Kinematics()local b3={}local hw=30000000/3600;local hx=hw*hw;local hy=100;local function hz(bn)return 1/math.sqrt(1-bn*bn/hx)end;function b3.computeAccelerationTime(hA,hB,hC)local hD=hw*math.asin(hA/hw)return(hw*math.asin(hC/hw)-hD)/hB end;function b3.computeDistanceAndTime(hA,hC,hE,hF,hG,hH)hG=hG or 0;hH=hH or 0;local hI=hA<=hC;local hJ=hF*(hI and 1 or-1)/hE;local hK=-hH/hE;local hL=hJ+hK;if hI and hL<=0 or not hI and hL>=0 then return-1,-1 end;local hM,hN=0,0;if hJ~=0 and hG>0 then local hD=math.asin(hA/hw)local hO=math.pi*(hJ/2+hK)local hP=hJ*hG;local hQ=hw*math.pi;local bn=function(g7)local cF=(hO*g7-hP*math.sin(math.pi*g7/2/hG)+hQ*hD)/hQ;local hR=math.tan(cF)return hw*hR/math.sqrt(hR*hR+1)end;local hS=hI and function(g9)return g9>=hC end or function(g9)return g9<=hC end;hN=2*hG;if hS(bn(hN))then local hT=0;while math.abs(hN-hT)>0.5 do local g7=(hN+hT)/2;if hS(bn(g7))then hN=g7 else hT=g7 end end end;local hU=hA;local hV=hN/hy;for hW=1,hy do local bC=bn(hW*hV)hM=hM+(bC+hU)*hV/2;hU=bC end;if hN<2*hG then return hM,hN end;hA=hU end;local hD=hw*math.asin(hA/hw)local bp=(hw*math.asin(hC/hw)-hD)/hL;local hX=hx*math.cos(hD/hw)/hL;local a8=hX-hx*math.cos((hL*bp+hD)/hw)/hL;return a8+hM,bp+hN end;function b3.computeTravelTime(hA,hB,a8)if a8==0 then return 0 end;if hB>0 then local hD=hw*math.asin(hA/hw)local hX=hx*math.cos(hD/hw)/hB;return(hw*math.acos(hB*(hX-a8)/hx)-hD)/hB end;if hA==0 then return-1 end;assert(hA>0,'Acceleration and initial speed are both zero.')return a8/hA end;function b3.lorentz(bn)return hz(bn)end;return b3 end;function script.onStart()VERSION_NUMBER=5.333;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b1=PlanetRef()b2=b1(Atlas())b3=Kinematics()b5=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hY)if dbHud_1 then if not a3 then for bm,bn in pairs(b)do dbHud_1.setStringValue(bn,g(_G[bn]))if hY and dbHud_2 then dbHud_2.setStringValue(bn,g(_G[bn]))end end;for bm,bn in pairs(a)do dbHud_1.setStringValue(bn,g(_G[bn]))if hY and dbHud_2 then dbHud_2.setStringValue(bn,g(_G[bn]))end end;c("Saved Variables to Datacore")if hY and dbHud_2 then P="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bx=j()if door and(bx>0 or bx==0 and aj<10000)then for _,bn in pairs(door)do bn.toggle()end end;if switch then for _,bn in pairs(switch)do bn.toggle()end end;if forcefield and(bx>0 or bx==0 and aj<10000)then for _,bn in pairs(forcefield)do bn.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hZ)if hZ=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then s=1;Nav.control.cancelCurrentControlMasterMode()w=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local h_=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if h_ and not Autopilot then a8=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a8=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)W,X=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)W,X=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dh,di=getDistanceDisplayString(a8)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dh..'", "unit":"'..di..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dh,di=getDistanceDisplayString(U)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dh..'", "unit":"'..di..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(V)..'", "unit":""}')dh,di=getDistanceDisplayString(W)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dh..'", "unit":"'..di..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(X)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dh,di=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dh)..'", "unit":"'..di..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hZ=="oneSecond"then ag=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cd={}local dr=GetFlightStyle()DrawOdometer(cd,a1,TotalDistanceTravelled,dr,a2)if ShouldCheckDamage then CheckDamage(cd)end;aa=table.concat(cd,"")collectgarbage("collect")elseif hZ=="fiveSecond"then ah=dbHud_1.getStringValue("SPBAutopilotTargetName")if ah~=nil and ah~=""and ah~="SatNavNotChanged"then local bo=json.decode(dbHud_1.getStringValue("SavedLocations"))if bo~=nil then _G["SavedLocations"]=bo;local cb=-1;local c7;for bm,bn in pairs(SavedLocations)do if bn.name and bn.name=="SatNav Location"then cb=bm;break end end;if cb~=-1 then c7=SavedLocations[cb]cb=-1;for bm,bn in pairs(aX[0])do if bn.name and bn.name=="SatNav Location"then cb=bm;break end end;if cb>-1 then aX[0][cb]=c7 end;UpdateAtlasLocationsList()P=c7.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ah then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hZ=="msgTick"then local cd={}DisplayMessage(cd,"empty")P="empty"unit.stopTimer("msgTick")a7=3 elseif hZ=="animateTick"then b7=true;b6=false;a5=0;a6=0;unit.stopTimer("animateTick")elseif hZ=="hudTick"then local cd={}HUDPrologue(cd)if showHud then UpdateHud(cd)else DisplayOrbitScreen(cd)DrawWarnings(cd)end;HUDEpilogue(cd)cd[#cd+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if P~="empty"then DisplayMessage(cd,P)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cd)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cd)if screen_1.getMouseState()==1 then CheckButtons()end;cd[#cd+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)elseif system.isViewLocked()==0 then if o()==1 and O then SetButtonContains()DrawButtons(cd)if not b6 and not b7 then local i0=table.concat(cd,"")cd={}cd[#cd+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cd[#cd+1]=aY;cd[#cd+1]=i0;cd[#cd+1]="</body>"b6=true;cd[#cd+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cd,"")system.setScreen(content)elseif b7 then local i0=table.concat(cd,"")cd={}cd[#cd+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cd[#cd+1]=aY;cd[#cd+1]=i0;cd[#cd+1]="</body>"end;if not b6 then cd[#cd+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end else CheckButtons()end else if not O and o()==0 then CheckButtons()if a8>DeadZone then DrawCursorLine(cd)end else SetButtonContains()DrawButtons(cd)end;cd[#cd+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end;cd[#cd+1]=[[</svg></body>]]content=table.concat(cd,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hZ=="apTick"then b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ai=j()>0;local bp=system.getTime()local i1=bp-bh;bh=bp;local cg=vec3(core.getConstructWorldOrientationForward())local ch=vec3(core.getConstructWorldOrientationRight())local i2=vec3(core.getConstructWorldOrientationUp())local ci=vec3(core.getWorldVertical())local i3=vec3(core.getConstructWorldPos())local i4=core.getVelocity()local dt=getRoll(ci,cg,ch)local du=dt/180*math.pi;local dv=math.cos(du)local dw=math.sin(du)local cj=getPitch(ci,cg,ch)local i5=getPitch(ci,cg,ch*dv+i2*dw)local i6=-math.deg(cA(i2,ba,cg))local i7=math.deg(cA(ch,ba,cg))bg=ai and i6<-YawStallAngle or i6>YawStallAngle or i7<-PitchStallAngle or i7>PitchStallAngle;be=system.getMouseDeltaX()bf=system.getMouseDeltaY()if InvertMouse and not O then bf=-bf end;I=0;M=0;H=0;ba=vec3(core.getWorldVelocity())bb=vec3(ba):len()sys=b2[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b5(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),ba)af=hoverDetectGround()local bz=planet:getGravity(core.getConstructWorldPos()):len()*n()bi=0;b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a5=screen_1.getMouseX()*ResolutionX;a6=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and O then if not b6 then a5=a5+be;a6=a6+bf end else a5=0;a6=0 end else a5=a5+be;a6=a6+bf;a8=math.sqrt(a5*a5+a6*a6)if not O and o()==0 then if userControlScheme=="virtual joystick"then if a5>0 and a5>DeadZone then I=I-(a5-DeadZone)*MouseXSensitivity elseif a5<0 and a5<DeadZone*-1 then I=I-(a5+DeadZone)*MouseXSensitivity else I=0 end;if a6>0 and a6>DeadZone then H=H-(a6-DeadZone)*MouseYSensitivity elseif a6<0 and a6<DeadZone*-1 then H=H-(a6+DeadZone)*MouseYSensitivity else H=0 end elseif userControlScheme=="mouse"then a5=0;a6=0;H=(-utils.smoothstep(bf,-100,100)+0.5)*2*D;I=(-utils.smoothstep(be,-100,100)+0.5)*2*E else a5=0;a6=0 end end end;local i8=bb>8334;if bb>SpaceSpeedLimit/3.6 and not ai and not Autopilot and not i8 then P="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end;if not i8 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=i8;if ai and j()>0.09 then if bb>bk/3.6 and not AtmoSpeedAssist and not an then BrakeIsOn=true;an=true elseif not AtmoSpeedAssist and an then if bb<bk/3.6 then BrakeIsOn=false;an=false end end end;if BrakeIsOn then L=1 else L=0 end;aj=core.getAltitude()if aj==0 then aj=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ac then BrakeIsOn=false;local i9=false;if CustomTarget~=nil then i9=AlignToWorldVector(CustomTarget.position-i3,0.01)else i9=AlignToWorldVector(vec3(ba),0.01)end;b8=true;if i9 and(math.abs(dt)<2 or math.abs(i5)>85)and bb>=bk/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;C=true;ac=false;ae=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bk))s=0 end elseif bb>B then AlignToWorldVector(vec3(ba),0.01)end end;if RetrogradeIsOn then if ai then RetrogradeIsOn=false elseif bb>B then AlignToWorldVector(-vec3(ba))end end;if not ProgradeIsOn and ac then if j()==0 then C=true;BeginReentry()ac=false;ae=true else ac=false;ToggleAutopilot()end end;local dY=vec3(core.getWorldVertical())*-1;local dW=ba.x*dY.x+ba.y*dY.y+ba.z*dY.z;if ae and(aj<HoldAltitude+200 and aj>HoldAltitude-200)and bb*3.6>bk-100 and math.abs(dW)<20 and j()>=0.1 and(CustomTarget.position-i3):len()>2000+aj then ToggleAutopilot()ae=false end;if Autopilot and j()==0 and not ac then local ia=AutopilotTargetCoords;local ib=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local ic=(CustomTarget.position-a0.center):normalize()local id=ic:project_on_plane((a0.center-i3):normalize()):normalize()local ie=a0.center+id*(a0.radius+AutopilotTargetOrbit)local ig=CustomTarget.position+(CustomTarget.position-a0.center):normalize()*(AutopilotTargetOrbit-a0:getAltitude(CustomTarget.position))if not TargetSet then if(i3-ie):len()<(i3-ig):len()then ia=ie;AutopilotTargetCoords=ia else ia=CustomTarget.position+(CustomTarget.position-a0.center):normalize()*(AutopilotTargetOrbit-a0:getAltitude(CustomTarget.position))AutopilotTargetCoords=ia end;local ck=zeroConvertToMapPosition(a0,AutopilotTargetCoords)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)ib=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ib=true;TargetSet=true;AutopilotRealigned=true;ia=CustomTarget.position+(i3-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local ic=(i3+ba*100000-a0.center):normalize()local id=ic:project_on_plane((a0.center-i3):normalize()):normalize()if id:len()<1 then ic=(i3+vec3(core.getConstructWorldOrientationForward())*100000-a0.center):normalize()id=ic:project_on_plane((a0.center-i3):normalize()):normalize()end;ia=a0.center+id*(a0.radius+AutopilotTargetOrbit)AutopilotTargetCoords=ia;TargetSet=true;ib=true;AutopilotRealigned=true;local ck=zeroConvertToMapPosition(a0,AutopilotTargetCoords)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)end end;AutopilotDistance=(vec3(ia)-vec3(core.getConstructWorldPos())):len()local eV,eW,eX=b2:getPlanetarySystem(0):castIntersections(i3,ba:normalize(),function(eY)if eY.noAtmosphericDensityAltitude>0 then return eY.radius+eY.noAtmosphericDensityAltitude else return eY.radius+eY.surfaceMaxAltitude*1.5 end end)local eZ=eW;if eX~=nil and eW~=nil then eZ=math.min(eX,eW)end;if eZ~=nil and eZ<AutopilotDistance and eV.name==a0.name then AutopilotDistance=eZ end;local i9=true;local ih=(a0.center-(vec3(core.getConstructWorldPos())+vec3(ba):normalize()*AutopilotDistance)):len()-a0.radius;local dh,di=getDistanceDisplayString(ih)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dh..'", "unit":"'..di..'"}')local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)end;if bb>300 and AutopilotAccelerating then local de=vec3(ia)-vec3(core.getConstructWorldPos())local ii=utils.clamp(math.deg(cA(i2,ba:normalize(),de:normalize()))*bb/500,-90,90)local ij=utils.clamp(math.deg(cA(ch,ba:normalize(),de:normalize()))*bb/500,-90,90)if math.abs(ii)<20 and math.abs(ij)<20 then ii=ii*2;ij=ij*2 end;if math.abs(ii)<2 and math.abs(ij)<2 then ii=ii*2;ij=ij*2 end;local i6=-math.deg(cA(i2,cg,ba:normalize()))local i7=-math.deg(cA(ch,cg,ba:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ij-i7)local ik=utils.clamp(apPitchPID:get(),-1,1)H=H+ik;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ii-i6)local il=utils.clamp(apYawPID:get(),-1,1)I=I+il;ib=true;if math.abs(ii)>2 or math.abs(ij)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if ih<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(ih)end end;if not AutopilotCruising and not AutopilotBraking and not ib then i9=AlignToWorldVector((ia-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then i9=AlignToWorldVector(-vec3(ba):normalize())end;if AutopilotAccelerating then if not z then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)s=round(AutopilotInterplanetaryThrottle,2)z=true end;local fm=unit.getThrottle()if AtmoSpeedAssist then fm=s end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fm==0 and z then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end;if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;L=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)s=1 end;local _,im=b5(a0):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local de,io,ip;if CustomTarget~=nil then de=CustomTarget.position-i3;io=planet:getAltitude(CustomTarget.position)ip=math.sqrt(de:len()^2-(aj-io)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bb<50 then P="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bb<=im and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;local ck=zeroConvertToMapPosition(a0,AutopilotTargetCoords)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,im=b5(a0):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bb<=im then if CustomTarget~=nil then if ba:normalize():dot(de:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local ck=zeroConvertToMapPosition(a0,CustomTarget.position)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)WaypointSet=true end else P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;BrakeIsOn=false;local ck=zeroConvertToMapPosition(a0,CustomTarget.position)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"P="Autopilot completed, orbit established"L=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ac=true end end end end elseif AutopilotCruising then if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fm=unit.getThrottle()if AtmoSpeedAssist then fm=s end;if fm>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if i9 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ac then AutopilotTargetCoords=vec3(a0.center)+(AutopilotTargetOrbit+a0.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif i9 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not z then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)s=round(AutopilotInterplanetaryThrottle,2)z=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then P="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"L=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;ProgradeIsOn=true;ac=true;local ck=zeroConvertToMapPosition(a0,CustomTarget.position)ck="::pos{"..ck.systemId..","..ck.bodyId..","..ck.latitude..","..ck.longitude..","..ck.altitude.."}"system.setWaypoint(ck)end;if N then b8=true;local ij=0;local c0=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iq=c0-vec3(core.getConstructWorldPos())local ir=vec3(iq):project_on(vec3(core.getConstructWorldOrientationForward())):len()local is=vec3(iq):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a8=math.sqrt(ir*ir+is*is)AlignToWorldVector(iq:normalize())local it=40;local iu=a8<it;local iv=100;local fQ=utils.clamp((a8-it)/2,10,iv)H=0;local i9=math.abs(I)<0.1;if i9 and bb<fQ and not iu then BrakeIsOn=false;ij=-20 else BrakeIsOn=true;ij=0 end;local iw=0;if math.abs(ij-cj)>iw then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ij-cj)local ik=pitchPID:get()H=ik end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dE=unit.getClosestPlanetInfluence()>0;local ix=HoldAltitude-aj;local iy=500+bb;local iz=1;if AutoTakeoff then iz=utils.clamp(bb/100,0.1,1)end;local ij=(utils.smoothstep(ix,-iy,iy)-0.5)*2*MaxPitch*iz;if not Reentry and not ac and not VectorToTarget and cg:dot(ba:normalize())<0.99 then ij=(utils.smoothstep(ix,-iy*utils.clamp(20-19*j()*10,1,20),iy*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*iz end;if not AltitudeHold then ij=0 end;if LockPitch~=nil then if dE then ij=LockPitch else LockPitch=nil end end;b8=true;local iA=H;if Reentry then local ReentrySpeed=math.floor(bk)local iB,iC=b3.computeDistanceAndTime(bb,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local iD=aj-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and aj>planet.noAtmosphericDensityAltitude+5000 and bb<=ReentrySpeed/3.6 and bb>ReentrySpeed/3.6-10 and math.abs(ba:normalize():dot(cg))>0.9 then Nav.control.cancelCurrentControlMasterMode()s=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(iB>-1 and iD<=iB or aj<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not C then ij=-80;if j()>0.02 then P="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ij=0;b8=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aj>planet.noAtmosphericDensityAltitude+5000 then b8=true elseif aj<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bk then C=false;Reentry=false;b8=true end end end;if bb>B and not ad and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(ba))end;if(VectorToTarget or ad)and AutopilotTargetIndex>0 and j()>0.01 then local de;if CustomTarget~=nil then de=CustomTarget.position-vec3(core.getConstructWorldPos())else de=a0.center-i3 end;local i2=vec3(core.getConstructWorldOrientationUp())local ii=math.deg(cA(ci:normalize(),ba,de))*2;local iE=math.rad(math.abs(dt))if bb>minRollVelocity and j()>0.01 then local iF=utils.clamp(90-ij*2,-90,90)bi=utils.clamp(ii*2,-iF,iF)local iG=ii;ii=utils.clamp(utils.clamp(ii,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(iE)+4*(i5-ij)*math.sin(math.rad(dt)),-YawStallAngle*0.85,YawStallAngle*0.85)ij=utils.clamp(utils.clamp(ij*math.cos(iE),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(iG)*math.sin(iE),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bi=0;ii=utils.clamp(ii,-YawStallAngle*0.85,YawStallAngle*0.85)end;local iH=i6-ii;if not bg and bb>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(iH)local il=utils.clamp(yawPID:get(),-1,1)I=I+il elseif ai and af>-1 or bb<minRollVelocity then AlignToWorldVector(de)elseif bg and j()>0.01 then if(i6<-YawStallAngle or i6>YawStallAngle)and j()>0.01 then AlignToWorldVector(ba)end;if(i7<-PitchStallAngle or i7>PitchStallAngle)and j()>0.01 then ij=utils.clamp(i5-i7,i5-PitchStallAngle*0.85,i5+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ad then local io=planet:getAltitude(CustomTarget.position)local iD=math.sqrt(de:len()^2-(aj-io)^2)local iI=LastMaxBrakeInAtmo;if iI then iI=iI*utils.clamp(bb/100,0.1,1)*j()else iI=LastMaxBrake end;if j()<0.01 then iI=LastMaxBrake else end;local dW=ba.x*dY.x+ba.y*dY.y+ba.z*dY.z;local iJ=ba:len()-math.abs(dW)local iK=vec3(core.getWorldAirFrictionAcceleration())local iL=math.sqrt(iK:len()-iK:project_on(dY):len())*n()if bb>100 then U,V=b3.computeDistanceAndTime(bb,100,n(),0,0,iI+iL)local iM,iN=b3.computeDistanceAndTime(100,0,n(),0,0,iI/2)U=U+iM else U,V=b3.computeDistanceAndTime(bb,0,n(),0,0,iI/2)end;StrongBrakes=true;if not ad and iD<=U+bb*i1/2 and(ba:project_on_plane(ci):normalize():dot(de:project_on_plane(ci):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(iJ<0.1 or iD<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<iD)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=iD end end;if bg and j()>0.01 and af==-1 and bb>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(ba)ij=utils.clamp(i5-i7,i5-PitchStallAngle*0.85,i5+PitchStallAngle*0.85)end;H=iA;local fv=-1;local iw=0.1;if BrakeLanding then ij=0;local dW=ba.x*dY.x+ba.y*dY.y+ba.z*dY.z;local iO=false;local iP=30;if b4~=nil and b4>0 then local iL=0;local dz=utils.clamp(j(),0.4,2)local iI=LastMaxBrakeInAtmo*utils.clamp(bb/100,0.1,1)*dz;local iQ=b4*dz+iI+iL-bz;local iR=iI+iL-bz;local iS=iI/2+iL-bz;local iT=bb-math.sqrt(math.abs(iS/2)*20/(0.5*n()))*utils.sign(iS)if iT<0 then iT=0 end;local iU;if bb>100 then local iV,_=b3.computeDistanceAndTime(bb,100,n(),0,0,iI)local iW,_=b3.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(iI))iU=iV+iW else iU=b3.computeDistanceAndTime(bb,0,n(),0,0,math.sqrt(iI))end;if iU<20 then BrakeIsOn=false else local iX=0;if iT>100 then local iY,_=b3.computeDistanceAndTime(iT,100,n(),0,0,iQ)local iZ,_=b3.computeDistanceAndTime(100,0,n(),0,0,b4*dz+math.sqrt(iI)+iL-bz)iX=iY+iZ else iX,_=b3.computeDistanceAndTime(iT,0,n(),0,0,b4*dz+math.sqrt(iI)+iL-bz)end;iX=(iX+15+bb*i1)*1.1;local i_=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if i_ then local io=planet:getAltitude(CustomTarget.position)local j0=aj-io-100;local de=CustomTarget.position-vec3(core.getConstructWorldPos())local ip=math.sqrt(de:len()^2-(aj-io)^2)if ip>100 then i_=false elseif j0<=iX or iX==-1 then BrakeIsOn=true;iO=true else BrakeIsOn=false;iO=true end end;if not i_ and CalculateBrakeLandingSpeed then if iX>=iP then BrakeIsOn=true else BrakeIsOn=false end;iO=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fv=af;if fv>-1 then b8=autoRollPreference;if bb<1 or ba:normalize():dot(ci)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a4=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and ba:normalize():dot(-dY)<0.999 then BrakeIsOn=true elseif dW<-brakeLandingRate and not iO then BrakeIsOn=true elseif not iO then BrakeIsOn=false end end;if AutoTakeoff or ad then local eV,eX,eW=b2:getPlanetarySystem(0):castIntersections(i3,(AutopilotTargetCoords-i3):normalize(),function(eY)return eY.radius+eY.noAtmosphericDensityAltitude end)if math.abs(ij)<15 and aj/HoldAltitude>0.75 then AutoTakeoff=false;if not ad then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ad and bb<B then Autopilot=true;ad=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 elseif ad then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;BrakeIsOn=true end elseif ad and j()==0 and a0~=nil and(eV==nil or eV.name==a0.name)then Autopilot=true;ad=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local j1=hoverDetectGround()>-1;local j2=cj;if(VectorToTarget or ad)and not j1 and bb>minRollVelocity and j()>0.01 then local iE=math.rad(math.abs(dt))j2=cj*math.abs(math.cos(iE))+i7*math.sin(iE)end;local j3=utils.clamp(ij-j2,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then j3=utils.clamp(ij-j2,-85,MaxPitch)elseif j()<0.01 then j3=utils.clamp(ij-j2,-MaxPitch,MaxPitch)end;if math.abs(dt)<5 or VectorToTarget or BrakeLanding or j1 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(j3)local ik=pitchPID:get()H=H+ik end end;Q=orbit.eccentricity;if antigrav and not ExternalAGG and aj<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if AchieveOrbit then local j4=1000;if planet.name~="Space"then if planet.hasAtmosphere then j4=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else j4=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else j4=1000 end;local _,im=b5(planet):escapeAndOrbitalSpeed((i3-planet.center):len()-planet.radius)b8=true;local j5;if OrbitToTarget and CustomTarget~=nil then j5=(target.position-i3):normalize():project_on_plane(ci):normalize()else j5=cg:project_on_plane(ci):normalize()end;j5=j5*im;j5=(j5+-ci*(aj-j4)):normalize()*im end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and w then s=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)w=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not w then s=0;w=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local j6=utils.clamp(G+H+system.getControlDeviceForwardInput(),-1,1)local j7=utils.clamp(J+M+system.getControlDeviceYawInput(),-1,1)local j8=utils.clamp(K+I-system.getControlDeviceLeftRightInput(),-1,1)local j9=L;local ja=vec3(core.getWorldVertical())if ja==nil or ja:len()==0 then ja=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jb=vec3(core.getConstructWorldOrientationUp())local jc=vec3(core.getConstructWorldOrientationForward())local jd=vec3(core.getConstructWorldOrientationRight())local je=vec3(core.getWorldVelocity())local jf=vec3(core.getWorldVelocity()):normalize()local jg=getRoll(ja,jc,jd)local jh=math.abs(jg)local ji=utils.sign(jg)local j=j()local jj=vec3(core.getWorldAngularVelocity())local jk=j6*pitchSpeedFactor*jd+j7*rollSpeedFactor*jc+j8*yawSpeedFactor*jb;if ja:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ac or AltitudeHold)then local dt=getRoll(ja,jc,jd)local du=dt/180*math.pi;local dv=math.cos(du)local dw=math.sin(du)local i5=getPitch(ja,jc,jd*dv+jb*dw)if b8==true and math.abs(bi-jg)>autoRollRollThreshold and j7==0 and math.abs(i5)<85 then local jl=bi;local jm=autoRollFactor;if j==0 then jm=jm/4;bi=0;jl=0 end;if rollPID==nil then rollPID=pid.new(jm*0.01,0,jm*0.1)end;rollPID:inject(jl-jg)local jn=rollPID:get()jk=jk+jn*jc end end;if ja:len()>0.01 and j>0.0 then local jo=20.0;if turnAssist==true and jh>jo and j6==0 and j8==0 then local jp=turnAssistFactor*0.1;local jq=turnAssistFactor*0.025;local jr=(jh-jo)/(180-jo)*180;local js=0;if jr<90 then js=jr/90 elseif jr<180 then js=(180-jr)/90 end;js=js*js;local jt=-ji*jq*(1.0-js)local ju=jp*js;jk=jk+ju*jd+jt*jb end end;local jv=1;local jw=0;local jx=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bk=utils.clamp(bk+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;A=false else s=round(utils.clamp(s+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bk=utils.clamp(bk-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;A=false else s=round(utils.clamp(s-speedChangeLarge/100,-1,1),2)end end;t=0;local dW=-ja:dot(je)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bk/3.6-je:dot(jc))local jy=throttlePID:get()v=utils.clamp(jy,-1,1)if v<s and(j>0.05 or j>0.01 and dW<0)then u=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(v,0.01,1))else u=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(je:len()-bk/3.6)local jz=utils.clamp(brakePID:get(),0,1)if j>0 and dW<-80 or j>0.05 then t=jz end;if t>0 then if u and v==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else v=utils.clamp(v,0.01,1)end;local jA=''local jB=vec3()local jC=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a4*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",jC,jw)local jD='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jD=jD..ExtraLongitudeTags end;local jE=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local jF=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jD,axisCommandId.longitudinal)local jG=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)jA=jA..' , '.."lateral airfoil , lateral ground "jB=jB+jG;if jB:len()>constants.epsilon then Nav:setEngineForceCommand(jA,jB,jw,'','','',jx)end;Nav:setEngineForceCommand(jD,jF,jv)local jH='thrust analog vertical fueled 'local jI='thrust analog lateral fueled 'if ExtraLateralTags~="none"then jI=jI..ExtraLateralTags end;if ExtraVerticalTags~="none"then jH=jH..ExtraVerticalTags end;if a4~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jH,jC,jv)else Nav:setEngineForceCommand(jH,vec3(),jv)end;if LeftAmount~=0 then Nav:setEngineForceCommand(jI,jG,jv)else Nav:setEngineForceCommand(jI,vec3(),jv)end;if j9==0 then j9=t end;local jJ=-j9*(brakeSpeedFactor*je+brakeFlatFactor*jf)Nav:setEngineForceCommand('brake',jJ)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;local jJ=-j9*(brakeSpeedFactor*je+brakeFlatFactor*jf)Nav:setEngineForceCommand('brake',jJ)local jA=''local jB=vec3()local jK=false;local jD='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jD=jD..ExtraLongitudeTags end;local jE=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jE==axisCommandType.byThrottle then local jF=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jD,axisCommandId.longitudinal)Nav:setEngineForceCommand(jD,jF,jv)elseif jE==axisCommandType.byTargetSpeed then local jF=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jA=jA..' , '..jD;jB=jB+jF;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then jK=true end end;local jI='thrust analog lateral 'if ExtraLateralTags~="none"then jI=jI..ExtraLateralTags end;local jL=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jL==axisCommandType.byThrottle then local jM=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jI,axisCommandId.lateral)Nav:setEngineForceCommand(jI,jM,jv)elseif jL==axisCommandType.byTargetSpeed then local jG=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jA=jA..' , '..jI;jB=jB+jG end;local jH='thrust analog vertical 'if ExtraVerticalTags~="none"then jH=jH..ExtraVerticalTags end;local jN=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jN==axisCommandType.byThrottle then local jC=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jH,axisCommandId.vertical)if a4~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jH,jC,jv,'airfoil','ground','',jx)else Nav:setEngineForceCommand(jH,vec3(),jv)Nav:setEngineForceCommand('airfoil vertical',jC,jv,'airfoil','','',jx)Nav:setEngineForceCommand('ground vertical',jC,jv,'ground','','',jx)end elseif jN==axisCommandType.byTargetSpeed then if a4<0 then Nav:setEngineForceCommand('hover',vec3(),jv)end;local jO=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jA=jA..' , '..jH;jB=jB+jO end;local fQ=unit.getAxisCommandValue(0)if jB:len()>constants.epsilon then if L~=0 or jK or math.abs(jf:dot(jc))<0.8 or ba:len()>fQ/3.6 then jA=jA..', brake'end;Nav:setEngineForceCommand(jA,jB,jw,'','','',jx)end end;local jP=torqueFactor*(jk-jj)local jQ=vec3(core.getWorldAirFrictionAngularAcceleration())jP=jP-jQ;Nav:setEngineTorqueCommand('torque',jP,jv,'airfoil','','',jx)Nav:setBoosterCommand('rocket_engine')if T and not VanillaRockets then local bC=vec3(core.getVelocity()):len()local jR=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jS=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bC*3.6>jS*(1-jR)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bC*3.6<jS*(1-jR)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fm=unit.getThrottle()if AtmoSpeedAssist then fm=s*100 end;local fQ=fm/100;if j==0 then fQ=fQ*MaxGameVelocity;if bC>=fQ*(1-jR)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bC<fQ*(1-jR)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fQ=fQ*ReentrySpeed/3.6;if bC>=fQ*(1-jR)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bC<fQ*(1-jR)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bo=coroutine.resume(beginSetup)if bo then SetupComplete=true end else Nav:update()if not b6 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jT)if jT=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if(vBooster or hover)and af==-1 and(j()>0 or aj<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b8=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if F and not BrakeLanding then Nav.control.extendLandingGears()end else if F then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jT=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jT=="forward"then G=G-1 elseif jT=="backward"then G=G+1 elseif jT=="left"then J=J-1 elseif jT=="right"then J=J+1 elseif jT=="yawright"then K=K-1 elseif jT=="yawleft"then K=K+1 elseif jT=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif jT=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif jT=="up"then a4=a4+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jT=="down"then a4=a4-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jT=="groundaltitudeup"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jT=="groundaltitudedown"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jT=="option1"then IncrementAutopilotTargetIndex()A=false elseif jT=="option2"then DecrementAutopilotTargetIndex()A=false elseif jT=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;A=false;ToggleWidgets()elseif jT=="option4"then ToggleAutopilot()A=false elseif jT=="option5"then ToggleLockPitch()A=false elseif jT=="option6"then ToggleAltitudeHold()A=false elseif jT=="option7"then wipeSaveVariables()A=false elseif jT=="option8"then ToggleFollowMode()A=false elseif jT=="option9"then if gyro~=nil then gyro.toggle()am=gyro.getState()==1 end;A=false elseif jT=="lshift"then if system.isViewLocked()==1 then O=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then O=true;b7=false;b6=false end elseif jT=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jT=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jT=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not T then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;T=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;T=false end elseif jT=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()s=0 elseif jT=="speedup"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif jT=="speeddown"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif jT=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jT)if jT=="forward"then G=0 elseif jT=="backward"then G=0 elseif jT=="left"then J=0 elseif jT=="right"then J=0 elseif jT=="yawright"then K=0 elseif jT=="yawleft"then K=0 elseif jT=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif jT=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif jT=="up"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jT=="down"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jT=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jT=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jT=="lshift"then if system.isViewLocked()==1 then O=false;a5=0;a6=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then O=false;b7=false;b6=false end elseif jT=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jT=="lalt"then if o()==0 and freeLookToggle then if A then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else A=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(jT)if jT=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jT=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jT=="speedup"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif jT=="speeddown"then if not O then if AtmoSpeedAssist and not AltIsOn then s=utils.clamp(s-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dj)local i;local jU="/commands /setname /G /agg /addlocation /copydatabank"local jV,jW=nil,nil;local jX="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dj," ")jV=dj;if i~=nil then jV=string.sub(dj,0,i-1)jW=string.sub(dj,i+1)elseif not string.find(jU,jV)then for fM in string.gmatch(jX,"([^\n]+)")do c(fM)end;return end;if jV=="/setname"then if jW==nil or jW==""then P="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jW)else P="Select a saved target to rename first"end elseif jV=="/addlocation"then if jW==nil or jW==""or string.find(jW,"::")==nil then P="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jW,"::")local c6=string.sub(jW,1,i-2)local c0=string.sub(jW,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c1='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c2,c3,bY,bZ,bX=string.match(c0,c1)local planet=aX[tonumber(c2)][tonumber(c3)]AddNewLocationByWaypoint(c6,planet,c0)P="Added "..c6 .." to saved locations,\nplanet "..planet.name.." at "..c0;a7=5 elseif jV=="/agg"then if jW==nil or jW==""then P="Usage: /agg targetheight"return end;jW=tonumber(jW)if jW<1000 then jW=1000 end;AntigravTargetAltitude=jW;P="AGG Target Height set to "..jW elseif jV=="/G"then if jW==nil or jW==""then P="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jW=="dump"then for bm,bn in pairs(a)do if type(_G[bn])=="boolean"then if _G[bn]==true then c(bn.." true")else c(bn.." false")end elseif _G[bn]==nil then c(bn.." nil")else c(bn.." ".._G[bn])end end;return end;i=string.find(jW," ")local jY=string.sub(jW,0,i-1)local jZ=string.sub(jW,i+1)for bm,bn in pairs(a)do if bn==jY then P="Variable "..jY.." changed to "..jZ;local j_=type(_G[bn])if j_=="number"then jZ=tonumber(jZ)elseif j_=="boolean"then if string.lower(jZ)=="true"then jZ=true else jZ=false end end;_G[bn]=jZ;return end end;P="No such global variable: "..jY elseif jV=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else P="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
