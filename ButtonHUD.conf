name: ButtonsHud - Dimencia and Archaegeo v5.4 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Will VTOL on AutoTakeOff.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;OrbitTargetSet=false;OrbitTargetCoords=nil;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitRetriggerTarget=false;OrbitAchieved=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=1;local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=false;local a6=false;local a7=nil;local a8=0;local a9=0;local aa=false;local ab=0;local ac=0;local ad=0;local ae=3;local af=0;local ag=""local ah=""local ai=0;local aj=false;local ak=false;local al=false;local am=-1;local an=false;local ao=""local ap=j()>0;local aq=core.getAltitude()local ar=core.getElementIdList()local as=system.getTime()local at=nil;local au=false;local av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local ax={}local ay=0;local az=0;local aA=""local aB=true;local aC={}local aD=1;local aE=0.001;local aF=ResolutionX;local aG=ResolutionY;local aH=nil;local aI=nil;local aJ=nil;local aK=nil;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=d(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=16;local b2=0;local b3=nil;local b4=""local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bh=vec3(core.getWorldVelocity())local bi=vec3(bh):len()local bj=math.cos(YawStallAngle*constants.deg2rad)local bk=LandingGearGroundHeight;local bl=system.getMouseDeltaX()local bm=system.getMouseDeltaY()local bn=false;local bo=system.getTime()local bp=0;local bq=0;local br=AtmoSpeedLimit;local bs=nil;local bt=0;local bu=0;local bv=0;local bw=0;local bx=false;local by=false;function LoadVariables()if dbHud_1 then local bz=dbHud_1.hasKey;if not useTheseSettings then for bA,bB in pairs(a)do if bz(bB)then local bC=f(dbHud_1.getStringValue(bB))if bC~=nil then c(bB.." "..dbHud_1.getStringValue(bB))_G[bB]=bC;aL=true end end end end;coroutine.yield()for bA,bB in pairs(b)do if bz(bB)then local bC=f(dbHud_1.getStringValue(bB))if bC~=nil then c(bB.." "..dbHud_1.getStringValue(bB))_G[bB]=bC;aL=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ae=5 elseif aL then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bD=system.getTime()if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;if aL then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aF=ResolutionX;aG=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference end;LastStartTime=bD;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ae=5 end;bj=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]br=AtmoSpeedLimit end;function CalculateFuelVolume(bE,bF)if bE>bF then bF=bE end;if ContainerOptimization>0 then bF=bF-bF*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bF=bF-bF*FuelTankOptimization*0.05 end;return bF end;function ProcessElements()local bG=fuelX~=0 and fuelY~=0;for bA in pairs(ar)do local type=l(ar[bA])if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bH=h(ar[bA])if bH>10000 then b1=128 elseif bH>1000 then b1=64 elseif bH>150 then b1=32 end end;aS=aS+h(ar[bA])if bG and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bH=h(ar[bA])local bI=m(ar[bA])local bE=0;local bJ=system.getTime()if type=="Atmospheric Fuel Tank"then local bF=400;local bK=35.03;if bH>10000 then bF=51200;bK=5480 elseif bH>1300 then bF=6400;bK=988.67 elseif bH>150 then bF=1600;bK=182.67 end;bE=bI-bK;if fuelTankHandlingAtmo>0 then bF=bF+bF*fuelTankHandlingAtmo*0.2 end;bF=CalculateFuelVolume(bE,bF)aP[#aP+1]={ar[bA],core.getElementNameById(ar[bA]),bF,bK,bE,bJ}end;if type=="Rocket Fuel Tank"then local bF=320;local bK=173.42;if bH>65000 then bF=40000;bK=25740 elseif bH>6000 then bF=5120;bK=4720 elseif bH>700 then bF=640;bK=886.72 end;bE=bI-bK;if fuelTankHandlingRocket>0 then bF=bF+bF*fuelTankHandlingRocket*0.1 end;bF=CalculateFuelVolume(bE,bF)aR[#aR+1]={ar[bA],core.getElementNameById(ar[bA]),bF,bK,bE,bJ}end;if type=="Space Fuel Tank"then local bF=2400;local bK=182.67;if bH>10000 then bF=76800;bK=5480 elseif bH>1300 then bF=9600;bK=988.67 end;bE=bI-bK;if fuelTankHandlingSpace>0 then bF=bF+bF*fuelTankHandlingSpace*0.2 end;bF=CalculateFuelVolume(bE,bF)aQ[#aQ+1]={ar[bA],core.getElementNameById(ar[bA]),bF,bK,bE,bJ}end end end end;function SetupChecks()if gyro~=nil then at=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a5=true else a6=true end end;local bL=j()if door and(bL>0 or bL==0 and aq<10000)then for _,bB in pairs(door)do bB.toggle()end end;if switch then for _,bB in pairs(switch)do bB.toggle()end end;if forcefield and(bL>0 or bL==0 and aq<10000)then for _,bB in pairs(forcefield)do bB.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bM=AboveGroundLevel()if bM~=-1 or not ap and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bk~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bk)if bk==0 and not M then GearExtended=true;BrakeIsOn=true end else bk=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ap and bM~=-1 then bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ap end;function ConvertResolutionX(bB)if ResolutionX==1920 then return bB else return round(ResolutionX*bB/1920,0)end end;function ConvertResolutionY(bB)if ResolutionY==1080 then return bB else return round(ResolutionY*bB/1080,0)end end;function RefreshLastMaxBrake(bN,bO)if bN==nil then bN=core.g()end;bN=round(bN,5)local bP=j()if bO~=nil and bO or(aO==nil or aO~=bN)then local bh=core.getVelocity()local bQ=vec3(bh):len()local bR=f(unit.getData()).maxBrake;if bR~=nil and bR>0 and ap then bR=bR/utils.clamp(bQ/100,0.1,1)bR=bR/bP;if bP>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bR)/2 else LastMaxBrakeInAtmo=bR end end end;if bR~=nil and bR>0 then LastMaxBrake=bR end;aO=bN end end;function MakeButton(bS,bT,bU,bV,bW,bX,bY,bZ,b_)local c0={enableName=bS,disableName=bT,width=bU,height=bV,x=bW,y=bX,toggleVar=bY,toggleFunction=bZ,drawCondition=b_,hovered=false}table.insert(aC,c0)return c0 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bA,bB in pairs(b3[0])do table.insert(AtlasOrdered,{name=bB.name,index=bA})end;local function c1(c2,c3)return c2.name<c3.name end;table.sort(AtlasOrdered,c1)end;function AddLocationsToAtlas()for bA,bB in pairs(SavedLocations)do table.insert(b3[0],bB)end;UpdateAtlasLocationsList()end;function float_eq(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*epsilon end;function zeroConvertToMapPosition(c6,c7)local c8=vec3(c7)if c6.bodyId==0 then return setmetatable({latitude=c8.x,longitude=c8.y,altitude=c8.z,bodyId=0,systemId=c6.planetarySystemId},MapPosition)end;local c9=c8-c6.center;local af=c9:len()local ca=af-c6.radius;local cb=0;local cc=0;if not float_eq(af,0)then local cd=math.atan(c9.y,c9.x)cc=cd>=0 and cd or 2*math.pi+cd;cb=math.pi/2-math.acos(c9.z/af)end;return setmetatable({latitude=math.deg(cb),longitude=math.deg(cc),altitude=ca,bodyId=c6.bodyId,systemId=c6.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(ce)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cf='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cg,ch,cb,cc,ca=string.match(ce,cf)if cg=="0"and ch=="0"then return vec3(tonumber(cb),tonumber(cc),tonumber(ca))end;cc=math.rad(cc)cb=math.rad(cb)local planet=b3[tonumber(cg)][tonumber(ch)]local ci=math.cos(cb)local cj=vec3(ci*math.cos(cc),ci*math.sin(cc),math.sin(cb))return planet.center+(planet.radius+ca)*cj end;function AddNewLocationByWaypoint(ck,planet,ce)if dbHud_1 then local cl={}local position=zeroConvertToWorldCoordinates(ce)if planet.name=="Space"then cl={position=position,name=ck,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bL=false;if planet.hasAtmosphere then bL=true else bL=false end;cl={position=position,name=ck,atmosphere=bL,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cl;table.insert(b3[0],cl)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cm=planet.name..". "..#SavedLocations;if radar_1 then local cn,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cn~=nil and cn~=""then cm=cm.." "..radar_1.getConstructName(cn)end end;local cl={}local bL=false;if planet.hasAtmosphere then bL=true end;cl={position=position,name=cm,atmosphere=bL,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cl;table.insert(b3[0],cl)UpdateAtlasLocationsList()W="Location saved as "..cm else W="Databank must be installed to save locations"end end;function UpdatePosition(co)local cp=-1;local cl;for bA,bB in pairs(SavedLocations)do if bB.name and bB.name==CustomTarget.name then cp=bA;break end end;if cp~=-1 then local cq;if co~=nil then cl={position=SavedLocations[cp].position,name=co,atmosphere=SavedLocations[cp].atmosphere,planetname=SavedLocations[cp].planetname,gravity=SavedLocations[cp].gravity}else cl={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cp].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cp]=cl;cp=-1;for bA,bB in pairs(b3[0])do if bB.name and bB.name==CustomTarget.name then cp=bA end end;if cp>-1 then b3[0][cp]=cl end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cp=-1;for bA,bB in pairs(b3[0])do if bB.name and bB.name==CustomTarget.name then cp=bA end end;if cp>-1 then table.remove(b3[0],cp)end;cp=-1;for bA,bB in pairs(SavedLocations)do if bB.name and bB.name==CustomTarget.name then W=bB.name.." saved location cleared"cp=bA;break end end;if cp~=-1 then table.remove(SavedLocations,cp)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cr)cr[#cr+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ai==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ai==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ai=0 end end;function ToggleWidgets()if aB then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aB=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aB=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ap then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cs,ct,bW,bX,bU,bV)if cs>bW and cs<bW+bU and ct>bX and ct<bX+bV then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then if OrbitAchieved then CancelIntoOrbit=false else CancelIntoOrbit=true end;IntoOrbit=false;bx=false;bv=nil;bw=nil;OrbitTargetPlanet=nil elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;OrbitAchieved=false;CancelIntoOrbit=false;bx=false;bv=nil;bw=nil;if OrbitTargetPlanet==nil then OrbitTargetPlanet=planet end else W="Unable to engage orbiting, not near planet"end end end;function ToggleLockPitch()if LockPitch==nil then local cu=vec3(core.getConstructWorldOrientationForward())local cv=vec3(core.getConstructWorldOrientationRight())local cw=vec3(core.getWorldVertical())local cx=getPitch(cw,cu,cv)LockPitch=cx;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bD=system.getTime()if bD-bq<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bq=-1;if AltitudeHold then return end end else bq=bD end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bf=true;LockPitch=nil;if hoverDetectGround()==-1 or not ap or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bq>-1 then HoldAltitude=aq end;if not ak and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bq>-1 then HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ak then HoldAltitude=100000 end else bf=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ak then UpdateAutopilotTarget()local cy=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ak=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aq>100000 or aq==0 then Autopilot=true else aj=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ak=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false else ak=true;ToggleAltitudeHold()end else ak=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aq;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;bf=autoRollPreference;aj=false;al=false;ab=0 end end;function CheckDamage(cr)local cz=0;aA=""local cA=aS;local cB=0;local cC=0;local cD=0;local cE=0;local cF=""for bA in pairs(ar)do local bH=0;local cG=0;cG=h(ar[bA])bH=k(ar[bA])cB=cB+bH;if bH<cG then if bH==0 then cD=cD+1 else cC=cC+1 end;if aT and#ax==0 then position=vec3(core.getElementPositionById(ar[bA]))local bW=position.x-b1;local bX=position.y-b1;local cH=position.z-b1;table.insert(ax,core.spawnArrowSticker(bW,bX,cH+1,"down"))table.insert(ax,core.spawnArrowSticker(bW,bX,cH+1,"down"))core.rotateSticker(ax[2],0,0,90)table.insert(ax,core.spawnArrowSticker(bW+1,bX,cH,"north"))table.insert(ax,core.spawnArrowSticker(bW+1,bX,cH,"north"))core.rotateSticker(ax[4],90,90,0)table.insert(ax,core.spawnArrowSticker(bW-1,bX,cH,"south"))table.insert(ax,core.spawnArrowSticker(bW-1,bX,cH,"south"))core.rotateSticker(ax[6],90,-90,0)table.insert(ax,core.spawnArrowSticker(bW,bX-1,cH,"east"))table.insert(ax,core.spawnArrowSticker(bW,bX-1,cH,"east"))core.rotateSticker(ax[8],90,0,90)table.insert(ax,core.spawnArrowSticker(bW,bX+1,cH,"west"))table.insert(ax,core.spawnArrowSticker(bW,bX+1,cH,"west"))core.rotateSticker(ax[10],-90,0,90)table.insert(ax,ar[bA])end elseif aT and#ax>0 and ax[11]==ar[bA]then for cI in pairs(ax)do core.deleteSticker(ax[cI])end;ax={}end end;cz=d(cB/cA*100)if cz<100 then cr[#cr+1]=[[<g class="pbright txt">]]cE=d(cz*2.55)cF=e("rgb(%d,%d,%d)",255-cE,cE,0)if cz<100 then cr[#cr+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cF,cz)if cD>0 then cr[#cr+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cF,cD,cC)elseif cC>0 then cr[#cr+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cF,cC)end end;cr[#cr+1]=[[<\g>]]end end;function DrawCursorLine(cr)local cJ=d(utils.clamp(af/(aF/4)*255,0,255))cr[#cr+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ac,ad,d(t+0.5)+cJ,d(v+0.5)-cJ,d(u+0.5)-cJ)end;function getPitch(cK,cL,c3)local cM=cK:cross(c3):normalize_inplace()local cx=math.acos(utils.clamp(cM:dot(-cL),-1,1))*constants.rad2deg;if cM:cross(-cL):dot(c3)<0 then cx=-cx end;return cx end;local function cN(cO,cP,cQ)cP=cP:project_on_plane(cO)cQ=cQ:project_on_plane(cO)return p(cP:cross(cQ):dot(cO),cP:dot(cQ))end;function clearAll()if an then an=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;aj=false;ak=false;J=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;at=false;LockPitch=nil else an=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ae=5 else if aM then for bA,bB in pairs(a)do dbHud_1.setStringValue(bB,g(nil))end;for bA,bB in pairs(b)do if bB~="SavedLocations"then dbHud_1.setStringValue(bB,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ae=5;aM=false;aL=false;aa=true else W="Press ALT-7 again to confirm wipe of ALL data"aM=true end end end;function CheckButtons()for _,bB in pairs(aC)do if bB.hovered then if not bB.drawCondition or bB.drawCondition()then bB.toggleFunction()end;bB.hovered=false end end end;function SetButtonContains()local bW=ac+aF/2;local bX=ad+aG/2;for _,bB in pairs(aC)do bB.hovered=Contains(bW,bX,bB.x,bB.y,bB.width,bB.height)end end;function DrawButton(cr,cR,hover,bW,bX,cS,cT,cU,cV,cW,cX)if type(cW)=="function"then cW=cW()end;if type(cX)=="function"then cX=cX()end;cr[#cr+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bW,bX,cS,cT)if cR then cr[#cr+1]=e("%s'",cU)else cr[#cr+1]=cV end;if hover then cr[#cr+1]=" style='stroke:white; stroke-width:2'"else cr[#cr+1]=" style='stroke:black; stroke-width:1'"end;cr[#cr+1]="></rect>"cr[#cr+1]=e("<text x='%f' y='%f' font-size='24' fill='",bW+cS/2,bX+cT/2+5)if cR then cr[#cr+1]="black"else cr[#cr+1]="white"end;cr[#cr+1]="' text-anchor='middle' font-family='Montserrat'>"if cR then cr[#cr+1]=e("%s</text>",cW)else cr[#cr+1]=e("%s</text>",cX)end end;function DrawButtons(cr)local cY="rgb(50,50,50)'"local cZ="rgb(210,200,200)"local c_=DrawButton;for _,bB in pairs(aC)do local bT=bB.disableName;local bS=bB.enableName;if type(bT)=="function"then bT=bT()end;if type(bS)=="function"then bS=bS()end;if not bB.drawCondition or bB.drawCondition()then c_(cr,bB.toggleVar(),bB.hovered,bB.x,bB.y,bB.width,bB.height,cZ,cY,bT,bS)end end end;function DrawTank(cr,b0,bW,d0,d1,d2,d3,d4)local d5=1;local d6=2;local d7=3;local d8=4;local d9=5;local da=6;local db=""local dc=0;local dd=fuelY;local de=fuelY+10;if o()==1 and not RemoteHud then dd=dd-50;de=de-50 end;cr[#cr+1]=[[<g class="pdim txtfuel">]]if d1=="ATMO"then db="atmofueltank"elseif d1=="SPACE"then db="spacefueltank"else db="rocketfueltank"end;dc=_G[db.."_size"]if#d2>0 then for i=1,#d2 do local cm=string.sub(d2[i][d6],1,12)local df=0;for cI=1,dc do if d2[i][d6]==f(unit[db.."_"..cI].getData()).name then df=cI;break end end;if b0 or d3[i]==nil or d4[i]==nil then local dg=0;local dh=0;local di=0;local dj=0;local bJ=system.getTime()if df~=0 then d4[i]=f(unit[db.."_"..df].getData()).percentage;d3[i]=f(unit[db.."_"..df].getData()).timeLeft;if d3[i]=="n/a"then d3[i]=0 end else di=m(d2[i][d5])-d2[i][d8]dg=d2[i][d7]d4[i]=d(0.5+di*100/dg)dh=d2[i][d9]dj=d2[i][da]if dh<=di then d3[i]=0 else d3[i]=d(0.5+di/((dh-di)/(bJ-dj)))end;d2[i][d9]=di;d2[i][da]=bJ end end;if cm==d0 then cm=e("%s %d",d1,i)end;if df==0 then cm=cm.." *"end;local dk;if d3[i]==0 then dk="n/a"else dk=FormatTimeString(d3[i])end;if d4[i]~=nil then local cE=d(d4[i]*2.55)local cF=e("rgb(%d,%d,%d)",255-cE,cE,0)local dl=""if dk~="n/a"and d3[i]<120 or d4[i]<5 then if b0 then dl=[[class="red"]]end end;cr[#cr+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bW,dd,dl,cm,bW,de,cF,d4[i],dk)dd=dd+30;de=de+30 end end end;cr[#cr+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bh)bh=vec3(bh)local cx=-math.deg(math.atan(bh.y,bh.z))+180;cx=cx-90;if cx<0 then cx=360+cx end;if cx>180 then cx=-180+cx-180 end;return-cx end;function getRelativeYaw(bh)bh=vec3(bh)local dm=math.deg(math.atan(bh.y,bh.x))-90;if dm<-180 then dm=360+dm end;return dm end;function AlignToWorldVector(dn,dp,dq)if not ap or not bn or am~=-1 or bi<I then local dr=dq;if dr==nil then dr=DampingMultiplier end;if dp==nil then dp=aE end;dn=vec3(dn):normalize()local ds=vec3(core.getConstructWorldOrientationForward())-dn;local dt=-getMagnitudeInDirection(ds,core.getConstructWorldOrientationRight())*aD;local du=-getMagnitudeInDirection(ds,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=dt/2 end;if az==0 then az=du/2 end;if math.abs(dt)<0.1 then P=P-dt*2 else P=P-(dt+(dt-ay)*dr)end;if math.abs(du)<0.1 then O=O+du*2 else O=O+du+(du-az)*dr end;ay=dt;az=du;if math.abs(dt)<dp and math.abs(du)<dp then return true end;return false elseif bn and am==-1 then dn=vec3(core.getWorldVelocity())local dr=dq;if dr==nil then dr=DampingMultiplier end;if dp==nil then dp=aE end;dn=vec3(dn):normalize()local ds=vec3(core.getConstructWorldOrientationForward())-dn;local dt=-getMagnitudeInDirection(ds,core.getConstructWorldOrientationRight())*aD;local du=-getMagnitudeInDirection(ds,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=dt/2 end;if az==0 then az=du/2 end;if math.abs(dt)<0.1 then P=P-dt*5 else P=P-(dt+(dt-ay)*dr)end;if math.abs(du)<0.1 then O=O+du*5 else O=O+du+(du-az)*dr end;ay=dt;az=du;if math.abs(dt)<dp and math.abs(du)<dp then return true end;return false end end;function getAPEnableName()local cm=AutopilotTargetName;if cm==nil then local dv,dw=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cm=CustomTarget.name.." "..dv..dw end;if cm==nil then cm="None"end;return"Engage Autopilot: "..cm end;function getAPDisableName()local cm=AutopilotTargetName;if cm==nil then cm=CustomTarget.name end;if cm==nil then cm="None"end;return"Disable Autopilot: "..cm end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ae=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dx,dy=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..br.." Target Altitude: "..dx..dy end;AutoTakeoff=false end;function SetupButtons()local dz=50;local dA=260;local dB=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dA,dz,aF/2-dA/2,aG/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dA,dz,aF/2-dA/2-50-dB.width,aG/2-dz+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dA,dz,aF/2-dA/2+dB.width+50,aG/2-dz+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dC=MakeButton(getAPEnableName,getAPDisableName,600,60,aF/2-600/2,aG/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dC.height,dC.x+dC.width+30,dC.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dC.height,dC.x+dC.width+30,dC.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dC.height,dC.x-200-30,dC.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dz=60;dA=300;local bW=10;local bX=aG/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dA,dz,bW,bX,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dA,dz,bW+dA+20,bX,function()return AltitudeHold end,ToggleAltitudeHold)bX=bX+dz+20;MakeButton("Engage Autoland","Disable Autoland",dA,dz,bW,bX,function()return AutoLanding end,ToggleAutoLanding)if VertTakeOffEngine then MakeButton("Engage Vertical Takeoff","Disable Vertical Takeoff",dA,dz,bW+dA+20,bX,function()return VertTakeOff end,ToggleAutoTakeoff)else MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dA,dz,bW+dA+20,bX,function()return AutoTakeoff end,ToggleAutoTakeoff)end;bX=bX+dz+20;MakeButton("Show Orbit Display","Hide Orbit Display",dA,dz,bW,bX,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dA,dz,bW+dA+20,bX,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)bX=bX+dz+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dA,dz,bW,bX,function()return Reentry end,function()aj=true;ProgradeToggle()end,function()return aq>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dA,dz,bW+dA+20,bX,function()return Reentry end,BeginReentry,function()return aq>ReentryAltitude end)bX=bX+dz+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dA,dz,bW,bX,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dA,dz,bW+dA+20,bX,function()return aT end,function()aT=not aT;if aT then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)bX=bX+dz+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dA,dz,bW,bX,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bX=bX+dz+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dA*2,dz,bW,bX,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dD=Nav.axisCommandManager:getAxisCommandType(0)local dE="TRAVEL"if dD==1 then dE="CRUISE"end;if Autopilot then dE="AUTOPILOT"end;return dE end;function UpdateHud(cr)local ca=aq;local bh=core.getVelocity()local bQ=vec3(bh):len()local cw=vec3(core.getWorldVertical())local cu=vec3(core.getConstructWorldOrientationForward())local cv=vec3(core.getConstructWorldOrientationRight())local dF=vec3(core.getConstructWorldOrientationUp())local dG=getRoll(cw,cu,cv)local dH=dG/180*math.pi;local dI=math.cos(dH)local dJ=math.sin(dH)local cx=getPitch(cw,cu,cv*dI+dF*dJ)local dK=dG;local dL=cx;local dM=j()local dN=d(unit.getThrottle())local dO=bQ*3.6;local dP=unit.getAxisCommandValue(0)local dQ=ConvertResolutionX(1770)local dR=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dP=z;dN=z*100 end;local dE=GetFlightStyle()local dS="ROLL"local dT=unit.getClosestPlanetInfluence()>0;if dN==nil then dN=0 end;if not dT then if bQ>5 then cx=getRelativePitch(bh)dG=getRelativeYaw(bh)else cx=0;dG=0 end;dS="YAW"end;if x>50000 and not ap then local dU;if x>200000 then dU=round(x/200000,2).." su"else dU=round(x/1000,1).." km"end;cr[#cr+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dQ,dR,dU)end;cr[#cr+1]=ah;cr[#cr+1]=aA;cr[#cr+1]=ag;if b2%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cr,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)DrawTank(cr,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)DrawTank(cr,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b2=0 end;b2=b2+1;DrawVerticalSpeed(cr,ca)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dT then DrawRollLines(cr,centerX,centerY,dK,dS,dT)DrawArtificialHorizon(cr,dL,dK,centerX,centerY,dT,d(getRelativeYaw(bh)),bQ)else DrawRollLines(cr,centerX,centerY,dG,dS,dT)DrawArtificialHorizon(cr,cx,dG,centerX,centerY,dT,d(dG),bQ)end;DrawAltitudeDisplay(cr,ca,dT)DrawPrograde(cr,bh,bQ,centerX,centerY)end end;DrawThrottle(cr,dE,dN,dP)DrawSpeed(cr,dO)DrawWarnings(cr)DisplayOrbitScreen(cr)if screen_2 then local ce=vec3(core.getConstructWorldPos())local bW=960+ce.x/b5;local bX=450+ce.y/b6;screen_2.moveContent(b7,(bW-80)/19.2,(bX-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cr)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;av=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]aw=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local dV=av;local dW=aw;local dX=av;local dY=aw;if IsInFreeLook()and not brightHud then dV=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]dW=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cr[#cr+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dV,dV,dX,dX,dW,dW,dY,dY,ResolutionX,ResolutionY)end;function HUDEpilogue(cr)cr[#cr+1]="</svg>"end;function DrawSpeed(cr,dO)local dZ=throtPosY-10;local d_=throtPosX+10;cr[#cr+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dZ=75 end;cr[#cr+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],d_,dZ,d(dO))end;function DrawOdometer(cr,a8,TotalDistanceTravelled,dE,a9,dM)local e0=ConvertResolutionX(1240)local e1=ConvertResolutionY(55)local e2=e1+10;local dM=j()local bN=core.g()local e3=0;local e4=0;local e5=0;RefreshLastMaxBrake(bN)if ap then e5=LastMaxBrakeInAtmo else e5=LastMaxBrake end;maxThrust=Nav:maxForceForward()aN=n()if not ShowOdometer then return end;local e6=vec3(core.getWorldAcceleration()):len()/9.80665;if bN>0.1 then e4=aN*bN;e3=maxThrust/bN end;cr[#cr+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e0=ConvertResolutionX(1120)e1=ConvertResolutionY(55)e2=e1+10 elseif ap then local e7=ConvertResolutionX(770)cr[#cr+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],e7,e1,e7,e2,dM)end;cr[#cr+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],e0,e1,e0,e2,bN/9.80665,e0,e1+20,e0,e2+20,e6)cr[#cr+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cr[#cr+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a8,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a9),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aN/1000,ConvertResolutionX(1240),ConvertResolutionY(10),e5/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dE)if bN>0.1 then cr[#cr+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e3/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e4/1000)else cr[#cr+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cr[#cr+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dE)end;cr[#cr+1]="</g>"end;function DrawThrottle(cr,dE,dN,dP)dN=math.floor(dN+0.5)local dd=throtPosY+10;local de=throtPosY+20;if o()==1 and not RemoteHud then dd=55;de=65 end;local e8="CRUISE"local unit="km/h"local e9=dP;if dE=="TRAVEL"or dE=="AUTOPILOT"then e8="THROT"unit="%"e9=dN;local ea="dim"if dN<0 then ea="red"end;cr[#cr+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ea,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dN),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cr[#cr+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,dd,e8,throtPosX+10,de,e9,unit)if ap and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dN=math.floor(C*100+0.5)local ea="red"if dN<0 then ea="red"end;cr[#cr+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ea,1-math.abs(dN),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cr[#cr+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,dd+40,"LIMIT",throtPosX+10,de+40,dN,"%")end;if ap and AtmoSpeedAssist or Reentry then cr[#cr+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dd-40,"LIMIT: ",br.." km/h")elseif not ap and Autopilot then cr[#cr+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dd-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cr,ca)if ca<200000 and not ap or ca and ap then local eb=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local ec=0;if math.abs(eb)>1 then ec=45*math.log(math.abs(eb),10)if eb<0 then ec=-ec end end;cr[#cr+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(eb),d(ec))end end;function getHeading(cL)local ed=-vec3(core.getWorldVertical())cL=cL-cL:project_on(ed)local ee=vec3(0,0,1)ee=ee-ee:project_on(ed)local ef=ee:cross(ed)local ec=ee:angle_between(cL)*constants.rad2deg;if cL:dot(ef)<0 then ec=360-ec end;return ec end;function DrawRollLines(cr,centerX,centerY,dK,dS,dT)local eg=circleRad;local eh=20;eh=d(eh)local ei=d(dK)if dT then for i=-45,45,5 do local ej=i;cr[#cr+1]=e([[<g transform="rotate(%f,%d,%d)">]],ej,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cr[#cr+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+eg+eh-len,centerX,centerY+eg+eh)end;cr[#cr+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+eg+eh-35,dS,centerX,centerY+eg+eh-25,ei)cr[#cr+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dK,centerX,centerY)cr[#cr+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+eg+eh-20,centerX+5,centerY+eg+eh-20,centerX,centerY+eg+eh-15)cr[#cr+1]="</g>"end;local dm=ei;if dT then dm=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ek=20;local el=d(dm)local em=0;local en=centerY+eg+eh+20;local eo=centerX;if dS~="YAW"then en=ConvertResolutionY(130)eo=ConvertResolutionX(960)end;local ep=[[<path class="txttick line" d="]]for i=d(el-(ek+10)-el%5+0.5),d(el+ek+10+el%5+0.5),5 do local bW=eo+-i*5+dm*5;if i%10==0 then em=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cr[#cr+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bW+5,en-12,q)elseif i%5==0 then em=5 end;if em==10 then ep=e([[%s M %f %f v %d]],ep,bW,en-5,em)else ep=e([[%s M %f %f v %d]],ep,bW,en-2.5,em)end end;cr[#cr+1]=ep..[["/>]]cr[#cr+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eo-5,en+10,eo+5,en+10,eo,en+5)if dT then dS="HDG"end;cr[#cr+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eo,en+25,el,eo,en+35,dS)end;function DrawArtificialHorizon(cr,dL,dK,centerX,centerY,dT,eq,bQ)local eg=circleRad;local er=d(eg*3/5)if eg>0 then local es=d(dL)local len=0;local ep=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dK,centerX,centerY)if not ap then ep=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cr[#cr+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],eg-1,centerX,centerY)cr[#cr+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(es-30-es%5+0.5),d(es+30+es%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bX=centerY+-i*5+dL*5;if len==30 then ep=e([[%s M %d %f h %d]],ep,centerX-er-len,bX,len)if ap then cr[#cr+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dK,centerX,centerY,centerX-er+10,bX,i)cr[#cr+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dK,centerX,centerY,centerX+er-10,bX,i)if i==0 or i==180 or i==-180 then cr[#cr+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dK,centerX,centerY,centerX-er+20,bX,er*2-40)end else cr[#cr+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-er+10,bX,i)cr[#cr+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+er-10,bX,i)end;ep=e([[%s M %d %f h %d]],ep,centerX+er,bX,len)else ep=e([[%s M %d %f h %d]],ep,centerX-er-len,bX,len)ep=e([[%s M %d %f h %d]],ep,centerX+er,bX,len)end end;cr[#cr+1]=ep..[["/>]]local et="PITCH"if not dT then et="REL PITCH"end;if dL>90 and not ap then dL=90-(dL-90)elseif dL<-90 and not ap then dL=-90-(dL+90)end;if eg>200 then if ap then if bQ>I then cr[#cr+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,eq)end;cr[#cr+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dK,centerX,centerY)else cr[#cr+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cr[#cr+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-er+25,centerY-5,centerX-er+20,centerY,centerX-er+25,centerY+5,centerX-er+50,centerY+4,es)cr[#cr+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+er-25,centerY-5,centerX+er-20,centerY,centerX+er-25,centerY+5,centerX+er-30,centerY+4,es)cr[#cr+1]="</g>"end;local eu=d(eg/3)cr[#cr+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eu,centerY,eg-eu)if not ap and dT then cr[#cr+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dK,centerX,centerY,centerX-er+10,centerY,er*2-20)end;cr[#cr+1]="</g>"if eg<200 then if ap and bQ>I then cr[#cr+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eg,et,centerX,centerY-eg+10,es,centerX,centerY-15,"Yaw",centerX,centerY+20,eq)else cr[#cr+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eg,et,centerX,centerY-eg+15,es)end end end end;function DrawAltitudeDisplay(cr,ca,dT)local ev=altMeterX;local ew=altMeterY;local ex=78;local ey=19;local ez=AboveGroundLevel()if ez~=-1 then table.insert(cr,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ev+ex,ew+ey+20,ez))end;if dT and(ca<200000 and not ap or ca and ap)then table.insert(cr,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ev-1,ew-4,ex+2,ey+6,ev+1,ew-1,ex-4,ey))local cp=0;local eA=1;local eB=0;local eC=ca<0;local eD=9;if eC then eD=0 end;local ca=math.abs(ca)while cp<6 do local eE=11;local eF=16;local eG=9;local eH=14;local dl="altsm"if cp>2 then eF=eF+3;eE=eE+2;eH=eH+2;eG=eG-6;dl="altbig"end;if eC then dl=dl.." red"end;local eI=ca/eA%10;local eJ=d(eI)local eK=d((eJ+1)%10)local eL=eB;if cp==0 then eL=eI-eJ;if eC then eL=1-eL end end;if eC and(cp==0 or eB~=0)then local eM=eK;eK=eJ;eJ=eM end;local eN=eF*(eL-1)local eO=eN+eF;local bW=ev+eG+(6-cp)*eE;local bX=ew+eH;table.insert(cr,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dl,bW,bX+eN,eK,bW,bX+eO,eJ))cp=cp+1;eA=eA*10;if eJ==eD then eB=eL else eB=0 end end;table.insert(cr,[[</g></g>]])end end;function DrawPrograde(cr,bh,bQ,centerX,centerY)if bQ>5 and not ap or bQ>I then local eg=circleRad;local eP=20;local eQ=20;local eR=vec3(bh)local eS=getRelativePitch(eR)local eT=getRelativeYaw(eR)local eU=14;local eV=eU/2;local eW=-eT/eQ*eg;local eX=eS/eP*eg;local bW=centerX+eW;local bX=centerY+eX;local af=math.sqrt(eW^2+eX^2)local eY=[[<circle
                cx="]]..bW..[["
                cy="]]..bX..[["
                r="]]..eV/eU..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bW..[["
                cy="]]..bX..[["
                r="]]..eV..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bW-eU..[[,]]..bX..[[ h ]]..eV..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bW+eV..[[,]]..bX..[[ h ]]..eV..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bW..[[,]]..bX-eU..[[ v ]]..eV..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if af<eg then cr[#cr+1]=eY else local ec=math.atan(eX,eW)local eZ=4;local e_=centerX+eg*math.cos(ec)local f0=centerY+eg*math.sin(ec)cr[#cr+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ec*180/math.pi,e_,f0,e_-eZ,f0-eZ/2,eZ*2,eZ,e_+eZ,f0-eZ,eZ,eZ,-eZ,eZ)end;if not ap then eS=getRelativePitch(-eR)eT=getRelativeYaw(-eR)eW=-eT/eQ*eg;eX=eS/eP*eg;bW=centerX+eW;bX=centerY+eX;af=math.sqrt(eW^2+eX^2)if af<eg then local f1=[[<circle
                        cx="]]..bW..[["
                        cy="]]..bX..[["
                        r="]]..eV..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bW..[[,]]..bX-eU..[[ v ]]..eV..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bW..[[,]]..bX..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bW..[[,]]..bX..[[)" />
                     <path
                        d="M ]]..bW-eV..[[,]]..bX..[[ h ]]..eU..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bW..[[,]]..bX..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bW..[[,]]..bX..[[)"/>]]cr[#cr+1]=f1 end end end end;function DrawWarnings(cr)cr[#cr+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cr[#cr+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cr[#cr+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cr[#cr+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cr[#cr+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local f2=ConvertResolutionX(960)local f3=ConvertResolutionY(860)local f4=ConvertResolutionY(880)local f5=ConvertResolutionY(900)local f6=ConvertResolutionY(960)local f7=ConvertResolutionY(200)local f8=ConvertResolutionY(150)local f9=ConvertResolutionY(960)if o()==1 and not RemoteHud then f3=ConvertResolutionY(135)f4=ConvertResolutionY(155)f5=ConvertResolutionY(175)f7=ConvertResolutionY(115)f8=ConvertResolutionY(95)end;if BrakeIsOn then cr[#cr+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f2,f3)elseif A>0 then cr[#cr+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f2,f3,A)end;if ap and bn and hoverDetectGround()==-1 then cr[#cr+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f2,f7+50)end;if at then cr[#cr+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f2,f9)end;if GearExtended then if M then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f2,f4)else cr[#cr+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f2,f4)end;local dv,dw=getDistanceDisplayString(Nav:getTargetGroundAltitude())cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f2,f5,dv..dw)end;if a0 then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f2,f6+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aq-antigrav.getBaseAltitude())<501 then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f2,f7+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cr[#cr+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f2,f7+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f2,f7+20,AutopilotStatus)elseif LockPitch~=nil then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f2,f7+20,d(LockPitch))elseif U then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f2,f7+20)elseif Reentry then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f2,f7+20)end;local fa,fb,fc=b9:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bh:normalize(),function(fd)if fd.noAtmosphericDensityAltitude>0 then return fd.radius+fd.noAtmosphericDensityAltitude else return fd.radius+fd.surfaceMaxAltitude*1.5 end end)local fe=fb;if fc~=nil and fb~=nil then fe=math.min(fc,fb)end;if AltitudeHold then if AutoTakeoff then local dv,dw=getDistanceDisplayString(HoldAltitude)cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],f2,f7,dv..dw)if BrakeIsOn then cr[#cr+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f2,f7+50)end else local dv,dw=getDistanceDisplayString2(HoldAltitude)cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f2,f7,dv..dw)end end;if VertTakeOff then if j()>0.1 then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f2,f7)elseif j()<0.09 and j()>0.05 then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f2,f7)elseif j()<0.05 then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f2,f7,VertTargetPlanet.name)end end;if IntoOrbit then if bs~=nil then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f2,f7,bs)end end;if BrakeLanding then if StrongBrakes then cr[#cr+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f2,f7)else cr[#cr+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f2,f7)end end;if ProgradeIsOn then cr[#cr+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f2,f7)end;if RetrogradeIsOn then cr[#cr+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f2,f7)end;if TurnBurn then cr[#cr+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f2,f8)elseif fe~=nil and j()==0 then local dv,dw=getDistanceDisplayString(fe)local travelTime=ba.computeTravelTime(bi,0,fe)local ff="Collision"if fa.noAtmosphericDensityAltitude>0 then ff="Atmosphere"end;cr[#cr+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f2,f8,fa.name,ff,FormatTimeString(travelTime),dv..dw)end;if VectorToTarget then cr[#cr+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f2,f7+30,VectorStatus)end;cr[#cr+1]="</g>"end;function DisplayOrbitScreen(cr)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fg=OrbitMapX;local fh=OrbitMapY;local fi=OrbitMapSize;local fj=4;fh=fh+fj;local fk=15;local bW=fg+fi+fg/2+fj;local bX=fh+fi/2+5+fj;local fl,fm,fn,fo;fl=fi/4;fo=0;cr[#cr+1]=[[<g class="pbright txtorb txtmid">]]cr[#cr+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fi+fg*2,fi+fh,fj,fj)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fn=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fl*2)fm=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fn*(1-orbit.eccentricity)fo=fl-orbit.periapsis.altitude/fn-planet.radius/fn;local fp=""if orbit.periapsis.altitude<=0 then fp='redout'end;cr[#cr+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fp,fg+fi/2+fo+fj,fh+fi/2+fj,fl,fm)cr[#cr+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fg+fi/2+fj,fh+fi/2+fj,planet.radius/fn)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cr[#cr+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bW-35,bX-5,fg+fi/2+fl+fo,bX-5)cr[#cr+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bW,bX)bX=bX+fk;local dv,dw=getDistanceDisplayString(orbit.apoapsis.altitude)cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,dv..dw)bX=bX+fk;cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,FormatTimeString(orbit.timeToApoapsis))bX=bX+fk;cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,getSpeedDisplayString(orbit.apoapsis.speed))end;bX=fh+fi/2+5+fj;bW=fg-fg/2+10+fj;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cr[#cr+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bW+35,bX-5,fg+fi/2-fl+fo,bX-5)cr[#cr+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bW,bX)bX=bX+fk;local dv,dw=getDistanceDisplayString(orbit.periapsis.altitude)cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,dv..dw)bX=bX+fk;cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,FormatTimeString(orbit.timeToPeriapsis))bX=bX+fk;cr[#cr+1]=e([[<text x="%f" y="%f">%s</text>]],bW,bX,getSpeedDisplayString(orbit.periapsis.speed))end;cr[#cr+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fg+fi/2+fj,20+fj,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fq=orbit.timeToApoapsis/orbit.period*2*math.pi;local fr=fl*math.cos(fq)local fs=fm*math.sin(fq)cr[#cr+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fg+fi/2+fr+fo+fj,fh+fi/2+fs+fj)end;cr[#cr+1]=[[</g>]]end end;function getDistanceDisplayString(af)local ft=af>100000;local bC,dw=""if ft then bC,dw=round(af/1000/200,1),"SU"elseif af<1000 then bC,dw=round(af,1),"m"else bC,dw=round(af/1000,1),"Km"end;return bC,dw end;function getDistanceDisplayString2(af)local ft=af>100000;local bC,dw=""if ft then bC,dw=round(af/1000/200,2)," SU"elseif af<1000 then bC,dw=round(af,2)," M"else bC,dw=round(af/1000,2)," KM"end;return bC,dw end;function getSpeedDisplayString(bQ)return d(round(bQ*3.6,0)+0.5).." km/h"end;function FormatTimeString(fu)local fv=0;local fw=0;local fx=0;if fu<60 then fu=d(fu)elseif fu<3600 then fv=d(fu/60)fu=d(fu%60)elseif fu<86400 then fw=d(fu/3600)fv=d(fu%3600/60)else fx=d(fu/86400)fw=d(fu%86400/3600)end;if fx>0 then return fx.."d "..fw.."h "elseif fw>0 then return fw.."h "..fv.."m "elseif fv>0 then return fv.."m "..fu.."s"elseif fu>0 then return fu.."s"else return"0s"end end;function getMagnitudeInDirection(dn,fy)dn=vec3(dn)fy=vec3(fy):normalize()local bC=dn*fy;return bC.x+bC.y+bC.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a7=nil;CustomTarget=nil;return true end;local fz=AtlasOrdered[AutopilotTargetIndex].index;local fA=b3[0][fz]if fA.center then AutopilotTargetName=fA.name;a7=b9[0][fz]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fA;for _,bB in pairs(b9[0])do if bB.name==CustomTarget.planetname then a7=bB;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a7.center)else AutopilotTargetCoords=CustomTarget.position end;if a7.planetname~="Space"then if a7.hasAtmosphere then AutopilotTargetOrbit=math.floor(a7.radius*(TargetOrbitRadius-1)+a7.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a7.radius*(TargetOrbitRadius-1)+a7.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bc(a7):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fz=AtlasOrdered[AutopilotTargetIndex].index;local fA=b3[0][fz]if fA.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fz=AtlasOrdered[AutopilotTargetIndex].index;local fA=b3[0][fz]if fA.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fB=LastMaxBrakeInAtmo/a7:getGravity(a7.center+vec3(0,0,1)*a7.radius):len()return fB end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a7.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bh=core.getWorldVelocity()local bQ=vec3(bh):len()local fC=unit.getThrottle()/100;if AtmoSpeedAssist then fC=z end;local fD,fE=ba.computeDistanceAndTime(vec3(bh):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fC,warmup,0)local a1,a2;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fF;if not TurnBurn and bQ>0 then _,fF=GetAutopilotBrakeDistanceAndTime(bQ)else _,fF=GetAutopilotTBBrakeDistanceAndTime(bQ)end;local fG=0;local fH=0;if AutopilotCruising or not Autopilot and bQ>5 then fH=ba.computeTravelTime(bQ,0,AutopilotDistance)elseif a1+fD<AutopilotDistance then fG=AutopilotDistance-(a1+fD)fH=ba.computeTravelTime(8333.0556,0,fG)else local fI=(AutopilotDistance-a1)/fD;fD=AutopilotDistance-a1;fE=fE*fI end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fH elseif AutopilotBraking then return fF elseif AutopilotCruising then return fH+fF else return fE+a2+fH end end;function GetAutopilotBrakeDistanceAndTime(bQ)if not ap then RefreshLastMaxBrake()return ba.computeDistanceAndTime(bQ,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return ba.computeDistanceAndTime(bQ,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bQ)RefreshLastMaxBrake()return ba.computeDistanceAndTime(bQ,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fJ=-1;local fK=-1;if vBooster then fJ=vBooster.distance()end;if hover then fK=hover.distance()end;if fJ~=-1 and fK~=-1 then if fJ<fK then return fJ else return fK end elseif fJ~=-1 then return fJ elseif fK~=-1 then return fK else return-1 end end;function AboveGroundLevel()local fL=-1;local fM=hoverDetectGround()if telemeter_1 then fL=telemeter_1.getDistance()end;if fM~=-1 and fL~=-1 then if fM<fL then return fM else return fL end elseif fM~=-1 then return fM else return fL end end;function tablelength(fN)local fO=0;for _ in pairs(fN)do fO=fO+1 end;return fO end;function BeginProfile(fP)ProfileTimeStart=system.getTime()end;function EndProfile(fP)local fQ=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fQ;ProfileCount=ProfileCount+1;if fQ>ProfileTimeMax then ProfileTimeMax=fQ end;if fQ<ProfileTimeMin then ProfileTimeMin=fQ end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fR=ProfileTimeSum;local fS=ProfileTimeSum/ProfileCount;local fT=ProfileTimeMin;local fU=ProfileTimeMax;local fV=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fR,fS,fT,fU,fV))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fW=radar_1.getEntries()local fX=radar_1.getData()local fY=ConvertResolutionX(1770)local fZ=ConvertResolutionY(330)if#fW>0 then local target=fX:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ai=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ag=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fY,fZ,#fW)local f_={}for bA,bB in pairs(fW)do if radar_1.hasMatchingTransponder(bB)==1 then table.insert(f_,bB)end end;if#f_>0 then local bX=ConvertResolutionY(15)local bW=ConvertResolutionX(1370)ag=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ag,bW,bX)for bA,bB in pairs(f_)do bX=bX+20;ag=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ag,bW,bX,radar_1.getConstructName(bB))end end else local g0;g0=fX:find('worksInEnvironment":false')if g0 then ag=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fY,fZ)else ag=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fY,fZ)end;if radarPanelID~=nil then ai=0;ToggleRadarPanel()end end end end;function DisplayMessage(cr,dv)if dv~="empty"then cr[#cr+1]=[[<text class="msg" x="50%%" y="310" >]]for g1 in string.gmatch(dv,"([^\n]+)")do cr[#cr+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g1)end;cr[#cr+1]=[[</text>]]end;if ae~=0 then unit.setTimer("msgTick",ae)ae=0 end end;function updateDistance()local bJ=system.getTime()local bh=vec3(core.getWorldVelocity())local dO=vec3(bh):len()local g2=bJ-as;if dO>1.38889 then dO=dO/1000;local g3=dO*(bJ-as)TotalDistanceTravelled=TotalDistanceTravelled+g3;a8=a8+g3 end;a9=a9+g2;TotalFlightTime=TotalFlightTime+g2;as=bJ end;function composeAxisAccelerationFromTargetSpeedV(g4,g5)local g6=vec3()local g7=vec3()if g4==axisCommandId.longitudinal then g6=vec3(core.getConstructOrientationForward())g7=vec3(core.getConstructWorldOrientationForward())elseif g4==axisCommandId.vertical then g6=vec3(core.getConstructOrientationUp())g7=vec3(core.getConstructWorldOrientationUp())elseif g4==axisCommandId.lateral then g6=vec3(core.getConstructOrientationRight())g7=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g8=vec3(core.getWorldGravity())local g9=g8:dot(g7)local ga=vec3(core.getWorldAirFrictionAcceleration())local gb=ga:dot(g7)local gc=vec3(core.getVelocity())local gd=gc:dot(g6)local ge=g5*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(ge-gd)local gf=targetSpeedPID2:get()local gg=(gf-gb-g9)*g7;return gg end;function composeAxisAccelerationFromTargetSpeed(g4,g5)local g6=vec3()local g7=vec3()if g4==axisCommandId.longitudinal then g6=vec3(core.getConstructOrientationForward())g7=vec3(core.getConstructWorldOrientationForward())elseif g4==axisCommandId.vertical then g6=vec3(core.getConstructOrientationUp())g7=vec3(core.getConstructWorldOrientationUp())elseif g4==axisCommandId.lateral then g6=vec3(core.getConstructOrientationRight())g7=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g8=vec3(core.getWorldGravity())local g9=g8:dot(g7)local ga=vec3(core.getWorldAirFrictionAcceleration())local gb=ga:dot(g7)local gc=vec3(core.getVelocity())local gd=gc:dot(g6)local ge=g5*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(ge-gd)local gf=targetSpeedPID:get()local gg=(gf-gb-g9)*g7;return gg end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b3=Atlas()for bA,bB in pairs(b3[0])do if aH==nil or bB.center.x<aH then aH=bB.center.x end;if aI==nil or bB.center.x>aI then aI=bB.center.x end;if aJ==nil or bB.center.y<aJ then aJ=bB.center.y end;if aK==nil or bB.center.y>aK then aK=bB.center.y end end;b4=""local gh=1.1*(aI-aH)/1920;local gi=1.4*(aK-aJ)/1080;for bA,bB in pairs(b3[0])do local bW=960+bB.center.x/gh;local bX=540+bB.center.y/gi;b4=b4 ..'<circle cx="'..bW..'" cy="'..bX..'" r="'..bB.radius/gh*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bB.name,"Moon")and not string.match(bB.name,"Sanctuary")and not string.match(bB.name,"Space")then b4=b4 .."<text x='"..bW.."' y='"..bX+bB.radius/gh*30+20 .."' font-size='28' fill="..av.." text-anchor='middle' font-family='Montserrat'>"..bB.name.."</text>"end end;local ce=vec3(core.getConstructWorldPos())local bW=960+ce.x/gh;local bX=540+ce.y/gi;b4=b4 ..'<circle cx="'..bW..'" cy="'..bX..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='"..bW.."' y='"..bX-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b4=b4 ..[[</svg>]]b5=gh;b6=gi;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b4)local ce=vec3(core.getConstructWorldPos())local bW=960+ce.x/gh;local bX=540+ce.y/gi;b4='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='80' y='105' font-size='18' fill="..av.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b7=screen_2.addContent((bW-80)/19.20,(bX-80)/10.80,b4)end end;function PlanetRef()local function gj(gk)return type(gk)=='number'end;local function gl(gk)return type(tonumber(gk))=='number'end;local function gm(gn)return type(gn)=='table'end;local function go(gp)return type(gp)=='string'end;local function gq(bB)return gm(bB)and gj(bB.x and bB.y and bB.z)end;local function gr(gs)return gm(gs)and gj(gs.latitude and gs.longitude and gs.altitude and gs.bodyId and gs.systemId)end;local gt=math.pi/180;local gu=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cf='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gv=utils.clamp;local function float_eq(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*epsilon end;local function gw(gk)local bC=string.gsub(string.reverse(e('%.4f',gk)),'^0*%.?','')return bC==''and'0'or string.reverse(bC)end;local function gx(gy)if gq(gy)then return e('{x=%.3f,y=%.3f,z=%.3f}',gy.x,gy.y,gy.z)end;if gm(gy)and not getmetatable(gy)then local gz={}local gA=next(gy)if type(gA)=='nil'or gA==1 then gz=gy else for bA,bB in pairs(gy)do local e9=gx(bB)if type(bA)=='number'then table.insert(gz,e('[%s]=%s',bA,e9))else table.insert(gz,e('%s=%s',bA,e9))end end end;return e('{%s}',table.concat(gz,','))end;if go(gy)then return e("'%s'",gy:gsub("'",[[\']]))end;return tostring(gy)end;local gB={}gB.__index=gB;gB.__tostring=function(gy,gC)local gD={}for bA in pairs(gy)do table.insert(gD,bA)end;table.sort(gD)local gz={}for _,bA in ipairs(gD)do local e9=gx(gy[bA])if type(bA)=='number'then table.insert(gz,e('[%s]=%s',bA,e9))else table.insert(gz,e('%s=%s',bA,e9))end end;if gC then return e('%s%s',gC,table.concat(gz,',\n'..gC))end;return e('{%s}',table.concat(gz,','))end;gB.__eq=function(gE,gF)return gE.planetarySystemId==gF.planetarySystemId and gE.bodyId==gF.bodyId and float_eq(gE.radius,gF.radius)and float_eq(gE.center.x,gF.center.x)and float_eq(gE.center.y,gF.center.y)and float_eq(gE.center.z,gF.center.z)and float_eq(gE.GM,gF.GM)end;local function gG(cg,ch,gH,c7,gI)assert(gl(cg),'Argument 1 (planetarySystemId) must be a number:'..type(cg))assert(gl(ch),'Argument 2 (bodyId) must be a number:'..type(ch))assert(gl(gH),'Argument 3 (radius) must be a number:'..type(gH))assert(gm(c7),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c7))assert(gl(gI),'Argument 5 (GM) must be a number:'..type(gI))return setmetatable({planetarySystemId=tonumber(cg),bodyId=tonumber(ch),radius=tonumber(gH),center=vec3(c7),GM=tonumber(gI)},gB)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gJ)return e('::pos{%d,%d,%s,%s,%s}',gJ.systemId,gJ.bodyId,gw(gJ.latitude*gu),gw(gJ.longitude*gu),gw(gJ.altitude))end;MapPosition.__eq=function(gE,gF)return gE.bodyId==gF.bodyId and gE.systemId==gF.systemId and float_eq(gE.latitude,gF.latitude)and float_eq(gE.altitude,gF.altitude)and(float_eq(gE.longitude,gF.longitude)or float_eq(gE.latitude,math.pi/2)or float_eq(gE.latitude,-math.pi/2))end;local function gK(gL,ch,cb,cc,ca)local cg=gL;if go(gL)and not cc and not ca and not ch and not cb then cg,ch,cb,cc,ca=string.match(gL,cf)assert(cg,'Argument 1 (position string) is malformed.')else assert(gl(cg),'Argument 1 (systemId) must be a number:'..type(cg))assert(gl(ch),'Argument 2 (bodyId) must be a number:'..type(ch))assert(gl(cb),'Argument 3 (latitude) must be in degrees:'..type(cb))assert(gl(cc),'Argument 4 (longitude) must be in degrees:'..type(cc))assert(gl(ca),'Argument 5 (altitude) must be in meters:'..type(ca))end;cg=tonumber(cg)ch=tonumber(ch)cb=tonumber(cb)cc=tonumber(cc)ca=tonumber(ca)if ch==0 then return setmetatable({latitude=cb,longitude=cc,altitude=ca,bodyId=ch,systemId=cg},MapPosition)end;return setmetatable({latitude=gt*gv(cb,-90,90),longitude=gt*(cc%360),altitude=ca,bodyId=ch,systemId=cg},MapPosition)end;local gM={}gM.__index=gM;gM.__tostring=function(gy,gC)local gN=gC and gC..'  'local gO={}local gD={}for bA in pairs(gy)do table.insert(gD,bA)end;table.sort(gD)for _,gP in ipairs(gD)do bdy=gy[gP]local gQ=gB.__tostring(bdy,gN)if gC then table.insert(gO,e('[%s]={\n%s\n%s}',gP,gQ,gC))else table.insert(gO,e('  [%s]=%s',gP,gQ))end end;if gC then return e('\n%s%s%s',gC,table.concat(gO,',\n'..gC),gC)end;return e('{\n%s\n}',table.concat(gO,',\n'))end;local function gR(gS)local b3={}local pid;for _,bB in pairs(gS)do local cn=bB.planetarySystemId;if type(cn)~='number'then error('Invalid planetary system ID: '..tostring(cn))elseif pid and cn~=pid then error('Mismatch planetary system IDs: '..cn..' and '..pid)end;local gT=bB.bodyId;if type(gT)~='number'then error('Invalid body ID: '..tostring(gT))elseif b3[gT]then error('Duplicate body ID: '..tostring(gT))end;setmetatable(bB.center,getmetatable(vec3.unit_x))b3[gT]=setmetatable(bB,gB)pid=cn end;return setmetatable(b3,gM)end;b8={}local function gU(gS)return setmetatable({galaxyAtlas=gS or{}},b8)end;b8.__index=function(gn,i)if type(i)=='number'then local system=gn.galaxyAtlas[i]return gR(system)end;return rawget(b8,i)end;b8.__pairs=function(gy)return function(gn,bA)local gV,nv=next(gn,bA)return gV,nv and gR(nv)end,gy.galaxyAtlas,nil end;b8.__tostring=function(gy)local gW={}for _,gX in pairs(gy or{})do local gY=gX:getPlanetarySystemId()local gZ=gM.__tostring(gX,'    ')table.insert(gW,e('  [%s]={%s\n  }',gY,gZ))end;return e('{\n%s\n}\n',table.concat(gW,',\n'))end;b8.BodyParameters=gG;b8.MapPosition=gK;b8.PlanetarySystem=gR;function b8.createBodyParameters(g_,ch,h0,h1,h2,h3,h4)assert(gl(g_),'Argument 1 (planetarySystemId) must be a number:'..type(g_))assert(gl(ch),'Argument 2 (bodyId) must be a number:'..type(ch))assert(gl(h0),'Argument 3 (surfaceArea) must be a number:'..type(h0))assert(gm(h1),'Argument 4 (aPosition) must be an array or vec3:'..type(h1))assert(gm(h2),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h2))assert(gl(h3),'Argument 6 (altitude) must be in meters:'..type(h3))assert(gl(h4),'Argument 7 (gravityAtPosition) must be number:'..type(h4))local gH=math.sqrt(h0/4/math.pi)local af=gH+h3;local h5=vec3(h1)+af*vec3(h2)local gI=h4*af*af;return gG(g_,ch,gH,h5,gI)end;b8.isMapPosition=gr;function b8:getPlanetarySystem(gL)if i==nil then i=0 end;if nv==nil then nv=0 end;local g_=gL;if gr(gL)then g_=gL.systemId end;if type(g_)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gM then system=gR(system)end;return system end end end;function gM:castIntersections(h6,fy,h7,h8)local h7=h7 or function(fd)return 1.05*fd.radius end;local h9={}if h8 then for _,i in ipairs(h8)do h9[i]=self[i]end else h8={}for bA,fd in pairs(self)do table.insert(h8,bA)h9[bA]=fd end end;local function ha(hb,hc)local hd=h9[hb].center-h6;local he=h9[hc].center-h6;return hd:len()<he:len()end;table.sort(h8,ha)local hf=fy:normalize()for i,cn in ipairs(h8)do local fd=h9[cn]local hg=fd.center-h6;local gH=h7(fd)local hh=hg:dot(hf)local hi=hh^2-(hg:len2()-gH^2)if hi>=0 then local hj=math.sqrt(hi)local fb=hh+hj;local fc=hh-hj;if fc>0 then return fd,fb,fc elseif fb>0 then return fd,fb,nil end end end;return nil,nil,nil end;function gM:closestBody(hk)assert(type(hk)=='table','Invalid coordinates.')local hl,fd;local hm=vec3(hk)for _,hn in pairs(self)do local ho=(hn.center-hm):len2()if(not fd or ho<hl)and hn.name~="Space"then fd=hn;hl=ho end end;return fd end;function gM:convertToBodyIdAndWorldCoordinates(gL)local hp=gL;if go(gL)then hp=gK(gL)end;if hp.bodyId==0 then return 0,vec3(hp.latitude,hp.longitude,hp.altitude)end;local hn=self:getBodyParameters(hp)if hn then return hp.bodyId,hn:convertToWorldCoordinates(hp)end end;function gM:getBodyParameters(gL)local ch=gL;if gr(gL)then ch=gL.bodyId end;assert(gl(ch),'Argument 1 (bodyId) must be a number:'..type(ch))return self[ch]end;function gM:getPlanetarySystemId()local _,bB=next(self)return bB and bB.planetarySystemId end;function gB:convertToMapPosition(c7)assert(gm(c7),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c7))local c8=vec3(c7)if self.bodyId==0 then return setmetatable({latitude=c8.x,longitude=c8.y,altitude=c8.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c9=c8-self.center;local af=c9:len()local ca=af-self.radius;local cb=0;local cc=0;if not float_eq(af,0)then local cd=math.atan(c9.y,c9.x)cc=cd>=0 and cd or 2*math.pi+cd;cb=math.pi/2-math.acos(c9.z/af)end;return setmetatable({latitude=cb,longitude=cc,altitude=ca,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gB:convertToWorldCoordinates(gL)local hp=go(gL)and gK(gL)or gL;if hp.bodyId==0 then return vec3(hp.latitude,hp.longitude,hp.altitude)end;assert(gr(hp),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hp.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hp.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ci=math.cos(hp.latitude)return self.center+(self.radius+hp.altitude)*vec3(ci*math.cos(hp.longitude),ci*math.sin(hp.longitude),math.sin(hp.latitude))end;function gB:getAltitude(c7)return(vec3(c7)-self.center):len()-self.radius end;function gB:getDistance(c7)return(vec3(c7)-self.center):len()end;function gB:getGravity(c7)local hq=self.center-vec3(c7)local hr=hq:len2()return self.GM/hr*hq/math.sqrt(hr)end;return setmetatable(b8,{__call=function(_,...)return gU(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function go(gp)return type(gp)=='string'end;local function gm(gn)return type(gn)=='table'end;local function float_eq(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ca)assert(self.body)local af=ca+self.body.radius;if not float_eq(af,0)then local orbit=math.sqrt(self.body.GM/af)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gL,bh)assert(self.body)assert(gm(gL)or go(gL))assert(gm(bh))local ce=(go(gL)or PlanetRef.isMapPosition(gL))and self.body:convertToWorldCoordinates(gL)or vec3(gL)local bB=vec3(bh)local hs=ce-self.body.center;local he=bB:len2()local ht=hs:len()local hu=self.body.GM;local hv=((he-hu/ht)*hs-hs:dot(bB)*bB)/hu;local c4=hu/(2*hu/ht-he)local hw=hv:len()local hf=hv:normalize()local hx=c4*(1-hw)local hy=c4*(1+hw)local hz=hx*hf+self.body.center;local hA=hw<=1 and-hy*hf+self.body.center or nil;local hB=math.sqrt(c4*hu*(1-hw*hw))local hC=hA and 2*math.pi*math.sqrt(c4^3/hu)local hD=math.acos(hv:dot(hs)/(hw*ht))if hs:dot(bB)<0 then hD=-(hD-2*math.pi)end;local hE=math.acos((math.cos(hD)+hw)/(1+hw*math.cos(hD)))local hF=hE;if hF<0 then hF=hF+2*math.pi end;local hG=hF-hw*math.sin(hF)local hH=0;local hI=0;local hJ=0;if hC~=nil then hH=hG/(2*math.pi/hC)hI=hC-hH;hJ=hI+hC/2;if hD-math.pi>0 then hI=hH;hJ=hI+hC/2 end;if hJ>hC then hJ=hJ-hC end end;return{periapsis={position=hz,speed=hB/hx,circularOrbitSpeed=math.sqrt(hu/hx),altitude=hx-self.body.radius},apoapsis=hA and{position=hA,speed=hB/hy,circularOrbitSpeed=math.sqrt(hu/hy),altitude=hy-self.body.radius},currentVelocity=bB,currentPosition=ce,eccentricity=hw,period=hC,eccentricAnomaly=hE,meanAnomaly=hG,timeToPeriapsis=hI,timeToApoapsis=hJ}end;local function hK(hL)local hn=PlanetRef.BodyParameters(hL.planetarySystemId,hL.bodyId,hL.radius,hL.center,hL.GM)return setmetatable({body=hn},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hK(...)end})end;function Kinematics()local ba={}local hM=30000000/3600;local hN=hM*hM;local hO=100;local function hP(bB)return 1/math.sqrt(1-bB*bB/hN)end;function ba.computeAccelerationTime(hQ,hR,hS)local hT=hM*math.asin(hQ/hM)return(hM*math.asin(hS/hM)-hT)/hR end;function ba.computeDistanceAndTime(hQ,hS,hU,hV,hW,hX)hW=hW or 0;hX=hX or 0;local hY=hQ<=hS;local hZ=hV*(hY and 1 or-1)/hU;local h_=-hX/hU;local i0=hZ+h_;if hY and i0<=0 or not hY and i0>=0 then return-1,-1 end;local i1,i2=0,0;if hZ~=0 and hW>0 then local hT=math.asin(hQ/hM)local i3=math.pi*(hZ/2+h_)local i4=hZ*hW;local i5=hM*math.pi;local bB=function(gn)local cS=(i3*gn-i4*math.sin(math.pi*gn/2/hW)+i5*hT)/i5;local i6=math.tan(cS)return hM*i6/math.sqrt(i6*i6+1)end;local i7=hY and function(gp)return gp>=hS end or function(gp)return gp<=hS end;i2=2*hW;if i7(bB(i2))then local i8=0;while math.abs(i2-i8)>0.5 do local gn=(i2+i8)/2;if i7(bB(gn))then i2=gn else i8=gn end end end;local i9=hQ;local ia=i2/hO;for ib=1,hO do local bQ=bB(ib*ia)i1=i1+(bQ+i9)*ia/2;i9=bQ end;if i2<2*hW then return i1,i2 end;hQ=i9 end;local hT=hM*math.asin(hQ/hM)local bD=(hM*math.asin(hS/hM)-hT)/i0;local ic=hN*math.cos(hT/hM)/i0;local af=ic-hN*math.cos((i0*bD+hT)/hM)/i0;return af+i1,bD+i2 end;function ba.computeTravelTime(hQ,hR,af)if af==0 then return 0 end;if hR>0 then local hT=hM*math.asin(hQ/hM)local ic=hN*math.cos(hT/hM)/hR;return(hM*math.acos(hR*(ic-af)/hN)-hT)/hR end;if hQ==0 then return-1 end;assert(hQ>0,'Acceleration and initial speed are both zero.')return af/hQ end;function ba.lorentz(bB)return hP(bB)end;return ba end;function safeZone(id)local gH=500000;local ie,ig,ih=math.huge;local ii=false;local ij=vec3({13771471,7435803,-128971})local ik=18000000;ie=vec3(id):dist(ij)if ie<ik then return true,math.abs(ie-ik),"Safe Zone",0 end;ig=vec3(id):dist(vec3(planet.center))if ig<gH then ii=true end;if math.abs(ig-gH)<math.abs(ie-ik)then return ii,math.abs(ig-gH),planet.name,planet.bodyId else return ii,math.abs(ie-ik),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.4;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b8=PlanetRef()b9=b8(Atlas())ba=Kinematics()bc=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(il)if dbHud_1 then if not aa then for bA,bB in pairs(b)do dbHud_1.setStringValue(bB,g(_G[bB]))if il and dbHud_2 then dbHud_2.setStringValue(bB,g(_G[bB]))end end;for bA,bB in pairs(a)do dbHud_1.setStringValue(bB,g(_G[bB]))if il and dbHud_2 then dbHud_2.setStringValue(bB,g(_G[bB]))end end;c("Saved Variables to Datacore")if il and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bL=j()if door and(bL>0 or bL==0 and aq<10000)then for _,bB in pairs(door)do bB.toggle()end end;if switch then for _,bB in pairs(switch)do bB.toggle()end end;if forcefield and(bL>0 or bL==0 and aq<10000)then for _,bB in pairs(forcefield)do bB.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(im)if im=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local io=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if io and not Autopilot then af=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else af=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(bi)a3,a4=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(bi)a3,a4=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dv,dw=getDistanceDisplayString(af)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dv..'", "unit":"'..dw..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dv,dw=getDistanceDisplayString(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dv..'", "unit":"'..dw..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a2)..'", "unit":""}')dv,dw=getDistanceDisplayString(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dv..'", "unit":"'..dw..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dv,dw=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dv)..'", "unit":"'..dw..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif im=="oneSecond"then an=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cr={}local dE=GetFlightStyle()DrawOdometer(cr,a8,TotalDistanceTravelled,dE,a9)if ShouldCheckDamage then CheckDamage(cr)end;ah=table.concat(cr,"")collectgarbage("collect")elseif im=="fiveSecond"then ao=dbHud_1.getStringValue("SPBAutopilotTargetName")if ao~=nil and ao~=""and ao~="SatNavNotChanged"then local bC=json.decode(dbHud_1.getStringValue("SavedLocations"))if bC~=nil then _G["SavedLocations"]=bC;local cp=-1;local cl;for bA,bB in pairs(SavedLocations)do if bB.name and bB.name=="SatNav Location"then cp=bA;break end end;if cp~=-1 then cl=SavedLocations[cp]cp=-1;for bA,bB in pairs(b3[0])do if bB.name and bB.name=="SatNav Location"then cp=bA;break end end;if cp>-1 then b3[0][cp]=cl end;UpdateAtlasLocationsList()W=cl.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ao then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif im=="msgTick"then local cr={}DisplayMessage(cr,"empty")W="empty"unit.stopTimer("msgTick")ae=3 elseif im=="animateTick"then be=true;bd=false;ac=0;ad=0;unit.stopTimer("animateTick")elseif im=="hudTick"then local cr={}HUDPrologue(cr)if showHud then UpdateHud(cr)else DisplayOrbitScreen(cr)DrawWarnings(cr)end;HUDEpilogue(cr)cr[#cr+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cr,W)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cr)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cr)if screen_1.getMouseState()==1 then CheckButtons()end;cr[#cr+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cr)if not bd and not be then local ip=table.concat(cr,"")cr={}cr[#cr+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cr[#cr+1]=b4;cr[#cr+1]=ip;cr[#cr+1]="</body>"bd=true;cr[#cr+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cr,"")system.setScreen(content)elseif be then local ip=table.concat(cr,"")cr={}cr[#cr+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cr[#cr+1]=b4;cr[#cr+1]=ip;cr[#cr+1]="</body>"end;if not bd then cr[#cr+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if af>DeadZone then DrawCursorLine(cr)end else SetButtonContains()DrawButtons(cr)end;cr[#cr+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ac,ad)end;cr[#cr+1]=[[</svg></body>]]content=table.concat(cr,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif im=="apTick"then bg=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ap=j()>0;local bD=system.getTime()local iq=bD-bo;bo=bD;local cu=vec3(core.getConstructWorldOrientationForward())local cv=vec3(core.getConstructWorldOrientationRight())local ir=vec3(core.getConstructWorldOrientationUp())local cw=vec3(core.getWorldVertical())local is=vec3(core.getConstructWorldPos())local it=core.getVelocity()local dG=getRoll(cw,cu,cv)local dH=dG/180*math.pi;local dI=math.cos(dH)local dJ=math.sin(dH)local cx=getPitch(cw,cu,cv)local iu=getPitch(cw,cu,cv*dI+ir*dJ)local iv=-math.deg(cN(ir,bh,cu))local iw=math.deg(cN(cv,bh,cu))bn=ap and iv<-YawStallAngle or iv>YawStallAngle or iw<-PitchStallAngle or iw>PitchStallAngle;bl=system.getMouseDeltaX()bm=system.getMouseDeltaY()if InvertMouse and not V then bm=-bm end;P=0;T=0;O=0;bh=vec3(core.getWorldVelocity())bi=vec3(bh):len()sys=b9[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bc(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bh)am=hoverDetectGround()local bN=planet:getGravity(core.getConstructWorldPos()):len()*n()bp=0;bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(is)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ac=screen_1.getMouseX()*ResolutionX;ad=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not bd then ac=ac+bl;ad=ad+bm end else ac=0;ad=0 end else ac=ac+bl;ad=ad+bm;af=math.sqrt(ac*ac+ad*ad)if not V and o()==0 then if userControlScheme=="virtual joystick"then if ac>0 and ac>DeadZone then P=P-(ac-DeadZone)*MouseXSensitivity elseif ac<0 and ac<DeadZone*-1 then P=P-(ac+DeadZone)*MouseXSensitivity else P=0 end;if ad>0 and ad>DeadZone then O=O-(ad-DeadZone)*MouseYSensitivity elseif ad<0 and ad<DeadZone*-1 then O=O-(ad+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then ac=0;ad=0;O=(-utils.smoothstep(bm,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bl,-100,100)+0.5)*2*L else ac=0;ad=0 end end end;local ix=bi>8334;if bi>SpaceSpeedLimit/3.6 and not ap and not Autopilot and not ix then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not ix and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=ix;if ap and j()>0.09 then if bi>br/3.6 and not AtmoSpeedAssist and not au then BrakeIsOn=true;au=true elseif not AtmoSpeedAssist and au then if bi<br/3.6 then BrakeIsOn=false;au=false end end end;if BrakeIsOn then S=1 else S=0 end;aq=core.getAltitude()if aq==0 then aq=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if aj then BrakeIsOn=false;local iy=false;if CustomTarget~=nil then iy=AlignToWorldVector(CustomTarget.position-is,0.01)else iy=AlignToWorldVector(vec3(bh),0.01)end;bf=true;if iy and(math.abs(dG)<2 or math.abs(iu)>85)and bi>=br/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;aj=false;al=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(br))z=0 end elseif bi>I then AlignToWorldVector(vec3(bh),0.01)end end;if RetrogradeIsOn then if ap then RetrogradeIsOn=false elseif bi>I then AlignToWorldVector(-vec3(bh))end end;if not ProgradeIsOn and aj then if j()==0 then J=true;BeginReentry()aj=false;al=true else aj=false;ToggleAutopilot()end end;local ed=vec3(core.getWorldVertical())*-1;local eb=bh.x*ed.x+bh.y*ed.y+bh.z*ed.z;if al and(aq<HoldAltitude+200 and aq>HoldAltitude-200)and bi*3.6>br-100 and math.abs(eb)<20 and j()>=0.1 and(CustomTarget.position-is):len()>2000+aq then ToggleAutopilot()al=false end;if Autopilot and j()==0 and not aj then local iz=AutopilotTargetCoords;local iA=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iB=(CustomTarget.position-a7.center):normalize()local iC=iB:project_on_plane((a7.center-is):normalize()):normalize()local iD=a7.center+iC*(a7.radius+AutopilotTargetOrbit)local iE=CustomTarget.position+(CustomTarget.position-a7.center):normalize()*(AutopilotTargetOrbit-a7:getAltitude(CustomTarget.position))if not TargetSet then if(is-iD):len()<(is-iE):len()then iz=iD;AutopilotTargetCoords=iz else iz=CustomTarget.position+(CustomTarget.position-a7.center):normalize()*(AutopilotTargetOrbit-a7:getAltitude(CustomTarget.position))AutopilotTargetCoords=iz end;local cy=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)iA=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;iA=true;TargetSet=true;AutopilotRealigned=true;iz=CustomTarget.position+(is-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iB=(is+bh*100000-a7.center):normalize()local iC=iB:project_on_plane((a7.center-is):normalize()):normalize()if iC:len()<1 then iB=(is+vec3(core.getConstructWorldOrientationForward())*100000-a7.center):normalize()iC=iB:project_on_plane((a7.center-is):normalize()):normalize()end;iz=a7.center+iC*(a7.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iz;TargetSet=true;iA=true;AutopilotRealigned=true;local cy=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)end end;AutopilotDistance=(vec3(iz)-vec3(core.getConstructWorldPos())):len()local fa,fb,fc=b9:getPlanetarySystem(0):castIntersections(is,bh:normalize(),function(fd)if fd.noAtmosphericDensityAltitude>0 then return fd.radius+fd.noAtmosphericDensityAltitude else return fd.radius+fd.surfaceMaxAltitude*1.5 end end)local fe=fb;if fc~=nil and fb~=nil then fe=math.min(fc,fb)end;if fe~=nil and fe<AutopilotDistance and fa.name==a7.name then AutopilotDistance=fe end;local iy=true;local iF=(a7.center-(vec3(core.getConstructWorldPos())+vec3(bh):normalize()*AutopilotDistance)):len()-a7.radius;local dv,dw=getDistanceDisplayString(iF)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dv..'", "unit":"'..dw..'"}')local a1,a2;if not TurnBurn then a1,a2=GetAutopilotBrakeDistanceAndTime(bi)else a1,a2=GetAutopilotTBBrakeDistanceAndTime(bi)end;if bi>300 and AutopilotAccelerating then local ds=vec3(iz)-vec3(core.getConstructWorldPos())local iG=utils.clamp(math.deg(cN(ir,bh:normalize(),ds:normalize()))*bi/500,-90,90)local iH=utils.clamp(math.deg(cN(cv,bh:normalize(),ds:normalize()))*bi/500,-90,90)if math.abs(iG)<20 and math.abs(iH)<20 then iG=iG*2;iH=iH*2 end;if math.abs(iG)<2 and math.abs(iH)<2 then iG=iG*2;iH=iH*2 end;local iv=-math.deg(cN(ir,cu,bh:normalize()))local iw=-math.deg(cN(cv,cu,bh:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iH-iw)local iI=utils.clamp(apPitchPID:get(),-1,1)O=O+iI;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iG-iv)local iJ=utils.clamp(apYawPID:get(),-1,1)P=P+iJ;iA=true;if math.abs(iG)>2 or math.abs(iH)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iF<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bc(a7):escapeAndOrbitalSpeed(iF)end end;if not AutopilotCruising and not AutopilotBraking and not iA then iy=AlignToWorldVector((iz-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iy=AlignToWorldVector(-vec3(bh):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fC=unit.getThrottle()if AtmoSpeedAssist then fC=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fC==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)z=1 end;local _,iK=bc(a7):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local ds,iL,iM;if CustomTarget~=nil then ds=CustomTarget.position-is;iL=planet:getAltitude(CustomTarget.position)iM=math.sqrt(ds:len()^2-(aq-iL)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bi<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bi<=iK and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;local cy=zeroConvertToMapPosition(a7,AutopilotTargetCoords)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iK=bc(a7):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bi<=iK then if CustomTarget~=nil then if bh:normalize():dot(ds:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cy=zeroConvertToMapPosition(a7,CustomTarget.position)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;BrakeIsOn=false;local cy=zeroConvertToMapPosition(a7,CustomTarget.position)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;aj=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fC=unit.getThrottle()if AtmoSpeedAssist then fC=z end;if fC>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iy then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not aj then AutopilotTargetCoords=vec3(a7.center)+(AutopilotTargetOrbit+a7.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iy then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;G=false;ProgradeIsOn=true;aj=true;local cy=zeroConvertToMapPosition(a7,CustomTarget.position)cy="::pos{"..cy.systemId..","..cy.bodyId..","..cy.latitude..","..cy.longitude..","..cy.altitude.."}"system.setWaypoint(cy)end;if U then bf=true;local iH=0;local ce=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iN=ce-vec3(core.getConstructWorldPos())local iO=vec3(iN):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iP=vec3(iN):project_on(vec3(core.getConstructWorldOrientationRight())):len()local af=math.sqrt(iO*iO+iP*iP)AlignToWorldVector(iN:normalize())local iQ=40;local iR=af<iQ;local iS=100;local g5=utils.clamp((af-iQ)/2,10,iS)O=0;local iy=math.abs(P)<0.1;if iy and bi<g5 and not iR then BrakeIsOn=false;iH=-20 else BrakeIsOn=true;iH=0 end;local iT=0;if math.abs(iH-cx)>iT then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iH-cx)local iI=pitchPID:get()O=iI end end;if VertTakeOff then Autopilot=false;AltitudeHold=false;if VertTargetPlanet==nil then VertTargetPlanet=planet end;local iU=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local iV=nil;if j()>0.08 then iV=0;bf=true;BrakeIsOn=false;ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then ab=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)iV=36;if iU<10 then BrakeIsOn=true;S=1 else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)BrakeIsOn=true;S=1;W="Takeoff completed. Parking."ToggleAutoTakeoff()end;if iV~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iW=utils.clamp(iV-iu,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iW)local iX=utils.clamp(vTpitchPID:get(),-1,1)O=iX end end;if IntoOrbit then local iU=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local iY,iK=bc(OrbitTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-OrbitTargetPlanet.center):len()-OrbitTargetPlanet.radius)local iZ=getRoll(cw,cu,cv)if not OrbitTargetSet then if OrbitTargetPlanet.hasAtmosphere then OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.noAtmosphericDensityAltitude)else OrbitTargetOrbit=math.floor(OrbitTargetPlanet.radius*(TargetOrbitRadius-1)+OrbitTargetPlanet.surfaceMaxAltitude)end;OrbitTargetSet=true end;if orbit.periapsis~=nil and orbit.eccentricity<1 and aq>OrbitTargetOrbit and aq<OrbitTargetOrbit*1.3 and orbit.periapsis.altitude>0 then if orbit.apoapsis~=nil then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;if orbit.periapsis.altitude>OrbitTargetOrbit*0.9 and orbit.periapsis.altitude<OrbitTargetOrbit*1.2 and orbit.apoapsis.altitude>orbit.periapsis.altitude and orbit.apoapsis.altitude<=orbit.periapsis.altitude*1.35 then BrakeIsOn=false;z=0;bt=0;bu=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)OrbitAchieved=true;if iu>2 or iu<-2 then bv=0 else W="Orbit established"bs=nil;by=false;OrbitTargetSet=false;OrbitTargetPlanet=nil;bf=autoRollPreference;ToggleIntoOrbit()end else bs="Adjusting Orbit"by=true;if orbit.periapsis.altitude<OrbitTargetOrbit then if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then if bi+10>iK then if iU>15 then bv=-80;bt=0.5;BrakeIsOn=false elseif iU<-15 then bv=80;bt=0.5;BrakeIsOn=false else bt=0;BrakeIsOn=true end elseif bi-10<iK then bv=80;bt=0.5;BrakeIsOn=false else bt=0;BrakeIsOn=true end else bv=80;bt=0.5;BrakeIsOn=false end else if orbit.apoapsis.altitude>orbit.periapsis.altitude*1.25 then bt=0;BrakeIsOn=true elseif orbit.periapsis.altitude<OrbitTargetOrbit*1.2 then bv=-80;bt=0.5;BrakeIsOn=false end end end end;if bt>0 and iu<=bv+3 and iu>=bv-3 then z=bt;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bt)elseif not OrbitAchieved then z=0.05;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0.05)end else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;local i_=iY%50;local j0=0;if i_>0 then j0=iY-i_+50 else j0=iY end;BrakeIsOn=false;bu=j0*2.5;if not bx then local j1=false;local j2=false;if aq<OrbitTargetOrbit then bs="Aligning to orbital path"else bs="Aligning to orbital point"end;bv=0;bw=0;if iu<=bv+1 and iu>=bv-1 then j1=true else j1=false end;if iZ<=bw+1 and iZ>=bw-1 then j2=true else j2=false end;if j1 and j2 then bv=nil;bw=nil;bx=true end else if aq<OrbitTargetOrbit*0.8 then bs="Escaping planet gravity"bv=35 elseif aq>=OrbitTargetOrbit*0.8 and aq<OrbitTargetOrbit*1.01 then bs="Approaching orbital corridor"bv=utils.map(aq,OrbitTargetOrbit*0.6,OrbitTargetOrbit,35,0)elseif aq>=OrbitTargetOrbit*1.01 and aq<OrbitTargetOrbit*1.5 then bs="Approaching orbital corridor"if iU<0 or by then bv=utils.map(aq,OrbitTargetOrbit*1.5,OrbitTargetOrbit*1.01,-30,0)else bv=utils.map(aq,OrbitTargetOrbit*0.99,OrbitTargetOrbit*1.5,0,30)end elseif aq>OrbitTargetOrbit*1.5 then bv=-80;bs="Reentering orbital corridor"end end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bu)end;if bv~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local j3=bv-iu;OrbitPitchPID:inject(j3)local j4=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=j4 end;if bw~=nil then if iu<85 then local j5=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(j5*0.01,0,j5*0.1)end;local j6=bw-iZ;OrbitRollPID:inject(j6)local j7=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=j7 end end elseif CancelIntoOrbit then BrakeIsOn=true;S=1;W="Orbitting cancelled, parking"OrbitTargetSet=false;OrbitTargetPlanet=nil;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)CancelIntoOrbit=false end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dT=unit.getClosestPlanetInfluence()>0;local j8=HoldAltitude-aq;local j9=500+bi;local ja=1;if AutoTakeoff then ja=utils.clamp(bi/100,0.1,1)end;local iH=(utils.smoothstep(j8,-j9,j9)-0.5)*2*MaxPitch*ja;if not Reentry and not aj and not VectorToTarget and cu:dot(bh:normalize())<0.99 then iH=(utils.smoothstep(j8,-j9*utils.clamp(20-19*j()*10,1,20),j9*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*ja end;if not AltitudeHold then iH=0 end;if LockPitch~=nil then if dT then iH=LockPitch else LockPitch=nil end end;bf=true;local jb=O;if Reentry then local ReentrySpeed=math.floor(br)local jc,jd=ba.computeDistanceAndTime(bi,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local je=aq-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and aq>planet.noAtmosphericDensityAltitude+5000 and bi<=ReentrySpeed/3.6 and bi>ReentrySpeed/3.6-10 and math.abs(bh:normalize():dot(cu))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jc>-1 and je<=jc or aq<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not J then iH=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iH=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aq>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif aq<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==br then J=false;Reentry=false;bf=true end end end;if bi>I and not ak and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bh))end;if(VectorToTarget or ak)and AutopilotTargetIndex>0 and j()>0.01 then local ds;if CustomTarget~=nil then ds=CustomTarget.position-vec3(core.getConstructWorldPos())else ds=a7.center-is end;local ir=vec3(core.getConstructWorldOrientationUp())local iG=math.deg(cN(cw:normalize(),bh,ds))*2;local jf=math.rad(math.abs(dG))if bi>minRollVelocity and j()>0.01 then local jg=utils.clamp(90-iH*2,-90,90)bp=utils.clamp(iG*2,-jg,jg)local jh=iG;iG=utils.clamp(utils.clamp(iG,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jf)+4*(iu-iH)*math.sin(math.rad(dG)),-YawStallAngle*0.85,YawStallAngle*0.85)iH=utils.clamp(utils.clamp(iH*math.cos(jf),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jh)*math.sin(jf),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bp=0;iG=utils.clamp(iG,-YawStallAngle*0.85,YawStallAngle*0.85)end;local ji=iv-iG;if not bn and bi>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(ji)local iJ=utils.clamp(yawPID:get(),-1,1)P=P+iJ elseif ap and am>-1 or bi<minRollVelocity then AlignToWorldVector(ds)elseif bn and j()>0.01 then if(iv<-YawStallAngle or iv>YawStallAngle)and j()>0.01 then AlignToWorldVector(bh)end;if(iw<-PitchStallAngle or iw>PitchStallAngle)and j()>0.01 then iH=utils.clamp(iu-iw,iu-PitchStallAngle*0.85,iu+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ak then local iL=planet:getAltitude(CustomTarget.position)local je=math.sqrt(ds:len()^2-(aq-iL)^2)local jj=LastMaxBrakeInAtmo;if jj then jj=jj*utils.clamp(bi/100,0.1,1)*j()else jj=LastMaxBrake end;if j()<0.01 then jj=LastMaxBrake else end;local eb=bh.x*ed.x+bh.y*ed.y+bh.z*ed.z;local jk=bh:len()-math.abs(eb)local jl=vec3(core.getWorldAirFrictionAcceleration())local jm=math.sqrt(jl:len()-jl:project_on(ed):len())*n()if bi>100 then a1,a2=ba.computeDistanceAndTime(bi,100,n(),0,0,jj+jm)local jn,jo=ba.computeDistanceAndTime(100,0,n(),0,0,jj/2)a1=a1+jn else a1,a2=ba.computeDistanceAndTime(bi,0,n(),0,0,jj/2)end;StrongBrakes=true;if not ak and je<=a1+bi*iq/2 and(bh:project_on_plane(cw):normalize():dot(ds:project_on_plane(cw):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jk<0.1 or je<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<je)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=je end end;if bn and j()>0.01 and am==-1 and bi>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bh)iH=utils.clamp(iu-iw,iu-PitchStallAngle*0.85,iu+PitchStallAngle*0.85)end;O=jb;local fL=-1;local iT=0.1;if BrakeLanding then iH=0;local eb=bh.x*ed.x+bh.y*ed.y+bh.z*ed.z;local jp=false;local jq=30;if bb~=nil and bb>0 then local jm=0;local dM=utils.clamp(j(),0.4,2)local jj=LastMaxBrakeInAtmo*utils.clamp(bi/100,0.1,1)*dM;local jr=bb*dM+jj+jm-bN;local js=jj+jm-bN;local jt=jj/2+jm-bN;local ju=bi-math.sqrt(math.abs(jt/2)*20/(0.5*n()))*utils.sign(jt)if ju<0 then ju=0 end;local jv;if bi>100 then local jw,_=ba.computeDistanceAndTime(bi,100,n(),0,0,jj)local jx,_=ba.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jj))jv=jw+jx else jv=ba.computeDistanceAndTime(bi,0,n(),0,0,math.sqrt(jj))end;if jv<20 then BrakeIsOn=false else local jy=0;if ju>100 then local jz,_=ba.computeDistanceAndTime(ju,100,n(),0,0,jr)local jA,_=ba.computeDistanceAndTime(100,0,n(),0,0,bb*dM+math.sqrt(jj)+jm-bN)jy=jz+jA else jy,_=ba.computeDistanceAndTime(ju,0,n(),0,0,bb*dM+math.sqrt(jj)+jm-bN)end;jy=(jy+15+bi*iq)*1.1;local jB=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jB then local iL=planet:getAltitude(CustomTarget.position)local jC=aq-iL-100;local ds=CustomTarget.position-vec3(core.getConstructWorldPos())local iM=math.sqrt(ds:len()^2-(aq-iL)^2)if iM>100 then jB=false elseif jC<=jy or jy==-1 then BrakeIsOn=true;jp=true else BrakeIsOn=false;jp=true end end;if not jB and CalculateBrakeLandingSpeed then if jy>=jq then BrakeIsOn=true else BrakeIsOn=false end;jp=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fL=am;if fL>-1 then bf=autoRollPreference;if bi<1 or bh:normalize():dot(cw)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)ab=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bh:normalize():dot(-ed)<0.999 then BrakeIsOn=true elseif eb<-brakeLandingRate and not jp then BrakeIsOn=true elseif not jp then BrakeIsOn=false end end;if AutoTakeoff or ak then local fa,fc,fb=b9:getPlanetarySystem(0):castIntersections(is,(AutopilotTargetCoords-is):normalize(),function(fd)return fd.radius+fd.noAtmosphericDensityAltitude end)if math.abs(iH)<15 and aq/HoldAltitude>0.75 then AutoTakeoff=false;if not ak then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ak and bi<I then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 elseif ak then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;BrakeIsOn=true end elseif ak and j()==0 and a7~=nil and(fa==nil or fa.name==a7.name)then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jD=hoverDetectGround()>-1;local jE=cx;if(VectorToTarget or ak)and not jD and bi>minRollVelocity and j()>0.01 then local jf=math.rad(math.abs(dG))jE=cx*math.abs(math.cos(jf))+iw*math.sin(jf)end;local jF=utils.clamp(iH-jE,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jF=utils.clamp(iH-jE,-85,MaxPitch)elseif j()<0.01 then jF=utils.clamp(iH-jE,-MaxPitch,MaxPitch)end;if math.abs(dG)<5 or VectorToTarget or BrakeLanding or jD or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jF)local iI=pitchPID:get()O=O+iI end end;X=orbit.eccentricity;if antigrav and not ExternalAGG and aq<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if AchieveOrbit then local jG=1000;if planet.name~="Space"then if planet.hasAtmosphere then jG=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jG=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jG=1000 end;local _,iK=bc(planet):escapeAndOrbitalSpeed((is-planet.center):len()-planet.radius)bf=true;local jH;if OrbitToTarget and CustomTarget~=nil then jH=(target.position-is):normalize():project_on_plane(cw):normalize()else jH=cu:project_on_plane(cw):normalize()end;jH=jH*iK;jH=(jH+-cw*(aq-jG)):normalize()*iK end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jI=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jJ=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jK=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jL=S;local jM=vec3(core.getWorldVertical())if jM==nil or jM:len()==0 then jM=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jN=vec3(core.getConstructWorldOrientationUp())local jO=vec3(core.getConstructWorldOrientationForward())local jP=vec3(core.getConstructWorldOrientationRight())local jQ=vec3(core.getWorldVelocity())local jR=vec3(core.getWorldVelocity()):normalize()local jS=getRoll(jM,jO,jP)local jT=math.abs(jS)local jU=utils.sign(jS)local j=j()local jV=vec3(core.getWorldAngularVelocity())local jW=jI*pitchSpeedFactor*jP+jJ*rollSpeedFactor*jO+jK*yawSpeedFactor*jN;if jM:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or aj or AltitudeHold)then local dG=getRoll(jM,jO,jP)local dH=dG/180*math.pi;local dI=math.cos(dH)local dJ=math.sin(dH)local iu=getPitch(jM,jO,jP*dI+jN*dJ)if bf==true and math.abs(bp-jS)>autoRollRollThreshold and jJ==0 and math.abs(iu)<85 then local jX=bp;local j5=autoRollFactor;if j==0 then j5=j5/4;bp=0;jX=0 end;if rollPID==nil then rollPID=pid.new(j5*0.01,0,j5*0.1)end;rollPID:inject(jX-jS)local jY=rollPID:get()jW=jW+jY*jO end end;if jM:len()>0.01 and j>0.0 then local jZ=20.0;if turnAssist==true and jT>jZ and jI==0 and jK==0 then local j_=turnAssistFactor*0.1;local k0=turnAssistFactor*0.025;local k1=(jT-jZ)/(180-jZ)*180;local k2=0;if k1<90 then k2=k1/90 elseif k1<180 then k2=(180-k1)/90 end;k2=k2*k2;local k3=-jU*k0*(1.0-k2)local k4=j_*k2;jW=jW+k4*jP+k3*jN end end;local k5=1;local k6=0;local k7=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then br=utils.clamp(br+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then br=utils.clamp(br-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local eb=-jM:dot(jQ)if ap and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(br/3.6-jQ:dot(jO))local k8=throttlePID:get()C=utils.clamp(k8,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jQ:len()-br/3.6)local k9=utils.clamp(brakePID:get(),0,1)if j>0 and eb<-80 or j>0.005 then A=k9 end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local ka=''local kb=vec3()local kc=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,ab*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kc,k6)local kd='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kd=kd..ExtraLongitudeTags end;local ke=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kf=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kd,axisCommandId.longitudinal)local kg=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)ka=ka..' , '.."lateral airfoil , lateral ground "kb=kb+kg;if kb:len()>constants.epsilon then Nav:setEngineForceCommand(ka,kb,k6,'','','',k7)end;Nav:setEngineForceCommand(kd,kf,k5)local kh='thrust analog vertical fueled 'local ki='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ki=ki..ExtraLateralTags end;if ExtraVerticalTags~="none"then kh=kh..ExtraVerticalTags end;if ab~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kh,kc,k5)else Nav:setEngineForceCommand(kh,vec3(),k5)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ki,kg,k5)else Nav:setEngineForceCommand(ki,vec3(),k5)end;if jL==0 then jL=A end;local kj=-jL*(brakeSpeedFactor*jQ+brakeFlatFactor*jR)Nav:setEngineForceCommand('brake',kj)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kj=-jL*(brakeSpeedFactor*jQ+brakeFlatFactor*jR)Nav:setEngineForceCommand('brake',kj)local ka=''local kb=vec3()local kk=false;local kd='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kd=kd..ExtraLongitudeTags end;local ke=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ke==axisCommandType.byThrottle then local kf=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kd,axisCommandId.longitudinal)Nav:setEngineForceCommand(kd,kf,k5)elseif ke==axisCommandType.byTargetSpeed then local kf=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ka=ka..' , '..kd;kb=kb+kf;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kk=true end end;local ki='thrust analog lateral 'if ExtraLateralTags~="none"then ki=ki..ExtraLateralTags end;local kl=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kl==axisCommandType.byThrottle then local km=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ki,axisCommandId.lateral)Nav:setEngineForceCommand(ki,km,k5)elseif kl==axisCommandType.byTargetSpeed then local kg=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ka=ka..' , '..ki;kb=kb+kg end;local kh='thrust analog vertical 'if ExtraVerticalTags~="none"then kh=kh..ExtraVerticalTags end;local kn=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kn==axisCommandType.byThrottle then local kc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kh,axisCommandId.vertical)if ab~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kh,kc,k5,'airfoil','ground','',k7)else Nav:setEngineForceCommand(kh,vec3(),k5)Nav:setEngineForceCommand('airfoil vertical',kc,k5,'airfoil','','',k7)Nav:setEngineForceCommand('ground vertical',kc,k5,'ground','','',k7)end elseif kn==axisCommandType.byTargetSpeed then if ab<0 then Nav:setEngineForceCommand('hover',vec3(),k5)end;local ko=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ka=ka..' , '..kh;kb=kb+ko end;local g5=unit.getAxisCommandValue(0)if kb:len()>constants.epsilon then if S~=0 or kk or math.abs(jR:dot(jO))<0.8 or bh:len()>g5/3.6 then ka=ka..', brake'end;Nav:setEngineForceCommand(ka,kb,k6,'','','',k7)end end;local kp=torqueFactor*(jW-jV)local kq=vec3(core.getWorldAirFrictionAngularAcceleration())kp=kp-kq;Nav:setEngineTorqueCommand('torque',kp,k5,'airfoil','','',k7)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local bQ=vec3(core.getVelocity()):len()local kr=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ks=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bQ*3.6>ks*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bQ*3.6<ks*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fC=unit.getThrottle()if AtmoSpeedAssist then fC=z*100 end;local g5=fC/100;if j==0 then g5=g5*MaxGameVelocity;if bQ>=g5*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bQ<g5*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else g5=g5*ReentrySpeed/3.6;if bQ>=g5*(1-kr)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bQ<g5*(1-kr)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bC=coroutine.resume(beginSetup)if bC then SetupComplete=true end else Nav:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kt)if kt=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and am==-1 and(j()>0 or aq<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kt=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kt=="forward"then N=N-1 elseif kt=="backward"then N=N+1 elseif kt=="left"then Q=Q-1 elseif kt=="right"then Q=Q+1 elseif kt=="yawright"then R=R-1 elseif kt=="yawleft"then R=R+1 elseif kt=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kt=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kt=="up"then ab=ab+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kt=="down"then ab=ab-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kt=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kt=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kt=="option1"then IncrementAutopilotTargetIndex()H=false elseif kt=="option2"then DecrementAutopilotTargetIndex()H=false elseif kt=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kt=="option4"then ToggleAutopilot()H=false elseif kt=="option5"then ToggleLockPitch()H=false elseif kt=="option6"then ToggleAltitudeHold()H=false elseif kt=="option7"then wipeSaveVariables()H=false elseif kt=="option8"then ToggleFollowMode()H=false elseif kt=="option9"then if gyro~=nil then gyro.toggle()at=gyro.getState()==1 end;H=false elseif kt=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;be=false;bd=false end elseif kt=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kt=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kt=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif kt=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kt=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kt=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kt=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kt)if kt=="forward"then N=0 elseif kt=="backward"then N=0 elseif kt=="left"then Q=0 elseif kt=="right"then Q=0 elseif kt=="yawright"then R=0 elseif kt=="yawleft"then R=0 elseif kt=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kt=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kt=="up"then ab=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kt=="down"then ab=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kt=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end;H=false elseif kt=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end;H=false elseif kt=="lshift"then if system.isViewLocked()==1 then V=false;ac=0;ad=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;be=false;bd=false end elseif kt=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kt=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kt)if kt=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kt=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kt=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kt=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dx)local i;local ku="/commands /setname /G /agg /addlocation /copydatabank"local kv,kw=nil,nil;local kx="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dx," ")kv=dx;if i~=nil then kv=string.sub(dx,0,i-1)kw=string.sub(dx,i+1)elseif not string.find(ku,kv)then for g1 in string.gmatch(kx,"([^\n]+)")do c(g1)end;return end;if kv=="/setname"then if kw==nil or kw==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kw)else W="Select a saved target to rename first"end elseif kv=="/addlocation"then if kw==nil or kw==""or string.find(kw,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kw,"::")local ck=string.sub(kw,1,i-2)local ce=string.sub(kw,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cf='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cg,ch,cb,cc,ca=string.match(ce,cf)local planet=b3[tonumber(cg)][tonumber(ch)]AddNewLocationByWaypoint(ck,planet,ce)W="Added "..ck.." to saved locations,\nplanet "..planet.name.." at "..ce;ae=5 elseif kv=="/agg"then if kw==nil or kw==""then W="Usage: /agg targetheight"return end;kw=tonumber(kw)if kw<1000 then kw=1000 end;AntigravTargetAltitude=kw;W="AGG Target Height set to "..kw elseif kv=="/G"then if kw==nil or kw==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kw=="dump"then for bA,bB in pairs(a)do if type(_G[bB])=="boolean"then if _G[bB]==true then c(bB.." true")else c(bB.." false")end elseif _G[bB]==nil then c(bB.." nil")else c(bB.." ".._G[bB])end end;return end;i=string.find(kw," ")local ky=string.sub(kw,0,i-1)local kz=string.sub(kw,i+1)for bA,bB in pairs(a)do if bB==ky then W="Variable "..ky.." changed to "..kz;local kA=type(_G[bB])if kA=="number"then kz=tonumber(kz)elseif kA=="boolean"then if string.lower(kz)=="true"then kz=true else kz=false end end;_G[bB]=kz;return end end;W="No such global variable: "..ky elseif kv=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
