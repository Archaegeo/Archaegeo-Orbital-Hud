name: ButtonsHud - ShadowMage v5.223 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 1.0 --export: (Default: 1.0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=false;local b2=false;local b3=autoRollPreference;local b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b5=vec3(core.getWorldVelocity())local b6=vec3(b5):len()local b7=math.cos(StallAngle*constants.deg2rad)local b8=LandingGearGroundHeight;local b9=system.getMouseDeltaX()local ba=system.getMouseDeltaY()local bb=false;local bc=system.getTime()local bd=0;local be=0;local bf=nil;local bg=nil;local bh=nil;function LoadVariables()if dbHud_1 then local bi=dbHud_1.hasKey;if not useTheseSettings then for bj,bk in pairs(a)do if bi(bk)then local bl=f(dbHud_1.getStringValue(bk))if bl~=nil then c(bk.." "..dbHud_1.getStringValue(bk))_G[bk]=bl;az=true end end end end;coroutine.yield()for bj,bk in pairs(b)do if bi(bk)then local bl=f(dbHud_1.getStringValue(bk))if bl~=nil then c(bk.." "..dbHud_1.getStringValue(bk))_G[bk]=bl;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bm=system.getTime()if LastStartTime+180<bm then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b3=autoRollPreference end;LastStartTime=bm;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b7=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bn,bo)if bn>bo then bo=bn end;if ContainerOptimization>0 then bo=bo-bo*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bo=bo-bo*FuelTankOptimization*0.05 end;return bo end;function ProcessElements()local bp=fuelX~=0 and fuelY~=0;for bj in pairs(af)do local type=l(af[bj])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bq=h(af[bj])if bq>10000 then aQ=128 elseif bq>1000 then aQ=64 elseif bq>150 then aQ=32 end end;aG=aG+h(af[bj])if bp and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bq=h(af[bj])local br=m(af[bj])local bn=0;local bs=system.getTime()if type=="Atmospheric Fuel Tank"then local bo=400;local bt=35.03;if bq>10000 then bo=51200;bt=5480 elseif bq>1300 then bo=6400;bt=988.67 elseif bq>150 then bo=1600;bt=182.67 end;bn=br-bt;if fuelTankHandlingAtmo>0 then bo=bo+bo*fuelTankHandlingAtmo*0.2 end;bo=CalculateFuelVolume(bn,bo)aD[#aD+1]={af[bj],core.getElementNameById(af[bj]),bo,bt,bn,bs}end;if type=="Rocket Fuel Tank"then local bo=320;local bt=173.42;if bq>65000 then bo=40000;bt=25740 elseif bq>6000 then bo=5120;bt=4720 elseif bq>700 then bo=640;bt=886.72 end;bn=br-bt;if fuelTankHandlingRocket>0 then bo=bo+bo*fuelTankHandlingRocket*0.1 end;bo=CalculateFuelVolume(bn,bo)aF[#aF+1]={af[bj],core.getElementNameById(af[bj]),bo,bt,bn,bs}end;if type=="Space Fuel Tank"then local bo=2400;local bt=182.67;if bq>10000 then bo=76800;bt=5480 elseif bq>1300 then bo=9600;bt=988.67 end;bn=br-bt;if fuelTankHandlingSpace>0 then bo=bo+bo*fuelTankHandlingSpace*0.2 end;bo=CalculateFuelVolume(bn,bo)aE[#aE+1]={af[bj],core.getElementNameById(af[bj]),bo,bt,bn,bs}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;local bu=j()if door and(bu>0 or bu==0 and ae<10000)then for _,bk in pairs(door)do bk.toggle()end end;if switch then for _,bk in pairs(switch)do local bv=bk.getId()local bw=core.getElementNameById(bv)if bw=="navBlinkSwitch"then bf=bk elseif bw=="navLightSwitch"then bg=bk elseif bw=="headLightSwitch"then bh=bk else bk.toggle()end end end;if forcefield and(bu>0 or bu==0 and ae<10000)then for _,bk in pairs(forcefield)do bk.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bx=AboveGroundLevel()if bx~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b8~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b8)if b8==0 and not A then GearExtended=true;BrakeIsOn=true end else b8=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and bx~=-1 then a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ad end;function ConvertResolutionX(bk)if ResolutionX==1920 then return bk else return round(ResolutionX*bk/1920,0)end end;function ConvertResolutionY(bk)if ResolutionY==1080 then return bk else return round(ResolutionY*bk/1080,0)end end;function RefreshLastMaxBrake(by,bz)if by==nil then by=core.g()end;by=round(by,5)local bA=j()if bz~=nil and bz or(aC==nil or aC~=by)then local b5=core.getVelocity()local bB=vec3(b5):len()local bC=f(unit.getData()).maxBrake;if bC~=nil and bC>0 and ad then bC=bC/utils.clamp(bB/100,0.1,1)bC=bC/bA;if bA>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bC)/2 else LastMaxBrakeInAtmo=bC end end end;if bC~=nil and bC>0 then LastMaxBrake=bC end;aC=by end end;function MakeButton(bD,bE,bF,bG,bH,bI,bJ,bK,bL)local bM={enableName=bD,disableName=bE,width=bF,height=bG,x=bH,y=bI,toggleVar=bJ,toggleFunction=bK,drawCondition=bL,hovered=false}table.insert(aq,bM)return bM end;function UpdateAtlasLocationsList()AtlasOrdered={}for bj,bk in pairs(aS[0])do table.insert(AtlasOrdered,{name=bk.name,index=bj})end;local function bN(bO,bP)return bO.name<bP.name end;table.sort(AtlasOrdered,bN)end;function AddLocationsToAtlas()for bj,bk in pairs(SavedLocations)do table.insert(aS[0],bk)end;UpdateAtlasLocationsList()end;function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*epsilon end;function zeroConvertToMapPosition(bS,bT)local bU=vec3(bT)if bS.bodyId==0 then return setmetatable({latitude=bU.x,longitude=bU.y,altitude=bU.z,bodyId=0,systemId=bS.planetarySystemId},MapPosition)end;local bV=bU-bS.center;local a3=bV:len()local bW=a3-bS.radius;local bX=0;local bY=0;if not float_eq(a3,0)then local bZ=math.atan(bV.y,bV.x)bY=bZ>=0 and bZ or 2*math.pi+bZ;bX=math.pi/2-math.acos(bV.z/a3)end;return setmetatable({latitude=math.deg(bX),longitude=math.deg(bY),altitude=bW,bodyId=bS.bodyId,systemId=bS.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(b_)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c1,c2,bX,bY,bW=string.match(b_,c0)if c1=="0"and c2=="0"then return vec3(tonumber(bX),tonumber(bY),tonumber(bW))end;bY=math.rad(bY)bX=math.rad(bX)local planet=aS[tonumber(c1)][tonumber(c2)]local c3=math.cos(bX)local c4=vec3(c3*math.cos(bY),c3*math.sin(bY),math.sin(bX))return planet.center+(planet.radius+bW)*c4 end;function AddNewLocationByWaypoint(c5,planet,b_)if dbHud_1 then local c6={}local position=zeroConvertToWorldCoordinates(b_)if planet.name=="Space"then c6={position=position,name=c5,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bu=false;if planet.hasAtmosphere then bu=true else bu=false end;c6={position=position,name=c5,atmosphere=bu,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=c6;table.insert(aS[0],c6)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bw=planet.name..". "..#SavedLocations;if radar_1 then local c7,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if c7~=nil and c7~=""then bw=bw.." "..radar_1.getConstructName(c7)end end;local c6={}local bu=false;if planet.hasAtmosphere then bu=true end;c6={position=position,name=bw,atmosphere=bu,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=c6;table.insert(aS[0],c6)UpdateAtlasLocationsList()K="Location saved as "..bw else K="Databank must be installed to save locations"end end;function UpdatePosition(c8)local c9=-1;local c6;for bj,bk in pairs(SavedLocations)do if bk.name and bk.name==CustomTarget.name then c9=bj;break end end;if c9~=-1 then local ca;if c8~=nil then c6={position=SavedLocations[c9].position,name=c8,atmosphere=SavedLocations[c9].atmosphere,planetname=SavedLocations[c9].planetname,gravity=SavedLocations[c9].gravity}else c6={position=vec3(core.getConstructWorldPos()),name=SavedLocations[c9].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[c9]=c6;c9=-1;for bj,bk in pairs(aS[0])do if bk.name and bk.name==CustomTarget.name then c9=bj end end;if c9>-1 then aS[0][c9]=c6 end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local c9=-1;for bj,bk in pairs(aS[0])do if bk.name and bk.name==CustomTarget.name then c9=bj end end;if c9>-1 then table.remove(aS[0],c9)end;c9=-1;for bj,bk in pairs(SavedLocations)do if bk.name and bk.name==CustomTarget.name then K=bk.name.." saved location cleared"c9=bj;break end end;if c9~=-1 then table.remove(SavedLocations,c9)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cb)cb[#cb+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cc,cd,bH,bI,bF,bG)if cc>bH and cc<bH+bF and cd>bI and cd<bI+bG then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local ce=vec3(core.getConstructWorldOrientationForward())local cf=vec3(core.getConstructWorldOrientationRight())local cg=vec3(core.getWorldVertical())local ch=getPitch(cg,ce,cf)LockPitch=ch;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bm=system.getTime()if bm-be<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;be=-1;if AltitudeHold then return end end else be=bm end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b3=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if be>-1 then HoldAltitude=ae end;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if be>-1 then HoldAltitude=ae+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if a8 then HoldAltitude=100000 end else b3=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b3=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then local ci=zeroConvertToMapPosition(V,AutopilotTargetCoords)ci="::pos{"..ci.systemId..","..ci.bodyId..","..ci.latitude..","..ci.longitude..","..ci.altitude.."}"system.setWaypoint(ci)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b3=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b3=autoRollPreference end end;function CheckDamage(cb)local cj=0;ao=""local ck=aG;local cl=0;local cm=0;local cn=0;local co=0;local cp=""for bj in pairs(af)do local bq=0;local cq=0;cq=h(af[bj])bq=k(af[bj])cl=cl+bq;if bq<cq then if bq==0 then cn=cn+1 else cm=cm+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bj]))local bH=position.x-aQ;local bI=position.y-aQ;local cr=position.z-aQ;table.insert(al,core.spawnArrowSticker(bH,bI,cr+1,"down"))table.insert(al,core.spawnArrowSticker(bH,bI,cr+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bH+1,bI,cr,"north"))table.insert(al,core.spawnArrowSticker(bH+1,bI,cr,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bH-1,bI,cr,"south"))table.insert(al,core.spawnArrowSticker(bH-1,bI,cr,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bH,bI-1,cr,"east"))table.insert(al,core.spawnArrowSticker(bH,bI-1,cr,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bH,bI+1,cr,"west"))table.insert(al,core.spawnArrowSticker(bH,bI+1,cr,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bj])end elseif aH and#al>0 and al[11]==af[bj]then for cs in pairs(al)do core.deleteSticker(al[cs])end;al={}end end;cj=d(cl/ck*100)if cj<100 then cb[#cb+1]=[[<g class="pbright txt">]]co=d(cj*2.55)cp=e("rgb(%d,%d,%d)",255-co,co,0)if cj<100 then cb[#cb+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cp,cj)if cn>0 then cb[#cb+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cp,cn,cm)elseif cm>0 then cb[#cb+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cp,cm)end end;cb[#cb+1]=[[<\g>]]end end;function DrawCursorLine(cb)local ct=d(utils.clamp(a3/(at/4)*255,0,255))cb[#cb+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+ct,d(PrimaryG+0.5)-ct,d(PrimaryB+0.5)-ct)end;function getPitch(cu,cv,bP)local cw=cu:cross(bP):normalize_inplace()local ch=math.acos(utils.clamp(cw:dot(-cv),-1,1))*constants.rad2deg;if cw:cross(-cv):dot(bP)<0 then ch=-ch end;return ch end;local cx=math.atan;local function cy(cz,cA,cB)return cx(cA:cross(cB):dot(cz),cA:dot(cB))end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b3=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bj,bk in pairs(a)do dbHud_1.setStringValue(bk,g(nil))end;for bj,bk in pairs(b)do if bk~="SavedLocations"then dbHud_1.setStringValue(bk,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bk in pairs(aq)do if bk.hovered then if not bk.drawCondition or bk.drawCondition()then bk.toggleFunction()end;bk.hovered=false end end end;function SetButtonContains()local bH=a0+at/2;local bI=a1+au/2;for _,bk in pairs(aq)do bk.hovered=Contains(bH,bI,bk.x,bk.y,bk.width,bk.height)end end;function DrawButton(cb,cC,hover,bH,bI,cD,cE,cF,cG,cH,cI)if type(cH)=="function"then cH=cH()end;if type(cI)=="function"then cI=cI()end;cb[#cb+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bH,bI,cD,cE)if cC then cb[#cb+1]=e("%s'",cF)else cb[#cb+1]=cG end;if hover then cb[#cb+1]=" style='stroke:white; stroke-width:2'"else cb[#cb+1]=" style='stroke:black; stroke-width:1'"end;cb[#cb+1]="></rect>"cb[#cb+1]=e("<text x='%f' y='%f' font-size='24' fill='",bH+cD/2,bI+cE/2+5)if cC then cb[#cb+1]="black"else cb[#cb+1]="white"end;cb[#cb+1]="' text-anchor='middle' font-family='Montserrat'>"if cC then cb[#cb+1]=e("%s</text>",cH)else cb[#cb+1]=e("%s</text>",cI)end end;function DrawButtons(cb)local cJ="rgb(50,50,50)'"local cK="rgb(210,200,200)"local cL=DrawButton;for _,bk in pairs(aq)do local bE=bk.disableName;local bD=bk.enableName;if type(bE)=="function"then bE=bE()end;if type(bD)=="function"then bD=bD()end;if not bk.drawCondition or bk.drawCondition()then cL(cb,bk.toggleVar(),bk.hovered,bk.x,bk.y,bk.width,bk.height,cK,cJ,bE,bD)end end end;function DrawTank(cb,aP,bH,cM,cN,cO,cP,cQ)local cR=1;local cS=2;local cT=3;local cU=4;local cV=5;local cW=6;local cX=""local cY=0;local cZ=fuelY;local c_=fuelY+10;if o()==1 and not RemoteHud then cZ=cZ-50;c_=c_-50 end;cb[#cb+1]=[[<g class="pdim txtfuel">]]if cN=="ATMO"then cX="atmofueltank"elseif cN=="SPACE"then cX="spacefueltank"else cX="rocketfueltank"end;cY=_G[cX.."_size"]if#cO>0 then for i=1,#cO do local bw=string.sub(cO[i][cS],1,12)local d0=0;for cs=1,cY do if cO[i][cS]==f(unit[cX.."_"..cs].getData()).name then d0=cs;break end end;if aP or cP[i]==nil or cQ[i]==nil then local d1=0;local d2=0;local d3=0;local d4=0;local bs=system.getTime()if d0~=0 then cQ[i]=f(unit[cX.."_"..d0].getData()).percentage;cP[i]=f(unit[cX.."_"..d0].getData()).timeLeft;if cP[i]=="n/a"then cP[i]=0 end else d3=m(cO[i][cR])-cO[i][cU]d1=cO[i][cT]cQ[i]=d(0.5+d3*100/d1)d2=cO[i][cV]d4=cO[i][cW]if d2<=d3 then cP[i]=0 else cP[i]=d(0.5+d3/((d2-d3)/(bs-d4)))end;cO[i][cV]=d3;cO[i][cW]=bs end end;if bw==cM then bw=e("%s %d",cN,i)end;if d0==0 then bw=bw.." *"end;local d5;if cP[i]==0 then d5="n/a"else d5=FormatTimeString(cP[i])end;if cQ[i]~=nil then local co=d(cQ[i]*2.55)local cp=e("rgb(%d,%d,%d)",255-co,co,0)local d6=""if d5~="n/a"and cP[i]<120 or cQ[i]<5 then if aP then d6=[[class="red"]]end end;cb[#cb+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bH,cZ,d6,bw,bH,c_,cp,cQ[i],d5)cZ=cZ+30;c_=c_+30 end end end;cb[#cb+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b5)b5=vec3(b5)local ch=-math.deg(math.atan(b5.y,b5.z))+180;ch=ch-90;if ch<0 then ch=360+ch end;if ch>180 then ch=-180+ch-180 end;return-ch end;function getRelativeYaw(b5)b5=vec3(b5)local d7=math.deg(math.atan(b5.y,b5.x))-90;if d7<-180 then d7=360+d7 end;return d7 end;function AlignToWorldVector(d8,d9,da)if not ad or not bb or aa~=-1 or b6<w then local db=da;if db==nil then db=DampingMultiplier end;if d9==nil then d9=as end;d8=vec3(d8):normalize()local dc=vec3(core.getConstructWorldOrientationForward())-d8;local dd=-getMagnitudeInDirection(dc,core.getConstructWorldOrientationRight())*ar;local de=-getMagnitudeInDirection(dc,core.getConstructWorldOrientationUp())*ar;if am==0 then am=dd/2 end;if an==0 then an=de/2 end;if math.abs(dd)<0.1 then D=D-dd*2 else D=D-(dd+(dd-am)*db)end;if math.abs(de)<0.1 then C=C+de*2 else C=C+de+(de-an)*db end;am=dd;an=de;if math.abs(dd)<d9 and math.abs(de)<d9 then return true end;return false elseif bb and aa==-1 then d8=vec3(core.getWorldVelocity())local db=da;if db==nil then db=DampingMultiplier end;if d9==nil then d9=as end;d8=vec3(d8):normalize()local dc=vec3(core.getConstructWorldOrientationForward())-d8;local dd=-getMagnitudeInDirection(dc,core.getConstructWorldOrientationRight())*ar;local de=-getMagnitudeInDirection(dc,core.getConstructWorldOrientationUp())*ar;if am==0 then am=dd/2 end;if an==0 then an=de/2 end;if math.abs(dd)<0.1 then D=D-dd*5 else D=D-(dd+(dd-am)*db)end;if math.abs(de)<0.1 then C=C+de*5 else C=C+de+(de-an)*db end;am=dd;an=de;if math.abs(dd)<d9 and math.abs(de)<d9 then return true end;return false end end;function getAPEnableName()local bw=AutopilotTargetName;if bw==nil then local df,dg=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())bw=CustomTarget.name.." "..df..dg end;if bw==nil then bw="None"end;return"Engage Autopilot: "..bw end;function getAPDisableName()local bw=AutopilotTargetName;if bw==nil then bw=CustomTarget.name end;if bw==nil then bw="None"end;return"Disable Autopilot: "..bw end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b3=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b3=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b3=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local dh=50;local di=260;local dj=MakeButton("Enable Brake Toggle","Disable Brake Toggle",di,dh,at/2-di/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",di,dh,at/2-di/2-50-dj.width,au/2-dh+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",di,dh,at/2-di/2+dj.width+50,au/2-dh+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dk=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dk.height,dk.x+dk.width+30,dk.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dk.height,dk.x+dk.width+30,dk.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dk.height,dk.x-200-30,dk.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dh=60;di=300;local bH=10;local bI=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",di,dh,bH,bI,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",di,dh,bH+di+20,bI,function()return AltitudeHold end,ToggleAltitudeHold)bI=bI+dh+20;MakeButton("Engage Autoland","Disable Autoland",di,dh,bH,bI,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",di,dh,bH+di+20,bI,function()return AutoTakeoff end,ToggleAutoTakeoff)bI=bI+dh+20;MakeButton("Show Orbit Display","Hide Orbit Display",di,dh,bH,bI,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bI=bI+dh+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",di,dh,bH,bI,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",di,dh,bH+di+20,bI,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bI=bI+dh+20;MakeButton("Engage Follow Mode","Disable Follow Mode",di,dh,bH,bI,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",di,dh,bH+di+20,bI,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bI=bI+dh+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",di,dh,bH,bI,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bI=bI+dh+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,di*2,dh,bH,bI,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dl=Nav.axisCommandManager:getAxisCommandType(0)local dm="TRAVEL"if dl==1 then dm="CRUISE"end;if Autopilot then dm="AUTOPILOT"end;return dm end;function UpdateHud(cb)local bW=ae;local b5=core.getVelocity()local bB=vec3(b5):len()local cg=vec3(core.getWorldVertical())local ce=vec3(core.getConstructWorldOrientationForward())local cf=vec3(core.getConstructWorldOrientationRight())local dn=vec3(core.getConstructWorldOrientationUp())local dp=getRoll(cg,ce,cf)local dq=dp/180*math.pi;local dr=math.cos(dq)local ds=math.sin(dq)local ch=getPitch(cg,ce,cf*dr+dn*ds)local dt=dp;local du=ch;local dv=j()local dw=d(unit.getThrottle())local dx=bB*3.6;local dy=unit.getAxisCommandValue(0)if ad and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dy=PlayerThrottle;dw=PlayerThrottle*100 end;local dm=GetFlightStyle()local dz="ROLL"local dA=unit.getClosestPlanetInfluence()>0;if dw==nil then dw=0 end;if not dA then if bB>5 then ch=getRelativePitch(b5)dp=getRelativeYaw(b5)else ch=0;dp=0 end;dz="YAW"end;cb[#cb+1]=a5;cb[#cb+1]=ao;cb[#cb+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cb,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(cb,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(cb,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(cb,bW)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dA then DrawRollLines(cb,centerX,centerY,dt,dz,dA)DrawArtificialHorizon(cb,du,dt,centerX,centerY,dA,d(getRelativeYaw(b5)),bB)else DrawRollLines(cb,centerX,centerY,dp,dz,dA)DrawArtificialHorizon(cb,ch,dp,centerX,centerY,dA,d(dp),bB)end;DrawAltitudeDisplay(cb,bW,dA)DrawPrograde(cb,b5,bB,centerX,centerY)end end;DrawThrottle(cb,dm,dw,dy)DrawSpeed(cb,dx)DrawWarnings(cb)DisplayOrbitScreen(cb)if screen_2 then local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/aU;local bI=450+b_.y/aV;screen_2.moveContent(aW,(bH-80)/19.2,(bI-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cb)local dB=aj;local dC=ak;local dD=aj;local dE=ak;if IsInFreeLook()and not brightHud then dB=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dC=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;cb[#cb+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dB,dB,dD,dD,dC,dC,dE,dE,ResolutionX,ResolutionY)end;function HUDEpilogue(cb)cb[#cb+1]="</svg>"end;function DrawSpeed(cb,dx)local dF=throtPosY-10;local dG=throtPosX+10;cb[#cb+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dF=75 end;cb[#cb+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dG,dF,d(dx))end;function DrawOdometer(cb,W,TotalDistanceTravelled,dm,X,dv)local dH=ConvertResolutionX(1240)local dI=ConvertResolutionY(55)local dJ=dI+10;local dv=j()local by=core.g()local dK=0;local dL=0;local dM=0;RefreshLastMaxBrake(by)if ad then dM=LastMaxBrakeInAtmo else dM=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dN=vec3(core.getWorldAcceleration()):len()/9.80665;if by>0.1 then dL=aB*by;dK=maxThrust/by end;cb[#cb+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dH=ConvertResolutionX(1120)dI=ConvertResolutionY(55)dJ=dI+10 elseif ad then local dO=ConvertResolutionX(770)cb[#cb+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dO,dI,dO,dJ,dv)end;cb[#cb+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dH,dI,dH,dJ,by/9.80665,dH,dI+20,dH,dJ+20,dN)cb[#cb+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cb[#cb+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dM/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dm)if by>0.1 then cb[#cb+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dK/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dL/1000)else cb[#cb+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cb[#cb+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dm)end;cb[#cb+1]="</g>"end;function DrawThrottle(cb,dm,dw,dy)dw=math.floor(dw+0.5)local cZ=throtPosY+10;local c_=throtPosY+20;if o()==1 and not RemoteHud then cZ=55;c_=65 end;local dP="CRUISE"local unit="km/h"local dQ=dy;if dm=="TRAVEL"or dm=="AUTOPILOT"then dP="THROT"unit="%"dQ=dw;local dR="dim"if dw<0 then dR="red"end;cb[#cb+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dR,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dw),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cb[#cb+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,cZ,dP,throtPosX+10,c_,dQ,unit)if ad and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and ThrottleLimited then dw=math.floor(calculatedThrottle*100+0.5)local dR="red"if dw<0 then dR="red"end;cb[#cb+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dR,1-math.abs(dw),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cb[#cb+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,cZ+40,"LIMIT",throtPosX+10,c_+40,dw,"%")end end;function DrawVerticalSpeed(cb,bW)if bW<200000 and not ad or bW and ad then local dS=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dT=0;if math.abs(dS)>1 then dT=45*math.log(math.abs(dS),10)if dS<0 then dT=-dT end end;cb[#cb+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dS),d(dT))end end;function getHeading(cv)local dU=-vec3(core.getWorldVertical())cv=cv-cv:project_on(dU)local dV=vec3(0,0,1)dV=dV-dV:project_on(dU)local dW=dV:cross(dU)local dT=dV:angle_between(cv)*constants.rad2deg;if cv:dot(dW)<0 then dT=360-dT end;return dT end;function DrawRollLines(cb,centerX,centerY,dt,dz,dA)local dX=circleRad;local dY=20;dY=d(dY)local dZ=d(dt)if dA then for i=-45,45,5 do local d_=i;cb[#cb+1]=e([[<g transform="rotate(%f,%d,%d)">]],d_,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cb[#cb+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dX+dY-len,centerX,centerY+dX+dY)end;cb[#cb+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dX+dY-35,dz,centerX,centerY+dX+dY-25,dZ)cb[#cb+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dt,centerX,centerY)cb[#cb+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dX+dY-20,centerX+5,centerY+dX+dY-20,centerX,centerY+dX+dY-15)cb[#cb+1]="</g>"end;local d7=dZ;if dA then d7=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local e0=20;local e1=d(d7)local e2=0;local e3=centerY+dX+dY+20;local e4=centerX;if dz~="YAW"then e3=ConvertResolutionY(130)e4=ConvertResolutionX(960)end;local e5=[[<path class="txttick line" d="]]for i=d(e1-(e0+10)-e1%5+0.5),d(e1+e0+10+e1%5+0.5),5 do local bH=e4+-i*5+d7*5;if i%10==0 then e2=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cb[#cb+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bH+5,e3-12,p)elseif i%5==0 then e2=5 end;if e2==10 then e5=e([[%s M %f %f v %d]],e5,bH,e3-5,e2)else e5=e([[%s M %f %f v %d]],e5,bH,e3-2.5,e2)end end;cb[#cb+1]=e5 ..[["/>]]cb[#cb+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e4-5,e3+10,e4+5,e3+10,e4,e3+5)if dA then dz="HDG"end;cb[#cb+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],e4,e3+25,e1,e4,e3+35,dz)end;function DrawArtificialHorizon(cb,du,dt,centerX,centerY,dA,e6,bB)local dX=circleRad;local e7=d(dX*3/5)if dX>0 then local e8=d(du)local len=0;local e5=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dt,centerX,centerY)if not ad then e5=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cb[#cb+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dX-1,centerX,centerY)cb[#cb+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(e8-30-e8%5+0.5),d(e8+30+e8%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bI=centerY+-i*5+du*5;if len==30 then e5=e([[%s M %d %f h %d]],e5,centerX-e7-len,bI,len)if ad then cb[#cb+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dt,centerX,centerY,centerX-e7+10,bI,i)cb[#cb+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dt,centerX,centerY,centerX+e7-10,bI,i)if i==0 or i==180 or i==-180 then cb[#cb+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dt,centerX,centerY,centerX-e7+20,bI,e7*2-40)end else cb[#cb+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e7+10,bI,i)cb[#cb+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e7-10,bI,i)end;e5=e([[%s M %d %f h %d]],e5,centerX+e7,bI,len)else e5=e([[%s M %d %f h %d]],e5,centerX-e7-len,bI,len)e5=e([[%s M %d %f h %d]],e5,centerX+e7,bI,len)end end;cb[#cb+1]=e5 ..[["/>]]local e9="PITCH"if not dA then e9="REL PITCH"end;if du>90 and not ad then du=90-(du-90)elseif du<-90 and not ad then du=-90-(du+90)end;if dX>200 then if ad then if bB>w then cb[#cb+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e6)end;cb[#cb+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dt,centerX,centerY)else cb[#cb+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cb[#cb+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e7+25,centerY-5,centerX-e7+20,centerY,centerX-e7+25,centerY+5,centerX-e7+50,centerY+4,e8)cb[#cb+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e7-25,centerY-5,centerX+e7-20,centerY,centerX+e7-25,centerY+5,centerX+e7-30,centerY+4,e8)cb[#cb+1]="</g>"end;local ea=d(dX/3)cb[#cb+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ea,centerY,dX-ea)if not ad and dA then cb[#cb+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dt,centerX,centerY,centerX-e7+10,centerY,e7*2-20)end;cb[#cb+1]="</g>"if dX<200 then if ad and bB>w then cb[#cb+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dX,e9,centerX,centerY-dX+10,e8,centerX,centerY-15,"Yaw",centerX,centerY+20,e6)else cb[#cb+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dX,e9,centerX,centerY-dX+15,e8)end end end end;function DrawAltitudeDisplay(cb,bW,dA)local eb=altMeterX;local ec=altMeterY;local ed=78;local ee=19;local ef=AboveGroundLevel()if ef~=-1 then table.insert(cb,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eb+ed,ec+ee+20,ef))end;if dA and(bW<200000 and not ad or bW and ad)then table.insert(cb,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eb-1,ec-4,ed+2,ee+6,eb+1,ec-1,ed-4,ee))local c9=0;local eg=1;local eh=0;local ei=bW<0;local ej=9;if ei then ej=0 end;local bW=math.abs(bW)while c9<6 do local ek=11;local el=16;local em=9;local en=14;local d6="altsm"if c9>2 then el=el+3;ek=ek+2;en=en+2;em=em-6;d6="altbig"end;if ei then d6=d6 .." red"end;local eo=bW/eg%10;local ep=d(eo)local eq=d((ep+1)%10)local er=eh;if c9==0 then er=eo-ep;if ei then er=1-er end end;if ei and(c9==0 or eh~=0)then local es=eq;eq=ep;ep=es end;local et=el*(er-1)local eu=et+el;local bH=eb+em+(6-c9)*ek;local bI=ec+en;table.insert(cb,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],d6,bH,bI+et,eq,bH,bI+eu,ep))c9=c9+1;eg=eg*10;if ep==ej then eh=er else eh=0 end end;table.insert(cb,[[</g></g>]])end end;function DrawPrograde(cb,b5,bB,centerX,centerY)if bB>5 and not ad or bB>w then local dX=circleRad;local ev=20;local ew=20;local ex=vec3(b5)local ey=getRelativePitch(ex)local ez=getRelativeYaw(ex)local eA=14;local eB=eA/2;local eC=-ez/ew*dX;local eD=ey/ev*dX;local bH=centerX+eC;local bI=centerY+eD;local a3=math.sqrt(eC^2+eD^2)local eE=[[<circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eB/eA..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eB..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bH-eA..[[,]]..bI..[[ h ]]..eB..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH+eB..[[,]]..bI..[[ h ]]..eB..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH..[[,]]..bI-eA..[[ v ]]..eB..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a3<dX then cb[#cb+1]=eE else local dT=math.atan(eD,eC)local eF=4;local eG=centerX+dX*math.cos(dT)local eH=centerY+dX*math.sin(dT)cb[#cb+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dT*180/math.pi,eG,eH,eG-eF,eH-eF/2,eF*2,eF,eG+eF,eH-eF,eF,eF,-eF,eF)end;if not ad then ey=getRelativePitch(-ex)ez=getRelativeYaw(-ex)eC=-ez/ew*dX;eD=ey/ev*dX;bH=centerX+eC;bI=centerY+eD;a3=math.sqrt(eC^2+eD^2)if a3<dX then local eI=[[<circle
                        cx="]]..bH..[["
                        cy="]]..bI..[["
                        r="]]..eB..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bH..[[,]]..bI-eA..[[ v ]]..eB..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bH..[[,]]..bI..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bH..[[,]]..bI..[[)" />
                     <path
                        d="M ]]..bH-eB..[[,]]..bI..[[ h ]]..eA..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bH..[[,]]..bI..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bH..[[,]]..bI..[[)"/>]]cb[#cb+1]=eI end end end end;function DrawWarnings(cb)cb[#cb+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cb[#cb+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cb[#cb+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cb[#cb+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cb[#cb+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eJ=ConvertResolutionX(960)local eK=ConvertResolutionY(860)local eL=ConvertResolutionY(880)local eM=ConvertResolutionY(900)local eN=ConvertResolutionY(960)local eO=ConvertResolutionY(200)local eP=ConvertResolutionY(150)local eQ=ConvertResolutionY(960)if o()==1 and not RemoteHud then eK=ConvertResolutionY(135)eL=ConvertResolutionY(155)eM=ConvertResolutionY(175)eO=ConvertResolutionY(115)eP=ConvertResolutionY(95)end;if BrakeIsOn then cb[#cb+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eJ,eK)elseif brakeInput2>0 then cb[#cb+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eJ,eK,brakeInput2)end;if ad and bb and hoverDetectGround()==-1 then cb[#cb+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eJ,eO+50)end;if ah then cb[#cb+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eJ,eQ)end;if GearExtended then if A then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eJ,eL)else cb[#cb+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eJ,eL)end;local df,dg=getDistanceDisplayString(Nav:getTargetGroundAltitude())cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eJ,eM,df..dg)end;if O then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eJ,eN+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eJ,eO+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cb[#cb+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eJ,eO+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eJ,eO+20,AutopilotStatus)elseif LockPitch~=nil then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eJ,eO+20,d(LockPitch))elseif I then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eJ,eO+20)elseif Reentry then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eJ,eO+20)end;if AltitudeHold then if AutoTakeoff then local df,dg=getDistanceDisplayString(HoldAltitude)cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eJ,eO,df..dg)if BrakeIsOn then cb[#cb+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eJ,eO+50)end else local df,dg=getDistanceDisplayString2(HoldAltitude)cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eJ,eO,df..dg)end end;if BrakeLanding then if StrongBrakes then cb[#cb+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eJ,eO)else cb[#cb+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eJ,eO)end end;if ProgradeIsOn then cb[#cb+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eJ,eO)end;if RetrogradeIsOn then cb[#cb+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eJ,eO)end;if TurnBurn then cb[#cb+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eJ,eP)end;if VectorToTarget then cb[#cb+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eJ,eO+30,VectorStatus)end;cb[#cb+1]="</g>"end;function DisplayOrbitScreen(cb)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local eR=OrbitMapX;local eS=OrbitMapY;local eT=OrbitMapSize;local eU=4;eS=eS+eU;local eV=15;local bH=eR+eT+eR/2+eU;local bI=eS+eT/2+5+eU;local eW,eX,eY,eZ;eW=eT/4;eZ=0;cb[#cb+1]=[[<g class="pbright txtorb txtmid">]]cb[#cb+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eT+eR*2,eT+eS,eU,eU)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eY=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eW*2)eX=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eY*(1-orbit.eccentricity)eZ=eW-orbit.periapsis.altitude/eY-planet.radius/eY;local e_=""if orbit.periapsis.altitude<=0 then e_='redout'end;cb[#cb+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],e_,eR+eT/2+eZ+eU,eS+eT/2+eU,eW,eX)cb[#cb+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',eR+eT/2+eU,eS+eT/2+eU,planet.radius/eY)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cb[#cb+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bH-35,bI-5,eR+eT/2+eW+eZ,bI-5)cb[#cb+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bH,bI)bI=bI+eV;local df,dg=getDistanceDisplayString(orbit.apoapsis.altitude)cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,df..dg)bI=bI+eV;cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,FormatTimeString(orbit.timeToApoapsis))bI=bI+eV;cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,getSpeedDisplayString(orbit.apoapsis.speed))end;bI=eS+eT/2+5+eU;bH=eR-eR/2+10+eU;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cb[#cb+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bH+35,bI-5,eR+eT/2-eW+eZ,bI-5)cb[#cb+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bH,bI)bI=bI+eV;local df,dg=getDistanceDisplayString(orbit.periapsis.altitude)cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,df..dg)bI=bI+eV;cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,FormatTimeString(orbit.timeToPeriapsis))bI=bI+eV;cb[#cb+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,getSpeedDisplayString(orbit.periapsis.speed))end;cb[#cb+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],eR+eT/2+eU,20+eU,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local f0=orbit.timeToApoapsis/orbit.period*2*math.pi;local f1=eW*math.cos(f0)local f2=eX*math.sin(f0)cb[#cb+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',eR+eT/2+f1+eZ+eU,eS+eT/2+f2+eU)end;cb[#cb+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local f3=a3>100000;local bl,dg=""if f3 then bl,dg=round(a3/1000/200,1),"SU"elseif a3<1000 then bl,dg=round(a3,1),"m"else bl,dg=round(a3/1000,1),"Km"end;return bl,dg end;function getDistanceDisplayString2(a3)local f3=a3>100000;local bl,dg=""if f3 then bl,dg=round(a3/1000/200,2)," SU"elseif a3<1000 then bl,dg=round(a3,2)," M"else bl,dg=round(a3/1000,2)," KM"end;return bl,dg end;function getSpeedDisplayString(bB)return d(round(bB*3.6,0)+0.5).." km/h"end;function FormatTimeString(f4)local f5=0;local f6=0;local f7=0;if f4<60 then f4=d(f4)elseif f4<3600 then f5=d(f4/60)f4=d(f4%60)elseif f4<86400 then f6=d(f4/3600)f5=d(f4%3600/60)else f7=d(f4/86400)f6=d(f4%86400/3600)end;if f7>0 then return f7 .."d "..f6 .."h "elseif f6>0 then return f6 .."h "..f5 .."m "elseif f5>0 then return f5 .."m "..f4 .."s"elseif f4>0 then return f4 .."s"else return"0s"end end;function getMagnitudeInDirection(d8,f8)d8=vec3(d8)f8=vec3(f8):normalize()local bl=d8*f8;return bl.x+bl.y+bl.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local f9=AtlasOrdered[AutopilotTargetIndex].index;local fa=aS[0][f9]if fa.center then AutopilotTargetName=fa.name;V=aY[0][f9]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fa;for _,bk in pairs(aY[0])do if bk.name==CustomTarget.planetname then V=bk;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if V.name~="Space"then if V.hasAtmosphere then AutopilotTargetOrbit=math.floor(V.radius*(TargetOrbitRadius-1)+V.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(V.radius*(TargetOrbitRadius-1)+V.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fb=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return fb end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local bB=vec3(b5):len()local fc,fd=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fe;if not TurnBurn then _,fe=GetAutopilotBrakeDistanceAndTime(bB)else _,fe=GetAutopilotTBBrakeDistanceAndTime(bB)end;local ff=0;local fg=0;if AutopilotCruising or not Autopilot and bB>5 then fg=aZ.computeTravelTime(bB,0,AutopilotDistance)elseif P+fc<AutopilotDistance then ff=AutopilotDistance-(P+fc)fg=aZ.computeTravelTime(8333.0556,0,ff)else local fh=(AutopilotDistance-P)/fc;fc=AutopilotDistance-P;fd=fd*fh end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fg elseif AutopilotBraking then return fe elseif AutopilotCruising then return fg+fe else return fd+Q+fg end end;function GetAutopilotBrakeDistanceAndTime(bB)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bB)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fi=-1;local fj=-1;if vBooster then fi=vBooster.distance()end;if hover then fj=hover.distance()end;if fi~=-1 and fj~=-1 then if fi<fj then return fi else return fj end elseif fi~=-1 then return fi elseif fj~=-1 then return fj else return-1 end end;function AboveGroundLevel()local fk=-1;local fl=hoverDetectGround()if telemeter_1 then fk=telemeter_1.getDistance()end;if fl~=-1 and fk~=-1 then if fl<fk then return fl else return fk end elseif fl~=-1 then return fl else return fk end end;function tablelength(fm)local fn=0;for _ in pairs(fm)do fn=fn+1 end;return fn end;function BeginProfile(fo)ProfileTimeStart=system.getTime()end;function EndProfile(fo)local fp=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fp;ProfileCount=ProfileCount+1;if fp>ProfileTimeMax then ProfileTimeMax=fp end;if fp<ProfileTimeMin then ProfileTimeMin=fp end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fq=ProfileTimeSum;local fr=ProfileTimeSum/ProfileCount;local fs=ProfileTimeMin;local ft=ProfileTimeMax;local fu=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fq,fr,fs,ft,fu))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fv=radar_1.getEntries()local fw=radar_1.getData()local fx=ConvertResolutionX(1770)local fy=ConvertResolutionY(330)if#fv>0 then local fz=fw:find('identifiedConstructs":%[%]')if fz==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fz~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fx,fy,#fv)local fA={}for bj,bk in pairs(fv)do if radar_1.hasMatchingTransponder(bk)==1 then table.insert(fA,bk)end end;if#fA>0 then local bI=ConvertResolutionY(15)local bH=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bH,bI)for bj,bk in pairs(fA)do bI=bI+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bH,bI,radar_1.getConstructName(bk))end end else local fB;fB=fw:find('worksInEnvironment":false')if fB then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fx,fy)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fx,fy)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(cb,df)if df~="empty"then cb[#cb+1]=[[<text class="msg" x="50%%" y="310" >]]for fC in string.gmatch(df,"([^\n]+)")do cb[#cb+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fC)end;cb[#cb+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bs=system.getTime()local b5=vec3(core.getWorldVelocity())local dx=vec3(b5):len()local fD=bs-ag;if dx>1.38889 then dx=dx/1000;local fE=dx*(bs-ag)TotalDistanceTravelled=TotalDistanceTravelled+fE;W=W+fE end;X=X+fD;TotalFlightTime=TotalFlightTime+fD;ag=bs end;function composeAxisAccelerationFromTargetSpeed(fF,fG)local fH=vec3()local fI=vec3()if fF==axisCommandId.longitudinal then fH=vec3(core.getConstructOrientationForward())fI=vec3(core.getConstructWorldOrientationForward())elseif fF==axisCommandId.vertical then fH=vec3(core.getConstructOrientationUp())fI=vec3(core.getConstructWorldOrientationUp())elseif fF==axisCommandId.lateral then fH=vec3(core.getConstructOrientationRight())fI=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fJ=vec3(core.getWorldGravity())local fK=fJ:dot(fI)local fL=vec3(core.getWorldAirFrictionAcceleration())local fM=fL:dot(fI)local fN=vec3(core.getVelocity())local fO=fN:dot(fH)local fP=fG*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(1,0,10.0)end;targetSpeedPID:inject(fP-fO)local fQ=targetSpeedPID:get()local fR=(fQ-fM-fK)*fI;return fR end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for bj,bk in pairs(aS[0])do if av==nil or bk.center.x<av then av=bk.center.x end;if aw==nil or bk.center.x>aw then aw=bk.center.x end;if ax==nil or bk.center.y<ax then ax=bk.center.y end;if ay==nil or bk.center.y>ay then ay=bk.center.y end end;aT=""local fS=1.1*(aw-av)/1920;local fT=1.4*(ay-ax)/1080;for bj,bk in pairs(aS[0])do local bH=960+bk.center.x/fS;local bI=540+bk.center.y/fT;aT=aT..'<circle cx="'..bH..'" cy="'..bI..'" r="'..bk.radius/fS*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bk.name,"Moon")and not string.match(bk.name,"Sanctuary")and not string.match(bk.name,"Space")then aT=aT.."<text x='"..bH.."' y='"..bI+bk.radius/fS*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bk.name.."</text>"end end;local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/fS;local bI=540+b_.y/fT;aT=aT..'<circle cx="'..bH..'" cy="'..bI..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bH.."' y='"..bI-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fS;aV=fT;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/fS;local bI=540+b_.y/fT;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bH-80)/19.20,(bI-80)/10.80,aT)end end;function PlanetRef()local function fU(fV)return type(fV)=='number'end;local function fW(fV)return type(tonumber(fV))=='number'end;local function fX(fY)return type(fY)=='table'end;local function fZ(f_)return type(f_)=='string'end;local function g0(bk)return fX(bk)and fU(bk.x and bk.y and bk.z)end;local function g1(g2)return fX(g2)and fU(g2.latitude and g2.longitude and g2.altitude and g2.bodyId and g2.systemId)end;local g3=math.pi/180;local g4=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local g5=utils.clamp;local function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*epsilon end;local function g6(fV)local bl=string.gsub(string.reverse(e('%.4f',fV)),'^0*%.?','')return bl==''and'0'or string.reverse(bl)end;local function g7(g8)if g0(g8)then return e('{x=%.3f,y=%.3f,z=%.3f}',g8.x,g8.y,g8.z)end;if fX(g8)and not getmetatable(g8)then local g9={}local ga=next(g8)if type(ga)=='nil'or ga==1 then g9=g8 else for bj,bk in pairs(g8)do local dQ=g7(bk)if type(bj)=='number'then table.insert(g9,e('[%s]=%s',bj,dQ))else table.insert(g9,e('%s=%s',bj,dQ))end end end;return e('{%s}',table.concat(g9,','))end;if fZ(g8)then return e("'%s'",g8:gsub("'",[[\']]))end;return tostring(g8)end;local gb={}gb.__index=gb;gb.__tostring=function(g8,gc)local gd={}for bj in pairs(g8)do table.insert(gd,bj)end;table.sort(gd)local g9={}for _,bj in ipairs(gd)do local dQ=g7(g8[bj])if type(bj)=='number'then table.insert(g9,e('[%s]=%s',bj,dQ))else table.insert(g9,e('%s=%s',bj,dQ))end end;if gc then return e('%s%s',gc,table.concat(g9,',\n'..gc))end;return e('{%s}',table.concat(g9,','))end;gb.__eq=function(ge,gf)return ge.planetarySystemId==gf.planetarySystemId and ge.bodyId==gf.bodyId and float_eq(ge.radius,gf.radius)and float_eq(ge.center.x,gf.center.x)and float_eq(ge.center.y,gf.center.y)and float_eq(ge.center.z,gf.center.z)and float_eq(ge.GM,gf.GM)end;local function gg(c1,c2,gh,bT,gi)assert(fW(c1),'Argument 1 (planetarySystemId) must be a number:'..type(c1))assert(fW(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fW(gh),'Argument 3 (radius) must be a number:'..type(gh))assert(fX(bT),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bT))assert(fW(gi),'Argument 5 (GM) must be a number:'..type(gi))return setmetatable({planetarySystemId=tonumber(c1),bodyId=tonumber(c2),radius=tonumber(gh),center=vec3(bT),GM=tonumber(gi)},gb)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gj)return e('::pos{%d,%d,%s,%s,%s}',gj.systemId,gj.bodyId,g6(gj.latitude*g4),g6(gj.longitude*g4),g6(gj.altitude))end;MapPosition.__eq=function(ge,gf)return ge.bodyId==gf.bodyId and ge.systemId==gf.systemId and float_eq(ge.latitude,gf.latitude)and float_eq(ge.altitude,gf.altitude)and(float_eq(ge.longitude,gf.longitude)or float_eq(ge.latitude,math.pi/2)or float_eq(ge.latitude,-math.pi/2))end;local function gk(gl,c2,bX,bY,bW)local c1=gl;if fZ(gl)and not bY and not bW and not c2 and not bX then c1,c2,bX,bY,bW=string.match(gl,c0)assert(c1,'Argument 1 (position string) is malformed.')else assert(fW(c1),'Argument 1 (systemId) must be a number:'..type(c1))assert(fW(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fW(bX),'Argument 3 (latitude) must be in degrees:'..type(bX))assert(fW(bY),'Argument 4 (longitude) must be in degrees:'..type(bY))assert(fW(bW),'Argument 5 (altitude) must be in meters:'..type(bW))end;c1=tonumber(c1)c2=tonumber(c2)bX=tonumber(bX)bY=tonumber(bY)bW=tonumber(bW)if c2==0 then return setmetatable({latitude=bX,longitude=bY,altitude=bW,bodyId=c2,systemId=c1},MapPosition)end;return setmetatable({latitude=g3*g5(bX,-90,90),longitude=g3*(bY%360),altitude=bW,bodyId=c2,systemId=c1},MapPosition)end;local gm={}gm.__index=gm;gm.__tostring=function(g8,gc)local gn=gc and gc..'  'local go={}local gd={}for bj in pairs(g8)do table.insert(gd,bj)end;table.sort(gd)for _,gp in ipairs(gd)do bdy=g8[gp]local gq=gb.__tostring(bdy,gn)if gc then table.insert(go,e('[%s]={\n%s\n%s}',gp,gq,gc))else table.insert(go,e('  [%s]=%s',gp,gq))end end;if gc then return e('\n%s%s%s',gc,table.concat(go,',\n'..gc),gc)end;return e('{\n%s\n}',table.concat(go,',\n'))end;local function gr(gs)local aS={}local pid;for _,bk in pairs(gs)do local c7=bk.planetarySystemId;if type(c7)~='number'then error('Invalid planetary system ID: '..tostring(c7))elseif pid and c7~=pid then error('Mismatch planetary system IDs: '..c7 ..' and '..pid)end;local gt=bk.bodyId;if type(gt)~='number'then error('Invalid body ID: '..tostring(gt))elseif aS[gt]then error('Duplicate body ID: '..tostring(gt))end;setmetatable(bk.center,getmetatable(vec3.unit_x))aS[gt]=setmetatable(bk,gb)pid=c7 end;return setmetatable(aS,gm)end;aX={}local function gu(gs)return setmetatable({galaxyAtlas=gs or{}},aX)end;aX.__index=function(fY,i)if type(i)=='number'then local system=fY.galaxyAtlas[i]return gr(system)end;return rawget(aX,i)end;aX.__pairs=function(g8)return function(fY,bj)local gv,nv=next(fY,bj)return gv,nv and gr(nv)end,g8.galaxyAtlas,nil end;aX.__tostring=function(g8)local gw={}for _,gx in pairs(g8 or{})do local gy=gx:getPlanetarySystemId()local gz=gm.__tostring(gx,'    ')table.insert(gw,e('  [%s]={%s\n  }',gy,gz))end;return e('{\n%s\n}\n',table.concat(gw,',\n'))end;aX.BodyParameters=gg;aX.MapPosition=gk;aX.PlanetarySystem=gr;function aX.createBodyParameters(gA,c2,gB,gC,gD,gE,gF)assert(fW(gA),'Argument 1 (planetarySystemId) must be a number:'..type(gA))assert(fW(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fW(gB),'Argument 3 (surfaceArea) must be a number:'..type(gB))assert(fX(gC),'Argument 4 (aPosition) must be an array or vec3:'..type(gC))assert(fX(gD),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gD))assert(fW(gE),'Argument 6 (altitude) must be in meters:'..type(gE))assert(fW(gF),'Argument 7 (gravityAtPosition) must be number:'..type(gF))local gh=math.sqrt(gB/4/math.pi)local a3=gh+gE;local gG=vec3(gC)+a3*vec3(gD)local gi=gF*a3*a3;return gg(gA,c2,gh,gG,gi)end;aX.isMapPosition=g1;function aX:getPlanetarySystem(gl)if i==nil then i=0 end;if nv==nil then nv=0 end;local gA=gl;if g1(gl)then gA=gl.systemId end;if type(gA)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gm then system=gr(system)end;return system end end end;function gm:castIntersections(gH,f8,gI,gJ)local gI=gI or function(gK)return 1.05*gK.radius end;local gL={}if gJ then for _,i in ipairs(gJ)do gL[i]=self[i]end else gJ={}for bj,gK in pairs(self)do table.insert(gJ,bj)gL[bj]=gK end end;local function gM(gN,gO)local gP=gL[gN].center-gH;local gQ=gL[gO].center-gH;return gP:len()<gQ:len()end;table.sort(gJ,gM)local gR=f8:normalize()for i,c7 in ipairs(gJ)do local gK=gL[c7]local gS=gK.center-gH;local gh=gI(gK)local gT=gS:dot(gR)local gU=gT^2-(gS:len2()-gh^2)if gU>=0 then local gV=math.sqrt(gU)local gW=gT+gV;local gX=gT-gV;if gX>0 then return gK,gW,gX elseif gW>0 then return gK,gW,nil end end end;return nil,nil,nil end;function gm:closestBody(gY)assert(type(gY)=='table','Invalid coordinates.')local gZ,gK;local g_=vec3(gY)for _,h0 in pairs(self)do local h1=(h0.center-g_):len2()if(not gK or h1<gZ)and h0.name~="Space"then gK=h0;gZ=h1 end end;return gK end;function gm:convertToBodyIdAndWorldCoordinates(gl)local h2=gl;if fZ(gl)then h2=gk(gl)end;if h2.bodyId==0 then return 0,vec3(h2.latitude,h2.longitude,h2.altitude)end;local h0=self:getBodyParameters(h2)if h0 then return h2.bodyId,h0:convertToWorldCoordinates(h2)end end;function gm:getBodyParameters(gl)local c2=gl;if g1(gl)then c2=gl.bodyId end;assert(fW(c2),'Argument 1 (bodyId) must be a number:'..type(c2))return self[c2]end;function gm:getPlanetarySystemId()local _,bk=next(self)return bk and bk.planetarySystemId end;function gb:convertToMapPosition(bT)assert(fX(bT),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bT))local bU=vec3(bT)if self.bodyId==0 then return setmetatable({latitude=bU.x,longitude=bU.y,altitude=bU.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local bV=bU-self.center;local a3=bV:len()local bW=a3-self.radius;local bX=0;local bY=0;if not float_eq(a3,0)then local bZ=math.atan(bV.y,bV.x)bY=bZ>=0 and bZ or 2*math.pi+bZ;bX=math.pi/2-math.acos(bV.z/a3)end;return setmetatable({latitude=bX,longitude=bY,altitude=bW,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gb:convertToWorldCoordinates(gl)local h2=fZ(gl)and gk(gl)or gl;if h2.bodyId==0 then return vec3(h2.latitude,h2.longitude,h2.altitude)end;assert(g1(h2),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(h2.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(h2.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local c3=math.cos(h2.latitude)return self.center+(self.radius+h2.altitude)*vec3(c3*math.cos(h2.longitude),c3*math.sin(h2.longitude),math.sin(h2.latitude))end;function gb:getAltitude(bT)return(vec3(bT)-self.center):len()-self.radius end;function gb:getDistance(bT)return(vec3(bT)-self.center):len()end;function gb:getGravity(bT)local h3=self.center-vec3(bT)local h4=h3:len2()return self.GM/h4*h3/math.sqrt(h4)end;return setmetatable(aX,{__call=function(_,...)return gu(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fZ(f_)return type(f_)=='string'end;local function fX(fY)return type(fY)=='table'end;local function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bW)assert(self.body)local a3=bW+self.body.radius;if not float_eq(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gl,b5)assert(self.body)assert(fX(gl)or fZ(gl))assert(fX(b5))local b_=(fZ(gl)or PlanetRef.isMapPosition(gl))and self.body:convertToWorldCoordinates(gl)or vec3(gl)local bk=vec3(b5)local h5=b_-self.body.center;local gQ=bk:len2()local h6=h5:len()local h7=self.body.GM;local h8=((gQ-h7/h6)*h5-h5:dot(bk)*bk)/h7;local bQ=h7/(2*h7/h6-gQ)local h9=h8:len()local gR=h8:normalize()local ha=bQ*(1-h9)local hb=bQ*(1+h9)local hc=ha*gR+self.body.center;local hd=h9<=1 and-hb*gR+self.body.center or nil;local he=math.sqrt(bQ*h7*(1-h9*h9))local hf=hd and 2*math.pi*math.sqrt(bQ^3/h7)local hg=math.acos(h8:dot(h5)/(h9*h6))if h5:dot(bk)<0 then hg=-(hg-2*math.pi)end;local hh=math.acos((math.cos(hg)+h9)/(1+h9*math.cos(hg)))local hi=hh;if hi<0 then hi=hi+2*math.pi end;local hj=hi-h9*math.sin(hi)local hk=0;local hl=0;local hm=0;if hf~=nil then hk=hj/(2*math.pi/hf)hl=hf-hk;hm=hl+hf/2;if hg-math.pi>0 then hl=hk;hm=hl+hf/2 end;if hm>hf then hm=hm-hf end end;return{periapsis={position=hc,speed=he/ha,circularOrbitSpeed=math.sqrt(h7/ha),altitude=ha-self.body.radius},apoapsis=hd and{position=hd,speed=he/hb,circularOrbitSpeed=math.sqrt(h7/hb),altitude=hb-self.body.radius},currentVelocity=bk,currentPosition=b_,eccentricity=h9,period=hf,eccentricAnomaly=hh,meanAnomaly=hj,timeToPeriapsis=hl,timeToApoapsis=hm}end;local function hn(ho)local h0=PlanetRef.BodyParameters(ho.planetarySystemId,ho.bodyId,ho.radius,ho.center,ho.GM)return setmetatable({body=h0},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hn(...)end})end;function Kinematics()local aZ={}local hp=30000000/3600;local hq=hp*hp;local hr=100;local function hs(bk)return 1/math.sqrt(1-bk*bk/hq)end;function aZ.computeAccelerationTime(ht,hu,hv)local hw=hp*math.asin(ht/hp)return(hp*math.asin(hv/hp)-hw)/hu end;function aZ.computeDistanceAndTime(ht,hv,hx,hy,hz,hA)hz=hz or 0;hA=hA or 0;local hB=ht<=hv;local hC=hy*(hB and 1 or-1)/hx;local hD=-hA/hx;local hE=hC+hD;if hB and hE<=0 or not hB and hE>=0 then return-1,-1 end;local hF,hG=0,0;if hC~=0 and hz>0 then local hw=math.asin(ht/hp)local hH=math.pi*(hC/2+hD)local hI=hC*hz;local hJ=hp*math.pi;local bk=function(fY)local cD=(hH*fY-hI*math.sin(math.pi*fY/2/hz)+hJ*hw)/hJ;local hK=math.tan(cD)return hp*hK/math.sqrt(hK*hK+1)end;local hL=hB and function(f_)return f_>=hv end or function(f_)return f_<=hv end;hG=2*hz;if hL(bk(hG))then local hM=0;while math.abs(hG-hM)>0.5 do local fY=(hG+hM)/2;if hL(bk(fY))then hG=fY else hM=fY end end end;local hN=ht;local hO=hG/hr;for hP=1,hr do local bB=bk(hP*hO)hF=hF+(bB+hN)*hO/2;hN=bB end;if hG<2*hz then return hF,hG end;ht=hN end;local hw=hp*math.asin(ht/hp)local bm=(hp*math.asin(hv/hp)-hw)/hE;local hQ=hq*math.cos(hw/hp)/hE;local a3=hQ-hq*math.cos((hE*bm+hw)/hp)/hE;return a3+hF,bm+hG end;function aZ.computeTravelTime(ht,hu,a3)if a3==0 then return 0 end;if hu>0 then local hw=hp*math.asin(ht/hp)local hQ=hq*math.cos(hw/hp)/hu;return(hp*math.acos(hu*(hQ-a3)/hq)-hw)/hu end;assert(ht>0,'Acceleration and initial speed are both zero.')return a3/ht end;function aZ.lorentz(bk)return hs(bk)end;return aZ end;function script.onStart()VERSION_NUMBER=5.223;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;bg.activate()bh.activate()fuelDisplaySwitch.activate()end)end;function SaveDataBank(hR)if dbHud_1 then if not Y then for bj,bk in pairs(b)do dbHud_1.setStringValue(bk,g(_G[bk]))if hR and dbHud_2 then dbHud_2.setStringValue(bk,g(_G[bk]))end end;for bj,bk in pairs(a)do dbHud_1.setStringValue(bk,g(_G[bk]))if hR and dbHud_2 then dbHud_2.setStringValue(bk,g(_G[bk]))end end;c("Saved Variables to Datacore")if hR and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bu=j()if door and(bu>0 or bu==0 and ae<10000)then for _,bk in pairs(door)do bk.toggle()end end;if forcefield and(bu>0 or bu==0 and ae<10000)then for _,bk in pairs(forcefield)do bk.toggle()end end;SaveDataBank()if button then button.activate()end;bg.deactivate()fuelDisplaySwitch.deactivate()end;function script.onTick(hS)if hS=="tenthSecond"then bf.deactivate()if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hT=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hT then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local df,dg=getDistanceDisplayString(a3)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..df..'", "unit":"'..dg..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')df,dg=getDistanceDisplayString(P)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..df..'", "unit":"'..dg..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')df,dg=getDistanceDisplayString(R)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..df..'", "unit":"'..dg..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')df,dg=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",df)..'", "unit":"'..dg..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then PlayerThrottle=unit.getAxisCommandValue(0)elseif AtmoSpeedAssist then PlayerThrottle=1;Nav.control.cancelCurrentControlMasterMode()end end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hS=="oneSecond"then bf.activate()ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cb={}local dm=GetFlightStyle()DrawOdometer(cb,W,TotalDistanceTravelled,dm,X)if ShouldCheckDamage then CheckDamage(cb)end;a5=table.concat(cb,"")collectgarbage("collect")elseif hS=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bl=json.decode(dbHud_1.getStringValue("SavedLocations"))if bl~=nil then _G["SavedLocations"]=bl;local c9=-1;local c6;for bj,bk in pairs(SavedLocations)do if bk.name and bk.name=="SatNav Location"then c9=bj;break end end;if c9~=-1 then c6=SavedLocations[c9]c9=-1;for bj,bk in pairs(aS[0])do if bk.name and bk.name=="SatNav Location"then c9=bj;break end end;if c9>-1 then aS[0][c9]=c6 end;UpdateAtlasLocationsList()K=c6.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hS=="msgTick"then local cb={}DisplayMessage(cb,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hS=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hS=="hudTick"then local cb={}HUDPrologue(cb)if showHud then UpdateHud(cb)else DisplayOrbitScreen(cb)DrawWarnings(cb)end;HUDEpilogue(cb)cb[#cb+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(cb,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cb)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cb)if screen_1.getMouseState()==1 then CheckButtons()end;cb[#cb+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(cb)if not b1 and not b2 then local hU=table.concat(cb,"")cb={}cb[#cb+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cb[#cb+1]=aT;cb[#cb+1]=hU;cb[#cb+1]="</body>"b1=true;cb[#cb+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cb,"")system.setScreen(content)elseif b2 then local hU=table.concat(cb,"")cb={}cb[#cb+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cb[#cb+1]=aT;cb[#cb+1]=hU;cb[#cb+1]="</body>"end;if not b1 then cb[#cb+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(cb)end else SetButtonContains()DrawButtons(cb)end;cb[#cb+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;cb[#cb+1]=[[</svg></body>]]content=table.concat(cb,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hS=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;local bm=system.getTime()local hV=bm-bc;bc=bm;local ce=vec3(core.getConstructWorldOrientationForward())local cf=vec3(core.getConstructWorldOrientationRight())local hW=vec3(core.getConstructWorldOrientationUp())local cg=vec3(core.getWorldVertical())local hX=core.getVelocity()local dp=getRoll(cg,ce,cf)local dq=dp/180*math.pi;local dr=math.cos(dq)local ds=math.sin(dq)local ch=getPitch(cg,ce,cf)local hY=getPitch(cg,ce,cf*dr+hW*ds)local hZ=-math.deg(cy(hW,b5,ce))local h_=math.deg(cy(cf,b5,ce))bb=ad and hZ<-StallAngle or hZ>StallAngle or h_<-StallAngle or h_>StallAngle;local i0=100;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()local by=planet:getGravity(core.getConstructWorldPos()):len()*n()bd=0;a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local i1=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not i1 then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0 end;if not i1 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=i1;if ad and j()>0.09 then if b6>AtmoSpeedLimit/3.6 and not AtmoSpeedAssist and not ai then BrakeIsOn=true;ai=true elseif not AtmoSpeedAssist and ai then if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local i2=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;P=P;Q=Q;local i3=AutopilotTargetCoords;local i4=false;AutopilotDistance=(vec3(i3)-vec3(core.getConstructWorldPos())):len()local i5=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()local df,dg=getDistanceDisplayString(i5)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..df..'", "unit":"'..dg..'"}')local i6=true;local i7=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;df,dg=getDistanceDisplayString(i7)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..df..'", "unit":"'..dg..'"}')if orbit.apoapsis==nil and b6>300 and AutopilotAccelerating then local dc=vec3(i3)-vec3(core.getConstructWorldPos())local i8=utils.clamp(math.deg(cy(hW,b5:normalize(),dc:normalize()))*b6/500,-90,90)local i9=utils.clamp(math.deg(cy(cf,b5:normalize(),dc:normalize()))*b6/500,-90,90)if math.abs(i8)<5 and math.abs(i9)<5 then i8=i8*2;i9=i9*2 end;if math.abs(i8)<2 and math.abs(i9)<2 then i8=i8*2;i9=i9*2 end;local hZ=-math.deg(cy(hW,ce,b5:normalize()))local h_=-math.deg(cy(cf,ce,b5:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(i9-h_)local ia=utils.clamp(apPitchPID:get(),-1,1)C=C+ia;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(i8-hZ)local ib=utils.clamp(apYawPID:get(),-1,1)D=D+ib;i4=true end;if i7<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(i7)end end;if not AutopilotCruising and not AutopilotBraking and not i4 then i6=AlignToWorldVector((i3-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn and not i4 then i6=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not i6 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,ic=b0(V):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if b6<=ic then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if i6 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif i6 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b3=true;local i9=0;local b_=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local id=b_-vec3(core.getConstructWorldPos())local ie=vec3(id):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ig=vec3(id):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(ie*ie+ig*ig)AlignToWorldVector(id:normalize())local ih=40;local ii=a3<ih;local ij=100;local fG=utils.clamp((a3-ih)/2,10,ij)C=0;local i6=math.abs(D)<0.1;if i6 and b6<fG and not ii then BrakeIsOn=false;i9=-20 else BrakeIsOn=true;i9=0 end;local ik=1.0;if math.abs(i9-ch)>ik then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(i9-ch)local ia=pitchPID:get()C=ia end end;local dU=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dA=unit.getClosestPlanetInfluence()>0;local il=HoldAltitude-ae;local im=500+b6;local i9=(utils.smoothstep(il,-im,im)-0.5)*2*MaxPitch*utils.clamp(b6/100,0.1,1)if not AltitudeHold then i9=0 end;if LockPitch~=nil then if dA then i9=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local io=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=io then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,io)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then i9=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;i9=0;b3=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b3=autoRollPreference end end;local ip=C;if b6>w and not a8 and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(b5))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local dc=CustomTarget.position-vec3(core.getConstructWorldPos())local hW=vec3(core.getConstructWorldOrientationUp())local i8=math.deg(cy(cg,b5:normalize(),dc:normalize()))*2;local iq=math.rad(math.abs(dp))if b6>i0 then bd=utils.clamp(i8,-90,90)local ir=i8;i8=utils.clamp(hZ-i8,hZ-StallAngle*0.85,hZ+StallAngle*0.85)*math.cos(iq)+utils.clamp(i9-hY,-StallAngle*0.85,StallAngle*0.85)*math.sin(math.rad(dp))i9=utils.clamp(i9*math.cos(iq),-StallAngle*0.85,StallAngle*0.85)+utils.clamp(math.abs(ir),-StallAngle*0.85,StallAngle*0.85)*math.sin(iq)end;local is=i8;if not bb and b6>i0 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(is)local ib=utils.clamp(yawPID:get(),-1,1)D=D+ib elseif aa>-1 or b6<i0 then AlignToWorldVector(dc)else AlignToWorldVector(b5)end;local it=planet:getAltitude(CustomTarget.position)local iu=math.sqrt(dc:len()^2-(ae-it)^2)local iv=LastMaxBrakeInAtmo;if iv then iv=iv*utils.clamp(b6/100,0.1,1)*j()else iv=LastMaxBrake end;local dS=b5.x*dU.x+b5.y*dU.y+b5.z*dU.z;local iw=b5:len()-math.abs(dS)local ix=vec3(core.getWorldAirFrictionAcceleration())local iy=math.sqrt(ix:len()-ix:project_on(dU):len())*n()if b6>100 then P,Q=aZ.computeDistanceAndTime(b6,100,n(),0,0,iv+iy)local iz,iA=aZ.computeDistanceAndTime(100,0,n(),0,0,iv/2)P=P+iz else P,Q=aZ.computeDistanceAndTime(b6,0,n(),0,0,iv/2)end;StrongBrakes=true;if iu<=P+b6*hV/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(iw<0.1 or iu<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<iu)then BrakeLanding=true;VectorToTarget=false end;LastDistanceToTarget=iu end;C=ip;local fk=-1;local ik=0.1;if BrakeLanding then i9=0;local dS=b5.x*dU.x+b5.y*dU.y+b5.z*dU.z;local iB=false;local iC=30;if a_~=nil and a_>0 then local iy=0;local dv=utils.clamp(j(),0.4,2)local iv=LastMaxBrakeInAtmo*utils.clamp(b6/100,0.1,1)*dv;local iD=a_*dv+iv+iy-by;local iE=iv+iy-by;local iF=iv/2+iy-by;local iG=b6-math.sqrt(math.abs(iF/2)*20/(0.5*n()))*utils.sign(iF)if iG<0 then iG=0 end;local iH;if b6>100 then local iI,_=aZ.computeDistanceAndTime(b6,100,n(),0,0,iv)local iJ,_=aZ.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(iv))iH=iI+iJ else iH=aZ.computeDistanceAndTime(b6,0,n(),0,0,math.sqrt(iv))end;if iH<20 then BrakeIsOn=false else local iK=0;if iG>100 then local iL,_=aZ.computeDistanceAndTime(iG,100,n(),0,0,iD)local iM,_=aZ.computeDistanceAndTime(100,0,n(),0,0,a_*dv+math.sqrt(iv)+iy-by)iK=iL+iM else iK,_=aZ.computeDistanceAndTime(iG,0,n(),0,0,a_*dv+math.sqrt(iv)+iy-by)end;iK=(iK+15+b6*hV)*1.1;local iN=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if iN then local it=planet:getAltitude(CustomTarget.position)local iO=ae-it-100;local dc=CustomTarget.position-vec3(core.getConstructWorldPos())local iP=math.sqrt(dc:len()^2-(ae-it)^2)if iP>100 then iN=false elseif iO<=iK or iK==-1 then BrakeIsOn=true;iB=true else BrakeIsOn=false;iB=true end end;if not iN and CalculateBrakeLandingSpeed then if iK>=iC then BrakeIsOn=true else BrakeIsOn=false end;iB=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fk=aa;if fk>-1 then b3=autoRollPreference;if b6<1 or b5:normalize():dot(cg)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and b5:normalize():dot(-dU)<0.999 then BrakeIsOn=true elseif dS<-brakeLandingRate and not iB then BrakeIsOn=true elseif not iB then BrakeIsOn=false end end;if AutoTakeoff or a8 then if i9<15 and ae/HoldAltitude>0.75 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0 elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;local iQ=hoverDetectGround()>-1;local iR=ch;if VectorToTarget and not iQ and b6>i0 then local iq=math.rad(math.abs(dp))iR=ch*math.cos(iq)+h_*math.sin(iq)end;local iS=utils.clamp(i9-iR,-StallAngle*0.85,StallAngle*0.85)if math.abs(iS)>ik and(not bb and(math.abs(dp)<5 or VectorToTarget)or BrakeLanding or iQ)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iS)local ia=pitchPID:get()C=C+ia end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;local iT=core.getAltitude()if iT<HeadlightGroundHeight then bh.activate()else bh.deactivate()end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iU=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local iV=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local iW=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local iX=G;local iY=vec3(core.getWorldVertical())local iZ=vec3(core.getConstructWorldOrientationUp())local i_=vec3(core.getConstructWorldOrientationForward())local j0=vec3(core.getConstructWorldOrientationRight())local j1=vec3(core.getWorldVelocity())local j2=vec3(core.getWorldVelocity()):normalize()local j3=getRoll(iY,i_,j0)local j4=math.abs(j3)local j5=utils.sign(j3)local j=j()local j6=vec3(core.getWorldAngularVelocity())local j7=iU*pitchSpeedFactor*j0+iV*rollSpeedFactor*i_+iW*yawSpeedFactor*iZ;if iY:len()>0.01 and j>0.0 or ProgradeIsOn then if b3==true and math.abs(bd-j3)>autoRollRollThreshold and iV==0 then local j8=bd;local j9=autoRollFactor;if rollPID==nil then rollPID=pid.new(j9*0.01,0,j9*0.1)end;rollPID:inject(j8-j3)local ja=rollPID:get()j7=j7+ja*i_ end end;if iY:len()>0.01 and j>0.0 then local jb=20.0;if turnAssist==true and j4>jb and iU==0 and iW==0 then local jc=turnAssistFactor*0.1;local jd=turnAssistFactor*0.025;local je=(j4-jb)/(180-jb)*180;local jf=0;if je<90 then jf=je/90 elseif je<180 then jf=(180-je)/90 end;jf=jf*jf;local jg=-j5*jd*(1.0-jf)local jh=jc*jf;j7=j7+jh*j0+jg*iZ end end;local ji=1;local jj=0;local jk=1;if system.getMouseWheel()>0 then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeLarge/100,-1,1)elseif system.getMouseWheel()<0 then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeLarge/100,-1,1)end;brakeInput2=0;local dS=-iY:dot(j1)if ad and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(AtmoSpeedLimit/3.6-j1:dot(i_))local jl=throttlePID:get()calculatedThrottle=utils.clamp(jl,-1,1)if calculatedThrottle<PlayerThrottle and(j>0.1 or j>0 and dS<-5)then ThrottleLimited=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(calculatedThrottle,0.01,1))else ThrottleLimited=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(j1:len()-AtmoSpeedLimit/3.6)local jm=utils.clamp(brakePID:get(),0,1)if j>0 and dS<-5 or j>0.1 then brakeInput2=jm end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=utils.clamp(calculatedThrottle,0.01,1)end;local jn=''local jo=vec3()local jp='thrust analog vertical 'local jq='thrust analog lateral 'if ExtraLateralTags~="none"then jq=jq..ExtraLateralTags end;if ExtraVerticalTags~="none"then jp=jp..ExtraVerticalTags end;local jr=composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical,Z*1000)jn=jn..' , '..jp;jo=jo+jr;local js='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then js=js..ExtraLongitudeTags end;local jt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local ju=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(js,axisCommandId.longitudinal)local jv=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,0)jn=jn..' , '..jq;jo=jo+jv;if jo:len()>constants.epsilon then Nav:setEngineForceCommand(jn,jo,jj,'','','',jk)end;Nav:setEngineForceCommand(js,ju,ji)if iX==0 then iX=brakeInput2 end;local jw=-iX*(brakeSpeedFactor*j1+brakeFlatFactor*j2)Nav:setEngineForceCommand('brake',jw)else local jw=-iX*(brakeSpeedFactor*j1+brakeFlatFactor*j2)Nav:setEngineForceCommand('brake',jw)local jn=''local jo=vec3()local jx=false;local js='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then js=js..ExtraLongitudeTags end;local jt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jt==axisCommandType.byThrottle then local ju=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(js,axisCommandId.longitudinal)Nav:setEngineForceCommand(js,ju,ji)elseif jt==axisCommandType.byTargetSpeed then local ju=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jn=jn..' , '..js;jo=jo+ju;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then jx=true end end;local jq='thrust analog lateral 'if ExtraLateralTags~="none"then jq=jq..ExtraLateralTags end;local jy=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jy==axisCommandType.byThrottle then local jz=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jq,axisCommandId.lateral)Nav:setEngineForceCommand(jq,jz,ji)elseif jy==axisCommandType.byTargetSpeed then local jv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jn=jn..' , '..jq;jo=jo+jv end;local jp='thrust analog vertical 'if ExtraVerticalTags~="none"then jp=jp..ExtraVerticalTags end;local jA=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jA==axisCommandType.byThrottle then local jr=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jp,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jp,jr,ji,'airfoil','ground','',jk)else Nav:setEngineForceCommand(jp,vec3(),ji)Nav:setEngineForceCommand('airfoil vertical',jr,ji,'airfoil','','',jk)Nav:setEngineForceCommand('ground vertical',jr,ji,'ground','','',jk)end elseif jA==axisCommandType.byTargetSpeed then if Z<0 then Nav:setEngineForceCommand('hover',vec3(),ji)end;local jB=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jn=jn..' , '..jp;jo=jo+jB end;local fG=unit.getAxisCommandValue(0)if jo:len()>constants.epsilon then if G~=0 or jx or math.abs(j2:dot(i_))<0.8 or b5:len()>fG/3.6 then jn=jn..', brake'end;Nav:setEngineForceCommand(jn,jo,jj,'','','',jk)end end;local jC=torqueFactor*(j7-j6)local jD=vec3(core.getWorldAirFrictionAngularAcceleration())jC=jC-jD;Nav:setEngineTorqueCommand('torque',jC,ji,'airfoil','','',jk)Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bB=vec3(core.getVelocity()):len()local jE=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jF=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bB*3.6>jF*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB*3.6<jF*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jG=unit.getThrottle()local fG=jG/100;if j==0 then fG=fG*MaxGameVelocity;if bB>=fG*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB<fG*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fG=fG*ReentrySpeed/3.6;if bB>=fG*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB<fG*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bl=coroutine.resume(beginSetup)if bl then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jH)if jH=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b3=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if A and not BrakeLanding then Nav.control.extendLandingGears()end else if A then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jH=="forward"then B=B-1 elseif jH=="backward"then B=B+1 elseif jH=="left"then E=E-1 elseif jH=="right"then E=E+1 elseif jH=="yawright"then F=F-1 elseif jH=="yawleft"then F=F+1 elseif jH=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jH=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jH=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jH=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jH=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jH=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jH=="option1"then IncrementAutopilotTargetIndex()v=false elseif jH=="option2"then DecrementAutopilotTargetIndex()v=false elseif jH=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif jH=="option4"then ToggleAutopilot()v=false elseif jH=="option5"then ToggleLockPitch()v=false elseif jH=="option6"then ToggleAltitudeHold()v=false elseif jH=="option7"then wipeSaveVariables()v=false elseif jH=="option8"then ToggleFollowMode()v=false elseif jH=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif jH=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif jH=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jH=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jH=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif jH=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()PlayerThrottle=0 elseif jH=="speedup"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jH=="speeddown"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jH=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jH)if jH=="forward"then B=0 elseif jH=="backward"then B=0 elseif jH=="left"then E=0 elseif jH=="right"then E=0 elseif jH=="yawright"then F=0 elseif jH=="yawleft"then F=0 elseif jH=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jH=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jH=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jH=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jH=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jH=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jH=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif jH=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jH=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jH)if jH=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jH=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jH=="speedup"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jH=="speeddown"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jI)local i;local jJ="/commands /setname /G /agg /addlocation /copydatabank"local jK,jL=nil,nil;local jM="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jI," ")jK=jI;if i~=nil then jK=string.sub(jI,0,i-1)jL=string.sub(jI,i+1)elseif not string.find(jJ,jK)then for fC in string.gmatch(jM,"([^\n]+)")do c(fC)end;return end;if jK=="/setname"then if jL==nil or jL==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jL)else K="Select a saved target to rename first"end elseif jK=="/addlocation"then if jL==nil or jL==""or string.find(jL,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jL,"::")local c5=string.sub(jL,1,i-2)local b_=string.sub(jL,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c1,c2,bX,bY,bW=string.match(b_,c0)local planet=aS[tonumber(c1)][tonumber(c2)]AddNewLocationByWaypoint(c5,planet,b_)K="Added "..c5 .." to saved locations,\nplanet "..planet.name.." at "..b_;a2=5 elseif jK=="/agg"then if jL==nil or jL==""then K="Usage: /agg targetheight"return end;jL=tonumber(jL)if jL<1000 then jL=1000 end;AntigravTargetAltitude=jL;K="AGG Target Height set to "..jL elseif jK=="/G"then if jL==nil or jL==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jL=="dump"then for bj,bk in pairs(a)do if type(_G[bk])=="boolean"then if _G[bk]==true then c(bk.." true")else c(bk.." false")end elseif _G[bk]==nil then c(bk.." nil")else c(bk.." ".._G[bk])end end;return end;i=string.find(jL," ")local jN=string.sub(jL,0,i-1)local jO=string.sub(jL,i+1)for bj,bk in pairs(a)do if bk==jN then K="Variable "..jN.." changed to "..jO;local jP=type(_G[bk])if jP=="number"then jO=tonumber(jO)elseif jP=="boolean"then if string.lower(jO)=="true"then jO=true else jO=false end end;_G[bk]=jO;return end end;K="No such global variable: "..jN elseif jK=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
