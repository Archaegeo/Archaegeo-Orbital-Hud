name: ButtonsHud - ShadowMage v4.927 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;local b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b4=vec3(core.getWorldVelocity())local b5=vec3(b4):len()local b6=math.cos(StallAngle*constants.deg2rad)local b7=LandingGearGroundHeight;local b8=system.getMouseDeltaX()local b9=system.getMouseDeltaY()local ba=nil;local bb=nil;local bc=nil;local bd=nil;function LoadVariables()if dbHud_1 then local be=dbHud_1.hasKey;if not useTheseSettings then for bf,bg in pairs(a)do if be(bg)then local bh=f(dbHud_1.getStringValue(bg))if bh~=nil then c(bg.." "..dbHud_1.getStringValue(bg))_G[bg]=bh;az=true end end end end;coroutine.yield()for bf,bg in pairs(b)do if be(bg)then local bh=f(dbHud_1.getStringValue(bg))if bh~=nil then c(bg.." "..dbHud_1.getStringValue(bg))_G[bg]=bh;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bi=system.getTime()if LastStartTime+180<bi then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=bi;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b6=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bj,bk)if bj>bk then bk=bj end;if ContainerOptimization>0 then bk=bk-bk*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bk=bk-bk*FuelTankOptimization*0.05 end;return bk end;function ProcessElements()for bf in pairs(af)do local type=l(af[bf])if type=="landing gear"then A=true end;if type=="dynamic core"then local bl=h(af[bf])if bl>10000 then aQ=128 elseif bl>1000 then aQ=64 elseif bl>150 then aQ=32 end end;aG=aG+h(af[bf])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local bl=h(af[bf])local bm=m(af[bf])local bj=0;local bn=system.getTime()if type=="Atmospheric Fuel Tank"then local bk=400;local bo=35.03;if bl>10000 then bk=51200;bo=5480 elseif bl>1300 then bk=6400;bo=988.67 elseif bl>150 then bk=1600;bo=182.67 end;bj=bm-bo;if fuelTankHandlingAtmo>0 then bk=bk+bk*fuelTankHandlingAtmo*0.2 end;bk=CalculateFuelVolume(bj,bk)aD[#aD+1]={af[bf],core.getElementNameById(af[bf]),bk,bo,bj,bn}end;if type=="Rocket Fuel Tank"then local bk=320;local bo=173.42;if bl>65000 then bk=40000;bo=25740 elseif bl>6000 then bk=5120;bo=4720 elseif bl>700 then bk=640;bo=886.72 end;bj=bm-bo;if fuelTankHandlingRocket>0 then bk=bk+bk*fuelTankHandlingRocket*0.2 end;bk=CalculateFuelVolume(bj,bk)aF[#aF+1]={af[bf],core.getElementNameById(af[bf]),bk,bo,bj,bn}end;if type=="Space Fuel Tank"then local bk=2400;local bo=182.67;if bl>10000 then bk=76800;bo=5480 elseif bl>1300 then bk=9600;bo=988.67 end;bj=bm-bo;if fuelTankHandlingSpace>0 then bk=bk+bk*fuelTankHandlingSpace*0.2 end;bk=CalculateFuelVolume(bj,bk)aE[#aE+1]={af[bf],core.getElementNameById(af[bf]),bk,bo,bj,bn}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if switch then for _,bg in pairs(switch)do local bp=bg.getId()local bq=core.getElementNameById(bp)if bq=="navBlinkSwitch"then ba=bg elseif bq=="navLightSwitch"then bb=bg elseif bq=="headLightSwitch"then bc=bg elseif bq=="fuelDisplaySwitch"then bd=bg else bg.toggle()end end end;if door then for _,bg in pairs(door)do bg.toggle()end end;if forcefield then for _,bg in pairs(forcefield)do bg.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if b7~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b7)if b7==0 and not A then GearExtended=true end else b7=Nav:getTargetGroundAltitude()if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(bg)if ResolutionX==1920 then return bg else return round(ResolutionX*bg/1920,0)end end;function ConvertResolutionY(bg)if ResolutionY==1080 then return bg else return round(ResolutionY*bg/1080,0)end end;function RefreshLastMaxBrake(br,bs)if br==nil then br=core.g()end;br=round(br,5)local bt=j()if bs~=nil and bs or(aC==nil or aC~=br)then local b4=core.getVelocity()local bu=vec3(b4):len()local bv=f(unit.getData()).maxBrake;if bv~=nil and bv>0 and ad then bv=bv/utils.clamp(bu/100,0.1,1)bv=bv/bt;if bv>LastMaxBrakeInAtmo and bt>0.10 then LastMaxBrakeInAtmo=bv end end;if bv~=nil and bv>0 then LastMaxBrake=bv end;aC=br end end;function MakeButton(bw,bx,by,bz,bA,bB,bC,bD,bE)local bF={enableName=bw,disableName=bx,width=by,height=bz,x=bA,y=bB,toggleVar=bC,toggleFunction=bD,drawCondition=bE,hovered=false}table.insert(aq,bF)return bF end;function UpdateAtlasLocationsList()AtlasOrdered={}for bf,bg in pairs(aS[0])do table.insert(AtlasOrdered,{name=bg.name,index=bf})end;local function bG(bH,bI)return bH.name<bI.name end;table.sort(AtlasOrdered,bG)end;function AddLocationsToAtlas()for bf,bg in pairs(SavedLocations)do table.insert(aS[0],bg)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bJ)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bK='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bL,bM,bN,bO,bP=string.match(bJ,bK)if bL=="0"and bM=="0"then return vec3(tonumber(bN),tonumber(bO),tonumber(bP))end;bO=math.rad(bO)bN=math.rad(bN)local planet=aS[tonumber(bL)][tonumber(bM)]local bQ=math.cos(bN)local bR=vec3(bQ*math.cos(bO),bQ*math.sin(bO),math.sin(bN))return planet.center+(planet.radius+bP)*bR end;function AddNewLocationByWaypoint(bS,planet,bJ)if dbHud_1 then local bT={}local position=zeroConvertToWorldCoordinates(bJ)if planet.name=="Space"then bT={position=position,name=bS,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bU=false;if planet.atmos then bU=true else bU=false end;bT={position=position,name=bS,atmosphere=bU,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bT;table.insert(aS[0],bT)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bq=planet.name..". "..#SavedLocations;if radar_1 then local bV,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bV~=nil and bV~=""then bq=bq.." "..radar_1.getConstructName(bV)end end;local bT={}local bU=false;if planet.atmos then bU=true end;bT={position=position,name=bq,atmosphere=bU,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bT;table.insert(aS[0],bT)UpdateAtlasLocationsList()K="Location saved as "..bq else K="Databank must be installed to save locations"end end;function UpdatePosition(bW)local bX=-1;local bT;for bf,bg in pairs(SavedLocations)do if bg.name and bg.name==CustomTarget.name then bX=bf;break end end;if bX~=-1 then local bY;if bW~=nil then bT={position=SavedLocations[bX].position,name=bW,atmosphere=SavedLocations[bX].atmosphere,planetname=SavedLocations[bX].planetname,gravity=SavedLocations[bX].gravity}else bT={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bX].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bX]=bT;bX=-1;for bf,bg in pairs(aS[0])do if bg.name and bg.name==CustomTarget.name then bX=bf end end;if bX>-1 then aS[0][bX]=bT end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bX=-1;for bf,bg in pairs(aS[0])do if bg.name and bg.name==CustomTarget.name then bX=bf end end;if bX>-1 then table.remove(aS[0],bX)end;bX=-1;for bf,bg in pairs(SavedLocations)do if bg.name and bg.name==CustomTarget.name then K=bg.name.." saved location cleared"bX=bf;break end end;if bX~=-1 then table.remove(SavedLocations,bX)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bZ)bZ[#bZ+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(b_,c0,bA,bB,by,bz)if b_>bA and b_<bA+by and c0>bB and c0<bB+bz then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local c3=vec3(core.getWorldVertical())local c4=getPitch(c3,c1,c2)LockPitch=c4;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bZ)local c5=0;ao=""local c6=aG;local c7=0;local c8=0;local c9=0;local ca=0;local cb=""for bf in pairs(af)do local bl=0;local cc=0;cc=h(af[bf])bl=k(af[bf])c7=c7+bl;if bl<cc then if bl==0 then c9=c9+1 else c8=c8+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bf]))local bA=position.x-aQ;local bB=position.y-aQ;local cd=position.z-aQ;table.insert(al,core.spawnArrowSticker(bA,bB,cd+1,"down"))table.insert(al,core.spawnArrowSticker(bA,bB,cd+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bA+1,bB,cd,"north"))table.insert(al,core.spawnArrowSticker(bA+1,bB,cd,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bA-1,bB,cd,"south"))table.insert(al,core.spawnArrowSticker(bA-1,bB,cd,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bA,bB-1,cd,"east"))table.insert(al,core.spawnArrowSticker(bA,bB-1,cd,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bA,bB+1,cd,"west"))table.insert(al,core.spawnArrowSticker(bA,bB+1,cd,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bf])end elseif aH and#al>0 and al[11]==af[bf]then for ce in pairs(al)do core.deleteSticker(al[ce])end;al={}end end;c5=d(c7/c6*100)if c5<100 then bZ[#bZ+1]=[[<g class="pbright txt">]]ca=d(c5*2.55)cb=e("rgb(%d,%d,%d)",255-ca,ca,0)if c5<100 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cb,c5)if c9>0 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cb,c9,c8)elseif c8>0 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cb,c8)end end;bZ[#bZ+1]=[[<\g>]]end end;function DrawCursorLine(bZ)local cf=d(utils.clamp(a3/(at/4)*255,0,255))bZ[#bZ+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+cf,d(PrimaryG+0.5)-cf,d(PrimaryB+0.5)-cf)end;function getPitch(cg,ch,bI)local ci=cg:cross(bI):normalize_inplace()local c4=math.acos(utils.clamp(ci:dot(-ch),-1,1))*constants.rad2deg;if ci:cross(-ch):dot(bI)<0 then c4=-c4 end;return c4 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bf,bg in pairs(a)do dbHud_1.setStringValue(bg,g(nil))end;for bf,bg in pairs(b)do if bg~="SavedLocations"then dbHud_1.setStringValue(bg,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bg in pairs(aq)do if bg.hovered then if not bg.drawCondition or bg.drawCondition()then bg.toggleFunction()end;bg.hovered=false end end end;function SetButtonContains()local bA=a0+at/2;local bB=a1+au/2;for _,bg in pairs(aq)do bg.hovered=Contains(bA,bB,bg.x,bg.y,bg.width,bg.height)end end;function DrawButton(bZ,cj,hover,bA,bB,ck,cl,cm,cn,co,cp)if type(co)=="function"then co=co()end;if type(cp)=="function"then cp=cp()end;bZ[#bZ+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bA,bB,ck,cl)if cj then bZ[#bZ+1]=e("%s'",cm)else bZ[#bZ+1]=cn end;if hover then bZ[#bZ+1]=" style='stroke:white; stroke-width:2'"else bZ[#bZ+1]=" style='stroke:black; stroke-width:1'"end;bZ[#bZ+1]="></rect>"bZ[#bZ+1]=e("<text x='%f' y='%f' font-size='24' fill='",bA+ck/2,bB+cl/2+5)if cj then bZ[#bZ+1]="black"else bZ[#bZ+1]="white"end;bZ[#bZ+1]="' text-anchor='middle' font-family='Montserrat'>"if cj then bZ[#bZ+1]=e("%s</text>",co)else bZ[#bZ+1]=e("%s</text>",cp)end end;function DrawButtons(bZ)local cq="rgb(50,50,50)'"local cr="rgb(210,200,200)"local cs=DrawButton;for _,bg in pairs(aq)do local bx=bg.disableName;local bw=bg.enableName;if type(bx)=="function"then bx=bx()end;if type(bw)=="function"then bw=bw()end;if not bg.drawCondition or bg.drawCondition()then cs(bZ,bg.toggleVar(),bg.hovered,bg.x,bg.y,bg.width,bg.height,cr,cq,bx,bw)end end end;function DrawTank(bZ,aP,bA,ct,cu,cv,cw,cx)local cy=1;local cz=2;local cA=3;local cB=4;local cC=5;local cD=6;local cE=""local cF=0;local cG=fuelY;local cH=fuelY+10;if o()==1 and not RemoteHud then cG=cG-50;cH=cH-50 end;bZ[#bZ+1]=[[<g class="pdim txtfuel">]]if cu=="ATMO"then cE="atmofueltank"elseif cu=="SPACE"then cE="spacefueltank"else cE="rocketfueltank"end;cF=_G[cE.."_size"]if#cv>0 then for i=1,#cv do local bq=string.sub(cv[i][cz],1,12)local cI=0;for ce=1,cF do if cv[i][cz]==f(unit[cE.."_"..ce].getData()).name then cI=ce;break end end;if aP or cw[i]==nil or cx[i]==nil then local cJ=0;local cK=0;local cL=0;local cM=0;local bn=system.getTime()if cI~=0 then cx[i]=f(unit[cE.."_"..cI].getData()).percentage;cw[i]=f(unit[cE.."_"..cI].getData()).timeLeft;if cw[i]=="n/a"then cw[i]=0 end else cL=m(cv[i][cy])-cv[i][cB]cJ=cv[i][cA]cx[i]=d(0.5+cL*100/cJ)cK=cv[i][cC]cM=cv[i][cD]if cK<=cL then cw[i]=0 else cw[i]=d(0.5+cL/((cK-cL)/(bn-cM)))end;cv[i][cC]=cL;cv[i][cD]=bn end end;if bq==ct then bq=e("%s %d",cu,i)end;if cI==0 then bq=bq.." *"end;local cN;if cw[i]==0 then cN="n/a"else cN=FormatTimeString(cw[i])end;if cx[i]~=nil then local ca=d(cx[i]*2.55)local cb=e("rgb(%d,%d,%d)",255-ca,ca,0)local cO=""if cN~="n/a"and cw[i]<120 or cx[i]<5 then if aP then cO=[[class="red"]]end end;bZ[#bZ+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bA,cG,cO,bq,bA,cH,cb,cx[i],cN)cG=cG+30;cH=cH+30 end end end;bZ[#bZ+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b4)b4=vec3(b4)local c4=-math.deg(math.atan(b4.y,b4.z))+180;c4=c4-90;if c4<0 then c4=360+c4 end;if c4>180 then c4=-180+c4-180 end;return-c4 end;function getRelativeYaw(b4)b4=vec3(b4)local cP=math.deg(math.atan(b4.y,b4.x))-90;if cP<-180 then cP=360+cP end;return cP end;function AlignToWorldVector(cQ,cR)if not ad or b3>b6+0.08 or aa~=-1 then if cR==nil then cR=as end;cQ=vec3(cQ):normalize()local cS=vec3(core.getConstructWorldOrientationForward())-cQ;local cT=-getMagnitudeInDirection(cS,core.getConstructWorldOrientationRight())*ar;local cU=-getMagnitudeInDirection(cS,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cT/2 end;if an==0 then an=cU/2 end;D=D-(cT+(cT-am)*DampingMultiplier)C=C+cU+(cU-an)*DampingMultiplier;am=cT;an=cU;if math.abs(cT)<cR and math.abs(cU)<cR then return true end;return false end end;function getAPEnableName()local bq=AutopilotTargetName;if bq==nil then bq=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bq==nil then bq="None"end;return"Engage Autopilot: "..bq end;function getAPDisableName()local bq=AutopilotTargetName;if bq==nil then bq=CustomTarget.name end;if bq==nil then bq="None"end;return"Disable Autopilot: "..bq end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cV=50;local cW=260;local cX=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cW,cV,at/2-cW/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cW,cV,at/2-cW/2-50-cX.width,au/2-cV+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cW,cV,at/2-cW/2+cX.width+50,au/2-cV+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cY=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cY.height,cY.x+cY.width+30,cY.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cY.height,cY.x+cY.width+30,cY.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cY.height,cY.x-200-30,cY.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cV=60;cW=300;local bA=10;local bB=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cW,cV,bA,bB,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cW,cV,bA+cW+20,bB,function()return AltitudeHold end,ToggleAltitudeHold)bB=bB+cV+20;MakeButton("Engage Autoland","Disable Autoland",cW,cV,bA,bB,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cW,cV,bA+cW+20,bB,function()return AutoTakeoff end,ToggleAutoTakeoff)bB=bB+cV+20;MakeButton("Show Orbit Display","Hide Orbit Display",cW,cV,bA,bB,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bB=bB+cV+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cW,cV,bA,bB,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cW,cV,bA+cW+20,bB,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bB=bB+cV+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cW,cV,bA,bB,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cW,cV,bA+cW+20,bB,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bB=bB+cV+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cW,cV,bA,bB,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bB=bB+cV+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cW*2,cV,bA,bB,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cZ=Nav.axisCommandManager:getAxisCommandType(0)local c_="TRAVEL"if cZ==1 then c_="CRUISE"end;if Autopilot then c_="AUTOPILOT"end;return c_ end;function UpdateHud(bZ)local bP=ae;local b4=core.getVelocity()local bu=vec3(b4):len()local c3=vec3(core.getWorldVertical())local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local d0=vec3(core.getConstructWorldOrientationUp())local d1=getRoll(c3,c1,c2)local d2=d1/180*math.pi;local d3=math.cos(d2)local d4=math.sin(d2)local c4=getPitch(c3,c1,c2*d3+d0*d4)local d5=d1;local d6=c4;local d7=j()local d8=d(unit.getThrottle())local d9=bu*3.6;local da=unit.getAxisCommandValue(0)local c_=GetFlightStyle()local db="ROLL"local dc=unit.getClosestPlanetInfluence()>0;if d8==nil then d8=0 end;if not dc then if bu>5 then c4=getRelativePitch(b4)d1=getRelativeYaw(b4)else c4=0;d1=0 end;db="YAW"end;bZ[#bZ+1]=a5;bZ[#bZ+1]=ao;bZ[#bZ+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bZ,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bZ,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bZ,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bZ,bP)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dc then DrawRollLines(bZ,centerX,centerY,d5,db,dc)DrawArtificialHorizon(bZ,d6,d5,centerX,centerY,dc,d(getRelativeYaw(b4)),bu)else DrawRollLines(bZ,centerX,centerY,d1,db,dc)DrawArtificialHorizon(bZ,c4,d1,centerX,centerY,dc,d(d1),bu)end;DrawAltitudeDisplay(bZ,bP,dc)DrawPrograde(bZ,b4,bu,centerX,centerY)end end;DrawThrottle(bZ,c_,d8,da)DrawSpeed(bZ,d9)DrawWarnings(bZ)DisplayOrbitScreen(bZ)if screen_2 then local bJ=vec3(core.getConstructWorldPos())local bA=960+bJ.x/aU;local bB=450+bJ.y/aV;screen_2.moveContent(aW,(bA-80)/19.2,(bB-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bZ)local dd=aj;local de=ak;local df=aj;local dg=ak;if IsInFreeLook()and not brightHud then dd=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]de=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bZ[#bZ+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dd,dd,df,df,de,de,dg,dg,ResolutionX,ResolutionY)end;function HUDEpilogue(bZ)bZ[#bZ+1]="</svg>"end;function DrawSpeed(bZ,d9)local dh=throtPosY-10;local di=throtPosX+10;bZ[#bZ+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dh=75 end;bZ[#bZ+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],di,dh,d(d9))end;function DrawOdometer(bZ,W,TotalDistanceTravelled,c_,X,d7)local dj=ConvertResolutionX(1240)local dk=ConvertResolutionY(55)local dl=dk+10;local d7=j()local br=core.g()local dm=0;local dn=0;local dp=0;RefreshLastMaxBrake(br)if ad then dp=LastMaxBrakeInAtmo else dp=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dq=vec3(core.getWorldAcceleration()):len()/9.80665;if br>0.1 then dn=aB*br;dm=maxThrust/br end;bZ[#bZ+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dj=ConvertResolutionX(1120)dk=ConvertResolutionY(55)dl=dk+10 elseif ad then local dr=ConvertResolutionX(770)bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dr,dk,dr,dl,d7)end;bZ[#bZ+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dj,dk,dj,dl,br/9.80665,dj,dk+20,dj,dl+20,dq)bZ[#bZ+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bZ[#bZ+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dp/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),c_)if br>0.1 then bZ[#bZ+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dm/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dn/1000)else bZ[#bZ+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bZ[#bZ+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),c_)end;bZ[#bZ+1]="</g>"end;function DrawThrottle(bZ,c_,d8,da)local cG=throtPosY+10;local cH=throtPosY+20;if o()==1 and not RemoteHud then cG=55;cH=65 end;local ds="CRUISE"local unit="km/h"local dt=da;if c_=="TRAVEL"or c_=="AUTOPILOT"then ds="THROT"unit="%"dt=d8;local du="dim"if d8<0 then du="red"end;bZ[#bZ+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],du,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d8),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bZ[#bZ+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cG,ds,throtPosX+10,cH,dt,unit)end;function DrawVerticalSpeed(bZ,bP)if bP<200000 and not ad or bP and ad then local dv=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dw=0;if math.abs(dv)>1 then dw=45*math.log(math.abs(dv),10)if dv<0 then dw=-dw end end;bZ[#bZ+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dv),d(dw))end end;function getHeading(ch)local dx=-vec3(core.getWorldVertical())ch=ch-ch:project_on(dx)local dy=vec3(0,0,1)dy=dy-dy:project_on(dx)local dz=dy:cross(dx)local dw=dy:angle_between(ch)*constants.rad2deg;if ch:dot(dz)<0 then dw=360-dw end;return dw end;function DrawRollLines(bZ,centerX,centerY,d5,db,dc)local dA=circleRad;local dB=20;dB=d(dB)local dC=d(d5)if dc then for i=-45,45,5 do local dD=i;bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],dD,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bZ[#bZ+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dA+dB-len,centerX,centerY+dA+dB)end;bZ[#bZ+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dA+dB-35,db,centerX,centerY+dA+dB-25,dC)bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d5,centerX,centerY)bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dA+dB-20,centerX+5,centerY+dA+dB-20,centerX,centerY+dA+dB-15)bZ[#bZ+1]="</g>"end;local cP=dC;if dc then cP=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dE=20;local dF=d(cP)local dG=0;local dH=centerY+dA+dB+20;local dI=centerX;if db~="YAW"then dH=ConvertResolutionY(130)dI=ConvertResolutionX(960)end;local dJ=[[<path class="txttick line" d="]]for i=d(dF-(dE+10)-dF%5+0.5),d(dF+dE+10+dF%5+0.5),5 do local bA=dI+-i*5+cP*5;if i%10==0 then dG=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bZ[#bZ+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bA+5,dH-12,p)elseif i%5==0 then dG=5 end;if dG==10 then dJ=e([[%s M %f %f v %d]],dJ,bA,dH-5,dG)else dJ=e([[%s M %f %f v %d]],dJ,bA,dH-2.5,dG)end end;bZ[#bZ+1]=dJ..[["/>]]bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dI-5,dH+10,dI+5,dH+10,dI,dH+5)if dc then db="HDG"end;bZ[#bZ+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dI,dH+25,dF,dI,dH+35,db)end;function DrawArtificialHorizon(bZ,d6,d5,centerX,centerY,dc,dK,bu)local dA=circleRad;local dL=d(dA*3/5)if dA>0 then local dM=d(d6)local len=0;local dJ=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d5,centerX,centerY)if not ad then dJ=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bZ[#bZ+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dA-1,centerX,centerY)bZ[#bZ+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dM-30-dM%5+0.5),d(dM+30+dM%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bB=centerY+-i*5+d6*5;if len==30 then dJ=e([[%s M %d %f h %d]],dJ,centerX-dL-len,bB,len)if ad then bZ[#bZ+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d5,centerX,centerY,centerX-dL+10,bB,i)bZ[#bZ+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d5,centerX,centerY,centerX+dL-10,bB,i)if i==0 or i==180 or i==-180 then bZ[#bZ+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d5,centerX,centerY,centerX-dL+20,bB,dL*2-40)end else bZ[#bZ+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dL+10,bB,i)bZ[#bZ+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dL-10,bB,i)end;dJ=e([[%s M %d %f h %d]],dJ,centerX+dL,bB,len)else dJ=e([[%s M %d %f h %d]],dJ,centerX-dL-len,bB,len)dJ=e([[%s M %d %f h %d]],dJ,centerX+dL,bB,len)end end;bZ[#bZ+1]=dJ..[["/>]]local dN="PITCH"if not dc then dN="REL PITCH"end;if d6>90 and not ad then d6=90-(d6-90)elseif d6<-90 and not ad then d6=-90-(d6+90)end;if dA>200 then if ad then if bu>w then bZ[#bZ+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dK)end;bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d5,centerX,centerY)else bZ[#bZ+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dL+25,centerY-5,centerX-dL+20,centerY,centerX-dL+25,centerY+5,centerX-dL+50,centerY+4,dM)bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dL-25,centerY-5,centerX+dL-20,centerY,centerX+dL-25,centerY+5,centerX+dL-30,centerY+4,dM)bZ[#bZ+1]="</g>"end;local dO=d(dA/3)bZ[#bZ+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dO,centerY,dA-dO)if not ad and dc then bZ[#bZ+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d5,centerX,centerY,centerX-dL+10,centerY,dL*2-20)end;bZ[#bZ+1]="</g>"if dA<200 then if ad and bu>w then bZ[#bZ+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dA,dN,centerX,centerY-dA+10,dM,centerX,centerY-15,"Yaw",centerX,centerY+20,dK)else bZ[#bZ+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dA,dN,centerX,centerY-dA+15,dM)end end end end;function DrawAltitudeDisplay(bZ,bP,dc)local dP=altMeterX;local dQ=altMeterY;local dR=78;local dS=19;local dT=AboveGroundLevel()if dT~=-1 then table.insert(bZ,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dP+dR,dQ+dS+20,dT))end;if dc and(bP<200000 and not ad or bP and ad)then table.insert(bZ,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dP-1,dQ-4,dR+2,dS+6,dP+1,dQ-1,dR-4,dS))local bX=0;local dU=1;local dV=0;local dW=bP<0;local dX=9;if dW then dX=0 end;local bP=math.abs(bP)while bX<6 do local dY=11;local dZ=16;local d_=9;local e0=14;local cO="altsm"if bX>2 then dZ=dZ+3;dY=dY+2;e0=e0+2;d_=d_-6;cO="altbig"end;if dW then cO=cO.." red"end;local e1=bP/dU%10;local e2=d(e1)local e3=d((e2+1)%10)local e4=dV;if bX==0 then e4=e1-e2;if dW then e4=1-e4 end end;if dW and(bX==0 or dV~=0)then local e5=e3;e3=e2;e2=e5 end;local e6=dZ*(e4-1)local e7=e6+dZ;local bA=dP+d_+(6-bX)*dY;local bB=dQ+e0;table.insert(bZ,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cO,bA,bB+e6,e3,bA,bB+e7,e2))bX=bX+1;dU=dU*10;if e2==dX then dV=e4 else dV=0 end end;table.insert(bZ,[[</g></g>]])end end;function DrawPrograde(bZ,b4,bu,centerX,centerY)if bu>5 and not ad or bu>w then local dA=circleRad;local e8=20;local e9=20;local ea=vec3(b4)local eb=getRelativePitch(ea)local ec=getRelativeYaw(ea)local ed=-ec/e9*dA;local ee=eb/e8*dA;local bA=centerX+ed;local bB=centerY+ee;local a3=math.sqrt(ed^2+ee^2)if a3<dA then bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bA,bB)else local dw=math.atan(ee,ed)local ef=centerX+dA*math.cos(dw)local eg=centerY+dA*math.sin(dw)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ef,eg)end;eb=getRelativePitch(-ea)ec=getRelativeYaw(-ea)ed=-ec/e9*dA;ee=eb/e8*dA;bA=centerX+ed;bB=centerY+ee;a3=math.sqrt(ed^2+ee^2)if not ad then if a3<dA then bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bA,bB)else local dw=math.atan(ee,ed)local ef=centerX+dA*math.cos(dw)local eg=centerY+dA*math.sin(dw)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ef,eg)end end end end;function DrawWarnings(bZ)bZ[#bZ+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bZ[#bZ+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eh=ConvertResolutionX(960)local ei=ConvertResolutionY(860)local ej=ConvertResolutionY(880)local ek=ConvertResolutionY(900)local el=ConvertResolutionY(960)local em=ConvertResolutionY(200)local en=ConvertResolutionY(150)local eo=ConvertResolutionY(960)if o()==1 and not RemoteHud then ei=ConvertResolutionY(135)ej=ConvertResolutionY(155)ek=ConvertResolutionY(175)em=ConvertResolutionY(115)en=ConvertResolutionY(95)end;if BrakeIsOn then bZ[#bZ+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eh,ei)end;if ad and b3<b6 and b5>brakeLandingRate+5 then bZ[#bZ+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eh,em+50)end;if ah then bZ[#bZ+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eh,eo)end;if GearExtended then if A then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eh,ej)else bZ[#bZ+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eh,ej)end;bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eh,ek,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eh,el+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eh,em+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bZ[#bZ+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eh,em+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eh,em+20,AutopilotStatus)elseif LockPitch~=nil then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eh,em+20,d(LockPitch))elseif I then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eh,em+20)elseif Reentry then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eh,em+20)end;if AltitudeHold then if AutoTakeoff then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eh,em,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eh,em+50)end else bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eh,em,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bZ[#bZ+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eh,em)else bZ[#bZ+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eh,em)end end;if ProgradeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eh,em)end;if RetrogradeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eh,em)end;if TurnBurn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eh,en)end;if VectorToTarget then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eh,em+30,VectorStatus)end;bZ[#bZ+1]="</g>"end;function DisplayOrbitScreen(bZ)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ep=OrbitMapX;local eq=OrbitMapY;local er=OrbitMapSize;local es=4;eq=eq+es;local et=15;local bA=ep+er+ep/2+es;local bB=eq+er/2+5+es;local eu,ev,ew,ex;eu=er/4;ex=0;bZ[#bZ+1]=[[<g class="pbright txtorb txtmid">]]bZ[#bZ+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',er+ep*2,er+eq,es,es)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ew=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eu*2)ev=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ew*(1-orbit.eccentricity)ex=eu-orbit.periapsis.altitude/ew-planet.radius/ew;local ey=""if orbit.periapsis.altitude<=0 then ey='redout'end;bZ[#bZ+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ey,ep+er/2+ex+es,eq+er/2+es,eu,ev)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ep+er/2+es,eq+er/2+es,planet.radius/ew)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bZ[#bZ+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bA-35,bB-5,ep+er/2+eu+ex,bB-5)bZ[#bZ+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bA,bB)bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,getDistanceDisplayString(orbit.apoapsis.altitude))bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,FormatTimeString(orbit.timeToApoapsis))bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,getSpeedDisplayString(orbit.apoapsis.speed))end;bB=eq+er/2+5+es;bA=ep-ep/2+10+es;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bZ[#bZ+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bA+35,bB-5,ep+er/2-eu+ex,bB-5)bZ[#bZ+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bA,bB)bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,getDistanceDisplayString(orbit.periapsis.altitude))bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,FormatTimeString(orbit.timeToPeriapsis))bB=bB+et;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bA,bB,getSpeedDisplayString(orbit.periapsis.speed))end;bZ[#bZ+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ep+er/2+es,20+es,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local ez=orbit.timeToApoapsis/orbit.period*2*math.pi;local eA=eu*math.cos(ez)local eB=ev*math.sin(ez)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ep+er/2+eA+ex+es,eq+er/2+eB+es)end;bZ[#bZ+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eC=a3>100000;local bh=""if eC then bh=round(a3/1000/200,1).." SU"elseif a3<1000 then bh=round(a3,1).." M"else bh=round(a3/1000,1).." KM"end;return bh end;function getDistanceDisplayString2(a3)local eC=a3>100000;local bh=""if eC then bh=round(a3/1000/200,2).." SU"elseif a3<1000 then bh=round(a3,2).." M"else bh=round(a3/1000,2).." KM"end;return bh end;function getSpeedDisplayString(bu)return d(round(bu*3.6,0)+0.5).." km/h"end;function FormatTimeString(eD)local eE=0;local eF=0;local eG=0;if eD<60 then eD=d(eD)elseif eD<3600 then eE=d(eD/60)eD=d(eD%60)elseif eD<86400 then eF=d(eD/3600)eE=d(eD%3600/60)else eG=d(eD/86400)eF=d(eD%86400/3600)end;if eG>0 then return eG.."d "..eF.."h "elseif eF>0 then return eF.."h "..eE.."m "elseif eE>0 then return eE.."m "..eD.."s"elseif eD>0 then return eD.."s"else return"0s"end end;function getMagnitudeInDirection(cQ,eH)cQ=vec3(cQ)eH=vec3(eH):normalize()local bh=cQ*eH;return bh.x+bh.y+bh.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eI=AtlasOrdered[AutopilotTargetIndex].index;local eJ=aS[0][eI]if eJ.center then AutopilotTargetName=eJ.name;V=aY[0][eI]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eJ;for _,bg in pairs(aY[0])do if bg.name==CustomTarget.planetname then V=bg;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eK=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eK end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b4=core.getWorldVelocity()local bu=vec3(b4):len()local eL,eM=aZ.computeDistanceAndTime(vec3(b4):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eN;if not TurnBurn then _,eN=GetAutopilotBrakeDistanceAndTime(bu)else _,eN=GetAutopilotTBBrakeDistanceAndTime(bu)end;local eO=0;local eP=0;if AutopilotCruising or not Autopilot and bu>5 then eP=aZ.computeTravelTime(bu,0,AutopilotDistance)elseif P+eL<AutopilotDistance then eO=AutopilotDistance-(P+eL)eP=aZ.computeTravelTime(8333.0556,0,eO)else local eQ=(AutopilotDistance-P)/eL;eL=AutopilotDistance-P;eM=eM*eQ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eP elseif AutopilotBraking then return eN elseif AutopilotCruising then return eP+eN else return eM+Q+eP end end;function GetAutopilotBrakeDistanceAndTime(bu)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bu,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bu,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bu)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bu,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eR=-1;local eS=-1;if vBooster then eR=vBooster.distance()end;if hover then eS=hover.distance()end;if eR~=-1 and eS~=-1 then if eR<eS then return eR else return eS end elseif eR~=-1 then return eR elseif eS~=-1 then return eS else return-1 end end;function AboveGroundLevel()local eT=-1;local eU=aa;if telemeter_1 then eT=telemeter_1.getDistance()end;if eU~=-1 and eT~=-1 then if eU<eT then return eU else return eT end elseif eU~=-1 then return eU else return eT end end;function tablelength(eV)local eW=0;for _ in pairs(eV)do eW=eW+1 end;return eW end;function BeginProfile(eX)ProfileTimeStart=system.getTime()end;function EndProfile(eX)local eY=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eY;ProfileCount=ProfileCount+1;if eY>ProfileTimeMax then ProfileTimeMax=eY end;if eY<ProfileTimeMin then ProfileTimeMin=eY end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eZ=ProfileTimeSum;local e_=ProfileTimeSum/ProfileCount;local f0=ProfileTimeMin;local f1=ProfileTimeMax;local f2=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eZ,e_,f0,f1,f2))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local f3=radar_1.getEntries()local f4=radar_1.getData()local f5=ConvertResolutionX(1770)local f6=ConvertResolutionY(330)if#f3>0 then local f7=f4:find('identifiedConstructs":%[%]')if f7==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if f7~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f5,f6,#f3)local f8={}for bf,bg in pairs(f3)do if radar_1.hasMatchingTransponder(bg)==1 then table.insert(f8,bg)end end;if#f8>0 then local bB=ConvertResolutionY(15)local bA=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bA,bB)for bf,bg in pairs(f8)do bB=bB+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bA,bB,radar_1.getConstructName(bg))end end else local f9;f9=f4:find('worksInEnvironment":false')if f9 then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f5,f6)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f5,f6)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bZ,fa)if fa~="empty"then bZ[#bZ+1]=[[<text class="msg" x="50%%" y="310" >]]for fb in string.gmatch(fa,"([^\n]+)")do bZ[#bZ+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fb)end;bZ[#bZ+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bn=system.getTime()local b4=vec3(core.getWorldVelocity())local d9=vec3(b4):len()local fc=bn-ag;if d9>1.38889 then d9=d9/1000;local fd=d9*(bn-ag)TotalDistanceTravelled=TotalDistanceTravelled+fd;W=W+fd end;X=X+fc;TotalFlightTime=TotalFlightTime+fc;ag=bn end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for bf,bg in pairs(aS[0])do if av==nil or bg.center.x<av then av=bg.center.x end;if aw==nil or bg.center.x>aw then aw=bg.center.x end;if ax==nil or bg.center.y<ax then ax=bg.center.y end;if ay==nil or bg.center.y>ay then ay=bg.center.y end end;aT=""local fe=1.1*(aw-av)/1920;local ff=1.4*(ay-ax)/1080;for bf,bg in pairs(aS[0])do local bA=960+bg.center.x/fe;local bB=540+bg.center.y/ff;aT=aT..'<circle cx="'..bA..'" cy="'..bB..'" r="'..bg.radius/fe*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bg.name,"Moon")and not string.match(bg.name,"Sanctuary")and not string.match(bg.name,"Space")then aT=aT.."<text x='"..bA.."' y='"..bB+bg.radius/fe*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bg.name.."</text>"end end;local bJ=vec3(core.getConstructWorldPos())local bA=960+bJ.x/fe;local bB=540+bJ.y/ff;aT=aT..'<circle cx="'..bA..'" cy="'..bB..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bA.."' y='"..bB-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fe;aV=ff;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bJ=vec3(core.getConstructWorldPos())local bA=960+bJ.x/fe;local bB=540+bJ.y/ff;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bA-80)/19.20,(bB-80)/10.80,aT)end end;function PlanetRef()local function fg(fh)return type(fh)=='number'end;local function fi(fh)return type(tonumber(fh))=='number'end;local function fj(fk)return type(fk)=='table'end;local function fl(fm)return type(fm)=='string'end;local function fn(bg)return fj(bg)and fg(bg.x and bg.y and bg.z)end;local function fo(fp)return fj(fp)and fg(fp.latitude and fp.longitude and fp.altitude and fp.bodyId and fp.systemId)end;local fq=math.pi/180;local fr=180/math.pi;local fs=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bK='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ft=utils.clamp;local function fu(fv,fw)if fv==0 then return math.abs(fw)<1e-09 end;if fw==0 then return math.abs(fv)<1e-09 end;return math.abs(fv-fw)<math.max(math.abs(fv),math.abs(fw))*fs end;local function fx(fh)local bh=string.gsub(string.reverse(e('%.4f',fh)),'^0*%.?','')return bh==''and'0'or string.reverse(bh)end;local function fy(fz)if fn(fz)then return e('{x=%.3f,y=%.3f,z=%.3f}',fz.x,fz.y,fz.z)end;if fj(fz)and not getmetatable(fz)then local fA={}local fB=next(fz)if type(fB)=='nil'or fB==1 then fA=fz else for bf,bg in pairs(fz)do local dt=fy(bg)if type(bf)=='number'then table.insert(fA,e('[%s]=%s',bf,dt))else table.insert(fA,e('%s=%s',bf,dt))end end end;return e('{%s}',table.concat(fA,','))end;if fl(fz)then return e("'%s'",fz:gsub("'",[[\']]))end;return tostring(fz)end;local fC={}fC.__index=fC;fC.__tostring=function(fz,fD)local fE={}for bf in pairs(fz)do table.insert(fE,bf)end;table.sort(fE)local fA={}for _,bf in ipairs(fE)do local dt=fy(fz[bf])if type(bf)=='number'then table.insert(fA,e('[%s]=%s',bf,dt))else table.insert(fA,e('%s=%s',bf,dt))end end;if fD then return e('%s%s',fD,table.concat(fA,',\n'..fD))end;return e('{%s}',table.concat(fA,','))end;fC.__eq=function(fF,fG)return fF.planetarySystemId==fG.planetarySystemId and fF.bodyId==fG.bodyId and fu(fF.radius,fG.radius)and fu(fF.center.x,fG.center.x)and fu(fF.center.y,fG.center.y)and fu(fF.center.z,fG.center.z)and fu(fF.GM,fG.GM)end;local function fH(bL,bM,fI,fJ,fK)assert(fi(bL),'Argument 1 (planetarySystemId) must be a number:'..type(bL))assert(fi(bM),'Argument 2 (bodyId) must be a number:'..type(bM))assert(fi(fI),'Argument 3 (radius) must be a number:'..type(fI))assert(fj(fJ),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fJ))assert(fi(fK),'Argument 5 (GM) must be a number:'..type(fK))return setmetatable({planetarySystemId=tonumber(bL),bodyId=tonumber(bM),radius=tonumber(fI),center=vec3(fJ),GM=tonumber(fK)},fC)end;local fL={}fL.__index=fL;fL.__tostring=function(fM)return e('::pos{%d,%d,%s,%s,%s}',fM.systemId,fM.bodyId,fx(fM.latitude*fr),fx(fM.longitude*fr),fx(fM.altitude))end;fL.__eq=function(fF,fG)return fF.bodyId==fG.bodyId and fF.systemId==fG.systemId and fu(fF.latitude,fG.latitude)and fu(fF.altitude,fG.altitude)and(fu(fF.longitude,fG.longitude)or fu(fF.latitude,math.pi/2)or fu(fF.latitude,-math.pi/2))end;local function fN(fO,bM,bN,bO,bP)local bL=fO;if fl(fO)and not bO and not bP and not bM and not bN then bL,bM,bN,bO,bP=string.match(fO,bK)assert(bL,'Argument 1 (position string) is malformed.')else assert(fi(bL),'Argument 1 (systemId) must be a number:'..type(bL))assert(fi(bM),'Argument 2 (bodyId) must be a number:'..type(bM))assert(fi(bN),'Argument 3 (latitude) must be in degrees:'..type(bN))assert(fi(bO),'Argument 4 (longitude) must be in degrees:'..type(bO))assert(fi(bP),'Argument 5 (altitude) must be in meters:'..type(bP))end;bL=tonumber(bL)bM=tonumber(bM)bN=tonumber(bN)bO=tonumber(bO)bP=tonumber(bP)if bM==0 then return setmetatable({latitude=bN,longitude=bO,altitude=bP,bodyId=bM,systemId=bL},fL)end;return setmetatable({latitude=fq*ft(bN,-90,90),longitude=fq*(bO%360),altitude=bP,bodyId=bM,systemId=bL},fL)end;local fP={}fP.__index=fP;fP.__tostring=function(fz,fD)local fQ=fD and fD..'  'local fR={}local fE={}for bf in pairs(fz)do table.insert(fE,bf)end;table.sort(fE)for _,fS in ipairs(fE)do bdy=fz[fS]local fT=fC.__tostring(bdy,fQ)if fD then table.insert(fR,e('[%s]={\n%s\n%s}',fS,fT,fD))else table.insert(fR,e('  [%s]=%s',fS,fT))end end;if fD then return e('\n%s%s%s',fD,table.concat(fR,',\n'..fD),fD)end;return e('{\n%s\n}',table.concat(fR,',\n'))end;local function fU(fV)local aS={}local pid;for _,bg in pairs(fV)do local bV=bg.planetarySystemId;if type(bV)~='number'then error('Invalid planetary system ID: '..tostring(bV))elseif pid and bV~=pid then error('Mismatch planetary system IDs: '..bV..' and '..pid)end;local fW=bg.bodyId;if type(fW)~='number'then error('Invalid body ID: '..tostring(fW))elseif aS[fW]then error('Duplicate body ID: '..tostring(fW))end;setmetatable(bg.center,getmetatable(vec3.unit_x))aS[fW]=setmetatable(bg,fC)pid=bV end;return setmetatable(aS,fP)end;aX={}local function fX(fV)return setmetatable({galaxyAtlas=fV or{}},aX)end;aX.__index=function(fk,i)if type(i)=='number'then local system=fk.galaxyAtlas[i]return fU(system)end;return rawget(aX,i)end;aX.__pairs=function(fz)return function(fk,bf)local fY,nv=next(fk,bf)return fY,nv and fU(nv)end,fz.galaxyAtlas,nil end;aX.__tostring=function(fz)local fZ={}for _,f_ in pairs(fz or{})do local g0=f_:getPlanetarySystemId()local g1=fP.__tostring(f_,'    ')table.insert(fZ,e('  [%s]={%s\n  }',g0,g1))end;return e('{\n%s\n}\n',table.concat(fZ,',\n'))end;aX.BodyParameters=fH;aX.MapPosition=fN;aX.PlanetarySystem=fU;function aX.createBodyParameters(g2,bM,g3,g4,g5,g6,g7)assert(fi(g2),'Argument 1 (planetarySystemId) must be a number:'..type(g2))assert(fi(bM),'Argument 2 (bodyId) must be a number:'..type(bM))assert(fi(g3),'Argument 3 (surfaceArea) must be a number:'..type(g3))assert(fj(g4),'Argument 4 (aPosition) must be an array or vec3:'..type(g4))assert(fj(g5),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(g5))assert(fi(g6),'Argument 6 (altitude) must be in meters:'..type(g6))assert(fi(g7),'Argument 7 (gravityAtPosition) must be number:'..type(g7))local fI=math.sqrt(g3/4/math.pi)local a3=fI+g6;local g8=vec3(g4)+a3*vec3(g5)local fK=g7*a3*a3;return fH(g2,bM,fI,g8,fK)end;aX.isMapPosition=fo;function aX:getPlanetarySystem(fO)if i==nil then i=0 end;if nv==nil then nv=0 end;local g2=fO;if fo(fO)then g2=fO.systemId end;if type(g2)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fP then system=fU(system)end;return system end end end;function fP:castIntersections(g9,eH,ga,gb)local ga=ga or function(gc)return 1.05*gc.radius end;local gd={}if gb then for _,i in ipairs(gb)do gd[i]=self[i]end else gb={}for bf,gc in pairs(self)do table.insert(gb,bf)gd[bf]=gc end end;local function ge(gf,gg)local gh=gd[gf].center-g9;local gi=gd[gg].center-g9;return gh:len()<gi:len()end;table.sort(gb,ge)local gj=eH:normalize()for i,bV in ipairs(gb)do local gc=gd[bV]local gk=gc.center-g9;local fI=ga(gc)local gl=gk:dot(gj)local gm=gl^2-(gk:len2()-fI^2)if gm>=0 then local gn=math.sqrt(gm)local go=gl+gn;local gp=gl-gn;if gp>0 then return gc,go,gp elseif go>0 then return gc,go,nil end end end;return nil,nil,nil end;function fP:closestBody(gq)assert(type(gq)=='table','Invalid coordinates.')local gr,gc;local gs=vec3(gq)for _,gt in pairs(self)do local gu=(gt.center-gs):len2()if not gc or gu<gr then gc=gt;gr=gu end end;return gc end;function fP:convertToBodyIdAndWorldCoordinates(fO)local gv=fO;if fl(fO)then gv=fN(fO)end;if gv.bodyId==0 then return 0,vec3(gv.latitude,gv.longitude,gv.altitude)end;local gt=self:getBodyParameters(gv)if gt then return gv.bodyId,gt:convertToWorldCoordinates(gv)end end;function fP:getBodyParameters(fO)local bM=fO;if fo(fO)then bM=fO.bodyId end;assert(fi(bM),'Argument 1 (bodyId) must be a number:'..type(bM))return self[bM]end;function fP:getPlanetarySystemId()local _,bg=next(self)return bg and bg.planetarySystemId end;function fC:convertToMapPosition(fJ)assert(fj(fJ),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fJ))local gw=vec3(fJ)if self.bodyId==0 then return setmetatable({latitude=gw.x,longitude=gw.y,altitude=gw.z,bodyId=0,systemId=self.planetarySystemId},fL)end;local gx=gw-self.center;local a3=gx:len()local bP=a3-self.radius;local bN=0;local bO=0;if not fu(a3,0)then local gy=math.atan(gx.y,gx.x)bO=gy>=0 and gy or 2*math.pi+gy;bN=math.pi/2-math.acos(gx.z/a3)end;return setmetatable({latitude=bN,longitude=bO,altitude=bP,bodyId=self.bodyId,systemId=self.planetarySystemId},fL)end;function fC:convertToWorldCoordinates(fO)local gv=fl(fO)and fN(fO)or fO;if gv.bodyId==0 then return vec3(gv.latitude,gv.longitude,gv.altitude)end;assert(fo(gv),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gv.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gv.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bQ=math.cos(gv.latitude)return self.center+(self.radius+gv.altitude)*vec3(bQ*math.cos(gv.longitude),bQ*math.sin(gv.longitude),math.sin(gv.latitude))end;function fC:getAltitude(fJ)return(vec3(fJ)-self.center):len()-self.radius end;function fC:getDistance(fJ)return(vec3(fJ)-self.center):len()end;function fC:getGravity(fJ)local gz=self.center-vec3(fJ)local gA=gz:len2()return self.GM/gA*gz/math.sqrt(gA)end;return setmetatable(aX,{__call=function(_,...)return fX(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fl(fm)return type(fm)=='string'end;local function fj(fk)return type(fk)=='table'end;local function fu(fv,fw)if fv==0 then return math.abs(fw)<1e-09 end;if fw==0 then return math.abs(fv)<1e-09 end;return math.abs(fv-fw)<math.max(math.abs(fv),math.abs(fw))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bP)assert(self.body)local a3=bP+self.body.radius;if not fu(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fO,b4)assert(self.body)assert(fj(fO)or fl(fO))assert(fj(b4))local bJ=(fl(fO)or PlanetRef.isMapPosition(fO))and self.body:convertToWorldCoordinates(fO)or vec3(fO)local bg=vec3(b4)local gB=bJ-self.body.center;local gi=bg:len2()local gC=gB:len()local gD=self.body.GM;local gE=((gi-gD/gC)*gB-gB:dot(bg)*bg)/gD;local fv=gD/(2*gD/gC-gi)local gF=gE:len()local gj=gE:normalize()local gG=fv*(1-gF)local gH=fv*(1+gF)local gI=gG*gj+self.body.center;local gJ=gF<=1 and-gH*gj+self.body.center or nil;local gK=math.sqrt(fv*gD*(1-gF*gF))local gL=gJ and 2*math.pi*math.sqrt(fv^3/gD)local gM=math.acos(gE:dot(gB)/(gF*gC))if gB:dot(bg)<0 then gM=-(gM-2*math.pi)end;local gN=math.acos((math.cos(gM)+gF)/(1+gF*math.cos(gM)))local gO=gN;if gO<0 then gO=gO+2*math.pi end;local gP=gO-gF*math.sin(gO)local gQ=0;local gR=0;local gS=0;if gL~=nil then gQ=gP/(2*math.pi/gL)gR=gL-gQ;gS=gR+gL/2;if gM-math.pi>0 then gR=gQ;gS=gR+gL/2 end;if gS>gL then gS=gS-gL end end;return{periapsis={position=gI,speed=gK/gG,circularOrbitSpeed=math.sqrt(gD/gG),altitude=gG-self.body.radius},apoapsis=gJ and{position=gJ,speed=gK/gH,circularOrbitSpeed=math.sqrt(gD/gH),altitude=gH-self.body.radius},currentVelocity=bg,currentPosition=bJ,eccentricity=gF,period=gL,eccentricAnomaly=gN,meanAnomaly=gP,timeToPeriapsis=gR,timeToApoapsis=gS}end;local function gT(gU)local gt=PlanetRef.BodyParameters(gU.planetarySystemId,gU.bodyId,gU.radius,gU.center,gU.GM)return setmetatable({body=gt},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gT(...)end})end;function Kinematics()local aZ={}local gV=30000000/3600;local gW=gV*gV;local gX=100;local function gY(bg)return 1/math.sqrt(1-bg*bg/gW)end;function aZ.computeAccelerationTime(gZ,g_,h0)local h1=gV*math.asin(gZ/gV)return(gV*math.asin(h0/gV)-h1)/g_ end;function aZ.computeDistanceAndTime(gZ,h0,h2,h3,h4,h5)h4=h4 or 0;h5=h5 or 0;local h6=gZ<=h0;local h7=h3*(h6 and 1 or-1)/h2;local h8=-h5/h2;local h9=h7+h8;if h6 and h9<=0 or not h6 and h9>=0 then return-1,-1 end;local ha,hb=0,0;if h7~=0 and h4>0 then local h1=math.asin(gZ/gV)local hc=math.pi*(h7/2+h8)local hd=h7*h4;local he=gV*math.pi;local bg=function(fk)local ck=(hc*fk-hd*math.sin(math.pi*fk/2/h4)+he*h1)/he;local hf=math.tan(ck)return gV*hf/math.sqrt(hf*hf+1)end;local hg=h6 and function(fm)return fm>=h0 end or function(fm)return fm<=h0 end;hb=2*h4;if hg(bg(hb))then local hh=0;while math.abs(hb-hh)>0.5 do local fk=(hb+hh)/2;if hg(bg(fk))then hb=fk else hh=fk end end end;local hi=gZ;local hj=hb/gX;for hk=1,gX do local bu=bg(hk*hj)ha=ha+(bu+hi)*hj/2;hi=bu end;if hb<2*h4 then return ha,hb end;gZ=hi end;local h1=gV*math.asin(gZ/gV)local bi=(gV*math.asin(h0/gV)-h1)/h9;local hl=gW*math.cos(h1/gV)/h9;local a3=hl-gW*math.cos((h9*bi+h1)/gV)/h9;return a3+ha,bi+hb end;function aZ.computeTravelTime(gZ,g_,a3)if a3==0 then return 0 end;if g_>0 then local h1=gV*math.asin(gZ/gV)local hl=gW*math.cos(h1/gV)/g_;return(gV*math.acos(g_*(hl-a3)/gW)-h1)/g_ end;assert(gZ>0,'Acceleration and initial speed are both zero.')return a3/gZ end;function aZ.lorentz(bg)return gY(bg)end;return aZ end;function script.onStart()VERSION_NUMBER=4.927;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;bb.activate()bc.activate()bd.activate()end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bU=j()if door and(bU>0 or bU==0 and ae<10000)then for _,bg in pairs(door)do bg.toggle()end end;if forcefield and(bU>0 or bU==0 and ae<10000)then for _,bg in pairs(forcefield)do bg.toggle()end end;if dbHud_1 then if not Y then for bf,bg in pairs(b)do dbHud_1.setStringValue(bg,g(_G[bg]))end;for bf,bg in pairs(a)do dbHud_1.setStringValue(bg,g(_G[bg]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end;bb.deactivate()bd.deactivate()end;function script.onTick(hm)if hm=="tenthSecond"then ba.deactivate()if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hn=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hn then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hm=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bZ={}local c_=GetFlightStyle()DrawOdometer(bZ,W,TotalDistanceTravelled,c_,X)CheckDamage(bZ)a5=table.concat(bZ,"")ba.activate()collectgarbage("collect")elseif hm=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bh=json.decode(dbHud_1.getStringValue("SavedLocations"))if bh~=nil then _G["SavedLocations"]=bh;local bX=-1;local bT;for bf,bg in pairs(SavedLocations)do if bg.name and bg.name=="SatNav Location"then bX=bf;break end end;if bX~=-1 then bT=SavedLocations[bX]bX=-1;for bf,bg in pairs(aS[0])do if bg.name and bg.name=="SatNav Location"then bX=bf;break end end;if bX>-1 then aS[0][bX]=bT end;UpdateAtlasLocationsList()K=bT.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hm=="msgTick"then local bZ={}DisplayMessage(bZ,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hm=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hm=="hudTick"then local bZ={}HUDPrologue(bZ)if showHud then UpdateHud(bZ)else DisplayOrbitScreen(bZ)DrawWarnings(bZ)end;HUDEpilogue(bZ)bZ[#bZ+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bZ,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bZ)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bZ)if screen_1.getMouseState()==1 then CheckButtons()end;bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bZ)if not b0 and not b1 then local ho=table.concat(bZ,"")bZ={}bZ[#bZ+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bZ[#bZ+1]=aT;bZ[#bZ+1]=ho;bZ[#bZ+1]="</body>"b0=true;bZ[#bZ+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bZ,"")system.setScreen(content)elseif b1 then local ho=table.concat(bZ,"")bZ={}bZ[#bZ+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bZ[#bZ+1]=aT;bZ[#bZ+1]=ho;bZ[#bZ+1]="</body>"end;if not b0 then bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bZ)end else SetButtonContains()DrawButtons(bZ)end;bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bZ[#bZ+1]=[[</svg></body>]]content=table.concat(bZ,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hm=="apTick"then b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;b8=system.getMouseDeltaX()b9=system.getMouseDeltaY()if InvertMouse and not J then b9=-b9 end;D=0;H=0;C=0;b4=vec3(core.getWorldVelocity())b5=vec3(b4):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())if planet.name=="Space"then planet=aS[0][2]end;kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b4)aa=hoverDetectGround()if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+b8;a1=a1+b9 end else a0=0;a1=0 end else a0=a0+b8;a1=a1+b9;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(b9,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b8,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hp=b5>8334;if b5>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hp then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hp and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hp;if ad and j()>0.09 then if not ai then if b5>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b5<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b5>w then local hq=AlignToWorldVector(vec3(b4),0.01)if a7 then b2=true;if b5<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b5>w then AlignToWorldVector(-vec3(b4))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b5*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)end;P=P;Q=Q;local hr=AutopilotTargetCoords;if orbit.apoapsis==nil and b5>300 and AutopilotAccelerating then local hs=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b4):normalize()local ht=getMagnitudeInDirection(hs,AutopilotShipUp)local hu=getMagnitudeInDirection(hs,AutopilotShipRight)local hv=-hu*AutopilotDistance*b5*TrajectoryAlignmentStrength;local hw=-ht*AutopilotDistance*b5*TrajectoryAlignmentStrength;hr=AutopilotTargetCoords+-hv*vec3(AutopilotShipRight)+-hw*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hr)-vec3(core.getConstructWorldPos())):len()local hx=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hx)..'", "unit":""}')local hy=true;local hz=(V.center-(vec3(core.getConstructWorldPos())+vec3(b4):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hz)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hy=AlignToWorldVector((hr-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hy=AlignToWorldVector(-vec3(b4):normalize())end;if AutopilotAccelerating then if not hy or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b4)<0 and b5>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hz-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b5<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hy then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hy then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hA=0;local bJ=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hB=bJ-vec3(core.getConstructWorldPos())local hC=vec3(hB):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hD=vec3(hB):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hC*hC+hD*hD)AlignToWorldVector(hB:normalize())local hE=40;local hF=a3<hE;local hG=100;local hH=utils.clamp((a3-hE)/2,10,hG)C=0;local hy=math.abs(D)<0.1;if hy and b5<hH and not hF then BrakeIsOn=false;hA=-20 else BrakeIsOn=true;hA=0 end;local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local c3=vec3(core.getWorldVertical())local c4=getPitch(c3,c1,c2)local hI=1.0;if math.abs(hA-c4)>hI then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hA-c4)local hJ=pitchPID:get()C=hJ end end;local dx=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dc=unit.getClosestPlanetInfluence()>0;local hK=HoldAltitude-ae;local hL=500+b5;local hA=(utils.smoothstep(hK,-hL,hL)-0.5)*2*MaxPitch;if not AltitudeHold then hA=0 end;if LockPitch~=nil then if dc then hA=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hM=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hM then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hM)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hA=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hA=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hN=C;if b5>w and not a8 then AlignToWorldVector(vec3(b4))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cS=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cS)local hO=cS:len()-cS:project_on(dx):len()local bv=LastMaxBrakeInAtmo;local dv=b4.x*dx.x+b4.y*dx.y+b4.z*dx.z;local hP=b4:len()-math.abs(dv)local hQ=vec3(core.getWorldAirFrictionAcceleration())if bv~=nil then P,Q=aZ.computeDistanceAndTime(hP,0,n(),0,0,bv+(hQ:len()-hQ:project_on(dx):len())*n())else P,Q=aZ.computeDistanceAndTime(hP,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hO<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hO>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hO end;C=hN;local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local c3=vec3(core.getWorldVertical())local eT=-1;local c4=getPitch(c3,c1,c2)local hI=0.1;if BrakeLanding then hA=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dv=b4.x*dx.x+b4.y*dx.y+b4.z*dx.z;eT=aa;if eT>-1 then if math.abs(hA-c4)<hI then b2=autoRollPreference;if b5<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b4:normalize():dot(-dx)<0.99 then BrakeIsOn=true elseif dv<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hA<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b5<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hA-c4)>hI then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hA-c4)local hJ=pitchPID:get()C=C+hJ end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;local hR=Nav:getTargetGroundAltitude()if hR<HeadlightGroundHeight then bc.activate()else bc.deactivate()end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hS=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hT=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hU=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hV=G;local hW=vec3(core.getWorldVertical())local hX=vec3(core.getConstructWorldOrientationUp())local hY=vec3(core.getConstructWorldOrientationForward())local hZ=vec3(core.getConstructWorldOrientationRight())local h_=vec3(core.getWorldVelocity())local i0=vec3(core.getWorldVelocity()):normalize()local i1=getRoll(hW,hY,hZ)local i2=math.abs(i1)local i3=utils.sign(i1)local j=j()local i4=vec3(core.getWorldAngularVelocity())local i5=hS*pitchSpeedFactor*hZ+hT*rollSpeedFactor*hY+hU*yawSpeedFactor*hX;if hW:len()>0.01 and j>0.0 or ProgradeIsOn then local i6=1.0;if b2==true and i2>i6 and hT==0 then local i7=utils.clamp(0,i2-30,i2+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(i7-i1)local i8=rollPID:get()i5=i5+i8*hY end end;if hW:len()>0.01 and j>0.0 then local i9=20.0;if turnAssist==true and i2>i9 and hS==0 and hU==0 then local ia=turnAssistFactor*0.1;local ib=turnAssistFactor*0.025;local ic=(i2-i9)/(180-i9)*180;local id=0;if ic<90 then id=ic/90 elseif ic<180 then id=(180-ic)/90 end;id=id*id;local ie=-i3*ib*(1.0-id)local ig=ia*id;i5=i5+ig*hZ+ie*hX end end;local ih=1;local ii=0;local ij=1;local ik=torqueFactor*(i5-i4)local il=vec3(core.getWorldAirFrictionAngularAcceleration())ik=ik-il;Nav:setEngineTorqueCommand('torque',ik,ih,'airfoil','','',ij)local im=-hV*(brakeSpeedFactor*h_+brakeFlatFactor*i0)Nav:setEngineForceCommand('brake',im)local io=''local ip=vec3()local iq=false;local ir='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ir=ir..ExtraLongitudeTags end;local is=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if is==axisCommandType.byThrottle then local it=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ir,axisCommandId.longitudinal)Nav:setEngineForceCommand(ir,it,ih)elseif is==axisCommandType.byTargetSpeed then local it=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)io=io..' , '..ir;ip=ip+it;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then iq=true end end;local iu='thrust analog lateral 'if ExtraLateralTags~="none"then iu=iu..ExtraLateralTags end;local iv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if iv==axisCommandType.byThrottle then local iw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iu,axisCommandId.lateral)Nav:setEngineForceCommand(iu,iw,ih)elseif iv==axisCommandType.byTargetSpeed then local ix=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)io=io..' , '..iu;ip=ip+ix end;local iy='thrust analog vertical 'if ExtraVerticalTags~="none"then iy=iy..ExtraVerticalTags end;local iz=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iz==axisCommandType.byThrottle then local iA=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iy,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(iy,iA,ih,'airfoil','ground','',ij)else Nav:setEngineForceCommand(iy,vec3(),ih)Nav:setEngineForceCommand('airfoil vertical',iA,ih,'airfoil','','',ij)Nav:setEngineForceCommand('ground vertical',iA,ih,'ground','','',ij)end elseif iz==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),ih)end;local iB=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)io=io..' , '..iy;ip=ip+iB end;if ip:len()>constants.epsilon then if G~=0 or iq or math.abs(i0:dot(hY))<0.95 then io=io..', brake'end;Nav:setEngineForceCommand(io,ip,ii,'','','',ij)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bu=vec3(core.getVelocity()):len()local iC=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iD=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bu*3.6>iD*(1-iC)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bu*3.6<iD*(1-iC)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iE=unit.getThrottle()local hH=iE/100;if j==0 then hH=hH*MaxGameVelocity;if bu>=hH*(1-iC)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bu<hH*(1-iC)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hH=hH*ReentrySpeed/3.6;if bu>=hH*(1-iC)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bu<hH*(1-iC)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bh=coroutine.resume(beginSetup)if bh then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iF)if iF=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iF=="forward"then B=B-1 elseif iF=="backward"then B=B+1 elseif iF=="left"then E=E-1 elseif iF=="right"then E=E+1 elseif iF=="yawright"then F=F-1 elseif iF=="yawleft"then F=F+1 elseif iF=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iF=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iF=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iF=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iF=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iF=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iF=="option1"then IncrementAutopilotTargetIndex()v=false elseif iF=="option2"then DecrementAutopilotTargetIndex()v=false elseif iF=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iF=="option4"then ToggleAutopilot()v=false elseif iF=="option5"then ToggleLockPitch()v=false elseif iF=="option6"then ToggleAltitudeHold()v=false elseif iF=="option7"then wipeSaveVariables()v=false elseif iF=="option8"then ToggleFollowMode()v=false elseif iF=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iF=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iF=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iF=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iF=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iF=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iF=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iF=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iF=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iF)if iF=="forward"then B=0 elseif iF=="backward"then B=0 elseif iF=="left"then E=0 elseif iF=="right"then E=0 elseif iF=="yawright"then F=0 elseif iF=="yawleft"then F=0 elseif iF=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iF=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iF=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iF=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iF=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iF=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iF=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iF=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iF=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iF)if iF=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iF=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iF=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iF=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iG)local i;local iH="/commands /setname /G /agg /addlocation"local iI,iJ;local iK="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iG," ")if i~=nil then iI=string.sub(iG,0,i-1)iJ=string.sub(iG,i+1)elseif i==nil or not string.find(iH,iI)then for fb in string.gmatch(iK,"([^\n]+)")do c(fb)end;return end;if iI=="/setname"then if iJ==nil or iJ==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iJ)else K="Select a saved target to rename first"end elseif iI=="/addlocation"then if iJ==nil or iJ==""or string.find(iJ,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iJ,"::")local bS=string.sub(iJ,1,i-2)local bJ=string.sub(iJ,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bK='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bL,bM,bN,bO,bP=string.match(bJ,bK)local planet=aS[tonumber(bL)][tonumber(bM)]AddNewLocationByWaypoint(bS,planet,bJ)K="Added "..bS.." to saved locations,\nplanet "..planet.name.." at "..bJ;a2=5 elseif iI=="/agg"then if iJ==nil or iJ==""then K="Usage: /agg targetheight"return end;iJ=tonumber(iJ)if iJ<1000 then iJ=1000 end;AntigravTargetAltitude=iJ;K="AGG Target Height set to "..iJ elseif iI=="/G"then if iJ==nil or iJ==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iJ=="dump"then for bf,bg in pairs(a)do if type(_G[bg])=="boolean"then if _G[bg]==true then c(bg.." true")else c(bg.." false")end elseif _G[bg]==nil then c(bg.." nil")else c(bg.." ".._G[bg])end end;return end;i=string.find(iJ," ")local iL=string.sub(iJ,0,i-1)local iM=string.sub(iJ,i+1)for bf,bg in pairs(a)do if bg==iL then K="Variable "..iL.." changed to "..iM;local iN=type(_G[bg])if iN=="number"then iM=tonumber(iM)elseif iN=="boolean"then if string.lower(iM)=="true"then iM=true else iM=false end end;_G[bg]=iM;return end end;K="No such global variable: "..iL end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
