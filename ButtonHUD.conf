name: ButtonsHud - Dimencia and Archaegeo v5.224 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 1.0 --export: (Default: 1.0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=0;local t=0;local u=false;local v=0;local w=false;local x=round(ResolutionX/2,0)local y=round(ResolutionY/2,0)local z=false;local A=true;local B=55;local C=false;local D=1;local E=1;local F=false;local G=0;local H=0;local I=0;local J=0;local K=0;local L=0;local M=0;local N=false;local O=false;local P="empty"local Q=1;local R=5;local S=5;local T=false;local U,V=0;local W,X=0;local Y=false;local Z=false;local a0=nil;local a1=0;local a2=0;local a3=false;local a4=0;local a5=0;local a6=0;local a7=3;local a8=0;local a9=""local aa=""local ab=0;local ac=false;local ad=false;local ae=false;local af=-1;local ag=false;local ah=""local ai=j()>0;local aj=core.getAltitude()local ak=core.getElementIdList()local al=system.getTime()local am=nil;local an=false;local ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local aq={}local ar=0;local as=0;local at=""local au=true;local av={}local aw=1;local ax=0.001;local ay=ResolutionX;local az=ResolutionY;local aA=nil;local aB=nil;local aC=nil;local aD=nil;local aE=false;local aF=false;local aG=0;local aH=nil;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN={}local aO={}local aP=d(1/apTickRate)*2;local aQ={}local aR={}local aS={}local aT={}local aU=false;local aV=16;local aW=0;local aX=nil;local aY=""local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local ba=vec3(core.getWorldVelocity())local bb=vec3(ba):len()local bc=math.cos(YawStallAngle*constants.deg2rad)local bd=LandingGearGroundHeight;local be=system.getMouseDeltaX()local bf=system.getMouseDeltaY()local bg=false;local bh=system.getTime()local bi=0;local bj=0;function LoadVariables()if dbHud_1 then local bk=dbHud_1.hasKey;if not useTheseSettings then for bl,bm in pairs(a)do if bk(bm)then local bn=f(dbHud_1.getStringValue(bm))if bn~=nil then c(bm.." "..dbHud_1.getStringValue(bm))_G[bm]=bn;aE=true end end end end;coroutine.yield()for bl,bm in pairs(b)do if bk(bm)then local bn=f(dbHud_1.getStringValue(bm))if bn~=nil then c(bm.." "..dbHud_1.getStringValue(bm))_G[bm]=bn;aE=true end end end;if useTheseSettings then P="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a7=5 elseif aE then P="Loaded Saved Variables (see Lua Chat Tab for list)"else P="No Saved Variables Found - Stand up / leave remote to save settings"end else P="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bo=system.getTime()if LastStartTime+180<bo then LastMaxBrakeInAtmo=0 end;if aE then x=round(ResolutionX/2,0)y=round(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference end;LastStartTime=bo;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then P="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a7=5 end;bc=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bp,bq)if bp>bq then bq=bp end;if ContainerOptimization>0 then bq=bq-bq*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bq=bq-bq*FuelTankOptimization*0.05 end;return bq end;function ProcessElements()local br=fuelX~=0 and fuelY~=0;for bl in pairs(ak)do local type=l(ak[bl])if type=="Landing Gear"then F=true end;if type=="Dynamic Core Unit"then local bs=h(ak[bl])if bs>10000 then aV=128 elseif bs>1000 then aV=64 elseif bs>150 then aV=32 end end;aL=aL+h(ak[bl])if br and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bs=h(ak[bl])local bt=m(ak[bl])local bp=0;local bu=system.getTime()if type=="Atmospheric Fuel Tank"then local bq=400;local bv=35.03;if bs>10000 then bq=51200;bv=5480 elseif bs>1300 then bq=6400;bv=988.67 elseif bs>150 then bq=1600;bv=182.67 end;bp=bt-bv;if fuelTankHandlingAtmo>0 then bq=bq+bq*fuelTankHandlingAtmo*0.2 end;bq=CalculateFuelVolume(bp,bq)aI[#aI+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end;if type=="Rocket Fuel Tank"then local bq=320;local bv=173.42;if bs>65000 then bq=40000;bv=25740 elseif bs>6000 then bq=5120;bv=4720 elseif bs>700 then bq=640;bv=886.72 end;bp=bt-bv;if fuelTankHandlingRocket>0 then bq=bq+bq*fuelTankHandlingRocket*0.1 end;bq=CalculateFuelVolume(bp,bq)aK[#aK+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end;if type=="Space Fuel Tank"then local bq=2400;local bv=182.67;if bs>10000 then bq=76800;bv=5480 elseif bs>1300 then bq=9600;bv=988.67 end;bp=bt-bv;if fuelTankHandlingSpace>0 then bq=bq+bq*fuelTankHandlingSpace*0.2 end;bq=CalculateFuelVolume(bp,bq)aJ[#aJ+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end end end end;function SetupChecks()if gyro~=nil then am=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then Y=true else Z=true end end;local bw=j()if door and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(door)do bm.toggle()end end;if switch then for _,bm in pairs(switch)do bm.toggle()end end;if forcefield and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(forcefield)do bm.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if F then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bx=AboveGroundLevel()if bx~=-1 or not ai and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not F then GearExtended=true end else BrakeIsOn=false end;if bd~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bd)if bd==0 and not F then GearExtended=true;BrakeIsOn=true end else bd=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ai and bx~=-1 then b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ai end;function ConvertResolutionX(bm)if ResolutionX==1920 then return bm else return round(ResolutionX*bm/1920,0)end end;function ConvertResolutionY(bm)if ResolutionY==1080 then return bm else return round(ResolutionY*bm/1080,0)end end;function RefreshLastMaxBrake(by,bz)if by==nil then by=core.g()end;by=round(by,5)local bA=j()if bz~=nil and bz or(aH==nil or aH~=by)then local ba=core.getVelocity()local bB=vec3(ba):len()local bC=f(unit.getData()).maxBrake;if bC~=nil and bC>0 and ai then bC=bC/utils.clamp(bB/100,0.1,1)bC=bC/bA;if bA>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bC)/2 else LastMaxBrakeInAtmo=bC end end end;if bC~=nil and bC>0 then LastMaxBrake=bC end;aH=by end end;function MakeButton(bD,bE,bF,bG,bH,bI,bJ,bK,bL)local bM={enableName=bD,disableName=bE,width=bF,height=bG,x=bH,y=bI,toggleVar=bJ,toggleFunction=bK,drawCondition=bL,hovered=false}table.insert(av,bM)return bM end;function UpdateAtlasLocationsList()AtlasOrdered={}for bl,bm in pairs(aX[0])do table.insert(AtlasOrdered,{name=bm.name,index=bl})end;local function bN(bO,bP)return bO.name<bP.name end;table.sort(AtlasOrdered,bN)end;function AddLocationsToAtlas()for bl,bm in pairs(SavedLocations)do table.insert(aX[0],bm)end;UpdateAtlasLocationsList()end;function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*epsilon end;function zeroConvertToMapPosition(bS,bT)local bU=vec3(bT)if bS.bodyId==0 then return setmetatable({latitude=bU.x,longitude=bU.y,altitude=bU.z,bodyId=0,systemId=bS.planetarySystemId},MapPosition)end;local bV=bU-bS.center;local a8=bV:len()local bW=a8-bS.radius;local bX=0;local bY=0;if not float_eq(a8,0)then local bZ=math.atan(bV.y,bV.x)bY=bZ>=0 and bZ or 2*math.pi+bZ;bX=math.pi/2-math.acos(bV.z/a8)end;return setmetatable({latitude=math.deg(bX),longitude=math.deg(bY),altitude=bW,bodyId=bS.bodyId,systemId=bS.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(b_)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c1,c2,bX,bY,bW=string.match(b_,c0)if c1=="0"and c2=="0"then return vec3(tonumber(bX),tonumber(bY),tonumber(bW))end;bY=math.rad(bY)bX=math.rad(bX)local planet=aX[tonumber(c1)][tonumber(c2)]local c3=math.cos(bX)local c4=vec3(c3*math.cos(bY),c3*math.sin(bY),math.sin(bX))return planet.center+(planet.radius+bW)*c4 end;function AddNewLocationByWaypoint(c5,planet,b_)if dbHud_1 then local c6={}local position=zeroConvertToWorldCoordinates(b_)if planet.name=="Space"then c6={position=position,name=c5,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bw=false;if planet.hasAtmosphere then bw=true else bw=false end;c6={position=position,name=c5,atmosphere=bw,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=c6;table.insert(aX[0],c6)UpdateAtlasLocationsList()else P="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local c7=planet.name..". "..#SavedLocations;if radar_1 then local c8,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if c8~=nil and c8~=""then c7=c7 .." "..radar_1.getConstructName(c8)end end;local c6={}local bw=false;if planet.hasAtmosphere then bw=true end;c6={position=position,name=c7,atmosphere=bw,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=c6;table.insert(aX[0],c6)UpdateAtlasLocationsList()P="Location saved as "..c7 else P="Databank must be installed to save locations"end end;function UpdatePosition(c9)local ca=-1;local c6;for bl,bm in pairs(SavedLocations)do if bm.name and bm.name==CustomTarget.name then ca=bl;break end end;if ca~=-1 then local cb;if c9~=nil then c6={position=SavedLocations[ca].position,name=c9,atmosphere=SavedLocations[ca].atmosphere,planetname=SavedLocations[ca].planetname,gravity=SavedLocations[ca].gravity}else c6={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ca].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ca]=c6;ca=-1;for bl,bm in pairs(aX[0])do if bm.name and bm.name==CustomTarget.name then ca=bl end end;if ca>-1 then aX[0][ca]=c6 end;UpdateAtlasLocationsList()P=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else P="Name Not Found"end end;function ClearCurrentPosition()local ca=-1;for bl,bm in pairs(aX[0])do if bm.name and bm.name==CustomTarget.name then ca=bl end end;if ca>-1 then table.remove(aX[0],ca)end;ca=-1;for bl,bm in pairs(SavedLocations)do if bm.name and bm.name==CustomTarget.name then P=bm.name.." saved location cleared"ca=bl;break end end;if ca~=-1 then table.remove(SavedLocations,ca)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cc)cc[#cc+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ab==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ab==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ab=0 end end;function ToggleWidgets()if au then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;au=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;au=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cd,ce,bH,bI,bF,bG)if cd>bH and cd<bH+bF and ce>bI and ce<bI+bG then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and bb>B then P="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aj+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local cf=vec3(core.getConstructWorldOrientationForward())local cg=vec3(core.getConstructWorldOrientationRight())local ch=vec3(core.getWorldVertical())local ci=getPitch(ch,cf,cg)LockPitch=ci;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bo=system.getTime()if bo-bj<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bj=-1;if AltitudeHold then return end end else bj=bo end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;N=false;BrakeLanding=false;Reentry=false;b8=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ai or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bj>-1 then HoldAltitude=aj end;if not ad and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bj>-1 then HoldAltitude=aj+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ad then HoldAltitude=100000 end else b8=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then N=not N;if N then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else P="Follow Mode only works with Remote controller"N=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ad then local cj=zeroConvertToMapPosition(a0,AutopilotTargetCoords)cj="::pos{"..cj.systemId..","..cj.bodyId..","..cj.latitude..","..cj.longitude..","..cj.altitude.."}"system.setWaypoint(cj)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and bb>B then P="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aj>100000 or aj==0 then Autopilot=true else ac=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;N=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;z=false;LockPitch=nil else ad=true;ToggleAltitudeHold()end else ad=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;z=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aj end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b8=autoRollPreference end end;function CheckDamage(cc)local ck=0;at=""local cl=aL;local cm=0;local cn=0;local co=0;local cp=0;local cq=""for bl in pairs(ak)do local bs=0;local cr=0;cr=h(ak[bl])bs=k(ak[bl])cm=cm+bs;if bs<cr then if bs==0 then co=co+1 else cn=cn+1 end;if aM and#aq==0 then position=vec3(core.getElementPositionById(ak[bl]))local bH=position.x-aV;local bI=position.y-aV;local cs=position.z-aV;table.insert(aq,core.spawnArrowSticker(bH,bI,cs+1,"down"))table.insert(aq,core.spawnArrowSticker(bH,bI,cs+1,"down"))core.rotateSticker(aq[2],0,0,90)table.insert(aq,core.spawnArrowSticker(bH+1,bI,cs,"north"))table.insert(aq,core.spawnArrowSticker(bH+1,bI,cs,"north"))core.rotateSticker(aq[4],90,90,0)table.insert(aq,core.spawnArrowSticker(bH-1,bI,cs,"south"))table.insert(aq,core.spawnArrowSticker(bH-1,bI,cs,"south"))core.rotateSticker(aq[6],90,-90,0)table.insert(aq,core.spawnArrowSticker(bH,bI-1,cs,"east"))table.insert(aq,core.spawnArrowSticker(bH,bI-1,cs,"east"))core.rotateSticker(aq[8],90,0,90)table.insert(aq,core.spawnArrowSticker(bH,bI+1,cs,"west"))table.insert(aq,core.spawnArrowSticker(bH,bI+1,cs,"west"))core.rotateSticker(aq[10],-90,0,90)table.insert(aq,ak[bl])end elseif aM and#aq>0 and aq[11]==ak[bl]then for ct in pairs(aq)do core.deleteSticker(aq[ct])end;aq={}end end;ck=d(cm/cl*100)if ck<100 then cc[#cc+1]=[[<g class="pbright txt">]]cp=d(ck*2.55)cq=e("rgb(%d,%d,%d)",255-cp,cp,0)if ck<100 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cq,ck)if co>0 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cq,co,cn)elseif cn>0 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cq,cn)end end;cc[#cc+1]=[[<\g>]]end end;function DrawCursorLine(cc)local cu=d(utils.clamp(a8/(ay/4)*255,0,255))cc[#cc+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a5,a6,d(PrimaryR+0.5)+cu,d(PrimaryG+0.5)-cu,d(PrimaryB+0.5)-cu)end;function getPitch(cv,cw,bP)local cx=cv:cross(bP):normalize_inplace()local ci=math.acos(utils.clamp(cx:dot(-cw),-1,1))*constants.rad2deg;if cx:cross(-cw):dot(bP)<0 then ci=-ci end;return ci end;local cy=math.atan;local function cz(cA,cB,cC)return cy(cB:cross(cC):dot(cA),cB:dot(cC))end;function clearAll()if ag then ag=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;N=false;z=false;ac=false;ad=false;C=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;am=false;LockPitch=nil else ag=true end end;function wipeSaveVariables()if not dbHud_1 then P="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a7=5 else if aF then for bl,bm in pairs(a)do dbHud_1.setStringValue(bm,g(nil))end;for bl,bm in pairs(b)do if bm~="SavedLocations"then dbHud_1.setStringValue(bm,g(nil))end end;P="Databank wiped. New variables will save after re-enter seat and exit"a7=5;aF=false;aE=false;a3=true else P="Press ALT-7 again to confirm wipe of ALL data"aF=true end end end;function CheckButtons()for _,bm in pairs(av)do if bm.hovered then if not bm.drawCondition or bm.drawCondition()then bm.toggleFunction()end;bm.hovered=false end end end;function SetButtonContains()local bH=a5+ay/2;local bI=a6+az/2;for _,bm in pairs(av)do bm.hovered=Contains(bH,bI,bm.x,bm.y,bm.width,bm.height)end end;function DrawButton(cc,cD,hover,bH,bI,cE,cF,cG,cH,cI,cJ)if type(cI)=="function"then cI=cI()end;if type(cJ)=="function"then cJ=cJ()end;cc[#cc+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bH,bI,cE,cF)if cD then cc[#cc+1]=e("%s'",cG)else cc[#cc+1]=cH end;if hover then cc[#cc+1]=" style='stroke:white; stroke-width:2'"else cc[#cc+1]=" style='stroke:black; stroke-width:1'"end;cc[#cc+1]="></rect>"cc[#cc+1]=e("<text x='%f' y='%f' font-size='24' fill='",bH+cE/2,bI+cF/2+5)if cD then cc[#cc+1]="black"else cc[#cc+1]="white"end;cc[#cc+1]="' text-anchor='middle' font-family='Montserrat'>"if cD then cc[#cc+1]=e("%s</text>",cI)else cc[#cc+1]=e("%s</text>",cJ)end end;function DrawButtons(cc)local cK="rgb(50,50,50)'"local cL="rgb(210,200,200)"local cM=DrawButton;for _,bm in pairs(av)do local bE=bm.disableName;local bD=bm.enableName;if type(bE)=="function"then bE=bE()end;if type(bD)=="function"then bD=bD()end;if not bm.drawCondition or bm.drawCondition()then cM(cc,bm.toggleVar(),bm.hovered,bm.x,bm.y,bm.width,bm.height,cL,cK,bE,bD)end end end;function DrawTank(cc,aU,bH,cN,cO,cP,cQ,cR)local cS=1;local cT=2;local cU=3;local cV=4;local cW=5;local cX=6;local cY=""local cZ=0;local c_=fuelY;local d0=fuelY+10;if o()==1 and not RemoteHud then c_=c_-50;d0=d0-50 end;cc[#cc+1]=[[<g class="pdim txtfuel">]]if cO=="ATMO"then cY="atmofueltank"elseif cO=="SPACE"then cY="spacefueltank"else cY="rocketfueltank"end;cZ=_G[cY.."_size"]if#cP>0 then for i=1,#cP do local c7=string.sub(cP[i][cT],1,12)local d1=0;for ct=1,cZ do if cP[i][cT]==f(unit[cY.."_"..ct].getData()).name then d1=ct;break end end;if aU or cQ[i]==nil or cR[i]==nil then local d2=0;local d3=0;local d4=0;local d5=0;local bu=system.getTime()if d1~=0 then cR[i]=f(unit[cY.."_"..d1].getData()).percentage;cQ[i]=f(unit[cY.."_"..d1].getData()).timeLeft;if cQ[i]=="n/a"then cQ[i]=0 end else d4=m(cP[i][cS])-cP[i][cV]d2=cP[i][cU]cR[i]=d(0.5+d4*100/d2)d3=cP[i][cW]d5=cP[i][cX]if d3<=d4 then cQ[i]=0 else cQ[i]=d(0.5+d4/((d3-d4)/(bu-d5)))end;cP[i][cW]=d4;cP[i][cX]=bu end end;if c7==cN then c7=e("%s %d",cO,i)end;if d1==0 then c7=c7 .." *"end;local d6;if cQ[i]==0 then d6="n/a"else d6=FormatTimeString(cQ[i])end;if cR[i]~=nil then local cp=d(cR[i]*2.55)local cq=e("rgb(%d,%d,%d)",255-cp,cp,0)local d7=""if d6~="n/a"and cQ[i]<120 or cR[i]<5 then if aU then d7=[[class="red"]]end end;cc[#cc+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bH,c_,d7,c7,bH,d0,cq,cR[i],d6)c_=c_+30;d0=d0+30 end end end;cc[#cc+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(ba)ba=vec3(ba)local ci=-math.deg(math.atan(ba.y,ba.z))+180;ci=ci-90;if ci<0 then ci=360+ci end;if ci>180 then ci=-180+ci-180 end;return-ci end;function getRelativeYaw(ba)ba=vec3(ba)local d8=math.deg(math.atan(ba.y,ba.x))-90;if d8<-180 then d8=360+d8 end;return d8 end;function AlignToWorldVector(d9,da,db)if not ai or not bg or af~=-1 or bb<B then local dc=db;if dc==nil then dc=DampingMultiplier end;if da==nil then da=ax end;d9=vec3(d9):normalize()local dd=vec3(core.getConstructWorldOrientationForward())-d9;local de=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationRight())*aw;local df=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=de/2 end;if as==0 then as=df/2 end;if math.abs(de)<0.1 then I=I-de*2 else I=I-(de+(de-ar)*dc)end;if math.abs(df)<0.1 then H=H+df*2 else H=H+df+(df-as)*dc end;ar=de;as=df;if math.abs(de)<da and math.abs(df)<da then return true end;return false elseif bg and af==-1 then d9=vec3(core.getWorldVelocity())local dc=db;if dc==nil then dc=DampingMultiplier end;if da==nil then da=ax end;d9=vec3(d9):normalize()local dd=vec3(core.getConstructWorldOrientationForward())-d9;local de=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationRight())*aw;local df=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=de/2 end;if as==0 then as=df/2 end;if math.abs(de)<0.1 then I=I-de*5 else I=I-(de+(de-ar)*dc)end;if math.abs(df)<0.1 then H=H+df*5 else H=H+df+(df-as)*dc end;ar=de;as=df;if math.abs(de)<da and math.abs(df)<da then return true end;return false end end;function getAPEnableName()local c7=AutopilotTargetName;if c7==nil then local dg,dh=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())c7=CustomTarget.name.." "..dg..dh end;if c7==nil then c7="None"end;return"Engage Autopilot: "..c7 end;function getAPDisableName()local c7=AutopilotTargetName;if c7==nil then c7=CustomTarget.name end;if c7==nil then c7="None"end;return"Disable Autopilot: "..c7 end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then P="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then P="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a7=5 elseif not C then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then P="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;P="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;P="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local di=50;local dj=260;local dk=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dj,di,ay/2-dj/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then P="Brakes in Toggle Mode"else P="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dj,di,ay/2-dj/2-50-dk.width,az/2-di+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dj,di,ay/2-dj/2+dk.width+50,az/2-di+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dl=MakeButton(getAPEnableName,getAPDisableName,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dl.height,dl.x+dl.width+30,dl.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dl.height,dl.x+dl.width+30,dl.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dl.height,dl.x-200-30,dl.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)di=60;dj=300;local bH=10;local bI=az/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dj,di,bH,bI,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dj,di,bH+dj+20,bI,function()return AltitudeHold end,ToggleAltitudeHold)bI=bI+di+20;MakeButton("Engage Autoland","Disable Autoland",dj,di,bH,bI,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dj,di,bH+dj+20,bI,function()return AutoTakeoff end,ToggleAutoTakeoff)bI=bI+di+20;MakeButton("Show Orbit Display","Hide Orbit Display",dj,di,bH,bI,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then P="Orbit Display Enabled"else P="Orbit Display Disabled"end end)bI=bI+di+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dj,di,bH,bI,function()return Reentry end,function()C=true;BeginReentry()end,function()return aj>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dj,di,bH+dj+20,bI,function()return Reentry end,BeginReentry,function()return aj>ReentryAltitude end)bI=bI+di+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dj,di,bH,bI,function()return N end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dj,di,bH+dj+20,bI,function()return aM end,function()aM=not aM;if aM then P="Repair Arrows Enabled"else P="Repair Arrows Diabled"end end,function()return o()==1 end)bI=bI+di+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dj,di,bH,bI,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bI=bI+di+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dj*2,di,bH,bI,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dm=Nav.axisCommandManager:getAxisCommandType(0)local dn="TRAVEL"if dm==1 then dn="CRUISE"end;if Autopilot then dn="AUTOPILOT"end;return dn end;function UpdateHud(cc)local bW=aj;local ba=core.getVelocity()local bB=vec3(ba):len()local ch=vec3(core.getWorldVertical())local cf=vec3(core.getConstructWorldOrientationForward())local cg=vec3(core.getConstructWorldOrientationRight())local dp=vec3(core.getConstructWorldOrientationUp())local dq=getRoll(ch,cf,cg)local dr=dq/180*math.pi;local ds=math.cos(dr)local dt=math.sin(dr)local ci=getPitch(ch,cf,cg*ds+dp*dt)local du=dq;local dv=ci;local dw=j()local dx=d(unit.getThrottle())local dy=bB*3.6;local dz=unit.getAxisCommandValue(0)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dz=s;dx=s*100 end;local dn=GetFlightStyle()local dA="ROLL"local dB=unit.getClosestPlanetInfluence()>0;if dx==nil then dx=0 end;if not dB then if bB>5 then ci=getRelativePitch(ba)dq=getRelativeYaw(ba)else ci=0;dq=0 end;dA="YAW"end;cc[#cc+1]=aa;cc[#cc+1]=at;cc[#cc+1]=a9;if aW%aP==0 then aU=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cc,aU,fuelX,"Atmospheric ","ATMO",aI,aS,aT)DrawTank(cc,aU,fuelX+100,"Space fuel t","SPACE",aJ,aQ,aR)DrawTank(cc,aU,fuelX+200,"Rocket fuel ","ROCKET",aK,aN,aO)end;if aU then aU=false;aW=0 end;aW=aW+1;DrawVerticalSpeed(cc,bW)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dB then DrawRollLines(cc,centerX,centerY,du,dA,dB)DrawArtificialHorizon(cc,dv,du,centerX,centerY,dB,d(getRelativeYaw(ba)),bB)else DrawRollLines(cc,centerX,centerY,dq,dA,dB)DrawArtificialHorizon(cc,ci,dq,centerX,centerY,dB,d(dq),bB)end;DrawAltitudeDisplay(cc,bW,dB)DrawPrograde(cc,ba,bB,centerX,centerY)end end;DrawThrottle(cc,dn,dx,dz)DrawSpeed(cc,dy)DrawWarnings(cc)DisplayOrbitScreen(cc)if screen_2 then local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/aZ;local bI=450+b_.y/a_;screen_2.moveContent(b0,(bH-80)/19.2,(bI-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cc)local dC=ao;local dD=ap;local dE=ao;local dF=ap;if IsInFreeLook()and not brightHud then dC=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dD=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;cc[#cc+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dC,dC,dE,dE,dD,dD,dF,dF,ResolutionX,ResolutionY)end;function HUDEpilogue(cc)cc[#cc+1]="</svg>"end;function DrawSpeed(cc,dy)local dG=throtPosY-10;local dH=throtPosX+10;cc[#cc+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dG=75 end;cc[#cc+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dH,dG,d(dy))end;function DrawOdometer(cc,a1,TotalDistanceTravelled,dn,a2,dw)local dI=ConvertResolutionX(1240)local dJ=ConvertResolutionY(55)local dK=dJ+10;local dw=j()local by=core.g()local dL=0;local dM=0;local dN=0;RefreshLastMaxBrake(by)if ai then dN=LastMaxBrakeInAtmo else dN=LastMaxBrake end;maxThrust=Nav:maxForceForward()aG=n()if not ShowOdometer then return end;local dO=vec3(core.getWorldAcceleration()):len()/9.80665;if by>0.1 then dM=aG*by;dL=maxThrust/by end;cc[#cc+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dI=ConvertResolutionX(1120)dJ=ConvertResolutionY(55)dK=dJ+10 elseif ai then local dP=ConvertResolutionX(770)cc[#cc+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dP,dJ,dP,dK,dw)end;cc[#cc+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dI,dJ,dI,dK,by/9.80665,dI,dJ+20,dI,dK+20,dO)cc[#cc+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cc[#cc+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a1,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a2),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aG/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dN/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dn)if by>0.1 then cc[#cc+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dL/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dM/1000)else cc[#cc+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cc[#cc+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dn)end;cc[#cc+1]="</g>"end;function DrawThrottle(cc,dn,dx,dz)dx=math.floor(dx+0.5)local c_=throtPosY+10;local d0=throtPosY+20;if o()==1 and not RemoteHud then c_=55;d0=65 end;local dQ="CRUISE"local unit="km/h"local dR=dz;if dn=="TRAVEL"or dn=="AUTOPILOT"then dQ="THROT"unit="%"dR=dx;local dS="dim"if dx<0 then dS="red"end;cc[#cc+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dS,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dx),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cc[#cc+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,c_,dQ,throtPosX+10,d0,dR,unit)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and u then dx=math.floor(v*100+0.5)local dS="red"if dx<0 then dS="red"end;cc[#cc+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dS,1-math.abs(dx),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cc[#cc+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,c_+40,"LIMIT",throtPosX+10,d0+40,dx,"%")end end;function DrawVerticalSpeed(cc,bW)if bW<200000 and not ai or bW and ai then local dT=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dU=0;if math.abs(dT)>1 then dU=45*math.log(math.abs(dT),10)if dT<0 then dU=-dU end end;cc[#cc+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dT),d(dU))end end;function getHeading(cw)local dV=-vec3(core.getWorldVertical())cw=cw-cw:project_on(dV)local dW=vec3(0,0,1)dW=dW-dW:project_on(dV)local dX=dW:cross(dV)local dU=dW:angle_between(cw)*constants.rad2deg;if cw:dot(dX)<0 then dU=360-dU end;return dU end;function DrawRollLines(cc,centerX,centerY,du,dA,dB)local dY=circleRad;local dZ=20;dZ=d(dZ)local d_=d(du)if dB then for i=-45,45,5 do local e0=i;cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],e0,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cc[#cc+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dY+dZ-len,centerX,centerY+dY+dZ)end;cc[#cc+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dY+dZ-35,dA,centerX,centerY+dY+dZ-25,d_)cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],-du,centerX,centerY)cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dY+dZ-20,centerX+5,centerY+dY+dZ-20,centerX,centerY+dY+dZ-15)cc[#cc+1]="</g>"end;local d8=d_;if dB then d8=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local e1=20;local e2=d(d8)local e3=0;local e4=centerY+dY+dZ+20;local e5=centerX;if dA~="YAW"then e4=ConvertResolutionY(130)e5=ConvertResolutionX(960)end;local e6=[[<path class="txttick line" d="]]for i=d(e2-(e1+10)-e2%5+0.5),d(e2+e1+10+e2%5+0.5),5 do local bH=e5+-i*5+d8*5;if i%10==0 then e3=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cc[#cc+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bH+5,e4-12,p)elseif i%5==0 then e3=5 end;if e3==10 then e6=e([[%s M %f %f v %d]],e6,bH,e4-5,e3)else e6=e([[%s M %f %f v %d]],e6,bH,e4-2.5,e3)end end;cc[#cc+1]=e6 ..[["/>]]cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e5-5,e4+10,e5+5,e4+10,e5,e4+5)if dB then dA="HDG"end;cc[#cc+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],e5,e4+25,e2,e5,e4+35,dA)end;function DrawArtificialHorizon(cc,dv,du,centerX,centerY,dB,e7,bB)local dY=circleRad;local e8=d(dY*3/5)if dY>0 then local e9=d(dv)local len=0;local e6=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*du,centerX,centerY)if not ai then e6=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cc[#cc+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dY-1,centerX,centerY)cc[#cc+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(e9-30-e9%5+0.5),d(e9+30+e9%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bI=centerY+-i*5+dv*5;if len==30 then e6=e([[%s M %d %f h %d]],e6,centerX-e8-len,bI,len)if ai then cc[#cc+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*du,centerX,centerY,centerX-e8+10,bI,i)cc[#cc+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*du,centerX,centerY,centerX+e8-10,bI,i)if i==0 or i==180 or i==-180 then cc[#cc+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*du,centerX,centerY,centerX-e8+20,bI,e8*2-40)end else cc[#cc+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e8+10,bI,i)cc[#cc+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e8-10,bI,i)end;e6=e([[%s M %d %f h %d]],e6,centerX+e8,bI,len)else e6=e([[%s M %d %f h %d]],e6,centerX-e8-len,bI,len)e6=e([[%s M %d %f h %d]],e6,centerX+e8,bI,len)end end;cc[#cc+1]=e6 ..[["/>]]local ea="PITCH"if not dB then ea="REL PITCH"end;if dv>90 and not ai then dv=90-(dv-90)elseif dv<-90 and not ai then dv=-90-(dv+90)end;if dY>200 then if ai then if bB>B then cc[#cc+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e7)end;cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],-du,centerX,centerY)else cc[#cc+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e8+25,centerY-5,centerX-e8+20,centerY,centerX-e8+25,centerY+5,centerX-e8+50,centerY+4,e9)cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e8-25,centerY-5,centerX+e8-20,centerY,centerX+e8-25,centerY+5,centerX+e8-30,centerY+4,e9)cc[#cc+1]="</g>"end;local eb=d(dY/3)cc[#cc+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eb,centerY,dY-eb)if not ai and dB then cc[#cc+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*du,centerX,centerY,centerX-e8+10,centerY,e8*2-20)end;cc[#cc+1]="</g>"if dY<200 then if ai and bB>B then cc[#cc+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dY,ea,centerX,centerY-dY+10,e9,centerX,centerY-15,"Yaw",centerX,centerY+20,e7)else cc[#cc+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dY,ea,centerX,centerY-dY+15,e9)end end end end;function DrawAltitudeDisplay(cc,bW,dB)local ec=altMeterX;local ed=altMeterY;local ee=78;local ef=19;local eg=AboveGroundLevel()if eg~=-1 then table.insert(cc,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ec+ee,ed+ef+20,eg))end;if dB and(bW<200000 and not ai or bW and ai)then table.insert(cc,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ec-1,ed-4,ee+2,ef+6,ec+1,ed-1,ee-4,ef))local ca=0;local eh=1;local ei=0;local ej=bW<0;local ek=9;if ej then ek=0 end;local bW=math.abs(bW)while ca<6 do local el=11;local em=16;local en=9;local eo=14;local d7="altsm"if ca>2 then em=em+3;el=el+2;eo=eo+2;en=en-6;d7="altbig"end;if ej then d7=d7 .." red"end;local ep=bW/eh%10;local eq=d(ep)local er=d((eq+1)%10)local es=ei;if ca==0 then es=ep-eq;if ej then es=1-es end end;if ej and(ca==0 or ei~=0)then local et=er;er=eq;eq=et end;local eu=em*(es-1)local ev=eu+em;local bH=ec+en+(6-ca)*el;local bI=ed+eo;table.insert(cc,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],d7,bH,bI+eu,er,bH,bI+ev,eq))ca=ca+1;eh=eh*10;if eq==ek then ei=es else ei=0 end end;table.insert(cc,[[</g></g>]])end end;function DrawPrograde(cc,ba,bB,centerX,centerY)if bB>5 and not ai or bB>B then local dY=circleRad;local ew=20;local ex=20;local ey=vec3(ba)local ez=getRelativePitch(ey)local eA=getRelativeYaw(ey)local eB=14;local eC=eB/2;local eD=-eA/ex*dY;local eE=ez/ew*dY;local bH=centerX+eD;local bI=centerY+eE;local a8=math.sqrt(eD^2+eE^2)local eF=[[<circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eC/eB..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bH-eB..[[,]]..bI..[[ h ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH+eC..[[,]]..bI..[[ h ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH..[[,]]..bI-eB..[[ v ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a8<dY then cc[#cc+1]=eF else local dU=math.atan(eE,eD)local eG=4;local eH=centerX+dY*math.cos(dU)local eI=centerY+dY*math.sin(dU)cc[#cc+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dU*180/math.pi,eH,eI,eH-eG,eI-eG/2,eG*2,eG,eH+eG,eI-eG,eG,eG,-eG,eG)end;if not ai then ez=getRelativePitch(-ey)eA=getRelativeYaw(-ey)eD=-eA/ex*dY;eE=ez/ew*dY;bH=centerX+eD;bI=centerY+eE;a8=math.sqrt(eD^2+eE^2)if a8<dY then local eJ=[[<circle
                        cx="]]..bH..[["
                        cy="]]..bI..[["
                        r="]]..eC..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bH..[[,]]..bI-eB..[[ v ]]..eC..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bH..[[,]]..bI..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bH..[[,]]..bI..[[)" />
                     <path
                        d="M ]]..bH-eC..[[,]]..bI..[[ h ]]..eB..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bH..[[,]]..bI..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bH..[[,]]..bI..[[)"/>]]cc[#cc+1]=eJ end end end end;function DrawWarnings(cc)cc[#cc+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cc[#cc+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cc[#cc+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cc[#cc+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cc[#cc+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eK=ConvertResolutionX(960)local eL=ConvertResolutionY(860)local eM=ConvertResolutionY(880)local eN=ConvertResolutionY(900)local eO=ConvertResolutionY(960)local eP=ConvertResolutionY(200)local eQ=ConvertResolutionY(150)local eR=ConvertResolutionY(960)if o()==1 and not RemoteHud then eL=ConvertResolutionY(135)eM=ConvertResolutionY(155)eN=ConvertResolutionY(175)eP=ConvertResolutionY(115)eQ=ConvertResolutionY(95)end;if BrakeIsOn then cc[#cc+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eK,eL)elseif t>0 then cc[#cc+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eK,eL,t)end;if ai and bg and hoverDetectGround()==-1 then cc[#cc+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eK,eP+50)end;if am then cc[#cc+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eK,eR)end;if GearExtended then if F then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eK,eM)else cc[#cc+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eK,eM)end;local dg,dh=getDistanceDisplayString(Nav:getTargetGroundAltitude())cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eK,eN,dg..dh)end;if T then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eK,eO+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aj-antigrav.getBaseAltitude())<501 then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eK,eP+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cc[#cc+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eK,eP+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eK,eP+20,AutopilotStatus)elseif LockPitch~=nil then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eK,eP+20,d(LockPitch))elseif N then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eK,eP+20)elseif Reentry then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eK,eP+20)end;if AltitudeHold then if AutoTakeoff then local dg,dh=getDistanceDisplayString(HoldAltitude)cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eK,eP,dg..dh)if BrakeIsOn then cc[#cc+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eK,eP+50)end else local dg,dh=getDistanceDisplayString2(HoldAltitude)cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eK,eP,dg..dh)end end;if BrakeLanding then if StrongBrakes then cc[#cc+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eK,eP)else cc[#cc+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eK,eP)end end;if ProgradeIsOn then cc[#cc+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eK,eP)end;if RetrogradeIsOn then cc[#cc+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eK,eP)end;if TurnBurn then cc[#cc+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eK,eQ)end;if VectorToTarget then cc[#cc+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eK,eP+30,VectorStatus)end;cc[#cc+1]="</g>"end;function DisplayOrbitScreen(cc)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local eS=OrbitMapX;local eT=OrbitMapY;local eU=OrbitMapSize;local eV=4;eT=eT+eV;local eW=15;local bH=eS+eU+eS/2+eV;local bI=eT+eU/2+5+eV;local eX,eY,eZ,e_;eX=eU/4;e_=0;cc[#cc+1]=[[<g class="pbright txtorb txtmid">]]cc[#cc+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eU+eS*2,eU+eT,eV,eV)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eZ=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eX*2)eY=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eZ*(1-orbit.eccentricity)e_=eX-orbit.periapsis.altitude/eZ-planet.radius/eZ;local f0=""if orbit.periapsis.altitude<=0 then f0='redout'end;cc[#cc+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],f0,eS+eU/2+e_+eV,eT+eU/2+eV,eX,eY)cc[#cc+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',eS+eU/2+eV,eT+eU/2+eV,planet.radius/eZ)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cc[#cc+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bH-35,bI-5,eS+eU/2+eX+e_,bI-5)cc[#cc+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bH,bI)bI=bI+eW;local dg,dh=getDistanceDisplayString(orbit.apoapsis.altitude)cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,dg..dh)bI=bI+eW;cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,FormatTimeString(orbit.timeToApoapsis))bI=bI+eW;cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,getSpeedDisplayString(orbit.apoapsis.speed))end;bI=eT+eU/2+5+eV;bH=eS-eS/2+10+eV;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cc[#cc+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bH+35,bI-5,eS+eU/2-eX+e_,bI-5)cc[#cc+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bH,bI)bI=bI+eW;local dg,dh=getDistanceDisplayString(orbit.periapsis.altitude)cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,dg..dh)bI=bI+eW;cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,FormatTimeString(orbit.timeToPeriapsis))bI=bI+eW;cc[#cc+1]=e([[<text x="%f" y="%f">%s</text>]],bH,bI,getSpeedDisplayString(orbit.periapsis.speed))end;cc[#cc+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],eS+eU/2+eV,20+eV,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local f1=orbit.timeToApoapsis/orbit.period*2*math.pi;local f2=eX*math.cos(f1)local f3=eY*math.sin(f1)cc[#cc+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',eS+eU/2+f2+e_+eV,eT+eU/2+f3+eV)end;cc[#cc+1]=[[</g>]]end end;function getDistanceDisplayString(a8)local f4=a8>100000;local bn,dh=""if f4 then bn,dh=round(a8/1000/200,1),"SU"elseif a8<1000 then bn,dh=round(a8,1),"m"else bn,dh=round(a8/1000,1),"Km"end;return bn,dh end;function getDistanceDisplayString2(a8)local f4=a8>100000;local bn,dh=""if f4 then bn,dh=round(a8/1000/200,2)," SU"elseif a8<1000 then bn,dh=round(a8,2)," M"else bn,dh=round(a8/1000,2)," KM"end;return bn,dh end;function getSpeedDisplayString(bB)return d(round(bB*3.6,0)+0.5).." km/h"end;function FormatTimeString(f5)local f6=0;local f7=0;local f8=0;if f5<60 then f5=d(f5)elseif f5<3600 then f6=d(f5/60)f5=d(f5%60)elseif f5<86400 then f7=d(f5/3600)f6=d(f5%3600/60)else f8=d(f5/86400)f7=d(f5%86400/3600)end;if f8>0 then return f8 .."d "..f7 .."h "elseif f7>0 then return f7 .."h "..f6 .."m "elseif f6>0 then return f6 .."m "..f5 .."s"elseif f5>0 then return f5 .."s"else return"0s"end end;function getMagnitudeInDirection(d9,f9)d9=vec3(d9)f9=vec3(f9):normalize()local bn=d9*f9;return bn.x+bn.y+bn.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a0=nil;return true end;local fa=AtlasOrdered[AutopilotTargetIndex].index;local fb=aX[0][fa]if fb.center then AutopilotTargetName=fb.name;a0=b2[0][fa]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fb;for _,bm in pairs(b2[0])do if bm.name==CustomTarget.planetname then a0=bm;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a0.center)else AutopilotTargetCoords=CustomTarget.position end;if a0.name~="Space"then if a0.hasAtmosphere then AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a0.radius*(TargetOrbitRadius-1)+a0.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fc=LastMaxBrakeInAtmo/a0:getGravity(a0.center+vec3(0,0,1)*a0.radius):len()return fc end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a0.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local ba=core.getWorldVelocity()local bB=vec3(ba):len()local fd,fe=b3.computeDistanceAndTime(vec3(ba):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ff;if not TurnBurn then _,ff=GetAutopilotBrakeDistanceAndTime(bB)else _,ff=GetAutopilotTBBrakeDistanceAndTime(bB)end;local fg=0;local fh=0;if AutopilotCruising or not Autopilot and bB>5 then fh=b3.computeTravelTime(bB,0,AutopilotDistance)elseif U+fd<AutopilotDistance then fg=AutopilotDistance-(U+fd)fh=b3.computeTravelTime(8333.0556,0,fg)else local fi=(AutopilotDistance-U)/fd;fd=AutopilotDistance-U;fe=fe*fi end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fh elseif AutopilotBraking then return ff elseif AutopilotCruising then return fh+ff else return fe+V+fh end end;function GetAutopilotBrakeDistanceAndTime(bB)if not ai then RefreshLastMaxBrake()return b3.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b3.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bB)RefreshLastMaxBrake()return b3.computeDistanceAndTime(bB,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fj=-1;local fk=-1;if vBooster then fj=vBooster.distance()end;if hover then fk=hover.distance()end;if fj~=-1 and fk~=-1 then if fj<fk then return fj else return fk end elseif fj~=-1 then return fj elseif fk~=-1 then return fk else return-1 end end;function AboveGroundLevel()local fl=-1;local fm=hoverDetectGround()if telemeter_1 then fl=telemeter_1.getDistance()end;if fm~=-1 and fl~=-1 then if fm<fl then return fm else return fl end elseif fm~=-1 then return fm else return fl end end;function tablelength(fn)local fo=0;for _ in pairs(fn)do fo=fo+1 end;return fo end;function BeginProfile(fp)ProfileTimeStart=system.getTime()end;function EndProfile(fp)local fq=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fq;ProfileCount=ProfileCount+1;if fq>ProfileTimeMax then ProfileTimeMax=fq end;if fq<ProfileTimeMin then ProfileTimeMin=fq end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fr=ProfileTimeSum;local fs=ProfileTimeSum/ProfileCount;local ft=ProfileTimeMin;local fu=ProfileTimeMax;local fv=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fr,fs,ft,fu,fv))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fw=radar_1.getEntries()local fx=radar_1.getData()local fy=ConvertResolutionX(1770)local fz=ConvertResolutionY(330)if#fw>0 then local fA=fx:find('identifiedConstructs":%[%]')if fA==nil and perisPanelID==nil then ab=1;ToggleRadarPanel()end;if fA~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a9=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fy,fz,#fw)local fB={}for bl,bm in pairs(fw)do if radar_1.hasMatchingTransponder(bm)==1 then table.insert(fB,bm)end end;if#fB>0 then local bI=ConvertResolutionY(15)local bH=ConvertResolutionX(1370)a9=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a9,bH,bI)for bl,bm in pairs(fB)do bI=bI+20;a9=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a9,bH,bI,radar_1.getConstructName(bm))end end else local fC;fC=fx:find('worksInEnvironment":false')if fC then a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fy,fz)else a9=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fy,fz)end;if radarPanelID~=nil then ab=0;ToggleRadarPanel()end end end end;function DisplayMessage(cc,dg)if dg~="empty"then cc[#cc+1]=[[<text class="msg" x="50%%" y="310" >]]for fD in string.gmatch(dg,"([^\n]+)")do cc[#cc+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fD)end;cc[#cc+1]=[[</text>]]end;if a7~=0 then unit.setTimer("msgTick",a7)a7=0 end end;function updateDistance()local bu=system.getTime()local ba=vec3(core.getWorldVelocity())local dy=vec3(ba):len()local fE=bu-al;if dy>1.38889 then dy=dy/1000;local fF=dy*(bu-al)TotalDistanceTravelled=TotalDistanceTravelled+fF;a1=a1+fF end;a2=a2+fE;TotalFlightTime=TotalFlightTime+fE;al=bu end;function composeAxisAccelerationFromTargetSpeed(fG,fH)local fI=vec3()local fJ=vec3()if fG==axisCommandId.longitudinal then fI=vec3(core.getConstructOrientationForward())fJ=vec3(core.getConstructWorldOrientationForward())elseif fG==axisCommandId.vertical then fI=vec3(core.getConstructOrientationUp())fJ=vec3(core.getConstructWorldOrientationUp())elseif fG==axisCommandId.lateral then fI=vec3(core.getConstructOrientationRight())fJ=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fK=vec3(core.getWorldGravity())local fL=fK:dot(fJ)local fM=vec3(core.getWorldAirFrictionAcceleration())local fN=fM:dot(fJ)local fO=vec3(core.getVelocity())local fP=fO:dot(fI)local fQ=fH*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(1,0,10.0)end;targetSpeedPID:inject(fQ-fP)local fR=targetSpeedPID:get()local fS=(fR-fN-fL)*fJ;return fS end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aX=Atlas()for bl,bm in pairs(aX[0])do if aA==nil or bm.center.x<aA then aA=bm.center.x end;if aB==nil or bm.center.x>aB then aB=bm.center.x end;if aC==nil or bm.center.y<aC then aC=bm.center.y end;if aD==nil or bm.center.y>aD then aD=bm.center.y end end;aY=""local fT=1.1*(aB-aA)/1920;local fU=1.4*(aD-aC)/1080;for bl,bm in pairs(aX[0])do local bH=960+bm.center.x/fT;local bI=540+bm.center.y/fU;aY=aY..'<circle cx="'..bH..'" cy="'..bI..'" r="'..bm.radius/fT*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bm.name,"Moon")and not string.match(bm.name,"Sanctuary")and not string.match(bm.name,"Space")then aY=aY.."<text x='"..bH.."' y='"..bI+bm.radius/fT*30+20 .."' font-size='28' fill="..ao.." text-anchor='middle' font-family='Montserrat'>"..bm.name.."</text>"end end;local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/fT;local bI=540+b_.y/fU;aY=aY..'<circle cx="'..bH..'" cy="'..bI..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='"..bH.."' y='"..bI-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aY=aY..[[</svg>]]aZ=fT;a_=fU;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aY)local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/fT;local bI=540+b_.y/fU;aY='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aY=aY.."<text x='80' y='105' font-size='18' fill="..ao.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b0=screen_2.addContent((bH-80)/19.20,(bI-80)/10.80,aY)end end;function PlanetRef()local function fV(fW)return type(fW)=='number'end;local function fX(fW)return type(tonumber(fW))=='number'end;local function fY(fZ)return type(fZ)=='table'end;local function f_(g0)return type(g0)=='string'end;local function g1(bm)return fY(bm)and fV(bm.x and bm.y and bm.z)end;local function g2(g3)return fY(g3)and fV(g3.latitude and g3.longitude and g3.altitude and g3.bodyId and g3.systemId)end;local g4=math.pi/180;local g5=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local g6=utils.clamp;local function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*epsilon end;local function g7(fW)local bn=string.gsub(string.reverse(e('%.4f',fW)),'^0*%.?','')return bn==''and'0'or string.reverse(bn)end;local function g8(g9)if g1(g9)then return e('{x=%.3f,y=%.3f,z=%.3f}',g9.x,g9.y,g9.z)end;if fY(g9)and not getmetatable(g9)then local ga={}local gb=next(g9)if type(gb)=='nil'or gb==1 then ga=g9 else for bl,bm in pairs(g9)do local dR=g8(bm)if type(bl)=='number'then table.insert(ga,e('[%s]=%s',bl,dR))else table.insert(ga,e('%s=%s',bl,dR))end end end;return e('{%s}',table.concat(ga,','))end;if f_(g9)then return e("'%s'",g9:gsub("'",[[\']]))end;return tostring(g9)end;local gc={}gc.__index=gc;gc.__tostring=function(g9,gd)local ge={}for bl in pairs(g9)do table.insert(ge,bl)end;table.sort(ge)local ga={}for _,bl in ipairs(ge)do local dR=g8(g9[bl])if type(bl)=='number'then table.insert(ga,e('[%s]=%s',bl,dR))else table.insert(ga,e('%s=%s',bl,dR))end end;if gd then return e('%s%s',gd,table.concat(ga,',\n'..gd))end;return e('{%s}',table.concat(ga,','))end;gc.__eq=function(gf,gg)return gf.planetarySystemId==gg.planetarySystemId and gf.bodyId==gg.bodyId and float_eq(gf.radius,gg.radius)and float_eq(gf.center.x,gg.center.x)and float_eq(gf.center.y,gg.center.y)and float_eq(gf.center.z,gg.center.z)and float_eq(gf.GM,gg.GM)end;local function gh(c1,c2,gi,bT,gj)assert(fX(c1),'Argument 1 (planetarySystemId) must be a number:'..type(c1))assert(fX(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fX(gi),'Argument 3 (radius) must be a number:'..type(gi))assert(fY(bT),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bT))assert(fX(gj),'Argument 5 (GM) must be a number:'..type(gj))return setmetatable({planetarySystemId=tonumber(c1),bodyId=tonumber(c2),radius=tonumber(gi),center=vec3(bT),GM=tonumber(gj)},gc)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gk)return e('::pos{%d,%d,%s,%s,%s}',gk.systemId,gk.bodyId,g7(gk.latitude*g5),g7(gk.longitude*g5),g7(gk.altitude))end;MapPosition.__eq=function(gf,gg)return gf.bodyId==gg.bodyId and gf.systemId==gg.systemId and float_eq(gf.latitude,gg.latitude)and float_eq(gf.altitude,gg.altitude)and(float_eq(gf.longitude,gg.longitude)or float_eq(gf.latitude,math.pi/2)or float_eq(gf.latitude,-math.pi/2))end;local function gl(gm,c2,bX,bY,bW)local c1=gm;if f_(gm)and not bY and not bW and not c2 and not bX then c1,c2,bX,bY,bW=string.match(gm,c0)assert(c1,'Argument 1 (position string) is malformed.')else assert(fX(c1),'Argument 1 (systemId) must be a number:'..type(c1))assert(fX(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fX(bX),'Argument 3 (latitude) must be in degrees:'..type(bX))assert(fX(bY),'Argument 4 (longitude) must be in degrees:'..type(bY))assert(fX(bW),'Argument 5 (altitude) must be in meters:'..type(bW))end;c1=tonumber(c1)c2=tonumber(c2)bX=tonumber(bX)bY=tonumber(bY)bW=tonumber(bW)if c2==0 then return setmetatable({latitude=bX,longitude=bY,altitude=bW,bodyId=c2,systemId=c1},MapPosition)end;return setmetatable({latitude=g4*g6(bX,-90,90),longitude=g4*(bY%360),altitude=bW,bodyId=c2,systemId=c1},MapPosition)end;local gn={}gn.__index=gn;gn.__tostring=function(g9,gd)local go=gd and gd..'  'local gp={}local ge={}for bl in pairs(g9)do table.insert(ge,bl)end;table.sort(ge)for _,gq in ipairs(ge)do bdy=g9[gq]local gr=gc.__tostring(bdy,go)if gd then table.insert(gp,e('[%s]={\n%s\n%s}',gq,gr,gd))else table.insert(gp,e('  [%s]=%s',gq,gr))end end;if gd then return e('\n%s%s%s',gd,table.concat(gp,',\n'..gd),gd)end;return e('{\n%s\n}',table.concat(gp,',\n'))end;local function gs(gt)local aX={}local pid;for _,bm in pairs(gt)do local c8=bm.planetarySystemId;if type(c8)~='number'then error('Invalid planetary system ID: '..tostring(c8))elseif pid and c8~=pid then error('Mismatch planetary system IDs: '..c8 ..' and '..pid)end;local gu=bm.bodyId;if type(gu)~='number'then error('Invalid body ID: '..tostring(gu))elseif aX[gu]then error('Duplicate body ID: '..tostring(gu))end;setmetatable(bm.center,getmetatable(vec3.unit_x))aX[gu]=setmetatable(bm,gc)pid=c8 end;return setmetatable(aX,gn)end;b1={}local function gv(gt)return setmetatable({galaxyAtlas=gt or{}},b1)end;b1.__index=function(fZ,i)if type(i)=='number'then local system=fZ.galaxyAtlas[i]return gs(system)end;return rawget(b1,i)end;b1.__pairs=function(g9)return function(fZ,bl)local gw,nv=next(fZ,bl)return gw,nv and gs(nv)end,g9.galaxyAtlas,nil end;b1.__tostring=function(g9)local gx={}for _,gy in pairs(g9 or{})do local gz=gy:getPlanetarySystemId()local gA=gn.__tostring(gy,'    ')table.insert(gx,e('  [%s]={%s\n  }',gz,gA))end;return e('{\n%s\n}\n',table.concat(gx,',\n'))end;b1.BodyParameters=gh;b1.MapPosition=gl;b1.PlanetarySystem=gs;function b1.createBodyParameters(gB,c2,gC,gD,gE,gF,gG)assert(fX(gB),'Argument 1 (planetarySystemId) must be a number:'..type(gB))assert(fX(c2),'Argument 2 (bodyId) must be a number:'..type(c2))assert(fX(gC),'Argument 3 (surfaceArea) must be a number:'..type(gC))assert(fY(gD),'Argument 4 (aPosition) must be an array or vec3:'..type(gD))assert(fY(gE),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gE))assert(fX(gF),'Argument 6 (altitude) must be in meters:'..type(gF))assert(fX(gG),'Argument 7 (gravityAtPosition) must be number:'..type(gG))local gi=math.sqrt(gC/4/math.pi)local a8=gi+gF;local gH=vec3(gD)+a8*vec3(gE)local gj=gG*a8*a8;return gh(gB,c2,gi,gH,gj)end;b1.isMapPosition=g2;function b1:getPlanetarySystem(gm)if i==nil then i=0 end;if nv==nil then nv=0 end;local gB=gm;if g2(gm)then gB=gm.systemId end;if type(gB)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gn then system=gs(system)end;return system end end end;function gn:castIntersections(gI,f9,gJ,gK)local gJ=gJ or function(gL)return 1.05*gL.radius end;local gM={}if gK then for _,i in ipairs(gK)do gM[i]=self[i]end else gK={}for bl,gL in pairs(self)do table.insert(gK,bl)gM[bl]=gL end end;local function gN(gO,gP)local gQ=gM[gO].center-gI;local gR=gM[gP].center-gI;return gQ:len()<gR:len()end;table.sort(gK,gN)local gS=f9:normalize()for i,c8 in ipairs(gK)do local gL=gM[c8]local gT=gL.center-gI;local gi=gJ(gL)local gU=gT:dot(gS)local gV=gU^2-(gT:len2()-gi^2)if gV>=0 then local gW=math.sqrt(gV)local gX=gU+gW;local gY=gU-gW;if gY>0 then return gL,gX,gY elseif gX>0 then return gL,gX,nil end end end;return nil,nil,nil end;function gn:closestBody(gZ)assert(type(gZ)=='table','Invalid coordinates.')local g_,gL;local h0=vec3(gZ)for _,h1 in pairs(self)do local h2=(h1.center-h0):len2()if(not gL or h2<g_)and h1.name~="Space"then gL=h1;g_=h2 end end;return gL end;function gn:convertToBodyIdAndWorldCoordinates(gm)local h3=gm;if f_(gm)then h3=gl(gm)end;if h3.bodyId==0 then return 0,vec3(h3.latitude,h3.longitude,h3.altitude)end;local h1=self:getBodyParameters(h3)if h1 then return h3.bodyId,h1:convertToWorldCoordinates(h3)end end;function gn:getBodyParameters(gm)local c2=gm;if g2(gm)then c2=gm.bodyId end;assert(fX(c2),'Argument 1 (bodyId) must be a number:'..type(c2))return self[c2]end;function gn:getPlanetarySystemId()local _,bm=next(self)return bm and bm.planetarySystemId end;function gc:convertToMapPosition(bT)assert(fY(bT),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bT))local bU=vec3(bT)if self.bodyId==0 then return setmetatable({latitude=bU.x,longitude=bU.y,altitude=bU.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local bV=bU-self.center;local a8=bV:len()local bW=a8-self.radius;local bX=0;local bY=0;if not float_eq(a8,0)then local bZ=math.atan(bV.y,bV.x)bY=bZ>=0 and bZ or 2*math.pi+bZ;bX=math.pi/2-math.acos(bV.z/a8)end;return setmetatable({latitude=bX,longitude=bY,altitude=bW,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gc:convertToWorldCoordinates(gm)local h3=f_(gm)and gl(gm)or gm;if h3.bodyId==0 then return vec3(h3.latitude,h3.longitude,h3.altitude)end;assert(g2(h3),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(h3.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(h3.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local c3=math.cos(h3.latitude)return self.center+(self.radius+h3.altitude)*vec3(c3*math.cos(h3.longitude),c3*math.sin(h3.longitude),math.sin(h3.latitude))end;function gc:getAltitude(bT)return(vec3(bT)-self.center):len()-self.radius end;function gc:getDistance(bT)return(vec3(bT)-self.center):len()end;function gc:getGravity(bT)local h4=self.center-vec3(bT)local h5=h4:len2()return self.GM/h5*h4/math.sqrt(h5)end;return setmetatable(b1,{__call=function(_,...)return gv(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function f_(g0)return type(g0)=='string'end;local function fY(fZ)return type(fZ)=='table'end;local function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bW)assert(self.body)local a8=bW+self.body.radius;if not float_eq(a8,0)then local orbit=math.sqrt(self.body.GM/a8)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gm,ba)assert(self.body)assert(fY(gm)or f_(gm))assert(fY(ba))local b_=(f_(gm)or PlanetRef.isMapPosition(gm))and self.body:convertToWorldCoordinates(gm)or vec3(gm)local bm=vec3(ba)local h6=b_-self.body.center;local gR=bm:len2()local h7=h6:len()local h8=self.body.GM;local h9=((gR-h8/h7)*h6-h6:dot(bm)*bm)/h8;local bQ=h8/(2*h8/h7-gR)local ha=h9:len()local gS=h9:normalize()local hb=bQ*(1-ha)local hc=bQ*(1+ha)local hd=hb*gS+self.body.center;local he=ha<=1 and-hc*gS+self.body.center or nil;local hf=math.sqrt(bQ*h8*(1-ha*ha))local hg=he and 2*math.pi*math.sqrt(bQ^3/h8)local hh=math.acos(h9:dot(h6)/(ha*h7))if h6:dot(bm)<0 then hh=-(hh-2*math.pi)end;local hi=math.acos((math.cos(hh)+ha)/(1+ha*math.cos(hh)))local hj=hi;if hj<0 then hj=hj+2*math.pi end;local hk=hj-ha*math.sin(hj)local hl=0;local hm=0;local hn=0;if hg~=nil then hl=hk/(2*math.pi/hg)hm=hg-hl;hn=hm+hg/2;if hh-math.pi>0 then hm=hl;hn=hm+hg/2 end;if hn>hg then hn=hn-hg end end;return{periapsis={position=hd,speed=hf/hb,circularOrbitSpeed=math.sqrt(h8/hb),altitude=hb-self.body.radius},apoapsis=he and{position=he,speed=hf/hc,circularOrbitSpeed=math.sqrt(h8/hc),altitude=hc-self.body.radius},currentVelocity=bm,currentPosition=b_,eccentricity=ha,period=hg,eccentricAnomaly=hi,meanAnomaly=hk,timeToPeriapsis=hm,timeToApoapsis=hn}end;local function ho(hp)local h1=PlanetRef.BodyParameters(hp.planetarySystemId,hp.bodyId,hp.radius,hp.center,hp.GM)return setmetatable({body=h1},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ho(...)end})end;function Kinematics()local b3={}local hq=30000000/3600;local hr=hq*hq;local hs=100;local function ht(bm)return 1/math.sqrt(1-bm*bm/hr)end;function b3.computeAccelerationTime(hu,hv,hw)local hx=hq*math.asin(hu/hq)return(hq*math.asin(hw/hq)-hx)/hv end;function b3.computeDistanceAndTime(hu,hw,hy,hz,hA,hB)hA=hA or 0;hB=hB or 0;local hC=hu<=hw;local hD=hz*(hC and 1 or-1)/hy;local hE=-hB/hy;local hF=hD+hE;if hC and hF<=0 or not hC and hF>=0 then return-1,-1 end;local hG,hH=0,0;if hD~=0 and hA>0 then local hx=math.asin(hu/hq)local hI=math.pi*(hD/2+hE)local hJ=hD*hA;local hK=hq*math.pi;local bm=function(fZ)local cE=(hI*fZ-hJ*math.sin(math.pi*fZ/2/hA)+hK*hx)/hK;local hL=math.tan(cE)return hq*hL/math.sqrt(hL*hL+1)end;local hM=hC and function(g0)return g0>=hw end or function(g0)return g0<=hw end;hH=2*hA;if hM(bm(hH))then local hN=0;while math.abs(hH-hN)>0.5 do local fZ=(hH+hN)/2;if hM(bm(fZ))then hH=fZ else hN=fZ end end end;local hO=hu;local hP=hH/hs;for hQ=1,hs do local bB=bm(hQ*hP)hG=hG+(bB+hO)*hP/2;hO=bB end;if hH<2*hA then return hG,hH end;hu=hO end;local hx=hq*math.asin(hu/hq)local bo=(hq*math.asin(hw/hq)-hx)/hF;local hR=hr*math.cos(hx/hq)/hF;local a8=hR-hr*math.cos((hF*bo+hx)/hq)/hF;return a8+hG,bo+hH end;function b3.computeTravelTime(hu,hv,a8)if a8==0 then return 0 end;if hv>0 then local hx=hq*math.asin(hu/hq)local hR=hr*math.cos(hx/hq)/hv;return(hq*math.acos(hv*(hR-a8)/hr)-hx)/hv end;assert(hu>0,'Acceleration and initial speed are both zero.')return a8/hu end;function b3.lorentz(bm)return ht(bm)end;return b3 end;function script.onStart()VERSION_NUMBER=5.224;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b1=PlanetRef()b2=b1(Atlas())b3=Kinematics()b5=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hS)if dbHud_1 then if not a3 then for bl,bm in pairs(b)do dbHud_1.setStringValue(bm,g(_G[bm]))if hS and dbHud_2 then dbHud_2.setStringValue(bm,g(_G[bm]))end end;for bl,bm in pairs(a)do dbHud_1.setStringValue(bm,g(_G[bm]))if hS and dbHud_2 then dbHud_2.setStringValue(bm,g(_G[bm]))end end;c("Saved Variables to Datacore")if hS and dbHud_2 then P="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bw=j()if door and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(door)do bm.toggle()end end;if switch then for _,bm in pairs(switch)do bm.toggle()end end;if forcefield and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(forcefield)do bm.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hT)if hT=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hU=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hU then a8=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a8=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)W,X=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)W,X=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dg,dh=getDistanceDisplayString(a8)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dg..'", "unit":"'..dh..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dg,dh=getDistanceDisplayString(U)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dg..'", "unit":"'..dh..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(V)..'", "unit":""}')dg,dh=getDistanceDisplayString(W)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dg..'", "unit":"'..dh..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(X)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dg,dh=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dg)..'", "unit":"'..dh..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then s=unit.getAxisCommandValue(0)elseif AtmoSpeedAssist then s=1;Nav.control.cancelCurrentControlMasterMode()end end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hT=="oneSecond"then ag=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cc={}local dn=GetFlightStyle()DrawOdometer(cc,a1,TotalDistanceTravelled,dn,a2)if ShouldCheckDamage then CheckDamage(cc)end;aa=table.concat(cc,"")collectgarbage("collect")elseif hT=="fiveSecond"then ah=dbHud_1.getStringValue("SPBAutopilotTargetName")if ah~=nil and ah~=""and ah~="SatNavNotChanged"then local bn=json.decode(dbHud_1.getStringValue("SavedLocations"))if bn~=nil then _G["SavedLocations"]=bn;local ca=-1;local c6;for bl,bm in pairs(SavedLocations)do if bm.name and bm.name=="SatNav Location"then ca=bl;break end end;if ca~=-1 then c6=SavedLocations[ca]ca=-1;for bl,bm in pairs(aX[0])do if bm.name and bm.name=="SatNav Location"then ca=bl;break end end;if ca>-1 then aX[0][ca]=c6 end;UpdateAtlasLocationsList()P=c6.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ah then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hT=="msgTick"then local cc={}DisplayMessage(cc,"empty")P="empty"unit.stopTimer("msgTick")a7=3 elseif hT=="animateTick"then b7=true;b6=false;a5=0;a6=0;unit.stopTimer("animateTick")elseif hT=="hudTick"then local cc={}HUDPrologue(cc)if showHud then UpdateHud(cc)else DisplayOrbitScreen(cc)DrawWarnings(cc)end;HUDEpilogue(cc)cc[#cc+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if P~="empty"then DisplayMessage(cc,P)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cc)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cc)if screen_1.getMouseState()==1 then CheckButtons()end;cc[#cc+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)elseif system.isViewLocked()==0 then if o()==1 and O then SetButtonContains()DrawButtons(cc)if not b6 and not b7 then local hV=table.concat(cc,"")cc={}cc[#cc+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cc[#cc+1]=aY;cc[#cc+1]=hV;cc[#cc+1]="</body>"b6=true;cc[#cc+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cc,"")system.setScreen(content)elseif b7 then local hV=table.concat(cc,"")cc={}cc[#cc+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cc[#cc+1]=aY;cc[#cc+1]=hV;cc[#cc+1]="</body>"end;if not b6 then cc[#cc+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end else CheckButtons()end else if not O and o()==0 then CheckButtons()if a8>DeadZone then DrawCursorLine(cc)end else SetButtonContains()DrawButtons(cc)end;cc[#cc+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],x,y,a5,a6)end;cc[#cc+1]=[[</svg></body>]]content=table.concat(cc,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hT=="apTick"then b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ai=j()>0;local bo=system.getTime()local hW=bo-bh;bh=bo;local cf=vec3(core.getConstructWorldOrientationForward())local cg=vec3(core.getConstructWorldOrientationRight())local hX=vec3(core.getConstructWorldOrientationUp())local ch=vec3(core.getWorldVertical())local hY=core.getVelocity()local dq=getRoll(ch,cf,cg)local dr=dq/180*math.pi;local ds=math.cos(dr)local dt=math.sin(dr)local ci=getPitch(ch,cf,cg)local hZ=getPitch(ch,cf,cg*ds+hX*dt)local h_=-math.deg(cz(hX,ba,cf))local i0=math.deg(cz(cg,ba,cf))bg=ai and h_<-YawStallAngle or h_>YawStallAngle or i0<-PitchStallAngle or i0>PitchStallAngle;local i1=100;be=system.getMouseDeltaX()bf=system.getMouseDeltaY()if InvertMouse and not O then bf=-bf end;I=0;M=0;H=0;ba=vec3(core.getWorldVelocity())bb=vec3(ba):len()sys=b2[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b5(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),ba)af=hoverDetectGround()local by=planet:getGravity(core.getConstructWorldPos()):len()*n()bi=0;b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a5=screen_1.getMouseX()*ResolutionX;a6=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and O then if not b6 then a5=a5+be;a6=a6+bf end else a5=0;a6=0 end else a5=a5+be;a6=a6+bf;a8=math.sqrt(a5*a5+a6*a6)if not O and o()==0 then if userControlScheme=="virtual joystick"then if a5>0 and a5>DeadZone then I=I-(a5-DeadZone)*MouseXSensitivity elseif a5<0 and a5<DeadZone*-1 then I=I-(a5+DeadZone)*MouseXSensitivity else I=0 end;if a6>0 and a6>DeadZone then H=H-(a6-DeadZone)*MouseYSensitivity elseif a6<0 and a6<DeadZone*-1 then H=H-(a6+DeadZone)*MouseYSensitivity else H=0 end elseif userControlScheme=="mouse"then a5=0;a6=0;H=(-utils.smoothstep(bf,-100,100)+0.5)*2*D;I=(-utils.smoothstep(be,-100,100)+0.5)*2*E else a5=0;a6=0 end end end;local i2=bb>8334;if bb>SpaceSpeedLimit/3.6 and not ai and not Autopilot and not i2 then P="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end;if not i2 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=i2;if ai and j()>0.09 then if bb>AtmoSpeedLimit/3.6 and not AtmoSpeedAssist and not an then BrakeIsOn=true;an=true elseif not AtmoSpeedAssist and an then if bb<AtmoSpeedLimit/3.6 then BrakeIsOn=false;an=false end end end;if BrakeIsOn then L=1 else L=0 end;aj=core.getAltitude()if aj==0 then aj=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if bb>B then local i3=AlignToWorldVector(vec3(ba),0.01)if ac then b8=true;if bb<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;C=true;ac=false;ae=true;Autopilot=false;b8=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ai then RetrogradeIsOn=false elseif bb>B then AlignToWorldVector(-vec3(ba))end end;if not ProgradeIsOn and ac then if j()==0 then C=true;BeginReentry()ac=false;ae=true else ac=false;ToggleAutopilot()end end;if ae and aj<ReentryAltitude+100 and bb*3.6>ReentrySpeed-100 then ToggleAutopilot()ae=false end;if Autopilot and j()==0 and not ac then local U,V;if not TurnBurn then U,V=GetAutopilotBrakeDistanceAndTime(bb)else U,V=GetAutopilotTBBrakeDistanceAndTime(bb)end;U=U;V=V;local i4=AutopilotTargetCoords;local i5=false;AutopilotDistance=(vec3(i4)-vec3(core.getConstructWorldPos())):len()local i6=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()local dg,dh=getDistanceDisplayString(i6)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dg..'", "unit":"'..dh..'"}')local i7=true;local i8=(a0.center-(vec3(core.getConstructWorldPos())+vec3(ba):normalize()*AutopilotDistance)):len()-a0.radius;dg,dh=getDistanceDisplayString(i8)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dg..'", "unit":"'..dh..'"}')if orbit.apoapsis==nil and bb>300 and AutopilotAccelerating then local dd=vec3(i4)-vec3(core.getConstructWorldPos())local i9=utils.clamp(math.deg(cz(hX,ba:normalize(),dd:normalize()))*bb/500,-90,90)local ia=utils.clamp(math.deg(cz(cg,ba:normalize(),dd:normalize()))*bb/500,-90,90)if math.abs(i9)<5 and math.abs(ia)<5 then i9=i9*2;ia=ia*2 end;if math.abs(i9)<2 and math.abs(ia)<2 then i9=i9*2;ia=ia*2 end;local h_=-math.deg(cz(hX,cf,ba:normalize()))local i0=-math.deg(cz(cg,cf,ba:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ia-i0)local ib=utils.clamp(apPitchPID:get(),-1,1)H=H+ib;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(i9-h_)local ic=utils.clamp(apYawPID:get(),-1,1)I=I+ic;i5=true end;if i8<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b5(a0):escapeAndOrbitalSpeed(i8)end end;if not AutopilotCruising and not AutopilotBraking and not i5 then i7=AlignToWorldVector((i4-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn and not i5 then i7=AlignToWorldVector(-vec3(ba):normalize())end;if AutopilotAccelerating then if not i7 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if not z then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or unit.getThrottle()==0 and z then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false end;if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false end elseif AutopilotBraking then BrakeIsOn=true;L=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bb<50 then P="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,id=b5(a0):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bb<=id then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"P="Autopilot completed, orbit established"L=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;z=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ac=true end end end elseif AutopilotCruising then if AutopilotDistance<=U then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if i7 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ac then AutopilotTargetCoords=vec3(a0.center)+(AutopilotTargetOrbit+a0.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif i7 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not z then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)z=true;BrakeIsOn=false end end end end end;if N then b8=true;local ia=0;local b_=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local ie=b_-vec3(core.getConstructWorldPos())local ig=vec3(ie):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ih=vec3(ie):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a8=math.sqrt(ig*ig+ih*ih)AlignToWorldVector(ie:normalize())local ii=40;local ij=a8<ii;local ik=100;local fH=utils.clamp((a8-ii)/2,10,ik)H=0;local i7=math.abs(I)<0.1;if i7 and bb<fH and not ij then BrakeIsOn=false;ia=-20 else BrakeIsOn=true;ia=0 end;local il=1.0;if math.abs(ia-ci)>il then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ia-ci)local ib=pitchPID:get()H=ib end end;local dV=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dB=unit.getClosestPlanetInfluence()>0;local im=HoldAltitude-aj;local io=500+bb;local ia=(utils.smoothstep(im,-io,io)-0.5)*2*MaxPitch*utils.clamp(bb/100,0.1,1)if not AltitudeHold then ia=0 end;if LockPitch~=nil then if dB then ia=LockPitch else LockPitch=nil end end;b8=true;if Reentry then local ip=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ip then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ip)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not C then ia=-80;if j()>0.02 then P="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ia=0;b8=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then C=false;Reentry=false;b8=autoRollPreference end end;local iq=H;if bb>B and not ad and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(ba))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local dd=CustomTarget.position-vec3(core.getConstructWorldPos())local hX=vec3(core.getConstructWorldOrientationUp())local i9=math.deg(cz(ch,ba:normalize(),dd:normalize()))*2;local ir=math.rad(math.abs(dq))if bb>i1 then bi=utils.clamp(i9,-90,90)local is=i9;i9=utils.clamp(h_-i9,h_-YawStallAngle*0.85,h_+YawStallAngle*0.85)*math.cos(ir)+utils.clamp(ia-hZ,-YawStallAngle*0.85,YawStallAngle*0.85)*math.sin(math.rad(dq))ia=utils.clamp(ia*math.cos(ir),-PitchStallAngle*0.85,PitchStallAngle*0.85)+utils.clamp(math.abs(is),-PitchStallAngle*0.85,PitchStallAngle*0.85)*math.sin(ir)end;local it=i9;if not bg and bb>i1 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(it)local ic=utils.clamp(yawPID:get(),-1,1)I=I+ic elseif af>-1 or bb<i1 then AlignToWorldVector(dd)else AlignToWorldVector(ba)ia=utils.clamp(-i0,-90+PitchStallAngle*0.85,90-PitchStallAngle*0.85)end;local iu=planet:getAltitude(CustomTarget.position)local iv=math.sqrt(dd:len()^2-(aj-iu)^2)local iw=LastMaxBrakeInAtmo;if iw then iw=iw*utils.clamp(bb/100,0.1,1)*j()else iw=LastMaxBrake end;local dT=ba.x*dV.x+ba.y*dV.y+ba.z*dV.z;local ix=ba:len()-math.abs(dT)local iy=vec3(core.getWorldAirFrictionAcceleration())local iz=math.sqrt(iy:len()-iy:project_on(dV):len())*n()if bb>100 then U,V=b3.computeDistanceAndTime(bb,100,n(),0,0,iw+iz)local iA,iB=b3.computeDistanceAndTime(100,0,n(),0,0,iw/2)U=U+iA else U,V=b3.computeDistanceAndTime(bb,0,n(),0,0,iw/2)end;StrongBrakes=true;if iv<=U+bb*hW/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ix<0.1 or iv<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<iv)then BrakeLanding=true;VectorToTarget=false end;LastDistanceToTarget=iv end;H=iq;local fl=-1;local il=0.1;if BrakeLanding then ia=0;local dT=ba.x*dV.x+ba.y*dV.y+ba.z*dV.z;local iC=false;local iD=30;if b4~=nil and b4>0 then local iz=0;local dw=utils.clamp(j(),0.4,2)local iw=LastMaxBrakeInAtmo*utils.clamp(bb/100,0.1,1)*dw;local iE=b4*dw+iw+iz-by;local iF=iw+iz-by;local iG=iw/2+iz-by;local iH=bb-math.sqrt(math.abs(iG/2)*20/(0.5*n()))*utils.sign(iG)if iH<0 then iH=0 end;local iI;if bb>100 then local iJ,_=b3.computeDistanceAndTime(bb,100,n(),0,0,iw)local iK,_=b3.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(iw))iI=iJ+iK else iI=b3.computeDistanceAndTime(bb,0,n(),0,0,math.sqrt(iw))end;if iI<20 then BrakeIsOn=false else local iL=0;if iH>100 then local iM,_=b3.computeDistanceAndTime(iH,100,n(),0,0,iE)local iN,_=b3.computeDistanceAndTime(100,0,n(),0,0,b4*dw+math.sqrt(iw)+iz-by)iL=iM+iN else iL,_=b3.computeDistanceAndTime(iH,0,n(),0,0,b4*dw+math.sqrt(iw)+iz-by)end;iL=(iL+15+bb*hW)*1.1;local iO=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if iO then local iu=planet:getAltitude(CustomTarget.position)local iP=aj-iu-100;local dd=CustomTarget.position-vec3(core.getConstructWorldPos())local iQ=math.sqrt(dd:len()^2-(aj-iu)^2)if iQ>100 then iO=false elseif iP<=iL or iL==-1 then BrakeIsOn=true;iC=true else BrakeIsOn=false;iC=true end end;if not iO and CalculateBrakeLandingSpeed then if iL>=iD then BrakeIsOn=true else BrakeIsOn=false end;iC=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fl=af;if fl>-1 then b8=autoRollPreference;if bb<1 or ba:normalize():dot(ch)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a4=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and ba:normalize():dot(-dV)<0.999 then BrakeIsOn=true elseif dT<-brakeLandingRate and not iC then BrakeIsOn=true elseif not iC then BrakeIsOn=false end end;if AutoTakeoff or ad then if ia<15 and aj/HoldAltitude>0.75 then AutoTakeoff=false;if not ad then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ad and bb<B then Autopilot=true;ad=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 elseif ad then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;BrakeIsOn=true end elseif ad and j()==0 and aj>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;local iR=hoverDetectGround()>-1;local iS=ci;if VectorToTarget and not iR and bb>i1 then local ir=math.rad(math.abs(dq))iS=ci*math.cos(ir)+i0*math.sin(ir)end;local iT=utils.clamp(ia-iS,-YawStallAngle*0.85,YawStallAngle*0.85)if math.abs(iT)>il and(not bg and(math.abs(dq)<5 or VectorToTarget)or BrakeLanding or iR)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iT)local ib=pitchPID:get()H=H+ib end end;Q=orbit.eccentricity;if antigrav and not ExternalAGG and aj<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and w then s=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)w=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not w then s=0;w=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iU=utils.clamp(G+H+system.getControlDeviceForwardInput(),-1,1)local iV=utils.clamp(J+M+system.getControlDeviceYawInput(),-1,1)local iW=utils.clamp(K+I-system.getControlDeviceLeftRightInput(),-1,1)local iX=L;local iY=vec3(core.getWorldVertical())local iZ=vec3(core.getConstructWorldOrientationUp())local i_=vec3(core.getConstructWorldOrientationForward())local j0=vec3(core.getConstructWorldOrientationRight())local j1=vec3(core.getWorldVelocity())local j2=vec3(core.getWorldVelocity()):normalize()local j3=getRoll(iY,i_,j0)local j4=math.abs(j3)local j5=utils.sign(j3)local j=j()local j6=vec3(core.getWorldAngularVelocity())local j7=iU*pitchSpeedFactor*j0+iV*rollSpeedFactor*i_+iW*yawSpeedFactor*iZ;if iY:len()>0.01 and j>0.0 or ProgradeIsOn then if b8==true and math.abs(bi-j3)>autoRollRollThreshold and iV==0 then local j8=bi;local j9=autoRollFactor;if rollPID==nil then rollPID=pid.new(j9*0.01,0,j9*0.1)end;rollPID:inject(j8-j3)local ja=rollPID:get()j7=j7+ja*i_ end end;if iY:len()>0.01 and j>0.0 then local jb=20.0;if turnAssist==true and j4>jb and iU==0 and iW==0 then local jc=turnAssistFactor*0.1;local jd=turnAssistFactor*0.025;local je=(j4-jb)/(180-jb)*180;local jf=0;if je<90 then jf=je/90 elseif je<180 then jf=(180-je)/90 end;jf=jf*jf;local jg=-j5*jd*(1.0-jf)local jh=jc*jf;j7=j7+jh*j0+jg*iZ end end;local ji=1;local jj=0;local jk=1;if system.getMouseWheel()>0 then s=utils.clamp(s+speedChangeLarge/100,-1,1)elseif system.getMouseWheel()<0 then s=utils.clamp(s-speedChangeLarge/100,-1,1)end;t=0;local dT=-iY:dot(j1)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(AtmoSpeedLimit/3.6-j1:dot(i_))local jl=throttlePID:get()v=utils.clamp(jl,-1,1)if v<s and(j>0.05 or j>0 and dT<-80)then u=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(v,0.01,1))else u=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,s)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(j1:len()-AtmoSpeedLimit/3.6)local jm=utils.clamp(brakePID:get(),0,1)if j>0 and dT<-80 or j>0.05 then t=jm end;if t>0 then if u and v==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else v=utils.clamp(v,0.01,1)end;local jn=''local jo=vec3()local jp='thrust analog vertical 'local jq='thrust analog lateral 'if ExtraLateralTags~="none"then jq=jq..ExtraLateralTags end;if ExtraVerticalTags~="none"then jp=jp..ExtraVerticalTags end;local jr=composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical,a4*1000)jn=jn..' , '..jp;jo=jo+jr;local js='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then js=js..ExtraLongitudeTags end;local jt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local ju=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(js,axisCommandId.longitudinal)local jv=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,0)jn=jn..' , '..jq;jo=jo+jv;if jo:len()>constants.epsilon then Nav:setEngineForceCommand(jn,jo,jj,'','','',jk)end;Nav:setEngineForceCommand(js,ju,ji)if iX==0 then iX=t end;local jw=-iX*(brakeSpeedFactor*j1+brakeFlatFactor*j2)Nav:setEngineForceCommand('brake',jw)else local jw=-iX*(brakeSpeedFactor*j1+brakeFlatFactor*j2)Nav:setEngineForceCommand('brake',jw)local jn=''local jo=vec3()local jx=false;local js='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then js=js..ExtraLongitudeTags end;local jt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jt==axisCommandType.byThrottle then local ju=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(js,axisCommandId.longitudinal)Nav:setEngineForceCommand(js,ju,ji)elseif jt==axisCommandType.byTargetSpeed then local ju=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jn=jn..' , '..js;jo=jo+ju;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then jx=true end end;local jq='thrust analog lateral 'if ExtraLateralTags~="none"then jq=jq..ExtraLateralTags end;local jy=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jy==axisCommandType.byThrottle then local jz=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jq,axisCommandId.lateral)Nav:setEngineForceCommand(jq,jz,ji)elseif jy==axisCommandType.byTargetSpeed then local jv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jn=jn..' , '..jq;jo=jo+jv end;local jp='thrust analog vertical 'if ExtraVerticalTags~="none"then jp=jp..ExtraVerticalTags end;local jA=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jA==axisCommandType.byThrottle then local jr=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jp,axisCommandId.vertical)if a4~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jp,jr,ji,'airfoil','ground','',jk)else Nav:setEngineForceCommand(jp,vec3(),ji)Nav:setEngineForceCommand('airfoil vertical',jr,ji,'airfoil','','',jk)Nav:setEngineForceCommand('ground vertical',jr,ji,'ground','','',jk)end elseif jA==axisCommandType.byTargetSpeed then if a4<0 then Nav:setEngineForceCommand('hover',vec3(),ji)end;local jB=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jn=jn..' , '..jp;jo=jo+jB end;local fH=unit.getAxisCommandValue(0)if jo:len()>constants.epsilon then if L~=0 or jx or math.abs(j2:dot(i_))<0.8 or ba:len()>fH/3.6 then jn=jn..', brake'end;Nav:setEngineForceCommand(jn,jo,jj,'','','',jk)end end;local jC=torqueFactor*(j7-j6)local jD=vec3(core.getWorldAirFrictionAngularAcceleration())jC=jC-jD;Nav:setEngineTorqueCommand('torque',jC,ji,'airfoil','','',jk)Nav:setBoosterCommand('rocket_engine')if T and not VanillaRockets then local bB=vec3(core.getVelocity()):len()local jE=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jF=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bB*3.6>jF*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB*3.6<jF*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jG=unit.getThrottle()local fH=jG/100;if j==0 then fH=fH*MaxGameVelocity;if bB>=fH*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB<fH*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fH=fH*ReentrySpeed/3.6;if bB>=fH*(1-jE)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bB<fH*(1-jE)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bn=coroutine.resume(beginSetup)if bn then SetupComplete=true end else Nav:update()if not b6 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jH)if jH=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0;if(vBooster or hover)and af==-1 and(j()>0 or aj<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and bb>B then P="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b8=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if F and not BrakeLanding then Nav.control.extendLandingGears()end else if F then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jH=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jH=="forward"then G=G-1 elseif jH=="backward"then G=G+1 elseif jH=="left"then J=J-1 elseif jH=="right"then J=J+1 elseif jH=="yawright"then K=K-1 elseif jH=="yawleft"then K=K+1 elseif jH=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jH=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jH=="up"then a4=a4+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jH=="down"then a4=a4-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jH=="groundaltitudeup"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jH=="groundaltitudedown"then OldButtonMod=R;OldAntiMod=S;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-R else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jH=="option1"then IncrementAutopilotTargetIndex()A=false elseif jH=="option2"then DecrementAutopilotTargetIndex()A=false elseif jH=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;A=false;ToggleWidgets()elseif jH=="option4"then ToggleAutopilot()A=false elseif jH=="option5"then ToggleLockPitch()A=false elseif jH=="option6"then ToggleAltitudeHold()A=false elseif jH=="option7"then wipeSaveVariables()A=false elseif jH=="option8"then ToggleFollowMode()A=false elseif jH=="option9"then if gyro~=nil then gyro.toggle()am=gyro.getState()==1 end;A=false elseif jH=="lshift"then if system.isViewLocked()==1 then O=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then O=true;b7=false;b6=false end elseif jH=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jH=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jH=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not T then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;T=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;T=false end elseif jH=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()s=0 elseif jH=="speedup"then if not O then if AtmoSpeedAssist then s=utils.clamp(s+speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jH=="speeddown"then if not O then if AtmoSpeedAssist then s=utils.clamp(s-speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jH=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jH)if jH=="forward"then G=0 elseif jH=="backward"then G=0 elseif jH=="left"then J=0 elseif jH=="right"then J=0 elseif jH=="yawright"then K=0 elseif jH=="yawleft"then K=0 elseif jH=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jH=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jH=="up"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jH=="down"then a4=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jH=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jH=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then S=OldAntiMod end;if AltitudeHold then R=OldButtonMod end;A=false elseif jH=="lshift"then if system.isViewLocked()==1 then O=false;a5=0;a6=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then O=false;b7=false;b6=false end elseif jH=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jH=="lalt"then if o()==0 and freeLookToggle then if A then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else A=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jH)if jH=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+S;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+S end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jH=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-S;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;S=S*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-R;R=R*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jH=="speedup"then if not O then if AtmoSpeedAssist then s=utils.clamp(s+speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jH=="speeddown"then if not O then if AtmoSpeedAssist then s=utils.clamp(s-speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jI)local i;local jJ="/commands /setname /G /agg /addlocation /copydatabank"local jK,jL=nil,nil;local jM="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jI," ")jK=jI;if i~=nil then jK=string.sub(jI,0,i-1)jL=string.sub(jI,i+1)elseif not string.find(jJ,jK)then for fD in string.gmatch(jM,"([^\n]+)")do c(fD)end;return end;if jK=="/setname"then if jL==nil or jL==""then P="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jL)else P="Select a saved target to rename first"end elseif jK=="/addlocation"then if jL==nil or jL==""or string.find(jL,"::")==nil then P="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jL,"::")local c5=string.sub(jL,1,i-2)local b_=string.sub(jL,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c1,c2,bX,bY,bW=string.match(b_,c0)local planet=aX[tonumber(c1)][tonumber(c2)]AddNewLocationByWaypoint(c5,planet,b_)P="Added "..c5 .." to saved locations,\nplanet "..planet.name.." at "..b_;a7=5 elseif jK=="/agg"then if jL==nil or jL==""then P="Usage: /agg targetheight"return end;jL=tonumber(jL)if jL<1000 then jL=1000 end;AntigravTargetAltitude=jL;P="AGG Target Height set to "..jL elseif jK=="/G"then if jL==nil or jL==""then P="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jL=="dump"then for bl,bm in pairs(a)do if type(_G[bm])=="boolean"then if _G[bm]==true then c(bm.." true")else c(bm.." false")end elseif _G[bm]==nil then c(bm.." nil")else c(bm.." ".._G[bm])end end;return end;i=string.find(jL," ")local jN=string.sub(jL,0,i-1)local jO=string.sub(jL,i+1)for bl,bm in pairs(a)do if bm==jN then P="Variable "..jN.." changed to "..jO;local jP=type(_G[bm])if jP=="number"then jO=tonumber(jO)elseif jP=="boolean"then if string.lower(jO)=="true"then jO=true else jO=false end end;_G[bm]=jO;return end end;P="No such global variable: "..jN elseif jK=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else P="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
