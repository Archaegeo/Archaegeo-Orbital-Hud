name: ButtonsHud - Dimencia and Archaegeo v5.224 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 1.0 --export: (Default: 1.0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=0;local t=0;local u=false;local v=0;local w=false;local x=round(ResolutionX/2,0)local y=round(ResolutionY/2,0)local z=false;local A=true;local B=55;local C=false;local D=1;local E=1;local F=false;local G=0;local H=0;local I=0;local J=0;local K=0;local L=0;local M=0;local N=false;local O=false;local P="empty"local Q=1;local R=5;local S=5;local T=false;local U,V=0;local W,X=0;local Y=false;local Z=false;local a0=nil;local a1=0;local a2=0;local a3=false;local a4=0;local a5=0;local a6=0;local a7=3;local a8=0;local a9=""local aa=""local ab=0;local ac=false;local ad=false;local ae=false;local af=-1;local ag=false;local ah=""local ai=j()>0;local aj=core.getAltitude()local ak=core.getElementIdList()local al=system.getTime()local am=nil;local an=false;local ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local aq={}local ar=0;local as=0;local at=""local au=true;local av={}local aw=1;local ax=0.001;local ay=ResolutionX;local az=ResolutionY;local aA=nil;local aB=nil;local aC=nil;local aD=nil;local aE=false;local aF=false;local aG=0;local aH=nil;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN={}local aO={}local aP=d(1/apTickRate)*2;local aQ={}local aR={}local aS={}local aT={}local aU=false;local aV=16;local aW=0;local aX=nil;local aY=""local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local ba=vec3(core.getWorldVelocity())local bb=vec3(ba):len()local bc=math.cos(YawStallAngle*constants.deg2rad)local bd=LandingGearGroundHeight;local be=system.getMouseDeltaX()local bf=system.getMouseDeltaY()local bg=false;local bh=system.getTime()local bi=0;local bj=0;function LoadVariables()if dbHud_1 then local bk=dbHud_1.hasKey;if not useTheseSettings then for bl,bm in pairs(a)do if bk(bm)then local bn=f(dbHud_1.getStringValue(bm))if bn~=nil then c(bm.." "..dbHud_1.getStringValue(bm))_G[bm]=bn;aE=true end end end end;coroutine.yield()for bl,bm in pairs(b)do if bk(bm)then local bn=f(dbHud_1.getStringValue(bm))if bn~=nil then c(bm.." "..dbHud_1.getStringValue(bm))_G[bm]=bn;aE=true end end end;if useTheseSettings then P="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a7=5 elseif aE then P="Loaded Saved Variables (see Lua Chat Tab for list)"else P="No Saved Variables Found - Stand up / leave remote to save settings"end else P="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bo=system.getTime()if LastStartTime+180<bo then LastMaxBrakeInAtmo=0 end;if aE then x=round(ResolutionX/2,0)y=round(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference end;LastStartTime=bo;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then P="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a7=5 end;bc=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;ao=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ap=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bp,bq)if bp>bq then bq=bp end;if ContainerOptimization>0 then bq=bq-bq*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bq=bq-bq*FuelTankOptimization*0.05 end;return bq end;function ProcessElements()local br=fuelX~=0 and fuelY~=0;for bl in pairs(ak)do local type=l(ak[bl])if type=="Landing Gear"then F=true end;if type=="Dynamic Core Unit"then local bs=h(ak[bl])if bs>10000 then aV=128 elseif bs>1000 then aV=64 elseif bs>150 then aV=32 end end;aL=aL+h(ak[bl])if br and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bs=h(ak[bl])local bt=m(ak[bl])local bp=0;local bu=system.getTime()if type=="Atmospheric Fuel Tank"then local bq=400;local bv=35.03;if bs>10000 then bq=51200;bv=5480 elseif bs>1300 then bq=6400;bv=988.67 elseif bs>150 then bq=1600;bv=182.67 end;bp=bt-bv;if fuelTankHandlingAtmo>0 then bq=bq+bq*fuelTankHandlingAtmo*0.2 end;bq=CalculateFuelVolume(bp,bq)aI[#aI+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end;if type=="Rocket Fuel Tank"then local bq=320;local bv=173.42;if bs>65000 then bq=40000;bv=25740 elseif bs>6000 then bq=5120;bv=4720 elseif bs>700 then bq=640;bv=886.72 end;bp=bt-bv;if fuelTankHandlingRocket>0 then bq=bq+bq*fuelTankHandlingRocket*0.1 end;bq=CalculateFuelVolume(bp,bq)aK[#aK+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end;if type=="Space Fuel Tank"then local bq=2400;local bv=182.67;if bs>10000 then bq=76800;bv=5480 elseif bs>1300 then bq=9600;bv=988.67 end;bp=bt-bv;if fuelTankHandlingSpace>0 then bq=bq+bq*fuelTankHandlingSpace*0.2 end;bq=CalculateFuelVolume(bp,bq)aJ[#aJ+1]={ak[bl],core.getElementNameById(ak[bl]),bq,bv,bp,bu}end end end end;function SetupChecks()if gyro~=nil then am=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then Y=true else Z=true end end;local bw=j()if door and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(door)do bm.toggle()end end;if switch then for _,bm in pairs(switch)do bm.toggle()end end;if forcefield and(bw>0 or bw==0 and aj<10000)then for _,bm in pairs(forcefield)do bm.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if F then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bx=AboveGroundLevel()if bx~=-1 or not ai and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not F then GearExtended=true end else BrakeIsOn=false end;if bd~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bd)if bd==0 and not F then GearExtended=true;BrakeIsOn=true end else bd=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ai and bx~=-1 then b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ai end;function ConvertResolutionX(bm)if ResolutionX==1920 then return bm else return round(ResolutionX*bm/1920,0)end end;function ConvertResolutionY(bm)if ResolutionY==1080 then return bm else return round(ResolutionY*bm/1080,0)end end;function RefreshLastMaxBrake(by,bz)if by==nil then by=core.g()end;by=round(by,5)local bA=j()if bz~=nil and bz or(aH==nil or aH~=by)then local ba=core.getVelocity()local bB=vec3(ba):len()local bC=f(unit.getData()).maxBrake;if bC~=nil and bC>0 and ai then bC=bC/utils.clamp(bB/100,0.1,1)bC=bC/bA;if bA>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bC)/2 else LastMaxBrakeInAtmo=bC end end end;if bC~=nil and bC>0 then LastMaxBrake=bC end;aH=by end end;function MakeButton(bD,bE,bF,bG,bH,bI,bJ,bK,bL)local bM={enableName=bD,disableName=bE,width=bF,height=bG,x=bH,y=bI,toggleVar=bJ,toggleFunction=bK,drawCondition=bL,hovered=false}table.insert(av,bM)return bM end;function UpdateAtlasLocationsList()AtlasOrdered={}for bl,bm in pairs(aX[0])do table.insert(AtlasOrdered,{name=bm.name,index=bl})end;local function bN(bO,bP)return bO.name<bP.name end;table.sort(AtlasOrdered,bN)end;function AddLocationsToAtlas()for bl,bm in pairs(SavedLocations)do table.insert(aX[0],bm)end;UpdateAtlasLocationsList()end;function float_eq(bQ,bR)if bQ==0 then return math.abs(bR)<1e-09 end;if bR==0 then return math.abs(bQ)<1e-09 end;return math.abs(bQ-bR)<math.max(math.abs(bQ),math.abs(bR))*epsilon end;function zeroConvertToMapPosition(bS,bT)local bU=vec3(bT)if bS.bodyId==0 then return setmetatable({latitude=bU.x,longitude=bU.y,altitude=bU.z,bodyId=0,systemId=bS.planetarySystemId},MapPosition)end;local bV=bU-bS.center;local a8=bV:len()local bW=a8-bS.radius;local bX=0;local bY=0;if not float_eq(a8,0)then local bZ=math.atan(bV.y,bV.x)bY=bZ>=0 and bZ or 2*math.pi+bZ;bX=math.pi/2-math.acos(bV.z/a8)end;return setmetatable({latitude=math.deg(bX),longitude=math.deg(bY),altitude=bW,bodyId=bS.bodyId,systemId=bS.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(b_)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local c0='::pos{'..p..','..p..','..p..','..p..','..p..'}'local c1,c2,bX,bY,bW=string.match(b_,c0)if c1=="0"and c2=="0"then return vec3(tonumber(bX),tonumber(bY),tonumber(bW))end;bY=math.rad(bY)bX=math.rad(bX)local planet=aX[tonumber(c1)][tonumber(c2)]local c3=math.cos(bX)local c4=vec3(c3*math.cos(bY),c3*math.sin(bY),math.sin(bX))return planet.center+(planet.radius+bW)*c4 end;function AddNewLocationByWaypoint(c5,planet,b_)if dbHud_1 then local c6={}local position=zeroConvertToWorldCoordinates(b_)if planet.name=="Space"then c6={position=position,name=c5,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bw=false;if planet.hasAtmosphere then bw=true else bw=false end;c6={position=position,name=c5,atmosphere=bw,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=c6;table.insert(aX[0],c6)UpdateAtlasLocationsList()else P="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local c7=planet.name..". "..#SavedLocations;if radar_1 then local c8,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if c8~=nil and c8~=""then c7=c7 .." "..radar_1.getConstructName(c8)end end;local c6={}local bw=false;if planet.hasAtmosphere then bw=true end;c6={position=position,name=c7,atmosphere=bw,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=c6;table.insert(aX[0],c6)UpdateAtlasLocationsList()P="Location saved as "..c7 else P="Databank must be installed to save locations"end end;function UpdatePosition(c9)local ca=-1;local c6;for bl,bm in pairs(SavedLocations)do if bm.name and bm.name==CustomTarget.name then ca=bl;break end end;if ca~=-1 then local cb;if c9~=nil then c6={position=SavedLocations[ca].position,name=c9,atmosphere=SavedLocations[ca].atmosphere,planetname=SavedLocations[ca].planetname,gravity=SavedLocations[ca].gravity}else c6={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ca].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ca]=c6;ca=-1;for bl,bm in pairs(aX[0])do if bm.name and bm.name==CustomTarget.name then ca=bl end end;if ca>-1 then aX[0][ca]=c6 end;UpdateAtlasLocationsList()P=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else P="Name Not Found"end end;function ClearCurrentPosition()local ca=-1;for bl,bm in pairs(aX[0])do if bm.name and bm.name==CustomTarget.name then ca=bl end end;if ca>-1 then table.remove(aX[0],ca)end;ca=-1;for bl,bm in pairs(SavedLocations)do if bm.name and bm.name==CustomTarget.name then P=bm.name.." saved location cleared"ca=bl;break end end;if ca~=-1 then table.remove(SavedLocations,ca)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cc)cc[#cc+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ab==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ab==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ab=0 end end;function ToggleWidgets()if au then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;au=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;au=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ai then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cd,ce,bH,bI,bF,bG)if cd>bH and cd<bH+bF and ce>bI and ce<bI+bG then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and bb>B then P="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)s=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=aj+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local cf=vec3(core.getConstructWorldOrientationForward())local cg=vec3(core.getConstructWorldOrientationRight())local ch=vec3(core.getWorldVertical())local ci=getPitch(ch,cf,cg)LockPitch=ci;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bo=system.getTime()if bo-bj<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bj=-1;if AltitudeHold then return end end else bj=bo end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;N=false;BrakeLanding=false;Reentry=false;b8=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ai or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bj>-1 then HoldAltitude=aj end;if not ad and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bj>-1 then HoldAltitude=aj+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ad then HoldAltitude=100000 end else b8=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then N=not N;if N then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else P="Follow Mode only works with Remote controller"N=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ad then local cj=zeroConvertToMapPosition(a0,AutopilotTargetCoords)cj="::pos{"..cj.systemId..","..cj.bodyId..","..cj.latitude..","..cj.longitude..","..cj.altitude.."}"system.setWaypoint(cj)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and bb>B then P="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if aj>100000 or aj==0 then Autopilot=true else ac=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ad=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;N=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;z=false;LockPitch=nil else ad=true;ToggleAltitudeHold()end else ad=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;z=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aj end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;N=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b8=autoRollPreference end end;function CheckDamage(cc)local ck=0;at=""local cl=aL;local cm=0;local cn=0;local co=0;local cp=0;local cq=""for bl in pairs(ak)do local bs=0;local cr=0;cr=h(ak[bl])bs=k(ak[bl])cm=cm+bs;if bs<cr then if bs==0 then co=co+1 else cn=cn+1 end;if aM and#aq==0 then position=vec3(core.getElementPositionById(ak[bl]))local bH=position.x-aV;local bI=position.y-aV;local cs=position.z-aV;table.insert(aq,core.spawnArrowSticker(bH,bI,cs+1,"down"))table.insert(aq,core.spawnArrowSticker(bH,bI,cs+1,"down"))core.rotateSticker(aq[2],0,0,90)table.insert(aq,core.spawnArrowSticker(bH+1,bI,cs,"north"))table.insert(aq,core.spawnArrowSticker(bH+1,bI,cs,"north"))core.rotateSticker(aq[4],90,90,0)table.insert(aq,core.spawnArrowSticker(bH-1,bI,cs,"south"))table.insert(aq,core.spawnArrowSticker(bH-1,bI,cs,"south"))core.rotateSticker(aq[6],90,-90,0)table.insert(aq,core.spawnArrowSticker(bH,bI-1,cs,"east"))table.insert(aq,core.spawnArrowSticker(bH,bI-1,cs,"east"))core.rotateSticker(aq[8],90,0,90)table.insert(aq,core.spawnArrowSticker(bH,bI+1,cs,"west"))table.insert(aq,core.spawnArrowSticker(bH,bI+1,cs,"west"))core.rotateSticker(aq[10],-90,0,90)table.insert(aq,ak[bl])end elseif aM and#aq>0 and aq[11]==ak[bl]then for ct in pairs(aq)do core.deleteSticker(aq[ct])end;aq={}end end;ck=d(cm/cl*100)if ck<100 then cc[#cc+1]=[[<g class="pbright txt">]]cp=d(ck*2.55)cq=e("rgb(%d,%d,%d)",255-cp,cp,0)if ck<100 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cq,ck)if co>0 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cq,co,cn)elseif cn>0 then cc[#cc+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cq,cn)end end;cc[#cc+1]=[[<\g>]]end end;function DrawCursorLine(cc)local cu=d(utils.clamp(a8/(ay/4)*255,0,255))cc[#cc+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a5,a6,d(PrimaryR+0.5)+cu,d(PrimaryG+0.5)-cu,d(PrimaryB+0.5)-cu)end;function getPitch(cv,cw,bP)local cx=cv:cross(bP):normalize_inplace()local ci=math.acos(utils.clamp(cx:dot(-cw),-1,1))*constants.rad2deg;if cx:cross(-cw):dot(bP)<0 then ci=-ci end;return ci end;local cy=math.atan;local function cz(cA,cB,cC)return cy(cB:cross(cC):dot(cA),cB:dot(cC))end;function clearAll()if ag then ag=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;N=false;z=false;ac=false;ad=false;C=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;am=false;LockPitch=nil else ag=true end end;function wipeSaveVariables()if not dbHud_1 then P="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a7=5 else if aF then for bl,bm in pairs(a)do dbHud_1.setStringValue(bm,g(nil))end;for bl,bm in pairs(b)do if bm~="SavedLocations"then dbHud_1.setStringValue(bm,g(nil))end end;P="Databank wiped. New variables will save after re-enter seat and exit"a7=5;aF=false;aE=false;a3=true else P="Press ALT-7 again to confirm wipe of ALL data"aF=true end end end;function CheckButtons()for _,bm in pairs(av)do if bm.hovered then if not bm.drawCondition or bm.drawCondition()then bm.toggleFunction()end;bm.hovered=false end end end;function SetButtonContains()local bH=a5+ay/2;local bI=a6+az/2;for _,bm in pairs(av)do bm.hovered=Contains(bH,bI,bm.x,bm.y,bm.width,bm.height)end end;function DrawButton(cc,cD,hover,bH,bI,cE,cF,cG,cH,cI,cJ)if type(cI)=="function"then cI=cI()end;if type(cJ)=="function"then cJ=cJ()end;cc[#cc+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bH,bI,cE,cF)if cD then cc[#cc+1]=e("%s'",cG)else cc[#cc+1]=cH end;if hover then cc[#cc+1]=" style='stroke:white; stroke-width:2'"else cc[#cc+1]=" style='stroke:black; stroke-width:1'"end;cc[#cc+1]="></rect>"cc[#cc+1]=e("<text x='%f' y='%f' font-size='24' fill='",bH+cE/2,bI+cF/2+5)if cD then cc[#cc+1]="black"else cc[#cc+1]="white"end;cc[#cc+1]="' text-anchor='middle' font-family='Montserrat'>"if cD then cc[#cc+1]=e("%s</text>",cI)else cc[#cc+1]=e("%s</text>",cJ)end end;function DrawButtons(cc)local cK="rgb(50,50,50)'"local cL="rgb(210,200,200)"local cM=DrawButton;for _,bm in pairs(av)do local bE=bm.disableName;local bD=bm.enableName;if type(bE)=="function"then bE=bE()end;if type(bD)=="function"then bD=bD()end;if not bm.drawCondition or bm.drawCondition()then cM(cc,bm.toggleVar(),bm.hovered,bm.x,bm.y,bm.width,bm.height,cL,cK,bE,bD)end end end;function DrawTank(cc,aU,bH,cN,cO,cP,cQ,cR)local cS=1;local cT=2;local cU=3;local cV=4;local cW=5;local cX=6;local cY=""local cZ=0;local c_=fuelY;local d0=fuelY+10;if o()==1 and not RemoteHud then c_=c_-50;d0=d0-50 end;cc[#cc+1]=[[<g class="pdim txtfuel">]]if cO=="ATMO"then cY="atmofueltank"elseif cO=="SPACE"then cY="spacefueltank"else cY="rocketfueltank"end;cZ=_G[cY.."_size"]if#cP>0 then for i=1,#cP do local c7=string.sub(cP[i][cT],1,12)local d1=0;for ct=1,cZ do if cP[i][cT]==f(unit[cY.."_"..ct].getData()).name then d1=ct;break end end;if aU or cQ[i]==nil or cR[i]==nil then local d2=0;local d3=0;local d4=0;local d5=0;local bu=system.getTime()if d1~=0 then cR[i]=f(unit[cY.."_"..d1].getData()).percentage;cQ[i]=f(unit[cY.."_"..d1].getData()).timeLeft;if cQ[i]=="n/a"then cQ[i]=0 end else d4=m(cP[i][cS])-cP[i][cV]d2=cP[i][cU]cR[i]=d(0.5+d4*100/d2)d3=cP[i][cW]d5=cP[i][cX]if d3<=d4 then cQ[i]=0 else cQ[i]=d(0.5+d4/((d3-d4)/(bu-d5)))end;cP[i][cW]=d4;cP[i][cX]=bu end end;if c7==cN then c7=e("%s %d",cO,i)end;if d1==0 then c7=c7 .." *"end;local d6;if cQ[i]==0 then d6="n/a"else d6=FormatTimeString(cQ[i])end;if cR[i]~=nil then local cp=d(cR[i]*2.55)local cq=e("rgb(%d,%d,%d)",255-cp,cp,0)local d7=""if d6~="n/a"and cQ[i]<120 or cR[i]<5 then if aU then d7=[[class="red"]]end end;cc[#cc+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bH,c_,d7,c7,bH,d0,cq,cR[i],d6)c_=c_+30;d0=d0+30 end end end;cc[#cc+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(ba)ba=vec3(ba)local ci=-math.deg(math.atan(ba.y,ba.z))+180;ci=ci-90;if ci<0 then ci=360+ci end;if ci>180 then ci=-180+ci-180 end;return-ci end;function getRelativeYaw(ba)ba=vec3(ba)local d8=math.deg(math.atan(ba.y,ba.x))-90;if d8<-180 then d8=360+d8 end;return d8 end;function AlignToWorldVector(d9,da,db)if not ai or not bg or af~=-1 or bb<B then local dc=db;if dc==nil then dc=DampingMultiplier end;if da==nil then da=ax end;d9=vec3(d9):normalize()local dd=vec3(core.getConstructWorldOrientationForward())-d9;local de=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationRight())*aw;local df=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=de/2 end;if as==0 then as=df/2 end;if math.abs(de)<0.1 then I=I-de*2 else I=I-(de+(de-ar)*dc)end;if math.abs(df)<0.1 then H=H+df*2 else H=H+df+(df-as)*dc end;ar=de;as=df;if math.abs(de)<da and math.abs(df)<da then return true end;return false elseif bg and af==-1 then d9=vec3(core.getWorldVelocity())local dc=db;if dc==nil then dc=DampingMultiplier end;if da==nil then da=ax end;d9=vec3(d9):normalize()local dd=vec3(core.getConstructWorldOrientationForward())-d9;local de=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationRight())*aw;local df=-getMagnitudeInDirection(dd,core.getConstructWorldOrientationUp())*aw;if ar==0 then ar=de/2 end;if as==0 then as=df/2 end;if math.abs(de)<0.1 then I=I-de*5 else I=I-(de+(de-ar)*dc)end;if math.abs(df)<0.1 then H=H+df*5 else H=H+df+(df-as)*dc end;ar=de;as=df;if math.abs(de)<da and math.abs(df)<da then return true end;return false end end;function getAPEnableName()local c7=AutopilotTargetName;if c7==nil then local dg,dh=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())c7=CustomTarget.name.." "..dg..dh end;if c7==nil then c7="None"end;return"Engage Autopilot: "..c7 end;function getAPDisableName()local c7=AutopilotTargetName;if c7==nil then c7=CustomTarget.name end;if c7==nil then c7="None"end;return"Disable Autopilot: "..c7 end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aj end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then P="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then P="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a7=5 elseif not C then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then P="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;P="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;P="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local di=50;local dj=260;local dk=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dj,di,ay/2-dj/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then P="Brakes in Toggle Mode"else P="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dj,di,ay/2-dj/2-50-dk.width,az/2-di+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dj,di,ay/2-dj/2+dk.width+50,az/2-di+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dl=MakeButton(getAPEnableName,getAPDisableName,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dl.height,dl.x+dl.width+30,dl.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dl.height,dl.x+dl.width+30,dl.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dl.height,dl.x-200-30,dl.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)di=60;dj=300;local bH=10;local bI=az/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dj,di,bH,bI,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dj,di,bH+dj+20,bI,function()return AltitudeHold end,ToggleAltitudeHold)bI=bI+di+20;MakeButton("Engage Autoland","Disable Autoland",dj,di,bH,bI,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dj,di,bH+dj+20,bI,function()return AutoTakeoff end,ToggleAutoTakeoff)bI=bI+di+20;MakeButton("Show Orbit Display","Hide Orbit Display",dj,di,bH,bI,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then P="Orbit Display Enabled"else P="Orbit Display Disabled"end end)bI=bI+di+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dj,di,bH,bI,function()return Reentry end,function()C=true;BeginReentry()end,function()return aj>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dj,di,bH+dj+20,bI,function()return Reentry end,BeginReentry,function()return aj>ReentryAltitude end)bI=bI+di+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dj,di,bH,bI,function()return N end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dj,di,bH+dj+20,bI,function()return aM end,function()aM=not aM;if aM then P="Repair Arrows Enabled"else P="Repair Arrows Diabled"end end,function()return o()==1 end)bI=bI+di+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dj,di,bH,bI,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bI=bI+di+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dj*2,di,bH,bI,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dm=Nav.axisCommandManager:getAxisCommandType(0)local dn="TRAVEL"if dm==1 then dn="CRUISE"end;if Autopilot then dn="AUTOPILOT"end;return dn end;function UpdateHud(cc)local bW=aj;local ba=core.getVelocity()local bB=vec3(ba):len()local ch=vec3(core.getWorldVertical())local cf=vec3(core.getConstructWorldOrientationForward())local cg=vec3(core.getConstructWorldOrientationRight())local dp=vec3(core.getConstructWorldOrientationUp())local dq=getRoll(ch,cf,cg)local dr=dq/180*math.pi;local ds=math.cos(dr)local dt=math.sin(dr)local ci=getPitch(ch,cf,cg*ds+dp*dt)local du=dq;local dv=ci;local dw=j()local dx=d(unit.getThrottle())local dy=bB*3.6;local dz=unit.getAxisCommandValue(0)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dz=s;dx=s*100 end;local dn=GetFlightStyle()local dA="ROLL"local dB=unit.getClosestPlanetInfluence()>0;if dx==nil then dx=0 end;if not dB then if bB>5 then ci=getRelativePitch(ba)dq=getRelativeYaw(ba)else ci=0;dq=0 end;dA="YAW"end;cc[#cc+1]=aa;cc[#cc+1]=at;cc[#cc+1]=a9;if aW%aP==0 then aU=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cc,aU,fuelX,"Atmospheric ","ATMO",aI,aS,aT)DrawTank(cc,aU,fuelX+100,"Space fuel t","SPACE",aJ,aQ,aR)DrawTank(cc,aU,fuelX+200,"Rocket fuel ","ROCKET",aK,aN,aO)end;if aU then aU=false;aW=0 end;aW=aW+1;DrawVerticalSpeed(cc,bW)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dB then DrawRollLines(cc,centerX,centerY,du,dA,dB)DrawArtificialHorizon(cc,dv,du,centerX,centerY,dB,d(getRelativeYaw(ba)),bB)else DrawRollLines(cc,centerX,centerY,dq,dA,dB)DrawArtificialHorizon(cc,ci,dq,centerX,centerY,dB,d(dq),bB)end;DrawAltitudeDisplay(cc,bW,dB)DrawPrograde(cc,ba,bB,centerX,centerY)end end;DrawThrottle(cc,dn,dx,dz)DrawSpeed(cc,dy)DrawWarnings(cc)DisplayOrbitScreen(cc)if screen_2 then local b_=vec3(core.getConstructWorldPos())local bH=960+b_.x/aZ;local bI=450+b_.y/a_;screen_2.moveContent(b0,(bH-80)/19.2,(bI-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cc)local dC=ao;local dD=ap;local dE=ao;local dF=ap;if IsInFreeLook()and not brightHud then dC=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dD=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;cc[#cc+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dC,dC,dE,dE,dD,dD,dF,dF,ResolutionX,ResolutionY)end;function HUDEpilogue(cc)cc[#cc+1]="</svg>"end;function DrawSpeed(cc,dy)local dG=throtPosY-10;local dH=throtPosX+10;cc[#cc+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dG=75 end;cc[#cc+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dH,dG,d(dy))end;function DrawOdometer(cc,a1,TotalDistanceTravelled,dn,a2,dw)local dI=ConvertResolutionX(1240)local dJ=ConvertResolutionY(55)local dK=dJ+10;local dw=j()local by=core.g()local dL=0;local dM=0;local dN=0;RefreshLastMaxBrake(by)if ai then dN=LastMaxBrakeInAtmo else dN=LastMaxBrake end;maxThrust=Nav:maxForceForward()aG=n()if not ShowOdometer then return end;local dO=vec3(core.getWorldAcceleration()):len()/9.80665;if by>0.1 then dM=aG*by;dL=maxThrust/by end;cc[#cc+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dI=ConvertResolutionX(1120)dJ=ConvertResolutionY(55)dK=dJ+10 elseif ai then local dP=ConvertResolutionX(770)cc[#cc+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dP,dJ,dP,dK,dw)end;cc[#cc+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dI,dJ,dI,dK,by/9.80665,dI,dJ+20,dI,dK+20,dO)cc[#cc+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cc[#cc+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a1,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a2),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aG/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dN/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dn)if by>0.1 then cc[#cc+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dL/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dM/1000)else cc[#cc+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cc[#cc+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dn)end;cc[#cc+1]="</g>"end;function DrawThrottle(cc,dn,dx,dz)dx=math.floor(dx+0.5)local c_=throtPosY+10;local d0=throtPosY+20;if o()==1 and not RemoteHud then c_=55;d0=65 end;local dQ="CRUISE"local unit="km/h"local dR=dz;if dn=="TRAVEL"or dn=="AUTOPILOT"then dQ="THROT"unit="%"dR=dx;local dS="dim"if dx<0 then dS="red"end;cc[#cc+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dS,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dx),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cc[#cc+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,c_,dQ,throtPosX+10,d0,dR,unit)if ai and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and u then dx=math.floor(v*100+0.5)local dS="red"if dx<0 then dS="red"end;cc[#cc+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dS,1-math.abs(dx),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cc[#cc+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,c_+40,"LIMIT",throtPosX+10,d0+40,dx,"%")end end;function DrawVerticalSpeed(cc,bW)if bW<200000 and not ai or bW and ai then local dT=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dU=0;if math.abs(dT)>1 then dU=45*math.log(math.abs(dT),10)if dT<0 then dU=-dU end end;cc[#cc+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dT),d(dU))end end;function getHeading(cw)local dV=-vec3(core.getWorldVertical())cw=cw-cw:project_on(dV)local dW=vec3(0,0,1)dW=dW-dW:project_on(dV)local dX=dW:cross(dV)local dU=dW:angle_between(cw)*constants.rad2deg;if cw:dot(dX)<0 then dU=360-dU end;return dU end;function DrawRollLines(cc,centerX,centerY,du,dA,dB)local dY=circleRad;local dZ=20;dZ=d(dZ)local d_=d(du)if dB then for i=-45,45,5 do local e0=i;cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],e0,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cc[#cc+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dY+dZ-len,centerX,centerY+dY+dZ)end;cc[#cc+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dY+dZ-35,dA,centerX,centerY+dY+dZ-25,d_)cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],-du,centerX,centerY)cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dY+dZ-20,centerX+5,centerY+dY+dZ-20,centerX,centerY+dY+dZ-15)cc[#cc+1]="</g>"end;local d8=d_;if dB then d8=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local e1=20;local e2=d(d8)local e3=0;local e4=centerY+dY+dZ+20;local e5=centerX;if dA~="YAW"then e4=ConvertResolutionY(130)e5=ConvertResolutionX(960)end;local e6=[[<path class="txttick line" d="]]for i=d(e2-(e1+10)-e2%5+0.5),d(e2+e1+10+e2%5+0.5),5 do local bH=e5+-i*5+d8*5;if i%10==0 then e3=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cc[#cc+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bH+5,e4-12,p)elseif i%5==0 then e3=5 end;if e3==10 then e6=e([[%s M %f %f v %d]],e6,bH,e4-5,e3)else e6=e([[%s M %f %f v %d]],e6,bH,e4-2.5,e3)end end;cc[#cc+1]=e6 ..[["/>]]cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e5-5,e4+10,e5+5,e4+10,e5,e4+5)if dB then dA="HDG"end;cc[#cc+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],e5,e4+25,e2,e5,e4+35,dA)end;function DrawArtificialHorizon(cc,dv,du,centerX,centerY,dB,e7,bB)local dY=circleRad;local e8=d(dY*3/5)if dY>0 then local e9=d(dv)local len=0;local e6=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*du,centerX,centerY)if not ai then e6=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cc[#cc+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dY-1,centerX,centerY)cc[#cc+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(e9-30-e9%5+0.5),d(e9+30+e9%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bI=centerY+-i*5+dv*5;if len==30 then e6=e([[%s M %d %f h %d]],e6,centerX-e8-len,bI,len)if ai then cc[#cc+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*du,centerX,centerY,centerX-e8+10,bI,i)cc[#cc+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*du,centerX,centerY,centerX+e8-10,bI,i)if i==0 or i==180 or i==-180 then cc[#cc+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*du,centerX,centerY,centerX-e8+20,bI,e8*2-40)end else cc[#cc+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e8+10,bI,i)cc[#cc+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e8-10,bI,i)end;e6=e([[%s M %d %f h %d]],e6,centerX+e8,bI,len)else e6=e([[%s M %d %f h %d]],e6,centerX-e8-len,bI,len)e6=e([[%s M %d %f h %d]],e6,centerX+e8,bI,len)end end;cc[#cc+1]=e6 ..[["/>]]local ea="PITCH"if not dB then ea="REL PITCH"end;if dv>90 and not ai then dv=90-(dv-90)elseif dv<-90 and not ai then dv=-90-(dv+90)end;if dY>200 then if ai then if bB>B then cc[#cc+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e7)end;cc[#cc+1]=e([[<g transform="rotate(%f,%d,%d)">]],-du,centerX,centerY)else cc[#cc+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e8+25,centerY-5,centerX-e8+20,centerY,centerX-e8+25,centerY+5,centerX-e8+50,centerY+4,e9)cc[#cc+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e8-25,centerY-5,centerX+e8-20,centerY,centerX+e8-25,centerY+5,centerX+e8-30,centerY+4,e9)cc[#cc+1]="</g>"end;local eb=d(dY/3)cc[#cc+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eb,centerY,dY-eb)if not ai and dB then cc[#cc+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*du,centerX,centerY,centerX-e8+10,centerY,e8*2-20)end;cc[#cc+1]="</g>"if dY<200 then if ai and bB>B then cc[#cc+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dY,ea,centerX,centerY-dY+10,e9,centerX,centerY-15,"Yaw",centerX,centerY+20,e7)else cc[#cc+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dY,ea,centerX,centerY-dY+15,e9)end end end end;function DrawAltitudeDisplay(cc,bW,dB)local ec=altMeterX;local ed=altMeterY;local ee=78;local ef=19;local eg=AboveGroundLevel()if eg~=-1 then table.insert(cc,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],ec+ee,ed+ef+20,eg))end;if dB and(bW<200000 and not ai or bW and ai)then table.insert(cc,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],ec-1,ed-4,ee+2,ef+6,ec+1,ed-1,ee-4,ef))local ca=0;local eh=1;local ei=0;local ej=bW<0;local ek=9;if ej then ek=0 end;local bW=math.abs(bW)while ca<6 do local el=11;local em=16;local en=9;local eo=14;local d7="altsm"if ca>2 then em=em+3;el=el+2;eo=eo+2;en=en-6;d7="altbig"end;if ej then d7=d7 .." red"end;local ep=bW/eh%10;local eq=d(ep)local er=d((eq+1)%10)local es=ei;if ca==0 then es=ep-eq;if ej then es=1-es end end;if ej and(ca==0 or ei~=0)then local et=er;er=eq;eq=et end;local eu=em*(es-1)local ev=eu+em;local bH=ec+en+(6-ca)*el;local bI=ed+eo;table.insert(cc,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],d7,bH,bI+eu,er,bH,bI+ev,eq))ca=ca+1;eh=eh*10;if eq==ek then ei=es else ei=0 end end;table.insert(cc,[[</g></g>]])end end;function DrawPrograde(cc,ba,bB,centerX,centerY)if bB>5 and not ai or bB>B then local dY=circleRad;local ew=20;local ex=20;local ey=vec3(ba)local ez=getRelativePitch(ey)local eA=getRelativeYaw(ey)local eB=14;local eC=eB/2;local eD=-eA/ex*dY;local eE=ez/ew*dY;local bH=centerX+eD;local bI=centerY+eE;local a8=math.sqrt(eD^2+eE^2)local eF=[[<circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eC/eB..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bH..[["
                cy="]]..bI..[["
                r="]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bH-eB..[[,]]..bI..[[ h ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH+eC..[[,]]..bI..[[ h ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bH..[[,]]..bI-eB..[[ v ]]..eC..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a8<dY then cc[#cc+1]=eF else local dU=math.atan(eE,eD)local eG=4;local eH=centerX+dY*math.cos(dU)local eI=centerY+dY*math.sin(dU)cc[#cc+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dU*180/math.pi,eH,eI,eH-eG,eI-eG/2,eG*2,eG,eH+eG,eI-eG,eG,eG,-eG,eG)end;if not ai then ez=getRelativePitch(-ey)eA=getRelativeYaw(-ey)eD=-eA/ex*dY;eE=ez/ew*dY;bH=centerX+eD;bI=centerY+eE;a8=math.sqrt(eD^2+eE^2)if a8<dY then local eJ=[[<circle
                        cx="]]..bH..[["
                        cy="]]..bI..[["
                        r="]]..eC..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bH..[[,]]..bI-eB..[[ v ]]..eC..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bH..[[,]]..bI..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bH..[[,]]..bI..[[)" />
                     <path
                        d="M ]]..bH-eC..[[,]]..bI..[[ h ]]..eB..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bH..[[,]]..bI..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bC..[[,]]..bD..[[)"/>]]c7[#c7+1]=eE end end end end;function DrawWarnings(c7)c7[#c7+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)c7[#c7+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then c7[#c7+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))c7[#c7+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))c7[#c7+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eF=ConvertResolutionX(960)local eG=ConvertResolutionY(860)local eH=ConvertResolutionY(880)local eI=ConvertResolutionY(900)local eJ=ConvertResolutionY(960)local eK=ConvertResolutionY(200)local eL=ConvertResolutionY(150)local eM=ConvertResolutionY(960)if o()==1 and not RemoteHud then eG=ConvertResolutionY(135)eH=ConvertResolutionY(155)eI=ConvertResolutionY(175)eK=ConvertResolutionY(115)eL=ConvertResolutionY(95)end;if BrakeIsOn then c7[#c7+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eF,eG)elseif brakeInput2>0 then c7[#c7+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eF,eG,brakeInput2)end;if ad and bb and hoverDetectGround()==-1 then c7[#c7+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eF,eK+50)end;if ah then c7[#c7+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eF,eM)end;if GearExtended then if A then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eF,eH)else c7[#c7+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eF,eH)end;local db,dc=getDistanceDisplayString(Nav:getTargetGroundAltitude())c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eF,eI,db..dc)end;if O then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eF,eJ+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eF,eK+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else c7[#c7+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eF,eK+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eF,eK+20,AutopilotStatus)elseif LockPitch~=nil then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eF,eK+20,d(LockPitch))elseif I then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eF,eK+20)elseif Reentry then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eF,eK+20)end;if AltitudeHold then if AutoTakeoff then local db,dc=getDistanceDisplayString(HoldAltitude)c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eF,eK,db..dc)if BrakeIsOn then c7[#c7+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eF,eK+50)end else local db,dc=getDistanceDisplayString2(HoldAltitude)c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eF,eK,db..dc)end end;if BrakeLanding then if StrongBrakes then c7[#c7+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eF,eK)else c7[#c7+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eF,eK)end end;if ProgradeIsOn then c7[#c7+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eF,eK)end;if RetrogradeIsOn then c7[#c7+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eF,eK)end;if TurnBurn then c7[#c7+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eF,eL)end;if VectorToTarget then c7[#c7+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eF,eK+30,VectorStatus)end;c7[#c7+1]="</g>"end;function DisplayOrbitScreen(c7)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local eN=OrbitMapX;local eO=OrbitMapY;local eP=OrbitMapSize;local eQ=4;eO=eO+eQ;local eR=15;local bC=eN+eP+eN/2+eQ;local bD=eO+eP/2+5+eQ;local eS,eT,eU,eV;eS=eP/4;eV=0;c7[#c7+1]=[[<g class="pbright txtorb txtmid">]]c7[#c7+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eP+eN*2,eP+eO,eQ,eQ)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eU=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eS*2)eT=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eU*(1-orbit.eccentricity)eV=eS-orbit.periapsis.altitude/eU-planet.radius/eU;local eW=""if orbit.periapsis.altitude<=0 then eW='redout'end;c7[#c7+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eW,eN+eP/2+eV+eQ,eO+eP/2+eQ,eS,eT)c7[#c7+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',eN+eP/2+eQ,eO+eP/2+eQ,planet.radius/eU)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then c7[#c7+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bC-35,bD-5,eN+eP/2+eS+eV,bD-5)c7[#c7+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bC,bD)bD=bD+eR;local db,dc=getDistanceDisplayString(orbit.apoapsis.altitude)c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,db..dc)bD=bD+eR;c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,FormatTimeString(orbit.timeToApoapsis))bD=bD+eR;c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,getSpeedDisplayString(orbit.apoapsis.speed))end;bD=eO+eP/2+5+eQ;bC=eN-eN/2+10+eQ;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then c7[#c7+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bC+35,bD-5,eN+eP/2-eS+eV,bD-5)c7[#c7+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bC,bD)bD=bD+eR;local db,dc=getDistanceDisplayString(orbit.periapsis.altitude)c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,db..dc)bD=bD+eR;c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,FormatTimeString(orbit.timeToPeriapsis))bD=bD+eR;c7[#c7+1]=e([[<text x="%f" y="%f">%s</text>]],bC,bD,getSpeedDisplayString(orbit.periapsis.speed))end;c7[#c7+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],eN+eP/2+eQ,20+eQ,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eX=orbit.timeToApoapsis/orbit.period*2*math.pi;local eY=eS*math.cos(eX)local eZ=eT*math.sin(eX)c7[#c7+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',eN+eP/2+eY+eV+eQ,eO+eP/2+eZ+eQ)end;c7[#c7+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local e_=a3>100000;local bi,dc=""if e_ then bi,dc=round(a3/1000/200,1),"SU"elseif a3<1000 then bi,dc=round(a3,1),"m"else bi,dc=round(a3/1000,1),"Km"end;return bi,dc end;function getDistanceDisplayString2(a3)local e_=a3>100000;local bi,dc=""if e_ then bi,dc=round(a3/1000/200,2)," SU"elseif a3<1000 then bi,dc=round(a3,2)," M"else bi,dc=round(a3/1000,2)," KM"end;return bi,dc end;function getSpeedDisplayString(bw)return d(round(bw*3.6,0)+0.5).." km/h"end;function FormatTimeString(f0)local f1=0;local f2=0;local f3=0;if f0<60 then f0=d(f0)elseif f0<3600 then f1=d(f0/60)f0=d(f0%60)elseif f0<86400 then f2=d(f0/3600)f1=d(f0%3600/60)else f3=d(f0/86400)f2=d(f0%86400/3600)end;if f3>0 then return f3 .."d "..f2 .."h "elseif f2>0 then return f2 .."h "..f1 .."m "elseif f1>0 then return f1 .."m "..f0 .."s"elseif f0>0 then return f0 .."s"else return"0s"end end;function getMagnitudeInDirection(d4,f4)d4=vec3(d4)f4=vec3(f4):normalize()local bi=d4*f4;return bi.x+bi.y+bi.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local f5=AtlasOrdered[AutopilotTargetIndex].index;local f6=aS[0][f5]if f6.center then AutopilotTargetName=f6.name;V=aY[0][f5]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=f6;for _,bh in pairs(aY[0])do if bh.name==CustomTarget.planetname then V=bh;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if V.name~="Space"then if V.hasAtmosphere then AutopilotTargetOrbit=math.floor(V.radius*(TargetOrbitRadius-1)+V.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(V.radius*(TargetOrbitRadius-1)+V.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f7=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return f7 end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local bw=vec3(b5):len()local f8,f9=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fa;if not TurnBurn and bw>0 then _,fa=GetAutopilotBrakeDistanceAndTime(bw)else _,fa=GetAutopilotTBBrakeDistanceAndTime(bw)end;local fb=0;local fc=0;if AutopilotCruising or not Autopilot and bw>5 then fc=aZ.computeTravelTime(bw,0,AutopilotDistance)elseif P+f8<AutopilotDistance then fb=AutopilotDistance-(P+f8)fc=aZ.computeTravelTime(8333.0556,0,fb)else local fd=(AutopilotDistance-P)/f8;f8=AutopilotDistance-P;f9=f9*fd end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fc elseif AutopilotBraking then return fa elseif AutopilotCruising then return fc+fa else return f9+Q+fc end end;function GetAutopilotBrakeDistanceAndTime(bw)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bw,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bw,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bw)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bw,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fe=-1;local ff=-1;if vBooster then fe=vBooster.distance()end;if hover then ff=hover.distance()end;if fe~=-1 and ff~=-1 then if fe<ff then return fe else return ff end elseif fe~=-1 then return fe elseif ff~=-1 then return ff else return-1 end end;function AboveGroundLevel()local fg=-1;local fh=hoverDetectGround()if telemeter_1 then fg=telemeter_1.getDistance()end;if fh~=-1 and fg~=-1 then if fh<fg then return fh else return fg end elseif fh~=-1 then return fh else return fg end end;function tablelength(fi)local fj=0;for _ in pairs(fi)do fj=fj+1 end;return fj end;function BeginProfile(fk)ProfileTimeStart=system.getTime()end;function EndProfile(fk)local fl=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fl;ProfileCount=ProfileCount+1;if fl>ProfileTimeMax then ProfileTimeMax=fl end;if fl<ProfileTimeMin then ProfileTimeMin=fl end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fm=ProfileTimeSum;local fn=ProfileTimeSum/ProfileCount;local fo=ProfileTimeMin;local fp=ProfileTimeMax;local fq=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fm,fn,fo,fp,fq))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fr=radar_1.getEntries()local fs=radar_1.getData()local ft=ConvertResolutionX(1770)local fu=ConvertResolutionY(330)if#fr>0 then local fv=fs:find('identifiedConstructs":%[%]')if fv==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fv~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],ft,fu,#fr)local fw={}for bg,bh in pairs(fr)do if radar_1.hasMatchingTransponder(bh)==1 then table.insert(fw,bh)end end;if#fw>0 then local bD=ConvertResolutionY(15)local bC=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bC,bD)for bg,bh in pairs(fw)do bD=bD+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bC,bD,radar_1.getConstructName(bh))end end else local fx;fx=fs:find('worksInEnvironment":false')if fx then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],ft,fu)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],ft,fu)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(c7,db)if db~="empty"then c7[#c7+1]=[[<text class="msg" x="50%%" y="310" >]]for fy in string.gmatch(db,"([^\n]+)")do c7[#c7+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fy)end;c7[#c7+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bp=system.getTime()local b5=vec3(core.getWorldVelocity())local dt=vec3(b5):len()local fz=bp-ag;if dt>1.38889 then dt=dt/1000;local fA=dt*(bp-ag)TotalDistanceTravelled=TotalDistanceTravelled+fA;W=W+fA end;X=X+fz;TotalFlightTime=TotalFlightTime+fz;ag=bp end;function composeAxisAccelerationFromTargetSpeed(fB,fC)local fD=vec3()local fE=vec3()if fB==axisCommandId.longitudinal then fD=vec3(core.getConstructOrientationForward())fE=vec3(core.getConstructWorldOrientationForward())elseif fB==axisCommandId.vertical then fD=vec3(core.getConstructOrientationUp())fE=vec3(core.getConstructWorldOrientationUp())elseif fB==axisCommandId.lateral then fD=vec3(core.getConstructOrientationRight())fE=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local fF=vec3(core.getWorldGravity())local fG=fF:dot(fE)local fH=vec3(core.getWorldAirFrictionAcceleration())local fI=fH:dot(fE)local fJ=vec3(core.getVelocity())local fK=fJ:dot(fD)local fL=fC*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(1,0,10.0)end;targetSpeedPID:inject(fL-fK)local fM=targetSpeedPID:get()local fN=(fM-fI-fG)*fE;return fN end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for bg,bh in pairs(aS[0])do if av==nil or bh.center.x<av then av=bh.center.x end;if aw==nil or bh.center.x>aw then aw=bh.center.x end;if ax==nil or bh.center.y<ax then ax=bh.center.y end;if ay==nil or bh.center.y>ay then ay=bh.center.y end end;aT=""local fO=1.1*(aw-av)/1920;local fP=1.4*(ay-ax)/1080;for bg,bh in pairs(aS[0])do local bC=960+bh.center.x/fO;local bD=540+bh.center.y/fP;aT=aT..'<circle cx="'..bC..'" cy="'..bD..'" r="'..bh.radius/fO*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bh.name,"Moon")and not string.match(bh.name,"Sanctuary")and not string.match(bh.name,"Space")then aT=aT.."<text x='"..bC.."' y='"..bD+bh.radius/fO*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bh.name.."</text>"end end;local bV=vec3(core.getConstructWorldPos())local bC=960+bV.x/fO;local bD=540+bV.y/fP;aT=aT..'<circle cx="'..bC..'" cy="'..bD..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bC.."' y='"..bD-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fO;aV=fP;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bV=vec3(core.getConstructWorldPos())local bC=960+bV.x/fO;local bD=540+bV.y/fP;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bC-80)/19.20,(bD-80)/10.80,aT)end end;function PlanetRef()local function fQ(fR)return type(fR)=='number'end;local function fS(fR)return type(tonumber(fR))=='number'end;local function fT(fU)return type(fU)=='table'end;local function fV(fW)return type(fW)=='string'end;local function fX(bh)return fT(bh)and fQ(bh.x and bh.y and bh.z)end;local function fY(fZ)return fT(fZ)and fQ(fZ.latitude and fZ.longitude and fZ.altitude and fZ.bodyId and fZ.systemId)end;local f_=math.pi/180;local g0=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bW='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local g1=utils.clamp;local function float_eq(bL,bM)if bL==0 then return math.abs(bM)<1e-09 end;if bM==0 then return math.abs(bL)<1e-09 end;return math.abs(bL-bM)<math.max(math.abs(bL),math.abs(bM))*epsilon end;local function g2(fR)local bi=string.gsub(string.reverse(e('%.4f',fR)),'^0*%.?','')return bi==''and'0'or string.reverse(bi)end;local function g3(g4)if fX(g4)then return e('{x=%.3f,y=%.3f,z=%.3f}',g4.x,g4.y,g4.z)end;if fT(g4)and not getmetatable(g4)then local g5={}local g6=next(g4)if type(g6)=='nil'or g6==1 then g5=g4 else for bg,bh in pairs(g4)do local dM=g3(bh)if type(bg)=='number'then table.insert(g5,e('[%s]=%s',bg,dM))else table.insert(g5,e('%s=%s',bg,dM))end end end;return e('{%s}',table.concat(g5,','))end;if fV(g4)then return e("'%s'",g4:gsub("'",[[\']]))end;return tostring(g4)end;local g7={}g7.__index=g7;g7.__tostring=function(g4,g8)local g9={}for bg in pairs(g4)do table.insert(g9,bg)end;table.sort(g9)local g5={}for _,bg in ipairs(g9)do local dM=g3(g4[bg])if type(bg)=='number'then table.insert(g5,e('[%s]=%s',bg,dM))else table.insert(g5,e('%s=%s',bg,dM))end end;if g8 then return e('%s%s',g8,table.concat(g5,',\n'..g8))end;return e('{%s}',table.concat(g5,','))end;g7.__eq=function(ga,gb)return ga.planetarySystemId==gb.planetarySystemId and ga.bodyId==gb.bodyId and float_eq(ga.radius,gb.radius)and float_eq(ga.center.x,gb.center.x)and float_eq(ga.center.y,gb.center.y)and float_eq(ga.center.z,gb.center.z)and float_eq(ga.GM,gb.GM)end;local function gc(bX,bY,gd,bO,ge)assert(fS(bX),'Argument 1 (planetarySystemId) must be a number:'..type(bX))assert(fS(bY),'Argument 2 (bodyId) must be a number:'..type(bY))assert(fS(gd),'Argument 3 (radius) must be a number:'..type(gd))assert(fT(bO),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bO))assert(fS(ge),'Argument 5 (GM) must be a number:'..type(ge))return setmetatable({planetarySystemId=tonumber(bX),bodyId=tonumber(bY),radius=tonumber(gd),center=vec3(bO),GM=tonumber(ge)},g7)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gf)return e('::pos{%d,%d,%s,%s,%s}',gf.systemId,gf.bodyId,g2(gf.latitude*g0),g2(gf.longitude*g0),g2(gf.altitude))end;MapPosition.__eq=function(ga,gb)return ga.bodyId==gb.bodyId and ga.systemId==gb.systemId and float_eq(ga.latitude,gb.latitude)and float_eq(ga.altitude,gb.altitude)and(float_eq(ga.longitude,gb.longitude)or float_eq(ga.latitude,math.pi/2)or float_eq(ga.latitude,-math.pi/2))end;local function gg(gh,bY,bS,bT,bR)local bX=gh;if fV(gh)and not bT and not bR and not bY and not bS then bX,bY,bS,bT,bR=string.match(gh,bW)assert(bX,'Argument 1 (position string) is malformed.')else assert(fS(bX),'Argument 1 (systemId) must be a number:'..type(bX))assert(fS(bY),'Argument 2 (bodyId) must be a number:'..type(bY))assert(fS(bS),'Argument 3 (latitude) must be in degrees:'..type(bS))assert(fS(bT),'Argument 4 (longitude) must be in degrees:'..type(bT))assert(fS(bR),'Argument 5 (altitude) must be in meters:'..type(bR))end;bX=tonumber(bX)bY=tonumber(bY)bS=tonumber(bS)bT=tonumber(bT)bR=tonumber(bR)if bY==0 then return setmetatable({latitude=bS,longitude=bT,altitude=bR,bodyId=bY,systemId=bX},MapPosition)end;return setmetatable({latitude=f_*g1(bS,-90,90),longitude=f_*(bT%360),altitude=bR,bodyId=bY,systemId=bX},MapPosition)end;local gi={}gi.__index=gi;gi.__tostring=function(g4,g8)local gj=g8 and g8 ..'  'local gk={}local g9={}for bg in pairs(g4)do table.insert(g9,bg)end;table.sort(g9)for _,gl in ipairs(g9)do bdy=g4[gl]local gm=g7.__tostring(bdy,gj)if g8 then table.insert(gk,e('[%s]={\n%s\n%s}',gl,gm,g8))else table.insert(gk,e('  [%s]=%s',gl,gm))end end;if g8 then return e('\n%s%s%s',g8,table.concat(gk,',\n'..g8),g8)end;return e('{\n%s\n}',table.concat(gk,',\n'))end;local function gn(go)local aS={}local pid;for _,bh in pairs(go)do local c3=bh.planetarySystemId;if type(c3)~='number'then error('Invalid planetary system ID: '..tostring(c3))elseif pid and c3~=pid then error('Mismatch planetary system IDs: '..c3 ..' and '..pid)end;local gp=bh.bodyId;if type(gp)~='number'then error('Invalid body ID: '..tostring(gp))elseif aS[gp]then error('Duplicate body ID: '..tostring(gp))end;setmetatable(bh.center,getmetatable(vec3.unit_x))aS[gp]=setmetatable(bh,g7)pid=c3 end;return setmetatable(aS,gi)end;aX={}local function gq(go)return setmetatable({galaxyAtlas=go or{}},aX)end;aX.__index=function(fU,i)if type(i)=='number'then local system=fU.galaxyAtlas[i]return gn(system)end;return rawget(aX,i)end;aX.__pairs=function(g4)return function(fU,bg)local gr,nv=next(fU,bg)return gr,nv and gn(nv)end,g4.galaxyAtlas,nil end;aX.__tostring=function(g4)local gs={}for _,gt in pairs(g4 or{})do local gu=gt:getPlanetarySystemId()local gv=gi.__tostring(gt,'    ')table.insert(gs,e('  [%s]={%s\n  }',gu,gv))end;return e('{\n%s\n}\n',table.concat(gs,',\n'))end;aX.BodyParameters=gc;aX.MapPosition=gg;aX.PlanetarySystem=gn;function aX.createBodyParameters(gw,bY,gx,gy,gz,gA,gB)assert(fS(gw),'Argument 1 (planetarySystemId) must be a number:'..type(gw))assert(fS(bY),'Argument 2 (bodyId) must be a number:'..type(bY))assert(fS(gx),'Argument 3 (surfaceArea) must be a number:'..type(gx))assert(fT(gy),'Argument 4 (aPosition) must be an array or vec3:'..type(gy))assert(fT(gz),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gz))assert(fS(gA),'Argument 6 (altitude) must be in meters:'..type(gA))assert(fS(gB),'Argument 7 (gravityAtPosition) must be number:'..type(gB))local gd=math.sqrt(gx/4/math.pi)local a3=gd+gA;local gC=vec3(gy)+a3*vec3(gz)local ge=gB*a3*a3;return gc(gw,bY,gd,gC,ge)end;aX.isMapPosition=fY;function aX:getPlanetarySystem(gh)if i==nil then i=0 end;if nv==nil then nv=0 end;local gw=gh;if fY(gh)then gw=gh.systemId end;if type(gw)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gi then system=gn(system)end;return system end end end;function gi:castIntersections(gD,f4,gE,gF)local gE=gE or function(gG)return 1.05*gG.radius end;local gH={}if gF then for _,i in ipairs(gF)do gH[i]=self[i]end else gF={}for bg,gG in pairs(self)do table.insert(gF,bg)gH[bg]=gG end end;local function gI(gJ,gK)local gL=gH[gJ].center-gD;local gM=gH[gK].center-gD;return gL:len()<gM:len()end;table.sort(gF,gI)local gN=f4:normalize()for i,c3 in ipairs(gF)do local gG=gH[c3]local gO=gG.center-gD;local gd=gE(gG)local gP=gO:dot(gN)local gQ=gP^2-(gO:len2()-gd^2)if gQ>=0 then local gR=math.sqrt(gQ)local gS=gP+gR;local gT=gP-gR;if gT>0 then return gG,gS,gT elseif gS>0 then return gG,gS,nil end end end;return nil,nil,nil end;function gi:closestBody(gU)assert(type(gU)=='table','Invalid coordinates.')local gV,gG;local gW=vec3(gU)for _,gX in pairs(self)do local gY=(gX.center-gW):len2()if(not gG or gY<gV)and gX.name~="Space"then gG=gX;gV=gY end end;return gG end;function gi:convertToBodyIdAndWorldCoordinates(gh)local gZ=gh;if fV(gh)then gZ=gg(gh)end;if gZ.bodyId==0 then return 0,vec3(gZ.latitude,gZ.longitude,gZ.altitude)end;local gX=self:getBodyParameters(gZ)if gX then return gZ.bodyId,gX:convertToWorldCoordinates(gZ)end end;function gi:getBodyParameters(gh)local bY=gh;if fY(gh)then bY=gh.bodyId end;assert(fS(bY),'Argument 1 (bodyId) must be a number:'..type(bY))return self[bY]end;function gi:getPlanetarySystemId()local _,bh=next(self)return bh and bh.planetarySystemId end;function g7:convertToMapPosition(bO)assert(fT(bO),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bO))local bP=vec3(bO)if self.bodyId==0 then return setmetatable({latitude=bP.x,longitude=bP.y,altitude=bP.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local bQ=bP-self.center;local a3=bQ:len()local bR=a3-self.radius;local bS=0;local bT=0;if not float_eq(a3,0)then local bU=math.atan(bQ.y,bQ.x)bT=bU>=0 and bU or 2*math.pi+bU;bS=math.pi/2-math.acos(bQ.z/a3)end;return setmetatable({latitude=bS,longitude=bT,altitude=bR,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function g7:convertToWorldCoordinates(gh)local gZ=fV(gh)and gg(gh)or gh;if gZ.bodyId==0 then return vec3(gZ.latitude,gZ.longitude,gZ.altitude)end;assert(fY(gZ),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gZ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gZ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bZ=math.cos(gZ.latitude)return self.center+(self.radius+gZ.altitude)*vec3(bZ*math.cos(gZ.longitude),bZ*math.sin(gZ.longitude),math.sin(gZ.latitude))end;function g7:getAltitude(bO)return(vec3(bO)-self.center):len()-self.radius end;function g7:getDistance(bO)return(vec3(bO)-self.center):len()end;function g7:getGravity(bO)local g_=self.center-vec3(bO)local h0=g_:len2()return self.GM/h0*g_/math.sqrt(h0)end;return setmetatable(aX,{__call=function(_,...)return gq(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fV(fW)return type(fW)=='string'end;local function fT(fU)return type(fU)=='table'end;local function float_eq(bL,bM)if bL==0 then return math.abs(bM)<1e-09 end;if bM==0 then return math.abs(bL)<1e-09 end;return math.abs(bL-bM)<math.max(math.abs(bL),math.abs(bM))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bR)assert(self.body)local a3=bR+self.body.radius;if not float_eq(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gh,b5)assert(self.body)assert(fT(gh)or fV(gh))assert(fT(b5))local bV=(fV(gh)or PlanetRef.isMapPosition(gh))and self.body:convertToWorldCoordinates(gh)or vec3(gh)local bh=vec3(b5)local h1=bV-self.body.center;local gM=bh:len2()local h2=h1:len()local h3=self.body.GM;local h4=((gM-h3/h2)*h1-h1:dot(bh)*bh)/h3;local bL=h3/(2*h3/h2-gM)local h5=h4:len()local gN=h4:normalize()local h6=bL*(1-h5)local h7=bL*(1+h5)local h8=h6*gN+self.body.center;local h9=h5<=1 and-h7*gN+self.body.center or nil;local ha=math.sqrt(bL*h3*(1-h5*h5))local hb=h9 and 2*math.pi*math.sqrt(bL^3/h3)local hc=math.acos(h4:dot(h1)/(h5*h2))if h1:dot(bh)<0 then hc=-(hc-2*math.pi)end;local hd=math.acos((math.cos(hc)+h5)/(1+h5*math.cos(hc)))local he=hd;if he<0 then he=he+2*math.pi end;local hf=he-h5*math.sin(he)local hg=0;local hh=0;local hi=0;if hb~=nil then hg=hf/(2*math.pi/hb)hh=hb-hg;hi=hh+hb/2;if hc-math.pi>0 then hh=hg;hi=hh+hb/2 end;if hi>hb then hi=hi-hb end end;return{periapsis={position=h8,speed=ha/h6,circularOrbitSpeed=math.sqrt(h3/h6),altitude=h6-self.body.radius},apoapsis=h9 and{position=h9,speed=ha/h7,circularOrbitSpeed=math.sqrt(h3/h7),altitude=h7-self.body.radius},currentVelocity=bh,currentPosition=bV,eccentricity=h5,period=hb,eccentricAnomaly=hd,meanAnomaly=hf,timeToPeriapsis=hh,timeToApoapsis=hi}end;local function hj(hk)local gX=PlanetRef.BodyParameters(hk.planetarySystemId,hk.bodyId,hk.radius,hk.center,hk.GM)return setmetatable({body=gX},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hj(...)end})end;function Kinematics()local aZ={}local hl=30000000/3600;local hm=hl*hl;local hn=100;local function ho(bh)return 1/math.sqrt(1-bh*bh/hm)end;function aZ.computeAccelerationTime(hp,hq,hr)local hs=hl*math.asin(hp/hl)return(hl*math.asin(hr/hl)-hs)/hq end;function aZ.computeDistanceAndTime(hp,hr,ht,hu,hv,hw)hv=hv or 0;hw=hw or 0;local hx=hp<=hr;local hy=hu*(hx and 1 or-1)/ht;local hz=-hw/ht;local hA=hy+hz;if hx and hA<=0 or not hx and hA>=0 then return-1,-1 end;local hB,hC=0,0;if hy~=0 and hv>0 then local hs=math.asin(hp/hl)local hD=math.pi*(hy/2+hz)local hE=hy*hv;local hF=hl*math.pi;local bh=function(fU)local cz=(hD*fU-hE*math.sin(math.pi*fU/2/hv)+hF*hs)/hF;local hG=math.tan(cz)return hl*hG/math.sqrt(hG*hG+1)end;local hH=hx and function(fW)return fW>=hr end or function(fW)return fW<=hr end;hC=2*hv;if hH(bh(hC))then local hI=0;while math.abs(hC-hI)>0.5 do local fU=(hC+hI)/2;if hH(bh(fU))then hC=fU else hI=fU end end end;local hJ=hp;local hK=hC/hn;for hL=1,hn do local bw=bh(hL*hK)hB=hB+(bw+hJ)*hK/2;hJ=bw end;if hC<2*hv then return hB,hC end;hp=hJ end;local hs=hl*math.asin(hp/hl)local bj=(hl*math.asin(hr/hl)-hs)/hA;local hM=hm*math.cos(hs/hl)/hA;local a3=hM-hm*math.cos((hA*bj+hs)/hl)/hA;return a3+hB,bj+hC end;function aZ.computeTravelTime(hp,hq,a3)if a3==0 then return 0 end;if hq>0 then local hs=hl*math.asin(hp/hl)local hM=hm*math.cos(hs/hl)/hq;return(hl*math.acos(hq*(hM-a3)/hm)-hs)/hq end;assert(hp>0,'Acceleration and initial speed are both zero.')return a3/hp end;function aZ.lorentz(bh)return ho(bh)end;return aZ end;function script.onStart()VERSION_NUMBER=5.223;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hN)if dbHud_1 then if not Y then for bg,bh in pairs(b)do dbHud_1.setStringValue(bh,g(_G[bh]))if hN and dbHud_2 then dbHud_2.setStringValue(bh,g(_G[bh]))end end;for bg,bh in pairs(a)do dbHud_1.setStringValue(bh,g(_G[bh]))if hN and dbHud_2 then dbHud_2.setStringValue(bh,g(_G[bh]))end end;c("Saved Variables to Datacore")if hN and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local br=j()if door and(br>0 or br==0 and ae<10000)then for _,bh in pairs(door)do bh.toggle()end end;if switch then for _,bh in pairs(switch)do bh.toggle()end end;if forcefield and(br>0 or br==0 and ae<10000)then for _,bh in pairs(forcefield)do bh.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hO)if hO=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hP=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hP then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local db,dc=getDistanceDisplayString(a3)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..db..'", "unit":"'..dc..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')db,dc=getDistanceDisplayString(P)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..db..'", "unit":"'..dc..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')db,dc=getDistanceDisplayString(R)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..db..'", "unit":"'..dc..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')db,dc=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",db)..'", "unit":"'..dc..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then PlayerThrottle=unit.getAxisCommandValue(0)elseif AtmoSpeedAssist then PlayerThrottle=1;Nav.control.cancelCurrentControlMasterMode()end end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hO=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local c7={}local di=GetFlightStyle()DrawOdometer(c7,W,TotalDistanceTravelled,di,X)if ShouldCheckDamage then CheckDamage(c7)end;a5=table.concat(c7,"")collectgarbage("collect")elseif hO=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bi=json.decode(dbHud_1.getStringValue("SavedLocations"))if bi~=nil then _G["SavedLocations"]=bi;local c5=-1;local c1;for bg,bh in pairs(SavedLocations)do if bh.name and bh.name=="SatNav Location"then c5=bg;break end end;if c5~=-1 then c1=SavedLocations[c5]c5=-1;for bg,bh in pairs(aS[0])do if bh.name and bh.name=="SatNav Location"then c5=bg;break end end;if c5>-1 then aS[0][c5]=c1 end;UpdateAtlasLocationsList()K=c1.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hO=="msgTick"then local c7={}DisplayMessage(c7,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hO=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hO=="hudTick"then local c7={}HUDPrologue(c7)if showHud then UpdateHud(c7)else DisplayOrbitScreen(c7)DrawWarnings(c7)end;HUDEpilogue(c7)c7[#c7+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(c7,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(c7)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(c7)if screen_1.getMouseState()==1 then CheckButtons()end;c7[#c7+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(c7)if not b1 and not b2 then local hQ=table.concat(c7,"")c7={}c7[#c7+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)c7[#c7+1]=aT;c7[#c7+1]=hQ;c7[#c7+1]="</body>"b1=true;c7[#c7+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(c7,"")system.setScreen(content)elseif b2 then local hQ=table.concat(c7,"")c7={}c7[#c7+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)c7[#c7+1]=aT;c7[#c7+1]=hQ;c7[#c7+1]="</body>"end;if not b1 then c7[#c7+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(c7)end else SetButtonContains()DrawButtons(c7)end;c7[#c7+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;c7[#c7+1]=[[</svg></body>]]content=table.concat(c7,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hO=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;local bj=system.getTime()local hR=bj-bc;bc=bj;local ca=vec3(core.getConstructWorldOrientationForward())local cb=vec3(core.getConstructWorldOrientationRight())local hS=vec3(core.getConstructWorldOrientationUp())local cc=vec3(core.getWorldVertical())local hT=vec3(core.getConstructWorldPos())local hU=core.getVelocity()local dk=getRoll(cc,ca,cb)local dl=dk/180*math.pi;local dm=math.cos(dl)local dn=math.sin(dl)local cd=getPitch(cc,ca,cb)local hV=getPitch(cc,ca,cb*dm+hS*dn)local hW=-math.deg(cu(hS,b5,ca))local hX=math.deg(cu(cb,b5,ca))bb=ad and hW<-StallAngle or hW>StallAngle or hX<-StallAngle or hX>StallAngle;local hY=100;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()local bt=planet:getGravity(core.getConstructWorldPos()):len()*n()bd=0;a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hZ=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hZ then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0 end;if not hZ and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hZ;if ad and j()>0.09 then if b6>AtmoSpeedLimit/3.6 and not AtmoSpeedAssist and not ai then BrakeIsOn=true;ai=true elseif not AtmoSpeedAssist and ai then if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local h_=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local i0=AutopilotTargetCoords;local i1=false;AutopilotDistance=(vec3(i0)-vec3(core.getConstructWorldPos())):len()local i2=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()local db,dc=getDistanceDisplayString(i2)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..db..'", "unit":"'..dc..'"}')local i3=true;local i4=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;db,dc=getDistanceDisplayString(i4)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..db..'", "unit":"'..dc..'"}')if CustomTarget~=nil then AutopilotRealigned=true;i0=CustomTarget.position;AutopilotEndSpeed=AtmoSpeedLimit/3.6;local i5,gT,gS=aY:getPlanetarySystem(0):castIntersections(hT,b5:normalize(),function(gG)if gG.noAtmosphericDensityAltitude>0 then return gG.radius+gG.noAtmosphericDensityAltitude else return gG.radius+gG.surfaceMaxAltitude*1.5 end end)if gT==nil then AutopilotDistance=AutopilotDistance-(V.noAtmosphericDensityAltitude*1.1-V:getAltitude(i0))else system.print(gT)if gS~=nil then system.print(gS.." = far")AutopilotDistance=math.min(gS,gT)else AutopilotDistance=gT end end end;local P,Q;if CustomTarget~=nil then AutopilotPlanetGravity=V.gravity*9.8 end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;if b6>300 and AutopilotAccelerating then local d8=vec3(i0)-vec3(core.getConstructWorldPos())local i6=utils.clamp(math.deg(cu(hS,b5:normalize(),d8:normalize()))*b6/500,-90,90)local i7=utils.clamp(math.deg(cu(cb,b5:normalize(),d8:normalize()))*b6/500,-90,90)if math.abs(i6)<5 and math.abs(i7)<5 then i6=i6*2;i7=i7*2 end;if math.abs(i6)<2 and math.abs(i7)<2 then i6=i6*2;i7=i7*2 end;local hW=-math.deg(cu(hS,ca,b5:normalize()))local hX=-math.deg(cu(cb,ca,b5:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(i7-hX)local i8=utils.clamp(apPitchPID:get(),-1,1)C=C+i8;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(i6-hW)local i9=utils.clamp(apYawPID:get(),-1,1)D=D+i9;i1=true;if math.abs(i6)>2 or math.abs(i7)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if i4<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(i4)end end;if not AutopilotCruising and not AutopilotBraking and not i1 then i3=AlignToWorldVector((i0-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn and not i1 then i3=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and(b6<=AutopilotEndSpeed or j()>0)then K="Autopilot complete, proceeding with reentry"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false;ProgradeIsOn=true;a7=true elseif CustomTarget==nil and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,ia=b0(V):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if b6<=ia then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if i3 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif i3 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and(b6<=AutopilotEndSpeed or j()>0))then K="Autopilot complete, proceeding with reentry"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;u=false;ProgradeIsOn=true;a7=true end;if I then b3=true;local i7=0;local bV=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local ib=bV-vec3(core.getConstructWorldPos())local ic=vec3(ib):project_on(vec3(core.getConstructWorldOrientationForward())):len()local id=vec3(ib):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(ic*ic+id*id)AlignToWorldVector(ib:normalize())local ie=40;local ig=a3<ie;local ih=100;local fC=utils.clamp((a3-ie)/2,10,ih)C=0;local i3=math.abs(D)<0.1;if i3 and b6<fC and not ig then BrakeIsOn=false;i7=-20 else BrakeIsOn=true;i7=0 end;local ii=1.0;if math.abs(i7-cd)>ii then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(i7-cd)local i8=pitchPID:get()C=i8 end end;local dQ=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dw=unit.getClosestPlanetInfluence()>0;local ij=HoldAltitude-ae;local ik=500+b6;local i7=(utils.smoothstep(ij,-ik,ik)-0.5)*2*MaxPitch*utils.clamp(b6/100,0.1,1)if not AltitudeHold then i7=0 end;if LockPitch~=nil then if dw then i7=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local il=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=il then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,il)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then i7=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;i7=0;b3=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ae>planet.noAtmosphericDensityAltitude+5000 then i7=-80 elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false end end;local im=C;if b6>w and not a8 and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(b5))end;if(VectorToTarget or a8)and CustomTarget~=nil and AutopilotTargetIndex>0 then local d8=CustomTarget.position-vec3(core.getConstructWorldPos())local hS=vec3(core.getConstructWorldOrientationUp())local i6=math.deg(cu(cc,b5:normalize(),d8:normalize()))*2;local io=math.rad(math.abs(dk))if b6>hY then bd=utils.clamp(i6,-90,90)local ip=i6;i6=utils.clamp(hW-i6,hW-StallAngle*0.85,hW+StallAngle*0.85)*math.cos(io)+utils.clamp(i7-hV,-StallAngle*0.85,StallAngle*0.85)*math.sin(math.rad(dk))i7=utils.clamp(i7*math.cos(io),-StallAngle*0.85,StallAngle*0.85)+utils.clamp(math.abs(ip),-StallAngle*0.85,StallAngle*0.85)*math.sin(io)end;local iq=i6;if not bb and b6>hY then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(iq)local i9=utils.clamp(yawPID:get(),-1,1)D=D+i9 elseif aa>-1 or b6<hY then AlignToWorldVector(d8)else AlignToWorldVector(b5)end;local ir=planet:getAltitude(CustomTarget.position)local is=math.sqrt(d8:len()^2-(ae-ir)^2)local it=LastMaxBrakeInAtmo;if it then it=it*utils.clamp(b6/100,0.1,1)*j()else it=LastMaxBrake end;local dO=b5.x*dQ.x+b5.y*dQ.y+b5.z*dQ.z;local iu=b5:len()-math.abs(dO)local iv=vec3(core.getWorldAirFrictionAcceleration())local iw=math.sqrt(iv:len()-iv:project_on(dQ):len())*n()if b6>100 then P,Q=aZ.computeDistanceAndTime(b6,100,n(),0,0,it+iw)local ix,iy=aZ.computeDistanceAndTime(100,0,n(),0,0,it/2)P=P+ix else P,Q=aZ.computeDistanceAndTime(b6,0,n(),0,0,it/2)end;StrongBrakes=true;if not a8 and is<=P+b6*hR/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(iu<0.1 or is<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<is)then BrakeLanding=true;VectorToTarget=false end;LastDistanceToTarget=is;if VectorStatus=="Finalizing Approach"and(iu<0.1 or is<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<is)then BrakeLanding=true;VectorToTarget=false end end;C=im;local fg=-1;local ii=0.1;if BrakeLanding then i7=0;local dO=b5.x*dQ.x+b5.y*dQ.y+b5.z*dQ.z;local iz=false;local iA=30;if a_~=nil and a_>0 then local iw=0;local dr=utils.clamp(j(),0.4,2)local it=LastMaxBrakeInAtmo*utils.clamp(b6/100,0.1,1)*dr;local iB=a_*dr+it+iw-bt;local iC=it+iw-bt;local iD=it/2+iw-bt;local iE=b6-math.sqrt(math.abs(iD/2)*20/(0.5*n()))*utils.sign(iD)if iE<0 then iE=0 end;local iF;if b6>100 then local iG,_=aZ.computeDistanceAndTime(b6,100,n(),0,0,it)local iH,_=aZ.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(it))iF=iG+iH else iF=aZ.computeDistanceAndTime(b6,0,n(),0,0,math.sqrt(it))end;if iF<20 then BrakeIsOn=false else local iI=0;if iE>100 then local iJ,_=aZ.computeDistanceAndTime(iE,100,n(),0,0,iB)local iK,_=aZ.computeDistanceAndTime(100,0,n(),0,0,a_*dr+math.sqrt(it)+iw-bt)iI=iJ+iK else iI,_=aZ.computeDistanceAndTime(iE,0,n(),0,0,a_*dr+math.sqrt(it)+iw-bt)end;iI=(iI+15+b6*hR)*1.1;local iL=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if iL then local ir=planet:getAltitude(CustomTarget.position)local iM=ae-ir-100;local d8=CustomTarget.position-vec3(core.getConstructWorldPos())local iN=math.sqrt(d8:len()^2-(ae-ir)^2)if iN>100 then iL=false elseif iM<=iI or iI==-1 then BrakeIsOn=true;iz=true else BrakeIsOn=false;iz=true end end;if not iL and CalculateBrakeLandingSpeed then if iI>=iA then BrakeIsOn=true else BrakeIsOn=false end;iz=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fg=aa;if fg>-1 then b3=autoRollPreference;if b6<1 or b5:normalize():dot(cc)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and b5:normalize():dot(-dQ)<0.999 then BrakeIsOn=true elseif dO<-brakeLandingRate and not iz then BrakeIsOn=true elseif not iz then BrakeIsOn=false end end;if AutoTakeoff or a8 then local i5,gT,gS=aY:getPlanetarySystem(0):castIntersections(hT,(AutopilotTargetCoords-hT):normalize(),function(gG)return gG.radius+gG.noAtmosphericDensityAltitude end)if i5~=nil then system.print(i5.name)if gT~=nil then system.print("Near: "..gT)end;if gS~=nil then system.print("Far: "..gS)end end;if i7<15 and ae/HoldAltitude>0.75 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0 elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;BrakeIsOn=true end elseif a8 and j()==0 and V~=nil and(i5==nil or i5.name==V.name)then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local iO=hoverDetectGround()>-1;local iP=cd;if VectorToTarget and not iO and b6>hY then local io=math.rad(math.abs(dk))iP=cd*math.cos(io)+hX*math.sin(io)end;local iQ=utils.clamp(i7-iP,-StallAngle*0.85,StallAngle*0.85)if math.abs(iQ)>ii and(not bb and(math.abs(dk)<5 or VectorToTarget)or BrakeLanding or iO)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iQ)local i8=pitchPID:get()C=C+i8 end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iR=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local iS=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local iT=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local iU=G;local iV=vec3(core.getWorldVertical())local iW=vec3(core.getConstructWorldOrientationUp())local iX=vec3(core.getConstructWorldOrientationForward())local iY=vec3(core.getConstructWorldOrientationRight())local iZ=vec3(core.getWorldVelocity())local i_=vec3(core.getWorldVelocity()):normalize()local j0=getRoll(iV,iX,iY)local j1=math.abs(j0)local j2=utils.sign(j0)local j=j()local j3=vec3(core.getWorldAngularVelocity())local j4=iR*pitchSpeedFactor*iY+iS*rollSpeedFactor*iX+iT*yawSpeedFactor*iW;if iV:len()>0.01 and j>0.0 or ProgradeIsOn or Reentry or a7 or AltitudeHold then if b3==true and math.abs(bd-j0)>autoRollRollThreshold and iS==0 then local j5=bd;local j6=autoRollFactor;if rollPID==nil then rollPID=pid.new(j6*0.01,0,j6*0.1)end;rollPID:inject(j5-j0)local j7=rollPID:get()j4=j4+j7*iX end end;if iV:len()>0.01 and j>0.0 then local j8=20.0;if turnAssist==true and j1>j8 and iR==0 and iT==0 then local j9=turnAssistFactor*0.1;local ja=turnAssistFactor*0.025;local jb=(j1-j8)/(180-j8)*180;local jc=0;if jb<90 then jc=jb/90 elseif jb<180 then jc=(180-jb)/90 end;jc=jc*jc;local jd=-j2*ja*(1.0-jc)local je=j9*jc;j4=j4+je*iY+jd*iW end end;local jf=1;local jg=0;local jh=1;if system.getMouseWheel()>0 then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeLarge/100,-1,1)elseif system.getMouseWheel()<0 then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeLarge/100,-1,1)end;brakeInput2=0;local dO=-iV:dot(iZ)if ad and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(AtmoSpeedLimit/3.6-iZ:dot(iX))local ji=throttlePID:get()calculatedThrottle=utils.clamp(ji,-1,1)if calculatedThrottle<PlayerThrottle and(j>0.1 or j>0 and dO<-5)then ThrottleLimited=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(calculatedThrottle,0.01,1))else ThrottleLimited=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(iZ:len()-AtmoSpeedLimit/3.6)local jj=utils.clamp(brakePID:get(),0,1)if j>0 and dO<-5 or j>0.1 then brakeInput2=jj end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=utils.clamp(calculatedThrottle,0.01,1)end;local jk=''local jl=vec3()local jm='thrust analog vertical 'local jn='thrust analog lateral 'if ExtraLateralTags~="none"then jn=jn..ExtraLateralTags end;if ExtraVerticalTags~="none"then jm=jm..ExtraVerticalTags end;local jo=composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical,Z*1000)jk=jk..' , '..jm;jl=jl+jo;local jp='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jp=jp..ExtraLongitudeTags end;local jq=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local jr=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jp,axisCommandId.longitudinal)local js=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,0)jk=jk..' , '..jn;jl=jl+js;if jl:len()>constants.epsilon then Nav:setEngineForceCommand(jk,jl,jg,'','','',jh)end;Nav:setEngineForceCommand(jp,jr,jf)if iU==0 then iU=brakeInput2 end;local jt=-iU*(brakeSpeedFactor*iZ+brakeFlatFactor*i_)Nav:setEngineForceCommand('brake',jt)else local jt=-iU*(brakeSpeedFactor*iZ+brakeFlatFactor*i_)Nav:setEngineForceCommand('brake',jt)local jk=''local jl=vec3()local ju=false;local jp='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then jp=jp..ExtraLongitudeTags end;local jq=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jq==axisCommandType.byThrottle then local jr=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jp,axisCommandId.longitudinal)Nav:setEngineForceCommand(jp,jr,jf)elseif jq==axisCommandType.byTargetSpeed then local jr=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)jk=jk..' , '..jp;jl=jl+jr;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ju=true end end;local jn='thrust analog lateral 'if ExtraLateralTags~="none"then jn=jn..ExtraLateralTags end;local jv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jv==axisCommandType.byThrottle then local jw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jn,axisCommandId.lateral)Nav:setEngineForceCommand(jn,jw,jf)elseif jv==axisCommandType.byTargetSpeed then local js=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)jk=jk..' , '..jn;jl=jl+js end;local jm='thrust analog vertical 'if ExtraVerticalTags~="none"then jm=jm..ExtraVerticalTags end;local jx=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jx==axisCommandType.byThrottle then local jo=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jm,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jm,jo,jf,'airfoil','ground','',jh)else Nav:setEngineForceCommand(jm,vec3(),jf)Nav:setEngineForceCommand('airfoil vertical',jo,jf,'airfoil','','',jh)Nav:setEngineForceCommand('ground vertical',jo,jf,'ground','','',jh)end elseif jx==axisCommandType.byTargetSpeed then if Z<0 then Nav:setEngineForceCommand('hover',vec3(),jf)end;local jy=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)jk=jk..' , '..jm;jl=jl+jy end;local fC=unit.getAxisCommandValue(0)if jl:len()>constants.epsilon then if G~=0 or ju or math.abs(i_:dot(iX))<0.8 or b5:len()>fC/3.6 then jk=jk..', brake'end;Nav:setEngineForceCommand(jk,jl,jg,'','','',jh)end end;local jz=torqueFactor*(j4-j3)local jA=vec3(core.getWorldAirFrictionAngularAcceleration())jz=jz-jA;Nav:setEngineTorqueCommand('torque',jz,jf,'airfoil','','',jh)Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bw=vec3(core.getVelocity()):len()local jB=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jC=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bw*3.6>jC*(1-jB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bw*3.6<jC*(1-jB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jD=unit.getThrottle()local fC=jD/100;if j==0 then fC=fC*MaxGameVelocity;if bw>=fC*(1-jB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bw<fC*(1-jB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else fC=fC*ReentrySpeed/3.6;if bw>=fC*(1-jB)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bw<fC*(1-jB)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bi=coroutine.resume(beginSetup)if bi then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jE)if jE=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)PlayerThrottle=0;if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b3=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if A and not BrakeLanding then Nav.control.extendLandingGears()end else if A then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jE=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jE=="forward"then B=B-1 elseif jE=="backward"then B=B+1 elseif jE=="left"then E=E-1 elseif jE=="right"then E=E+1 elseif jE=="yawright"then F=F-1 elseif jE=="yawleft"then F=F+1 elseif jE=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jE=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jE=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jE=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jE=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jE=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jE=="option1"then IncrementAutopilotTargetIndex()v=false elseif jE=="option2"then DecrementAutopilotTargetIndex()v=false elseif jE=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif jE=="option4"then ToggleAutopilot()v=false elseif jE=="option5"then ToggleLockPitch()v=false elseif jE=="option6"then ToggleAltitudeHold()v=false elseif jE=="option7"then wipeSaveVariables()v=false elseif jE=="option8"then ToggleFollowMode()v=false elseif jE=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif jE=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif jE=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jE=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jE=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif jE=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()PlayerThrottle=0 elseif jE=="speedup"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jE=="speeddown"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeLarge/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jE=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jE)if jE=="forward"then B=0 elseif jE=="backward"then B=0 elseif jE=="left"then E=0 elseif jE=="right"then E=0 elseif jE=="yawright"then F=0 elseif jE=="yawleft"then F=0 elseif jE=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jE=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jE=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jE=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jE=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jE=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jE=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif jE=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jE=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jE)if jE=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jE=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jE=="speedup"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle+speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jE=="speeddown"then if not J then if AtmoSpeedAssist then PlayerThrottle=utils.clamp(PlayerThrottle-speedChangeSmall/100,-1,1)end;Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jF)local i;local jG="/commands /setname /G /agg /addlocation /copydatabank"local jH,jI=nil,nil;local jJ="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jF," ")jH=jF;if i~=nil then jH=string.sub(jF,0,i-1)jI=string.sub(jF,i+1)elseif not string.find(jG,jH)then for fy in string.gmatch(jJ,"([^\n]+)")do c(fy)end;return end;if jH=="/setname"then if jI==nil or jI==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jI)else K="Select a saved target to rename first"end elseif jH=="/addlocation"then if jI==nil or jI==""or string.find(jI,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jI,"::")local c0=string.sub(jI,1,i-2)local bV=string.sub(jI,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bW='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bX,bY,bS,bT,bR=string.match(bV,bW)local planet=aS[tonumber(bX)][tonumber(bY)]AddNewLocationByWaypoint(c0,planet,bV)K="Added "..c0 .." to saved locations,\nplanet "..planet.name.." at "..bV;a2=5 elseif jH=="/agg"then if jI==nil or jI==""then K="Usage: /agg targetheight"return end;jI=tonumber(jI)if jI<1000 then jI=1000 end;AntigravTargetAltitude=jI;K="AGG Target Height set to "..jI elseif jH=="/G"then if jI==nil or jI==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jI=="dump"then for bg,bh in pairs(a)do if type(_G[bh])=="boolean"then if _G[bh]==true then c(bh.." true")else c(bh.." false")end elseif _G[bh]==nil then c(bh.." nil")else c(bh.." ".._G[bh])end end;return end;i=string.find(jI," ")local jK=string.sub(jI,0,i-1)local jL=string.sub(jI,i+1)for bg,bh in pairs(a)do if bh==jK then K="Variable "..jK.." changed to "..jL;local jM=type(_G[bh])if jM=="number"then jL=tonumber(jL)elseif jM=="boolean"then if string.lower(jL)=="true"then jL=true else jL=false end end;_G[bh]=jL;return end end;K="No such global variable: "..jK elseif jH=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
