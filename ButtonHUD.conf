name: ButtonsHud - ShadowMage v5.340 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing (Stabilizers: 70, Wings: 55, Ailerons: 30)
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching (Stabilizers: 70, Wings: 55, Ailerons: 30)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        TargetOrbitRadius = 1.4 --export: (Default: 1.4) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  1.4 sets an Alioth orbit of 56699m.
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the brakeLandingRate user setting.  Only set to true for ships with low mass to lift capability.
        autoRollRollThreshold = 0 --export: (Default: 0) The minimum amount of roll before autoRoll kicks in and stabilizes (if active)
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit
        HeadlightGroundHeight = 150 --export: (Default: 150) Controls altitude to turn on/off Headlights. Turns off above value
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which advanced rolling can occur
        VertTakeOffEngine = false --export: (Default: false) Set this to true if you have VTOL engines on your construct. Will VTOL on AutoTakeOff.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;VertTargetCoords=nil;VertTargetOrbit=0;VertTargetPlanet=nil;VtBrakeDistance=0;VertRetriggerTarget=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=SafeR;local t=SafeB;local u=SafeG;local v=false;local w=0;local x=""local y=0;local z=0;local A=false;local B=0;local C=false;local D=round(ResolutionX/2,0)local E=round(ResolutionY/2,0)local F=false;local G=true;local H=55;local I=false;local J=1;local K=1;local L=false;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=false;local U=false;local V="empty"local W=1;local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=false;local a5=false;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=j()>0;local ap=core.getAltitude()local aq=core.getElementIdList()local ar=system.getTime()local as=nil;local at=false;local au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]local av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local bg=vec3(core.getWorldVelocity())local bh=vec3(bg):len()local bi=math.cos(YawStallAngle*constants.deg2rad)local bj=LandingGearGroundHeight;local bk=system.getMouseDeltaX()local bl=system.getMouseDeltaY()local bm=false;local bn=system.getTime()local bo=0;local bp=0;local bq=nil;local br=nil;local bs=nil;local bt=AtmoSpeedLimit;function LoadVariables()if dbHud_1 then local bu=dbHud_1.hasKey;if not useTheseSettings then for bv,bw in pairs(a)do if bu(bw)then local bx=f(dbHud_1.getStringValue(bw))if bx~=nil then c(bw.." "..dbHud_1.getStringValue(bw))_G[bw]=bx;aK=true end end end end;coroutine.yield()for bv,bw in pairs(b)do if bu(bw)then local bx=f(dbHud_1.getStringValue(bw))if bx~=nil then c(bw.." "..dbHud_1.getStringValue(bw))_G[bw]=bx;aK=true end end end;if useTheseSettings then V="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ad=5 elseif aK then V="Loaded Saved Variables (see Lua Chat Tab for list)"else V="No Saved Variables Found - Stand up / leave remote to save settings"end else V="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local by=system.getTime()if LastStartTime+180<by then LastMaxBrakeInAtmo=0 end;if aK then D=round(ResolutionX/2,0)E=round(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference end;LastStartTime=by;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then V="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;bi=math.cos(YawStallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]bt=AtmoSpeedLimit end;function CalculateFuelVolume(bz,bA)if bz>bA then bA=bz end;if ContainerOptimization>0 then bA=bA-bA*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bA=bA-bA*FuelTankOptimization*0.05 end;return bA end;function ProcessElements()local bB=fuelX~=0 and fuelY~=0;for bv in pairs(aq)do local type=l(aq[bv])if type=="Landing Gear"then L=true end;if type=="Dynamic Core Unit"then local bC=h(aq[bv])if bC>10000 then b0=128 elseif bC>1000 then b0=64 elseif bC>150 then b0=32 end end;aR=aR+h(aq[bv])if bB and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bC=h(aq[bv])local bD=m(aq[bv])local bz=0;local bE=system.getTime()if type=="Atmospheric Fuel Tank"then local bA=400;local bF=35.03;if bC>10000 then bA=51200;bF=5480 elseif bC>1300 then bA=6400;bF=988.67 elseif bC>150 then bA=1600;bF=182.67 end;bz=bD-bF;if fuelTankHandlingAtmo>0 then bA=bA+bA*fuelTankHandlingAtmo*0.2 end;bA=CalculateFuelVolume(bz,bA)aO[#aO+1]={aq[bv],core.getElementNameById(aq[bv]),bA,bF,bz,bE}end;if type=="Rocket Fuel Tank"then local bA=320;local bF=173.42;if bC>65000 then bA=40000;bF=25740 elseif bC>6000 then bA=5120;bF=4720 elseif bC>700 then bA=640;bF=886.72 end;bz=bD-bF;if fuelTankHandlingRocket>0 then bA=bA+bA*fuelTankHandlingRocket*0.1 end;bA=CalculateFuelVolume(bz,bA)aQ[#aQ+1]={aq[bv],core.getElementNameById(aq[bv]),bA,bF,bz,bE}end;if type=="Space Fuel Tank"then local bA=2400;local bF=182.67;if bC>10000 then bA=76800;bF=5480 elseif bC>1300 then bA=9600;bF=988.67 end;bz=bD-bF;if fuelTankHandlingSpace>0 then bA=bA+bA*fuelTankHandlingSpace*0.2 end;bA=CalculateFuelVolume(bz,bA)aP[#aP+1]={aq[bv],core.getElementNameById(aq[bv]),bA,bF,bz,bE}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then a4=true else a5=true end end;local bG=j()if door and(bG>0 or bG==0 and ap<10000)then for _,bw in pairs(door)do bw.toggle()end end;if switch then for _,bw in pairs(switch)do local bH=bw.getId()local bI=core.getElementNameById(bH)if bI=="navBlinkSwitch"then bq=bw elseif bI=="navLightSwitch"then br=bw elseif bI=="headLightSwitch"then bs=bw else bw.toggle()end end end;if forcefield and(bG>0 or bG==0 and ap<10000)then for _,bw in pairs(forcefield)do bw.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if L then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bJ=AboveGroundLevel()if bJ~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not L then GearExtended=true end else BrakeIsOn=false end;if bj~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bj)if bj==0 and not L then GearExtended=true;BrakeIsOn=true end else bj=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bJ~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ao end;function ConvertResolutionX(bw)if ResolutionX==1920 then return bw else return round(ResolutionX*bw/1920,0)end end;function ConvertResolutionY(bw)if ResolutionY==1080 then return bw else return round(ResolutionY*bw/1080,0)end end;function RefreshLastMaxBrake(bK,bL)if bK==nil then bK=core.g()end;bK=round(bK,5)local bM=j()if bL~=nil and bL or(aN==nil or aN~=bK)then local bg=core.getVelocity()local bN=vec3(bg):len()local bO=f(unit.getData()).maxBrake;if bO~=nil and bO>0 and ao then bO=bO/utils.clamp(bN/100,0.1,1)bO=bO/bM;if bM>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bO)/2 else LastMaxBrakeInAtmo=bO end end end;if bO~=nil and bO>0 then LastMaxBrake=bO end;aN=bK end end;function MakeButton(bP,bQ,bR,bS,bT,bU,bV,bW,bX)local bY={enableName=bP,disableName=bQ,width=bR,height=bS,x=bT,y=bU,toggleVar=bV,toggleFunction=bW,drawCondition=bX,hovered=false}table.insert(aB,bY)return bY end;function UpdateAtlasLocationsList()AtlasOrdered={}for bv,bw in pairs(b2[0])do table.insert(AtlasOrdered,{name=bw.name,index=bv})end;local function bZ(b_,c0)return b_.name<c0.name end;table.sort(AtlasOrdered,bZ)end;function AddLocationsToAtlas()for bv,bw in pairs(SavedLocations)do table.insert(b2[0],bw)end;UpdateAtlasLocationsList()end;function float_eq(c1,c2)if c1==0 then return math.abs(c2)<1e-09 end;if c2==0 then return math.abs(c1)<1e-09 end;return math.abs(c1-c2)<math.max(math.abs(c1),math.abs(c2))*epsilon end;function zeroConvertToMapPosition(c3,c4)local c5=vec3(c4)if c3.bodyId==0 then return setmetatable({latitude=c5.x,longitude=c5.y,altitude=c5.z,bodyId=0,systemId=c3.planetarySystemId},MapPosition)end;local c6=c5-c3.center;local ae=c6:len()local c7=ae-c3.radius;local c8=0;local c9=0;if not float_eq(ae,0)then local ca=math.atan(c6.y,c6.x)c9=ca>=0 and ca or 2*math.pi+ca;c8=math.pi/2-math.acos(c6.z/ae)end;return setmetatable({latitude=math.deg(c8),longitude=math.deg(c9),altitude=c7,bodyId=c3.bodyId,systemId=c3.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cb)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cc='::pos{'..p..','..p..','..p..','..p..','..p..'}'local cd,ce,c8,c9,c7=string.match(cb,cc)if cd=="0"and ce=="0"then return vec3(tonumber(c8),tonumber(c9),tonumber(c7))end;c9=math.rad(c9)c8=math.rad(c8)local planet=b2[tonumber(cd)][tonumber(ce)]local cf=math.cos(c8)local cg=vec3(cf*math.cos(c9),cf*math.sin(c9),math.sin(c8))return planet.center+(planet.radius+c7)*cg end;function AddNewLocationByWaypoint(ch,planet,cb)if dbHud_1 then local ci={}local position=zeroConvertToWorldCoordinates(cb)if planet.name=="Space"then ci={position=position,name=ch,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bG=false;if planet.hasAtmosphere then bG=true else bG=false end;ci={position=position,name=ch,atmosphere=bG,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=ci;table.insert(b2[0],ci)UpdateAtlasLocationsList()else V="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bI=planet.name..". "..#SavedLocations;if radar_1 then local cj,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cj~=nil and cj~=""then bI=bI.." "..radar_1.getConstructName(cj)end end;local ci={}local bG=false;if planet.hasAtmosphere then bG=true end;ci={position=position,name=bI,atmosphere=bG,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=ci;table.insert(b2[0],ci)UpdateAtlasLocationsList()V="Location saved as "..bI else V="Databank must be installed to save locations"end end;function UpdatePosition(ck)local cl=-1;local ci;for bv,bw in pairs(SavedLocations)do if bw.name and bw.name==CustomTarget.name then cl=bv;break end end;if cl~=-1 then local cm;if ck~=nil then ci={position=SavedLocations[cl].position,name=ck,atmosphere=SavedLocations[cl].atmosphere,planetname=SavedLocations[cl].planetname,gravity=SavedLocations[cl].gravity}else ci={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cl].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cl]=ci;cl=-1;for bv,bw in pairs(b2[0])do if bw.name and bw.name==CustomTarget.name then cl=bv end end;if cl>-1 then b2[0][cl]=ci end;UpdateAtlasLocationsList()V=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else V="Name Not Found"end end;function ClearCurrentPosition()local cl=-1;for bv,bw in pairs(b2[0])do if bw.name and bw.name==CustomTarget.name then cl=bv end end;if cl>-1 then table.remove(b2[0],cl)end;cl=-1;for bv,bw in pairs(SavedLocations)do if bw.name and bw.name==CustomTarget.name then V=bw.name.." saved location cleared"cl=bv;break end end;if cl~=-1 then table.remove(SavedLocations,cl)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cn)cn[#cn+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;function ToggleWidgets()if aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aA=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aA=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(co,cp,bT,bU,bR,bS)if co>bT and co<bT+bR and cp>bU and cp<bU+bS then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then VertTakeOff=false;AltitudeHold=false;VertTargetSet=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false;VertTargetSet=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local cq=vec3(core.getConstructWorldOrientationForward())local cr=vec3(core.getConstructWorldOrientationRight())local cs=vec3(core.getWorldVertical())local ct=getPitch(cs,cq,cr)LockPitch=ct;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local by=system.getTime()if by-bp<1.5 then if planet.hasAtmosphere then HoldAltitude=planet.spaceEngineMinAltitude-50;bp=-1;if AltitudeHold then return end end else bp=by end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;T=false;BrakeLanding=false;Reentry=false;be=true;LockPitch=nil;if hoverDetectGround()==-1 or not ao or antigrav and antigrav.getState()==1 then AutoTakeoff=false;if bp>-1 then HoldAltitude=ap end;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;if bp>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end else be=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then T=not T;if T then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else V="Follow Mode only works with Remote controller"T=false end end;function ToggleAutopilot()TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local cu=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ap>100000 or ap==0 then Autopilot=true else ai=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;T=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;F=false;LockPitch=nil;WaypointSet=false else aj=true;ToggleAltitudeHold()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;F=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;T=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;be=autoRollPreference;ai=false;ak=false;aa=0 end end;function CheckDamage(cn)local cv=0;az=""local cw=aR;local cx=0;local cy=0;local cz=0;local cA=0;local cB=""for bv in pairs(aq)do local bC=0;local cC=0;cC=h(aq[bv])bC=k(aq[bv])cx=cx+bC;if bC<cC then if bC==0 then cz=cz+1 else cy=cy+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bv]))local bT=position.x-b0;local bU=position.y-b0;local cD=position.z-b0;table.insert(aw,core.spawnArrowSticker(bT,bU,cD+1,"down"))table.insert(aw,core.spawnArrowSticker(bT,bU,cD+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(bT+1,bU,cD,"north"))table.insert(aw,core.spawnArrowSticker(bT+1,bU,cD,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(bT-1,bU,cD,"south"))table.insert(aw,core.spawnArrowSticker(bT-1,bU,cD,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(bT,bU-1,cD,"east"))table.insert(aw,core.spawnArrowSticker(bT,bU-1,cD,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(bT,bU+1,cD,"west"))table.insert(aw,core.spawnArrowSticker(bT,bU+1,cD,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bv])end elseif aS and#aw>0 and aw[11]==aq[bv]then for cE in pairs(aw)do core.deleteSticker(aw[cE])end;aw={}end end;cv=d(cx/cw*100)if cv<100 then cn[#cn+1]=[[<g class="pbright txt">]]cA=d(cv*2.55)cB=e("rgb(%d,%d,%d)",255-cA,cA,0)if cv<100 then cn[#cn+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cB,cv)if cz>0 then cn[#cn+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cB,cz,cy)elseif cy>0 then cn[#cn+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cB,cy)end end;cn[#cn+1]=[[<\g>]]end end;function DrawCursorLine(cn)local cF=d(utils.clamp(ae/(aE/4)*255,0,255))cn[#cn+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,d(s+0.5)+cF,d(u+0.5)-cF,d(t+0.5)-cF)end;function getPitch(cG,cH,c0)local cI=cG:cross(c0):normalize_inplace()local ct=math.acos(utils.clamp(cI:dot(-cH),-1,1))*constants.rad2deg;if cI:cross(-cH):dot(c0)<0 then ct=-ct end;return ct end;local cJ=math.atan;local function cK(cL,cM,cN)cM=cM:project_on_plane(cL)cN=cN:project_on_plane(cL)return cJ(cM:cross(cN):dot(cL),cM:dot(cN))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;T=false;F=false;ai=false;aj=false;I=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil else am=true end end;function wipeSaveVariables()if not dbHud_1 then V="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ad=5 else if aL then for bv,bw in pairs(a)do dbHud_1.setStringValue(bw,g(nil))end;for bv,bw in pairs(b)do if bw~="SavedLocations"then dbHud_1.setStringValue(bw,g(nil))end end;V="Databank wiped. New variables will save after re-enter seat and exit"ad=5;aL=false;aK=false;a9=true else V="Press ALT-7 again to confirm wipe of ALL data"aL=true end end end;function CheckButtons()for _,bw in pairs(aB)do if bw.hovered then if not bw.drawCondition or bw.drawCondition()then bw.toggleFunction()end;bw.hovered=false end end end;function SetButtonContains()local bT=ab+aE/2;local bU=ac+aF/2;for _,bw in pairs(aB)do bw.hovered=Contains(bT,bU,bw.x,bw.y,bw.width,bw.height)end end;function DrawButton(cn,cO,hover,bT,bU,cP,cQ,cR,cS,cT,cU)if type(cT)=="function"then cT=cT()end;if type(cU)=="function"then cU=cU()end;cn[#cn+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bT,bU,cP,cQ)if cO then cn[#cn+1]=e("%s'",cR)else cn[#cn+1]=cS end;if hover then cn[#cn+1]=" style='stroke:white; stroke-width:2'"else cn[#cn+1]=" style='stroke:black; stroke-width:1'"end;cn[#cn+1]="></rect>"cn[#cn+1]=e("<text x='%f' y='%f' font-size='24' fill='",bT+cP/2,bU+cQ/2+5)if cO then cn[#cn+1]="black"else cn[#cn+1]="white"end;cn[#cn+1]="' text-anchor='middle' font-family='Montserrat'>"if cO then cn[#cn+1]=e("%s</text>",cT)else cn[#cn+1]=e("%s</text>",cU)end end;function DrawButtons(cn)local cV="rgb(50,50,50)'"local cW="rgb(210,200,200)"local cX=DrawButton;for _,bw in pairs(aB)do local bQ=bw.disableName;local bP=bw.enableName;if type(bQ)=="function"then bQ=bQ()end;if type(bP)=="function"then bP=bP()end;if not bw.drawCondition or bw.drawCondition()then cX(cn,bw.toggleVar(),bw.hovered,bw.x,bw.y,bw.width,bw.height,cW,cV,bQ,bP)end end end;function DrawTank(cn,a_,bT,cY,cZ,c_,d0,d1)local d2=1;local d3=2;local d4=3;local d5=4;local d6=5;local d7=6;local d8=""local d9=0;local da=fuelY;local db=fuelY+10;if o()==1 and not RemoteHud then da=da-50;db=db-50 end;cn[#cn+1]=[[<g class="pdim txtfuel">]]if cZ=="ATMO"then d8="atmofueltank"elseif cZ=="SPACE"then d8="spacefueltank"else d8="rocketfueltank"end;d9=_G[d8 .."_size"]if#c_>0 then for i=1,#c_ do local bI=string.sub(c_[i][d3],1,12)local dc=0;for cE=1,d9 do if c_[i][d3]==f(unit[d8 .."_"..cE].getData()).name then dc=cE;break end end;if a_ or d0[i]==nil or d1[i]==nil then local dd=0;local de=0;local df=0;local dg=0;local bE=system.getTime()if dc~=0 then d1[i]=f(unit[d8 .."_"..dc].getData()).percentage;d0[i]=f(unit[d8 .."_"..dc].getData()).timeLeft;if d0[i]=="n/a"then d0[i]=0 end else df=m(c_[i][d2])-c_[i][d5]dd=c_[i][d4]d1[i]=d(0.5+df*100/dd)de=c_[i][d6]dg=c_[i][d7]if de<=df then d0[i]=0 else d0[i]=d(0.5+df/((de-df)/(bE-dg)))end;c_[i][d6]=df;c_[i][d7]=bE end end;if bI==cY then bI=e("%s %d",cZ,i)end;if dc==0 then bI=bI.." *"end;local dh;if d0[i]==0 then dh="n/a"else dh=FormatTimeString(d0[i])end;if d1[i]~=nil then local cA=d(d1[i]*2.55)local cB=e("rgb(%d,%d,%d)",255-cA,cA,0)local di=""if dh~="n/a"and d0[i]<120 or d1[i]<5 then if a_ then di=[[class="red"]]end end;cn[#cn+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bT,da,di,bI,bT,db,cB,d1[i],dh)da=da+30;db=db+30 end end end;cn[#cn+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bg)bg=vec3(bg)local ct=-math.deg(math.atan(bg.y,bg.z))+180;ct=ct-90;if ct<0 then ct=360+ct end;if ct>180 then ct=-180+ct-180 end;return-ct end;function getRelativeYaw(bg)bg=vec3(bg)local dj=math.deg(math.atan(bg.y,bg.x))-90;if dj<-180 then dj=360+dj end;return dj end;function AlignToWorldVector(dk,dl,dm)if not ao or not bm or al~=-1 or bh<H then local dn=dm;if dn==nil then dn=DampingMultiplier end;if dl==nil then dl=aD end;dk=vec3(dk):normalize()local dp=vec3(core.getConstructWorldOrientationForward())-dk;local dq=-getMagnitudeInDirection(dp,core.getConstructWorldOrientationRight())*aC;local dr=-getMagnitudeInDirection(dp,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dq/2 end;if ay==0 then ay=dr/2 end;if math.abs(dq)<0.1 then O=O-dq*2 else O=O-(dq+(dq-ax)*dn)end;if math.abs(dr)<0.1 then N=N+dr*2 else N=N+dr+(dr-ay)*dn end;ax=dq;ay=dr;if math.abs(dq)<dl and math.abs(dr)<dl then return true end;return false elseif bm and al==-1 then dk=vec3(core.getWorldVelocity())local dn=dm;if dn==nil then dn=DampingMultiplier end;if dl==nil then dl=aD end;dk=vec3(dk):normalize()local dp=vec3(core.getConstructWorldOrientationForward())-dk;local dq=-getMagnitudeInDirection(dp,core.getConstructWorldOrientationRight())*aC;local dr=-getMagnitudeInDirection(dp,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dq/2 end;if ay==0 then ay=dr/2 end;if math.abs(dq)<0.1 then O=O-dq*5 else O=O-(dq+(dq-ax)*dn)end;if math.abs(dr)<0.1 then N=N+dr*5 else N=N+dr+(dr-ay)*dn end;ax=dq;ay=dr;if math.abs(dq)<dl and math.abs(dr)<dl then return true end;return false end end;function getAPEnableName()local bI=AutopilotTargetName;if bI==nil then local ds,dt=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())bI=CustomTarget.name.." "..ds..dt end;if bI==nil then bI="None"end;return"Engage Autopilot: "..bI end;function getAPDisableName()local bI=AutopilotTargetName;if bI==nil then bI=CustomTarget.name end;if bI==nil then bI="None"end;return"Disable Autopilot: "..bI end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then V="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then V="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not I then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then V="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;V="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local du,dv=getDistanceDisplayString(HoldAltitude)V="Beginning Re-entry.  Target speed: "..bt.." Target Altitude: "..du..dv end;AutoTakeoff=false end;function SetupButtons()local dw=50;local dx=260;local dy=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dx,dw,aE/2-dx/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then V="Brakes in Toggle Mode"else V="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dx,dw,aE/2-dx/2-50-dy.width,aF/2-dw+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dx,dw,aE/2-dx/2+dy.width+50,aF/2-dw+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dz=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dz.height,dz.x+dz.width+30,dz.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dz.height,dz.x+dz.width+30,dz.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dz.height,dz.x-200-30,dz.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dw=60;dx=300;local bT=10;local bU=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dx,dw,bT,bU,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dx,dw,bT+dx+20,bU,function()return AltitudeHold end,ToggleAltitudeHold)bU=bU+dw+20;MakeButton("Engage Autoland","Disable Autoland",dx,dw,bT,bU,function()return AutoLanding end,ToggleAutoLanding)if VertTakeOffEngine then MakeButton("Engage Vertical Takeoff","Disable Vertical Takeoff",dx,dw,bT+dx+20,bU,function()return VertTakeOff end,ToggleAutoTakeoff)else MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",dx,dw,bT+dx+20,bU,function()return AutoTakeoff end,ToggleAutoTakeoff)end;bU=bU+dw+20;MakeButton("Show Orbit Display","Hide Orbit Display",dx,dw,bT,bU,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then V="Orbit Display Enabled"else V="Orbit Display Disabled"end end)bU=bU+dw+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dx,dw,bT,bU,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dx,dw,bT+dx+20,bU,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)bU=bU+dw+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dx,dw,bT,bU,function()return T end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dx,dw,bT+dx+20,bU,function()return aS end,function()aS=not aS;if aS then V="Repair Arrows Enabled"else V="Repair Arrows Diabled"end end,function()return o()==1 end)bU=bU+dw+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dx,dw,bT,bU,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bU=bU+dw+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dx*2,dw,bT,bU,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dA=Nav.axisCommandManager:getAxisCommandType(0)local dB="TRAVEL"if dA==1 then dB="CRUISE"end;if Autopilot then dB="AUTOPILOT"end;return dB end;function UpdateHud(cn)local c7=ap;local bg=core.getVelocity()local bN=vec3(bg):len()local cs=vec3(core.getWorldVertical())local cq=vec3(core.getConstructWorldOrientationForward())local cr=vec3(core.getConstructWorldOrientationRight())local dC=vec3(core.getConstructWorldOrientationUp())local dD=getRoll(cs,cq,cr)local dE=dD/180*math.pi;local dF=math.cos(dE)local dG=math.sin(dE)local ct=getPitch(cs,cq,cr*dF+dC*dG)local dH=dD;local dI=ct;local dJ=j()local dK=d(unit.getThrottle())local dL=bN*3.6;local dM=unit.getAxisCommandValue(0)local dN=ConvertResolutionX(1770)local dO=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then dM=y;dK=y*100 end;local dB=GetFlightStyle()local dP="ROLL"local dQ=unit.getClosestPlanetInfluence()>0;if dK==nil then dK=0 end;if not dQ then if bN>5 then ct=getRelativePitch(bg)dD=getRelativeYaw(bg)else ct=0;dD=0 end;dP="YAW"end;if w>50000 and not ao then local dR;if w>200000 then dR=round(w/200000,2).." su"else dR=round(w/1000,1).." km"end;cn[#cn+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],dN,dO,dR)end;cn[#cn+1]=ag;cn[#cn+1]=az;cn[#cn+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cn,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cn,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cn,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cn,c7)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dQ then DrawRollLines(cn,centerX,centerY,dH,dP,dQ)DrawArtificialHorizon(cn,dI,dH,centerX,centerY,dQ,d(getRelativeYaw(bg)),bN)else DrawRollLines(cn,centerX,centerY,dD,dP,dQ)DrawArtificialHorizon(cn,ct,dD,centerX,centerY,dQ,d(dD),bN)end;DrawAltitudeDisplay(cn,c7,dQ)DrawPrograde(cn,bg,bN,centerX,centerY)end end;DrawThrottle(cn,dB,dK,dM)DrawSpeed(cn,dL)DrawWarnings(cn)DisplayOrbitScreen(cn)if screen_2 then local cb=vec3(core.getConstructWorldPos())local bT=960+cb.x/b4;local bU=450+cb.y/b5;screen_2.moveContent(b6,(bT-80)/19.2,(bU-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cn)if not v then s=PvPR;u=PvPG;t=PvPB else s=SafeR;u=SafeG;t=SafeB end;au=[[rgb(]]..d(s+0.5)..","..d(u+0.5)..","..d(t+0.5)..[[)]]av=[[rgb(]]..d(s*0.9+0.5)..","..d(u*0.9+0.5)..","..d(t*0.9+0.5)..[[)]]local dS=au;local dT=av;local dU=au;local dV=av;if IsInFreeLook()and not brightHud then dS=[[rgb(]]..d(s*0.4+0.5)..","..d(u*0.4+0.5)..","..d(t*0.3+0.5)..[[)]]dT=[[rgb(]]..d(s*0.3+0.5)..","..d(u*0.3+0.5)..","..d(t*0.2+0.5)..[[)]]end;cn[#cn+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dS,dS,dU,dU,dT,dT,dV,dV,ResolutionX,ResolutionY)end;function HUDEpilogue(cn)cn[#cn+1]="</svg>"end;function DrawSpeed(cn,dL)local dW=throtPosY-10;local dX=throtPosX+10;cn[#cn+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dW=75 end;cn[#cn+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dX,dW,d(dL))end;function DrawOdometer(cn,a7,TotalDistanceTravelled,dB,a8,dJ)local dY=ConvertResolutionX(1240)local dZ=ConvertResolutionY(55)local d_=dZ+10;local dJ=j()local bK=core.g()local e0=0;local e1=0;local e2=0;RefreshLastMaxBrake(bK)if ao then e2=LastMaxBrakeInAtmo else e2=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local e3=vec3(core.getWorldAcceleration()):len()/9.80665;if bK>0.1 then e1=aM*bK;e0=maxThrust/bK end;cn[#cn+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dY=ConvertResolutionX(1120)dZ=ConvertResolutionY(55)d_=dZ+10 elseif ao then local e4=ConvertResolutionX(770)cn[#cn+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],e4,dZ,e4,d_,dJ)end;cn[#cn+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dY,dZ,dY,d_,bK/9.80665,dY,dZ+20,dY,d_+20,e3)cn[#cn+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cn[#cn+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),e2/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dB)if bK>0.1 then cn[#cn+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),e0/1000,ConvertResolutionX(1240),ConvertResolutionY(20),e1/1000)else cn[#cn+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cn[#cn+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dB)end;cn[#cn+1]="</g>"end;function DrawThrottle(cn,dB,dK,dM)dK=math.floor(dK+0.5)local da=throtPosY+10;local db=throtPosY+20;if o()==1 and not RemoteHud then da=55;db=65 end;local e5="CRUISE"local unit="km/h"local e6=dM;if dB=="TRAVEL"or dB=="AUTOPILOT"then e5="THROT"unit="%"e6=dK;local e7="dim"if dK<0 then e7="red"end;cn[#cn+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],e7,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dK),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cn[#cn+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%d %s</text>
                </g>
            </g>]],throtPosX+10,da,e5,throtPosX+10,db,e6,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and A then dK=math.floor(B*100+0.5)local e7="red"if dK<0 then e7="red"end;cn[#cn+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],e7,1-math.abs(dK),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cn[#cn+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,da+40,"LIMIT",throtPosX+10,db+40,dK,"%")end;if ao and AtmoSpeedAssist or Reentry then cn[#cn+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,da-40,"LIMIT: ",bt.." km/h")elseif not ao and Autopilot then cn[#cn+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,da-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cn,c7)if c7<200000 and not ao or c7 and ao then local e8=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local e9=0;if math.abs(e8)>1 then e9=45*math.log(math.abs(e8),10)if e8<0 then e9=-e9 end end;cn[#cn+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(e8),d(e9))end end;function getHeading(cH)local ea=-vec3(core.getWorldVertical())cH=cH-cH:project_on(ea)local eb=vec3(0,0,1)eb=eb-eb:project_on(ea)local ec=eb:cross(ea)local e9=eb:angle_between(cH)*constants.rad2deg;if cH:dot(ec)<0 then e9=360-e9 end;return e9 end;function DrawRollLines(cn,centerX,centerY,dH,dP,dQ)local ed=circleRad;local ee=20;ee=d(ee)local ef=d(dH)if dQ then for i=-45,45,5 do local eg=i;cn[#cn+1]=e([[<g transform="rotate(%f,%d,%d)">]],eg,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cn[#cn+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+ed+ee-len,centerX,centerY+ed+ee)end;cn[#cn+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+ed+ee-35,dP,centerX,centerY+ed+ee-25,ef)cn[#cn+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dH,centerX,centerY)cn[#cn+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+ed+ee-20,centerX+5,centerY+ed+ee-20,centerX,centerY+ed+ee-15)cn[#cn+1]="</g>"end;local dj=ef;if dQ then dj=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local eh=20;local ei=d(dj)local ej=0;local ek=centerY+ed+ee+20;local el=centerX;if dP~="YAW"then ek=ConvertResolutionY(130)el=ConvertResolutionX(960)end;local em=[[<path class="txttick line" d="]]for i=d(ei-(eh+10)-ei%5+0.5),d(ei+eh+10+ei%5+0.5),5 do local bT=el+-i*5+dj*5;if i%10==0 then ej=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;cn[#cn+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bT+5,ek-12,p)elseif i%5==0 then ej=5 end;if ej==10 then em=e([[%s M %f %f v %d]],em,bT,ek-5,ej)else em=e([[%s M %f %f v %d]],em,bT,ek-2.5,ej)end end;cn[#cn+1]=em..[["/>]]cn[#cn+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],el-5,ek+10,el+5,ek+10,el,ek+5)if dQ then dP="HDG"end;cn[#cn+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],el,ek+25,ei,el,ek+35,dP)end;function DrawArtificialHorizon(cn,dI,dH,centerX,centerY,dQ,en,bN)local ed=circleRad;local eo=d(ed*3/5)if ed>0 then local ep=d(dI)local len=0;local em=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dH,centerX,centerY)if not ao then em=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cn[#cn+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],ed-1,centerX,centerY)cn[#cn+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ep-30-ep%5+0.5),d(ep+30+ep%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bU=centerY+-i*5+dI*5;if len==30 then em=e([[%s M %d %f h %d]],em,centerX-eo-len,bU,len)if ao then cn[#cn+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dH,centerX,centerY,centerX-eo+10,bU,i)cn[#cn+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dH,centerX,centerY,centerX+eo-10,bU,i)if i==0 or i==180 or i==-180 then cn[#cn+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dH,centerX,centerY,centerX-eo+20,bU,eo*2-40)end else cn[#cn+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eo+10,bU,i)cn[#cn+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eo-10,bU,i)end;em=e([[%s M %d %f h %d]],em,centerX+eo,bU,len)else em=e([[%s M %d %f h %d]],em,centerX-eo-len,bU,len)em=e([[%s M %d %f h %d]],em,centerX+eo,bU,len)end end;cn[#cn+1]=em..[["/>]]local eq="PITCH"if not dQ then eq="REL PITCH"end;if dI>90 and not ao then dI=90-(dI-90)elseif dI<-90 and not ao then dI=-90-(dI+90)end;if ed>200 then if ao then if bN>H then cn[#cn+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,en)end;cn[#cn+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dH,centerX,centerY)else cn[#cn+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cn[#cn+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eo+25,centerY-5,centerX-eo+20,centerY,centerX-eo+25,centerY+5,centerX-eo+50,centerY+4,ep)cn[#cn+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eo-25,centerY-5,centerX+eo-20,centerY,centerX+eo-25,centerY+5,centerX+eo-30,centerY+4,ep)cn[#cn+1]="</g>"end;local er=d(ed/3)cn[#cn+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-er,centerY,ed-er)if not ao and dQ then cn[#cn+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dH,centerX,centerY,centerX-eo+10,centerY,eo*2-20)end;cn[#cn+1]="</g>"if ed<200 then if ao and bN>H then cn[#cn+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ed,eq,centerX,centerY-ed+10,ep,centerX,centerY-15,"Yaw",centerX,centerY+20,en)else cn[#cn+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-ed,eq,centerX,centerY-ed+15,ep)end end end end;function DrawAltitudeDisplay(cn,c7,dQ)local es=altMeterX;local et=altMeterY;local eu=78;local ev=19;local ew=AboveGroundLevel()if ew~=-1 then table.insert(cn,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],es+eu,et+ev+20,ew))end;if dQ and(c7<200000 and not ao or c7 and ao)then table.insert(cn,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],es-1,et-4,eu+2,ev+6,es+1,et-1,eu-4,ev))local cl=0;local ex=1;local ey=0;local ez=c7<0;local eA=9;if ez then eA=0 end;local c7=math.abs(c7)while cl<6 do local eB=11;local eC=16;local eD=9;local eE=14;local di="altsm"if cl>2 then eC=eC+3;eB=eB+2;eE=eE+2;eD=eD-6;di="altbig"end;if ez then di=di.." red"end;local eF=c7/ex%10;local eG=d(eF)local eH=d((eG+1)%10)local eI=ey;if cl==0 then eI=eF-eG;if ez then eI=1-eI end end;if ez and(cl==0 or ey~=0)then local eJ=eH;eH=eG;eG=eJ end;local eK=eC*(eI-1)local eL=eK+eC;local bT=es+eD+(6-cl)*eB;local bU=et+eE;table.insert(cn,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],di,bT,bU+eK,eH,bT,bU+eL,eG))cl=cl+1;ex=ex*10;if eG==eA then ey=eI else ey=0 end end;table.insert(cn,[[</g></g>]])end end;function DrawPrograde(cn,bg,bN,centerX,centerY)if bN>5 and not ao or bN>H then local ed=circleRad;local eM=20;local eN=20;local eO=vec3(bg)local eP=getRelativePitch(eO)local eQ=getRelativeYaw(eO)local eR=14;local eS=eR/2;local eT=-eQ/eN*ed;local eU=eP/eM*ed;local bT=centerX+eT;local bU=centerY+eU;local ae=math.sqrt(eT^2+eU^2)local eV=[[<circle
                cx="]]..bT..[["
                cy="]]..bU..[["
                r="]]..eS/eR..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bT..[["
                cy="]]..bU..[["
                r="]]..eS..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bT-eR..[[,]]..bU..[[ h ]]..eS..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bT+eS..[[,]]..bU..[[ h ]]..eS..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bT..[[,]]..bU-eR..[[ v ]]..eS..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<ed then cn[#cn+1]=eV else local e9=math.atan(eU,eT)local eW=4;local eX=centerX+ed*math.cos(e9)local eY=centerY+ed*math.sin(e9)cn[#cn+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',e9*180/math.pi,eX,eY,eX-eW,eY-eW/2,eW*2,eW,eX+eW,eY-eW,eW,eW,-eW,eW)end;if not ao then eP=getRelativePitch(-eO)eQ=getRelativeYaw(-eO)eT=-eQ/eN*ed;eU=eP/eM*ed;bT=centerX+eT;bU=centerY+eU;ae=math.sqrt(eT^2+eU^2)if ae<ed then local eZ=[[<circle
                        cx="]]..bT..[["
                        cy="]]..bU..[["
                        r="]]..eS..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bT..[[,]]..bU-eR..[[ v ]]..eS..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bT..[[,]]..bU..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bT..[[,]]..bU..[[)" />
                     <path
                        d="M ]]..bT-eS..[[,]]..bU..[[ h ]]..eR..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bT..[[,]]..bU..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bT..[[,]]..bU..[[)"/>]]cn[#cn+1]=eZ end end end end;function DrawWarnings(cn)cn[#cn+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cn[#cn+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cn[#cn+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cn[#cn+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cn[#cn+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local e_=ConvertResolutionX(960)local f0=ConvertResolutionY(860)local f1=ConvertResolutionY(880)local f2=ConvertResolutionY(900)local f3=ConvertResolutionY(960)local f4=ConvertResolutionY(200)local f5=ConvertResolutionY(150)local f6=ConvertResolutionY(960)if o()==1 and not RemoteHud then f0=ConvertResolutionY(135)f1=ConvertResolutionY(155)f2=ConvertResolutionY(175)f4=ConvertResolutionY(115)f5=ConvertResolutionY(95)end;if BrakeIsOn then cn[#cn+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],e_,f0)elseif z>0 then cn[#cn+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],e_,f0,z)end;if ao and bm and hoverDetectGround()==-1 then cn[#cn+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],e_,f4+50)end;if as then cn[#cn+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],e_,f6)end;if GearExtended then if L then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],e_,f1)else cn[#cn+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],e_,f1)end;local ds,dt=getDistanceDisplayString(Nav:getTargetGroundAltitude())cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],e_,f2,ds..dt)end;if Z then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],e_,f3+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e_,f4+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cn[#cn+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e_,f4+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],e_,f4+20,AutopilotStatus)elseif LockPitch~=nil then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],e_,f4+20,d(LockPitch))elseif T then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],e_,f4+20)elseif Reentry then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],e_,f4+20)end;local f7,f8,f9=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bg:normalize(),function(fa)if fa.noAtmosphericDensityAltitude>0 then return fa.radius+fa.noAtmosphericDensityAltitude else return fa.radius+fa.surfaceMaxAltitude*1.5 end end)local fb=f8;if f9~=nil and f8~=nil then fb=math.min(f9,f8)end;if AltitudeHold then if AutoTakeoff then local ds,dt=getDistanceDisplayString(HoldAltitude)cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],e_,f4,ds..dt)if BrakeIsOn then cn[#cn+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],e_,f4+50)end else local ds,dt=getDistanceDisplayString2(HoldAltitude)cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],e_,f4,ds..dt)end end;if VertTakeOff then if j()>0.1 then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],e_,f4)elseif j()<0.09 and j()>0.01 then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory and leaving atmosphere</text>]],e_,f4)elseif j()<0.01 then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">Proceeding to %s orbit</text>]],e_,f4,VertTargetPlanet.name)end end;if BrakeLanding then if StrongBrakes then cn[#cn+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],e_,f4)else cn[#cn+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],e_,f4)end end;if ProgradeIsOn then cn[#cn+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],e_,f4)end;if RetrogradeIsOn then cn[#cn+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],e_,f4)end;if TurnBurn then cn[#cn+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],e_,f5)elseif fb~=nil and j()==0 then local ds,dt=getDistanceDisplayString(fb)local travelTime=b9.computeTravelTime(bh,0,fb)local fc="Collision"if f7.noAtmosphericDensityAltitude>0 then fc="Atmosphere"end;cn[#cn+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],e_,f5,f7.name,fc,FormatTimeString(travelTime),ds..dt)end;if VectorToTarget then cn[#cn+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],e_,f4+30,VectorStatus)end;cn[#cn+1]="</g>"end;function DisplayOrbitScreen(cn)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fd=OrbitMapX;local fe=OrbitMapY;local ff=OrbitMapSize;local fg=4;fe=fe+fg;local fh=15;local bT=fd+ff+fd/2+fg;local bU=fe+ff/2+5+fg;local fi,fj,fk,fl;fi=ff/4;fl=0;cn[#cn+1]=[[<g class="pbright txtorb txtmid">]]cn[#cn+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ff+fd*2,ff+fe,fg,fg)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fk=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fi*2)fj=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fk*(1-orbit.eccentricity)fl=fi-orbit.periapsis.altitude/fk-planet.radius/fk;local fm=""if orbit.periapsis.altitude<=0 then fm='redout'end;cn[#cn+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fm,fd+ff/2+fl+fg,fe+ff/2+fg,fi,fj)cn[#cn+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fd+ff/2+fg,fe+ff/2+fg,planet.radius/fk)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cn[#cn+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bT-35,bU-5,fd+ff/2+fi+fl,bU-5)cn[#cn+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bT,bU)bU=bU+fh;local ds,dt=getDistanceDisplayString(orbit.apoapsis.altitude)cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,ds..dt)bU=bU+fh;cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,FormatTimeString(orbit.timeToApoapsis))bU=bU+fh;cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,getSpeedDisplayString(orbit.apoapsis.speed))end;bU=fe+ff/2+5+fg;bT=fd-fd/2+10+fg;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cn[#cn+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bT+35,bU-5,fd+ff/2-fi+fl,bU-5)cn[#cn+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bT,bU)bU=bU+fh;local ds,dt=getDistanceDisplayString(orbit.periapsis.altitude)cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,ds..dt)bU=bU+fh;cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,FormatTimeString(orbit.timeToPeriapsis))bU=bU+fh;cn[#cn+1]=e([[<text x="%f" y="%f">%s</text>]],bT,bU,getSpeedDisplayString(orbit.periapsis.speed))end;cn[#cn+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fd+ff/2+fg,20+fg,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fn=orbit.timeToApoapsis/orbit.period*2*math.pi;local fo=fi*math.cos(fn)local fp=fj*math.sin(fn)cn[#cn+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fd+ff/2+fo+fl+fg,fe+ff/2+fp+fg)end;cn[#cn+1]=[[</g>]]end end;function getDistanceDisplayString(ae)local fq=ae>100000;local bx,dt=""if fq then bx,dt=round(ae/1000/200,1),"SU"elseif ae<1000 then bx,dt=round(ae,1),"m"else bx,dt=round(ae/1000,1),"Km"end;return bx,dt end;function getDistanceDisplayString2(ae)local fq=ae>100000;local bx,dt=""if fq then bx,dt=round(ae/1000/200,2)," SU"elseif ae<1000 then bx,dt=round(ae,2)," M"else bx,dt=round(ae/1000,2)," KM"end;return bx,dt end;function getSpeedDisplayString(bN)return d(round(bN*3.6,0)+0.5).." km/h"end;function FormatTimeString(fr)local fs=0;local ft=0;local fu=0;if fr<60 then fr=d(fr)elseif fr<3600 then fs=d(fr/60)fr=d(fr%60)elseif fr<86400 then ft=d(fr/3600)fs=d(fr%3600/60)else fu=d(fr/86400)ft=d(fr%86400/3600)end;if fu>0 then return fu.."d "..ft.."h "elseif ft>0 then return ft.."h "..fs.."m "elseif fs>0 then return fs.."m "..fr.."s"elseif fr>0 then return fr.."s"else return"0s"end end;function getMagnitudeInDirection(dk,fv)dk=vec3(dk)fv=vec3(fv):normalize()local bx=dk*fv;return bx.x+bx.y+bx.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local fw=AtlasOrdered[AutopilotTargetIndex].index;local fx=b2[0][fw]if fx.center then AutopilotTargetName=fx.name;a6=b8[0][fw]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fx;for _,bw in pairs(b8[0])do if bw.name==CustomTarget.planetname then a6=bw;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fw=AtlasOrdered[AutopilotTargetIndex].index;local fx=b2[0][fw]if fx.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fw=AtlasOrdered[AutopilotTargetIndex].index;local fx=b2[0][fw]if fx.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fy=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return fy end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bg=core.getWorldVelocity()local bN=vec3(bg):len()local fz=unit.getThrottle()/100;if AtmoSpeedAssist then fz=y end;local fA,fB=b9.computeDistanceAndTime(vec3(bg):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fz,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fC;if not TurnBurn and bN>0 then _,fC=GetAutopilotBrakeDistanceAndTime(bN)else _,fC=GetAutopilotTBBrakeDistanceAndTime(bN)end;local fD=0;local fE=0;if AutopilotCruising or not Autopilot and bN>5 then fE=b9.computeTravelTime(bN,0,AutopilotDistance)elseif a0+fA<AutopilotDistance then fD=AutopilotDistance-(a0+fA)fE=b9.computeTravelTime(8333.0556,0,fD)else local fF=(AutopilotDistance-a0)/fA;fA=AutopilotDistance-a0;fB=fB*fF end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fE elseif AutopilotBraking then return fC elseif AutopilotCruising then return fE+fC else return fB+a1+fE end end;function GetAutopilotBrakeDistanceAndTime(bN)if not ao then RefreshLastMaxBrake()return b9.computeDistanceAndTime(bN,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bN,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bN)RefreshLastMaxBrake()return b9.computeDistanceAndTime(bN,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fG=-1;local fH=-1;if vBooster then fG=vBooster.distance()end;if hover then fH=hover.distance()end;if fG~=-1 and fH~=-1 then if fG<fH then return fG else return fH end elseif fG~=-1 then return fG elseif fH~=-1 then return fH else return-1 end end;function AboveGroundLevel()local fI=-1;local fJ=hoverDetectGround()if telemeter_1 then fI=telemeter_1.getDistance()end;if fJ~=-1 and fI~=-1 then if fJ<fI then return fJ else return fI end elseif fJ~=-1 then return fJ else return fI end end;function tablelength(fK)local fL=0;for _ in pairs(fK)do fL=fL+1 end;return fL end;function BeginProfile(fM)ProfileTimeStart=system.getTime()end;function EndProfile(fM)local fN=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fN;ProfileCount=ProfileCount+1;if fN>ProfileTimeMax then ProfileTimeMax=fN end;if fN<ProfileTimeMin then ProfileTimeMin=fN end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fO=ProfileTimeSum;local fP=ProfileTimeSum/ProfileCount;local fQ=ProfileTimeMin;local fR=ProfileTimeMax;local fS=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fO,fP,fQ,fR,fS))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fT=radar_1.getEntries()local fU=radar_1.getData()local fV=ConvertResolutionX(1770)local fW=ConvertResolutionY(330)if#fT>0 then local target=fU:find('identifiedConstructs":%[%]')if target==nil and perisPanelID==nil then ah=1;ToggleRadarPanel()end;if target~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;af=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fV,fW,#fT)local fX={}for bv,bw in pairs(fT)do if radar_1.hasMatchingTransponder(bw)==1 then table.insert(fX,bw)end end;if#fX>0 then local bU=ConvertResolutionY(15)local bT=ConvertResolutionX(1370)af=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,bT,bU)for bv,bw in pairs(fX)do bU=bU+20;af=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,bT,bU,radar_1.getConstructName(bw))end end else local fY;fY=fU:find('worksInEnvironment":false')if fY then af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fV,fW)else af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fV,fW)end;if radarPanelID~=nil then ah=0;ToggleRadarPanel()end end end end;function DisplayMessage(cn,ds)if ds~="empty"then cn[#cn+1]=[[<text class="msg" x="50%%" y="310" >]]for fZ in string.gmatch(ds,"([^\n]+)")do cn[#cn+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fZ)end;cn[#cn+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bE=system.getTime()local bg=vec3(core.getWorldVelocity())local dL=vec3(bg):len()local f_=bE-ar;if dL>1.38889 then dL=dL/1000;local g0=dL*(bE-ar)TotalDistanceTravelled=TotalDistanceTravelled+g0;a7=a7+g0 end;a8=a8+f_;TotalFlightTime=TotalFlightTime+f_;ar=bE end;function composeAxisAccelerationFromTargetSpeedV(g1,g2)local g3=vec3()local g4=vec3()if g1==axisCommandId.longitudinal then g3=vec3(core.getConstructOrientationForward())g4=vec3(core.getConstructWorldOrientationForward())elseif g1==axisCommandId.vertical then g3=vec3(core.getConstructOrientationUp())g4=vec3(core.getConstructWorldOrientationUp())elseif g1==axisCommandId.lateral then g3=vec3(core.getConstructOrientationRight())g4=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g5=vec3(core.getWorldGravity())local g6=g5:dot(g4)local g7=vec3(core.getWorldAirFrictionAcceleration())local g8=g7:dot(g4)local g9=vec3(core.getVelocity())local ga=g9:dot(g3)local gb=g2*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gb-ga)local gc=targetSpeedPID2:get()local gd=(gc-g8-g6)*g4;return gd end;function composeAxisAccelerationFromTargetSpeed(g1,g2)local g3=vec3()local g4=vec3()if g1==axisCommandId.longitudinal then g3=vec3(core.getConstructOrientationForward())g4=vec3(core.getConstructWorldOrientationForward())elseif g1==axisCommandId.vertical then g3=vec3(core.getConstructOrientationUp())g4=vec3(core.getConstructWorldOrientationUp())elseif g1==axisCommandId.lateral then g3=vec3(core.getConstructOrientationRight())g4=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local g5=vec3(core.getWorldGravity())local g6=g5:dot(g4)local g7=vec3(core.getWorldAirFrictionAcceleration())local g8=g7:dot(g4)local g9=vec3(core.getVelocity())local ga=g9:dot(g3)local gb=g2*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gb-ga)local gc=targetSpeedPID:get()local gd=(gc-g8-g6)*g4;return gd end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bv,bw in pairs(b2[0])do if aG==nil or bw.center.x<aG then aG=bw.center.x end;if aH==nil or bw.center.x>aH then aH=bw.center.x end;if aI==nil or bw.center.y<aI then aI=bw.center.y end;if aJ==nil or bw.center.y>aJ then aJ=bw.center.y end end;b3=""local ge=1.1*(aH-aG)/1920;local gf=1.4*(aJ-aI)/1080;for bv,bw in pairs(b2[0])do local bT=960+bw.center.x/ge;local bU=540+bw.center.y/gf;b3=b3 ..'<circle cx="'..bT..'" cy="'..bU..'" r="'..bw.radius/ge*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bw.name,"Moon")and not string.match(bw.name,"Sanctuary")and not string.match(bw.name,"Space")then b3=b3 .."<text x='"..bT.."' y='"..bU+bw.radius/ge*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bw.name.."</text>"end end;local cb=vec3(core.getConstructWorldPos())local bT=960+cb.x/ge;local bU=540+cb.y/gf;b3=b3 ..'<circle cx="'..bT..'" cy="'..bU..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..bT.."' y='"..bU-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=ge;b5=gf;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cb=vec3(core.getConstructWorldPos())local bT=960+cb.x/ge;local bU=540+cb.y/gf;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((bT-80)/19.20,(bU-80)/10.80,b3)end end;function PlanetRef()local function gg(gh)return type(gh)=='number'end;local function gi(gh)return type(tonumber(gh))=='number'end;local function gj(gk)return type(gk)=='table'end;local function gl(gm)return type(gm)=='string'end;local function gn(bw)return gj(bw)and gg(bw.x and bw.y and bw.z)end;local function go(gp)return gj(gp)and gg(gp.latitude and gp.longitude and gp.altitude and gp.bodyId and gp.systemId)end;local gq=math.pi/180;local gr=180/math.pi;local epsilon=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cc='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gs=utils.clamp;local function float_eq(c1,c2)if c1==0 then return math.abs(c2)<1e-09 end;if c2==0 then return math.abs(c1)<1e-09 end;return math.abs(c1-c2)<math.max(math.abs(c1),math.abs(c2))*epsilon end;local function gt(gh)local bx=string.gsub(string.reverse(e('%.4f',gh)),'^0*%.?','')return bx==''and'0'or string.reverse(bx)end;local function gu(gv)if gn(gv)then return e('{x=%.3f,y=%.3f,z=%.3f}',gv.x,gv.y,gv.z)end;if gj(gv)and not getmetatable(gv)then local gw={}local gx=next(gv)if type(gx)=='nil'or gx==1 then gw=gv else for bv,bw in pairs(gv)do local e6=gu(bw)if type(bv)=='number'then table.insert(gw,e('[%s]=%s',bv,e6))else table.insert(gw,e('%s=%s',bv,e6))end end end;return e('{%s}',table.concat(gw,','))end;if gl(gv)then return e("'%s'",gv:gsub("'",[[\']]))end;return tostring(gv)end;local gy={}gy.__index=gy;gy.__tostring=function(gv,gz)local gA={}for bv in pairs(gv)do table.insert(gA,bv)end;table.sort(gA)local gw={}for _,bv in ipairs(gA)do local e6=gu(gv[bv])if type(bv)=='number'then table.insert(gw,e('[%s]=%s',bv,e6))else table.insert(gw,e('%s=%s',bv,e6))end end;if gz then return e('%s%s',gz,table.concat(gw,',\n'..gz))end;return e('{%s}',table.concat(gw,','))end;gy.__eq=function(gB,gC)return gB.planetarySystemId==gC.planetarySystemId and gB.bodyId==gC.bodyId and float_eq(gB.radius,gC.radius)and float_eq(gB.center.x,gC.center.x)and float_eq(gB.center.y,gC.center.y)and float_eq(gB.center.z,gC.center.z)and float_eq(gB.GM,gC.GM)end;local function gD(cd,ce,gE,c4,gF)assert(gi(cd),'Argument 1 (planetarySystemId) must be a number:'..type(cd))assert(gi(ce),'Argument 2 (bodyId) must be a number:'..type(ce))assert(gi(gE),'Argument 3 (radius) must be a number:'..type(gE))assert(gj(c4),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c4))assert(gi(gF),'Argument 5 (GM) must be a number:'..type(gF))return setmetatable({planetarySystemId=tonumber(cd),bodyId=tonumber(ce),radius=tonumber(gE),center=vec3(c4),GM=tonumber(gF)},gy)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gG)return e('::pos{%d,%d,%s,%s,%s}',gG.systemId,gG.bodyId,gt(gG.latitude*gr),gt(gG.longitude*gr),gt(gG.altitude))end;MapPosition.__eq=function(gB,gC)return gB.bodyId==gC.bodyId and gB.systemId==gC.systemId and float_eq(gB.latitude,gC.latitude)and float_eq(gB.altitude,gC.altitude)and(float_eq(gB.longitude,gC.longitude)or float_eq(gB.latitude,math.pi/2)or float_eq(gB.latitude,-math.pi/2))end;local function gH(gI,ce,c8,c9,c7)local cd=gI;if gl(gI)and not c9 and not c7 and not ce and not c8 then cd,ce,c8,c9,c7=string.match(gI,cc)assert(cd,'Argument 1 (position string) is malformed.')else assert(gi(cd),'Argument 1 (systemId) must be a number:'..type(cd))assert(gi(ce),'Argument 2 (bodyId) must be a number:'..type(ce))assert(gi(c8),'Argument 3 (latitude) must be in degrees:'..type(c8))assert(gi(c9),'Argument 4 (longitude) must be in degrees:'..type(c9))assert(gi(c7),'Argument 5 (altitude) must be in meters:'..type(c7))end;cd=tonumber(cd)ce=tonumber(ce)c8=tonumber(c8)c9=tonumber(c9)c7=tonumber(c7)if ce==0 then return setmetatable({latitude=c8,longitude=c9,altitude=c7,bodyId=ce,systemId=cd},MapPosition)end;return setmetatable({latitude=gq*gs(c8,-90,90),longitude=gq*(c9%360),altitude=c7,bodyId=ce,systemId=cd},MapPosition)end;local gJ={}gJ.__index=gJ;gJ.__tostring=function(gv,gz)local gK=gz and gz..'  'local gL={}local gA={}for bv in pairs(gv)do table.insert(gA,bv)end;table.sort(gA)for _,gM in ipairs(gA)do bdy=gv[gM]local gN=gy.__tostring(bdy,gK)if gz then table.insert(gL,e('[%s]={\n%s\n%s}',gM,gN,gz))else table.insert(gL,e('  [%s]=%s',gM,gN))end end;if gz then return e('\n%s%s%s',gz,table.concat(gL,',\n'..gz),gz)end;return e('{\n%s\n}',table.concat(gL,',\n'))end;local function gO(gP)local b2={}local pid;for _,bw in pairs(gP)do local cj=bw.planetarySystemId;if type(cj)~='number'then error('Invalid planetary system ID: '..tostring(cj))elseif pid and cj~=pid then error('Mismatch planetary system IDs: '..cj..' and '..pid)end;local gQ=bw.bodyId;if type(gQ)~='number'then error('Invalid body ID: '..tostring(gQ))elseif b2[gQ]then error('Duplicate body ID: '..tostring(gQ))end;setmetatable(bw.center,getmetatable(vec3.unit_x))b2[gQ]=setmetatable(bw,gy)pid=cj end;return setmetatable(b2,gJ)end;b7={}local function gR(gP)return setmetatable({galaxyAtlas=gP or{}},b7)end;b7.__index=function(gk,i)if type(i)=='number'then local system=gk.galaxyAtlas[i]return gO(system)end;return rawget(b7,i)end;b7.__pairs=function(gv)return function(gk,bv)local gS,nv=next(gk,bv)return gS,nv and gO(nv)end,gv.galaxyAtlas,nil end;b7.__tostring=function(gv)local gT={}for _,gU in pairs(gv or{})do local gV=gU:getPlanetarySystemId()local gW=gJ.__tostring(gU,'    ')table.insert(gT,e('  [%s]={%s\n  }',gV,gW))end;return e('{\n%s\n}\n',table.concat(gT,',\n'))end;b7.BodyParameters=gD;b7.MapPosition=gH;b7.PlanetarySystem=gO;function b7.createBodyParameters(gX,ce,gY,gZ,g_,h0,h1)assert(gi(gX),'Argument 1 (planetarySystemId) must be a number:'..type(gX))assert(gi(ce),'Argument 2 (bodyId) must be a number:'..type(ce))assert(gi(gY),'Argument 3 (surfaceArea) must be a number:'..type(gY))assert(gj(gZ),'Argument 4 (aPosition) must be an array or vec3:'..type(gZ))assert(gj(g_),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(g_))assert(gi(h0),'Argument 6 (altitude) must be in meters:'..type(h0))assert(gi(h1),'Argument 7 (gravityAtPosition) must be number:'..type(h1))local gE=math.sqrt(gY/4/math.pi)local ae=gE+h0;local h2=vec3(gZ)+ae*vec3(g_)local gF=h1*ae*ae;return gD(gX,ce,gE,h2,gF)end;b7.isMapPosition=go;function b7:getPlanetarySystem(gI)if i==nil then i=0 end;if nv==nil then nv=0 end;local gX=gI;if go(gI)then gX=gI.systemId end;if type(gX)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gJ then system=gO(system)end;return system end end end;function gJ:castIntersections(h3,fv,h4,h5)local h4=h4 or function(fa)return 1.05*fa.radius end;local h6={}if h5 then for _,i in ipairs(h5)do h6[i]=self[i]end else h5={}for bv,fa in pairs(self)do table.insert(h5,bv)h6[bv]=fa end end;local function h7(h8,h9)local ha=h6[h8].center-h3;local hb=h6[h9].center-h3;return ha:len()<hb:len()end;table.sort(h5,h7)local hc=fv:normalize()for i,cj in ipairs(h5)do local fa=h6[cj]local hd=fa.center-h3;local gE=h4(fa)local he=hd:dot(hc)local hf=he^2-(hd:len2()-gE^2)if hf>=0 then local hg=math.sqrt(hf)local f8=he+hg;local f9=he-hg;if f9>0 then return fa,f8,f9 elseif f8>0 then return fa,f8,nil end end end;return nil,nil,nil end;function gJ:closestBody(hh)assert(type(hh)=='table','Invalid coordinates.')local hi,fa;local hj=vec3(hh)for _,hk in pairs(self)do local hl=(hk.center-hj):len2()if(not fa or hl<hi)and hk.name~="Space"then fa=hk;hi=hl end end;return fa end;function gJ:convertToBodyIdAndWorldCoordinates(gI)local hm=gI;if gl(gI)then hm=gH(gI)end;if hm.bodyId==0 then return 0,vec3(hm.latitude,hm.longitude,hm.altitude)end;local hk=self:getBodyParameters(hm)if hk then return hm.bodyId,hk:convertToWorldCoordinates(hm)end end;function gJ:getBodyParameters(gI)local ce=gI;if go(gI)then ce=gI.bodyId end;assert(gi(ce),'Argument 1 (bodyId) must be a number:'..type(ce))return self[ce]end;function gJ:getPlanetarySystemId()local _,bw=next(self)return bw and bw.planetarySystemId end;function gy:convertToMapPosition(c4)assert(gj(c4),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c4))local c5=vec3(c4)if self.bodyId==0 then return setmetatable({latitude=c5.x,longitude=c5.y,altitude=c5.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c6=c5-self.center;local ae=c6:len()local c7=ae-self.radius;local c8=0;local c9=0;if not float_eq(ae,0)then local ca=math.atan(c6.y,c6.x)c9=ca>=0 and ca or 2*math.pi+ca;c8=math.pi/2-math.acos(c6.z/ae)end;return setmetatable({latitude=c8,longitude=c9,altitude=c7,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gy:convertToWorldCoordinates(gI)local hm=gl(gI)and gH(gI)or gI;if hm.bodyId==0 then return vec3(hm.latitude,hm.longitude,hm.altitude)end;assert(go(hm),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hm.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hm.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cf=math.cos(hm.latitude)return self.center+(self.radius+hm.altitude)*vec3(cf*math.cos(hm.longitude),cf*math.sin(hm.longitude),math.sin(hm.latitude))end;function gy:getAltitude(c4)return(vec3(c4)-self.center):len()-self.radius end;function gy:getDistance(c4)return(vec3(c4)-self.center):len()end;function gy:getGravity(c4)local hn=self.center-vec3(c4)local ho=hn:len2()return self.GM/ho*hn/math.sqrt(ho)end;return setmetatable(b7,{__call=function(_,...)return gR(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gl(gm)return type(gm)=='string'end;local function gj(gk)return type(gk)=='table'end;local function float_eq(c1,c2)if c1==0 then return math.abs(c2)<1e-09 end;if c2==0 then return math.abs(c1)<1e-09 end;return math.abs(c1-c2)<math.max(math.abs(c1),math.abs(c2))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c7)assert(self.body)local ae=c7+self.body.radius;if not float_eq(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gI,bg)assert(self.body)assert(gj(gI)or gl(gI))assert(gj(bg))local cb=(gl(gI)or PlanetRef.isMapPosition(gI))and self.body:convertToWorldCoordinates(gI)or vec3(gI)local bw=vec3(bg)local hp=cb-self.body.center;local hb=bw:len2()local hq=hp:len()local hr=self.body.GM;local hs=((hb-hr/hq)*hp-hp:dot(bw)*bw)/hr;local c1=hr/(2*hr/hq-hb)local ht=hs:len()local hc=hs:normalize()local hu=c1*(1-ht)local hv=c1*(1+ht)local hw=hu*hc+self.body.center;local hx=ht<=1 and-hv*hc+self.body.center or nil;local hy=math.sqrt(c1*hr*(1-ht*ht))local hz=hx and 2*math.pi*math.sqrt(c1^3/hr)local hA=math.acos(hs:dot(hp)/(ht*hq))if hp:dot(bw)<0 then hA=-(hA-2*math.pi)end;local hB=math.acos((math.cos(hA)+ht)/(1+ht*math.cos(hA)))local hC=hB;if hC<0 then hC=hC+2*math.pi end;local hD=hC-ht*math.sin(hC)local hE=0;local hF=0;local hG=0;if hz~=nil then hE=hD/(2*math.pi/hz)hF=hz-hE;hG=hF+hz/2;if hA-math.pi>0 then hF=hE;hG=hF+hz/2 end;if hG>hz then hG=hG-hz end end;return{periapsis={position=hw,speed=hy/hu,circularOrbitSpeed=math.sqrt(hr/hu),altitude=hu-self.body.radius},apoapsis=hx and{position=hx,speed=hy/hv,circularOrbitSpeed=math.sqrt(hr/hv),altitude=hv-self.body.radius},currentVelocity=bw,currentPosition=cb,eccentricity=ht,period=hz,eccentricAnomaly=hB,meanAnomaly=hD,timeToPeriapsis=hF,timeToApoapsis=hG}end;local function hH(hI)local hk=PlanetRef.BodyParameters(hI.planetarySystemId,hI.bodyId,hI.radius,hI.center,hI.GM)return setmetatable({body=hk},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hH(...)end})end;function Kinematics()local b9={}local hJ=30000000/3600;local hK=hJ*hJ;local hL=100;local function hM(bw)return 1/math.sqrt(1-bw*bw/hK)end;function b9.computeAccelerationTime(hN,hO,hP)local hQ=hJ*math.asin(hN/hJ)return(hJ*math.asin(hP/hJ)-hQ)/hO end;function b9.computeDistanceAndTime(hN,hP,hR,hS,hT,hU)hT=hT or 0;hU=hU or 0;local hV=hN<=hP;local hW=hS*(hV and 1 or-1)/hR;local hX=-hU/hR;local hY=hW+hX;if hV and hY<=0 or not hV and hY>=0 then return-1,-1 end;local hZ,h_=0,0;if hW~=0 and hT>0 then local hQ=math.asin(hN/hJ)local i0=math.pi*(hW/2+hX)local i1=hW*hT;local i2=hJ*math.pi;local bw=function(gk)local cP=(i0*gk-i1*math.sin(math.pi*gk/2/hT)+i2*hQ)/i2;local i3=math.tan(cP)return hJ*i3/math.sqrt(i3*i3+1)end;local i4=hV and function(gm)return gm>=hP end or function(gm)return gm<=hP end;h_=2*hT;if i4(bw(h_))then local i5=0;while math.abs(h_-i5)>0.5 do local gk=(h_+i5)/2;if i4(bw(gk))then h_=gk else i5=gk end end end;local i6=hN;local i7=h_/hL;for i8=1,hL do local bN=bw(i8*i7)hZ=hZ+(bN+i6)*i7/2;i6=bN end;if h_<2*hT then return hZ,h_ end;hN=i6 end;local hQ=hJ*math.asin(hN/hJ)local by=(hJ*math.asin(hP/hJ)-hQ)/hY;local i9=hK*math.cos(hQ/hJ)/hY;local ae=i9-hK*math.cos((hY*by+hQ)/hJ)/hY;return ae+hZ,by+h_ end;function b9.computeTravelTime(hN,hO,ae)if ae==0 then return 0 end;if hO>0 then local hQ=hJ*math.asin(hN/hJ)local i9=hK*math.cos(hQ/hJ)/hO;return(hJ*math.acos(hO*(i9-ae)/hK)-hQ)/hO end;if hN==0 then return-1 end;assert(hN>0,'Acceleration and initial speed are both zero.')return ae/hN end;function b9.lorentz(bw)return hM(bw)end;return b9 end;function safeZone(ia)local gE=500000;local ib,ic,id=math.huge;local ie=false;local ig=vec3({13771471,7435803,-128971})local ih=18000000;ib=vec3(ia):dist(ig)if ib<ih then return true,math.abs(ib-ih),"Safe Zone",0 end;ic=vec3(ia):dist(vec3(planet.center))if ic<gE then ie=true end;if math.abs(ic-gE)<math.abs(ib-ih)then return ie,math.abs(ic-gE),planet.name,planet.bodyId else return ie,math.abs(ib-ih),"Safe Zone",0 end end;function script.onStart()VERSION_NUMBER=5.340;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;if br~=nil then br.activate()end;if bs~=nil then bs.activate()end end)end;function SaveDataBank(ii)if dbHud_1 then if not a9 then for bv,bw in pairs(b)do dbHud_1.setStringValue(bw,g(_G[bw]))if ii and dbHud_2 then dbHud_2.setStringValue(bw,g(_G[bw]))end end;for bv,bw in pairs(a)do dbHud_1.setStringValue(bw,g(_G[bw]))if ii and dbHud_2 then dbHud_2.setStringValue(bw,g(_G[bw]))end end;c("Saved Variables to Datacore")if ii and dbHud_2 then V="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()local bG=j()if door and(bG>0 or bG==0 and ap<10000)then for _,bw in pairs(door)do bw.toggle()end end;if forcefield and(bG>0 or bG==0 and ap<10000)then for _,bw in pairs(forcefield)do bw.toggle()end end;SaveDataBank()if button then button.activate()end;if br~=nil then br.deactivate()end end;function script.onTick(ij)if ij=="tenthSecond"then if bq~=nil then bq.deactivate()end;if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then y=1;Nav.control.cancelCurrentControlMasterMode()C=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local ik=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if ik and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ds,dt=getDistanceDisplayString(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..ds..'", "unit":"'..dt..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')ds,dt=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ds..'", "unit":"'..dt..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')ds,dt=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ds..'", "unit":"'..dt..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')ds,dt=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",ds)..'", "unit":"'..dt..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ij=="oneSecond"then if bq~=nil then bq.activate()end;am=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cn={}local dB=GetFlightStyle()DrawOdometer(cn,a7,TotalDistanceTravelled,dB,a8)if ShouldCheckDamage then CheckDamage(cn)end;ag=table.concat(cn,"")collectgarbage("collect")elseif ij=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bx=json.decode(dbHud_1.getStringValue("SavedLocations"))if bx~=nil then _G["SavedLocations"]=bx;local cl=-1;local ci;for bv,bw in pairs(SavedLocations)do if bw.name and bw.name=="SatNav Location"then cl=bv;break end end;if cl~=-1 then ci=SavedLocations[cl]cl=-1;for bv,bw in pairs(b2[0])do if bw.name and bw.name=="SatNav Location"then cl=bv;break end end;if cl>-1 then b2[0][cl]=ci end;UpdateAtlasLocationsList()V=ci.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ij=="msgTick"then local cn={}DisplayMessage(cn,"empty")V="empty"unit.stopTimer("msgTick")ad=3 elseif ij=="animateTick"then bd=true;bc=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif ij=="hudTick"then local cn={}HUDPrologue(cn)if showHud then UpdateHud(cn)else DisplayOrbitScreen(cn)DrawWarnings(cn)end;HUDEpilogue(cn)cn[#cn+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if V~="empty"then DisplayMessage(cn,V)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(cn)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cn)if screen_1.getMouseState()==1 then CheckButtons()end;cn[#cn+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)elseif system.isViewLocked()==0 then if o()==1 and U then SetButtonContains()DrawButtons(cn)if not bc and not bd then local il=table.concat(cn,"")cn={}cn[#cn+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cn[#cn+1]=b3;cn[#cn+1]=il;cn[#cn+1]="</body>"bc=true;cn[#cn+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cn,"")system.setScreen(content)elseif bd then local il=table.concat(cn,"")cn={}cn[#cn+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cn[#cn+1]=b3;cn[#cn+1]=il;cn[#cn+1]="</body>"end;if not bc then cn[#cn+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end else CheckButtons()end else if not U and o()==0 then CheckButtons()if ae>DeadZone then DrawCursorLine(cn)end else SetButtonContains()DrawButtons(cn)end;cn[#cn+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],D,E,ab,ac)end;cn[#cn+1]=[[</svg></body>]]content=table.concat(cn,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ij=="apTick"then bf=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ao=j()>0;local by=system.getTime()local im=by-bn;bn=by;local cq=vec3(core.getConstructWorldOrientationForward())local cr=vec3(core.getConstructWorldOrientationRight())local io=vec3(core.getConstructWorldOrientationUp())local cs=vec3(core.getWorldVertical())local ip=vec3(core.getConstructWorldPos())local iq=core.getVelocity()local dD=getRoll(cs,cq,cr)local dE=dD/180*math.pi;local dF=math.cos(dE)local dG=math.sin(dE)local ct=getPitch(cs,cq,cr)local ir=getPitch(cs,cq,cr*dF+io*dG)local is=-math.deg(cK(io,bg,cq))local it=math.deg(cK(cr,bg,cq))bm=ao and is<-YawStallAngle or is>YawStallAngle or it<-PitchStallAngle or it>PitchStallAngle;v,w,x,_=safeZone(ip)bk=system.getMouseDeltaX()bl=system.getMouseDeltaY()if InvertMouse and not U then bl=-bl end;O=0;S=0;N=0;bg=vec3(core.getWorldVelocity())bh=vec3(bg):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bg)al=hoverDetectGround()local bK=planet:getGravity(core.getConstructWorldPos()):len()*n()bo=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and U then if not bc then ab=ab+bk;ac=ac+bl end else ab=0;ac=0 end else ab=ab+bk;ac=ac+bl;ae=math.sqrt(ab*ab+ac*ac)if not U and o()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then O=O-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then O=O-(ab+DeadZone)*MouseXSensitivity else O=0 end;if ac>0 and ac>DeadZone then N=N-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then N=N-(ac+DeadZone)*MouseYSensitivity else N=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;N=(-utils.smoothstep(bl,-100,100)+0.5)*2*J;O=(-utils.smoothstep(bk,-100,100)+0.5)*2*K else ab=0;ac=0 end end end;local iu=bh>8334;if bh>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not iu then V="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if not iu and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iu;if ao and j()>0.09 then if bh>bt/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bh<bt/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then R=1 else R=0 end;ap=core.getAltitude()if ap==0 then ap=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local iv=false;if CustomTarget~=nil then iv=AlignToWorldVector(CustomTarget.position-ip,0.01)else iv=AlignToWorldVector(vec3(bg),0.01)end;be=true;if iv and(math.abs(dD)<2 or math.abs(ir)>85)and bh>=bt/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ai=false;ak=true;Autopilot=false;BeginReentry()else if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,math.floor(bt))y=0 end elseif bh>H then AlignToWorldVector(vec3(bg),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bh>H then AlignToWorldVector(-vec3(bg))end end;if not ProgradeIsOn and ai then if j()==0 then I=true;BeginReentry()ai=false;ak=true else ai=false;ToggleAutopilot()end end;local ea=vec3(core.getWorldVertical())*-1;local e8=bg.x*ea.x+bg.y*ea.y+bg.z*ea.z;if ak and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bh*3.6>bt-100 and math.abs(e8)<20 and j()>=0.1 and(CustomTarget.position-ip):len()>2000+ap then ToggleAutopilot()ak=false end;if Autopilot and j()==0 and not ai then local iw=AutopilotTargetCoords;local ix=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;local iy=(CustomTarget.position-a6.center):normalize()local iz=iy:project_on_plane((a6.center-ip):normalize()):normalize()local iA=a6.center+iz*(a6.radius+AutopilotTargetOrbit)local iB=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if not TargetSet then if(ip-iA):len()<(ip-iB):len()then iw=iA;AutopilotTargetCoords=iw else iw=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=iw end;local cu=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)ix=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ix=true;TargetSet=true;AutopilotRealigned=true;iw=CustomTarget.position+(ip-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local iy=(ip+bg*100000-a6.center):normalize()local iz=iy:project_on_plane((a6.center-ip):normalize()):normalize()if iz:len()<1 then iy=(ip+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()iz=iy:project_on_plane((a6.center-ip):normalize()):normalize()end;iw=a6.center+iz*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=iw;TargetSet=true;ix=true;AutopilotRealigned=true;local cu=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)end end;AutopilotDistance=(vec3(iw)-vec3(core.getConstructWorldPos())):len()local f7,f8,f9=b8:getPlanetarySystem(0):castIntersections(ip,bg:normalize(),function(fa)if fa.noAtmosphericDensityAltitude>0 then return fa.radius+fa.noAtmosphericDensityAltitude else return fa.radius+fa.surfaceMaxAltitude*1.5 end end)local fb=f8;if f9~=nil and f8~=nil then fb=math.min(f9,f8)end;if fb~=nil and fb<AutopilotDistance and f7.name==a6.name then AutopilotDistance=fb end;local iv=true;local iC=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bg):normalize()*AutopilotDistance)):len()-a6.radius;local ds,dt=getDistanceDisplayString(iC)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ds..'", "unit":"'..dt..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(bh)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(bh)end;if bh>300 and AutopilotAccelerating then local dp=vec3(iw)-vec3(core.getConstructWorldPos())local iD=utils.clamp(math.deg(cK(io,bg:normalize(),dp:normalize()))*bh/500,-90,90)local iE=utils.clamp(math.deg(cK(cr,bg:normalize(),dp:normalize()))*bh/500,-90,90)if math.abs(iD)<20 and math.abs(iE)<20 then iD=iD*2;iE=iE*2 end;if math.abs(iD)<2 and math.abs(iE)<2 then iD=iD*2;iE=iE*2 end;local is=-math.deg(cK(io,cq,bg:normalize()))local it=-math.deg(cK(cr,cq,bg:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(iE-it)local iF=utils.clamp(apPitchPID:get(),-1,1)N=N+iF;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(iD-is)local iG=utils.clamp(apYawPID:get(),-1,1)O=O+iG;ix=true;if math.abs(iD)>2 or math.abs(iE)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if iC<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(iC)end end;if not AutopilotCruising and not AutopilotBraking and not ix then iv=AlignToWorldVector((iw-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iv=AlignToWorldVector(-vec3(bg):normalize())end;if AutopilotAccelerating then if not F then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true end;local fz=unit.getThrottle()if AtmoSpeedAssist then fz=y end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fz==0 and F then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;R=1 end;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)y=1 end;local _,iH=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dp,iI,iJ;if CustomTarget~=nil then dp=CustomTarget.position-ip;iI=planet:getAltitude(CustomTarget.position)iJ=math.sqrt(dp:len()^2-(ap-iI)^2)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bh<50 then V="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bh<=iH and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cu=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iH=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bh<=iH then if CustomTarget~=nil then if bg:normalize():dot(dp:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cu=zeroConvertToMapPosition(a6,CustomTarget.position)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)WaypointSet=true end else V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local cu=zeroConvertToMapPosition(a6,CustomTarget.position)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V="Autopilot completed, orbit established"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fz=unit.getThrottle()if AtmoSpeedAssist then fz=y end;if fz>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iv then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iv then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not F then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)y=round(AutopilotInterplanetaryThrottle,2)F=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then V="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"R=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;F=false;ProgradeIsOn=true;ai=true;local cu=zeroConvertToMapPosition(a6,CustomTarget.position)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)end;if T then be=true;local iE=0;local cb=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local iK=cb-vec3(core.getConstructWorldPos())local iL=vec3(iK):project_on(vec3(core.getConstructWorldOrientationForward())):len()local iM=vec3(iK):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(iL*iL+iM*iM)AlignToWorldVector(iK:normalize())local iN=40;local iO=ae<iN;local iP=100;local g2=utils.clamp((ae-iN)/2,10,iP)N=0;local iv=math.abs(O)<0.1;if iv and bh<g2 and not iO then BrakeIsOn=false;iE=-20 else BrakeIsOn=true;iE=0 end;local iQ=0;if math.abs(iE-ct)>iQ then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(iE-ct)local iF=pitchPID:get()N=iF end end;if VertTakeOff then Autopilot=false;AltitudeHold=false;if VertTargetPlanet==nil then VertTargetPlanet=planet end;local iR=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local iS=nil;local _,iT=bb(VertTargetPlanet):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-VertTargetPlanet.center):len()-VertTargetPlanet.radius)AutopilotPlanetGravity=0;AutopilotEndSpeed=iT;local function iU(bT,iV,iW,iX,iY)return iX+(bT-iV)*(iY-iX)/(iW-iV)end;if not TurnBurn then VtBrakeDistance,a1=GetAutopilotBrakeDistanceAndTime(bh)else VtBrakeDistance,a1=GetAutopilotTBBrakeDistanceAndTime(bh)end;if VtBrakeDistance<0 then VtBrakeDistance=0 end;if j()>0.08 then iS=0;be=true;BrakeIsOn=false;aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1)elseif j()<0.08 and j()>0 then aa=0;Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,0)iS=36;if iR<10 then BrakeIsOn=true;R=1 else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)else if not VertTargetSet then if VertTargetPlanet.hasAtmosphere then VertTargetOrbit=math.floor(VertTargetPlanet.radius*(TargetOrbitRadius-1)+VertTargetPlanet.noAtmosphericDensityAltitude)else VertTargetOrbit=math.floor(VertTargetPlanet.radius*(TargetOrbitRadius-1)+VertTargetPlanet.surfaceMaxAltitude)end;local iy=(ip+bg*100000-VertTargetPlanet.center):normalize()local iz=iy:project_on_plane((VertTargetPlanet.center-ip):normalize()):normalize()if iz:len()<1 then iy=(ip+vec3(core.getConstructWorldOrientationForward())*100000-VertTargetPlanet.center):normalize()iz=iy:project_on_plane((VertTargetPlanet.center-ip):normalize()):normalize()end;VertTargetCoords=VertTargetPlanet.center+iz*(VertTargetPlanet.radius+VertTargetOrbit)VertTargetSet=true end;local dp=vec3(VertTargetCoords)-vec3(core.getConstructWorldPos())local iZ=dp:len()if orbit.periapsis~=nil and orbit.periapsis.altitude>VertTargetOrbit*0.75 and orbit.eccentricity<1 then BrakeIsOn=false;V="Takeoff completed, orbit established"VertTargetSet=false;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,0)ToggleAutoTakeoff()else if iR>0 then if ap<VertTargetOrbit*0.6 then iS=30;be=false;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)BrakeIsOn=false elseif ap>=VertTargetOrbit*0.6 and ap<VertTargetOrbit then iS=iU(ap,VertTargetOrbit*0.6,VertTargetOrbit*1.25,30,-20)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,4000)end else if ap<VertTargetOrbit*0.6 then iS=30;be=false;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,3500)BrakeIsOn=false end end end end;if iS~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local i_=utils.clamp(iS-ir,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(i_)local j0=utils.clamp(vTpitchPID:get(),-1,1)N=j0 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dQ=unit.getClosestPlanetInfluence()>0;local j1=HoldAltitude-ap;local j2=500+bh;local j3=1;if AutoTakeoff then j3=utils.clamp(bh/100,0.1,1)end;local iE=(utils.smoothstep(j1,-j2,j2)-0.5)*2*MaxPitch*j3;if not Reentry and not ai and not VectorToTarget and cq:dot(bg:normalize())<0.99 then iE=(utils.smoothstep(j1,-j2*utils.clamp(20-19*j()*10,1,20),j2*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*j3 end;if not AltitudeHold then iE=0 end;if LockPitch~=nil then if dQ then iE=LockPitch else LockPitch=nil end end;be=true;local j4=N;if Reentry then local ReentrySpeed=math.floor(bt)local j5,j6=b9.computeDistanceAndTime(bh,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local j7=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bh<=ReentrySpeed/3.6 and bh>ReentrySpeed/3.6-10 and math.abs(bg:normalize():dot(cq))>0.9 then Nav.control.cancelCurrentControlMasterMode()y=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(j5>-1 and j7<=j5 or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not I then iE=-80;if j()>0.02 then V="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;iE=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then Nav.control.cancelCurrentControlMasterMode()Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bt then I=false;Reentry=false;be=true end end end;if bh>H and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bg))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and j()>0.01 then local dp;if CustomTarget~=nil then dp=CustomTarget.position-vec3(core.getConstructWorldPos())else dp=a6.center-ip end;local io=vec3(core.getConstructWorldOrientationUp())local iD=math.deg(cK(cs:normalize(),bg,dp))*2;local j8=math.rad(math.abs(dD))if bh>minRollVelocity and j()>0.01 then local j9=utils.clamp(90-iE*2,-90,90)bo=utils.clamp(iD*2,-j9,j9)local ja=iD;iD=utils.clamp(utils.clamp(iD,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(j8)+4*(ir-iE)*math.sin(math.rad(dD)),-YawStallAngle*0.85,YawStallAngle*0.85)iE=utils.clamp(utils.clamp(iE*math.cos(j8),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(ja)*math.sin(j8),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bo=0;iD=utils.clamp(iD,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jb=is-iD;if not bm and bh>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jb)local iG=utils.clamp(yawPID:get(),-1,1)O=O+iG elseif ao and al>-1 or bh<minRollVelocity then AlignToWorldVector(dp)elseif bm and j()>0.01 then if(is<-YawStallAngle or is>YawStallAngle)and j()>0.01 then AlignToWorldVector(bg)end;if(it<-PitchStallAngle or it>PitchStallAngle)and j()>0.01 then iE=utils.clamp(ir-it,ir-PitchStallAngle*0.85,ir+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local iI=planet:getAltitude(CustomTarget.position)local j7=math.sqrt(dp:len()^2-(ap-iI)^2)local jc=LastMaxBrakeInAtmo;if jc then jc=jc*utils.clamp(bh/100,0.1,1)*j()else jc=LastMaxBrake end;if j()<0.01 then jc=LastMaxBrake else end;local e8=bg.x*ea.x+bg.y*ea.y+bg.z*ea.z;local jd=bg:len()-math.abs(e8)local je=vec3(core.getWorldAirFrictionAcceleration())local jf=math.sqrt(je:len()-je:project_on(ea):len())*n()if bh>100 then a0,a1=b9.computeDistanceAndTime(bh,100,n(),0,0,jc+jf)local jg,jh=b9.computeDistanceAndTime(100,0,n(),0,0,jc/2)a0=a0+jg else a0,a1=b9.computeDistanceAndTime(bh,0,n(),0,0,jc/2)end;StrongBrakes=true;if not aj and j7<=a0+bh*im/2 and(bg:project_on_plane(cs):normalize():dot(dp:project_on_plane(cs):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jd<0.1 or j7<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<j7)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=j7 end end;if bm and j()>0.01 and al==-1 and bh>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bg)iE=utils.clamp(ir-it,ir-PitchStallAngle*0.85,ir+PitchStallAngle*0.85)end;N=j4;local fI=-1;local iQ=0.1;if BrakeLanding then iE=0;local e8=bg.x*ea.x+bg.y*ea.y+bg.z*ea.z;local ji=false;local jj=30;if ba~=nil and ba>0 then local jf=0;local dJ=utils.clamp(j(),0.4,2)local jc=LastMaxBrakeInAtmo*utils.clamp(bh/100,0.1,1)*dJ;local jk=ba*dJ+jc+jf-bK;local jl=jc+jf-bK;local jm=jc/2+jf-bK;local jn=bh-math.sqrt(math.abs(jm/2)*20/(0.5*n()))*utils.sign(jm)if jn<0 then jn=0 end;local jo;if bh>100 then local jp,_=b9.computeDistanceAndTime(bh,100,n(),0,0,jc)local jq,_=b9.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jc))jo=jp+jq else jo=b9.computeDistanceAndTime(bh,0,n(),0,0,math.sqrt(jc))end;if jo<20 then BrakeIsOn=false else local jr=0;if jn>100 then local js,_=b9.computeDistanceAndTime(jn,100,n(),0,0,jk)local jt,_=b9.computeDistanceAndTime(100,0,n(),0,0,ba*dJ+math.sqrt(jc)+jf-bK)jr=js+jt else jr,_=b9.computeDistanceAndTime(jn,0,n(),0,0,ba*dJ+math.sqrt(jc)+jf-bK)end;jr=(jr+15+bh*im)*1.1;local ju=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if ju then local iI=planet:getAltitude(CustomTarget.position)local jv=ap-iI-100;local dp=CustomTarget.position-vec3(core.getConstructWorldPos())local iJ=math.sqrt(dp:len()^2-(ap-iI)^2)if iJ>100 then ju=false elseif jv<=jr or jr==-1 then BrakeIsOn=true;ji=true else BrakeIsOn=false;ji=true end end;if not ju and CalculateBrakeLandingSpeed then if jr>=jj then BrakeIsOn=true else BrakeIsOn=false end;ji=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fI=al;if fI>-1 then be=autoRollPreference;if bh<1 or bg:normalize():dot(cs)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bg:normalize():dot(-ea)<0.999 then BrakeIsOn=true elseif e8<-brakeLandingRate and not ji then BrakeIsOn=true elseif not ji then BrakeIsOn=false end end;if AutoTakeoff or aj then local f7,f9,f8=b8:getPlanetarySystem(0):castIntersections(ip,(AutopilotTargetCoords-ip):normalize(),function(fa)return fa.radius+fa.noAtmosphericDensityAltitude end)if math.abs(iE)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bh<H then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0 elseif aj then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;BrakeIsOn=true end elseif aj and j()==0 and a6~=nil and(f7==nil or f7.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jw=hoverDetectGround()>-1;local jx=ct;if(VectorToTarget or aj)and not jw and bh>minRollVelocity and j()>0.01 then local j8=math.rad(math.abs(dD))jx=ct*math.abs(math.cos(j8))+it*math.sin(j8)end;local jy=utils.clamp(iE-jx,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jy=utils.clamp(iE-jx,-85,MaxPitch)elseif j()<0.01 then jy=utils.clamp(iE-jx,-MaxPitch,MaxPitch)end;if math.abs(dD)<5 or VectorToTarget or BrakeLanding or jw or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jy)local iF=pitchPID:get()N=N+iF end end;W=orbit.eccentricity;if antigrav and not ExternalAGG and ap<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end;if bs~=nil then local jz=core.getAltitude()if jz<HeadlightGroundHeight then bs.activate()else bs.deactivate()end end;if AchieveOrbit then local jA=1000;if planet.name~="Space"then if planet.hasAtmosphere then jA=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude)else jA=math.floor(planet.radius*(TargetOrbitRadius-1)+planet.surfaceMaxAltitude)end else jA=1000 end;local _,iH=bb(planet):escapeAndOrbitalSpeed((ip-planet.center):len()-planet.radius)be=true;local jB;if OrbitToTarget and CustomTarget~=nil then jB=(target.position-ip):normalize():project_on_plane(cs):normalize()else jB=cq:project_on_plane(cs):normalize()end;jB=jB*iH;jB=(jB+-cs*(ap-jA)):normalize()*iH end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and C then y=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)C=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not C then y=0;C=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jC=utils.clamp(M+N+system.getControlDeviceForwardInput(),-1,1)local jD=utils.clamp(P+S+system.getControlDeviceYawInput(),-1,1)local jE=utils.clamp(Q+O-system.getControlDeviceLeftRightInput(),-1,1)local jF=R;local jG=vec3(core.getWorldVertical())if jG==nil or jG:len()==0 then jG=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jH=vec3(core.getConstructWorldOrientationUp())local jI=vec3(core.getConstructWorldOrientationForward())local jJ=vec3(core.getConstructWorldOrientationRight())local jK=vec3(core.getWorldVelocity())local jL=vec3(core.getWorldVelocity()):normalize()local jM=getRoll(jG,jI,jJ)local jN=math.abs(jM)local jO=utils.sign(jM)local j=j()local jP=vec3(core.getWorldAngularVelocity())local jQ=jC*pitchSpeedFactor*jJ+jD*rollSpeedFactor*jI+jE*yawSpeedFactor*jH;if jG:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local dD=getRoll(jG,jI,jJ)local dE=dD/180*math.pi;local dF=math.cos(dE)local dG=math.sin(dE)local ir=getPitch(jG,jI,jJ*dF+jH*dG)if be==true and math.abs(bo-jM)>autoRollRollThreshold and jD==0 and math.abs(ir)<85 then local jR=bo;local jS=autoRollFactor;if j==0 then jS=jS/4;bo=0;jR=0 end;if rollPID==nil then rollPID=pid.new(jS*0.01,0,jS*0.1)end;rollPID:inject(jR-jM)local jT=rollPID:get()jQ=jQ+jT*jI end end;if jG:len()>0.01 and j>0.0 then local jU=20.0;if turnAssist==true and jN>jU and jC==0 and jE==0 then local jV=turnAssistFactor*0.1;local jW=turnAssistFactor*0.025;local jX=(jN-jU)/(180-jU)*180;local jY=0;if jX<90 then jY=jX/90 elseif jX<180 then jY=(180-jX)/90 end;jY=jY*jY;local jZ=-jO*jW*(1.0-jY)local j_=jV*jY;jQ=jQ+j_*jJ+jZ*jH end end;local k0=1;local k1=0;local k2=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bt=utils.clamp(bt-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;G=false else y=round(utils.clamp(y-speedChangeLarge/100,-1,1),2)end end;z=0;local e8=-jG:dot(jK)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bt/3.6-jK:dot(jI))local k3=throttlePID:get()B=utils.clamp(k3,-1,1)if B<y and j>0.005 then A=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(B,0.01,1))else A=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jK:len()-bt/3.6)local k4=utils.clamp(brakePID:get(),0,1)if j>0 and e8<-80 or j>0.005 then z=k4 end;if z>0 then if A and B==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else B=utils.clamp(B,0.01,1)end;local k5=''local k6=vec3()local k7=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",k7,k1)local k8='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then k8=k8 ..ExtraLongitudeTags end;local k9=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local ka=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(k8,axisCommandId.longitudinal)local kb=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)k5=k5 ..' , '.."lateral airfoil , lateral ground "k6=k6+kb;if k6:len()>constants.epsilon then Nav:setEngineForceCommand(k5,k6,k1,'','','',k2)end;Nav:setEngineForceCommand(k8,ka,k0)local kc='thrust analog vertical fueled 'local kd='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kd=kd..ExtraLateralTags end;if ExtraVerticalTags~="none"then kc=kc..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kc,k7,k0)else Nav:setEngineForceCommand(kc,vec3(),k0)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kd,kb,k0)else Nav:setEngineForceCommand(kd,vec3(),k0)end;if jF==0 then jF=z end;local ke=-jF*(brakeSpeedFactor*jK+brakeFlatFactor*jL)Nav:setEngineForceCommand('brake',ke)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,y)end;local ke=-jF*(brakeSpeedFactor*jK+brakeFlatFactor*jL)Nav:setEngineForceCommand('brake',ke)local k5=''local k6=vec3()local kf=false;local k8='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then k8=k8 ..ExtraLongitudeTags end;local k9=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if k9==axisCommandType.byThrottle then local ka=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(k8,axisCommandId.longitudinal)Nav:setEngineForceCommand(k8,ka,k0)elseif k9==axisCommandType.byTargetSpeed then local ka=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)k5=k5 ..' , '..k8;k6=k6+ka;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kf=true end end;local kd='thrust analog lateral 'if ExtraLateralTags~="none"then kd=kd..ExtraLateralTags end;local kg=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kg==axisCommandType.byThrottle then local kh=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kd,axisCommandId.lateral)Nav:setEngineForceCommand(kd,kh,k0)elseif kg==axisCommandType.byTargetSpeed then local kb=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)k5=k5 ..' , '..kd;k6=k6+kb end;local kc='thrust analog vertical 'if ExtraVerticalTags~="none"then kc=kc..ExtraVerticalTags end;local ki=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ki==axisCommandType.byThrottle then local k7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kc,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kc,k7,k0,'airfoil','ground','',k2)else Nav:setEngineForceCommand(kc,vec3(),k0)Nav:setEngineForceCommand('airfoil vertical',k7,k0,'airfoil','','',k2)Nav:setEngineForceCommand('ground vertical',k7,k0,'ground','','',k2)end elseif ki==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),k0)end;local kj=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)k5=k5 ..' , '..kc;k6=k6+kj end;local g2=unit.getAxisCommandValue(0)if k6:len()>constants.epsilon then if R~=0 or kf or math.abs(jL:dot(jI))<0.8 or bg:len()>g2/3.6 then k5=k5 ..', brake'end;Nav:setEngineForceCommand(k5,k6,k1,'','','',k2)end end;local kk=torqueFactor*(jQ-jP)local kl=vec3(core.getWorldAirFrictionAngularAcceleration())kk=kk-kl;Nav:setEngineTorqueCommand('torque',kk,k0,'airfoil','','',k2)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bN=vec3(core.getVelocity()):len()local km=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kn=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bN*3.6>kn*(1-km)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN*3.6<kn*(1-km)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fz=unit.getThrottle()if AtmoSpeedAssist then fz=y*100 end;local g2=fz/100;if j==0 then g2=g2*MaxGameVelocity;if bN>=g2*(1-km)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<g2*(1-km)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else g2=g2*ReentrySpeed/3.6;if bN>=g2*(1-km)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<g2*(1-km)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bx=coroutine.resume(beginSetup)if bx then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(ko)if ko=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)y=0;if(vBooster or hover)and al==-1 and(j()>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if L and not BrakeLanding then Nav.control.extendLandingGears()end else if L then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif ko=="forward"then M=M-1 elseif ko=="backward"then M=M+1 elseif ko=="left"then P=P-1 elseif ko=="right"then P=P+1 elseif ko=="yawright"then Q=Q-1 elseif ko=="yawleft"then Q=Q+1 elseif ko=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif ko=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif ko=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif ko=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif ko=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif ko=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif ko=="option1"then IncrementAutopilotTargetIndex()G=false elseif ko=="option2"then DecrementAutopilotTargetIndex()G=false elseif ko=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;G=false;ToggleWidgets()elseif ko=="option4"then ToggleAutopilot()G=false elseif ko=="option5"then ToggleLockPitch()G=false elseif ko=="option6"then ToggleAltitudeHold()G=false elseif ko=="option7"then wipeSaveVariables()G=false elseif ko=="option8"then ToggleFollowMode()G=false elseif ko=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end;G=false elseif ko=="lshift"then if system.isViewLocked()==1 then U=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then U=true;bd=false;bc=false end elseif ko=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif ko=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif ko=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif ko=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()y=0 elseif ko=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif ko=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif ko=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(ko)if ko=="forward"then M=0 elseif ko=="backward"then M=0 elseif ko=="left"then P=0 elseif ko=="right"then P=0 elseif ko=="yawright"then Q=0 elseif ko=="yawleft"then Q=0 elseif ko=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif ko=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif ko=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif ko=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif ko=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif ko=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;G=false elseif ko=="lshift"then if system.isViewLocked()==1 then U=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then U=false;bd=false;bc=false end elseif ko=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif ko=="lalt"then if o()==0 and freeLookToggle then if G then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else G=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(ko)if ko=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif ko=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif ko=="speedup"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif ko=="speeddown"then if not U then if AtmoSpeedAssist and not AltIsOn then y=utils.clamp(y-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(du)local i;local kp="/commands /setname /G /agg /addlocation /copydatabank"local kq,kr=nil,nil;local ks="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(du," ")kq=du;if i~=nil then kq=string.sub(du,0,i-1)kr=string.sub(du,i+1)elseif not string.find(kp,kq)then for fZ in string.gmatch(ks,"([^\n]+)")do c(fZ)end;return end;if kq=="/setname"then if kr==nil or kr==""then V="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kr)else V="Select a saved target to rename first"end elseif kq=="/addlocation"then if kr==nil or kr==""or string.find(kr,"::")==nil then V="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kr,"::")local ch=string.sub(kr,1,i-2)local cb=string.sub(kr,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cc='::pos{'..p..','..p..','..p..','..p..','..p..'}'local cd,ce,c8,c9,c7=string.match(cb,cc)local planet=b2[tonumber(cd)][tonumber(ce)]AddNewLocationByWaypoint(ch,planet,cb)V="Added "..ch.." to saved locations,\nplanet "..planet.name.." at "..cb;ad=5 elseif kq=="/agg"then if kr==nil or kr==""then V="Usage: /agg targetheight"return end;kr=tonumber(kr)if kr<1000 then kr=1000 end;AntigravTargetAltitude=kr;V="AGG Target Height set to "..kr elseif kq=="/G"then if kr==nil or kr==""then V="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kr=="dump"then for bv,bw in pairs(a)do if type(_G[bw])=="boolean"then if _G[bw]==true then c(bw.." true")else c(bw.." false")end elseif _G[bw]==nil then c(bw.." nil")else c(bw.." ".._G[bw])end end;return end;i=string.find(kr," ")local kt=string.sub(kr,0,i-1)local ku=string.sub(kr,i+1)for bv,bw in pairs(a)do if bw==kt then V="Variable "..kt.." changed to "..ku;local kv=type(_G[bw])if kv=="number"then ku=tonumber(ku)elseif kv=="boolean"then if string.lower(ku)=="true"then ku=true else ku=false end end;_G[bw]=ku;return end end;V="No such global variable: "..kt elseif kq=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else V="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
