name: ArchHud - Archaegeo v1.705 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")require("autoconf/custom/archhud/radarclass")require("autoconf/custom/archhud/controlclass")script={}VERSION_NUMBER=1.705;local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;time=o()clearAllCheck=o()local D=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"isBoosting=false;brakeDistance=0;brakeTime=0;local E=0;local F=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;local G=""inAtmo=j()>0;atmosDensity=j()coreAltitude=core.getAltitude()local H=core.getElementIdList()lastTravelTime=o()coreMass=core.getConstructMass()mousePause=false;gyroIsOn=nil;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local I={}damageMessage=""resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;atmoTanks={}spaceTanks={}rocketTanks={}local J=0;repairArrows=false;local K=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;CONTROL=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;local L=LandingGearGroundHeight;stalling=false;targetRoll=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitalParams={VectorToTarget=false}OrbitTargetOrbit=0;OrbitAchieved=false;local M=false;SpaceEngineVertDn=false;SpaceEngines=false;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;AtlasOrdered={}notPvPZone=false;pvpDist=50000;ReversalIsOn=nil;contacts={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;planetAtlas={}scopeFOV=90;oldShowHud=showHud;function p(N)system.print(time..": "..N)end;function play(O,P,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..O.."|"..P.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..O.."|"..P.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..O.."|"..P.."|"..soundVolume)end end;function addTable(Q,R)for i=1,#R do Q[#Q+1]=R[i]end;return Q end;function saveableVariables(S)local T={}if not S then addTable(T,saveableVariablesBoolean)addTable(T,savableVariablesHandling)addTable(T,savableVariablesHud)addTable(T,savableVariablesPhysics)return T elseif S=="boolean"then return saveableVariablesBoolean elseif S=="handling"then return savableVariablesHandling elseif S=="hud"then return savableVariablesHud elseif S=="physics"then return savableVariablesPhysics end end;local function U(V,W,X,Y,Z)if Y==nil then Y=""end;if Z==nil then Z=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],Y,V,W,Z,X)end;function float_eq(a0,a1)if a0==0 then return c(a1)<1e-09 end;if a1==0 then return c(a0)<1e-09 end;return c(a0-a1)<math.max(c(a0),c(a1))*epsilon end;function getDistanceDisplayString(distance,a2)local a3=distance>100000;if a2==nil then a2=1 end;if a3 then return z(distance/1000/200,a2).."SU"elseif distance<1000 then return z(distance,a2).."M"else return z(distance/1000,a2).."KM"end end;function FormatTimeString(a4)local a5=0;local a6=0;local a7=0;if a4<60 then a4=d(a4)elseif a4<3600 then a5=d(a4/60)a4=d(a4%60)elseif a4<86400 then a6=d(a4/3600)a5=d(a4%3600/60)else a7=d(a4/86400)a6=d(a4%86400/3600)end;if a7>0 then return a7 .."d "..a6 .."h "elseif a6>0 then return a6 .."h "..a5 .."m "elseif a5>0 then return a5 .."m "..a4 .."s"elseif a4>0 then return a4 .."s"else return"0s"end end;function SaveDataBank(a8)local function a9(aa)for ab,ac in pairs(aa)do dbHud_1.setStringValue(ac,g(_G[ac]))if a8 and dbHud_2 then dbHud_2.setStringValue(ac,g(_G[ac]))end end end;if dbHud_1 then a9(autoVariables)a9(saveableVariables())system.print("Saved Variables to Datacore")if a8 and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function ad()local function ae(af)return type(af)=='number'end;local function ag(af)return type(y(af))=='number'end;local function ah(ai)return type(ai)=='table'end;local function aj(ak)return type(ak)=='string'end;local function al(ac)return ah(ac)and ae(ac.x and ac.y and ac.z)end;local function am(an)return ah(an)and ae(an.latitude and an.longitude and an.altitude and an.id and an.systemId)end;local ao=math.pi/180;local ap=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aq='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function ar(af)local as=string.gsub(string.reverse(e('%.4f',af)),'^0*%.?','')return as==''and'0'or string.reverse(as)end;local function at(au)if al(au)then return e('{x=%.3f,y=%.3f,z=%.3f}',au.x,au.y,au.z)end;if ah(au)and not getmetatable(au)then local av={}local aw=next(au)if type(aw)=='nil'or aw==1 then av=au else for ab,ac in pairs(au)do local ax=at(ac)if type(ab)=='number'then table.insert(av,e('[%s]=%s',ab,ax))else table.insert(av,e('%s=%s',ab,ax))end end end;return e('{%s}',table.concat(av,','))end;if aj(au)then return e("'%s'",au:gsub("'",[[\']]))end;return tostring(au)end;local ay={}ay.__index=ay;ay.__tostring=function(au,az)local aA={}for ab in pairs(au)do table.insert(aA,ab)end;table.sort(aA)local av={}for _,ab in ipairs(aA)do local ax=at(au[ab])if type(ab)=='number'then table.insert(av,e('[%s]=%s',ab,ax))else table.insert(av,e('%s=%s',ab,ax))end end;if az then return e('%s%s',az,table.concat(av,',\n'..az))end;return e('{%s}',table.concat(av,','))end;ay.__eq=function(aB,aC)return aB.systemId==aC.systemId and aB.id==aC.id and float_eq(aB.radius,aC.radius)and float_eq(aB.center.x,aC.center.x)and float_eq(aB.center.y,aC.center.y)and float_eq(aB.center.z,aC.center.z)and float_eq(aB.GM,aC.GM)end;local function aD(aE,aF,aG,aH,aI)assert(ag(aE),'Argument 1 (systemId) must be a number:'..type(aE))assert(ag(aF),'Argument 2 (id) must be a number:'..type(aF))assert(ag(aG),'Argument 3 (radius) must be a number:'..type(aG))assert(ah(aH),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(aH))assert(ag(aI),'Argument 5 (GM) must be a number:'..type(aI))return setmetatable({systemId=y(aE),id=y(aF),radius=y(aG),center=vec3(aH),GM=y(aI)},ay)end;local aJ={}aJ.__index=aJ;aJ.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,ar(p.latitude*ap),ar(p.longitude*ap),ar(p.altitude))end;aJ.__eq=function(aB,aC)return aB.id==aC.id and aB.systemId==aC.systemId and float_eq(aB.latitude,aC.latitude)and float_eq(aB.altitude,aC.altitude)and(float_eq(aB.longitude,aC.longitude)or float_eq(aB.latitude,math.pi/2)or float_eq(aB.latitude,-math.pi/2))end;local function aK(aL,aF,aM,aN,aO)local aE=aL;if aj(aL)and not aN and not aO and not aF and not aM then aE,aF,aM,aN,aO=n(aL,aq)assert(aE,'Argument 1 (position string) is malformed.')else assert(ag(aE),'Argument 1 (systemId) must be a number:'..type(aE))assert(ag(aF),'Argument 2 (id) must be a number:'..type(aF))assert(ag(aM),'Argument 3 (latitude) must be in degrees:'..type(aM))assert(ag(aN),'Argument 4 (longitude) must be in degrees:'..type(aN))assert(ag(aO),'Argument 5 (altitude) must be in meters:'..type(aO))end;aE=y(aE)aF=y(aF)aM=y(aM)aN=y(aN)aO=y(aO)if aF==0 then return setmetatable({latitude=aM,longitude=aN,altitude=aO,id=aF,systemId=aE},aJ)end;return setmetatable({latitude=ao*q(aM,-90,90),longitude=ao*(aN%360),altitude=aO,id=aF,systemId=aE},aJ)end;local aP={}aP.__index=aP;aP.__tostring=function(au,az)local aQ=az and az..'  'local aR={}local aA={}for ab in pairs(au)do table.insert(aA,ab)end;table.sort(aA)for _,aS in ipairs(aA)do bdy=au[aS]local aT=ay.__tostring(bdy,aQ)if az then table.insert(aR,e('[%s]={\n%s\n%s}',aS,aT,az))else table.insert(aR,e('  [%s]=%s',aS,aT))end end;if az then return e('\n%s%s%s',az,table.concat(aR,',\n'..az),az)end;return e('{\n%s\n}',table.concat(aR,',\n'))end;local function aU(aV)local b={}local pid;for _,ac in pairs(aV)do local aF=ac.planetarySystemId;if type(aF)~='number'then error('Invalid planetary system ID: '..tostring(aF))elseif pid and aF~=pid then error('Mistringmatch planetary system IDs: '..aF..' and '..pid)end;local aW=ac.bodyId;if type(aW)~='number'then error('Invalid body ID: '..tostring(aW))elseif b[aW]then error('Duplicate body ID: '..tostring(aW))end;setmetatable(ac.center,getmetatable(vec3.unit_x))b[aW]=setmetatable(ac,ay)pid=aF end;return setmetatable(b,aP)end;K={}local function aX(aV)return setmetatable({galaxyAtlas=aV or{}},K)end;K.__index=function(ai,i)if type(i)=='number'then local system=ai.galaxyAtlas[i]return aU(system)end;return rawget(K,i)end;K.__pairs=function(au)return function(ai,ab)local aY,nv=next(ai,ab)return aY,nv and aU(nv)end,au.galaxyAtlas,nil end;K.__tostring=function(au)local aZ={}for _,a_ in pairs(au or{})do local b0=a_:getPlanetarySystemId()local b1=aP.__tostring(a_,'    ')table.insert(aZ,e('  [%s]={%s\n  }',b0,b1))end;return e('{\n%s\n}\n',table.concat(aZ,',\n'))end;K.BodyParameters=aD;K.MapPosition=aK;K.PlanetarySystem=aU;function K.createBodyParameters(aE,aF,b2,b3,b4,b5,b6)assert(ag(aE),'Argument 1 (systemId) must be a number:'..type(aE))assert(ag(aF),'Argument 2 (id) must be a number:'..type(aF))assert(ag(b2),'Argument 3 (surfaceArea) must be a number:'..type(b2))assert(ah(b3),'Argument 4 (aPosition) must be an array or vec3:'..type(b3))assert(ah(b4),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(b4))assert(ag(b5),'Argument 6 (altitude) must be in meters:'..type(b5))assert(ag(b6),'Argument 7 (gravityAtPosition) must be number:'..type(b6))local aG=x(b2/4/math.pi)local distance=aG+b5;local b7=vec3(b3)+distance*vec3(b4)local aI=b6*distance*distance;return aD(aE,aF,aG,b7,aI)end;K.isMapPosition=am;function K:getPlanetarySystem(aL)if i==nil then i=0 end;if nv==nil then nv=0 end;local aE=aL;if am(aL)then aE=aL.systemId end;if type(aE)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=aP then system=aU(system)end;return system end end end;function aP:sizeCalculator(b8)return 1.05*b8.radius end;function aP:castIntersections(b9,ba,bb,bc,bd,be)local bf={}if bd then for _,b8 in pairs(bd)do table.insert(bf,b8)end else bf=planetAtlas end;if not be then table.sort(bf,function(bg,bh)local a0=bg.center;local a1=bh.center;return(a0.x-b9.x)^2+(a0.y-b9.y)^2+(a0.z-b9.z)^2<(a1.x-b9.x)^2+(a1.y-b9.y)^2+(a1.z-b9.z)^2 end)end;local bi=ba:normalize()for _,b8 in ipairs(bf)do local bj=b8.center-b9;local aG=self:sizeCalculator(b8)local bk=bj:dot(bi)local bl=bk^2-(bj:len2()-aG^2)if bl>=0 then local bm=x(bl)local bn=bk+bm;local bo=bk-bm;if bo>0 then return b8,bn,bo elseif bn>0 then return b8,bn,nil end end end;return nil,nil,nil end;function aP:closestBody(bp)assert(type(bp)=='table','Invalid coordinates.')local bq,b8;local br=vec3(bp)for _,bs in pairs(self)do local bt=(bs.center-br):len2()if(not b8 or bt<bq)and bs.name~="Space"then b8=bs;bq=bt end end;return b8 end;function aP:convertToBodyIdAndWorldCoordinates(aL)local bu=aL;if aj(aL)then bu=aK(aL)end;if bu.id==0 then return 0,vec3(bu.latitude,bu.longitude,bu.altitude)end;local bs=self:getBodyParameters(bu)if bs then return bu.id,bs:convertToWorldCoordinates(bu)end end;function aP:getBodyParameters(aL)local aF=aL;if am(aL)then aF=aL.id end;assert(ag(aF),'Argument 1 (id) must be a number:'..type(aF))return self[aF]end;function aP:getPlanetarySystemId()local _,ac=next(self)return ac and ac.systemId end;function ay:convertToMapPosition(aH)assert(ah(aH),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(aH))local bv=vec3(aH)if self.id==0 then return setmetatable({latitude=bv.x,longitude=bv.y,altitude=bv.z,id=0,systemId=self.systemId},aJ)end;local bw=bv-self.center;local distance=bw:len()local aO=distance-self.radius;local aM=0;local aN=0;if not float_eq(distance,0)then local bx=m(bw.y,bw.x)aN=bx>=0 and bx or 2*math.pi+bx;aM=math.pi/2-math.acos(bw.z/distance)end;return setmetatable({latitude=aM,longitude=aN,altitude=aO,id=self.id,systemId=self.systemId},aJ)end;function ay:convertToWorldCoordinates(aL)local bu=aj(aL)and aK(aL)or aL;if bu.id==0 then return vec3(bu.latitude,bu.longitude,bu.altitude)end;assert(am(bu),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(bu.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(bu.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local by=math.cos(bu.latitude)return self.center+(self.radius+bu.altitude)*vec3(by*math.cos(bu.longitude),by*math.sin(bu.longitude),math.sin(bu.latitude))end;function ay:getAltitude(aH)return(vec3(aH)-self.center):len()-self.radius end;function ay:getDistance(aH)return(vec3(aH)-self.center):len()end;function ay:getGravity(aH)local bz=self.center-vec3(aH)local bA=bz:len2()return self.GM/bA*bz/x(bA)end;return setmetatable(K,{__call=function(_,...)return aX(...)end})end;local function bB()local Kinematic={}local bC=30000000/3600;local bD=bC*bC;local bE=100;function Kinematic.computeAccelerationTime(bF,bG,bH)local bI=bC*math.asin(bF/bC)return(bC*math.asin(bH/bC)-bI)/bG end;function Kinematic.computeDistanceAndTime(bF,bH,bJ,bK,bL,bM)bL=bL or 0;bM=bM or 0;local bN=bF<=bH;local bO=bK*(bN and 1 or-1)/bJ;local bP=-bM/bJ;local bQ=bO+bP;if bN and bQ<=0 or not bN and bQ>=0 then return-1,-1 end;local bR,bS=0,0;if bO~=0 and bL>0 then local bI=math.asin(bF/bC)local bT=math.pi*(bO/2+bP)local bU=bO*bL;local bV=bC*math.pi;local ac=function(ai)local bW=(bT*ai-bU*math.sin(math.pi*ai/2/bL)+bV*bI)/bV;local bX=math.tan(bW)return bC*bX/x(bX*bX+1)end;local bY=bN and function(ak)return ak>=bH end or function(ak)return ak<=bH end;bS=2*bL;if bY(ac(bS))then local bZ=0;while c(bS-bZ)>0.5 do local ai=(bS+bZ)/2;if bY(ac(ai))then bS=ai else bZ=ai end end end;local b_=bF;local c0=bS/bE;for c1=1,bE do local c2=ac(c1*c0)bR=bR+(c2+b_)*c0/2;b_=c2 end;if bS<2*bL then return bR,bS end;bF=b_ end;local bI=bC*math.asin(bF/bC)local time=(bC*math.asin(bH/bC)-bI)/bQ;local c3=bD*math.cos(bI/bC)/bQ;local distance=c3-bD*math.cos((bQ*time+bI)/bC)/bQ;return distance+bR,time+bS end;function Kinematic.computeTravelTime(bF,bG,distance)if distance==0 then return 0 end;if bG>0 then local bI=bC*math.asin(bF/bC)local c3=bD*math.cos(bI/bC)/bG;return(bC*math.acos(bG*(c3-distance)/bD)-bI)/bG end;if bF==0 then return-1 end;assert(bF>0,'Acceleration and initial speed are both zero.')return distance/bF end;return Kinematic end;local function c4()local vec3=require('cpml.vec3')local ad=ad()local function aj(ak)return type(ak)=='string'end;local function ah(ai)return type(ai)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(aO)assert(self.body)local distance=aO+self.body.radius;if not float_eq(distance,0)then local c5=x(self.body.GM/distance)return x(2)*c5,c5 end;return nil,nil end;function Kepler:orbitalParameters(aL,c6)assert(self.body)assert(ah(aL)or aj(aL))assert(ah(c6))local c7=(aj(aL)or ad.isMapPosition(aL))and self.body:convertToWorldCoordinates(aL)or vec3(aL)local ac=vec3(c6)local c8=c7-self.body.center;local c9=ac:len2()local ca=c8:len()local cb=self.body.GM;local cc=((c9-cb/ca)*c8-c8:dot(ac)*ac)/cb;local a0=cb/(2*cb/ca-c9)local cd=cc:len()local bi=cc:normalize()local ce=a0*(1-cd)local cf=a0*(1+cd)local cg=ce*bi+self.body.center;local ch=cd<=1 and-cf*bi+self.body.center or nil;local ci=x(a0*cb*(1-cd*cd))local cj=ch and 2*math.pi*x(a0^3/cb)local ck=math.acos(cc:dot(c8)/(cd*ca))if c8:dot(ac)<0 then ck=-(ck-2*math.pi)end;local cl=math.acos((math.cos(ck)+cd)/(1+cd*math.cos(ck)))local cm=cl;if cm<0 then cm=cm+2*math.pi end;local cn=cm-cd*math.sin(cm)local co=0;local cp=0;local cq=0;if cj~=nil then co=cn/(2*math.pi/cj)cp=cj-co;cq=cp+cj/2;if ck-math.pi>0 then cp=co;cq=cp+cj/2 end;if cq>cj then cq=cq-cj end end;return{periapsis={position=cg,speed=ci/ce,circularOrbitSpeed=x(cb/ce),altitude=ce-self.body.radius},apoapsis=ch and{position=ch,speed=ci/cf,circularOrbitSpeed=x(cb/cf),altitude=cf-self.body.radius},currentVelocity=ac,currentPosition=c7,eccentricity=cd,period=cj,eccentricAnomaly=cl,meanAnomaly=cn,timeToPeriapsis=cp,timeToApoapsis=cq,trueAnomaly=ck}end;local function cr(cs)local bs=ad.BodyParameters(cs.systemId,cs.id,cs.radius,cs.center,cs.GM)return setmetatable({body=bs},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return cr(...)end})end;local function ct()local function cu(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function cv()local function cw(cx,cy)return cx.name<cy.name end;AtlasOrdered={}for ab,ac in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=ac.name,index=ab}end;table.sort(AtlasOrdered,cw)end;local function cz(cA)for ab,ac in pairs(cA)do if ac.name and ac.name==CustomTarget.name then return ab end end;return-1 end;local function cB()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local cC=AtlasOrdered[AutopilotTargetIndex].index;local cD=b[0][cC]if cD.center then AutopilotTargetName=cD.name;autopilotTargetPlanet=galaxyReference[0][cC]if CustomTarget~=nil then if atmosDensity==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cD;for _,ac in pairs(galaxyReference[0])do if ac.name==CustomTarget.planetname then autopilotTargetPlanet=ac;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cE(cF)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit and not Reentry and not finalLand then if cF==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cB()else local cC=AtlasOrdered[AutopilotTargetIndex].index;local cD=b[0][cC]if cD~=nil and cD.name=="Space"or iphCondition=="Custom Only"and cD.center or iphCondition=="No Moons"and string.find(cD.name,"Moon")~=nil then if cF==nil then cE()else cE(1)end else cB()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function cG()local cH=-1;cH=cz(b[0])if cH>-1 then table.remove(b[0],cH)end;cH=-1;cH=cz(SavedLocations)if cH~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cH)end;cE()cv()end;local function cI(cJ,position,cK,cL)if dbHud_1 or cK then local p=cu(position)local cM=p.gravity;if cL then cM=unit.getClosestPlanetInfluence()end;local cN={position=position,name=cJ,planetname=p.name,gravity=cM,safe=cL}if not cK then SavedLocations[#SavedLocations+1]=cN else for ab,ac in pairs(b[0])do if ac.name and cJ==ac.name then table.remove(b[0],ab)end end end;table.insert(b[0],cN)cv()cB()msgText="Location saved as "..cJ.."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local cO={}function cO.UpdateAtlasLocationsList()cv()end;function cO.UpdateAutopilotTarget()cB()end;function cO.adjustAutopilotTargetIndex(cF)cE(cF)end;function cO.findAtlasIndex(cA)cz(cA)end;function cO.UpdatePosition(cP)local cH=cz(SavedLocations)if cH~=-1 then if cP~=nil then SavedLocations[cH].name=cP;AutopilotTargetIndex=AutopilotTargetIndex-1;cE()else local cQ=SavedLocations[cH]cQ.gravity=unit.getClosestPlanetInfluence()cQ.position=worldPos;cQ.safe=true end;msgText=SavedLocations[cH].name.." position updated ("..SavedLocations[cH].planetname..")"else msgText="Name Not Found"end end;function cO.AddNewLocation(cJ,position,cK,cL)cI(cJ,position,cK,cL)end;function cO.ClearCurrentPosition()cG()end;for ab,ac in pairs(SavedLocations)do table.insert(b[0],ac)end;cv()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;cO.UpdateAutopilotTarget()return cO end;function script.onStart()local cR=false;local function cS()local function cT(cU)local cV=dbHud_1.hasKey;for ab,ac in pairs(cU)do if cV(ac)then local as=f(dbHud_1.getStringValue(ac))if as~=nil then _G[ac]=as;cR=true end end end end;if dbHud_1 then if not useTheseSettings then cT(saveableVariables())coroutine.yield()cT(autoVariables)else cT(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;cR=false end;coroutine.yield()if cR then msgText="Loaded Saved Variables"resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function cW()local function cX(cY,cZ)if cY>cZ then cZ=cY end;local c_,d0=0,0;if ContainerOptimization>0 then c_=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then d0=FuelTankOptimization*0.05 end;cZ=cZ*(1-(c_+d0))return cZ end;local d1=core.getElementNameById;local d2=fuelX~=0 and fuelY~=0;for ab in pairs(H)do local type=core.getElementTypeById(H[ab])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(H[ab])),'^.*vertical.*$')and core.getElementForwardById(H[ab])[3]>0 then UpVertAtmoEngine=true end end;if n(type,'^.*Space Engine$')then SpaceEngines=true;if n(tostring(core.getElementTagsById(H[ab])),'^.*vertical.*$')then local d3=core.getElementForwardById(H[ab])if d3[3]<0 then M=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local d4=h(H[ab])if d4>10000 then D=110 elseif d4>1000 then D=55 elseif d4>150 then D=27 end end;J=J+h(H[ab])if d2 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local d4=h(H[ab])local d5=k(H[ab])local cY=0;local d6=o()if type=="Atmospheric Fuel Tank"then local cZ=400;local d7=35.03;if d4>10000 then cZ=51200;d7=5480 elseif d4>1300 then cZ=6400;d7=988.67 elseif d4>150 then cZ=1600;d7=182.67 end;cY=d5-d7;if fuelTankHandlingAtmo>0 then cZ=cZ+cZ*fuelTankHandlingAtmo*0.2 end;cZ=cX(cY,cZ)atmoTanks[#atmoTanks+1]={H[ab],d1(H[ab]),cZ,d7,cY,d6}end;if type=="Rocket Fuel Tank"then local cZ=320;local d7=173.42;if d4>65000 then cZ=40000;d7=25740 elseif d4>6000 then cZ=5120;d7=4720 elseif d4>700 then cZ=640;d7=886.72 end;cY=d5-d7;if fuelTankHandlingRocket>0 then cZ=cZ+cZ*fuelTankHandlingRocket*0.1 end;cZ=cX(cY,cZ)rocketTanks[#rocketTanks+1]={H[ab],d1(H[ab]),cZ,d7,cY,d6}end;if type=="Space Fuel Tank"then local cZ=600;local d7=35.03;if d4>10000 then cZ=76800;d7=5480 elseif d4>1300 then cZ=9600;d7=988.67 elseif d4>150 then cZ=2400;d7=182.67 end;cY=d5-d7;if fuelTankHandlingSpace>0 then cZ=cZ+cZ*fuelTankHandlingSpace*0.2 end;cZ=cX(cY,cZ)spaceTanks[#spaceTanks+1]={H[ab],d1(H[ab]),cZ,d7,cY,d6}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function d8()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,ac in pairs(door)do ac.toggle()end end;if switch then for _,ac in pairs(switch)do ac.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,ac in pairs(forcefield)do ac.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(L)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function d9()local da={}local function db()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local dc={[1]=4480,[6]=4480,[7]=6270}for dd,de in pairs(b)do b[dd][0]=db()b[dd][0].systemId=dd;da[dd]={}for df,planet in pairs(b[dd])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=dc[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=dd;planet.bodyId=planet.id;da[dd][df]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end;if planet.center and planet.name~="Space"then planetAtlas[#planetAtlas+1]=planet end end end;K=ad()galaxyReference=K(da)Kinematic=bB()Kep=c4()ATLAS=ct()end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})cS()coroutine.yield()cW()coroutine.yield()AP=APClass(a,core,unit,system,b,vBooster,hover,telemeter_1,antigrav,c,d,j,l,m,o,q,r,t,w,x,z)d8()coroutine.yield()d9()RADAR=RadarClass(core,system,library,radar_1,radar_2,c,s,x,U,y,D)HUD=HudClass(a,core,unit,system,b,radar_1,radar_2,antigrav,hover,shield_1,c,d,e,f,j,k,l,m,o,q,r,s,w,x,z,U)HUD.ButtonSetup()CONTROL=ControlClass(a,core,unit,system,b,vBooster,hover,antigrav,shield_1,dbHud_2,l,r,w,v,s,z,n,y,q)coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ac in pairs(door)do ac.toggle()end end;if switch then for _,ac in pairs(switch)do ac.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ac in pairs(forcefield)do ac.toggle()end end;showHud=oldShowHud;SaveDataBank()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(dg)local dh=nil;if dg=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif dg=="tenthSecond"then local function di()local dj=system.createData;local dk=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=dk(panelInterplanetary,"value")interplanetaryHeaderText=dj('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=dk(panelInterplanetary,"value")widgetDistanceText=dj('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=dk(panelInterplanetary,"value")widgetTravelTimeText=dj('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=dk(panelInterplanetary,"value")widgetMaxMassText=dj('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=dk(panelInterplanetary,"value")widgetTargetOrbitText=dj('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=dk(panelInterplanetary,"value")widgetCurBrakeDistanceText=dj('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=dk(panelInterplanetary,"value")widgetCurBrakeTimeText=dj('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=dk(panelInterplanetary,"value")widgetMaxBrakeDistanceText=dj('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=dk(panelInterplanetary,"value")widgetMaxBrakeTimeText=dj('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=dk(panelInterplanetary,"value")widgetTrajectoryAltitudeText=dj('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function dl()s(panelInterplanetary)panelInterplanetary=nil end;local function dm()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local c2=velMag;local dn=unit.getThrottle()/100;if AtmoSpeedAssist then dn=PlayerThrottle end;local dp,dq=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*dn,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,dr;if not TurnBurn and c2>0 then _,dr=AP.GetAutopilotBrakeDistanceAndTime(c2)else _,dr=AP.GetAutopilotTBBrakeDistanceAndTime(c2)end;local ds=0;local dt=0;if AutopilotCruising or not Autopilot and c2>5 then dt=Kinematic.computeTravelTime(c2,0,AutopilotDistance)elseif brakeDistance+dp<AutopilotDistance then ds=AutopilotDistance-(brakeDistance+dp)dt=Kinematic.computeTravelTime(8333.0556,0,ds)else local du=(AutopilotDistance-brakeDistance)/dp;dp=AutopilotDistance-brakeDistance;dq=dq*du end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return dt elseif AutopilotBraking then return dr elseif AutopilotCruising then return dt+dr else return dq+brakeTime+dt end end;local function dv(cM,dw)if cM==nil then cM=core.g()end;cM=z(cM,5)if dw~=nil and dw or(dh==nil or dh~=cM)then local c2=coreVelocity:len()local dx=f(unit.getData()).maxBrake;if dx~=nil and dx>0 and inAtmo then dx=dx/q(c2/100,0.1,1)dx=dx/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+dx)/2 else LastMaxBrakeInAtmo=dx end end end;if dx~=nil and dx>0 then LastMaxBrake=dx end;dh=cM end end;dv(nil,true)if setCruiseSpeed~=nil then if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or r:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then di()end;if AutopilotTargetName~=nil then local dy=CustomTarget~=nil;local dz=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()dz=dz>1000000 and z(dz/1000000,2).." kTons"or z(dz/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=dm()if dy and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dA=getDistanceDisplayString(distance)t(widgetDistanceText,'{"label": "distance", "value": "'..dA..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dA=getDistanceDisplayString(brakeDistance)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dA..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')dA=getDistanceDisplayString(E)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dA..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(F)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",dz)..'", "unit":""}')dA=getDistanceDisplayString(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..dA..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else dl()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif dg=="oneSecond"then local function dB(dC)local dD=0;damageMessage=""local dE=J;local dF=0;local dG=0;local dH=0;local dI=0;local dJ=""local dK=core.getElementHitPointsById;for ab in pairs(H)do local d4=0;local dL=0;dL=h(H[ab])d4=dK(H[ab])dF=dF+d4;if d4<dL then if d4==0 then dH=dH+1 else dG=dG+1 end;if repairArrows and#I==0 then position=vec3(core.getElementPositionById(H[ab]))local V=position.x;local W=position.y;local dM=position.z;table.insert(I,core.spawnArrowSticker(V,W,dM+1,"down"))table.insert(I,core.spawnArrowSticker(V,W,dM+1,"down"))core.rotateSticker(I[2],0,0,90)table.insert(I,core.spawnArrowSticker(V+1,W,dM,"north"))table.insert(I,core.spawnArrowSticker(V+1,W,dM,"north"))core.rotateSticker(I[4],90,90,0)table.insert(I,core.spawnArrowSticker(V-1,W,dM,"south"))table.insert(I,core.spawnArrowSticker(V-1,W,dM,"south"))core.rotateSticker(I[6],90,-90,0)table.insert(I,core.spawnArrowSticker(V,W-1,dM,"east"))table.insert(I,core.spawnArrowSticker(V,W-1,dM,"east"))core.rotateSticker(I[8],90,0,90)table.insert(I,core.spawnArrowSticker(V,W+1,dM,"west"))table.insert(I,core.spawnArrowSticker(V,W+1,dM,"west"))core.rotateSticker(I[10],-90,0,90)table.insert(I,H[ab])end elseif repairArrows and#I>0 and I[11]==H[ab]then for dN in pairs(I)do core.deleteSticker(I[dN])end;I={}end end;dD=d(dF/dE*100)if dD<100 then dC[#dC+1]=U(0,0,"","pbright txt")dI=d(dD*2.55)dJ=e("rgb(%d,%d,%d)",255-dI,dI,0)if dD<100 then dC[#dC+1]=U("50%",1035,"Elemental Integrity: "..dD.."%","txtbig txtmid","fill:"..dJ)if dH>0 then dC[#dC+1]=U("50%",1055,"Disabled Modules: "..dH.." Damaged Modules: "..dG,"txtbig txtmid","fill:"..dJ)elseif dG>0 then dC[#dC+1]=U("50%",1055,"Damaged Modules: "..dG,"txtbig txtmid","fill:"..dJ)end end end end;local function dO()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,"Weapons","weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function dP()local d6=o()local dQ=velMag;local dR=d6-lastTravelTime;if dQ>1.38889 then dQ=dQ/1000;local dS=dQ*(d6-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+dS;totalDistanceTrip=totalDistanceTrip+dS end;flightTime=flightTime+dR;TotalFlightTime=TotalFlightTime+dR;lastTravelTime=d6 end;dP()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()dO()local dC={}HUD.OneSecond(dC)if ShouldCheckDamage then dB(dC)end;lastOdometerOutput=table.concat(dC,"")collectgarbage("collect")elseif dg=="fiveSecond"then if not UseSatNav then return end;G=dbHud_1.getStringValue("SPBAutopilotTargetName")if G~=nil and G~=""and G~="SatNavNotChanged"then local as=f(dbHud_1.getStringValue("SavedLocations"))if as~=nil then _G["SavedLocations"]=as;local cH=-1;local cN;for ab,ac in pairs(SavedLocations)do if ac.name and ac.name=="SatNav Location"then cH=ab;break end end;if cH~=-1 then cN=SavedLocations[cH]cH=-1;for ab,ac in pairs(b[0])do if ac.name and ac.name=="SatNav Location"then cH=ab;break end end;if cH>-1 then b[0][cH]=cN end;ATLAS.UpdateAtlasLocationsList()msgText=cN.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==G then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif dg=="msgTick"then local dC={}HUD.DisplayMessage(dC,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif dg=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif dg=="hudTick"then HUD.hudtick()elseif dg=="apTick"then AP.APTick()elseif dg=="radarTick"then RADAR.UpdateRadar()elseif dg=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function dT(dU,dV)local dW=vec3()local dX=vec3()if dU==axisCommandId.longitudinal then dW=vec3(core.getConstructOrientationForward())dX=constructForward elseif dU==axisCommandId.vertical then dW=vec3(core.getConstructOrientationUp())dX=constructUp elseif dU==axisCommandId.lateral then dW=vec3(core.getConstructOrientationRight())dX=constructRight else return vec3()end;local dY=vec3(core.getWorldGravity())local dZ=dY:dot(dX)local d_=vec3(core.getWorldAirFrictionAcceleration())local e0=d_:dot(dX)local e1=coreVelocity:dot(dW)local e2=dV*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(e2-e1)local e3=targetSpeedPID2:get()local e4=(e3-e0-dZ)*dX;return e4 end;local function e5(dU,dV)local dW=vec3()local dX=vec3()if dU==axisCommandId.longitudinal then dW=vec3(core.getConstructOrientationForward())dX=constructForward elseif dU==axisCommandId.vertical then dW=vec3(core.getConstructOrientationUp())dX=constructUp elseif dU==axisCommandId.lateral then dW=vec3(core.getConstructOrientationRight())dX=constructRight else return vec3()end;local dY=vec3(core.getWorldGravity())local dZ=dY:dot(dX)local d_=vec3(core.getWorldAirFrictionAcceleration())local e0=d_:dot(dX)local e1=coreVelocity:dot(dW)local e2=dV*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(e2-e1)local e3=targetSpeedPID:get()local e4=(e3-e0-dZ)*dX;return e4 end;local function e6(e7,e8,cy)local e9=e7:cross(cy):normalize_inplace()local ea=math.acos(q(e9:dot(-e8),-1,1))*constants.rad2deg;if e9:cross(-e8):dot(cy)<0 then ea=-ea end;return ea end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=r:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local eb=q(pitchInput+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local ec=q(rollInput+rollInput2+system.getControlDeviceYawInput(),-1,1)local ed=q(yawInput+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local ee=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local ef=adjustedRoll/180*math.pi;local eg=math.cos(ef)local eh=math.sin(ef)adjustedPitch=e6(worldVertical,constructForward,constructRight*eg+constructUp*eh)local ei=constructVelocity:normalize()local ej=c(adjustedRoll)local ek=utils.sign(adjustedRoll)local el=vec3(core.getWorldAngularVelocity())local em=eb*pitchSpeedFactor*constructRight+ec*rollSpeedFactor*constructForward+ed*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local en=c(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and en>0 or atmosDensity>0.0 and en<autoRollRollThreshold and autoRollPreference)and ec==0 and c(adjustedPitch)<85 then local eo=targetRoll;local ep=autoRollFactor;if atmosDensity==0 then ep=ep/4;targetRoll=0;eo=0 end;if rollPID==nil then rollPID=pid.new(ep*0.01,0,ep*0.1)end;rollPID:inject(eo-adjustedRoll)local eq=rollPID:get()em=em+eq*constructForward end end;local er=1;local es=0;local et=1;local eu=system.getMouseWheel()if eu>0 then p("HERE1")AP.changeSpd()elseif eu<0 then AP.changeSpd(true)else mousePause=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local ev=throttlePID:get()calculatedThrottle=q(ev,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;r:setThrottleCommand(axisCommandId.longitudinal,q(calculatedThrottle,0.01,1))else ThrottleLimited=false;r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local ew=q(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=ew end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=q(calculatedThrottle,0.01,1)end;local ex=''local ey=vec3()local ez=dT(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",ez,es)local eA='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eA=eA..ExtraLongitudeTags end;local eB=r:getAxisCommandType(axisCommandId.longitudinal)local eC=r:composeAxisAccelerationFromThrottle(eA,axisCommandId.longitudinal)local eD=e5(axisCommandId.lateral,LeftAmount*1000)ex=ex..' , '.."lateral airfoil , lateral ground "ey=ey+eD;if ey:len()>constants.epsilon then a:setEngineForceCommand(ex,ey,es,'','','',et)end;a:setEngineForceCommand(eA,eC,er)local eE='thrust analog vertical fueled 'local eF='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then eF=eF..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then eE=eE..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(eE,ez,er)else a:setEngineForceCommand(eE,vec3(),er)end;if LeftAmount~=0 then a:setEngineForceCommand(eF,eD,er)else a:setEngineForceCommand(eF,vec3(),er)end;if ee==0 then ee=brakeInput2 end;local eG=-ee*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*ei)a:setEngineForceCommand('brake',eG)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local dV=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-dV/3.6)local ew=q(brakePID:get(),0,1)ee=q(ee+ew,0,1)end;local eG=-ee*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*ei)a:setEngineForceCommand('brake',eG)local ex=''local ey=vec3()local eH=false;local eA='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eA=eA..ExtraLongitudeTags end;local eB=r:getAxisCommandType(axisCommandId.longitudinal)if eB==axisCommandType.byThrottle then local eC=r:composeAxisAccelerationFromThrottle(eA,axisCommandId.longitudinal)a:setEngineForceCommand(eA,eC,er)elseif eB==axisCommandType.byTargetSpeed then local eC=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ex=ex..' , '..eA;ey=ey+eC;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then eH=true end end;local eF='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then eF=eF..ExtraLateralTags end;local eI=r:getAxisCommandType(axisCommandId.lateral)if eI==axisCommandType.byThrottle then local eJ=r:composeAxisAccelerationFromThrottle(eF,axisCommandId.lateral)a:setEngineForceCommand(eF,eJ,er)elseif eI==axisCommandType.byTargetSpeed then local eD=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ex=ex..' , '..eF;ey=ey+eD end;local eE='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then eE=eE..ExtraVerticalTags end;local eK=r:getAxisCommandType(axisCommandId.vertical)if eK==axisCommandType.byThrottle then local ez=r:composeAxisAccelerationFromThrottle(eE,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(eE,ez,er,'airfoil','ground','',et)else a:setEngineForceCommand(eE,vec3(),er)a:setEngineForceCommand('airfoil vertical',ez,er,'airfoil','','',et)a:setEngineForceCommand('ground vertical',ez,er,'ground','','',et)end elseif eK==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),er)end;local eL=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ex=ex..' , '..eE;ey=ey+eL end;if ey:len()>constants.epsilon then if brakeInput~=0 or eH or c(ei:dot(constructForward))<0.5 then ex=ex..', brake'end;a:setEngineForceCommand(ex,ey,es,'','','',et)end end;local eM=torqueFactor*(em-el)local eN=vec3(core.getWorldAirFrictionAngularAcceleration())eM=eM-eN;a:setEngineTorqueCommand('torque',eM,er,'airfoil','','',et)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local c2=coreVelocity:len()local eO=0.15;if not throttleMode then local eP=r:getTargetSpeed(axisCommandId.longitudinal)if c2*3.6>eP*(1-eO)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c2*3.6<eP*(1-eO)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local dn=unit.getThrottle()if AtmoSpeedAssist then dn=PlayerThrottle*100 end;local dV=dn/100;if j==0 then dV=dV*MaxGameVelocity;if c2>=dV*(1-eO)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c2<dV*(1-eO)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local eQ=d(adjustedAtmoSpeedLimit)dV=dV*eQ/3.6;if c2>=dV*(1-eO)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c2<dV*(1-eO)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local eR=coroutine.status(beginSetup)if eR=="suspended"then local ax,eS=coroutine.resume(beginSetup)if eS then system.print("ERROR STARTUP: "..eS)end elseif eR=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(eT)CONTROL.startControl(eT)end;function script.onActionStop(eT)CONTROL.stopControl(eT)end;function script.onActionLoop(eT)CONTROL.loopControl(eT)end;function script.onInputText(X)CONTROL.inputTextControl(X)end;function script.onEnter(aF)if radar_1 and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aF)if radar_1 and CollisionSystem then if#contacts>650 then aF=tostring(aF)contacts[aF]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
