name: ArchHud - Archaegeo v1.004 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.004;freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getElementNameById;local o=core.getConstructMass;local p=Nav.control.isRemoteControlled;local q=math.atan;local r=string.match;local tostring=tostring;local s=utils.round;local t=system.getTime;local function u(v,w)local x=10^(w or 0)return d(v*x+0.5)/x end;local y=SafeR;local z=SafeB;local A=SafeG;local B=false;local C=0;local D=""local E=0;local F=0;local G=false;local H=0;local I=false;local J=u(ResolutionX/2,0)local K=u(ResolutionY/2,0)local L=false;local M=true;local N=55;local O=false;local P=1;local Q=1;local R=false;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=false;local a0=false;local a1="empty"local a2=5;local a3=5;local a4=false;local a5,a6=0;local a7,a8=0;local a9=nil;local aa=0;local ab=0;local ac=false;local ad=0;local ae=0;local af=0;local ag=3;local ah=0;local ai=""local aj=""local ak=0;local al=false;local am=false;local an=false;local ao=-1;local ap=false;local aq=""local ar=j()>0;local as=core.getAltitude()local at=core.getElementIdList()local au=t()local av=nil;local aw=false;local ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]local ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]local az={}local aA=0;local aB=0;local aC=""local aD=true;local aE={}local aF=1;local aG=0.001;local aH=ResolutionX;local aI=ResolutionY;local aJ=nil;local aK=nil;local aL=nil;local aM=nil;local aN=false;local aO=false;local aP=0;local aQ=nil;local aR={}local aS={}local aT={}local aU=0;local aV=false;local aW={}local aX={}local aY=d(1/apTickRate)*2;local aZ={}local a_={}local b0={}local b1={}local b2=false;local b3=16;local b4=0;local b5=nil;local b6=""local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=nil;local be=nil;local bf=false;local bg=false;local bh=autoRollPreference;local bi=vec3(core.getWorldVelocity())local bj=vec3(bi):len()local bk=LandingGearGroundHeight;local bl=system.getMouseDeltaX()local bm=system.getMouseDeltaY()local bn=false;local bo=t()local bp=0;local bq=0;local br=0;local bs=AtmoSpeedLimit;local bt=0;local bu=nil;local bv=0;local bw=0;local bx=false;local by=false;local bz={VectorToTarget=false}local bA=false;local bB=0;local bC=nil;local bD=false;local bE=false;local bF=false;local bG=false;local bH=0;local bI=t()local function bJ(bK)local bL=dbHud_1.hasKey;for bM,bN in pairs(bK)do if bL(bN)then local bO=f(dbHud_1.getStringValue(bN))if bO~=nil then _G[bN]=bO;aN=true end end end end;local function bP()if dbHud_1 then local bL=dbHud_1.hasKey;bJ(a)coroutine.yield()bJ(b)if aN then a1="Loaded Saved Variables (see Lua Chat Tab for list)"J=u(ResolutionX/2,0)K=u(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bh=autoRollPreference;bs=AtmoSpeedLimit;ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]else a1="No Saved Variables Found - Stand up / leave remote to save settings"end else a1="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bI then LastMaxBrakeInAtmo=0 end;LastStartTime=bI;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a1="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ag=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function bQ(bR,bS)if bR>bS then bS=bR end;if ContainerOptimization>0 then bS=bS-bS*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bS=bS-bS*FuelTankOptimization*0.05 end;return bS end;local function bT()local bU=fuelX~=0 and fuelY~=0;for bM in pairs(at)do local type=l(at[bM])if r(type,'^.*Space Engine$')then bG=true;if r(tostring(core.getElementTagsById(at[bM])),'^.*vertical.*$')then local bV=core.getElementRotationById(at[bM])if bV[4]<0 then if s(-bV[4],0.1)==0.5 then bE=true end else if s(bV[4],0.1)==0.5 then bF=true end end end end;if type=="Landing Gear"then R=true end;if type=="Dynamic Core Unit"then local bW=h(at[bM])if bW>10000 then b3=128 elseif bW>1000 then b3=64 elseif bW>150 then b3=32 end end;aU=aU+h(at[bM])if bU and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bW=h(at[bM])local bX=m(at[bM])local bR=0;local bY=t()if type=="Atmospheric Fuel Tank"then local bS=400;local bZ=35.03;if bW>10000 then bS=51200;bZ=5480 elseif bW>1300 then bS=6400;bZ=988.67 elseif bW>150 then bS=1600;bZ=182.67 end;bR=bX-bZ;if fuelTankHandlingAtmo>0 then bS=bS+bS*fuelTankHandlingAtmo*0.2 end;bS=bQ(bR,bS)aR[#aR+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end;if type=="Rocket Fuel Tank"then local bS=320;local bZ=173.42;if bW>65000 then bS=40000;bZ=25740 elseif bW>6000 then bS=5120;bZ=4720 elseif bW>700 then bS=640;bZ=886.72 end;bR=bX-bZ;if fuelTankHandlingRocket>0 then bS=bS+bS*fuelTankHandlingRocket*0.1 end;bS=bQ(bR,bS)aT[#aT+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end;if type=="Space Fuel Tank"then local bS=2400;local bZ=182.67;if bW>10000 then bS=76800;bZ=5480 elseif bW>1300 then bS=9600;bZ=988.67 end;bR=bX-bZ;if fuelTankHandlingSpace>0 then bS=bS+bS*fuelTankHandlingSpace*0.2 end;bS=bQ(bR,bS)aS[#aS+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end end end end;local function b_()if gyro~=nil then av=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(ar or not ar and as<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(ar or not ar==0 and as<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if p()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if R then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local c0=AboveGroundLevel()if c0~=-1 or not ar and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not R then GearExtended=true end else BrakeIsOn=false end;if bk~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bk)if bk==0 and not R then GearExtended=true;BrakeIsOn=true end else bk=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ar and c0~=-1 then bd=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ar end;local function c1(bN)if ResolutionX==1920 then return bN else return u(ResolutionX*bN/1920,0)end end;local function c2(bN)if ResolutionY==1080 then return bN else return u(ResolutionY*bN/1080,0)end end;local function c3(c4,c5)if c4==nil then c4=core.g()end;c4=u(c4,5)local c6=j()if c5~=nil and c5 or(aQ==nil or aQ~=c4)then local bi=core.getVelocity()local c7=vec3(bi):len()local c8=f(unit.getData()).maxBrake;if c8~=nil and c8>0 and ar then c8=c8/utils.clamp(c7/100,0.1,1)c8=c8/c6;if c6>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c8)/2 else LastMaxBrakeInAtmo=c8 end end end;if c8~=nil and c8>0 then LastMaxBrake=c8 end;aQ=c4 end end;local function c9(ca,cb,cc,cd,ce,cf,cg,ch,ci)local cj={enableName=ca,disableName=cb,width=cc,height=cd,x=ce,y=cf,toggleVar=cg,toggleFunction=ch,drawCondition=ci,hovered=false}table.insert(aE,cj)return cj end;local function ck()AtlasOrdered={}for bM,bN in pairs(b5[0])do table.insert(AtlasOrdered,{name=bN.name,index=bM})end;local function cl(cm,cn)return cm.name<cn.name end;table.sort(AtlasOrdered,cl)end;local function co()for bM,bN in pairs(SavedLocations)do table.insert(b5[0],bN)end;ck()end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function cs(ct,cu)local cv=vec3(cu)if ct.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=ct.planetarySystemId},MapPosition)end;local cw=cv-ct.center;local ah=cw:len()local cx=ah-ct.radius;local cy=0;local cz=0;if not cp(ah,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ah)end;return setmetatable({latitude=math.deg(cy),longitude=math.deg(cz),altitude=cx,bodyId=ct.bodyId,systemId=ct.planetarySystemId},MapPosition)end;local function cB(cC)local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local cE,cF,cy,cz,cx=r(cC,cD)if cE=="0"and cF=="0"then return vec3(tonumber(cy),tonumber(cz),tonumber(cx))end;cz=math.rad(cz)cy=math.rad(cy)local planet=b5[tonumber(cE)][tonumber(cF)]local cG=math.cos(cy)local cH=vec3(cG*math.cos(cz),cG*math.sin(cz),math.sin(cy))return planet.center+(planet.radius+cx)*cH end;local function cI(cJ,planet,cC)if dbHud_1 then local cK={}local position=cB(cC)if planet.name=="Space"then cK={position=position,name=cJ,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cL=false;if planet.hasAtmosphere then cL=true else cL=false end;cK={position=position,name=cJ,atmosphere=cL,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cK;table.insert(b5[0],cK)ck()else a1="Databank must be installed to save locations"end end;local function cM(ah,cN)local cO=ah>100000;local bO,cP=""if cN==nil then cN=1 end;if cO then bO,cP=u(ah/1000/200,cN),"SU"elseif ah<1000 then bO,cP=u(ah,cN),"M"else bO,cP=u(ah/1000,cN),"KM"end;return bO,cP end;local function cQ(cR)for bM,bN in pairs(cR)do if bN.name and bN.name==CustomTarget.name then return bM end end;return-1 end;local function cS()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cT=planet.name..". "..#SavedLocations;if radar_1 then local cU,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cU~=nil and cU~=""then cT=cT.." "..radar_1.getConstructName(cU)end end;local cK={}local cL=false;if planet.hasAtmosphere then cL=true end;cK={position=position,name=cT,atmosphere=cL,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cK;table.insert(b5[0],cK)ck()a1="Location saved as "..cT else a1="Databank must be installed to save locations"end end;local function cV(cW)local cX=-1;local cK;cX=cQ(SavedLocations)if cX~=-1 then local cY;if cW~=nil then cK={position=SavedLocations[cX].position,name=cW,atmosphere=SavedLocations[cX].atmosphere,planetname=SavedLocations[cX].planetname,gravity=SavedLocations[cX].gravity}else cK={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cX].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cX]=cK;cX=-1;cX=cQ(b5[0])if cX>-1 then b5[0][cX]=cK end;ck()a1=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else a1="Name Not Found"end end;local function cZ()local cX=-1;cX=cQ(b5[0])if cX>-1 then table.remove(b5[0],cX)end;cX=-1;cX=cQ(SavedLocations)if cX~=-1 then a1=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cX)end;DecrementAutopilotTargetIndex()ck()end;local function c_(d0)d0[#d0+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;local function d1()if radarPanelID~=nil and ak==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ak==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ak=0 end end;local function d2()aD=not aD;if not aD then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function d3()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function d4()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function d5(d6,d7,ce,cf,cc,cd)if d6>ce and d6<ce+cc and d7>cf and d7<cf+cd then return true else return false end end;local function d8()TurnBurn=not TurnBurn end;local function d9()if bI-bq<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bq=-1;if AltitudeHold then return end end else bq=bI end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Z=false;bh=true;LockPitch=nil;bD=false;if hoverDetectGround()==-1 then AutoTakeoff=false;if bq>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if not ar then bD=false;bA=true;IntoOrbit=true;if not am and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bq>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if am then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bh=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function da(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then d9()end end;VectorStatus="Proceeding to Waypoint"end;local function db()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*o()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0 end end;local function dc()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then d9()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then d9()end;AutoTakeoff=true;HoldAltitude=as+AutoTakeoffAltitude end;bD=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function ToggleIntoOrbit()bx=false;bv=nil;bw=nil;bH=0;if IntoOrbit then if bD then CancelIntoOrbit=false else CancelIntoOrbit=true end;bD=false;IntoOrbit=false;bC=nil elseif unit.getClosestPlanetInfluence()>0 and j()==0 then IntoOrbit=true;bD=false;CancelIntoOrbit=false;if bC==nil then bC=planet end else a1="Unable to engage orbiting, not near planet or in atmosphere"end end;local function dd()local de=vec3(core.getConstructWorldOrientationForward())local df=vec3(core.getConstructWorldOrientationRight())local dg=vec3(core.getConstructWorldOrientationUp())local dh=vec3(core.getWorldVertical())return de,df,dg,dh end;local function di()if LockPitch==nil then local de,df,_,dh=dd()local dj=getPitch(dh,de,df)LockPitch=dj;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function dk()if p()==1 then Z=not Z;if Z then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bh=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else a1="Follow Mode only works with Remote controller"Z=false end end;local function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a9=nil;CustomTarget=nil;return true end;local dl=AtlasOrdered[AutopilotTargetIndex].index;local dm=b5[0][dl]if dm.center then AutopilotTargetName=dm.name;a9=bb[0][dl]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=dm;for _,bN in pairs(bb[0])do if bN.name==CustomTarget.planetname then a9=bN;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a9.center)else AutopilotTargetCoords=CustomTarget.position end;if a9.planetname~="Space"then if a9.hasAtmosphere then AutopilotTargetOrbit=math.floor(a9.radius*(TargetOrbitRadius-1)+a9.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a9.radius*(TargetOrbitRadius-1)+a9.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=be(a9):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function dn(dp)if not Autopilot and not VectorToTarget and not am then if dp==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local dl=AtlasOrdered[AutopilotTargetIndex].index;local dm=b5[0][dl]if dm.name=="Space"then if dp==nil then dn()else dn(1)end else UpdateAutopilotTarget()end end else a1="Disengage autopilot before changing Interplanetary Helper"end end;local function dq()if bI-br<1.5 and j()>0 then if not bG then a1="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;br=-1;if Autopilot or VectorToTarget then return end end else br=bI end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am then UpdateAutopilotTarget()local dr=cs(a9,AutopilotTargetCoords)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then am=true;d9()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then bD=false;if not VectorToTarget then da(SpaceTarget)end else if as>100000 or as==0 then bD=false;Autopilot=true else al=true;ProgradeIsOn=true;if AltitudeHold then d9()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then am=true;d9()else Autopilot=true end end elseif j()==0 then local ds=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a9.name==planet.name and ds)then bD=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Z=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;L=false;LockPitch=nil;WaypointSet=false end else am=true;d9()end else am=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;L=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=as;TargetSet=false;Reentry=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bh=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bh=autoRollPreference;al=false;an=false;ad=0 end end;function CheckDamage(d0)local dt=0;aC=""local du=aU;local dv=0;local dw=0;local dx=0;local dy=0;local dz=""for bM in pairs(at)do local bW=0;local dA=0;dA=h(at[bM])bW=k(at[bM])dv=dv+bW;if bW<dA then if bW==0 then dx=dx+1 else dw=dw+1 end;if aV and#az==0 then position=vec3(core.getElementPositionById(at[bM]))local ce=position.x-b3;local cf=position.y-b3;local dB=position.z-b3;table.insert(az,core.spawnArrowSticker(ce,cf,dB+1,"down"))table.insert(az,core.spawnArrowSticker(ce,cf,dB+1,"down"))core.rotateSticker(az[2],0,0,90)table.insert(az,core.spawnArrowSticker(ce+1,cf,dB,"north"))table.insert(az,core.spawnArrowSticker(ce+1,cf,dB,"north"))core.rotateSticker(az[4],90,90,0)table.insert(az,core.spawnArrowSticker(ce-1,cf,dB,"south"))table.insert(az,core.spawnArrowSticker(ce-1,cf,dB,"south"))core.rotateSticker(az[6],90,-90,0)table.insert(az,core.spawnArrowSticker(ce,cf-1,dB,"east"))table.insert(az,core.spawnArrowSticker(ce,cf-1,dB,"east"))core.rotateSticker(az[8],90,0,90)table.insert(az,core.spawnArrowSticker(ce,cf+1,dB,"west"))table.insert(az,core.spawnArrowSticker(ce,cf+1,dB,"west"))core.rotateSticker(az[10],-90,0,90)table.insert(az,at[bM])end elseif aV and#az>0 and az[11]==at[bM]then for dC in pairs(az)do core.deleteSticker(az[dC])end;az={}end end;dt=d(dv/du*100)if dt<100 then d0[#d0+1]=[[<g class="pbright txt">]]dy=d(dt*2.55)dz=e("rgb(%d,%d,%d)",255-dy,dy,0)if dt<100 then d0[#d0+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dz,dt)if dx>0 then d0[#d0+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dz,dx,dw)elseif dw>0 then d0[#d0+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dz,dw)end end;d0[#d0+1]=[[<\g>]]end end;function DrawCursorLine(d0)local dD=d(utils.clamp(ah/(aH/4)*255,0,255))d0[#d0+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ae,af,d(y+0.5)+dD,d(A+0.5)-dD,d(z+0.5)-dD)end;function getPitch(dE,dF,cn)local dG=dE:cross(cn):normalize_inplace()local dj=math.acos(utils.clamp(dG:dot(-dF),-1,1))*constants.rad2deg;if dG:cross(-dF):dot(cn)<0 then dj=-dj end;return dj end;local function dH(dI,dJ,dK)dJ=dJ:project_on_plane(dI)dK=dK:project_on_plane(dI)return q(dJ:cross(dK):dot(dI),dJ:dot(dK))end;function clearAll()if ap then ap=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Z=false;L=false;al=false;am=false;O=false;bh=autoRollPreference;VectorToTarget=false;TurnBurn=false;av=false;LockPitch=nil else ap=true end end;function wipeSaveVariables()if not dbHud_1 then a1="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ag=5 else if aO then for bM,bN in pairs(a)do dbHud_1.setStringValue(bN,g(nil))end;for bM,bN in pairs(b)do if bN~="SavedLocations"then dbHud_1.setStringValue(bN,g(nil))end end;a1="Databank wiped. New variables will save after re-enter seat and exit"ag=5;aO=false;aN=false;ac=true else a1="Press ALT-7 again to confirm wipe of ALL data"aO=true end end end;function CheckButtons()for _,bN in pairs(aE)do if bN.hovered then if not bN.drawCondition or bN.drawCondition()then bN.toggleFunction()end;bN.hovered=false end end end;function SetButtonContains()local ce=ae+aH/2;local cf=af+aI/2;for _,bN in pairs(aE)do bN.hovered=d5(ce,cf,bN.x,bN.y,bN.width,bN.height)end end;function DrawButton(d0,dL,hover,ce,cf,dM,dN,dO,dP,dQ,dR)if type(dQ)=="function"then dQ=dQ()end;if type(dR)=="function"then dR=dR()end;d0[#d0+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",ce,cf,dM,dN)if dL then d0[#d0+1]=e("%s'",dO)else d0[#d0+1]=dP end;if hover then d0[#d0+1]=" style='stroke:white; stroke-width:2'"else d0[#d0+1]=" style='stroke:black; stroke-width:1'"end;d0[#d0+1]="></rect>"d0[#d0+1]=e("<text x='%f' y='%f' font-size='24' fill='",ce+dM/2,cf+dN/2+5)if dL then d0[#d0+1]="black"else d0[#d0+1]="white"end;d0[#d0+1]="' text-anchor='middle' font-family='Montserrat'>"if dL then d0[#d0+1]=e("%s</text>",dQ)else d0[#d0+1]=e("%s</text>",dR)end end;function DrawButtons(d0)local dS="rgb(50,50,50)'"local dT="rgb(210,200,200)"local dU=DrawButton;for _,bN in pairs(aE)do local cb=bN.disableName;local ca=bN.enableName;if type(cb)=="function"then cb=cb()end;if type(ca)=="function"then ca=ca()end;if not bN.drawCondition or bN.drawCondition()then dU(d0,bN.toggleVar(),bN.hovered,bN.x,bN.y,bN.width,bN.height,dT,dS,cb,ca)end end end;function DrawTank(d0,b2,ce,dV,dW,dX,dY,dZ)local d_=1;local e0=2;local e1=3;local e2=4;local e3=5;local e4=6;local e5=""local e6=0;local e7=fuelY;local e8=fuelY+10;if p()==1 and not RemoteHud then e7=e7-50;e8=e8-50 end;d0[#d0+1]=[[<g class="pdim txtfuel">]]if dW=="ATMO"then e5="atmofueltank"elseif dW=="SPACE"then e5="spacefueltank"else e5="rocketfueltank"end;e6=_G[e5 .."_size"]if#dX>0 then for i=1,#dX do local cT=string.sub(dX[i][e0],1,12)local e9=0;for dC=1,e6 do if dX[i][e0]==f(unit[e5 .."_"..dC].getData()).name then e9=dC;break end end;if b2 or dY[i]==nil or dZ[i]==nil then local ea=0;local eb=0;local ec=0;local ed=0;local bY=t()if e9~=0 then dZ[i]=f(unit[e5 .."_"..e9].getData()).percentage;dY[i]=f(unit[e5 .."_"..e9].getData()).timeLeft;if dY[i]=="n/a"then dY[i]=0 end else ec=m(dX[i][d_])-dX[i][e2]ea=dX[i][e1]dZ[i]=d(0.5+ec*100/ea)eb=dX[i][e3]ed=dX[i][e4]if eb<=ec then dY[i]=0 else dY[i]=d(0.5+ec/((eb-ec)/(bY-ed)))end;dX[i][e3]=ec;dX[i][e4]=bY end end;if cT==dV then cT=e("%s %d",dW,i)end;if e9==0 then cT=cT.." *"end;local ee;if dY[i]==0 then ee="n/a"else ee=FormatTimeString(dY[i])end;if dZ[i]~=nil then local dy=d(dZ[i]*2.55)local dz=e("rgb(%d,%d,%d)",255-dy,dy,0)local ef=""if ee~="n/a"and dY[i]<120 or dZ[i]<5 then if b2 then ef=[[class="red"]]end end;d0[#d0+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],ce,e7,ef,cT,ce,e8,dz,dZ[i],ee)e7=e7+30;e8=e8+30 end end end;d0[#d0+1]="</g>"end;function getRelativePitch(bi)bi=vec3(bi)local dj=-math.deg(math.atan(bi.y,bi.z))+180;dj=dj-90;if dj<0 then dj=360+dj end;if dj>180 then dj=-180+dj-180 end;return-dj end;function getRelativeYaw(bi)bi=vec3(bi)local eg=math.deg(math.atan(bi.y,bi.x))-90;if eg<-180 then eg=360+eg end;return eg end;function AlignToWorldVector(eh,ei,ej)if not ar or not bn or ao~=-1 or bj<N then local ek=ej;if ek==nil then ek=DampingMultiplier end;if ei==nil then ei=aG end;eh=vec3(eh):normalize()local el=vec3(core.getConstructWorldOrientationForward())-eh;local em=-getMagnitudeInDirection(el,core.getConstructWorldOrientationRight())*aF;local en=-getMagnitudeInDirection(el,core.getConstructWorldOrientationUp())*aF;if aA==0 then aA=em/2 end;if aB==0 then aB=en/2 end;if math.abs(em)<0.1 then U=U-em*2 else U=U-(em+(em-aA)*ek)end;if math.abs(en)<0.1 then T=T+en*2 else T=T+en+(en-aB)*ek end;aA=em;aB=en;if math.abs(em)<ei and math.abs(en)<ei then return true end;return false elseif bn and ao==-1 then eh=vec3(core.getWorldVelocity())local ek=ej;if ek==nil then ek=DampingMultiplier end;if ei==nil then ei=aG end;eh=vec3(eh):normalize()local el=vec3(core.getConstructWorldOrientationForward())-eh;local em=-getMagnitudeInDirection(el,core.getConstructWorldOrientationRight())*aF;local en=-getMagnitudeInDirection(el,core.getConstructWorldOrientationUp())*aF;if aA==0 then aA=em/2 end;if aB==0 then aB=en/2 end;if math.abs(em)<0.1 then U=U-em*5 else U=U-(em+(em-aA)*ek)end;if math.abs(en)<0.1 then T=T+en*5 else T=T+en+(en-aB)*ek end;aA=em;aB=en;if math.abs(em)<ei and math.abs(en)<ei then return true end;return false end end;function getAPEnableName()local cT=AutopilotTargetName;if cT==nil then local eo,cP=cM((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cT=CustomTarget.name.." "..eo..cP end;if cT==nil then cT="None"end;return"Engage Autopilot: "..cT end;function getAPDisableName()local cT=AutopilotTargetName;if cT==nil then cT=CustomTarget.name end;if cT==nil then cT="None"end;return"Disable Autopilot: "..cT end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then a1="Re-Entry cancelled"Reentry=false;bh=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a1="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ag=5 elseif not O then StrongBrakes=planet.gravity*9.80665*o()<LastMaxBrakeInAtmo;if not StrongBrakes then a1="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bh=true;BrakeIsOn=false;a1="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bh=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local ep,eq=cM(HoldAltitude)a1="Beginning Re-entry.  Target speed: "..bs.." Target Altitude: "..ep..eq;cmdCruise(math.floor(bs))end;AutoTakeoff=false end;function SetupButtons()local er=50;local es=260;local et=c9("Enable Brake Toggle","Disable Brake Toggle",es,er,aH/2-es/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a1="Brakes in Toggle Mode"else a1="Brakes in Default Mode"end end)c9("Align Prograde","Disable Prograde",es,er,aH/2-es/2-50-et.width,aI/2-er+380,function()return ProgradeIsOn end,ProgradeToggle)c9("Align Retrograde","Disable Retrograde",es,er,aH/2-es/2+et.width+50,aI/2-er+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local eu=c9(getAPEnableName,getAPDisableName,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,dq)c9("Save Position","Save Position",200,eu.height,eu.x+eu.width+30,eu.y,function()return false end,cS,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)c9("Update Position","Update Position",200,eu.height,eu.x+eu.width+30,eu.y,function()return false end,cV,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)c9("Clear Position","Clear Position",200,eu.height,eu.x-200-30,eu.y,function()return true end,cZ,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)er=60;es=300;local ce=10;local cf=aI/2-300;c9("Enable Turn and Burn","Disable Turn and Burn",es,er,ce,cf,function()return TurnBurn end,d8)c9("Engage Altitude Hold","Disable Altitude Hold",es,er,ce+es+20,cf,function()return AltitudeHold end,d9)cf=cf+er+20;c9("Engage Autoland","Disable Autoland",es,er,ce,cf,function()return AutoLanding end,db)local ev,ew,ex;if VertTakeOffEngine then ev="Engage Vertical Takeoff"ew="Disable Vertical Takeoff"ex=VertTakeOff else ev="Engage Auto Takeoff"ew="Disable Auto Takeoff"ex=AutoTakeoff end;c9(ev,ew,es,er,ce+es+20,cf,function()return ex end,dc)cf=cf+er+20;c9("Show Orbit Display","Hide Orbit Display",es,er,ce,cf,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a1="Orbit Display Enabled"else a1="Orbit Display Disabled"end end)c9("Engage Orbiting","Cancel Orbiting",es,er,ce+es+20,cf,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)cf=cf+er+20;c9("Glide Re-Entry","Cancel Glide Re-Entry",es,er,ce,cf,function()return Reentry end,function()al=true;ProgradeToggle()end,function()return as>ReentryAltitude end)c9("Parachute Re-Entry","Cancel Parachute Re-Entry",es,er,ce+es+20,cf,function()return Reentry end,BeginReentry,function()return as>ReentryAltitude end)cf=cf+er+20;c9("Engage Follow Mode","Disable Follow Mode",es,er,ce,cf,function()return Z end,dk,function()return p()==1 end)c9("Enable Repair Arrows","Disable Repair Arrows",es,er,ce+es+20,cf,function()return aV end,function()aV=not aV;if aV then a1="Repair Arrows Enabled"else a1="Repair Arrows Diabled"end end,function()return p()==1 end)cf=cf+er+20;if not ExternalAGG then c9("Enable AGG","Disable AGG",es,er,ce,cf,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;cf=cf+er+20;c9(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,es*2,er,ce,cf,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local ey=Nav.axisCommandManager:getAxisCommandType(0)local ez="TRAVEL"if ey==1 then ez="CRUISE"end;if Autopilot then ez="AUTOPILOT"end;return ez end;function UpdateHud(d0)local cx=as;local bi=core.getVelocity()local c7=vec3(bi):len()local de,df,dg,dh=dd()local eA=getRoll(dh,de,df)local eB=eA/180*math.pi;local eC=math.cos(eB)local eD=math.sin(eB)local dj=getPitch(dh,de,df*eC+dg*eD)local eE=eA;local eF=dj;local eG=j()local eH=d(unit.getThrottle())local eI=c7*3.6;local eJ=unit.getAxisCommandValue(0)local eK=c1(1770)local eL=c2(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eJ=E;eH=E*100 end;local ez=GetFlightStyle()local eM="ROLL"local ds=unit.getClosestPlanetInfluence()>0;if eH==nil then eH=0 end;if not ds then if c7>5 then dj=getRelativePitch(bi)eA=getRelativeYaw(bi)else dj=0;eA=0 end;eM="YAW"end;if C>50000 and not ar then local eN;if C>200000 then eN=u(C/200000,2).." su"else eN=u(C/1000,1).." km"end;d0[#d0+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],eK,eL,eN)end;d0[#d0+1]=aj;d0[#d0+1]=aC;d0[#d0+1]=ai;if b4%aY==0 then b2=true end;if fuelX~=0 and fuelY~=0 then DrawTank(d0,b2,fuelX,"Atmospheric ","ATMO",aR,b0,b1)DrawTank(d0,b2,fuelX+100,"Space fuel t","SPACE",aS,aZ,a_)DrawTank(d0,b2,fuelX+200,"Rocket fuel ","ROCKET",aT,aW,aX)end;if b2 then b2=false;b4=0 end;b4=b4+1;DrawVerticalSpeed(d0,cx)if p()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if ds then DrawRollLines(d0,centerX,centerY,eE,eM,ds)DrawArtificialHorizon(d0,eF,eE,centerX,centerY,ds,d(getRelativeYaw(bi)),c7)else DrawRollLines(d0,centerX,centerY,eA,eM,ds)DrawArtificialHorizon(d0,dj,eA,centerX,centerY,ds,d(eA),c7)end;DrawAltitudeDisplay(d0,cx,ds)DrawPrograde(d0,bi,c7,centerX,centerY)end end;DrawThrottle(d0,ez,eH,eJ)DrawSpeed(d0,eI)DrawWarnings(d0)DisplayOrbitScreen(d0)if screen_2 then local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/b7;local cf=450+cC.y/b8;screen_2.moveContent(b9,(ce-80)/19.2,(cf-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and p()==0 end;function HUDPrologue(d0)if not B then y=PvPR;A=PvPG;z=PvPB else y=SafeR;A=SafeG;z=SafeB end;ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]local eO=ax;local eP=ay;local eQ=ax;local eR=ay;if IsInFreeLook()and not brightHud then eO=[[rgb(]]..d(y*0.4+0.5)..","..d(A*0.4+0.5)..","..d(z*0.3+0.5)..[[)]]eP=[[rgb(]]..d(y*0.3+0.5)..","..d(A*0.3+0.5)..","..d(z*0.2+0.5)..[[)]]end;d0[#d0+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],eO,eO,eQ,eQ,eP,eP,eR,eR,ResolutionX,ResolutionY)end;function HUDEpilogue(d0)d0[#d0+1]="</svg>"end;function DrawSpeed(d0,eI)local eS=throtPosY-10;local eT=throtPosX+10;d0[#d0+1]=[[<g class="pdim txt txtend">]]if p()==1 and not RemoteHud then eS=75 end;d0[#d0+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],eT,eS,d(eI))end;function DrawOdometer(d0,aa,TotalDistanceTravelled,ez,ab,eG)local eU=c1(1240)local eV=c2(55)local eW=eV+10;local eG=j()local c4=core.g()local eX=0;local eY=0;local eZ=0;c3(c4)if ar then eZ=LastMaxBrakeInAtmo else eZ=LastMaxBrake end;maxThrust=Nav:maxForceForward()aP=o()if not ShowOdometer then return end;local e_=vec3(core.getWorldAcceleration()):len()/9.80665;if c4>0.1 then eY=aP*c4;eX=maxThrust/c4 end;d0[#d0+1]=[[<g class="pdim txt txtend">]]if p()==1 and not RemoteHud then eU=c1(1120)eV=c2(55)eW=eV+10 elseif ar then local f0=c1(770)d0[#d0+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],f0,eV,f0,eW,eG)end;d0[#d0+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],eU,eV,eU,eW,c4/9.80665,eU,eV+20,eU,eW+20,e_)d0[#d0+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],c1(660),c1(700),c2(35),c1(960),c2(55),c1(1240),c2(35),c1(1280))if p()==0 or RemoteHud then d0[#d0+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],c1(700),c2(20),aa,c1(700),c2(30),TotalDistanceTravelled/1000,c1(830),c2(20),FormatTimeString(ab),c1(830),c2(30),FormatTimeString(TotalFlightTime),c1(970),c2(20),aP/1000,c1(1240),c2(10),eZ/1000,c1(1240),c2(30),maxThrust/1000,c1(960),c2(180),ez)if c4>0.1 then d0[#d0+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],c1(970),c2(30),eX/1000,c1(1240),c2(20),eY/1000)else d0[#d0+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],c1(970),c2(30),c1(1240),c2(20))end else d0[#d0+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],c1(960),c2(33),ez)end;d0[#d0+1]="</g>"end;function DrawThrottle(d0,ez,eH,eJ)eH=math.floor(eH+0.5)local e7=throtPosY+10;local e8=throtPosY+20;if p()==1 and not RemoteHud then e7=55;e8=65 end;local f1="CRUISE"local unit="km/h"local f2=eJ;if ez=="TRAVEL"or ez=="AUTOPILOT"then f1="THROT"unit="%"f2=eH;local f3="dim"if eH<0 then f3="red"end;d0[#d0+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],f3,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eH),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;d0[#d0+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,e7,f1,throtPosX+10,e8,f2,unit)if ar and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and G then eH=math.floor(H*100+0.5)local f3="red"if eH<0 then f3="red"end;d0[#d0+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],f3,1-math.abs(eH),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)d0[#d0+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,e7+40,"LIMIT",throtPosX+10,e8+40,eH,"%")end;if ar and AtmoSpeedAssist or Reentry then d0[#d0+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,e7-40,"LIMIT: ",bs.." km/h")elseif not ar and Autopilot then d0[#d0+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,e7-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(d0,cx)if cx<200000 and not ar or cx and ar then local f4=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local f5=0;if math.abs(f4)>1 then f5=45*math.log(math.abs(f4),10)if f4<0 then f5=-f5 end end;d0[#d0+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(f4),d(f5))end end;function getHeading(dF)local dp=-vec3(core.getWorldVertical())dF=dF-dF:project_on(dp)local f6=vec3(0,0,1)f6=f6-f6:project_on(dp)local f7=f6:cross(dp)local f5=f6:angle_between(dF)*constants.rad2deg;if dF:dot(f7)<0 then f5=360-f5 end;return f5 end;function DrawRollLines(d0,centerX,centerY,eE,eM,ds)local f8=circleRad;local f9=20;f9=d(f9)local fa=d(eE)if ds then for i=-45,45,5 do local fb=i;d0[#d0+1]=e([[<g transform="rotate(%f,%d,%d)">]],fb,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;d0[#d0+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+f8+f9-len,centerX,centerY+f8+f9)end;d0[#d0+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+f8+f9-35,eM,centerX,centerY+f8+f9-25,fa)d0[#d0+1]=e([[<g transform="rotate(%f,%d,%d)">]],-eE,centerX,centerY)d0[#d0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+f8+f9-20,centerX+5,centerY+f8+f9-20,centerX,centerY+f8+f9-15)d0[#d0+1]="</g>"end;local eg=fa;if ds then eg=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local fc=20;local fd=d(eg)local fe=0;local ff=centerY+f8+f9+20;local fg=centerX;if eM~="YAW"then ff=c2(130)fg=c1(960)end;local fh=[[<path class="txttick line" d="]]for i=d(fd-(fc+10)-fd%5+0.5),d(fd+fc+10+fd%5+0.5),5 do local ce=fg+-i*5+eg*5;if i%10==0 then fe=10;local v=i;if v==360 then v=0 elseif v>360 then v=v-360 elseif v<0 then v=v+360 end;d0[#d0+1]=e([[
                            <text x="%f" y="%f">%d</text>]],ce+5,ff-12,v)elseif i%5==0 then fe=5 end;if fe==10 then fh=e([[%s M %f %f v %d]],fh,ce,ff-5,fe)else fh=e([[%s M %f %f v %d]],fh,ce,ff-2.5,fe)end end;d0[#d0+1]=fh..[["/>]]d0[#d0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fg-5,ff+10,fg+5,ff+10,fg,ff+5)if ds then eM="HDG"end;d0[#d0+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],fg,ff+25,fd,fg,ff+35,eM)end;function DrawArtificialHorizon(d0,eF,eE,centerX,centerY,ds,fi,c7)local f8=circleRad;local fj=d(f8*3/5)if f8>0 then local fk=d(eF)local len=0;local fh=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*eE,centerX,centerY)if not ar then fh=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;d0[#d0+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],f8-1,centerX,centerY)d0[#d0+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(fk-30-fk%5+0.5),d(fk+30+fk%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cf=centerY+-i*5+eF*5;if len==30 then fh=e([[%s M %d %f h %d]],fh,centerX-fj-len,cf,len)if ar then d0[#d0+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eE,centerX,centerY,centerX-fj+10,cf,i)d0[#d0+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eE,centerX,centerY,centerX+fj-10,cf,i)if i==0 or i==180 or i==-180 then d0[#d0+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eE,centerX,centerY,centerX-fj+20,cf,fj*2-40)end else d0[#d0+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-fj+10,cf,i)d0[#d0+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+fj-10,cf,i)end;fh=e([[%s M %d %f h %d]],fh,centerX+fj,cf,len)else fh=e([[%s M %d %f h %d]],fh,centerX-fj-len,cf,len)fh=e([[%s M %d %f h %d]],fh,centerX+fj,cf,len)end end;d0[#d0+1]=fh..[["/>]]local fl="PITCH"if not ds then fl="REL PITCH"end;if eF>90 and not ar then eF=90-(eF-90)elseif eF<-90 and not ar then eF=-90-(eF+90)end;if f8>200 then if ar then if c7>N then d0[#d0+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,fi)end;d0[#d0+1]=e([[<g transform="rotate(%f,%d,%d)">]],-eE,centerX,centerY)else d0[#d0+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;d0[#d0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-fj+25,centerY-5,centerX-fj+20,centerY,centerX-fj+25,centerY+5,centerX-fj+50,centerY+4,fk)d0[#d0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+fj-25,centerY-5,centerX+fj-20,centerY,centerX+fj-25,centerY+5,centerX+fj-30,centerY+4,fk)d0[#d0+1]="</g>"end;local fm=d(f8/3)d0[#d0+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fm,centerY,f8-fm)if not ar and ds then d0[#d0+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eE,centerX,centerY,centerX-fj+10,centerY,fj*2-20)end;d0[#d0+1]="</g>"if f8<200 then if ar and c7>N then d0[#d0+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-f8,fl,centerX,centerY-f8+10,fk,centerX,centerY-15,"Yaw",centerX,centerY+20,fi)else d0[#d0+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-f8,fl,centerX,centerY-f8+15,fk)end end end end;function DrawAltitudeDisplay(d0,cx,ds)local fn=altMeterX;local fo=altMeterY;local fp=78;local fq=19;local fr=AboveGroundLevel()if fr~=-1 then table.insert(d0,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],fn+fp,fo+fq+20,fr))end;if ds and(cx<200000 and not ar or cx and ar)then table.insert(d0,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],fn-1,fo-4,fp+2,fq+6,fn+1,fo-1,fp-4,fq))local cX=0;local fs=1;local ft=0;local fu=cx<0;local fv=9;if fu then fv=0 end;local cx=math.abs(cx)while cX<6 do local fw=11;local fx=16;local fy=9;local fz=14;local ef="altsm"if cX>2 then fx=fx+3;fw=fw+2;fz=fz+2;fy=fy-6;ef="altbig"end;if fu then ef=ef.." red"end;local fA=cx/fs%10;local fB=d(fA)local fC=d((fB+1)%10)local fD=ft;if cX==0 then fD=fA-fB;if fu then fD=1-fD end end;if fu and(cX==0 or ft~=0)then local fE=fC;fC=fB;fB=fE end;local fF=fx*(fD-1)local fG=fF+fx;local ce=fn+fy+(6-cX)*fw;local cf=fo+fz;table.insert(d0,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],ef,ce,cf+fF,fC,ce,cf+fG,fB))cX=cX+1;fs=fs*10;if fB==fv then ft=fD else ft=0 end end;table.insert(d0,[[</g></g>]])end end;function DrawPrograde(d0,bi,c7,centerX,centerY)if c7>5 and not ar or c7>N then local f8=circleRad;local fH=20;local fI=20;local fJ=vec3(bi)local fK=getRelativePitch(fJ)local fL=getRelativeYaw(fJ)local fM=14;local fN=fM/2;local fO=-fL/fI*f8;local fP=fK/fH*f8;local ce=centerX+fO;local cf=centerY+fP;local ah=math.sqrt(fO^2+fP^2)local fQ=[[<circle
                cx="]]..ce..[["
                cy="]]..cf..[["
                r="]]..fN/fM..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..ce..[["
                cy="]]..cf..[["
                r="]]..fN..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..ce-fM..[[,]]..cf..[[ h ]]..fN..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..ce+fN..[[,]]..cf..[[ h ]]..fN..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..ce..[[,]]..cf-fM..[[ v ]]..fN..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ah<f8 then d0[#d0+1]=fQ else local f5=math.atan(fP,fO)local fR=4;local fS=centerX+f8*math.cos(f5)local fT=centerY+f8*math.sin(f5)d0[#d0+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',f5*180/math.pi,fS,fT,fS-fR,fT-fR/2,fR*2,fR,fS+fR,fT-fR,fR,fR,-fR,fR)end;if not ar then fK=getRelativePitch(-fJ)fL=getRelativeYaw(-fJ)fO=-fL/fI*f8;fP=fK/fH*f8;ce=centerX+fO;cf=centerY+fP;ah=math.sqrt(fO^2+fP^2)if ah<f8 then local fU=[[<circle
                        cx="]]..ce..[["
                        cy="]]..cf..[["
                        r="]]..fN..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..ce..[[,]]..cf-fM..[[ v ]]..fN..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..ce..[[,]]..cf..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..ce..[[,]]..cf..[[)" />
                     <path
                        d="M ]]..ce-fN..[[,]]..cf..[[ h ]]..fM..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..ce..[[,]]..cf..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..ce..[[,]]..cf..[[)"/>]]d0[#d0+1]=fU end end end end;function DrawWarnings(d0)d0[#d0+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],c1(1900),c2(1070),VERSION_NUMBER)d0[#d0+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then d0[#d0+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],c1(960),c2(550))d0[#d0+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],c1(960),c2(600))d0[#d0+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],c1(960),c2(650))end;local fV=c1(960)local fW=c2(860)local fX=c2(880)local fY=c2(900)local fZ=c2(960)local f_=c2(200)local g0=c2(150)local g1=c2(960)if p()==1 and not RemoteHud then fW=c2(135)fX=c2(155)fY=c2(175)f_=c2(115)g0=c2(95)end;if BrakeIsOn then d0[#d0+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fV,fW)elseif F>0 then d0[#d0+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fV,fW,F)end;if ar and bn and hoverDetectGround()==-1 then d0[#d0+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fV,f_+50)end;if av then d0[#d0+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fV,g1)end;if GearExtended then if R then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fV,fX)else d0[#d0+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fV,fX)end;local eo,cP=cM(Nav:getTargetGroundAltitude())d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fV,fY,eo..cP)end;if a4 then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fV,fZ+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(as-antigrav.getBaseAltitude())<501 then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fV,f_+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else d0[#d0+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fV,f_+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fV,f_+20,AutopilotStatus)elseif LockPitch~=nil then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fV,f_+20,d(LockPitch))elseif Z then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fV,f_+20)elseif Reentry then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fV,f_+20)end;local g2,g3,g4=bb:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bi:normalize(),function(g5)if g5.noAtmosphericDensityAltitude>0 then return g5.radius+g5.noAtmosphericDensityAltitude else return g5.radius+g5.surfaceMaxAltitude*1.5 end end)local g6=g3;if g4~=nil and g3~=nil then g6=math.min(g4,g3)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local eo,cP=cM(HoldAltitude,2)d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],fV,f_,eo..cP)if BrakeIsOn then d0[#d0+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fV,f_+50)end else local eo,cP=cM(HoldAltitude)d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fV,f_,eo..cP)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fV,f_)elseif j()<0.09 and j()>0.05 then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fV,f_)elseif j()<0.05 then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fV,f_)end end;if IntoOrbit then if bu~=nil then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fV,f_,bu)end end;if BrakeLanding then if StrongBrakes then d0[#d0+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fV,f_)else d0[#d0+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fV,f_)end end;if ProgradeIsOn then d0[#d0+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fV,f_)end;if RetrogradeIsOn then d0[#d0+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fV,f_)end;if TurnBurn then d0[#d0+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fV,g0)elseif g6~=nil and j()==0 then local eo,cP=cM(g6)local travelTime=bc.computeTravelTime(bj,0,g6)local g7="Collision"if g2.noAtmosphericDensityAltitude>0 then g7="Atmosphere"end;d0[#d0+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fV,g0,g2.name,g7,FormatTimeString(travelTime),eo..cP)end;if VectorToTarget and not IntoOrbit then d0[#d0+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fV,f_+30,VectorStatus)end;d0[#d0+1]="</g>"end;function DisplayOrbitScreen(d0)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local g8=OrbitMapX;local g9=OrbitMapY;local ga=OrbitMapSize;local gb=4;g9=g9+gb;local gc=15;local ce=g8+ga+g8/2+gb;local cf=g9+ga/2+5+gb;local gd,ge,gf,gg;gd=ga/4;gg=0;d0[#d0+1]=[[<g class="pbright txtorb txtmid">]]d0[#d0+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ga+g8*2,ga+g9,gb,gb)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gf=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(gd*2)ge=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gf*(1-orbit.eccentricity)gg=gd-orbit.periapsis.altitude/gf-planet.radius/gf;local gh=""if orbit.periapsis.altitude<=0 then gh='redout'end;d0[#d0+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],gh,g8+ga/2+gg+gb,g9+ga/2+gb,gd,ge)d0[#d0+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',g8+ga/2+gb,g9+ga/2+gb,planet.radius/gf)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then d0[#d0+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ce-35,cf-5,g8+ga/2+gd+gg,cf-5)d0[#d0+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],ce,cf)cf=cf+gc;local eo,cP=cM(orbit.apoapsis.altitude)d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,eo..cP)cf=cf+gc;d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,FormatTimeString(orbit.timeToApoapsis))cf=cf+gc;d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,getSpeedDisplayString(orbit.apoapsis.speed))end;cf=g9+ga/2+5+gb;ce=g8-g8/2+10+gb;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then d0[#d0+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ce+35,cf-5,g8+ga/2-gd+gg,cf-5)d0[#d0+1]=e([[<text x="%f" y="%f">Periapsis</text>]],ce,cf)cf=cf+gc;local eo,cP=cM(orbit.periapsis.altitude)d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,eo..cP)cf=cf+gc;d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,FormatTimeString(orbit.timeToPeriapsis))cf=cf+gc;d0[#d0+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,getSpeedDisplayString(orbit.periapsis.speed))end;d0[#d0+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],g8+ga/2+gb,20+gb,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gi=orbit.timeToApoapsis/orbit.period*2*math.pi;local gj=gd*math.cos(gi)local gk=ge*math.sin(gi)d0[#d0+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',g8+ga/2+gj+gg+gb,g9+ga/2+gk+gb)end;d0[#d0+1]=[[</g>]]end end;function getSpeedDisplayString(c7)return d(u(c7*3.6,0)+0.5).." km/h"end;function FormatTimeString(gl)local gm=0;local gn=0;local go=0;if gl<60 then gl=d(gl)elseif gl<3600 then gm=d(gl/60)gl=d(gl%60)elseif gl<86400 then gn=d(gl/3600)gm=d(gl%3600/60)else go=d(gl/86400)gn=d(gl%86400/3600)end;if go>0 then return go.."d "..gn.."h "elseif gn>0 then return gn.."h "..gm.."m "elseif gm>0 then return gm.."m "..gl.."s"elseif gl>0 then return gl.."s"else return"0s"end end;function getMagnitudeInDirection(eh,gp)eh=vec3(eh)gp=vec3(gp):normalize()local bO=eh*gp;return bO.x+bO.y+bO.z end;function GetAutopilotMaxMass()local gq=LastMaxBrakeInAtmo/a9:getGravity(a9.center+vec3(0,0,1)*a9.radius):len()return gq end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a9.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bi=core.getWorldVelocity()local c7=vec3(bi):len()local gr=unit.getThrottle()/100;if AtmoSpeedAssist then gr=E end;local gs,gt=bc.computeDistanceAndTime(vec3(bi):len(),MaxGameVelocity,o(),Nav:maxForceForward()*gr,warmup,0)local a5,a6;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,gu;if not TurnBurn and c7>0 then _,gu=GetAutopilotBrakeDistanceAndTime(c7)else _,gu=GetAutopilotTBBrakeDistanceAndTime(c7)end;local gv=0;local gw=0;if AutopilotCruising or not Autopilot and c7>5 then gw=bc.computeTravelTime(c7,0,AutopilotDistance)elseif a5+gs<AutopilotDistance then gv=AutopilotDistance-(a5+gs)gw=bc.computeTravelTime(8333.0556,0,gv)else local gx=(AutopilotDistance-a5)/gs;gs=AutopilotDistance-a5;gt=gt*gx end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gw elseif AutopilotBraking then return gu elseif AutopilotCruising then return gw+gu else return gt+a6+gw end end;function GetAutopilotBrakeDistanceAndTime(c7)if not ar then c3()return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),0,0,LastMaxBrake-AutopilotPlanetGravity*o())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*o())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(c7)c3()return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*o())end;function hoverDetectGround()local gy=-1;local gz=-1;if vBooster then gy=vBooster.distance()end;if hover then gz=hover.distance()end;if gy~=-1 and gz~=-1 then if gy<gz then return gy else return gz end elseif gy~=-1 then return gy elseif gz~=-1 then return gz else return-1 end end;function AboveGroundLevel()local gA=-1;local gB=hoverDetectGround()if telemeter_1 then gA=telemeter_1.getDistance()end;if gB~=-1 and gA~=-1 then if gB<gA then return gB else return gA end elseif gB~=-1 then return gB else return gA end end;function tablelength(gC)local gD=0;for _ in pairs(gC)do gD=gD+1 end;return gD end;function BeginProfile(gE)ProfileTimeStart=t()end;function EndProfile(gE)local gF=t()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gF;ProfileCount=ProfileCount+1;if gF>ProfileTimeMax then ProfileTimeMax=gF end;if gF<ProfileTimeMin then ProfileTimeMin=gF end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gG=ProfileTimeSum;local gH=ProfileTimeSum/ProfileCount;local gI=ProfileTimeMin;local gJ=ProfileTimeMax;local gK=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gG,gH,gI,gJ,gK))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gL=radar_1.getEntries()local gM=radar_1.getData()local gN=c1(1770)local gO=c2(330)if#gL>0 then local gP=gM:find('identifiedConstructs":%[%]')if gP==nil and perisPanelID==nil then ak=1;d1()end;if gP~=nil and perisPanelID~=nil then d1()end;if radarPanelID==nil then d1()end;ai=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gN,gO,#gL)local gQ={}for bM,bN in pairs(gL)do if radar_1.hastringmatchingTransponder(bN)==1 then table.insert(gQ,bN)end end;if#gQ>0 then local cf=c2(15)local ce=c1(1370)ai=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ai,ce,cf)for bM,bN in pairs(gQ)do cf=cf+20;ai=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ai,ce,cf,radar_1.getConstructName(bN))end end else local gR;gR=gM:find('worksInEnvironment":false')if gR then ai=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gN,gO)else ai=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gN,gO)end;if radarPanelID~=nil then ak=0;d1()end end end end;function DisplayMessage(d0,eo)if eo~="empty"then d0[#d0+1]=[[<text class="msg" x="50%%" y="310" >]]for gS in string.gmatch(eo,"([^\n]+)")do d0[#d0+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],gS)end;d0[#d0+1]=[[</text>]]end;if ag~=0 then unit.setTimer("msgTick",ag)ag=0 end end;function updateDistance()local bY=t()local bi=vec3(core.getWorldVelocity())local eI=vec3(bi):len()local gT=bY-au;if eI>1.38889 then eI=eI/1000;local gU=eI*(bY-au)TotalDistanceTravelled=TotalDistanceTravelled+gU;aa=aa+gU end;ab=ab+gT;TotalFlightTime=TotalFlightTime+gT;au=bY end;function composeAxisAccelerationFromTargetSpeedV(gV,gW)local gX=vec3()local gY=vec3()if gV==axisCommandId.longitudinal then gX=vec3(core.getConstructOrientationForward())gY=vec3(core.getConstructWorldOrientationForward())elseif gV==axisCommandId.vertical then gX=vec3(core.getConstructOrientationUp())gY=vec3(core.getConstructWorldOrientationUp())elseif gV==axisCommandId.lateral then gX=vec3(core.getConstructOrientationRight())gY=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gZ=vec3(core.getWorldGravity())local g_=gZ:dot(gY)local h0=vec3(core.getWorldAirFrictionAcceleration())local h1=h0:dot(gY)local h2=vec3(core.getVelocity())local h3=h2:dot(gX)local h4=gW*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(h4-h3)local h5=targetSpeedPID2:get()local h6=(h5-h1-g_)*gY;return h6 end;function composeAxisAccelerationFromTargetSpeed(gV,gW)local gX=vec3()local gY=vec3()if gV==axisCommandId.longitudinal then gX=vec3(core.getConstructOrientationForward())gY=vec3(core.getConstructWorldOrientationForward())elseif gV==axisCommandId.vertical then gX=vec3(core.getConstructOrientationUp())gY=vec3(core.getConstructWorldOrientationUp())elseif gV==axisCommandId.lateral then gX=vec3(core.getConstructOrientationRight())gY=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gZ=vec3(core.getWorldGravity())local g_=gZ:dot(gY)local h0=vec3(core.getWorldAirFrictionAcceleration())local h1=h0:dot(gY)local h2=vec3(core.getVelocity())local h3=h2:dot(gX)local h4=gW*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(h4-h3)local h5=targetSpeedPID:get()local h6=(h5-h1-g_)*gY;return h6 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b5=Atlas()for bM,bN in pairs(b5[0])do if aJ==nil or bN.center.x<aJ then aJ=bN.center.x end;if aK==nil or bN.center.x>aK then aK=bN.center.x end;if aL==nil or bN.center.y<aL then aL=bN.center.y end;if aM==nil or bN.center.y>aM then aM=bN.center.y end end;b6=""local h7=1.1*(aK-aJ)/1920;local h8=1.4*(aM-aL)/1080;for bM,bN in pairs(b5[0])do local ce=960+bN.center.x/h7;local cf=540+bN.center.y/h8;b6=b6 ..'<circle cx="'..ce..'" cy="'..cf..'" r="'..bN.radius/h7*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not r(bN.name,"Moon")and not r(bN.name,"Sanctuary")and not r(bN.name,"Space")then b6=b6 .."<text x='"..ce.."' y='"..cf+bN.radius/h7*30+20 .."' font-size='28' fill="..ax.." text-anchor='middle' font-family='Montserrat'>"..bN.name.."</text>"end end;local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/h7;local cf=540+cC.y/h8;b6=b6 ..'<circle cx="'..ce..'" cy="'..cf..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b6=b6 .."<text x='"..ce.."' y='"..cf-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b6=b6 ..[[</svg>]]b7=h7;b8=h8;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b6)local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/h7;local cf=540+cC.y/h8;b6='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b6=b6 .."<text x='80' y='105' font-size='18' fill="..ax.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b9=screen_2.addContent((ce-80)/19.20,(cf-80)/10.80,b6)end end;function PlanetRef()local function h9(ha)return type(ha)=='number'end;local function hb(ha)return type(tonumber(ha))=='number'end;local function hc(hd)return type(hd)=='table'end;local function he(hf)return type(hf)=='string'end;local function hg(bN)return hc(bN)and h9(bN.x and bN.y and bN.z)end;local function hh(hi)return hc(hi)and h9(hi.latitude and hi.longitude and hi.altitude and hi.bodyId and hi.systemId)end;local hj=math.pi/180;local hk=180/math.pi;local epsilon=1e-10;local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local hl=utils.clamp;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function hm(ha)local bO=string.gsub(string.reverse(e('%.4f',ha)),'^0*%.?','')return bO==''and'0'or string.reverse(bO)end;local function hn(ho)if hg(ho)then return e('{x=%.3f,y=%.3f,z=%.3f}',ho.x,ho.y,ho.z)end;if hc(ho)and not getmetatable(ho)then local hp={}local hq=next(ho)if type(hq)=='nil'or hq==1 then hp=ho else for bM,bN in pairs(ho)do local f2=hn(bN)if type(bM)=='number'then table.insert(hp,e('[%s]=%s',bM,f2))else table.insert(hp,e('%s=%s',bM,f2))end end end;return e('{%s}',table.concat(hp,','))end;if he(ho)then return e("'%s'",ho:gsub("'",[[\']]))end;return tostring(ho)end;local hr={}hr.__index=hr;hr.__tostring=function(ho,hs)local ht={}for bM in pairs(ho)do table.insert(ht,bM)end;table.sort(ht)local hp={}for _,bM in ipairs(ht)do local f2=hn(ho[bM])if type(bM)=='number'then table.insert(hp,e('[%s]=%s',bM,f2))else table.insert(hp,e('%s=%s',bM,f2))end end;if hs then return e('%s%s',hs,table.concat(hp,',\n'..hs))end;return e('{%s}',table.concat(hp,','))end;hr.__eq=function(hu,hv)return hu.planetarySystemId==hv.planetarySystemId and hu.bodyId==hv.bodyId and cp(hu.radius,hv.radius)and cp(hu.center.x,hv.center.x)and cp(hu.center.y,hv.center.y)and cp(hu.center.z,hv.center.z)and cp(hu.GM,hv.GM)end;local function hw(cE,cF,hx,cu,hy)assert(hb(cE),'Argument 1 (planetarySystemId) must be a number:'..type(cE))assert(hb(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(hb(hx),'Argument 3 (radius) must be a number:'..type(hx))assert(hc(cu),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cu))assert(hb(hy),'Argument 5 (GM) must be a number:'..type(hy))return setmetatable({planetarySystemId=tonumber(cE),bodyId=tonumber(cF),radius=tonumber(hx),center=vec3(cu),GM=tonumber(hy)},hr)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(hz)return e('::pos{%d,%d,%s,%s,%s}',hz.systemId,hz.bodyId,hm(hz.latitude*hk),hm(hz.longitude*hk),hm(hz.altitude))end;MapPosition.__eq=function(hu,hv)return hu.bodyId==hv.bodyId and hu.systemId==hv.systemId and cp(hu.latitude,hv.latitude)and cp(hu.altitude,hv.altitude)and(cp(hu.longitude,hv.longitude)or cp(hu.latitude,math.pi/2)or cp(hu.latitude,-math.pi/2))end;local function hA(hB,cF,cy,cz,cx)local cE=hB;if he(hB)and not cz and not cx and not cF and not cy then cE,cF,cy,cz,cx=r(hB,cD)assert(cE,'Argument 1 (position string) is malformed.')else assert(hb(cE),'Argument 1 (systemId) must be a number:'..type(cE))assert(hb(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(hb(cy),'Argument 3 (latitude) must be in degrees:'..type(cy))assert(hb(cz),'Argument 4 (longitude) must be in degrees:'..type(cz))assert(hb(cx),'Argument 5 (altitude) must be in meters:'..type(cx))end;cE=tonumber(cE)cF=tonumber(cF)cy=tonumber(cy)cz=tonumber(cz)cx=tonumber(cx)if cF==0 then return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=cF,systemId=cE},MapPosition)end;return setmetatable({latitude=hj*hl(cy,-90,90),longitude=hj*(cz%360),altitude=cx,bodyId=cF,systemId=cE},MapPosition)end;local hC={}hC.__index=hC;hC.__tostring=function(ho,hs)local hD=hs and hs..'  'local hE={}local ht={}for bM in pairs(ho)do table.insert(ht,bM)end;table.sort(ht)for _,hF in ipairs(ht)do bdy=ho[hF]local hG=hr.__tostring(bdy,hD)if hs then table.insert(hE,e('[%s]={\n%s\n%s}',hF,hG,hs))else table.insert(hE,e('  [%s]=%s',hF,hG))end end;if hs then return e('\n%s%s%s',hs,table.concat(hE,',\n'..hs),hs)end;return e('{\n%s\n}',table.concat(hE,',\n'))end;local function hH(hI)local b5={}local pid;for _,bN in pairs(hI)do local cU=bN.planetarySystemId;if type(cU)~='number'then error('Invalid planetary system ID: '..tostring(cU))elseif pid and cU~=pid then error('Mistringmatch planetary system IDs: '..cU..' and '..pid)end;local hJ=bN.bodyId;if type(hJ)~='number'then error('Invalid body ID: '..tostring(hJ))elseif b5[hJ]then error('Duplicate body ID: '..tostring(hJ))end;setmetatable(bN.center,getmetatable(vec3.unit_x))b5[hJ]=setmetatable(bN,hr)pid=cU end;return setmetatable(b5,hC)end;ba={}local function hK(hI)return setmetatable({galaxyAtlas=hI or{}},ba)end;ba.__index=function(hd,i)if type(i)=='number'then local system=hd.galaxyAtlas[i]return hH(system)end;return rawget(ba,i)end;ba.__pairs=function(ho)return function(hd,bM)local hL,nv=next(hd,bM)return hL,nv and hH(nv)end,ho.galaxyAtlas,nil end;ba.__tostring=function(ho)local hM={}for _,hN in pairs(ho or{})do local hO=hN:getPlanetarySystemId()local hP=hC.__tostring(hN,'    ')table.insert(hM,e('  [%s]={%s\n  }',hO,hP))end;return e('{\n%s\n}\n',table.concat(hM,',\n'))end;ba.BodyParameters=hw;ba.MapPosition=hA;ba.PlanetarySystem=hH;function ba.createBodyParameters(hQ,cF,hR,hS,hT,hU,hV)assert(hb(hQ),'Argument 1 (planetarySystemId) must be a number:'..type(hQ))assert(hb(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(hb(hR),'Argument 3 (surfaceArea) must be a number:'..type(hR))assert(hc(hS),'Argument 4 (aPosition) must be an array or vec3:'..type(hS))assert(hc(hT),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(hT))assert(hb(hU),'Argument 6 (altitude) must be in meters:'..type(hU))assert(hb(hV),'Argument 7 (gravityAtPosition) must be number:'..type(hV))local hx=math.sqrt(hR/4/math.pi)local ah=hx+hU;local hW=vec3(hS)+ah*vec3(hT)local hy=hV*ah*ah;return hw(hQ,cF,hx,hW,hy)end;ba.isMapPosition=hh;function ba:getPlanetarySystem(hB)if i==nil then i=0 end;if nv==nil then nv=0 end;local hQ=hB;if hh(hB)then hQ=hB.systemId end;if type(hQ)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=hC then system=hH(system)end;return system end end end;function hC:castIntersections(hX,gp,hY,hZ)local hY=hY or function(g5)return 1.05*g5.radius end;local h_={}if hZ then for _,i in ipairs(hZ)do h_[i]=self[i]end else hZ={}for bM,g5 in pairs(self)do table.insert(hZ,bM)h_[bM]=g5 end end;local function i0(i1,i2)local i3=h_[i1].center-hX;local i4=h_[i2].center-hX;return i3:len()<i4:len()end;table.sort(hZ,i0)local i5=gp:normalize()for i,cU in ipairs(hZ)do local g5=h_[cU]local i6=g5.center-hX;local hx=hY(g5)local i7=i6:dot(i5)local i8=i7^2-(i6:len2()-hx^2)if i8>=0 then local i9=math.sqrt(i8)local g3=i7+i9;local g4=i7-i9;if g4>0 then return g5,g3,g4 elseif g3>0 then return g5,g3,nil end end end;return nil,nil,nil end;function hC:closestBody(ia)assert(type(ia)=='table','Invalid coordinates.')local ib,g5;local ic=vec3(ia)for _,id in pairs(self)do local ie=(id.center-ic):len2()if(not g5 or ie<ib)and id.name~="Space"then g5=id;ib=ie end end;return g5 end;function hC:convertToBodyIdAndWorldCoordinates(hB)local ig=hB;if he(hB)then ig=hA(hB)end;if ig.bodyId==0 then return 0,vec3(ig.latitude,ig.longitude,ig.altitude)end;local id=self:getBodyParameters(ig)if id then return ig.bodyId,id:convertToWorldCoordinates(ig)end end;function hC:getBodyParameters(hB)local cF=hB;if hh(hB)then cF=hB.bodyId end;assert(hb(cF),'Argument 1 (bodyId) must be a number:'..type(cF))return self[cF]end;function hC:getPlanetarySystemId()local _,bN=next(self)return bN and bN.planetarySystemId end;function hr:convertToMapPosition(cu)assert(hc(cu),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cu))local cv=vec3(cu)if self.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cw=cv-self.center;local ah=cw:len()local cx=ah-self.radius;local cy=0;local cz=0;if not cp(ah,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ah)end;return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function hr:convertToWorldCoordinates(hB)local ig=he(hB)and hA(hB)or hB;if ig.bodyId==0 then return vec3(ig.latitude,ig.longitude,ig.altitude)end;assert(hh(ig),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ig.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ig.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cG=math.cos(ig.latitude)return self.center+(self.radius+ig.altitude)*vec3(cG*math.cos(ig.longitude),cG*math.sin(ig.longitude),math.sin(ig.latitude))end;function hr:getAltitude(cu)return(vec3(cu)-self.center):len()-self.radius end;function hr:getDistance(cu)return(vec3(cu)-self.center):len()end;function hr:getGravity(cu)local ih=self.center-vec3(cu)local ii=ih:len2()return self.GM/ii*ih/math.sqrt(ii)end;return setmetatable(ba,{__call=function(_,...)return hK(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function he(hf)return type(hf)=='string'end;local function hc(hd)return type(hd)=='table'end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cx)assert(self.body)local ah=cx+self.body.radius;if not cp(ah,0)then local orbit=math.sqrt(self.body.GM/ah)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(hB,bi)assert(self.body)assert(hc(hB)or he(hB))assert(hc(bi))local cC=(he(hB)or PlanetRef.isMapPosition(hB))and self.body:convertToWorldCoordinates(hB)or vec3(hB)local bN=vec3(bi)local ij=cC-self.body.center;local i4=bN:len2()local ik=ij:len()local il=self.body.GM;local im=((i4-il/ik)*ij-ij:dot(bN)*bN)/il;local cq=il/(2*il/ik-i4)local io=im:len()local i5=im:normalize()local ip=cq*(1-io)local iq=cq*(1+io)local ir=ip*i5+self.body.center;local is=io<=1 and-iq*i5+self.body.center or nil;local it=math.sqrt(cq*il*(1-io*io))local iu=is and 2*math.pi*math.sqrt(cq^3/il)local iv=math.acos(im:dot(ij)/(io*ik))if ij:dot(bN)<0 then iv=-(iv-2*math.pi)end;local iw=math.acos((math.cos(iv)+io)/(1+io*math.cos(iv)))local ix=iw;if ix<0 then ix=ix+2*math.pi end;local iy=ix-io*math.sin(ix)local iz=0;local iA=0;local iB=0;if iu~=nil then iz=iy/(2*math.pi/iu)iA=iu-iz;iB=iA+iu/2;if iv-math.pi>0 then iA=iz;iB=iA+iu/2 end;if iB>iu then iB=iB-iu end end;return{periapsis={position=ir,speed=it/ip,circularOrbitSpeed=math.sqrt(il/ip),altitude=ip-self.body.radius},apoapsis=is and{position=is,speed=it/iq,circularOrbitSpeed=math.sqrt(il/iq),altitude=iq-self.body.radius},currentVelocity=bN,currentPosition=cC,eccentricity=io,period=iu,eccentricAnomaly=iw,meanAnomaly=iy,timeToPeriapsis=iA,timeToApoapsis=iB}end;local function iC(iD)local id=PlanetRef.BodyParameters(iD.planetarySystemId,iD.bodyId,iD.radius,iD.center,iD.GM)return setmetatable({body=id},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iC(...)end})end;function Kinematics()local bc={}local iE=30000000/3600;local iF=iE*iE;local iG=100;local function iH(bN)return 1/math.sqrt(1-bN*bN/iF)end;function bc.computeAccelerationTime(iI,iJ,iK)local iL=iE*math.asin(iI/iE)return(iE*math.asin(iK/iE)-iL)/iJ end;function bc.computeDistanceAndTime(iI,iK,iM,iN,iO,iP)iO=iO or 0;iP=iP or 0;local iQ=iI<=iK;local iR=iN*(iQ and 1 or-1)/iM;local iS=-iP/iM;local iT=iR+iS;if iQ and iT<=0 or not iQ and iT>=0 then return-1,-1 end;local iU,iV=0,0;if iR~=0 and iO>0 then local iL=math.asin(iI/iE)local iW=math.pi*(iR/2+iS)local iX=iR*iO;local iY=iE*math.pi;local bN=function(hd)local dM=(iW*hd-iX*math.sin(math.pi*hd/2/iO)+iY*iL)/iY;local iZ=math.tan(dM)return iE*iZ/math.sqrt(iZ*iZ+1)end;local i_=iQ and function(hf)return hf>=iK end or function(hf)return hf<=iK end;iV=2*iO;if i_(bN(iV))then local j0=0;while math.abs(iV-j0)>0.5 do local hd=(iV+j0)/2;if i_(bN(hd))then iV=hd else j0=hd end end end;local j1=iI;local j2=iV/iG;for j3=1,iG do local c7=bN(j3*j2)iU=iU+(c7+j1)*j2/2;j1=c7 end;if iV<2*iO then return iU,iV end;iI=j1 end;local iL=iE*math.asin(iI/iE)local bI=(iE*math.asin(iK/iE)-iL)/iT;local j4=iF*math.cos(iL/iE)/iT;local ah=j4-iF*math.cos((iT*bI+iL)/iE)/iT;return ah+iU,bI+iV end;function bc.computeTravelTime(iI,iJ,ah)if ah==0 then return 0 end;if iJ>0 then local iL=iE*math.asin(iI/iE)local j4=iF*math.cos(iL/iE)/iJ;return(iE*math.acos(iJ*(j4-ah)/iF)-iL)/iJ end;if iI==0 then return-1 end;assert(iI>0,'Acceleration and initial speed are both zero.')return ah/iI end;function bc.lorentz(bN)return iH(bN)end;return bc end;function safeZone(j5)local hx=500000;local j6,j7,j8=math.huge;local j9=false;local ja=vec3({13771471,7435803,-128971})local jb=18000000;j6=vec3(j5):dist(ja)if j6<jb then return true,math.abs(j6-jb),"Safe Zone",0 end;j7=vec3(j5):dist(vec3(planet.center))if j7<hx then j9=true end;if math.abs(j7-hx)<math.abs(j6-jb)then return j9,math.abs(j7-hx),planet.name,planet.bodyId else return j9,math.abs(j6-jb),"Safe Zone",0 end end;function cmdThrottle(f2,jc)if jc==nil then jc=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not jc then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,f2)E=u(f2*100,0)end;function cmdCruise(f2,jc)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not jc then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,f2)end;function SaveDataBank(jd)if dbHud_1 then if not ac then for bM,bN in pairs(b)do dbHud_1.setStringValue(bN,g(_G[bN]))if jd and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;for bM,bN in pairs(a)do dbHud_1.setStringValue(bN,g(_G[bN]))if jd and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;c("Saved Variables to Datacore")if jd and dbHud_2 then a1="Databank copied.  Remove copy when ready."end end end end;function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})bP()coroutine.yield()bT()coroutine.yield()b_()SetupButtons()coroutine.yield()SetupAtlas()ba=PlanetRef()bb=ba(Atlas())bc=Kinematics()be=Keplers()co()ck()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local cL=j()if door and(cL>0 or cL==0 and as<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(cL>0 or cL==0 and as<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(je)if je=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then E=1;Nav.control.cancelCurrentControlMasterMode()I=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then d3()end;if AutopilotTargetName~=nil then local jf=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if jf and not Autopilot then ah=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ah=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(bj)a7,a8=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(bj)a7,a8=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local eo,cP=cM(ah)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..eo..'", "unit":"'..cP..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')eo,cP=cM(a5)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..eo..'", "unit":"'..cP..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a6)..'", "unit":""}')eo,cP=cM(a7)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..eo..'", "unit":"'..cP..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a8)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')eo,cP=cM(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",eo)..'", "unit":"'..cP..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else d4()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif je=="oneSecond"then ap=false;c3(nil,true)updateDistance()updateRadar()updateWeapons()local d0={}local ez=GetFlightStyle()DrawOdometer(d0,aa,TotalDistanceTravelled,ez,ab)if ShouldCheckDamage then CheckDamage(d0)end;aj=table.concat(d0,"")collectgarbage("collect")elseif je=="fiveSecond"then aq=dbHud_1.getStringValue("SPBAutopilotTargetName")if aq~=nil and aq~=""and aq~="SatNavNotChanged"then local bO=json.decode(dbHud_1.getStringValue("SavedLocations"))if bO~=nil then _G["SavedLocations"]=bO;local cX=-1;local cK;for bM,bN in pairs(SavedLocations)do if bN.name and bN.name=="SatNav Location"then cX=bM;break end end;if cX~=-1 then cK=SavedLocations[cX]cX=-1;for bM,bN in pairs(b5[0])do if bN.name and bN.name=="SatNav Location"then cX=bM;break end end;if cX>-1 then b5[0][cX]=cK end;ck()a1=cK.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==aq then AutopilotTargetIndex=i;c("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif je=="msgTick"then local d0={}DisplayMessage(d0,"empty")a1="empty"unit.stopTimer("msgTick")ag=3 elseif je=="animateTick"then bg=true;bf=false;ae=0;af=0;unit.stopTimer("animateTick")elseif je=="hudTick"then local d0={}HUDPrologue(d0)if showHud then UpdateHud(d0)else DisplayOrbitScreen(d0)DrawWarnings(d0)end;HUDEpilogue(d0)d0[#d0+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if a1~="empty"then DisplayMessage(d0,a1)end;if p()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then c_(d0)end end;if p()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(d0)if screen_1.getMouseState()==1 then CheckButtons()end;d0[#d0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)elseif system.isViewLocked()==0 then if p()==1 and a0 then SetButtonContains()DrawButtons(d0)if not bf and not bg then local jg=table.concat(d0,"")d0={}d0[#d0+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)d0[#d0+1]=b6;d0[#d0+1]=jg;d0[#d0+1]="</body>"bf=true;d0[#d0+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(d0,"")system.setScreen(content)elseif bg then local jg=table.concat(d0,"")d0={}d0[#d0+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)d0[#d0+1]=b6;d0[#d0+1]=jg;d0[#d0+1]="</body>"end;if not bf then d0[#d0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)end else CheckButtons()end else if not a0 and p()==0 then CheckButtons()if ah>DeadZone then if DisplayDeadZone then DrawCursorLine(d0)end end else SetButtonContains()DrawButtons(d0)end;d0[#d0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)end;d0[#d0+1]=[[</svg></body>]]content=table.concat(d0,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif je=="apTick"then ar=j()>0;bI=t()local jh=bI-bo;bo=bI;local de,df,ji,dh=dd()local jj=vec3(core.getConstructWorldPos())local eA=getRoll(dh,de,df)local eB=eA/180*math.pi;local eC=math.cos(eB)local eD=math.sin(eB)local dj=getPitch(dh,de,df)local jk=getPitch(dh,de,df*eC+ji*eD)local jl=-math.deg(dH(ji,bi,de))local jm=math.deg(dH(df,bi,de))bn=ar and jl<-YawStallAngle or jl>YawStallAngle or jm<-PitchStallAngle or jm>PitchStallAngle;bl=system.getMouseDeltaX()bm=system.getMouseDeltaY()if InvertMouse and not a0 then bm=-bm end;U=0;Y=0;T=0;bi=vec3(core.getWorldVelocity())bj=vec3(bi):len()sys=bb[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=be(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bi)ao=hoverDetectGround()local c4=planet:getGravity(core.getConstructWorldPos()):len()*o()bp=0;bd=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]B,C,D,_=safeZone(jj)if p()==1 and screen_1 and screen_1.getMouseY()~=-1 then ae=screen_1.getMouseX()*ResolutionX;af=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if p()==1 and a0 then if not bf then ae=ae+bl;af=af+bm end else ae=0;af=0 end else ae=ae+bl;af=af+bm;ah=math.sqrt(ae*ae+af*af)if not a0 and p()==0 then if userControlScheme=="virtual joystick"then if ae>0 and ae>DeadZone then U=U-(ae-DeadZone)*MouseXSensitivity elseif ae<0 and ae<DeadZone*-1 then U=U-(ae+DeadZone)*MouseXSensitivity else U=0 end;if af>0 and af>DeadZone then T=T-(af-DeadZone)*MouseYSensitivity elseif af<0 and af<DeadZone*-1 then T=T-(af+DeadZone)*MouseYSensitivity else T=0 end elseif userControlScheme=="mouse"then ae=0;af=0;T=(-utils.smoothstep(bm,-100,100)+0.5)*2*P;U=(-utils.smoothstep(bl,-100,100)+0.5)*2*Q else ae=0;af=0 end end end;local jn=bj>8334;if bj>SpaceSpeedLimit/3.6 and not ar and not Autopilot and not jn then a1="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0 end;if not jn and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then dq()end end;LastIsWarping=jn;if ar and j()>0.09 then if bj>bs/3.6 and not AtmoSpeedAssist and not aw then BrakeIsOn=true;aw=true elseif not AtmoSpeedAssist and aw then if bj<bs/3.6 then BrakeIsOn=false;aw=false end end end;if BrakeIsOn then X=1 else X=0 end;as=core.getAltitude()if as==0 then as=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if al then BrakeIsOn=false;local jo=false;if CustomTarget~=nil then jo=AlignToWorldVector(CustomTarget.position-jj,0.01)else jo=AlignToWorldVector(vec3(bi),0.01)end;bh=true;if jo and(math.abs(eA)<2 or math.abs(jk)>85)and bj>=bs/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;O=true;al=false;an=true;Autopilot=false;BeginReentry()elseif ar and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bs))E=0 end elseif bj>N then AlignToWorldVector(vec3(bi),0.01)end end;if RetrogradeIsOn then if ar then RetrogradeIsOn=false elseif bj>N then AlignToWorldVector(-vec3(bi))end end;if not ProgradeIsOn and al then if j()==0 then O=true;BeginReentry()al=false;an=true else al=false;dq()end end;local dp=vec3(core.getWorldVertical())*-1;local f4=bi.x*dp.x+bi.y*dp.y+bi.z*dp.z;if an and CustomTarget~=nil and(as<HoldAltitude+200 and as>HoldAltitude-200)and bj*3.6>bs-100 and math.abs(f4)<20 and j()>=0.1 and(CustomTarget.position-jj):len()>2000+as then dq()an=false end;if VertTakeOff then bh=true;if f4<-30 then a1="Unable to achieve lift. Safety Landing."ad=0;bh=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if as<antigrav.getBaseAltitude()-100 then bt=0;ad=15;BrakeIsOn=false elseif f4>0 then BrakeIsOn=true;ad=0 elseif f4<-30 then BrakeIsOn=true;ad=15 elseif as>=antigrav.getBaseAltitude()then BrakeIsOn=true;ad=0;VertTakeOff=false;a1="Takeoff complete. Singularity engaged"end else if j()>0.08 then bt=0;BrakeIsOn=false;ad=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bF then bt=0;ad=20 else ad=0;bt=36;cmdCruise(3500)end else bh=autoRollPreference;IntoOrbit=true;bD=false;CancelIntoOrbit=false;bx=false;bv=nil;bw=nil;if bC==nil then bC=planet end;VertTakeOff=false end end;if bt~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jp=utils.clamp(bt-jk,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jp)local jq=utils.clamp(vTpitchPID:get(),-1,1)T=jq end end;if IntoOrbit then if bC==nil then if VectorToTarget then bC=a9 else bC=planet end end;if not bA then if bC.hasAtmosphere then bB=math.floor(bC.radius*(TargetOrbitRadius-1)+bC.noAtmosphericDensityAltitude)else bB=math.floor(bC.radius*(TargetOrbitRadius-1)+bC.surfaceMaxAltitude)end;bA=true end;if AltitudeHold or VectorToTarget then if not am then bB=u(HoldAltitude,1)bx=true;AltitudeHold=false end;if VectorToTarget then bz.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jr,js=cM(bB,2)local jt=jr..js;local ju,jv=be(bC):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bC.center):len()-bC.radius)local jw=eA;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bB*0.9 and as<bB*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bB*0.99 and orbit.apoapsis.altitude>=bB*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bD then if bD then BrakeIsOn=false;E=0;cmdThrottle(0)bD=true;bv=0;if bz.VectorToTarget then local el=CustomTarget.position-jj;local a5,_=bc.computeDistanceAndTime(bj,bs/3.6,o(),0,0,LastMaxBrake)if bi:normalize():dot(el:normalize())>0.5 and el:len()>15000+a5+as then bu="Orbiting to Target"else a1="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;O=true;an=true;BeginReentry()bz.VectorToTarget=false end end;if not bz.VectorToTarget then bu=nil;by=false;bA=false;bC=nil;bh=autoRollPreference;if not an then a1="Orbit established"end;bz.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bx=false;bv=nil;bw=nil;bC=nil;bD=false;bH=0 end else bH=bH+1;if bH>=2 then bD=true end end else bu="Adjusting Orbit - OrbitHeight: "..jt;by=true;cmdCruise(jv*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jx=f4;local jy=as-bB;local jz=math.abs(jy)if f4<10 and math.abs(jk)<10 and jz<100 then jx=f4*2 end;if jx<10 and math.abs(jk)<10 and jz<100 then jx=jx*2 end;if jx<5 and math.abs(jk)<5 and jz<100 then jx=jx*4 end;VSpdPID:inject(jx)bv=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jy)bv=utils.clamp(bv-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jA=2.75;local jB=math.abs(s(ju*jA))local jC=jB%50;if jC>0 then jB=jB-jC+50 end;BrakeIsOn=false;if not bx then local jD=false;local jE=false;if as<bB then bu="Aligning to orbital path - OrbitHeight: "..jt else bu="Aligning to orbital point - OrbitHeight: "..jt end;bv=0;bw=0;if jk<=bv+1 and jk>=bv-1 then jD=true else jD=false end;if jw<=bw+1 and jw>=bw-1 then jE=true else jE=false end;if jD and jE then bv=nil;bw=nil;bx=true end else if as<bB*0.8 then bu="Escaping planet gravity - OrbitHeight: "..jt;bv=utils.map(f4,200,0,-15,80)elseif as>=bB*0.8 and as<bB*1.15 then bu="Approaching orbital corridor - OrbitHeight: "..jt;jB=jB*0.75;bv=utils.map(f4,100,-100,-15,65)elseif as>=bB*1.15 and as<bB*1.5 then bu="Approaching orbital corridor - OrbitHeight: "..jt;jB=jB*0.75;if f4<0 or by then bv=utils.map(as,bB*1.5,bB*1.01,-30,0)else bv=utils.map(as,bB*0.99,bB*1.5,0,30)end elseif as>bB*1.5 then bu="Reentering orbital corridor - OrbitHeight: "..jt;bv=utils.map(f4,100,-100,-65,0)jB=jB*0.75 end end;cmdCruise(math.floor(jB))end;if bv~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jF=bv-jk;OrbitPitchPID:inject(jF)local jG=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)T=jG end;if bw~=nil then if jk<85 then local jH=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jH*0.01,0,jH*0.1)end;local jI=bw-jw;OrbitRollPID:inject(jI)local jJ=utils.clamp(OrbitRollPID:get(),-0.5,0.5)Y=jJ end end elseif CancelIntoOrbit then bA=false;bC=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not al then local jK,jL=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jM=(CustomTarget.position-a9.center):normalize()local jN=jM:project_on_plane((a9.center-jj):normalize()):normalize()local jO=a9.center+jN*(a9.radius+AutopilotTargetOrbit)local jP=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))if(jj-jO):len()<(jj-jP):len()then jK=jO;AutopilotTargetCoords=jK else jK=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))AutopilotTargetCoords=jK end;local dr=cs(a9,AutopilotTargetCoords)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)jL=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jL=true;TargetSet=true;AutopilotRealigned=true;jK=CustomTarget.position+(jj-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jM=(jj+bi*100000-a9.center):normalize()local jN=jM:project_on_plane((a9.center-jj):normalize()):normalize()if jN:len()<1 then jM=(jj+vec3(core.getConstructWorldOrientationForward())*100000-a9.center):normalize()jN=jM:project_on_plane((a9.center-jj):normalize()):normalize()end;jK=a9.center+jN*(a9.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jK;TargetSet=true;jL=true;AutopilotRealigned=true;local dr=cs(a9,AutopilotTargetCoords)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)end end;AutopilotDistance=(vec3(jK)-vec3(core.getConstructWorldPos())):len()local g2,g3,g4=bb:getPlanetarySystem(0):castIntersections(jj,bi:normalize(),function(g5)if g5.noAtmosphericDensityAltitude>0 then return g5.radius+g5.noAtmosphericDensityAltitude else return g5.radius+g5.surfaceMaxAltitude*1.5 end end)local g6=g3;if g4~=nil and g3~=nil then g6=math.min(g4,g3)end;if g6~=nil and g6<AutopilotDistance and g2.name==a9.name then AutopilotDistance=g6 end;local jo=true;local jQ=(a9.center-(vec3(core.getConstructWorldPos())+vec3(bi):normalize()*AutopilotDistance)):len()-a9.radius;local eo,cP=cM(jQ)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..eo..'", "unit":"'..cP..'"}')local a5,a6;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(bj)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(bj)end;if bj>300 and AutopilotAccelerating then local el=vec3(jK)-vec3(core.getConstructWorldPos())local jR=utils.clamp(math.deg(dH(ji,bi:normalize(),el:normalize()))*bj/500,-90,90)local jS=utils.clamp(math.deg(dH(df,bi:normalize(),el:normalize()))*bj/500,-90,90)if math.abs(jR)<20 and math.abs(jS)<20 then jR=jR*2;jS=jS*2 end;if math.abs(jR)<2 and math.abs(jS)<2 then jR=jR*2;jS=jS*2 end;local jl=-math.deg(dH(ji,de,bi:normalize()))local jm=-math.deg(dH(df,de,bi:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jS-jm)local jT=utils.clamp(apPitchPID:get(),-1,1)T=T+jT;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jR-jl)local jU=utils.clamp(apYawPID:get(),-1,1)U=U+jU;jL=true;if math.abs(jR)>2 or math.abs(jS)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jQ<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=be(a9):escapeAndOrbitalSpeed(jQ)end end;if not AutopilotCruising and not AutopilotBraking and not jL then jo=AlignToWorldVector((jK-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then jo=AlignToWorldVector(-vec3(bi):normalize())end;if AutopilotAccelerating then if not L then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)E=u(AutopilotInterplanetaryThrottle,2)L=true end;local gr=unit.getThrottle()if AtmoSpeedAssist then gr=E end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or gr==0 and L then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)E=0 end;if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)E=0;L=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;X=1 end;if TurnBurn then cmdThrottle(100,true)E=1 end;local _,jv=be(a9):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local el;if CustomTarget~=nil then el=CustomTarget.position-jj end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bj<50 then a1="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bj<=jv and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;local dr=cs(a9,AutopilotTargetCoords)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jv=be(a9):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bj<=jv then if CustomTarget~=nil then if bi:normalize():dot(el:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local dr=cs(a9,CustomTarget.position)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)WaypointSet=true end else a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;BrakeIsOn=false;local dr=cs(a9,CustomTarget.position)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a1="Autopilot completed, orbit established"X=0;E=0;L=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;al=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local gr=unit.getThrottle()if AtmoSpeedAssist then gr=E end;if gr>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jo then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(a9.center)+(AutopilotTargetOrbit+a9.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif jo then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not L then cmdThrottle(AutopilotInterplanetaryThrottle,true)E=u(AutopilotInterplanetaryThrottle,2)L=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X=0;cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;local dr=cs(a9,CustomTarget.position)dr="::pos{"..dr.systemId..","..dr.bodyId..","..dr.latitude..","..dr.longitude..","..dr.altitude.."}"system.setWaypoint(dr)end;if Z then bh=true;local jS=0;local cC=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local jV=cC-vec3(core.getConstructWorldPos())local jW=vec3(jV):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jX=vec3(jV):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ah=math.sqrt(jW*jW+jX*jX)AlignToWorldVector(jV:normalize())local jY=40;local jZ=ah<jY;local j_=100;local gW=utils.clamp((ah-jY)/2,10,j_)T=0;local jo=math.abs(U)<0.1;if jo and bj<gW and not jZ then BrakeIsOn=false;jS=-20 else BrakeIsOn=true;jS=0 end;local k0=0;if math.abs(jS-dj)>k0 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jS-dj)local jT=pitchPID:get()T=jT end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local ds=unit.getClosestPlanetInfluence()>0;local k1=HoldAltitude-as;local k2=500+bj;local k3=1;if AutoTakeoff then k3=utils.clamp(bj/100,0.1,1)end;local jS=(utils.smoothstep(k1,-k2,k2)-0.5)*2*MaxPitch*k3;if not Reentry and not al and not VectorToTarget and de:dot(bi:normalize())<0.99 then jS=(utils.smoothstep(k1,-k2*utils.clamp(20-19*j()*10,1,20),k2*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*k3 end;if not AltitudeHold then jS=0 end;if LockPitch~=nil then if ds and not IntoOrbit then jS=LockPitch else LockPitch=nil end end;bh=true;local k4=T;if Reentry then local ReentrySpeed=math.floor(bs)local k5,k6=bc.computeDistanceAndTime(bj,ReentrySpeed/3.6,o(),0,0,LastMaxBrake-planet.gravity*9.8*o())local k7=as-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and as>planet.noAtmosphericDensityAltitude+5000 and bj<=ReentrySpeed/3.6 and bj>ReentrySpeed/3.6-10 and math.abs(bi:normalize():dot(de))>0.9 then Nav.control.cancelCurrentControlMasterMode()E=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(k5>-1 and k7<=k5 or as<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not O then jS=-80;if j()>0.02 then a1="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jS=0;bh=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and as>planet.noAtmosphericDensityAltitude+5000 then bh=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bs then O=false;Reentry=false;bh=true end end end;if bj>N and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bi))end;if(VectorToTarget or am)and AutopilotTargetIndex>0 and j()>0.01 then local el;if CustomTarget~=nil then el=CustomTarget.position-vec3(core.getConstructWorldPos())else el=a9.center-jj end;local jR=math.deg(dH(dh:normalize(),bi,el))*2;local k8=math.rad(math.abs(eA))if bj>minRollVelocity and j()>0.01 then local k9=utils.clamp(90-jS*2,-90,90)bp=utils.clamp(jR*2,-k9,k9)local ka=jR;jR=utils.clamp(utils.clamp(jR,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(k8)+4*(jk-jS)*math.sin(math.rad(eA)),-YawStallAngle*0.85,YawStallAngle*0.85)jS=utils.clamp(utils.clamp(jS*math.cos(k8),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(ka)*math.sin(k8),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bp=0;jR=utils.clamp(jR,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kb=jl-jR;if not bn and bj>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kb)local jU=utils.clamp(yawPID:get(),-1,1)U=U+jU elseif ar and ao>-1 or bj<minRollVelocity then AlignToWorldVector(el)elseif bn and j()>0.01 then if(jl<-YawStallAngle or jl>YawStallAngle)and j()>0.01 then AlignToWorldVector(bi)end;if(jm<-PitchStallAngle or jm>PitchStallAngle)and j()>0.01 then jS=utils.clamp(jk-jm,jk-PitchStallAngle*0.85,jk+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not am then local kc=planet:getAltitude(CustomTarget.position)local k7=math.sqrt(el:len()^2-(as-kc)^2)local kd=LastMaxBrakeInAtmo;if kd then kd=kd*utils.clamp(bj/100,0.1,1)*j()else kd=LastMaxBrake end;if j()<0.01 then kd=LastMaxBrake end;local ke=bi:len()-math.abs(f4)local kf=vec3(core.getWorldAirFrictionAcceleration())local kg=math.sqrt(kf:len()-kf:project_on(dp):len())*o()if bj>100 then a5,a6=bc.computeDistanceAndTime(bj,100,o(),0,0,kd+kg)local kh,ki=bc.computeDistanceAndTime(100,0,o(),0,0,kd/2)a5=a5+kh else a5,a6=bc.computeDistanceAndTime(bj,0,o(),0,0,kd/2)end;StrongBrakes=true;if not am and not Reentry and k7<=a5+bj*jh/2 and(bi:project_on_plane(dh):normalize():dot(el:project_on_plane(dh):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)E=0;if AltitudeHold then d9()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ke<0.1 or k7<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<k7)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=k7 end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and a9.name==planet.name then local el=CustomTarget.position-vec3(core.getConstructWorldPos())local kc=planet:getAltitude(CustomTarget.position)local k7=math.sqrt(el:len()^2-(as-kc)^2)local kd=LastMaxBrakeInAtmo;if not bD then bA=false;IntoOrbit=true else kd=LastMaxBrake;a5,a6=bc.computeDistanceAndTime(bj,0,o(),0,0,kd/2)StrongBrakes=true;if k7<=a5+bj*jh/2 and bi:project_on_plane(dh):normalize():dot(el:project_on_plane(dh):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;O=true;al=false;an=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=k7 end end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or VectorToTarget or IntoOrbit or Reentry)then if not bD then IntoOrbit=true end end;if bn and j()>0.01 and ao==-1 and bj>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bi)jS=utils.clamp(jk-jm,jk-PitchStallAngle*0.85,jk+PitchStallAngle*0.85)end;T=k4;local gA=-1;if BrakeLanding then jS=0;local kj=false;local kk=30;if bd~=nil and bd>0 then local kg=0;local eG=utils.clamp(j(),0.4,2)local kd=LastMaxBrakeInAtmo*utils.clamp(bj/100,0.1,1)*eG;local kl=bd*eG+kd+kg-c4;local km=kd/2+kg-c4;local kn=bj-math.sqrt(math.abs(km/2)*20/(0.5*o()))*utils.sign(km)if kn<0 then kn=0 end;local ko;if bj>100 then local kp,_=bc.computeDistanceAndTime(bj,100,o(),0,0,kd)local kq,_=bc.computeDistanceAndTime(100,0,o(),0,0,math.sqrt(kd))ko=kp+kq else ko=bc.computeDistanceAndTime(bj,0,o(),0,0,math.sqrt(kd))end;if ko<20 then BrakeIsOn=false else local kr=0;if kn>100 then local ks,_=bc.computeDistanceAndTime(kn,100,o(),0,0,kl)local kt,_=bc.computeDistanceAndTime(100,0,o(),0,0,bd*eG+math.sqrt(kd)+kg-c4)kr=ks+kt else kr,_=bc.computeDistanceAndTime(kn,0,o(),0,0,bd*eG+math.sqrt(kd)+kg-c4)end;kr=(kr+15+bj*jh)*1.1;local ku=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if ku then local kc=planet:getAltitude(CustomTarget.position)local kv=as-kc-100;local el=CustomTarget.position-vec3(core.getConstructWorldPos())local kw=math.sqrt(el:len()^2-(as-kc)^2)if kw>100 then ku=false elseif kv<=kr or kr==-1 then BrakeIsOn=true;kj=true else BrakeIsOn=false;kj=true end end;if not ku and CalculateBrakeLandingSpeed then if kr>=kk then BrakeIsOn=true else BrakeIsOn=false end;kj=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)gA=ao;if gA>-1 then bh=autoRollPreference;if bj<1 or bi:normalize():dot(dh)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)ad=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bi:normalize():dot(-dp)<0.999 then BrakeIsOn=true elseif f4<-brakeLandingRate and not kj then BrakeIsOn=true elseif not kj then BrakeIsOn=false end end;if AutoTakeoff or am then local g2,g4,g3;if AutopilotTargetCoords~=nil then g2,g4,g3=bb:getPlanetarySystem(0):castIntersections(jj,(AutopilotTargetCoords-jj):normalize(),function(g5)return g5.radius+g5.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if as>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)E=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jS)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif am and bj<N then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)E=0 elseif am then cmdThrottle(0)E=0;BrakeIsOn=true end elseif am and j()==0 and a9~=nil and(g2==nil or g2.name==a9.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kx=hoverDetectGround()>-1;local ky=dj;if(VectorToTarget or am)and not kx and bj>minRollVelocity and j()>0.01 then local k8=math.rad(math.abs(eA))ky=dj*math.abs(math.cos(k8))+jm*math.sin(k8)end;local kz=utils.clamp(jS-ky,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then kz=utils.clamp(jS-ky,-85,MaxPitch)elseif j()<0.01 then kz=utils.clamp(jS-ky,-MaxPitch,MaxPitch)end;if math.abs(eA)<5 or VectorToTarget or BrakeLanding or kx or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kz)local jT=pitchPID:get()T=T+jT end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and I then E=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)I=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not I then E=0;I=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local kA=utils.clamp(S+T+system.getControlDeviceForwardInput(),-1,1)local kB=utils.clamp(V+Y+system.getControlDeviceYawInput(),-1,1)local kC=utils.clamp(W+U-system.getControlDeviceLeftRightInput(),-1,1)local kD=X;local kE=vec3(core.getWorldVertical())if kE==nil or kE:len()==0 then kE=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local kF=vec3(core.getConstructWorldOrientationUp())local kG=vec3(core.getConstructWorldOrientationForward())local kH=vec3(core.getConstructWorldOrientationRight())local kI=vec3(core.getWorldVelocity())local kJ=vec3(core.getWorldVelocity()):normalize()local kK=getRoll(kE,kG,kH)local kL=math.abs(kK)local kM=utils.sign(kK)local j=j()local kN=vec3(core.getWorldAngularVelocity())local kO=kA*pitchSpeedFactor*kH+kB*rollSpeedFactor*kG+kC*yawSpeedFactor*kF;if kE:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or al or AltitudeHold)then local eA=getRoll(kE,kG,kH)local eB=eA/180*math.pi;local eC=math.cos(eB)local eD=math.sin(eB)local jk=getPitch(kE,kG,kH*eC+kF*eD)if bh==true and math.abs(bp-kK)>autoRollRollThreshold and kB==0 and math.abs(jk)<85 then local kP=bp;local jH=autoRollFactor;if j==0 then jH=jH/4;bp=0;kP=0 end;if rollPID==nil then rollPID=pid.new(jH*0.01,0,jH*0.1)end;rollPID:inject(kP-kK)local kQ=rollPID:get()kO=kO+kQ*kG end end;if kE:len()>0.01 and j>0.0 then local kR=20.0;if turnAssist==true and kL>kR and kA==0 and kC==0 then local kS=turnAssistFactor*0.1;local kT=turnAssistFactor*0.025;local kU=(kL-kR)/(180-kR)*180;local kV=0;if kU<90 then kV=kU/90 elseif kU<180 then kV=(180-kU)/90 end;kV=kV*kV;local kW=-kM*kT*(1.0-kV)local kX=kS*kV;kO=kO+kX*kH+kW*kF end end;local kY=1;local kZ=0;local k_=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bs=utils.clamp(bs+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;M=false else E=u(utils.clamp(E+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bs=utils.clamp(bs-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;M=false else E=u(utils.clamp(E-speedChangeLarge/100,-1,1),2)end end;F=0;local f4=-kE:dot(kI)if ar and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bs/3.6-kI:dot(kG))local l0=throttlePID:get()H=utils.clamp(l0,-1,1)if H<E and j>0.005 then G=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(H,0.01,1))else G=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kI:len()-bs/3.6)local l1=utils.clamp(brakePID:get(),0,1)if j>0 and f4<-80 or j>0.005 then F=l1 end;if F>0 then if G and H==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else H=utils.clamp(H,0.01,1)end;local l2=''local l3=vec3()local l4=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,ad*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",l4,kZ)local l5='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l5=l5 ..ExtraLongitudeTags end;local l6=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local l7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l5,axisCommandId.longitudinal)local l8=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)l2=l2 ..' , '.."lateral airfoil , lateral ground "l3=l3+l8;if l3:len()>constants.epsilon then Nav:setEngineForceCommand(l2,l3,kZ,'','','',k_)end;Nav:setEngineForceCommand(l5,l7,kY)local l9='thrust analog vertical fueled 'local la='thrust analog lateral fueled 'if ExtraLateralTags~="none"then la=la..ExtraLateralTags end;if ExtraVerticalTags~="none"then l9=l9 ..ExtraVerticalTags end;if ad~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l9,l4,kY)else Nav:setEngineForceCommand(l9,vec3(),kY)end;if LeftAmount~=0 then Nav:setEngineForceCommand(la,l8,kY)else Nav:setEngineForceCommand(la,vec3(),kY)end;if kD==0 then kD=F end;local lb=-kD*(brakeSpeedFactor*kI+brakeFlatFactor*kJ)Nav:setEngineForceCommand('brake',lb)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)end;local gW=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kI:len()-gW/3.6)local l1=utils.clamp(brakePID:get(),0,1)kD=utils.clamp(kD+l1,0,1)end;local lb=-kD*(brakeSpeedFactor*kI+brakeFlatFactor*kJ)Nav:setEngineForceCommand('brake',lb)local l2=''local l3=vec3()local lc=false;local l5='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l5=l5 ..ExtraLongitudeTags end;local l6=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if l6==axisCommandType.byThrottle then local l7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l5,axisCommandId.longitudinal)Nav:setEngineForceCommand(l5,l7,kY)elseif l6==axisCommandType.byTargetSpeed then local l7=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)l2=l2 ..' , '..l5;l3=l3+l7;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lc=true end end;local la='thrust analog lateral 'if ExtraLateralTags~="none"then la=la..ExtraLateralTags end;local ld=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ld==axisCommandType.byThrottle then local le=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(la,axisCommandId.lateral)Nav:setEngineForceCommand(la,le,kY)elseif ld==axisCommandType.byTargetSpeed then local l8=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)l2=l2 ..' , '..la;l3=l3+l8 end;local l9='thrust analog vertical 'if ExtraVerticalTags~="none"then l9=l9 ..ExtraVerticalTags end;local lf=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lf==axisCommandType.byThrottle then local l4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l9,axisCommandId.vertical)if ad~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l9,l4,kY,'airfoil','ground','',k_)else Nav:setEngineForceCommand(l9,vec3(),kY)Nav:setEngineForceCommand('airfoil vertical',l4,kY,'airfoil','','',k_)Nav:setEngineForceCommand('ground vertical',l4,kY,'ground','','',k_)end elseif lf==axisCommandType.byTargetSpeed then if ad<0 then Nav:setEngineForceCommand('hover',vec3(),kY)end;local lg=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)l2=l2 ..' , '..l9;l3=l3+lg end;if l3:len()>constants.epsilon then if X~=0 or lc or math.abs(kJ:dot(kG))<0.8 then l2=l2 ..', brake'end;Nav:setEngineForceCommand(l2,l3,kZ,'','','',k_)end end;local lh=torqueFactor*(kO-kN)local li=vec3(core.getWorldAirFrictionAngularAcceleration())lh=lh-li;Nav:setEngineTorqueCommand('torque',lh,kY,'airfoil','','',k_)Nav:setBoosterCommand('rocket_engine')if a4 and not VanillaRockets then local c7=vec3(core.getVelocity()):len()local lj=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lk=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c7*3.6>lk*(1-lj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7*3.6<lk*(1-lj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local gr=unit.getThrottle()if AtmoSpeedAssist then gr=E*100 end;local gW=gr/100;if j==0 then gW=gW*MaxGameVelocity;if c7>=gW*(1-lj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7<gW*(1-lj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gW=gW*ReentrySpeed/3.6;if c7>=gW*(1-lj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7<gW*(1-lj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bO=coroutine.resume(beginSetup)if bO then SetupComplete=true end else Nav:update()if not bf and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(ll)if ll=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0;if(vBooster or hover)and ao==-1 and(j()>0 or as<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bh=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if R and not BrakeLanding then Nav.control.extendLandingGears()end else if R then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif ll=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif ll=="forward"then S=S-1 elseif ll=="backward"then S=S+1 elseif ll=="left"then V=V-1 elseif ll=="right"then V=V+1 elseif ll=="yawright"then W=W-1 elseif ll=="yawleft"then W=W+1 elseif ll=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif ll=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif ll=="up"then ad=ad+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif ll=="down"then ad=ad-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif ll=="groundaltitudeup"then OldButtonMod=a2;OldAntiMod=a3;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a3;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a3 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+a2 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif ll=="groundaltitudedown"then OldButtonMod=a2;OldAntiMod=a3;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-a2 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif ll=="option1"then dn()M=false elseif ll=="option2"then dn(1)M=false elseif ll=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;M=false;d2()elseif ll=="option4"then dq()M=false elseif ll=="option5"then di()M=false elseif ll=="option6"then d9()M=false elseif ll=="option7"then wipeSaveVariables()M=false elseif ll=="option8"then dk()M=false elseif ll=="option9"then if gyro~=nil then gyro.toggle()av=gyro.getState()==1 end;M=false elseif ll=="lshift"then if system.isViewLocked()==1 then a0=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif p()==1 and ShiftShowsRemoteButtons then a0=true;bg=false;bf=false end elseif ll=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif ll=="lalt"then AltIsOn=true;if p()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif ll=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a4 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a4=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a4=false end elseif ll=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()E=0 elseif ll=="speedup"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else dn()end elseif ll=="speeddown"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else dn(1)end elseif ll=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(ll)if ll=="forward"then S=0 elseif ll=="backward"then S=0 elseif ll=="left"then V=0 elseif ll=="right"then V=0 elseif ll=="yawright"then W=0 elseif ll=="yawleft"then W=0 elseif ll=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif ll=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif ll=="up"then ad=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif ll=="down"then ad=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif ll=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a3=OldAntiMod end;if AltitudeHold then a2=OldButtonMod end;M=false elseif ll=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a3=OldAntiMod end;if AltitudeHold then a2=OldButtonMod end;M=false elseif ll=="lshift"then if system.isViewLocked()==1 then a0=false;ae=0;af=0;system.lockView(PrevViewLock)elseif p()==1 and ShiftShowsRemoteButtons then a0=false;bg=false;bf=false end elseif ll=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif ll=="lalt"then if p()==0 and freeLookToggle then if M then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else M=true end elseif p()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(ll)if ll=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a3;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a3 end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+a2;a2=a2*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif ll=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-a2;a2=a2*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif ll=="speedup"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif ll=="speeddown"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(ep)local i;local lm="/commands /setname /G /agg /addlocation /copydatabank"local ln,lo=nil,nil;local lp="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(ep," ")ln=ep;if i~=nil then ln=string.sub(ep,0,i-1)lo=string.sub(ep,i+1)elseif not string.find(lm,ln)then for gS in string.gmatch(lp,"([^\n]+)")do c(gS)end;return end;if ln=="/setname"then if lo==nil or lo==""then a1="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cV(lo)else a1="Select a saved target to rename first"end elseif ln=="/addlocation"then if lo==nil or lo==""or string.find(lo,"::")==nil then a1="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(lo,"::")local cJ=string.sub(lo,1,i-2)local cC=string.sub(lo,i)local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local cE,cF,cy,cz,cx=r(cC,cD)local planet=b5[tonumber(cE)][tonumber(cF)]cI(cJ,planet,cC)a1="Added "..cJ.." to saved locations,\nplanet "..planet.name.." at "..cC;ag=5 elseif ln=="/agg"then if lo==nil or lo==""then a1="Usage: /agg targetheight"return end;lo=tonumber(lo)if lo<1000 then lo=1000 end;AntigravTargetAltitude=lo;a1="AGG Target Height set to "..lo elseif ln=="/G"then if lo==nil or lo==""then a1="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if lo=="dump"then for bM,bN in pairs(a)do if type(_G[bN])=="boolean"then if _G[bN]==true then c(bN.." true")else c(bN.." false")end elseif _G[bN]==nil then c(bN.." nil")else c(bN.." ".._G[bN])end end;return end;i=string.find(lo," ")local lq=string.sub(lo,0,i-1)local lr=string.sub(lo,i+1)for bM,bN in pairs(a)do if bN==lq then a1="Variable "..lq.." changed to "..lr;local ls=type(_G[bN])if ls=="number"then lr=tonumber(lr)elseif ls=="boolean"then if string.lower(lr)=="true"then lr=true else lr=false end end;_G[bN]=lr;return end end;a1="No such global variable: "..lq elseif ln=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else a1="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
