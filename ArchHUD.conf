name: ArchHud - Archaegeo v1.008 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.008;freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementHitPointsById;local k=core.getElementMassById;local l=core.getElementNameById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local function s(t,u)local v=10^(u or 0)return c(t*v+0.5)/v end;local w=SafeR;local x=SafeB;local y=SafeG;local z=false;local A=0;local B=0;local C=0;local D=false;local E=0;local F=false;local G=s(ResolutionX/2,0)local H=s(ResolutionY/2,0)local I=false;local J=55;local K=false;local L=1;local M=1;local N=false;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=false;local W=false;local X="empty"local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=nil;local a6=0;local a7=0;local a8=false;local a9=0;local aa=0;local ab=0;local ac=3;local ad=0;local ae=""local af=""local ag=0;local ah=false;local ai=false;local aj=false;local ak=-1;local al=false;local am=""local an=h()>0;local ao=h()local ap=core.getAltitude()local aq=core.getElementIdList()local ar=r()local as=nil;local at=false;local au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]local av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=c(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=r()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=r()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=vec3(core.getConstructWorldPos())function processVariableList(bL)local bM=dbHud_1.hasKey;for bN,bO in pairs(bL)do if bM(bO)then local bP=e(dbHud_1.getStringValue(bO))if bP~=nil then _G[bO]=bP;aK=true end end end end;function LoadVariables()if dbHud_1 then local bM=dbHud_1.hasKey;processVariableList(a)coroutine.yield()processVariableList(b)if aK then X="Loaded Saved Variables (see Lua Chat Tab for list)"G=s(ResolutionX/2,0)H=s(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bn=AtmoSpeedLimit;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]else X="No Saved Variables Found - Stand up / leave remote to save settings"end else X="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then X="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ac=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;function CalculateFuelVolume(bQ,bR)if bQ>bR then bR=bQ end;if ContainerOptimization>0 then bR=bR-bR*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bR=bR-bR*FuelTankOptimization*0.05 end;return bR end;function ProcessElements()local bS=fuelX~=0 and fuelY~=0;for bN in pairs(aq)do local type=core.getElementTypeById(aq[bN])if p(type,'^.*Space Engine$')then bB=true;if p(tostring(core.getElementTagsById(aq[bN])),'^.*vertical.*$')then local bT=core.getElementRotationById(aq[bN])if bT[4]<0 then if q(-bT[4],0.1)==0.5 then bz=true end else if q(bT[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then N=true end;if type=="Dynamic Core Unit"then local bU=g(aq[bN])if bU>10000 then b0=128 elseif bU>1000 then b0=64 elseif bU>150 then b0=32 end end;aR=aR+g(aq[bN])if bS and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bU=g(aq[bN])local bV=k(aq[bN])local bQ=0;local bW=r()if type=="Atmospheric Fuel Tank"then local bR=400;local bX=35.03;if bU>10000 then bR=51200;bX=5480 elseif bU>1300 then bR=6400;bX=988.67 elseif bU>150 then bR=1600;bX=182.67 end;bQ=bV-bX;if fuelTankHandlingAtmo>0 then bR=bR+bR*fuelTankHandlingAtmo*0.2 end;bR=CalculateFuelVolume(bQ,bR)aO[#aO+1]={aq[bN],l(aq[bN]),bR,bX,bQ,bW}end;if type=="Rocket Fuel Tank"then local bR=320;local bX=173.42;if bU>65000 then bR=40000;bX=25740 elseif bU>6000 then bR=5120;bX=4720 elseif bU>700 then bR=640;bX=886.72 end;bQ=bV-bX;if fuelTankHandlingRocket>0 then bR=bR+bR*fuelTankHandlingRocket*0.1 end;bR=CalculateFuelVolume(bQ,bR)aQ[#aQ+1]={aq[bN],l(aq[bN]),bR,bX,bQ,bW}end;if type=="Space Fuel Tank"then local bR=2400;local bX=182.67;if bU>10000 then bR=76800;bX=5480 elseif bU>1300 then bR=9600;bX=988.67 end;bQ=bV-bX;if fuelTankHandlingSpace>0 then bR=bR+bR*fuelTankHandlingSpace*0.2 end;bR=CalculateFuelVolume(bQ,bR)aP[#aP+1]={aq[bN],l(aq[bN]),bR,bX,bQ,bW}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(an or not an and ap<10000)then for _,bO in pairs(door)do bO.toggle()end end;if switch then for _,bO in pairs(switch)do bO.toggle()end end;if forcefield and(an or not an==0 and ap<10000)then for _,bO in pairs(forcefield)do bO.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if N then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bY=AboveGroundLevel()if bY~=-1 or not an and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not N then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bf)if bf==0 and not N then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if an and bY~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=an end;local function bZ(b_,c0)if c0==nil then c0=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not c0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,b_)B=s(b_*100,0)end;local function c1(b_,c0)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not c0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,b_)end;local function c2(bO)if ResolutionX==1920 then return bO else return s(ResolutionX*bO/1920,0)end end;local function c3(bO)if ResolutionY==1080 then return bO else return s(ResolutionY*bO/1080,0)end end;local function c4(c5,c6)if c5==nil then c5=core.g()end;c5=s(c5,5)if c6~=nil and c6 or(aN==nil or aN~=c5)then local c7=core.getVelocity()local c8=vec3(c7):len()local c9=e(unit.getData()).maxBrake;if c9~=nil and c9>0 and an then c9=c9/utils.clamp(c8/100,0.1,1)c9=c9/ao;if ao>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c9)/2 else LastMaxBrakeInAtmo=c9 end end end;if c9~=nil and c9>0 then LastMaxBrake=c9 end;aN=c5 end end;local function ca(cb,cc,cd,ce,cf,cg,ch,ci,cj)local ck={enableName=cb,disableName=cc,width=cd,height=ce,x=cf,y=cg,toggleVar=ch,toggleFunction=ci,drawCondition=cj,hovered=false}table.insert(aB,ck)return ck end;function UpdateAtlasLocationsList()AtlasOrdered={}for bN,bO in pairs(b2[0])do table.insert(AtlasOrdered,{name=bO.name,index=bN})end;local function cl(cm,cn)return cm.name<cn.name end;table.sort(AtlasOrdered,cl)end;function AddLocationsToAtlas()for bN,bO in pairs(SavedLocations)do table.insert(b2[0],bO)end;UpdateAtlasLocationsList()end;local function co(cp,cq)if cp==0 then return math.abs(cq)<1e-09 end;if cq==0 then return math.abs(cp)<1e-09 end;return math.abs(cp-cq)<math.max(math.abs(cp),math.abs(cq))*epsilon end;local function cr(cs,ct)local cu=vec3(ct)if cs.bodyId==0 then return setmetatable({latitude=cu.x,longitude=cu.y,altitude=cu.z,bodyId=0,systemId=cs.planetarySystemId},MapPosition)end;local cv=cu-cs.center;local ad=cv:len()local cw=ad-cs.radius;local cx=0;local cy=0;if not co(ad,0)then local cz=math.atan(cv.y,cv.x)cy=cz>=0 and cz or 2*math.pi+cz;cx=math.pi/2-math.acos(cv.z/ad)end;return setmetatable({latitude=math.deg(cx),longitude=math.deg(cy),altitude=cw,bodyId=cs.bodyId,systemId=cs.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cA)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cB='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cC,cD,cx,cy,cw=p(cA,cB)if cC=="0"and cD=="0"then return vec3(tonumber(cx),tonumber(cy),tonumber(cw))end;cy=math.rad(cy)cx=math.rad(cx)local planet=b2[tonumber(cC)][tonumber(cD)]local cE=math.cos(cx)local cF=vec3(cE*math.cos(cy),cE*math.sin(cy),math.sin(cx))return planet.center+(planet.radius+cw)*cF end;function AddNewLocationByWaypoint(cG,planet,cA)if dbHud_1 then local cH={}local position=zeroConvertToWorldCoordinates(cA)if planet.name=="Space"then cH={position=position,name=cG,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cI=false;if planet.hasAtmosphere then cI=true else cI=false end;cH={position=position,name=cG,atmosphere=cI,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cH;table.insert(b2[0],cH)UpdateAtlasLocationsList()else X="Databank must be installed to save locations"end end;local function cJ(ad,cK)local cL=ad>100000;local bP,cM=""if cK==nil then cK=1 end;if cL then bP,cM=s(ad/1000/200,cK),"SU"elseif ad<1000 then bP,cM=s(ad,cK),"M"else bP,cM=s(ad/1000,cK),"KM"end;return bP,cM end;function findAtlasIndex(cN)for bN,bO in pairs(cN)do if bO.name and bO.name==CustomTarget.name then return bN end end;return-1 end;local function cO()if dbHud_1 then local position=bK;local cP=planet.name..". "..#SavedLocations;if radar_1 then local cQ,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cQ~=nil and cQ~=""then cP=cP.." "..radar_1.getConstructName(cQ)end end;local cH={}local cI=false;if planet.hasAtmosphere then cI=true end;cH={position=position,name=cP,atmosphere=cI,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cH;table.insert(b2[0],cH)UpdateAtlasLocationsList()X="Location saved as "..cP else X="Databank must be installed to save locations"end end;local function cR(cS)cS[#cS+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;local function cT()if radarPanelID~=nil and ag==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ag==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ag=0 end end;local function cU()aA=not aA;if not aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function cV()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not an then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function cW()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function cX(cY,cZ,cf,cg,cd,ce)if cY>cf and cY<cf+cd and cZ>cg and cZ<cg+ce then return true else return false end end;local function c_()TurnBurn=not TurnBurn end;local function d0()local d1=-1;local d2=-1;if vBooster then d1=vBooster.distance()end;if hover then d2=hover.distance()end;if d1~=-1 and d2~=-1 then if d1<d2 then return d1 else return d2 end elseif d1~=-1 then return d1 elseif d2~=-1 then return d2 else return-1 end end;local function d3()if bD-bl<1.5 then if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bl=-1;if AltitudeHold then return end end else bl=bD end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;V=false;be=true;LockPitch=nil;by=false;if d0()==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ap end end;if not an then by=false;bv=true;IntoOrbit=true;if not ai and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bl>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ai then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function d4(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then d3()end end;VectorStatus="Proceeding to Waypoint"end;local function d5()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end end;local function d6()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then d3()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then d3()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;by=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function ToggleIntoOrbit()bs=false;bq=nil;br=nil;bC=0;if IntoOrbit then if by then CancelIntoOrbit=false else CancelIntoOrbit=true end;by=false;IntoOrbit=false;bx=nil elseif unit.getClosestPlanetInfluence()>0 and ao==0 then IntoOrbit=true;by=false;CancelIntoOrbit=false;if bx==nil then bx=planet end else X="Unable to engage orbiting, not near planet or in atmosphere"end end;function ToggleLockPitch()if LockPitch==nil then local d7=getPitch(bJ,bF,bG)LockPitch=d7;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function d8()if n()==1 then V=not V;if V then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else X="Follow Mode only works with Remote controller"V=false end end;local function d9()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a5=nil;CustomTarget=nil;return true end;local da=AtlasOrdered[AutopilotTargetIndex].index;local db=b2[0][da]if db.center then AutopilotTargetName=db.name;a5=b8[0][da]if CustomTarget~=nil then if ao==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=db;for _,bO in pairs(b8[0])do if bO.name==CustomTarget.planetname then a5=bO;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a5.center)else AutopilotTargetCoords=CustomTarget.position end;if a5.planetname~="Space"then if a5.hasAtmosphere then AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function dc(dd)if not Autopilot and not VectorToTarget and not ai then if dd==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then d9()else local da=AtlasOrdered[AutopilotTargetIndex].index;local db=b2[0][da]if db.name=="Space"then if dd==nil then dc()else dc(1)end else d9()end end else X="Disengage autopilot before changing Interplanetary Helper"end end;local function de()if bD-bm<1.5 and ao>0 then if not bB then X="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ai then d9()local df=cr(a5,AutopilotTargetCoords)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ao~=0 then ai=true;d3()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ao>0 then by=false;if not VectorToTarget then d4(SpaceTarget)end else if ap>100000 or ap==0 then by=false;Autopilot=true else ah=true;ProgradeIsOn=true;if AltitudeHold then d3()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ao~=0 then ai=true;d3()else Autopilot=true end end elseif ao==0 then local dg=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a5.name==planet.name and dg)then by=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;V=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;I=false;LockPitch=nil;WaypointSet=false end else ai=true;d3()end else ai=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;I=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false;Reentry=false end end;function UpdatePosition(dh)local di=-1;local cH;di=findAtlasIndex(SavedLocations)if di~=-1 then local dj;if dh~=nil then cH={position=SavedLocations[di].position,name=dh,atmosphere=SavedLocations[di].atmosphere,planetname=SavedLocations[di].planetname,gravity=SavedLocations[di].gravity}else cH={position=bK,name=SavedLocations[di].name,atmosphere=ao,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[di]=cH;di=-1;di=findAtlasIndex(b2[0])if di>-1 then b2[0][di]=cH end;UpdateAtlasLocationsList()X=CustomTarget.name.." position updated"AutopilotTargetIndex=0;d9()else X="Name Not Found"end end;function ClearCurrentPosition()local di=-1;di=findAtlasIndex(b2[0])if di>-1 then table.remove(b2[0],di)end;di=-1;di=findAtlasIndex(SavedLocations)if di~=-1 then X=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,di)end;dc()UpdateAtlasLocationsList()end;local function getPitch(dk,dl,cn)local dm=dk:cross(cn):normalize_inplace()local d7=math.acos(utils.clamp(dm:dot(-dl),-1,1))*constants.rad2deg;if dm:cross(-dl):dot(cn)<0 then d7=-d7 end;return d7 end;local function dn(dp,dq,dr)dq=dq:project_on_plane(dp)dr=dr:project_on_plane(dp)return o(dq:cross(dr):dot(dp),dq:dot(dr))end;local function d0()local d1=-1;local d2=-1;if vBooster then d1=vBooster.distance()end;if hover then d2=hover.distance()end;if d1~=-1 and d2~=-1 then if d1<d2 then return d1 else return d2 end elseif d1~=-1 then return d1 elseif d2~=-1 then return d2 else return-1 end end;local function ds(dt)local du=500000;local dv,dw,dx=math.huge;local dy=false;local dz=vec3({13771471,7435803,-128971})local dA=18000000;dv=vec3(dt):dist(dz)if dv<dA then return true,math.abs(dv-dA),"Safe Zone",0 end;dw=vec3(dt):dist(vec3(planet.center))if dw<du then dy=true end;if math.abs(dw-du)<math.abs(dv-dA)then return dy,math.abs(dw-du),planet.name,planet.bodyId else return dy,math.abs(dv-dA),"Safe Zone",0 end end;local function dB()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;be=autoRollPreference;ah=false;aj=false;a9=0 end end;local function dC(dD,dE)dD=vec3(dD)dE=vec3(dE):normalize()local bP=dD*dE;return bP.x+bP.y+bP.z end;local function dF(dD,dG,dH)if not an or not bi or ak~=-1 or bI<J then local dI=dH;if dI==nil then dI=DampingMultiplier end;if dG==nil then dG=aD end;dD=vec3(dD):normalize()local dJ=vec3()-dD;local dK=-dC(dJ,core.getConstructWorldOrientationRight())*aC;local dL=-dC(dJ,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dK/2 end;if ay==0 then ay=dL/2 end;if math.abs(dK)<0.1 then Q=Q-dK*2 else Q=Q-(dK+(dK-ax)*dI)end;if math.abs(dL)<0.1 then P=P+dL*2 else P=P+dL+(dL-ay)*dI end;ax=dK;ay=dL;if math.abs(dK)<dG and math.abs(dL)<dG then return true end;return false elseif bi and ak==-1 then dD=bH;local dI=dH;if dI==nil then dI=DampingMultiplier end;if dG==nil then dG=aD end;dD=vec3(dD):normalize()local dJ=bF-dD;local dK=-dC(dJ,core.getConstructWorldOrientationRight())*aC;local dL=-dC(dJ,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dK/2 end;if ay==0 then ay=dL/2 end;if math.abs(dK)<0.1 then Q=Q-dK*5 else Q=Q-(dK+(dK-ax)*dI)end;if math.abs(dL)<0.1 then P=P+dL*5 else P=P+dL+(dL-ay)*dI end;ax=dK;ay=dL;if math.abs(dK)<dG and math.abs(dL)<dG then return true end;return false end end;local function dM()if Reentry then X="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then X="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ac=5 elseif not K then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then X="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;X="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dN,dO=cJ(HoldAltitude)X="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..dN..dO;c1(math.floor(bn))end;AutoTakeoff=false end;local function dP(c8)if not an then c4()return b9.computeDistanceAndTime(c8,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(c8,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function dQ(c8)c4()return b9.computeDistanceAndTime(c8,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;function gradeToggle(dR)if dR==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;V=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function ProgradeToggle()gradeToggle(1)end;function CheckDamage(cS)local dS=0;az=""local dT=aR;local dU=0;local dV=0;local dW=0;local dX=0;local dY=""for bN in pairs(aq)do local bU=0;local dZ=0;dZ=g(aq[bN])bU=j(aq[bN])dU=dU+bU;if bU<dZ then if bU==0 then dW=dW+1 else dV=dV+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bN]))local cf=position.x-b0;local cg=position.y-b0;local d_=position.z-b0;table.insert(aw,core.spawnArrowSticker(cf,cg,d_+1,"down"))table.insert(aw,core.spawnArrowSticker(cf,cg,d_+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(cf+1,cg,d_,"north"))table.insert(aw,core.spawnArrowSticker(cf+1,cg,d_,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(cf-1,cg,d_,"south"))table.insert(aw,core.spawnArrowSticker(cf-1,cg,d_,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(cf,cg-1,d_,"east"))table.insert(aw,core.spawnArrowSticker(cf,cg-1,d_,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(cf,cg+1,d_,"west"))table.insert(aw,core.spawnArrowSticker(cf,cg+1,d_,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bN])end elseif aS and#aw>0 and aw[11]==aq[bN]then for e0 in pairs(aw)do core.deleteSticker(aw[e0])end;aw={}end end;dS=c(dU/dT*100)if dS<100 then cS[#cS+1]=[[<g class="pbright txt">]]dX=c(dS*2.55)dY=d("rgb(%d,%d,%d)",255-dX,dX,0)if dS<100 then cS[#cS+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dY,dS)if dW>0 then cS[#cS+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dY,dW,dV)elseif dV>0 then cS[#cS+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dY,dV)end end;cS[#cS+1]=[[<\g>]]end end;function DrawCursorLine(cS)local e1=c(utils.clamp(ad/(aE/4)*255,0,255))cS[#cS+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",aa,ab,c(w+0.5)+e1,c(y+0.5)-e1,c(x+0.5)-e1)end;function clearAll()if al then al=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;V=false;I=false;ah=false;ai=false;K=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil;IntoOrbit=false else al=true end end;function wipeSaveVariables()for bN,bO in pairs(a)do dbHud_1.setStringValue(bO,f(nil))end;for bN,bO in pairs(b)do if bO~="SavedLocations"then dbHud_1.setStringValue(bO,f(nil))end end;X="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ac=5;aK=false;a8=true end;function CheckButtons()for _,bO in pairs(aB)do if bO.hovered then if not bO.drawCondition or bO.drawCondition()then bO.toggleFunction()end;bO.hovered=false end end end;function SetButtonContains()local cf=aa+aE/2;local cg=ab+aF/2;for _,bO in pairs(aB)do bO.hovered=cX(cf,cg,bO.x,bO.y,bO.width,bO.height)end end;function DrawButton(cS,e2,hover,cf,cg,e3,e4,e5,e6,e7,e8)if type(e7)=="function"then e7=e7()end;if type(e8)=="function"then e8=e8()end;cS[#cS+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",cf,cg,e3,e4)if e2 then cS[#cS+1]=d("%s'",e5)else cS[#cS+1]=e6 end;if hover then cS[#cS+1]=" style='stroke:white; stroke-width:2'"else cS[#cS+1]=" style='stroke:black; stroke-width:1'"end;cS[#cS+1]="></rect>"cS[#cS+1]=d("<text x='%f' y='%f' font-size='24' fill='",cf+e3/2,cg+e4/2+5)if e2 then cS[#cS+1]="black"else cS[#cS+1]="white"end;cS[#cS+1]="' text-anchor='middle' font-family='Montserrat'>"if e2 then cS[#cS+1]=d("%s</text>",e7)else cS[#cS+1]=d("%s</text>",e8)end end;function DrawButtons(cS)local e9="rgb(50,50,50)'"local ea="rgb(210,200,200)"local eb=DrawButton;for _,bO in pairs(aB)do local cc=bO.disableName;local cb=bO.enableName;if type(cc)=="function"then cc=cc()end;if type(cb)=="function"then cb=cb()end;if not bO.drawCondition or bO.drawCondition()then eb(cS,bO.toggleVar(),bO.hovered,bO.x,bO.y,bO.width,bO.height,ea,e9,cc,cb)end end end;function DrawTank(cS,a_,cf,ec,ed,ee,ef,eg)local eh=1;local ei=2;local ej=3;local ek=4;local el=5;local em=6;local en=""local eo=0;local ep=fuelY;local eq=fuelY+10;if n()==1 and not RemoteHud then ep=ep-50;eq=eq-50 end;cS[#cS+1]=[[<g class="pdim txtfuel">]]if ed=="ATMO"then en="atmofueltank"elseif ed=="SPACE"then en="spacefueltank"else en="rocketfueltank"end;eo=_G[en.."_size"]if#ee>0 then for i=1,#ee do local cP=string.sub(ee[i][ei],1,12)local er=0;for e0=1,eo do if ee[i][ei]==e(unit[en.."_"..e0].getData()).name then er=e0;break end end;if a_ or ef[i]==nil or eg[i]==nil then local es=0;local et=0;local eu=0;local ev=0;local bW=r()if er~=0 then eg[i]=e(unit[en.."_"..er].getData()).percentage;ef[i]=e(unit[en.."_"..er].getData()).timeLeft;if ef[i]=="n/a"then ef[i]=0 end else eu=k(ee[i][eh])-ee[i][ek]es=ee[i][ej]eg[i]=c(0.5+eu*100/es)et=ee[i][el]ev=ee[i][em]if et<=eu then ef[i]=0 else ef[i]=c(0.5+eu/((et-eu)/(bW-ev)))end;ee[i][el]=eu;ee[i][em]=bW end end;if cP==ec then cP=d("%s %d",ed,i)end;if er==0 then cP=cP.." *"end;local ew;if ef[i]==0 then ew="n/a"else ew=FormatTimeString(ef[i])end;if eg[i]~=nil then local dX=c(eg[i]*2.55)local dY=d("rgb(%d,%d,%d)",255-dX,dX,0)local ex=""if ew~="n/a"and ef[i]<120 or eg[i]<5 then if a_ then ex=[[class="red"]]end end;cS[#cS+1]=d([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],cf,ep,ex,cP,cf,eq,dY,eg[i],ew)ep=ep+30;eq=eq+30 end end end;cS[#cS+1]="</g>"end;function getRelativePitch(c7)c7=vec3(c7)local d7=-math.deg(math.atan(c7.y,c7.z))+180;d7=d7-90;if d7<0 then d7=360+d7 end;if d7>180 then d7=-180+d7-180 end;return-d7 end;function getRelativeYaw(c7)c7=vec3(c7)local ey=math.deg(math.atan(c7.y,c7.x))-90;if ey<-180 then ey=360+ey end;return ey end;function getAPEnableName()local cP=AutopilotTargetName;if cP==nil then local ez,cM=cJ((bK-CustomTarget.position):len())cP=CustomTarget.name.." "..ez..cM end;if cP==nil then cP="None"end;return"Engage Autopilot: "..cP end;function getAPDisableName()local cP=AutopilotTargetName;if cP==nil then cP=CustomTarget.name end;if cP==nil then cP="None"end;return"Disable Autopilot: "..cP end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function SetupButtons()local eA=50;local eB=260;local eC=ca("Enable Brake Toggle","Disable Brake Toggle",eB,eA,aE/2-eB/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then X="Brakes in Toggle Mode"else X="Brakes in Default Mode"end end)ca("Align Prograde","Disable Prograde",eB,eA,aE/2-eB/2-50-eC.width,aF/2-eA+380,function()return ProgradeIsOn end,ProgradeToggle)ca("Align Retrograde","Disable Retrograde",eB,eA,aE/2-eB/2+eC.width+50,aF/2-eA+380,function()return RetrogradeIsOn end,gradeToggle,function()return ao==0 end)local eD=ca(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,de)ca("Save Position","Save Position",200,eD.height,eD.x+eD.width+30,eD.y,function()return false end,cO,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)ca("Update Position","Update Position",200,eD.height,eD.x+eD.width+30,eD.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ca("Clear Position","Clear Position",200,eD.height,eD.x-200-30,eD.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)eA=60;eB=300;local cf=10;local cg=aF/2-300;ca("Enable Turn and Burn","Disable Turn and Burn",eB,eA,cf,cg,function()return TurnBurn end,c_)ca("Engage Altitude Hold","Disable Altitude Hold",eB,eA,cf+eB+20,cg,function()return AltitudeHold end,d3)cg=cg+eA+20;ca("Engage Autoland","Disable Autoland",eB,eA,cf,cg,function()return AutoLanding end,d5)local eE,eF,eG;if VertTakeOffEngine then eE="Engage Vertical Takeoff"eF="Disable Vertical Takeoff"eG=VertTakeOff else eE="Engage Auto Takeoff"eF="Disable Auto Takeoff"eG=AutoTakeoff end;ca(eE,eF,eB,eA,cf+eB+20,cg,function()return eG end,d6)cg=cg+eA+20;ca("Show Orbit Display","Hide Orbit Display",eB,eA,cf,cg,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then X="Orbit Display Enabled"else X="Orbit Display Disabled"end end)ca("Engage Orbiting","Cancel Orbiting",eB,eA,cf+eB+20,cg,function()return IntoOrbit end,ToggleIntoOrbit,function()return ao==0 and unit.getClosestPlanetInfluence()>0 end)cg=cg+eA+20;ca("Glide Re-Entry","Cancel Glide Re-Entry",eB,eA,cf,cg,function()return Reentry end,function()ah=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)ca("Parachute Re-Entry","Cancel Parachute Re-Entry",eB,eA,cf+eB+20,cg,function()return Reentry end,dM,function()return ap>ReentryAltitude end)cg=cg+eA+20;ca("Engage Follow Mode","Disable Follow Mode",eB,eA,cf,cg,function()return V end,d8,function()return n()==1 end)ca("Enable Repair Arrows","Disable Repair Arrows",eB,eA,cf+eB+20,cg,function()return aS end,function()aS=not aS;if aS then X="Repair Arrows Enabled"else X="Repair Arrows Diabled"end end,function()return n()==1 end)cg=cg+eA+20;if not ExternalAGG then ca("Enable AGG","Disable AGG",eB,eA,cf,cg,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;cg=cg+eA+20;ca(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,eB*2,eA,cf,cg,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local eH=Nav.axisCommandManager:getAxisCommandType(0)local eI="TRAVEL"if eH==1 then eI="CRUISE"end;if Autopilot then eI="AUTOPILOT"end;return eI end;local function eJ(cS)local cw=ap;local c7=core.getVelocity()local c8=vec3(c7):len()local eK=getRoll(bJ,bF,bG)local eL=eK/180*math.pi;local eM=math.cos(eL)local eN=math.sin(eL)local d7=getPitch(bJ,bF,bG*eM+bE*eN)local eO=eK;local eP=d7;local eQ=c(unit.getThrottle())local eR=c8*3.6;local eS=unit.getAxisCommandValue(0)local eT=c2(1770)local eU=c3(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eS=B;eQ=B*100 end;local eI=GetFlightStyle()local eV="ROLL"local dg=unit.getClosestPlanetInfluence()>0;if eQ==nil then eQ=0 end;if not dg then if c8>5 then d7=getRelativePitch(c7)eK=getRelativeYaw(c7)else d7=0;eK=0 end;eV="YAW"end;if A>50000 and not an then local eW;if A>200000 then eW=s(A/200000,2).." su"else eW=s(A/1000,1).." km"end;cS[#cS+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],eT,eU,eW)end;cS[#cS+1]=af;cS[#cS+1]=az;cS[#cS+1]=ae;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cS,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cS,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cS,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cS,cw)if n()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dg then DrawRollLines(cS,centerX,centerY,eO,eV,dg)DrawArtificialHorizon(cS,eP,eO,centerX,centerY,dg,c(getRelativeYaw(c7)),c8)else DrawRollLines(cS,centerX,centerY,eK,eV,dg)DrawArtificialHorizon(cS,d7,eK,centerX,centerY,dg,c(eK),c8)end;DrawAltitudeDisplay(cS,cw,dg)DrawPrograde(cS,c7,c8,centerX,centerY)end end;DrawThrottle(cS,eI,eQ,eS)DrawSpeed(cS,eR)DrawWarnings(cS)DisplayOrbitScreen(cS)if screen_2 then local cA=bK;local cf=960+cA.x/b4;local cg=450+cA.y/b5;screen_2.moveContent(b6,(cf-80)/19.2,(cg-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;local function eX(cS)if not z then w=PvPR;y=PvPG;x=PvPB else w=SafeR;y=SafeG;x=SafeB end;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local eY=au;local eZ=av;local e_=au;local f0=av;if IsInFreeLook()and not brightHud then eY=[[rgb(]]..c(w*0.4+0.5)..","..c(y*0.4+0.5)..","..c(x*0.3+0.5)..[[)]]eZ=[[rgb(]]..c(w*0.3+0.5)..","..c(y*0.3+0.5)..","..c(x*0.2+0.5)..[[)]]end;cS[#cS+1]=d([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],eY,eY,e_,e_,eZ,eZ,f0,f0,ResolutionX,ResolutionY)end;function HUDEpilogue(cS)cS[#cS+1]="</svg>"end;function DrawSpeed(cS,eR)local f1=throtPosY-10;local f2=throtPosX+10;cS[#cS+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then f1=75 end;cS[#cS+1]=d([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],f2,f1,c(eR))end;function DrawOdometer(cS,a6,TotalDistanceTravelled,eI,a7,f3)local f4=c2(1240)local f5=c3(55)local f6=f5+10;local c5=core.g()local f7=0;local f8=0;local f9=0;c4(c5)if an then f9=LastMaxBrakeInAtmo else f9=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=m()if not ShowOdometer then return end;local fa=vec3(core.getWorldAcceleration()):len()/9.80665;if c5>0.1 then f8=aM*c5;f7=maxThrust/c5 end;cS[#cS+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then f4=c2(1120)f5=c3(55)f6=f5+10 elseif an then local fb=c2(770)cS[#cS+1]=d([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],fb,f5,fb,f6,ao)end;cS[#cS+1]=d([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],f4,f5,f4,f6,c5/9.80665,f4,f5+20,f4,f6+20,fa)cS[#cS+1]=d([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],c2(660),c2(700),c3(35),c2(960),c3(55),c2(1240),c3(35),c2(1280))if n()==0 or RemoteHud then cS[#cS+1]=d([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],c2(700),c3(20),a6,c2(700),c3(30),TotalDistanceTravelled/1000,c2(830),c3(20),FormatTimeString(a7),c2(830),c3(30),FormatTimeString(TotalFlightTime),c2(970),c3(20),aM/1000,c2(1240),c3(10),f9/1000,c2(1240),c3(30),maxThrust/1000,c2(960),c3(180),eI)if c5>0.1 then cS[#cS+1]=d([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],c2(970),c3(30),f7/1000,c2(1240),c3(20),f8/1000)else cS[#cS+1]=d([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],c2(970),c3(30),c2(1240),c3(20))end else cS[#cS+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],c2(960),c3(33),eI)end;cS[#cS+1]="</g>"end;function DrawThrottle(cS,eI,eQ,eS)eQ=math.floor(eQ+0.5)local ep=throtPosY+10;local eq=throtPosY+20;if n()==1 and not RemoteHud then ep=55;eq=65 end;local fc="CRUISE"local unit="km/h"local b_=eS;if eI=="TRAVEL"or eI=="AUTOPILOT"then fc="THROT"unit="%"b_=eQ;local fd="dim"if eQ<0 then fd="red"end;cS[#cS+1]=d([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],fd,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eQ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cS[#cS+1]=d([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,ep,fc,throtPosX+10,eq,b_,unit)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then eQ=math.floor(E*100+0.5)local fd="red"if eQ<0 then fd="red"end;cS[#cS+1]=d([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],fd,1-math.abs(eQ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cS[#cS+1]=d([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,ep+40,"LIMIT",throtPosX+10,eq+40,eQ,"%")end;if an and AtmoSpeedAssist or Reentry then cS[#cS+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,ep-40,"LIMIT: ",bn.." km/h")elseif not an and Autopilot then cS[#cS+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,ep-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cS,cw)if cw<200000 and not an or cw and an then local fe=-bJ:dot(bH)local ff=0;if math.abs(fe)>1 then ff=45*math.log(math.abs(fe),10)if fe<0 then ff=-ff end end;cS[#cS+1]=d([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,c(fe),c(ff))end end;function getHeading(dl)local dd=-bJ;dl=dl-dl:project_on(dd)local fg=vec3(0,0,1)fg=fg-fg:project_on(dd)local fh=fg:cross(dd)local ff=fg:angle_between(dl)*constants.rad2deg;if dl:dot(fh)<0 then ff=360-ff end;return ff end;function DrawRollLines(cS,centerX,centerY,eO,eV,dg)local fi=circleRad;local fj=20;fj=c(fj)local fk=c(eO)if dg then for i=-45,45,5 do local fl=i;cS[#cS+1]=d([[<g transform="rotate(%f,%d,%d)">]],fl,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cS[#cS+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+fi+fj-len,centerX,centerY+fi+fj)end;cS[#cS+1]=d([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+fi+fj-35,eV,centerX,centerY+fi+fj-25,fk)cS[#cS+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eO,centerX,centerY)cS[#cS+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+fi+fj-20,centerX+5,centerY+fi+fj-20,centerX,centerY+fi+fj-15)cS[#cS+1]="</g>"end;local ey=fk;if dg then ey=getHeading(bF)end;local fm=20;local fn=c(ey)local fo=0;local fp=centerY+fi+fj+20;local fq=centerX;if eV~="YAW"then fp=c3(130)fq=c2(960)end;local fr=[[<path class="txttick line" d="]]for i=c(fn-(fm+10)-fn%5+0.5),c(fn+fm+10+fn%5+0.5),5 do local cf=fq+-i*5+ey*5;if i%10==0 then fo=10;local t=i;if t==360 then t=0 elseif t>360 then t=t-360 elseif t<0 then t=t+360 end;cS[#cS+1]=d([[
                            <text x="%f" y="%f">%d</text>]],cf+5,fp-12,t)elseif i%5==0 then fo=5 end;if fo==10 then fr=d([[%s M %f %f v %d]],fr,cf,fp-5,fo)else fr=d([[%s M %f %f v %d]],fr,cf,fp-2.5,fo)end end;cS[#cS+1]=fr..[["/>]]cS[#cS+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fq-5,fp+10,fq+5,fp+10,fq,fp+5)if dg then eV="HDG"end;cS[#cS+1]=d([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],fq,fp+25,fn,fq,fp+35,eV)end;function DrawArtificialHorizon(cS,eP,eO,centerX,centerY,dg,fs,c8)local fi=circleRad;local ft=c(fi*3/5)if fi>0 then local fu=c(eP)local len=0;local fr=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*eO,centerX,centerY)if not an then fr=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cS[#cS+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],fi-1,centerX,centerY)cS[#cS+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(fu-30-fu%5+0.5),c(fu+30+fu%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cg=centerY+-i*5+eP*5;if len==30 then fr=d([[%s M %d %f h %d]],fr,centerX-ft-len,cg,len)if an then cS[#cS+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eO,centerX,centerY,centerX-ft+10,cg,i)cS[#cS+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eO,centerX,centerY,centerX+ft-10,cg,i)if i==0 or i==180 or i==-180 then cS[#cS+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eO,centerX,centerY,centerX-ft+20,cg,ft*2-40)end else cS[#cS+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ft+10,cg,i)cS[#cS+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ft-10,cg,i)end;fr=d([[%s M %d %f h %d]],fr,centerX+ft,cg,len)else fr=d([[%s M %d %f h %d]],fr,centerX-ft-len,cg,len)fr=d([[%s M %d %f h %d]],fr,centerX+ft,cg,len)end end;cS[#cS+1]=fr..[["/>]]local fv="PITCH"if not dg then fv="REL PITCH"end;if eP>90 and not an then eP=90-(eP-90)elseif eP<-90 and not an then eP=-90-(eP+90)end;if fi>200 then if an then if c8>J then cS[#cS+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,fs)end;cS[#cS+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eO,centerX,centerY)else cS[#cS+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cS[#cS+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ft+25,centerY-5,centerX-ft+20,centerY,centerX-ft+25,centerY+5,centerX-ft+50,centerY+4,fu)cS[#cS+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ft-25,centerY-5,centerX+ft-20,centerY,centerX+ft-25,centerY+5,centerX+ft-30,centerY+4,fu)cS[#cS+1]="</g>"end;local fw=c(fi/3)cS[#cS+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fw,centerY,fi-fw)if not an and dg then cS[#cS+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eO,centerX,centerY,centerX-ft+10,centerY,ft*2-20)end;cS[#cS+1]="</g>"if fi<200 then if an and c8>J then cS[#cS+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-fi,fv,centerX,centerY-fi+10,fu,centerX,centerY-15,"Yaw",centerX,centerY+20,fs)else cS[#cS+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-fi,fv,centerX,centerY-fi+15,fu)end end end end;function DrawAltitudeDisplay(cS,cw,dg)local fx=altMeterX;local fy=altMeterY;local fz=78;local fA=19;local fB=AboveGroundLevel()if fB~=-1 then table.insert(cS,d([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],fx+fz,fy+fA+20,fB))end;if dg and(cw<200000 and not an or cw and an)then table.insert(cS,d([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],fx-1,fy-4,fz+2,fA+6,fx+1,fy-1,fz-4,fA))local di=0;local fC=1;local fD=0;local fE=cw<0;local fF=9;if fE then fF=0 end;local cw=math.abs(cw)while di<6 do local fG=11;local fH=16;local fI=9;local fJ=14;local ex="altsm"if di>2 then fH=fH+3;fG=fG+2;fJ=fJ+2;fI=fI-6;ex="altbig"end;if fE then ex=ex.." red"end;local fK=cw/fC%10;local fL=c(fK)local fM=c((fL+1)%10)local fN=fD;if di==0 then fN=fK-fL;if fE then fN=1-fN end end;if fE and(di==0 or fD~=0)then local fO=fM;fM=fL;fL=fO end;local fP=fH*(fN-1)local fQ=fP+fH;local cf=fx+fI+(6-di)*fG;local cg=fy+fJ;table.insert(cS,d([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],ex,cf,cg+fP,fM,cf,cg+fQ,fL))di=di+1;fC=fC*10;if fL==fF then fD=fN else fD=0 end end;table.insert(cS,[[</g></g>]])end end;function DrawPrograde(cS,c7,c8,centerX,centerY)if c8>5 and not an or c8>J then local fi=circleRad;local fR=20;local fS=20;local fT=vec3(c7)local fU=getRelativePitch(fT)local fV=getRelativeYaw(fT)local fW=14;local fX=fW/2;local fY=-fV/fS*fi;local fZ=fU/fR*fi;local cf=centerX+fY;local cg=centerY+fZ;local ad=math.sqrt(fY^2+fZ^2)local f_=[[<circle
                cx="]]..cf..[["
                cy="]]..cg..[["
                r="]]..fX/fW..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..cf..[["
                cy="]]..cg..[["
                r="]]..fX..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..cf-fW..[[,]]..cg..[[ h ]]..fX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..cf+fX..[[,]]..cg..[[ h ]]..fX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..cf..[[,]]..cg-fW..[[ v ]]..fX..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ad<fi then cS[#cS+1]=f_ else local ff=math.atan(fZ,fY)local g0=4;local g1=centerX+fi*math.cos(ff)local g2=centerY+fi*math.sin(ff)cS[#cS+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ff*180/math.pi,g1,g2,g1-g0,g2-g0/2,g0*2,g0,g1+g0,g2-g0,g0,g0,-g0,g0)end;if not an then fU=getRelativePitch(-fT)fV=getRelativeYaw(-fT)fY=-fV/fS*fi;fZ=fU/fR*fi;cf=centerX+fY;cg=centerY+fZ;ad=math.sqrt(fY^2+fZ^2)if ad<fi then local g3=[[<circle
                        cx="]]..cf..[["
                        cy="]]..cg..[["
                        r="]]..fX..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..cf..[[,]]..cg-fW..[[ v ]]..fX..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..cf..[[,]]..cg..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..cf..[[,]]..cg..[[)" />
                     <path
                        d="M ]]..cf-fX..[[,]]..cg..[[ h ]]..fW..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..cf..[[,]]..cg..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..cf..[[,]]..cg..[[)"/>]]cS[#cS+1]=g3 end end end end;function DrawWarnings(cS)cS[#cS+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],c2(1900),c3(1070),VERSION_NUMBER)cS[#cS+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cS[#cS+1]=d([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],c2(960),c3(550))cS[#cS+1]=d([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],c2(960),c3(600))cS[#cS+1]=d([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],c2(960),c3(650))end;local g4=c2(960)local g5=c3(860)local g6=c3(880)local g7=c3(900)local g8=c3(960)local g9=c3(200)local ga=c3(150)local gb=c3(960)if n()==1 and not RemoteHud then g5=c3(135)g6=c3(155)g7=c3(175)g9=c3(115)ga=c3(95)end;if BrakeIsOn then cS[#cS+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],g4,g5)elseif C>0 then cS[#cS+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],g4,g5,C)end;if an and bi and d0()==-1 then cS[#cS+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],g4,g9+50)end;if as then cS[#cS+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],g4,gb)end;if GearExtended then if N then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],g4,g6)else cS[#cS+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],g4,g6)end;local ez,cM=cJ(Nav:getTargetGroundAltitude())cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],g4,g7,ez..cM)end;if a0 then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],g4,g8+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],g4,g9+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else cS[#cS+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],g4,g9+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],g4,g9+20,AutopilotStatus)elseif LockPitch~=nil then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],g4,g9+20,c(LockPitch))elseif V then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],g4,g9+20)elseif Reentry then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],g4,g9+20)end;local gc,gd,ge=b8:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(gf)if gf.noAtmosphericDensityAltitude>0 then return gf.radius+gf.noAtmosphericDensityAltitude else return gf.radius+gf.surfaceMaxAltitude*1.5 end end)local gg=gd;if ge~=nil and gd~=nil then gg=math.min(ge,gd)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local ez,cM=cJ(HoldAltitude,2)cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],g4,g9,ez..cM)if BrakeIsOn then cS[#cS+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],g4,g9+50)end else local ez,cM=cJ(HoldAltitude,2)cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],g4,g9,ez..cM)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ao>0.1 then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],g4,g9)elseif ao<0.09 and ao>0.05 then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],g4,g9)elseif ao<0.05 then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],g4,g9)end end;if IntoOrbit then if bp~=nil then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],g4,g9,bp)end end;if BrakeLanding then if StrongBrakes then cS[#cS+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],g4,g9)else cS[#cS+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],g4,g9)end end;if ProgradeIsOn then cS[#cS+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],g4,g9)end;if RetrogradeIsOn then cS[#cS+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],g4,g9)end;if TurnBurn then cS[#cS+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],g4,ga)elseif gg~=nil and ao==0 then local ez,cM=cJ(gg)local travelTime=b9.computeTravelTime(bI,0,gg)local gh="Collision"if gc.noAtmosphericDensityAltitude>0 then gh="Atmosphere"end;cS[#cS+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],g4,ga,gc.name,gh,FormatTimeString(travelTime),ez..cM)end;if VectorToTarget and not IntoOrbit then cS[#cS+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],g4,g9+30,VectorStatus)end;cS[#cS+1]="</g>"end;function DisplayOrbitScreen(cS)if orbit~=nil and ao<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local gi=OrbitMapX;local gj=OrbitMapY;local gk=OrbitMapSize;local gl=4;gj=gj+gl;local gm=15;local cf=gi+gk+gi/2+gl;local cg=gj+gk/2+5+gl;local gn,go,gp,gq;gn=gk/4;gq=0;cS[#cS+1]=[[<g class="pbright txtorb txtmid">]]cS[#cS+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',gk+gi*2,gk+gj,gl,gl)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gp=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(gn*2)go=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gp*(1-orbit.eccentricity)gq=gn-orbit.periapsis.altitude/gp-planet.radius/gp;local gr=""if orbit.periapsis.altitude<=0 then gr='redout'end;cS[#cS+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],gr,gi+gk/2+gq+gl,gj+gk/2+gl,gn,go)cS[#cS+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',gi+gk/2+gl,gj+gk/2+gl,planet.radius/gp)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cS[#cS+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cf-35,cg-5,gi+gk/2+gn+gq,cg-5)cS[#cS+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],cf,cg)cg=cg+gm;local ez,cM=cJ(orbit.apoapsis.altitude)cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,ez..cM)cg=cg+gm;cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,FormatTimeString(orbit.timeToApoapsis))cg=cg+gm;cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,getSpeedDisplayString(orbit.apoapsis.speed))end;cg=gj+gk/2+5+gl;cf=gi-gi/2+10+gl;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cS[#cS+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cf+35,cg-5,gi+gk/2-gn+gq,cg-5)cS[#cS+1]=d([[<text x="%f" y="%f">Periapsis</text>]],cf,cg)cg=cg+gm;local ez,cM=cJ(orbit.periapsis.altitude)cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,ez..cM)cg=cg+gm;cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,FormatTimeString(orbit.timeToPeriapsis))cg=cg+gm;cS[#cS+1]=d([[<text x="%f" y="%f">%s</text>]],cf,cg,getSpeedDisplayString(orbit.periapsis.speed))end;cS[#cS+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],gi+gk/2+gl,20+gl,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gs=orbit.timeToApoapsis/orbit.period*2*math.pi;local gt=gn*math.cos(gs)local gu=go*math.sin(gs)cS[#cS+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',gi+gk/2+gt+gq+gl,gj+gk/2+gu+gl)end;cS[#cS+1]=[[</g>]]end end;function getSpeedDisplayString(c8)return c(s(c8*3.6,0)+0.5).." km/h"end;function FormatTimeString(gv)local gw=0;local gx=0;local gy=0;if gv<60 then gv=c(gv)elseif gv<3600 then gw=c(gv/60)gv=c(gv%60)elseif gv<86400 then gx=c(gv/3600)gw=c(gv%3600/60)else gy=c(gv/86400)gx=c(gv%86400/3600)end;if gy>0 then return gy.."d "..gx.."h "elseif gx>0 then return gx.."h "..gw.."m "elseif gw>0 then return gw.."m "..gv.."s"elseif gv>0 then return gv.."s"else return"0s"end end;function GetAutopilotMaxMass()local gz=LastMaxBrakeInAtmo/a5:getGravity(a5.center+vec3(0,0,1)*a5.radius):len()return gz end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a5.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local c8=bI;local gA=unit.getThrottle()/100;if AtmoSpeedAssist then gA=B end;local gB,gC=b9.computeDistanceAndTime(bI,MaxGameVelocity,m(),Nav:maxForceForward()*gA,warmup,0)local a1,a2;if not TurnBurn then a1,a2=dP(MaxGameVelocity)else a1,a2=dQ(MaxGameVelocity)end;local _,gD;if not TurnBurn and c8>0 then _,gD=dP(c8)else _,gD=dQ(c8)end;local gE=0;local gF=0;if AutopilotCruising or not Autopilot and c8>5 then gF=b9.computeTravelTime(c8,0,AutopilotDistance)elseif a1+gB<AutopilotDistance then gE=AutopilotDistance-(a1+gB)gF=b9.computeTravelTime(8333.0556,0,gE)else local gG=(AutopilotDistance-a1)/gB;gB=AutopilotDistance-a1;gC=gC*gG end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gF elseif AutopilotBraking then return gD elseif AutopilotCruising then return gF+gD else return gC+a2+gF end end;function AboveGroundLevel()local gH=-1;local gI=d0()if telemeter_1 then gH=telemeter_1.getDistance()end;if gI~=-1 and gH~=-1 then if gI<gH then return gI else return gH end elseif gI~=-1 then return gI else return gH end end;function tablelength(gJ)local gK=0;for _ in pairs(gJ)do gK=gK+1 end;return gK end;function BeginProfile(gL)ProfileTimeStart=r()end;function EndProfile(gL)local gM=r()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gM;ProfileCount=ProfileCount+1;if gM>ProfileTimeMax then ProfileTimeMax=gM end;if gM<ProfileTimeMin then ProfileTimeMin=gM end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gN=ProfileTimeSum;local gO=ProfileTimeSum/ProfileCount;local gP=ProfileTimeMin;local gQ=ProfileTimeMax;local gR=ProfileCount;system.print(d("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gN,gO,gP,gQ,gR))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gS=radar_1.getEntries()local gT=radar_1.getData()local gU=c2(1770)local gV=c3(330)if#gS>0 then local gW=gT:find('identifiedConstructs":%[%]')if gW==nil and perisPanelID==nil then ag=1;cT()end;if gW~=nil and perisPanelID~=nil then cT()end;if radarPanelID==nil then cT()end;ae=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gU,gV,#gS)local gX={}for bN,bO in pairs(gS)do if radar_1.hasMatchingTransponder(bO)==1 then table.insert(gX,bO)end end;if#gX>0 then local cg=c3(15)local cf=c2(1370)ae=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ae,cf,cg)for bN,bO in pairs(gX)do cg=cg+20;ae=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ae,cf,cg,radar_1.getConstructName(bO))end end else local gY;gY=gT:find('worksInEnvironment":false')if gY then ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gU,gV)else ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gU,gV)end;if radarPanelID~=nil then ag=0;cT()end end end end;function DisplayMessage(cS,ez)if ez~="empty"then cS[#cS+1]=[[<text class="msg" x="50%%" y="310" >]]for gZ in string.gmatch(ez,"([^\n]+)")do cS[#cS+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],gZ)end;cS[#cS+1]=[[</text>]]end;if ac~=0 then unit.setTimer("msgTick",ac)ac=0 end end;function updateDistance()local bW=r()local eR=bI;local g_=bW-ar;if eR>1.38889 then eR=eR/1000;local h0=eR*(bW-ar)TotalDistanceTravelled=TotalDistanceTravelled+h0;a6=a6+h0 end;a7=a7+g_;TotalFlightTime=TotalFlightTime+g_;ar=bW end;local function h1(h2,h3)local h4=vec3()local h5=vec3()if h2==axisCommandId.longitudinal then h4=vec3(core.getConstructOrientationForward())h5=bF elseif h2==axisCommandId.vertical then h4=vec3(core.getConstructOrientationUp())h5=bE elseif h2==axisCommandId.lateral then h4=vec3(core.getConstructOrientationRight())h5=bG else return vec3()end;local h6=vec3(core.getWorldGravity())local h7=h6:dot(h5)local h8=vec3(core.getWorldAirFrictionAcceleration())local h9=h8:dot(h5)local ha=vec3(core.getVelocity())local hb=ha:dot(h4)local hc=h3*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(hc-hb)local hd=targetSpeedPID2:get()local he=(hd-h9-h7)*h5;return he end;local function hf(h2,h3)local h4=vec3()local h5=vec3()if h2==axisCommandId.longitudinal then h4=vec3(core.getConstructOrientationForward())h5=bF elseif h2==axisCommandId.vertical then h4=vec3(core.getConstructOrientationUp())h5=bE elseif h2==axisCommandId.lateral then h4=vec3(core.getConstructOrientationRight())h5=bG else return vec3()end;local h6=vec3(core.getWorldGravity())local h7=h6:dot(h5)local h8=vec3(core.getWorldAirFrictionAcceleration())local h9=h8:dot(h5)local ha=vec3(core.getVelocity())local hb=ha:dot(h4)local hc=h3*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(hc-hb)local hd=targetSpeedPID:get()local he=(hd-h9-h7)*h5;return he end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bN,bO in pairs(b2[0])do if aG==nil or bO.center.x<aG then aG=bO.center.x end;if aH==nil or bO.center.x>aH then aH=bO.center.x end;if aI==nil or bO.center.y<aI then aI=bO.center.y end;if aJ==nil or bO.center.y>aJ then aJ=bO.center.y end end;b3=""local hg=1.1*(aH-aG)/1920;local hh=1.4*(aJ-aI)/1080;for bN,bO in pairs(b2[0])do local cf=960+bO.center.x/hg;local cg=540+bO.center.y/hh;b3=b3 ..'<circle cx="'..cf..'" cy="'..cg..'" r="'..bO.radius/hg*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bO.name,"Moon")and not p(bO.name,"Sanctuary")and not p(bO.name,"Space")then b3=b3 .."<text x='"..cf.."' y='"..cg+bO.radius/hg*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bO.name.."</text>"end end;local cA=bK;local cf=960+cA.x/hg;local cg=540+cA.y/hh;b3=b3 ..'<circle cx="'..cf..'" cy="'..cg..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..cf.."' y='"..cg-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=hg;b5=hh;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cA=bK;local cf=960+cA.x/hg;local cg=540+cA.y/hh;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((cf-80)/19.20,(cg-80)/10.80,b3)end end;function PlanetRef()local function hi(hj)return type(hj)=='number'end;local function hk(hj)return type(tonumber(hj))=='number'end;local function hl(hm)return type(hm)=='table'end;local function hn(ho)return type(ho)=='string'end;local function hp(bO)return hl(bO)and hi(bO.x and bO.y and bO.z)end;local function hq(hr)return hl(hr)and hi(hr.latitude and hr.longitude and hr.altitude and hr.bodyId and hr.systemId)end;local hs=math.pi/180;local ht=180/math.pi;local epsilon=1e-10;local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cB='::pos{'..t..','..t..','..t..','..t..','..t..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local hu=utils.clamp;local function co(cp,cq)if cp==0 then return math.abs(cq)<1e-09 end;if cq==0 then return math.abs(cp)<1e-09 end;return math.abs(cp-cq)<math.max(math.abs(cp),math.abs(cq))*epsilon end;local function hv(hj)local bP=string.gsub(string.reverse(d('%.4f',hj)),'^0*%.?','')return bP==''and'0'or string.reverse(bP)end;local function hw(hx)if hp(hx)then return d('{x=%.3f,y=%.3f,z=%.3f}',hx.x,hx.y,hx.z)end;if hl(hx)and not getmetatable(hx)then local hy={}local hz=next(hx)if type(hz)=='nil'or hz==1 then hy=hx else for bN,bO in pairs(hx)do local b_=hw(bO)if type(bN)=='number'then table.insert(hy,d('[%s]=%s',bN,b_))else table.insert(hy,d('%s=%s',bN,b_))end end end;return d('{%s}',table.concat(hy,','))end;if hn(hx)then return d("'%s'",hx:gsub("'",[[\']]))end;return tostring(hx)end;local hA={}hA.__index=hA;hA.__tostring=function(hx,hB)local hC={}for bN in pairs(hx)do table.insert(hC,bN)end;table.sort(hC)local hy={}for _,bN in ipairs(hC)do local b_=hw(hx[bN])if type(bN)=='number'then table.insert(hy,d('[%s]=%s',bN,b_))else table.insert(hy,d('%s=%s',bN,b_))end end;if hB then return d('%s%s',hB,table.concat(hy,',\n'..hB))end;return d('{%s}',table.concat(hy,','))end;hA.__eq=function(hD,hE)return hD.planetarySystemId==hE.planetarySystemId and hD.bodyId==hE.bodyId and co(hD.radius,hE.radius)and co(hD.center.x,hE.center.x)and co(hD.center.y,hE.center.y)and co(hD.center.z,hE.center.z)and co(hD.GM,hE.GM)end;local function hF(cC,cD,du,ct,hG)assert(hk(cC),'Argument 1 (planetarySystemId) must be a number:'..type(cC))assert(hk(cD),'Argument 2 (bodyId) must be a number:'..type(cD))assert(hk(du),'Argument 3 (radius) must be a number:'..type(du))assert(hl(ct),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ct))assert(hk(hG),'Argument 5 (GM) must be a number:'..type(hG))return setmetatable({planetarySystemId=tonumber(cC),bodyId=tonumber(cD),radius=tonumber(du),center=vec3(ct),GM=tonumber(hG)},hA)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(hH)return d('::pos{%d,%d,%s,%s,%s}',hH.systemId,hH.bodyId,hv(hH.latitude*ht),hv(hH.longitude*ht),hv(hH.altitude))end;MapPosition.__eq=function(hD,hE)return hD.bodyId==hE.bodyId and hD.systemId==hE.systemId and co(hD.latitude,hE.latitude)and co(hD.altitude,hE.altitude)and(co(hD.longitude,hE.longitude)or co(hD.latitude,math.pi/2)or co(hD.latitude,-math.pi/2))end;local function hI(hJ,cD,cx,cy,cw)local cC=hJ;if hn(hJ)and not cy and not cw and not cD and not cx then cC,cD,cx,cy,cw=p(hJ,cB)assert(cC,'Argument 1 (position string) is malformed.')else assert(hk(cC),'Argument 1 (systemId) must be a number:'..type(cC))assert(hk(cD),'Argument 2 (bodyId) must be a number:'..type(cD))assert(hk(cx),'Argument 3 (latitude) must be in degrees:'..type(cx))assert(hk(cy),'Argument 4 (longitude) must be in degrees:'..type(cy))assert(hk(cw),'Argument 5 (altitude) must be in meters:'..type(cw))end;cC=tonumber(cC)cD=tonumber(cD)cx=tonumber(cx)cy=tonumber(cy)cw=tonumber(cw)if cD==0 then return setmetatable({latitude=cx,longitude=cy,altitude=cw,bodyId=cD,systemId=cC},MapPosition)end;return setmetatable({latitude=hs*hu(cx,-90,90),longitude=hs*(cy%360),altitude=cw,bodyId=cD,systemId=cC},MapPosition)end;local hK={}hK.__index=hK;hK.__tostring=function(hx,hB)local hL=hB and hB..'  'local hM={}local hC={}for bN in pairs(hx)do table.insert(hC,bN)end;table.sort(hC)for _,hN in ipairs(hC)do bdy=hx[hN]local hO=hA.__tostring(bdy,hL)if hB then table.insert(hM,d('[%s]={\n%s\n%s}',hN,hO,hB))else table.insert(hM,d('  [%s]=%s',hN,hO))end end;if hB then return d('\n%s%s%s',hB,table.concat(hM,',\n'..hB),hB)end;return d('{\n%s\n}',table.concat(hM,',\n'))end;local function hP(hQ)local b2={}local pid;for _,bO in pairs(hQ)do local cQ=bO.planetarySystemId;if type(cQ)~='number'then error('Invalid planetary system ID: '..tostring(cQ))elseif pid and cQ~=pid then error('Mistringmatch planetary system IDs: '..cQ..' and '..pid)end;local hR=bO.bodyId;if type(hR)~='number'then error('Invalid body ID: '..tostring(hR))elseif b2[hR]then error('Duplicate body ID: '..tostring(hR))end;setmetatable(bO.center,getmetatable(vec3.unit_x))b2[hR]=setmetatable(bO,hA)pid=cQ end;return setmetatable(b2,hK)end;b7={}local function hS(hQ)return setmetatable({galaxyAtlas=hQ or{}},b7)end;b7.__index=function(hm,i)if type(i)=='number'then local system=hm.galaxyAtlas[i]return hP(system)end;return rawget(b7,i)end;b7.__pairs=function(hx)return function(hm,bN)local hT,nv=next(hm,bN)return hT,nv and hP(nv)end,hx.galaxyAtlas,nil end;b7.__tostring=function(hx)local hU={}for _,hV in pairs(hx or{})do local hW=hV:getPlanetarySystemId()local hX=hK.__tostring(hV,'    ')table.insert(hU,d('  [%s]={%s\n  }',hW,hX))end;return d('{\n%s\n}\n',table.concat(hU,',\n'))end;b7.BodyParameters=hF;b7.MapPosition=hI;b7.PlanetarySystem=hP;function b7.createBodyParameters(hY,cD,hZ,h_,i0,i1,i2)assert(hk(hY),'Argument 1 (planetarySystemId) must be a number:'..type(hY))assert(hk(cD),'Argument 2 (bodyId) must be a number:'..type(cD))assert(hk(hZ),'Argument 3 (surfaceArea) must be a number:'..type(hZ))assert(hl(h_),'Argument 4 (aPosition) must be an array or vec3:'..type(h_))assert(hl(i0),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(i0))assert(hk(i1),'Argument 6 (altitude) must be in meters:'..type(i1))assert(hk(i2),'Argument 7 (gravityAtPosition) must be number:'..type(i2))local du=math.sqrt(hZ/4/math.pi)local ad=du+i1;local i3=vec3(h_)+ad*vec3(i0)local hG=i2*ad*ad;return hF(hY,cD,du,i3,hG)end;b7.isMapPosition=hq;function b7:getPlanetarySystem(hJ)if i==nil then i=0 end;if nv==nil then nv=0 end;local hY=hJ;if hq(hJ)then hY=hJ.systemId end;if type(hY)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=hK then system=hP(system)end;return system end end end;function hK:castIntersections(i4,dE,i5,i6)local i5=i5 or function(gf)return 1.05*gf.radius end;local i7={}if i6 then for _,i in ipairs(i6)do i7[i]=self[i]end else i6={}for bN,gf in pairs(self)do table.insert(i6,bN)i7[bN]=gf end end;local function i8(i9,ia)local ib=i7[i9].center-i4;local ic=i7[ia].center-i4;return ib:len()<ic:len()end;table.sort(i6,i8)local id=dE:normalize()for i,cQ in ipairs(i6)do local gf=i7[cQ]local ie=gf.center-i4;local du=i5(gf)local ig=ie:dot(id)local ih=ig^2-(ie:len2()-du^2)if ih>=0 then local ii=math.sqrt(ih)local gd=ig+ii;local ge=ig-ii;if ge>0 then return gf,gd,ge elseif gd>0 then return gf,gd,nil end end end;return nil,nil,nil end;function hK:closestBody(ij)assert(type(ij)=='table','Invalid coordinates.')local ik,gf;local il=vec3(ij)for _,im in pairs(self)do local io=(im.center-il):len2()if(not gf or io<ik)and im.name~="Space"then gf=im;ik=io end end;return gf end;function hK:convertToBodyIdAndWorldCoordinates(hJ)local ip=hJ;if hn(hJ)then ip=hI(hJ)end;if ip.bodyId==0 then return 0,vec3(ip.latitude,ip.longitude,ip.altitude)end;local im=self:getBodyParameters(ip)if im then return ip.bodyId,im:convertToWorldCoordinates(ip)end end;function hK:getBodyParameters(hJ)local cD=hJ;if hq(hJ)then cD=hJ.bodyId end;assert(hk(cD),'Argument 1 (bodyId) must be a number:'..type(cD))return self[cD]end;function hK:getPlanetarySystemId()local _,bO=next(self)return bO and bO.planetarySystemId end;function hA:convertToMapPosition(ct)assert(hl(ct),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ct))local cu=vec3(ct)if self.bodyId==0 then return setmetatable({latitude=cu.x,longitude=cu.y,altitude=cu.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cv=cu-self.center;local ad=cv:len()local cw=ad-self.radius;local cx=0;local cy=0;if not co(ad,0)then local cz=math.atan(cv.y,cv.x)cy=cz>=0 and cz or 2*math.pi+cz;cx=math.pi/2-math.acos(cv.z/ad)end;return setmetatable({latitude=cx,longitude=cy,altitude=cw,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function hA:convertToWorldCoordinates(hJ)local ip=hn(hJ)and hI(hJ)or hJ;if ip.bodyId==0 then return vec3(ip.latitude,ip.longitude,ip.altitude)end;assert(hq(ip),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ip.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ip.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cE=math.cos(ip.latitude)return self.center+(self.radius+ip.altitude)*vec3(cE*math.cos(ip.longitude),cE*math.sin(ip.longitude),math.sin(ip.latitude))end;function hA:getAltitude(ct)return(vec3(ct)-self.center):len()-self.radius end;function hA:getDistance(ct)return(vec3(ct)-self.center):len()end;function hA:getGravity(ct)local iq=self.center-vec3(ct)local ir=iq:len2()return self.GM/ir*iq/math.sqrt(ir)end;return setmetatable(b7,{__call=function(_,...)return hS(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function hn(ho)return type(ho)=='string'end;local function hl(hm)return type(hm)=='table'end;local function co(cp,cq)if cp==0 then return math.abs(cq)<1e-09 end;if cq==0 then return math.abs(cp)<1e-09 end;return math.abs(cp-cq)<math.max(math.abs(cp),math.abs(cq))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cw)assert(self.body)local ad=cw+self.body.radius;if not co(ad,0)then local orbit=math.sqrt(self.body.GM/ad)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(hJ,c7)assert(self.body)assert(hl(hJ)or hn(hJ))assert(hl(c7))local cA=(hn(hJ)or PlanetRef.isMapPosition(hJ))and self.body:convertToWorldCoordinates(hJ)or vec3(hJ)local bO=vec3(c7)local is=cA-self.body.center;local ic=bO:len2()local it=is:len()local iu=self.body.GM;local iv=((ic-iu/it)*is-is:dot(bO)*bO)/iu;local cp=iu/(2*iu/it-ic)local iw=iv:len()local id=iv:normalize()local ix=cp*(1-iw)local iy=cp*(1+iw)local iz=ix*id+self.body.center;local iA=iw<=1 and-iy*id+self.body.center or nil;local iB=math.sqrt(cp*iu*(1-iw*iw))local iC=iA and 2*math.pi*math.sqrt(cp^3/iu)local iD=math.acos(iv:dot(is)/(iw*it))if is:dot(bO)<0 then iD=-(iD-2*math.pi)end;local iE=math.acos((math.cos(iD)+iw)/(1+iw*math.cos(iD)))local iF=iE;if iF<0 then iF=iF+2*math.pi end;local iG=iF-iw*math.sin(iF)local iH=0;local iI=0;local iJ=0;if iC~=nil then iH=iG/(2*math.pi/iC)iI=iC-iH;iJ=iI+iC/2;if iD-math.pi>0 then iI=iH;iJ=iI+iC/2 end;if iJ>iC then iJ=iJ-iC end end;return{periapsis={position=iz,speed=iB/ix,circularOrbitSpeed=math.sqrt(iu/ix),altitude=ix-self.body.radius},apoapsis=iA and{position=iA,speed=iB/iy,circularOrbitSpeed=math.sqrt(iu/iy),altitude=iy-self.body.radius},currentVelocity=bO,currentPosition=cA,eccentricity=iw,period=iC,eccentricAnomaly=iE,meanAnomaly=iG,timeToPeriapsis=iI,timeToApoapsis=iJ}end;local function iK(iL)local im=PlanetRef.BodyParameters(iL.planetarySystemId,iL.bodyId,iL.radius,iL.center,iL.GM)return setmetatable({body=im},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iK(...)end})end;function Kinematics()local b9={}local iM=30000000/3600;local iN=iM*iM;local iO=100;local function iP(bO)return 1/math.sqrt(1-bO*bO/iN)end;function b9.computeAccelerationTime(iQ,iR,iS)local iT=iM*math.asin(iQ/iM)return(iM*math.asin(iS/iM)-iT)/iR end;function b9.computeDistanceAndTime(iQ,iS,iU,iV,iW,iX)iW=iW or 0;iX=iX or 0;local iY=iQ<=iS;local iZ=iV*(iY and 1 or-1)/iU;local i_=-iX/iU;local j0=iZ+i_;if iY and j0<=0 or not iY and j0>=0 then return-1,-1 end;local j1,j2=0,0;if iZ~=0 and iW>0 then local iT=math.asin(iQ/iM)local j3=math.pi*(iZ/2+i_)local j4=iZ*iW;local j5=iM*math.pi;local bO=function(hm)local e3=(j3*hm-j4*math.sin(math.pi*hm/2/iW)+j5*iT)/j5;local j6=math.tan(e3)return iM*j6/math.sqrt(j6*j6+1)end;local j7=iY and function(ho)return ho>=iS end or function(ho)return ho<=iS end;j2=2*iW;if j7(bO(j2))then local j8=0;while math.abs(j2-j8)>0.5 do local hm=(j2+j8)/2;if j7(bO(hm))then j2=hm else j8=hm end end end;local j9=iQ;local ja=j2/iO;for jb=1,iO do local c8=bO(jb*ja)j1=j1+(c8+j9)*ja/2;j9=c8 end;if j2<2*iW then return j1,j2 end;iQ=j9 end;local iT=iM*math.asin(iQ/iM)local bD=(iM*math.asin(iS/iM)-iT)/j0;local jc=iN*math.cos(iT/iM)/j0;local ad=jc-iN*math.cos((j0*bD+iT)/iM)/j0;return ad+j1,bD+j2 end;function b9.computeTravelTime(iQ,iR,ad)if ad==0 then return 0 end;if iR>0 then local iT=iM*math.asin(iQ/iM)local jc=iN*math.cos(iT/iM)/iR;return(iM*math.acos(iR*(jc-ad)/iN)-iT)/iR end;if iQ==0 then return-1 end;assert(iQ>0,'Acceleration and initial speed are both zero.')return ad/iQ end;function b9.lorentz(bO)return iP(bO)end;return b9 end;function SaveDataBank(jd)if dbHud_1 then if not a8 then for bN,bO in pairs(b)do dbHud_1.setStringValue(bO,f(_G[bO]))if jd and dbHud_2 then dbHud_2.setStringValue(bO,f(_G[bO]))end end;for bN,bO in pairs(a)do dbHud_1.setStringValue(bO,f(_G[bO]))if jd and dbHud_2 then dbHud_2.setStringValue(bO,f(_G[bO]))end end;system.print("Saved Variables to Datacore")if jd and dbHud_2 then X="Databank copied.  Remove copy when ready."end end end end;function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()d9()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ao>0 or ao==0 and ap<10000)then for _,bO in pairs(door)do bO.toggle()end end;if switch then for _,bO in pairs(switch)do bO.toggle()end end;if forcefield and(ao>0 or ao==0 and ap<10000)then for _,bO in pairs(forcefield)do bO.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(je)if je=="tenthSecond"then if ao>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then B=1;Nav.control.cancelCurrentControlMasterMode()F=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then cV()end;if AutopilotTargetName~=nil then local jf=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if jf and not Autopilot then ad=(bK-CustomTarget.position):len()else ad=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a1,a2=dP(bI)a3,a4=dP(MaxGameVelocity)else a1,a2=dQ(bI)a3,a4=dQ(MaxGameVelocity)end;local ez,cM=cJ(ad)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..ez..'", "unit":"'..cM..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')ez,cM=cJ(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ez..'", "unit":"'..cM..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a2)..'", "unit":""}')ez,cM=cJ(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ez..'", "unit":"'..cM..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')ez,cM=cJ(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",ez)..'", "unit":"'..cM..'"}')if ao>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else cW()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif je=="oneSecond"then al=false;c4(nil,true)updateDistance()updateRadar()updateWeapons()local cS={}local eI=GetFlightStyle()DrawOdometer(cS,a6,TotalDistanceTravelled,eI,a7)if ShouldCheckDamage then CheckDamage(cS)end;af=table.concat(cS,"")collectgarbage("collect")elseif je=="fiveSecond"then am=dbHud_1.getStringValue("SPBAutopilotTargetName")if am~=nil and am~=""and am~="SatNavNotChanged"then local bP=json.decode(dbHud_1.getStringValue("SavedLocations"))if bP~=nil then _G["SavedLocations"]=bP;local di=-1;local cH;for bN,bO in pairs(SavedLocations)do if bO.name and bO.name=="SatNav Location"then di=bN;break end end;if di~=-1 then cH=SavedLocations[di]di=-1;for bN,bO in pairs(b2[0])do if bO.name and bO.name=="SatNav Location"then di=bN;break end end;if di>-1 then b2[0][di]=cH end;UpdateAtlasLocationsList()X=cH.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==am then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)d9()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif je=="msgTick"then local cS={}DisplayMessage(cS,"empty")X="empty"unit.stopTimer("msgTick")ac=3 elseif je=="animateTick"then bd=true;bc=false;aa=0;ab=0;unit.stopTimer("animateTick")elseif je=="hudTick"then local cS={}eX(cS)if showHud then eJ(cS)else DisplayOrbitScreen(cS)DrawWarnings(cS)end;HUDEpilogue(cS)cS[#cS+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if X~="empty"then DisplayMessage(cS,X)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then cR(cS)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cS)if screen_1.getMouseState()==1 then CheckButtons()end;cS[#cS+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)elseif system.isViewLocked()==0 then if n()==1 and W then SetButtonContains()DrawButtons(cS)if not bc and not bd then local jg=table.concat(cS,"")cS={}cS[#cS+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cS[#cS+1]=b3;cS[#cS+1]=jg;cS[#cS+1]="</body>"bc=true;cS[#cS+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cS,"")system.setScreen(content)elseif bd then local jg=table.concat(cS,"")cS={}cS[#cS+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cS[#cS+1]=b3;cS[#cS+1]=jg;cS[#cS+1]="</body>"end;if not bc then cS[#cS+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end else CheckButtons()end else if not W and n()==0 then CheckButtons()if ad>DeadZone then if DisplayDeadZone then DrawCursorLine(cS)end end else SetButtonContains()DrawButtons(cS)end;cS[#cS+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end;cS[#cS+1]=[[</svg></body>]]content=table.concat(cS,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif je=="apTick"then an=h()>0;ao=h()bD=r()local jh=bD-bj;bj=bD;local eK=getRoll(bJ,bF,bG)local eL=eK/180*math.pi;local eM=math.cos(eL)local eN=math.sin(eL)local d7=getPitch(bJ,bF,bG)local ji=getPitch(bJ,bF,bG*eM+bE*eN)local jj=-math.deg(dn(bE,bH,bF))local jk=math.deg(dn(bG,bH,bF))bi=an and jj<-YawStallAngle or jj>YawStallAngle or jk<-PitchStallAngle or jk>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not W then bh=-bh end;Q=0;U=0;P=0;sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)ap=core.getAltitude()if ap==0 then ap=(bK-planet.center):len()-planet.radius end;ak=d0()local c5=planet:getGravity(core.getConstructWorldPos()):len()*m()bk=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not an then z,A,_,_=ds(bK)else z=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then aa=screen_1.getMouseX()*ResolutionX;ab=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if n()==1 and W then if not bc then aa=aa+bg;ab=ab+bh end else aa=0;ab=0 end else aa=aa+bg;ab=ab+bh;ad=math.sqrt(aa*aa+ab*ab)if not W and n()==0 then if userControlScheme=="virtual joystick"then if aa>0 and aa>DeadZone then Q=Q-(aa-DeadZone)*MouseXSensitivity elseif aa<0 and aa<DeadZone*-1 then Q=Q-(aa+DeadZone)*MouseXSensitivity else Q=0 end;if ab>0 and ab>DeadZone then P=P-(ab-DeadZone)*MouseYSensitivity elseif ab<0 and ab<DeadZone*-1 then P=P-(ab+DeadZone)*MouseYSensitivity else P=0 end elseif userControlScheme=="mouse"then aa=0;ab=0;P=(-utils.smoothstep(bh,-100,100)+0.5)*2*L;Q=(-utils.smoothstep(bg,-100,100)+0.5)*2*M else aa=0;ab=0 end end end;local jl=bI>8334;if bI>SpaceSpeedLimit/3.6 and not an and not Autopilot and not jl then X="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end;if not jl and LastIsWarping then if not BrakeIsOn then dB()end;if Autopilot then de()end end;LastIsWarping=jl;if an and ao>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bI<bn/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then T=1 else T=0 end;if ProgradeIsOn then if ah then BrakeIsOn=false;local jm=false;if CustomTarget~=nil then jm=dF(CustomTarget.position-bK,0.01)else jm=dF(vec3(bH),0.01)end;be=true;if jm and(math.abs(eK)<2 or math.abs(ji)>85)and bI>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dM()elseif an and AtmoSpeedAssist then bZ(1)else c1(math.floor(bn))B=0 end elseif bI>J then dF(vec3(bH),0.01)end end;if RetrogradeIsOn then if an then RetrogradeIsOn=false elseif bI>J then dF(-vec3(bH))end end;if not ProgradeIsOn and ah then if ao==0 then K=true;dM()ah=false;aj=true else ah=false;de()end end;local dd=bJ*-1;local fe=bH.x*dd.x+bH.y*dd.y+bH.z*dd.z;if aj and CustomTarget~=nil and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bI*3.6>bn-100 and math.abs(fe)<20 and ao>=0.1 and(CustomTarget.position-bK):len()>2000+ap then de()aj=false end;if VertTakeOff then be=true;if fe<-30 then X="Unable to achieve lift. Safety Landing."a9=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if ap<antigrav.getBaseAltitude()-100 then bo=0;a9=15;BrakeIsOn=false elseif fe>0 then BrakeIsOn=true;a9=0 elseif fe<-30 then BrakeIsOn=true;a9=15 elseif ap>=antigrav.getBaseAltitude()then BrakeIsOn=true;a9=0;VertTakeOff=false;X="Takeoff complete. Singularity engaged"end else if ao>0.08 then bo=0;BrakeIsOn=false;a9=20 elseif ao<0.08 and ao>0 then BrakeIsOn=false;if bA then bo=0;a9=20 else a9=0;bo=36;c1(3500)end else be=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jn=utils.clamp(bo-ji,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jn)local jo=utils.clamp(vTpitchPID:get(),-1,1)P=jo end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=a5 else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.noAtmosphericDensityAltitude)else bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.surfaceMaxAltitude)end;bv=true end;if AltitudeHold or VectorToTarget then if not ai then bw=s(HoldAltitude,1)bs=true;AltitudeHold=false end;if VectorToTarget then bu.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jp,jq=cJ(bw,2)local jr=jp..jq;local js,jt=bb(bx):escapeAndOrbitalSpeed((bK-bx.center):len()-bx.radius)local ju=eK;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ap>bw*0.9 and ap<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;B=0;bZ(0)by=true;bq=0;if bu.VectorToTarget then local dJ=CustomTarget.position-bK;local a1,_=b9.computeDistanceAndTime(bI,bn/3.6,m(),0,0,LastMaxBrake)if bH:normalize():dot(dJ:normalize())>0.5 and dJ:len()>15000+a1+ap then bp="Orbiting to Target"else X="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;K=true;aj=true;dM()bu.VectorToTarget=false end end;if not bu.VectorToTarget then bp=nil;bt=false;bv=false;bx=nil;be=autoRollPreference;if not aj then X="Orbit established"end;bu.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;by=false;bC=0 end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..jr;bt=true;c1(jt*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jv=fe;local jw=ap-bw;local jx=math.abs(jw)if fe<10 and math.abs(ji)<10 and jx<100 then jv=fe*2 end;if jv<10 and math.abs(ji)<10 and jx<100 then jv=jv*2 end;if jv<5 and math.abs(ji)<5 and jx<100 then jv=jv*4 end;VSpdPID:inject(jv)bq=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jw)bq=utils.clamp(bq-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jy=2.75;local jz=math.abs(q(js*jy))local jA=jz%50;if jA>0 then jz=jz-jA+50 end;BrakeIsOn=false;if not bs then local jB=false;local jC=false;if ap<bw then bp="Aligning to orbital path - OrbitHeight: "..jr else bp="Aligning to orbital point - OrbitHeight: "..jr end;bq=0;br=0;if ji<=bq+1 and ji>=bq-1 then jB=true else jB=false end;if ju<=br+1 and ju>=br-1 then jC=true else jC=false end;if jB and jC then bq=nil;br=nil;bs=true end else if ap<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..jr;bq=utils.map(fe,200,0,-15,80)elseif ap>=bw*0.8 and ap<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..jr;jz=jz*0.75;bq=utils.map(fe,100,-100,-15,65)elseif ap>=bw*1.15 and ap<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..jr;jz=jz*0.75;if fe<0 or bt then bq=utils.map(ap,bw*1.5,bw*1.01,-30,0)else bq=utils.map(ap,bw*0.99,bw*1.5,0,30)end elseif ap>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..jr;bq=utils.map(fe,100,-100,-65,0)jz=jz*0.75 end end;c1(math.floor(jz))end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jD=bq-ji;OrbitPitchPID:inject(jD)local jE=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)P=jE end;if br~=nil then if ji<85 then local jF=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jF*0.01,0,jF*0.1)end;local jG=br-ju;OrbitRollPID:inject(jG)local jH=utils.clamp(OrbitRollPID:get(),-0.5,0.5)U=jH end end elseif CancelIntoOrbit then bv=false;bx=nil;bZ(0)CancelIntoOrbit=false end;if Autopilot and ao==0 and not ah then local jI,jJ=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jK=(CustomTarget.position-a5.center):normalize()local jL=jK:project_on_plane((a5.center-bK):normalize()):normalize()local jM=a5.center+jL*(a5.radius+AutopilotTargetOrbit)local jN=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))if(bK-jM):len()<(bK-jN):len()then jI=jM;AutopilotTargetCoords=jI else jI=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))AutopilotTargetCoords=jI end;local df=cr(a5,AutopilotTargetCoords)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)jJ=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jJ=true;TargetSet=true;AutopilotRealigned=true;jI=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jK=(bK+bH*100000-a5.center):normalize()local jL=jK:project_on_plane((a5.center-bK):normalize()):normalize()if jL:len()<1 then jK=(bK+bF*100000-a5.center):normalize()jL=jK:project_on_plane((a5.center-bK):normalize()):normalize()end;jI=a5.center+jL*(a5.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jI;TargetSet=true;jJ=true;AutopilotRealigned=true;local df=cr(a5,AutopilotTargetCoords)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)end end;AutopilotDistance=(vec3(jI)-bK):len()local gc,gd,ge=b8:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(gf)if gf.noAtmosphericDensityAltitude>0 then return gf.radius+gf.noAtmosphericDensityAltitude else return gf.radius+gf.surfaceMaxAltitude*1.5 end end)local gg=gd;if ge~=nil and gd~=nil then gg=math.min(ge,gd)end;if gg~=nil and gg<AutopilotDistance and gc.name==a5.name then AutopilotDistance=gg end;local jm=true;local jO=(a5.center-(bK+vec3(bH):normalize()*AutopilotDistance)):len()-a5.radius;local ez,cM=cJ(jO)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ez..'", "unit":"'..cM..'"}')local a1,a2;if not TurnBurn then a1,a2=dP(bI)else a1,a2=dQ(bI)end;if bI>300 and AutopilotAccelerating then local dJ=vec3(jI)-bK;local jP=utils.clamp(math.deg(dn(bE,bH:normalize(),dJ:normalize()))*bI/500,-90,90)local jQ=utils.clamp(math.deg(dn(bG,bH:normalize(),dJ:normalize()))*bI/500,-90,90)if math.abs(jP)<20 and math.abs(jQ)<20 then jP=jP*2;jQ=jQ*2 end;if math.abs(jP)<2 and math.abs(jQ)<2 then jP=jP*2;jQ=jQ*2 end;local jj=-math.deg(dn(bE,bF,bH:normalize()))local jk=-math.deg(dn(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jQ-jk)local jR=utils.clamp(apPitchPID:get(),-1,1)P=P+jR;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jP-jj)local jS=utils.clamp(apYawPID:get(),-1,1)Q=Q+jS;jJ=true;if math.abs(jP)>2 or math.abs(jQ)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jO<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(jO)end end;if not AutopilotCruising and not AutopilotBraking and not jJ then jm=dF((jI-bK):normalize())elseif TurnBurn then jm=dF(-vec3(bH):normalize())end;if AutopilotAccelerating then if not I then BrakeIsOn=false;bZ(AutopilotInterplanetaryThrottle)B=s(AutopilotInterplanetaryThrottle,2)I=true end;local gA=unit.getThrottle()if AtmoSpeedAssist then gA=B end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or gA==0 and I then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bZ(0)B=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bZ(0)B=0;I=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;T=1 end;if TurnBurn then bZ(100,true)B=1 end;local _,jt=bb(a5):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local dJ;if CustomTarget~=nil then dJ=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then X="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=jt and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bZ(0)B=0;I=false;ProgradeIsOn=true;ah=true;local df=cr(a5,AutopilotTargetCoords)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jt=bb(a5):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bI<=jt then if CustomTarget~=nil then if bH:normalize():dot(dJ:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local df=cr(a5,CustomTarget.position)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)WaypointSet=true end else X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bZ(0)B=0;I=false;ProgradeIsOn=true;ah=true;BrakeIsOn=false;local df=cr(a5,CustomTarget.position)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X="Autopilot completed, orbit established"T=0;B=0;I=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ah=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local gA=unit.getThrottle()if AtmoSpeedAssist then gA=B end;if gA>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jm then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ah then AutopilotTargetCoords=vec3(a5.center)+(AutopilotTargetOrbit+a5.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif jm then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not I then bZ(AutopilotInterplanetaryThrottle,true)B=s(AutopilotInterplanetaryThrottle,2)I=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ao>0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T=0;bZ(0)B=0;I=false;ProgradeIsOn=true;ah=true;local df=cr(a5,CustomTarget.position)df="::pos{"..df.systemId..","..df.bodyId..","..df.latitude..","..df.longitude..","..df.altitude.."}"system.setWaypoint(df)end;if V then be=true;local jQ=0;local cA=bK+vec3(unit.getMasterPlayerRelativePosition())local jT=cA-bK;local jU=vec3(jT):project_on(bF):len()local jV=vec3(jT):project_on(bG):len()local ad=math.sqrt(jU*jU+jV*jV)dF(jT:normalize())local jW=40;local jX=ad<jW;local jY=100;local h3=utils.clamp((ad-jW)/2,10,jY)P=0;local jm=math.abs(Q)<0.1;if jm and bI<h3 and not jX then BrakeIsOn=false;jQ=-20 else BrakeIsOn=true;jQ=0 end;local jZ=0;if math.abs(jQ-d7)>jZ then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jQ-d7)local jR=pitchPID:get()P=jR end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dg=unit.getClosestPlanetInfluence()>0;local j_=HoldAltitude-ap;local k0=500+bI;local k1=1;if AutoTakeoff then k1=utils.clamp(bI/100,0.1,1)end;local jQ=(utils.smoothstep(j_,-k0,k0)-0.5)*2*MaxPitch*k1;if not Reentry and not ah and not VectorToTarget and bF:dot(bH:normalize())<0.99 then jQ=(utils.smoothstep(j_,-k0*utils.clamp(20-19*ao*10,1,20),k0*utils.clamp(20-19*ao*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ao*10,1,2)*k1 end;if not AltitudeHold then jQ=0 end;if LockPitch~=nil then if dg and not IntoOrbit then jQ=LockPitch else LockPitch=nil end end;be=true;local k2=P;if Reentry then local ReentrySpeed=math.floor(bn)local k3,k4=b9.computeDistanceAndTime(bI,ReentrySpeed/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local k5=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bI<=ReentrySpeed/3.6 and bI>ReentrySpeed/3.6-10 and math.abs(bH:normalize():dot(bF))>0.9 then Nav.control.cancelCurrentControlMasterMode()B=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(k3>-1 and k5<=k3 or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;c1(ReentrySpeed,true)if not K then jQ=-80;if ao>0.02 then X="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jQ=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then c1(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bn then K=false;Reentry=false;be=true end end end;if bI>J and not ai and not VectorToTarget and not BrakeLanding and ForceAlignment then dF(vec3(bH))end;if(VectorToTarget or ai)and AutopilotTargetIndex>0 and ao>0.01 then local dJ;if CustomTarget~=nil then dJ=CustomTarget.position-bK else dJ=a5.center-bK end;local jP=math.deg(dn(bJ:normalize(),bH,dJ))*2;local k6=math.rad(math.abs(eK))if bI>minRollVelocity and ao>0.01 then local k7=utils.clamp(90-jQ*2,-90,90)bk=utils.clamp(jP*2,-k7,k7)local k8=jP;jP=utils.clamp(utils.clamp(jP,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(k6)+4*(ji-jQ)*math.sin(math.rad(eK)),-YawStallAngle*0.85,YawStallAngle*0.85)jQ=utils.clamp(utils.clamp(jQ*math.cos(k6),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(k8)*math.sin(k6),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bk=0;jP=utils.clamp(jP,-YawStallAngle*0.85,YawStallAngle*0.85)end;local k9=jj-jP;if not bi and bI>minRollVelocity and ao>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(k9)local jS=utils.clamp(yawPID:get(),-1,1)Q=Q+jS elseif an and ak>-1 or bI<minRollVelocity then dF(dJ)elseif bi and ao>0.01 then if(jj<-YawStallAngle or jj>YawStallAngle)and ao>0.01 then dF(bH)end;if(jk<-PitchStallAngle or jk>PitchStallAngle)and ao>0.01 then jQ=utils.clamp(ji-jk,ji-PitchStallAngle*0.85,ji+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ai then local ka=planet:getAltitude(CustomTarget.position)local k5=math.sqrt(dJ:len()^2-(ap-ka)^2)local kb=LastMaxBrakeInAtmo;if kb then kb=kb*utils.clamp(bI/100,0.1,1)*ao else kb=LastMaxBrake end;if ao<0.01 then kb=LastMaxBrake end;local kc=bH:len()-math.abs(fe)local kd=vec3(core.getWorldAirFrictionAcceleration())local ke=math.sqrt(kd:len()-kd:project_on(dd):len())*m()if bI>100 then a1,a2=b9.computeDistanceAndTime(bI,100,m(),0,0,kb+ke)local kf,kg=b9.computeDistanceAndTime(100,0,m(),0,0,kb/2)a1=a1+kf else a1,a2=b9.computeDistanceAndTime(bI,0,m(),0,0,kb/2)end;StrongBrakes=true;if not ai and not Reentry and k5<=a1+bI*jh/2 and(bH:project_on_plane(bJ):normalize():dot(dJ:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bZ(0)B=0;if AltitudeHold then d3()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kc<0.1 or k5<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<k5)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=k5 end elseif VectorToTarget and ao==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ai or Reentry)then if CustomTarget~=nil and a5.name==planet.name then local dJ=CustomTarget.position-bK;local ka=planet:getAltitude(CustomTarget.position)local k5=math.sqrt(dJ:len()^2-(ap-ka)^2)local kb=LastMaxBrakeInAtmo;if not by then bv=false;IntoOrbit=true else kb=LastMaxBrake;a1,a2=b9.computeDistanceAndTime(bI,0,m(),0,0,kb/2)StrongBrakes=true;if k5<=a1+bI*jh/2 and bH:project_on_plane(bJ):normalize():dot(dJ:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dM()end end;LastDistanceToTarget=k5 end end end;if ao==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ai or VectorToTarget or IntoOrbit or Reentry)then if not by then IntoOrbit=true end end;if bi and ao>0.01 and ak==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then dF(bH)jQ=utils.clamp(ji-jk,ji-PitchStallAngle*0.85,ji+PitchStallAngle*0.85)end;P=k2;local gH=-1;if BrakeLanding then jQ=0;local kh=false;local ki=30;if ba~=nil and ba>0 then local ke=0;local f3=utils.clamp(ao,0.4,2)local kb=LastMaxBrakeInAtmo*utils.clamp(bI/100,0.1,1)*f3;local kj=ba*f3+kb+ke-c5;local kk=kb/2+ke-c5;local kl=bI-math.sqrt(math.abs(kk/2)*20/(0.5*m()))*utils.sign(kk)if kl<0 then kl=0 end;local km;if bI>100 then local kn,_=b9.computeDistanceAndTime(bI,100,m(),0,0,kb)local ko,_=b9.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kb))km=kn+ko else km=b9.computeDistanceAndTime(bI,0,m(),0,0,math.sqrt(kb))end;if km<20 then BrakeIsOn=false else local kp=0;if kl>100 then local kq,_=b9.computeDistanceAndTime(kl,100,m(),0,0,kj)local kr,_=b9.computeDistanceAndTime(100,0,m(),0,0,ba*f3+math.sqrt(kb)+ke-c5)kp=kq+kr else kp,_=b9.computeDistanceAndTime(kl,0,m(),0,0,ba*f3+math.sqrt(kb)+ke-c5)end;kp=(kp+15+bI*jh)*1.1;local ks=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if ks then local ka=planet:getAltitude(CustomTarget.position)local kt=ap-ka-100;local dJ=CustomTarget.position-bK;local ku=math.sqrt(dJ:len()^2-(ap-ka)^2)if ku>100 then ks=false elseif kt<=kp or kp==-1 then BrakeIsOn=true;kh=true else BrakeIsOn=false;kh=true end end;if not ks and CalculateBrakeLandingSpeed then if kp>=ki then BrakeIsOn=true else BrakeIsOn=false end;kh=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)gH=ak;if gH>-1 then be=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a9=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-dd)<0.999 then BrakeIsOn=true elseif fe<-brakeLandingRate and not kh then BrakeIsOn=true elseif not kh then BrakeIsOn=false end end;if AutoTakeoff or ai then local gc,ge,gd;if AutopilotTargetCoords~=nil then gc,ge,gd=b8:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(gf)return gf.radius+gf.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if ap>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bZ(0)B=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jQ)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not ai then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ai and bI<J then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;bZ(0)B=0 elseif ai then bZ(0)B=0;BrakeIsOn=true end elseif ai and ao==0 and a5~=nil and(gc==nil or gc.name==a5.name)then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kv=d0()>-1;local kw=d7;if(VectorToTarget or ai)and not kv and bI>minRollVelocity and ao>0.01 then local k6=math.rad(math.abs(eK))kw=d7*math.abs(math.cos(k6))+jk*math.sin(k6)end;local kx=utils.clamp(jQ-kw,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ao<0.01 and VectorToTarget then kx=utils.clamp(jQ-kw,-85,MaxPitch)elseif ao<0.01 then kx=utils.clamp(jQ-kw,-MaxPitch,MaxPitch)end;if math.abs(eK)<5 or VectorToTarget or BrakeLanding or kv or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kx)local jR=pitchPID:get()P=P+jR end end;if antigrav~=nil and(antigrav and not ExternalAGG and ap<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and F then B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)F=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not F then B=0;F=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local ky=utils.clamp(O+P+system.getControlDeviceForwardInput(),-1,1)local kz=utils.clamp(R+U+system.getControlDeviceYawInput(),-1,1)local kA=utils.clamp(S+Q-system.getControlDeviceLeftRightInput(),-1,1)local kB=T;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()local kC=bH:normalize()local kD=getRoll(bJ,bF,bG)local kE=math.abs(kD)local kF=utils.sign(kD)local kG=vec3(core.getWorldAngularVelocity())local kH=ky*pitchSpeedFactor*bG+kz*rollSpeedFactor*bF+kA*yawSpeedFactor*bE;if bJ:len()>0.01 and(ao>0.0 or ProgradeIsOn or Reentry or ah or AltitudeHold)then local eK=getRoll(bJ,bF,bG)local eL=eK/180*math.pi;local eM=math.cos(eL)local eN=math.sin(eL)local ji=getPitch(bJ,bF,bG*eM+bE*eN)if be==true and math.abs(bk-kD)>autoRollRollThreshold and kz==0 and math.abs(ji)<85 then local kI=bk;local jF=autoRollFactor;if ao==0 then jF=jF/4;bk=0;kI=0 end;if rollPID==nil then rollPID=pid.new(jF*0.01,0,jF*0.1)end;rollPID:inject(kI-kD)local kJ=rollPID:get()kH=kH+kJ*bF end end;if bJ:len()>0.01 and ao>0.0 then local kK=20.0;if turnAssist==true and kE>kK and ky==0 and kA==0 then local kL=turnAssistFactor*0.1;local kM=turnAssistFactor*0.025;local kN=(kE-kK)/(180-kK)*180;local kO=0;if kN<90 then kO=kN/90 elseif kN<180 then kO=(180-kN)/90 end;kO=kO*kO;local kP=-kF*kM*(1.0-kO)local kQ=kL*kO;kH=kH+kQ*bG+kP*bE end end;local kR=1;local kS=0;local kT=1;if system.getMouseWheel()>0 then if AltIsOn then if ao>0 or Reentry then bn=utils.clamp(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ao>0 or Reentry then bn=utils.clamp(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B-speedChangeLarge/100,-1,1),2)end end;C=0;local fe=-bJ:dot(bH)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local kU=throttlePID:get()E=utils.clamp(kU,-1,1)if E<B and ao>0.005 then D=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(E,0.01,1))else D=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local kV=utils.clamp(brakePID:get(),0,1)if ao>0 and fe<-80 or ao>0.005 then C=kV end;if C>0 then if D and E==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else E=utils.clamp(E,0.01,1)end;local kW=''local kX=vec3()local kY=h1(axisCommandId.vertical,a9*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kY,kS)local kZ='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kZ=kZ..ExtraLongitudeTags end;local k_=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local l0=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kZ,axisCommandId.longitudinal)local l1=hf(axisCommandId.lateral,LeftAmount*1000)kW=kW..' , '.."lateral airfoil , lateral ground "kX=kX+l1;if kX:len()>constants.epsilon then Nav:setEngineForceCommand(kW,kX,kS,'','','',kT)end;Nav:setEngineForceCommand(kZ,l0,kR)local l2='thrust analog vertical fueled 'local l3='thrust analog lateral fueled 'if ExtraLateralTags~="none"then l3=l3 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then l2=l2 ..ExtraVerticalTags end;if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l2,kY,kR)else Nav:setEngineForceCommand(l2,vec3(),kR)end;if LeftAmount~=0 then Nav:setEngineForceCommand(l3,l1,kR)else Nav:setEngineForceCommand(l3,vec3(),kR)end;if kB==0 then kB=C end;local l4=-kB*(brakeSpeedFactor*bH+brakeFlatFactor*kC)Nav:setEngineForceCommand('brake',l4)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;local h3=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-h3/3.6)local kV=utils.clamp(brakePID:get(),0,1)kB=utils.clamp(kB+kV,0,1)end;local l4=-kB*(brakeSpeedFactor*bH+brakeFlatFactor*kC)Nav:setEngineForceCommand('brake',l4)local kW=''local kX=vec3()local l5=false;local kZ='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kZ=kZ..ExtraLongitudeTags end;local k_=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if k_==axisCommandType.byThrottle then local l0=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kZ,axisCommandId.longitudinal)Nav:setEngineForceCommand(kZ,l0,kR)elseif k_==axisCommandType.byTargetSpeed then local l0=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kW=kW..' , '..kZ;kX=kX+l0;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then l5=true end end;local l3='thrust analog lateral 'if ExtraLateralTags~="none"then l3=l3 ..ExtraLateralTags end;local l6=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if l6==axisCommandType.byThrottle then local l7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l3,axisCommandId.lateral)Nav:setEngineForceCommand(l3,l7,kR)elseif l6==axisCommandType.byTargetSpeed then local l1=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kW=kW..' , '..l3;kX=kX+l1 end;local l2='thrust analog vertical 'if ExtraVerticalTags~="none"then l2=l2 ..ExtraVerticalTags end;local l8=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if l8==axisCommandType.byThrottle then local kY=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l2,axisCommandId.vertical)if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l2,kY,kR,'airfoil','ground','',kT)else Nav:setEngineForceCommand(l2,vec3(),kR)Nav:setEngineForceCommand('airfoil vertical',kY,kR,'airfoil','','',kT)Nav:setEngineForceCommand('ground vertical',kY,kR,'ground','','',kT)end elseif l8==axisCommandType.byTargetSpeed then if a9<0 then Nav:setEngineForceCommand('hover',vec3(),kR)end;local l9=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kW=kW..' , '..l2;kX=kX+l9 end;if kX:len()>constants.epsilon then if T~=0 or l5 or math.abs(kC:dot(bF))<0.8 then kW=kW..', brake'end;Nav:setEngineForceCommand(kW,kX,kS,'','','',kT)end end;local la=torqueFactor*(kH-kG)local lb=vec3(core.getWorldAirFrictionAngularAcceleration())la=la-lb;Nav:setEngineTorqueCommand('torque',la,kR,'airfoil','','',kT)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local c8=vec3(core.getVelocity()):len()local lc=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ld=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c8*3.6>ld*(1-lc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c8*3.6<ld*(1-lc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local gA=unit.getThrottle()if AtmoSpeedAssist then gA=B*100 end;local h3=gA/100;if h==0 then h3=h3*MaxGameVelocity;if c8>=h3*(1-lc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c8<h3*(1-lc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else h3=h3*ReentrySpeed/3.6;if c8>=h3*(1-lc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c8<h3*(1-lc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bP=coroutine.resume(beginSetup)if bP then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(le)if le=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0;if(vBooster or hover)and ak==-1 and(ao>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if N and not BrakeLanding then Nav.control.extendLandingGears()end else if N then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif le=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif le=="forward"then O=O-1 elseif le=="backward"then O=O+1 elseif le=="left"then R=R-1 elseif le=="right"then R=R+1 elseif le=="yawright"then S=S-1 elseif le=="yawleft"then S=S+1 elseif le=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif le=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif le=="up"then a9=a9+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif le=="down"then a9=a9-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif le=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif le=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif le=="option1"then dc()elseif le=="option2"then dc(1)elseif le=="option3"then if n()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif le=="option4"then de()elseif le=="option5"then ToggleLockPitch()elseif le=="option6"then d3()elseif le=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;cU()elseif le=="option8"then d8()elseif le=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end elseif le=="lshift"then if system.isViewLocked()==1 then W=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then W=true;bd=false;bc=false end elseif le=="brake"then if BrakeToggleStatus then dB()elseif not BrakeIsOn then dB()else BrakeIsOn=true end elseif le=="lalt"then AltIsOn=true elseif le=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif le=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()B=0 elseif le=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else dc()end elseif le=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else dc(1)end elseif le=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(le)if le=="forward"then O=0 elseif le=="backward"then O=0 elseif le=="left"then R=0 elseif le=="right"then R=0 elseif le=="yawright"then S=0 elseif le=="yawleft"then S=0 elseif le=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif le=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif le=="up"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif le=="down"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif le=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif le=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif le=="lshift"then if system.isViewLocked()==1 then W=false;aa=0;ab=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then W=false;bd=false;bc=false end elseif le=="brake"then if not BrakeToggleStatus then if BrakeIsOn then dB()else BrakeIsOn=false end end elseif le=="lalt"then AltIsOn=false end end;function script.onActionLoop(le)if le=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif le=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif le=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif le=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dN)local i;local lf="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local lg,lh=nil,nil;local li="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dN," ")lg=dN;if i~=nil then lg=string.sub(dN,0,i-1)lh=string.sub(dN,i+1)elseif not string.find(lf,lg)then for gZ in string.gmatch(li,"([^\n]+)")do system.print(gZ)end;return end;if lg=="/setname"then if lh==nil or lh==""then X="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(lh)else X="Select a saved target to rename first"end elseif lg=="/addlocation"then if lh==nil or lh==""or string.find(lh,"::")==nil then X="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(lh,"::")local cG=string.sub(lh,1,i-2)local cA=string.sub(lh,i)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cB='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cC,cD,cx,cy,cw=p(cA,cB)local planet=b2[tonumber(cC)][tonumber(cD)]AddNewLocationByWaypoint(cG,planet,cA)X="Added "..cG.." to saved locations,\nplanet "..planet.name.." at "..cA;ac=5 elseif lg=="/agg"then if lh==nil or lh==""then X="Usage: /agg targetheight"return end;lh=tonumber(lh)if lh<1000 then lh=1000 end;AntigravTargetAltitude=lh;X="AGG Target Height set to "..lh elseif lg=="/G"then if lh==nil or lh==""then X="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if lh=="dump"then for bN,bO in pairs(a)do if type(_G[bO])=="boolean"then if _G[bO]==true then system.print(bO.." true")else system.print(bO.." false")end elseif _G[bO]==nil then system.print(bO.." nil")else system.print(bO.." ".._G[bO])end end;return end;i=string.find(lh," ")local lj=string.sub(lh,0,i-1)local lk=string.sub(lh,i+1)for bN,bO in pairs(a)do if bO==lj then X="Variable "..lj.." changed to "..lk;local ll=type(_G[bO])if ll=="number"then lk=tonumber(lk)elseif ll=="boolean"then if string.lower(lk)=="true"then lk=true else lk=false end end;_G[bO]=lk;return end end;X="No such global variable: "..lj elseif lg=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else X="Spare Databank required to copy databank"end elseif lg=="/wipedatabank"then if dbHud_1 then wipeSaveVariables()else X="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
