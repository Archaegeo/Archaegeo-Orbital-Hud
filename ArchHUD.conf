name: ArchHud - Archaegeo v1.136 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.136;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=core.getConstructMass;local m=Nav.control.isRemoteControlled;local n=math.atan;local o=string.match;local tostring=tostring;local p=utils.round;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=Nav.axisCommandManager;local t=system.setWaypoint;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=false;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=false;local ar=""local as=j()>0;local at=j()local au=core.getAltitude()local av=core.getElementIdList()local aw=q()local ax=nil;local ay=false;local az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]local aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH=ResolutionX;local aI=ResolutionY;local aJ=false;local aK=false;local aL=0;local aM=nil;local aN={}local aO={}local aP={}local aQ=0;local aR=false;local aS={}local aT={}local aU=d(1/apTickRate)*2;local aV={}local aW={}local aX={}local aY={}local aZ=false;local a_=16;local b0=0;local b1=nil;local b2=""local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=q()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=q()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=vec3(core.getConstructWorldPos())local bL=false;local bM=false;local bN=nil;local bO=true;local bP=0;local bQ=0;local function bR(bS,bT)if bT==nil then bT=false end;if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not bT then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,bS)I=r(z(bS*100,0)/100,-1,1)end;local function bU(bS,bT)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bT then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,bS)bN=bS end;local function bV(bW,bX)if bW==nil then bW=core.g()end;bW=z(bW,5)if bX~=nil and bX or(aM==nil or aM~=bW)then local bY=core.getVelocity()local bZ=vec3(bY):len()local b_=f(unit.getData()).maxBrake;if b_~=nil and b_>0 and as then b_=b_/r(bZ/100,0.1,1)b_=b_/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+b_)/2 else LastMaxBrakeInAtmo=b_ end end end;if b_~=nil and b_>0 then LastMaxBrake=b_ end;aM=bW end end;local function c0()AtlasOrdered={}for c1,c2 in pairs(b1[0])do table.insert(AtlasOrdered,{name=c2.name,index=c1})end;local function c3(c4,c5)return c4.name<c5.name end;table.sort(AtlasOrdered,c3)end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function c9(ca,cb)local cc=vec3(cb)if ca.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=ca.planetarySystemId},MapPosition)end;local cd=cc-ca.center;local ai=cd:len()local ce=ai-ca.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=math.deg(cf),longitude=math.deg(cg),altitude=ce,bodyId=ca.bodyId,systemId=ca.planetarySystemId},MapPosition)end;local function ci(ai,cj)local ck=ai>100000;local cl,cm=""if cj==nil then cj=1 end;if ck then cl,cm=z(ai/1000/200,cj),"SU"elseif ai<1000 then cl,cm=z(ai,cj),"M"else cl,cm=z(ai/1000,cj),"KM"end;return cl,cm end;local function cn(co)for c1,c2 in pairs(co)do if c2.name and c2.name==CustomTarget.name then return c1 end end;return-1 end;local function cp()if radarPanelID~=nil and al==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if al==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function ct()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;be=true;ae=0;if as and ap==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bU(d(bn))end else VertTakeOff=true;AltitudeHold=false;by=false;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cu()by=false;bq=nil;br=nil;bC=0;if at==0 then if IntoOrbit then IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;be=true;if bx==nil then bx=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false end end;local function cv()if bD-bl<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;bw=HoldAltitude;bv=true;if not IntoOrbit then cu()end;bs=true end end;bl=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bl=bD end;if unit.getClosestPlanetInfluence()>0 and at==0 then bw=au;bv=true;bs=true;cu()if IntoOrbit then bl=bD else bl=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;be=true;LockPitch=nil;by=false;if ap==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if VertTakeOff then ct()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bL then ct()end end;if an then HoldAltitude=100000 end else if IntoOrbit then cu()end;if VertTakeOff then ct()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bl=0 end end;local function cw()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function cx()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local cy=AtlasOrdered[AutopilotTargetIndex].index;local cz=b1[0][cy]if cz.center then AutopilotTargetName=cz.name;aa=b7[0][cy]if CustomTarget~=nil then if at==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cz;for _,c2 in pairs(b7[0])do if c2.name==CustomTarget.planetname then aa=c2;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cA(cB)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if cB==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cx()else local cy=AtlasOrdered[AutopilotTargetIndex].index;local cz=b1[0][cy]if cz.name=="Space"then if cB==nil then cA()else cA(1)end else cx()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cC()local function cD(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cv()end end;VectorStatus="Proceeding to Waypoint"end;if bD-bm<1.5 and at>0 then if not bB then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an then cx()local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if at~=0 then an=true;cv()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then if not VectorToTarget then cD(SpaceTarget)end else if au>AutopilotTargetOrbit*1.5 or au==0 then by=false;Autopilot=true elseif not as then if IntoOrbit then cu()end;bw=planet.noAtmosphericDensityAltitude+1000;bv=true;bu.AutopilotAlign=true;bu.VectorToTarget=true;bs=false;if not IntoOrbit then cu()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then an=true;cv()else Autopilot=true end end elseif at==0 then local cF=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(aa.name==planet.name and cF)and not IntoOrbit then by=false;bs=false;cu()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else an=true;cv()end else an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then cu()end end end;local function cG(cH)local cI=-1;local cJ;cI=cn(SavedLocations)if cI~=-1 then local cK;if cH~=nil then cJ={position=SavedLocations[cI].position,name=cH,atmosphere=SavedLocations[cI].atmosphere,planetname=SavedLocations[cI].planetname,gravity=SavedLocations[cI].gravity}else cJ={position=bK,name=SavedLocations[cI].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cI]=cJ;cI=-1;cI=cn(b1[0])if cI>-1 then b1[0][cI]=cJ end;c0()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cx()else a2="Name Not Found"end end;local function cL(cM,cN,cO)cN=cN:project_on_plane(cM)cO=cO:project_on_plane(cM)return n(cN:cross(cO):dot(cM),cN:dot(cO))end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function cP()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then ct()end;if IntoOrbit then cu()end;LockPitch=nil;be=autoRollPreference;am=false;ao=false;ae=0 end end;local function cQ(cR,cS)cR=vec3(cR)cS=vec3(cS):normalize()local cl=cR*cS;return cl.x+cl.y+cl.z end;local function cT(cR,cU,cV)local cW=0.001;local cX=1;if not as or not bi or ap~=-1 or bI<Q then local cY=cV;if cY==nil then cY=DampingMultiplier end;if cU==nil then cU=cW end;cR=vec3(cR):normalize()local cZ=vec3()-cR;local c_=-cQ(cZ,core.getConstructWorldOrientationRight())*cX;local d0=-cQ(cZ,core.getConstructWorldOrientationUp())*cX;if aC==0 then aC=c_/2 end;if aD==0 then aD=d0/2 end;if c(c_)<0.1 then V=V-c_*2 else V=V-(c_+(c_-aC)*cY)end;if c(d0)<0.1 then U=U+d0*2 else U=U+d0+(d0-aD)*cY end;aC=c_;aD=d0;if c(c_)<cU and c(d0)<cU then return true end;return false elseif bi and ap==-1 then cR=bH;local cY=cV;if cY==nil then cY=DampingMultiplier end;if cU==nil then cU=cW end;cR=vec3(cR):normalize()local cZ=bF-cR;local c_=-cQ(cZ,core.getConstructWorldOrientationRight())*cX;local d0=-cQ(cZ,core.getConstructWorldOrientationUp())*cX;if aC==0 then aC=c_/2 end;if aD==0 then aD=d0/2 end;if c(c_)<0.1 then V=V-c_*5 else V=V-(c_+(c_-aC)*cY)end;if c(d0)<0.1 then U=U+d0*5 else U=U+d0+(d0-aD)*cY end;aC=c_;aD=d0;if c(c_)<cU and c(d0)<cU then return true end;return false end end;local function d1()if Reentry then a2="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not R then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bn end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local d2,d3=ci(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..d2 ..d3;bU(d(bn))end;AutoTakeoff=false end;local function d4(bZ)if not as then bV()return b8.computeDistanceAndTime(bZ,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b8.computeDistanceAndTime(bZ,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;local function d5(bZ)bV()return b8.computeDistanceAndTime(bZ,AutopilotEndSpeed,l(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;local function d6()if antigrav and not ExternalAGG then if bM then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function d7(d8)local d9=0;local da=0;local db=0;if d8<60 then d8=d(d8)elseif d8<3600 then d9=d(d8/60)d8=d(d8%60)elseif d8<86400 then da=d(d8/3600)d9=d(d8%3600/60)else db=d(d8/86400)da=d(d8%86400/3600)end;if db>0 then return db.."d "..da.."h "elseif da>0 then return da.."h "..d9 .."m "elseif d9>0 then return d9 .."m "..d8 .."s"elseif d8>0 then return d8 .."s"else return"0s"end end;local function dc()local dd=-1;local de=cq()if telemeter_1 then dd=telemeter_1.getDistance()end;if de~=-1 and dd~=-1 then if de<dd then return de else return dd end elseif de~=-1 then return de else return dd end end;local function df(dg)local function dh(di)for c1,c2 in pairs(di)do dbHud_1.setStringValue(c2,g(_G[c2]))if dg and dbHud_2 then dbHud_2.setStringValue(c2,g(_G[c2]))end end end;if dbHud_1 then if not ad then dh(b)dh(a)system.print("Saved Variables to Datacore")if dg and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function dj()local dk={}local function dl(c2)if aH==1920 then return c2 else return z(aH*c2/1920,0)end end;local function dm(c2)if aI==1080 then return c2 else return z(aI*c2/1080,0)end end;local function dn()return y()==0 and userControlScheme~="keyboard"and m()==0 end;local function dp()local dq=s:getAxisCommandType(0)local dr="TRAVEL"if dq==1 then dr="CRUISE"end;if Autopilot then dr="AUTOPILOT"end;return dr end;local function ds(dt,aZ,du,dv,dw,dx,dy,dz)local dA=1;local dB=2;local dC=3;local dD=4;local dE=5;local dF=6;local dG=""local dH=0;local dI=fuelY;local dJ=fuelY+10;if m()==1 and not RemoteHud then dI=dI-50;dJ=dJ-50 end;dt[#dt+1]=[[<g class="pdim txtfuel">]]if dw=="ATMO"then dG="atmofueltank"elseif dw=="SPACE"then dG="spacefueltank"else dG="rocketfueltank"end;dH=_G[dG.."_size"]if#dx>0 then for i=1,#dx do local dK=string.sub(dx[i][dB],1,12)local dL=0;for dM=1,dH do if dx[i][dB]==f(unit[dG.."_"..dM].getData()).name then dL=dM;break end end;if aZ or dy[i]==nil or dz[i]==nil then local dN=0;local dO=0;local dP=0;local dQ=0;local dR=q()if dL~=0 then dz[i]=f(unit[dG.."_"..dL].getData()).percentage;dy[i]=f(unit[dG.."_"..dL].getData()).timeLeft;if dy[i]=="n/a"then dy[i]=0 end else dP=k(dx[i][dA])-dx[i][dD]dN=dx[i][dC]dz[i]=d(0.5+dP*100/dN)dO=dx[i][dE]dQ=dx[i][dF]if dO<=dP then dy[i]=0 else dy[i]=d(0.5+dP/((dO-dP)/(dR-dQ)))end;dx[i][dE]=dP;dx[i][dF]=dR end end;if dK==dv then dK=e("%s %d",dw,i)end;if dL==0 then dK=dK.." *"end;local dS;if dy[i]==0 then dS="n/a"else dS=d7(dy[i])end;if dz[i]~=nil then local dT=d(dz[i]*2.55)local dU=e("rgb(%d,%d,%d)",255-dT,dT,0)local dV=""if dS~="n/a"and dy[i]<120 or dz[i]<5 then if aZ then dV=[[class="red"]]end end;dt[#dt+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],du,dI,dV,dK,du,dJ,dU,dz[i],dS)dI=dI+30;dJ=dJ+30 end end end;dt[#dt+1]="</g>"end;local function dW(dt,ce)if ce<200000 and not as or ce and as then local dX=-bJ:dot(bH)local dY=0;if c(dX)>1 then dY=45*math.log(c(dX),10)if dX<0 then dY=-dY end end;dt[#dt+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(dX),d(dY))end;return dt end;local function dZ(d_)local cB=-bJ;d_=d_-d_:project_on(cB)local e0=vec3(0,0,1)e0=e0-e0:project_on(cB)local e1=e0:cross(cB)local dY=e0:angle_between(d_)*constants.rad2deg;if d_:dot(e1)<0 then dY=360-dY end;return dY end;local function e2(dt,centerX,centerY,e3,e4,cF)local e5=circleRad;local e6=20;e6=d(e6)local e7=d(e3)if cF then for i=-45,45,5 do local e8=i;dt[#dt+1]=e([[<g transform="rotate(%f,%d,%d)">]],e8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dt[#dt+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e5+e6-len,centerX,centerY+e5+e6)end;dt[#dt+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+e5+e6-35,e4,centerX,centerY+e5+e6-25,e7)dt[#dt+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e3,centerX,centerY)dt[#dt+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e5+e6-20,centerX+5,centerY+e5+e6-20,centerX,centerY+e5+e6-15)dt[#dt+1]="</g>"end;local e9=e7;if cF then e9=dZ(bF)end;local ea=20;local eb=d(e9)local ec=0;local ed=centerY+e5+e6+20;local ee=centerX;if e4~="YAW"then ed=dm(130)ee=dl(960)end;local ef=[[<path class="txttick line" d="]]for i=d(eb-(ea+10)-eb%5+0.5),d(eb+ea+10+eb%5+0.5),5 do local du=ee+-i*5+e9*5;if i%10==0 then ec=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;dt[#dt+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],du+5,ed-12,A)elseif i%5==0 then ec=5 end;if ec==10 then ef=e([[%s M %f %f v %d]],ef,du,ed-5,ec)else ef=e([[%s M %f %f v %d]],ef,du,ed-2.5,ec)end end;dt[#dt+1]=ef..[["/>]]dt[#dt+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ee-5,ed+10,ee+5,ed+10,ee,ed+5)if cF then e4="HDG"end;dt[#dt+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],ee,ed+25,eb,ee,ed+35,e4)end;local function eg(dt,eh,e3,centerX,centerY,cF,ei,bZ)local e5=circleRad;local ej=d(e5*3/5)if e5>0 then local ek=d(eh)local len=0;local ef=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*e3,centerX,centerY)if not as then ef=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dt[#dt+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e5-1,centerX,centerY)dt[#dt+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ek-30-ek%5+0.5),d(ek+30+ek%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local el=centerY+-i*5+eh*5;if len==30 then ef=e([[%s M %d %f h %d]],ef,centerX-ej-len,el,len)if as then dt[#dt+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e3,centerX,centerY,centerX-ej+10,el,i)dt[#dt+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e3,centerX,centerY,centerX+ej-10,el,i)if i==0 or i==180 or i==-180 then dt[#dt+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e3,centerX,centerY,centerX-ej+20,el,ej*2-40)end else dt[#dt+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ej+10,el,i)dt[#dt+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ej-10,el,i)end;ef=e([[%s M %d %f h %d]],ef,centerX+ej,el,len)else ef=e([[%s M %d %f h %d]],ef,centerX-ej-len,el,len)ef=e([[%s M %d %f h %d]],ef,centerX+ej,el,len)end end;dt[#dt+1]=ef..[["/>]]local em="PITCH"if not cF then em="REL PITCH"end;if eh>90 and not as then eh=90-(eh-90)elseif eh<-90 and not as then eh=-90-(eh+90)end;if e5>200 then if as then if bZ>Q then dt[#dt+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ei)end;dt[#dt+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e3,centerX,centerY)else dt[#dt+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dt[#dt+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ej+25,centerY-5,centerX-ej+20,centerY,centerX-ej+25,centerY+5,centerX-ej+50,centerY+4,ek)dt[#dt+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ej-25,centerY-5,centerX+ej-20,centerY,centerX+ej-25,centerY+5,centerX+ej-30,centerY+4,ek)dt[#dt+1]="</g>"end;local en=d(e5/3)dt[#dt+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-en,centerY,e5-en)if not as and cF then dt[#dt+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e3,centerX,centerY,centerX-ej+10,centerY,ej*2-20)end;dt[#dt+1]="</g>"if e5<200 then if as and bZ>Q then dt[#dt+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e5,em,centerX,centerY-e5+10,ek,centerX,centerY-15,"Yaw",centerX,centerY+20,ei)else dt[#dt+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e5,em,centerX,centerY-e5+15,ek)end end end end;local function eo(dt,ce,cF)local ep=altMeterX;local eq=altMeterY;local er=78;local es=19;local et=dc()if et~=-1 then table.insert(dt,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],ep+er,eq+es+20,et))end;if cF and(ce<200000 and not as or ce and as)then table.insert(dt,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],ep-1,eq-4,er+2,es+6,ep+1,eq-1,er-4,es))local cI=0;local eu=1;local ev=0;local ew=ce<0;local ex=9;if ew then ex=0 end;local ce=c(ce)while cI<6 do local ey=11;local ez=16;local eA=9;local eB=14;local dV="altsm"if cI>2 then ez=ez+3;ey=ey+2;eB=eB+2;eA=eA-6;dV="altbig"end;if ew then dV=dV.." red"end;local eC=ce/eu%10;local eD=d(eC)local eE=d((eD+1)%10)local eF=ev;if cI==0 then eF=eC-eD;if ew then eF=1-eF end end;if ew and(cI==0 or ev~=0)then local eG=eE;eE=eD;eD=eG end;local eH=ez*(eF-1)local eI=eH+ez;local du=ep+eA+(6-cI)*ey;local el=eq+eB;table.insert(dt,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dV,du,el+eH,eE,du,el+eI,eD))cI=cI+1;eu=eu*10;if eD==ex then ev=eF else ev=0 end end;table.insert(dt,[[</g></g>]])end end;local function eJ(bY)bY=vec3(bY)local eK=-math.deg(n(bY.y,bY.z))+180;eK=eK-90;if eK<0 then eK=360+eK end;if eK>180 then eK=-180+eK-180 end;return-eK end;local function eL(bY)bY=vec3(bY)local e9=math.deg(n(bY.y,bY.x))-90;if e9<-180 then e9=360+e9 end;return e9 end;local function eM(dt,bY,bZ,centerX,centerY)if bZ>5 and not as or bZ>Q then local e5=circleRad;local eN=20;local eO=20;local eP=vec3(bY)local eQ=eJ(eP)local eR=eL(eP)local eS=14;local eT=eS/2;local eU=-eR/eO*e5;local eV=eQ/eN*e5;local du=centerX+eU;local el=centerY+eV;local ai=math.sqrt(eU^2+eV^2)local eW=[[<circle
                        cx="]]..du..[["
                        cy="]]..el..[["
                        r="]]..eT/eS..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..du..[["
                        cy="]]..el..[["
                        r="]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..du-eS..[[,]]..el..[[ h ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..du+eT..[[,]]..el..[[ h ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..du..[[,]]..el-eS..[[ v ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<e5 then dt[#dt+1]=eW else local dY=n(eV,eU)local eX=4;local eY=centerX+e5*math.cos(dY)local eZ=centerY+e5*math.sin(dY)dt[#dt+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dY*180/math.pi,eY,eZ,eY-eX,eZ-eX/2,eX*2,eX,eY+eX,eZ-eX,eX,eX,-eX,eX)end;if not as then eQ=eJ(-eP)eR=eL(-eP)eU=-eR/eO*e5;eV=eQ/eN*e5;du=centerX+eU;el=centerY+eV;ai=math.sqrt(eU^2+eV^2)if ai<e5 then local e_=[[<circle
                                cx="]]..du..[["
                                cy="]]..el..[["
                                r="]]..eT..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..du..[[,]]..el-eS..[[ v ]]..eT..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..du..[[,]]..el..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..du..[[,]]..el..[[)" />
                            <path
                                d="M ]]..du-eT..[[,]]..el..[[ h ]]..eS..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..du..[[,]]..el..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..du..[[,]]..el..[[)"/>]]dt[#dt+1]=e_ end end end end;local function f0(dt,dr,f1,f2)f1=d(f1+0.5)local dI=throtPosY+10;local dJ=throtPosY+20;if m()==1 and not RemoteHud then dI=55;dJ=65 end;local f3="CRUISE"local unit="km/h"local bS=f2;if dr=="TRAVEL"or dr=="AUTOPILOT"then f3="THROT"unit="%"bS=f1;local f4="dim"if f1<0 then f4="red"end;dt[#dt+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],f4,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(f1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dt[#dt+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dI,f3,throtPosX+10,dJ,bS,unit)if as and AtmoSpeedAssist and bO and K then f1=d(L*100+0.5)local f4="red"if f1<0 then f4="red"end;dt[#dt+1]=e([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],f4,1-c(f1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dt[#dt+1]=e([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dI+40,"LIMIT",throtPosX+10,dJ+40,f1,"%")end;if as and AtmoSpeedAssist or Reentry then dt[#dt+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dI-40,"LIMIT: ",bn.." km/h")elseif not as and Autopilot then dt[#dt+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dI-40,"LIMIT: ",d(MaxGameVelocity*3.6+0.5).." km/h")end end;local function f5(dt,f6)local f7=throtPosY-10;local f8=throtPosX+10;dt[#dt+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then f7=75 end;dt[#dt+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],f8,f7,d(f6))end;local function f9(dt)dt[#dt+1]=e([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],dl(1900),dm(1070),VERSION_NUMBER)dt[#dt+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dt[#dt+1]=e([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],dl(960),dm(550))dt[#dt+1]=e([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],dl(960),dm(600))dt[#dt+1]=e([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],dl(960),dm(650))end;local fa=dl(960)local fb=dm(860)local fc=dm(880)local fd=dm(900)local fe=dm(960)local ff=dm(200)local fg=dm(150)local fh=dm(960)if m()==1 and not RemoteHud then fb=dm(135)fc=dm(155)fd=dm(175)ff=dm(115)fg=dm(95)end;if BrakeIsOn then dt[#dt+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fa,fb)elseif J>0 then dt[#dt+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fa,fb,J)end;if as and bi and cq()==-1 then dt[#dt+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fa,ff+50)end;if ax then dt[#dt+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fa,fh)end;if GearExtended then if S then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fa,fc)else dt[#dt+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fa,fc)end;local fi,cm=ci(Nav:getTargetGroundAltitude())dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fa,fd,fi..cm)end;if a5 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fa,fe+20)end;if antigrav and not ExternalAGG and bM and AntigravTargetAltitude~=nil then if c(au-antigrav.getBaseAltitude())<501 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],fa,ff+15,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else dt[#dt+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fa,ff+15,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fa,ff+20,AutopilotStatus)elseif LockPitch~=nil then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fa,ff+20,d(LockPitch))elseif a0 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fa,ff+20)elseif Reentry then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fa,ff+20)end;local fj,fk,fl=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fm)if fm.noAtmosphericDensityAltitude>0 then return fm.radius+fm.noAtmosphericDensityAltitude else return fm.radius+fm.surfaceMaxAltitude*1.5 end end)local fn=fk;if fl~=nil and fk~=nil then fn=math.min(fl,fk)end;if AltitudeHold or VertTakeOff then local fi,cm=ci(HoldAltitude,2)if VertTakeOff then if bM then fi,cm=ci(antigrav.getBaseAltitude(),2)end;dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],fa,ff,fi..cm)elseif AutoTakeoff and not IntoOrbit then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],fa,ff,fi..cm)if BrakeIsOn and not VertTakeOff then dt[#dt+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fa,ff+50)end else dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fa,ff,fi..cm)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fa,ff)elseif at<0.09 and at>0.05 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fa,ff)elseif at<0.05 then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fa,ff)end end;if IntoOrbit then if bp~=nil then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff,bp)end end;if BrakeLanding then if StrongBrakes then dt[#dt+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fa,ff)else dt[#dt+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fa,ff)end end;if ProgradeIsOn then dt[#dt+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fa,ff)end;if RetrogradeIsOn then dt[#dt+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fa,ff)end;if fn~=nil and at==0 then local fi,cm=ci(fn)local travelTime=b8.computeTravelTime(bI,0,fn)local fo="Collision"if fj.noAtmosphericDensityAltitude>0 then fo="Atmosphere"end;dt[#dt+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fa,fg,fj.name,fo,d7(travelTime),fi..cm)end;if VectorToTarget and not IntoOrbit then dt[#dt+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff+35,VectorStatus)end;dt[#dt+1]="</g>"return dt end;local function fp(bZ)return d(z(bZ*3.6,0)+0.5).." km/h"end;local function fq(dt)if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fr=OrbitMapX;local fs=OrbitMapY;local ft=OrbitMapSize;local fu=4;fs=fs+fu;local fv=15;local du=fr+ft+fr/2+fu;local el=fs+ft/2+5+fu;local fw,fx,fy,fz;fw=ft/4;fz=0;dt[#dt+1]=[[<g class="pbright txtorb txtmid">]]dt[#dt+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ft+fr*2,ft+fs,fu,fu)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fy=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fw*2)fx=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fy*(1-orbit.eccentricity)fz=fw-orbit.periapsis.altitude/fy-planet.radius/fy;local fA=""if orbit.periapsis.altitude<=0 then fA='redout'end;dt[#dt+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fA,fr+ft/2+fz+fu,fs+ft/2+fu,fw,fx)dt[#dt+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fr+ft/2+fu,fs+ft/2+fu,planet.radius/fy)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dt[#dt+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],du-35,el-5,fr+ft/2+fw+fz,el-5)dt[#dt+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],du,el)el=el+fv;local fi,cm=ci(orbit.apoapsis.altitude)dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,fi..cm)el=el+fv;dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,d7(orbit.timeToApoapsis))el=el+fv;dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,fp(orbit.apoapsis.speed))end;el=fs+ft/2+5+fu;du=fr-fr/2+10+fu;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dt[#dt+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],du+35,el-5,fr+ft/2-fw+fz,el-5)dt[#dt+1]=e([[<text x="%f" y="%f">Periapsis</text>]],du,el)el=el+fv;local fi,cm=ci(orbit.periapsis.altitude)dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,fi..cm)el=el+fv;dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,d7(orbit.timeToPeriapsis))el=el+fv;dt[#dt+1]=e([[<text x="%f" y="%f">%s</text>]],du,el,fp(orbit.periapsis.speed))end;dt[#dt+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fr+ft/2+fu,20+fu,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fB=orbit.timeToApoapsis/orbit.period*2*math.pi;local fC=fw*math.cos(fB)local fD=fx*math.sin(fB)dt[#dt+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fr+ft/2+fC+fz+fu,fs+ft/2+fD+fu)end;dt[#dt+1]=[[</g>]]return dt else return dt end end;local function fE(dt)local function fF(fG,fH)for i=1,#fH do table.insert(fG,fH[i])end;return fG end;local du=50;local el=525;local fI={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fJ={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fK={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fL={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if as then fF(fI,fJ)table.insert(fI,"---------------------------------------")if VertTakeOff then table.insert(fI,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif ap~=-1 then if antigrav then if bM then table.insert(fI,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fI,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fI,"Alt-6: Begins Vertical Takeoff.")else table.insert(fI,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fI,"G: Begin BrakeLanding or Land")end else fF(fI,fK)end;if AltitudeHold then table.insert(fI,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fI,"---------------------------------------")fF(fI,fL)dt[#dt+1]=[[<g class="pdim txt txtstart">]]for i=1,#fI do el=el+10;dt[#dt+1]=e([[<text x=%d y="%d">%s</text>]],du,el,fI[i])end;dt[#dt+1]="</g>"end;function dk.HUDPrologue(dt)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local fM=az;local fN=aA;local fO=az;local fP=aA;if dn()and not brightHud then fM=[[rgb(]]..d(D*0.4+0.5)..","..d(F*0.4+0.5)..","..d(E*0.3+0.5)..[[)]]fN=[[rgb(]]..d(D*0.3+0.5)..","..d(F*0.3+0.5)..","..d(E*0.2+0.5)..[[)]]end;dt[#dt+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fM,fM,fO,fO,fN,fN,fP,fP,aH,aI)return dt end;function dk.UpdateHud(dt)local ce=au;local bY=core.getVelocity()local bZ=vec3(bY):len()local eK=bP;local fQ=bQ;local e3=fQ;local eh=bP;local f1=d(unit.getThrottle())local f6=bZ*3.6;local f2=unit.getAxisCommandValue(0)local fR=dl(1770)local fS=dm(310)if AtmoSpeedAssist and bO then f2=I;f1=I*100 end;local dr=dp()local e4="ROLL"local cF=unit.getClosestPlanetInfluence()>0;if f1==nil then f1=0 end;if not cF then if bZ>5 then eK=eJ(bY)fQ=eL(bY)else eK=0;fQ=0 end;e4="YAW"end;if H>50000 and not as then local fT;if H>200000 then fT=z(H/200000,2).." su"else fT=z(H/1000,1).." km"end;dt[#dt+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fR,fS,fT)end;dt[#dt+1]=ak;dt[#dt+1]=aE;dt[#dt+1]=aj;if b0%aU==0 then aZ=true end;if fuelX~=0 and fuelY~=0 then ds(dt,aZ,fuelX,"Atmospheric ","ATMO",aN,aX,aY)ds(dt,aZ,fuelX+100,"Space fuel t","SPACE",aO,aV,aW)ds(dt,aZ,fuelX+200,"Rocket fuel ","ROCKET",aP,aS,aT)end;if aZ then aZ=false;b0=0 end;b0=b0+1;dW(dt,ce)if m()==0 or RemoteHud then if not dn()or brightHud then if cF then e2(dt,centerX,centerY,e3,e4,cF)eg(dt,eh,e3,centerX,centerY,cF,d(eL(bY)),bZ)else e2(dt,centerX,centerY,fQ,e4,cF)eg(dt,eK,fQ,centerX,centerY,cF,d(fQ),bZ)end;eo(dt,ce,cF)eM(dt,bY,bZ,centerX,centerY)end end;f0(dt,dr,f1,f2)f5(dt,f6)f9(dt)fq(dt)if showHelp then fE(dt)end;if screen_2 then local fU=bK;local du=960+fU.x/b3;local el=450+fU.y/b4;screen_2.moveContent(b5,(du-80)/19.2,(el-80)/10.8)end;return dt end;function dk.HUDEpilogue(dt)dt[#dt+1]="</svg>"return dt end;function dk.DrawOdometer(dt,ab,TotalDistanceTravelled,ac,fV)local fW=dl(1240)local fX=dm(55)local fY=fX+10;local bW=core.g()local fZ=0;local f_=0;local g0=0;local dr=dp()if VertTakeOffEngine then dr=dr.."-VERTICAL"end;if TurnBurn then dr="TB-"..dr end;bV(bW)if as then g0=LastMaxBrakeInAtmo else g0=LastMaxBrake end;maxThrust=Nav:maxForceForward()aL=l()if not ShowOdometer then return end;local g1=vec3(core.getWorldAcceleration()):len()/9.80665;bW=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bW>0.1 then f_=aL*bW;fZ=maxThrust/bW end;dt[#dt+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then fW=dl(1120)fX=dm(55)fY=fX+10 elseif as then local g2=dl(770)dt[#dt+1]=e([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],g2,fX,g2,fY,at)end;dt[#dt+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fW,fX,fW,fY,bW/9.80665,fW,fX+20,fW,fY+20,g1)dt[#dt+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],dl(660),dl(700),dm(35),dl(960),dm(55),dl(1240),dm(35),dl(1280))if m()==0 or RemoteHud then dt[#dt+1]=e([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],dl(700),dm(20),ab,dl(700),dm(30),TotalDistanceTravelled/1000,dl(830),dm(20),d7(ac),dl(830),dm(30),d7(TotalFlightTime),dl(970),dm(20),aL/1000,dl(1240),dm(10),g0/1000,dl(1240),dm(30),maxThrust/1000,dl(960),dm(180),dr)if bW>0.1 then dt[#dt+1]=e([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],dl(970),dm(30),fZ/1000,dl(1240),dm(20),f_/1000)else dt[#dt+1]=e([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],dl(970),dm(30),dl(1240),dm(20))end else dt[#dt+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],dl(960),dm(33),dr)end;dt[#dt+1]="</g>"return dt end;function dk.DrawWarnings(dt)return f9(dt)end;function dk.DisplayOrbitScreen(dt)return fq(dt)end;function dk.DisplayMessage(dt,fi)if fi~="empty"then dt[#dt+1]=[[<text class="msg" x="50%%" y="310" >]]for g3 in string.gmatch(fi,"([^\n]+)")do dt[#dt+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g3)end;dt[#dt+1]=[[</text>]]end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function dk.DrawDeadZone(dt)dt[#dt+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function dk.UpdateRadar()if radar_1 then local g4=radar_1.getEntries()local g5=radar_1.getData()local g6=dl(1770)local g7=dm(330)if#g4>0 then local g8=g5:find('identifiedConstructs":%[%]')if g8==nil and perisPanelID==nil then al=1;cp()end;if g8~=nil and perisPanelID~=nil then cp()end;if radarPanelID==nil then cp()end;aj=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g6,g7,#g4)local g9={}for c1,c2 in pairs(g4)do if radar_1.hasMatchingTransponder(c2)==1 then table.insert(g9,c2)end end;if#g9>0 then local el=dm(15)local du=dl(1370)aj=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aj,du,el)for c1,c2 in pairs(g9)do el=el+20;aj=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aj,du,el,radar_1.getConstructName(c2))end end else local ga;ga=g5:find('worksInEnvironment":false')if ga then aj=e([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g6,g7)else aj=e([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g6,g7)end;if radarPanelID~=nil then al=0;cp()end end end end;return dk end;local function gb()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function gc()local function gd(ge)return type(ge)=='number'end;local function gf(ge)return type(tonumber(ge))=='number'end;local function gg(gh)return type(gh)=='table'end;local function gi(gj)return type(gj)=='string'end;local function gk(c2)return gg(c2)and gd(c2.x and c2.y and c2.z)end;local function gl(gm)return gg(gm)and gd(gm.latitude and gm.longitude and gm.altitude and gm.bodyId and gm.systemId)end;local gn=math.pi/180;local go=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gp='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gq=r;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function gr(ge)local cl=string.gsub(string.reverse(e('%.4f',ge)),'^0*%.?','')return cl==''and'0'or string.reverse(cl)end;local function gs(gt)if gk(gt)then return e('{x=%.3f,y=%.3f,z=%.3f}',gt.x,gt.y,gt.z)end;if gg(gt)and not getmetatable(gt)then local gu={}local gv=next(gt)if type(gv)=='nil'or gv==1 then gu=gt else for c1,c2 in pairs(gt)do local bS=gs(c2)if type(c1)=='number'then table.insert(gu,e('[%s]=%s',c1,bS))else table.insert(gu,e('%s=%s',c1,bS))end end end;return e('{%s}',table.concat(gu,','))end;if gi(gt)then return e("'%s'",gt:gsub("'",[[\']]))end;return tostring(gt)end;local gw={}gw.__index=gw;gw.__tostring=function(gt,gx)local gy={}for c1 in pairs(gt)do table.insert(gy,c1)end;table.sort(gy)local gu={}for _,c1 in ipairs(gy)do local bS=gs(gt[c1])if type(c1)=='number'then table.insert(gu,e('[%s]=%s',c1,bS))else table.insert(gu,e('%s=%s',c1,bS))end end;if gx then return e('%s%s',gx,table.concat(gu,',\n'..gx))end;return e('{%s}',table.concat(gu,','))end;gw.__eq=function(gz,gA)return gz.planetarySystemId==gA.planetarySystemId and gz.bodyId==gA.bodyId and c6(gz.radius,gA.radius)and c6(gz.center.x,gA.center.x)and c6(gz.center.y,gA.center.y)and c6(gz.center.z,gA.center.z)and c6(gz.GM,gA.GM)end;local function gB(gC,gD,gE,cb,gF)assert(gf(gC),'Argument 1 (planetarySystemId) must be a number:'..type(gC))assert(gf(gD),'Argument 2 (bodyId) must be a number:'..type(gD))assert(gf(gE),'Argument 3 (radius) must be a number:'..type(gE))assert(gg(cb),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cb))assert(gf(gF),'Argument 5 (GM) must be a number:'..type(gF))return setmetatable({planetarySystemId=tonumber(gC),bodyId=tonumber(gD),radius=tonumber(gE),center=vec3(cb),GM=tonumber(gF)},gw)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gG)return e('::pos{%d,%d,%s,%s,%s}',gG.systemId,gG.bodyId,gr(gG.latitude*go),gr(gG.longitude*go),gr(gG.altitude))end;MapPosition.__eq=function(gz,gA)return gz.bodyId==gA.bodyId and gz.systemId==gA.systemId and c6(gz.latitude,gA.latitude)and c6(gz.altitude,gA.altitude)and(c6(gz.longitude,gA.longitude)or c6(gz.latitude,math.pi/2)or c6(gz.latitude,-math.pi/2))end;local function gH(gI,gD,cf,cg,ce)local gC=gI;if gi(gI)and not cg and not ce and not gD and not cf then gC,gD,cf,cg,ce=o(gI,gp)assert(gC,'Argument 1 (position string) is malformed.')else assert(gf(gC),'Argument 1 (systemId) must be a number:'..type(gC))assert(gf(gD),'Argument 2 (bodyId) must be a number:'..type(gD))assert(gf(cf),'Argument 3 (latitude) must be in degrees:'..type(cf))assert(gf(cg),'Argument 4 (longitude) must be in degrees:'..type(cg))assert(gf(ce),'Argument 5 (altitude) must be in meters:'..type(ce))end;gC=tonumber(gC)gD=tonumber(gD)cf=tonumber(cf)cg=tonumber(cg)ce=tonumber(ce)if gD==0 then return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=gD,systemId=gC},MapPosition)end;return setmetatable({latitude=gn*gq(cf,-90,90),longitude=gn*(cg%360),altitude=ce,bodyId=gD,systemId=gC},MapPosition)end;local gJ={}gJ.__index=gJ;gJ.__tostring=function(gt,gx)local gK=gx and gx..'  'local gL={}local gy={}for c1 in pairs(gt)do table.insert(gy,c1)end;table.sort(gy)for _,gM in ipairs(gy)do bdy=gt[gM]local gN=gw.__tostring(bdy,gK)if gx then table.insert(gL,e('[%s]={\n%s\n%s}',gM,gN,gx))else table.insert(gL,e('  [%s]=%s',gM,gN))end end;if gx then return e('\n%s%s%s',gx,table.concat(gL,',\n'..gx),gx)end;return e('{\n%s\n}',table.concat(gL,',\n'))end;local function gO(gP)local b1={}local pid;for _,c2 in pairs(gP)do local gQ=c2.planetarySystemId;if type(gQ)~='number'then error('Invalid planetary system ID: '..tostring(gQ))elseif pid and gQ~=pid then error('Mistringmatch planetary system IDs: '..gQ..' and '..pid)end;local gR=c2.bodyId;if type(gR)~='number'then error('Invalid body ID: '..tostring(gR))elseif b1[gR]then error('Duplicate body ID: '..tostring(gR))end;setmetatable(c2.center,getmetatable(vec3.unit_x))b1[gR]=setmetatable(c2,gw)pid=gQ end;return setmetatable(b1,gJ)end;b6={}local function gS(gP)return setmetatable({galaxyAtlas=gP or{}},b6)end;b6.__index=function(gh,i)if type(i)=='number'then local system=gh.galaxyAtlas[i]return gO(system)end;return rawget(b6,i)end;b6.__pairs=function(gt)return function(gh,c1)local gT,nv=next(gh,c1)return gT,nv and gO(nv)end,gt.galaxyAtlas,nil end;b6.__tostring=function(gt)local gU={}for _,gV in pairs(gt or{})do local gW=gV:getPlanetarySystemId()local gX=gJ.__tostring(gV,'    ')table.insert(gU,e('  [%s]={%s\n  }',gW,gX))end;return e('{\n%s\n}\n',table.concat(gU,',\n'))end;b6.BodyParameters=gB;b6.MapPosition=gH;b6.PlanetarySystem=gO;function b6.createBodyParameters(gY,gD,gZ,g_,h0,h1,h2)assert(gf(gY),'Argument 1 (planetarySystemId) must be a number:'..type(gY))assert(gf(gD),'Argument 2 (bodyId) must be a number:'..type(gD))assert(gf(gZ),'Argument 3 (surfaceArea) must be a number:'..type(gZ))assert(gg(g_),'Argument 4 (aPosition) must be an array or vec3:'..type(g_))assert(gg(h0),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(h0))assert(gf(h1),'Argument 6 (altitude) must be in meters:'..type(h1))assert(gf(h2),'Argument 7 (gravityAtPosition) must be number:'..type(h2))local gE=math.sqrt(gZ/4/math.pi)local ai=gE+h1;local h3=vec3(g_)+ai*vec3(h0)local gF=h2*ai*ai;return gB(gY,gD,gE,h3,gF)end;b6.isMapPosition=gl;function b6:getPlanetarySystem(gI)if i==nil then i=0 end;if nv==nil then nv=0 end;local gY=gI;if gl(gI)then gY=gI.systemId end;if type(gY)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gJ then system=gO(system)end;return system end end end;function gJ:castIntersections(h4,cS,h5,h6)local h5=h5 or function(fm)return 1.05*fm.radius end;local h7={}if h6 then for _,i in ipairs(h6)do h7[i]=self[i]end else h6={}for c1,fm in pairs(self)do table.insert(h6,c1)h7[c1]=fm end end;local function h8(h9,ha)local hb=h7[h9].center-h4;local hc=h7[ha].center-h4;return hb:len()<hc:len()end;table.sort(h6,h8)local hd=cS:normalize()for i,gQ in ipairs(h6)do local fm=h7[gQ]local he=fm.center-h4;local gE=h5(fm)local hf=he:dot(hd)local hg=hf^2-(he:len2()-gE^2)if hg>=0 then local hh=math.sqrt(hg)local fk=hf+hh;local fl=hf-hh;if fl>0 then return fm,fk,fl elseif fk>0 then return fm,fk,nil end end end;return nil,nil,nil end;function gJ:closestBody(hi)assert(type(hi)=='table','Invalid coordinates.')local hj,fm;local hk=vec3(hi)for _,hl in pairs(self)do local hm=(hl.center-hk):len2()if(not fm or hm<hj)and hl.name~="Space"then fm=hl;hj=hm end end;return fm end;function gJ:convertToBodyIdAndWorldCoordinates(gI)local hn=gI;if gi(gI)then hn=gH(gI)end;if hn.bodyId==0 then return 0,vec3(hn.latitude,hn.longitude,hn.altitude)end;local hl=self:getBodyParameters(hn)if hl then return hn.bodyId,hl:convertToWorldCoordinates(hn)end end;function gJ:getBodyParameters(gI)local gD=gI;if gl(gI)then gD=gI.bodyId end;assert(gf(gD),'Argument 1 (bodyId) must be a number:'..type(gD))return self[gD]end;function gJ:getPlanetarySystemId()local _,c2=next(self)return c2 and c2.planetarySystemId end;function gw:convertToMapPosition(cb)assert(gg(cb),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cb))local cc=vec3(cb)if self.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cd=cc-self.center;local ai=cd:len()local ce=ai-self.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gw:convertToWorldCoordinates(gI)local hn=gi(gI)and gH(gI)or gI;if hn.bodyId==0 then return vec3(hn.latitude,hn.longitude,hn.altitude)end;assert(gl(hn),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hn.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hn.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ho=math.cos(hn.latitude)return self.center+(self.radius+hn.altitude)*vec3(ho*math.cos(hn.longitude),ho*math.sin(hn.longitude),math.sin(hn.latitude))end;function gw:getAltitude(cb)return(vec3(cb)-self.center):len()-self.radius end;function gw:getDistance(cb)return(vec3(cb)-self.center):len()end;function gw:getGravity(cb)local hp=self.center-vec3(cb)local hq=hp:len2()return self.GM/hq*hp/math.sqrt(hq)end;return setmetatable(b6,{__call=function(_,...)return gS(...)end})end;function script.onStart()local function hr()local function hs(ht)local hu=dbHud_1.hasKey;for c1,c2 in pairs(ht)do if hu(c2)then local cl=f(dbHud_1.getStringValue(c2))if cl~=nil then _G[c2]=cl;aJ=true end end end end;if dbHud_1 then local hu=dbHud_1.hasKey;if not useTheseSettings then hs(a)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5 end;coroutine.yield()hs(b)if aJ then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bn=AtmoSpeedLimit;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hv()local function hw(hx,hy)if hx>hy then hy=hx end;if ContainerOptimization>0 then hy=hy-hy*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hy=hy-hy*FuelTankOptimization*0.05 end;return hy end;local hz=core.getElementNameById;local hA=fuelX~=0 and fuelY~=0;for c1 in pairs(av)do local type=core.getElementTypeById(av[c1])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(av[c1])),'^.*vertical.*$')then bL=true end end;if o(type,'^.*Space Engine$')then bB=true;if o(tostring(core.getElementTagsById(av[c1])),'^.*vertical.*$')then local hB=core.getElementRotationById(av[c1])if hB[4]<0 then if p(-hB[4],0.1)==0.5 then bz=true end else if p(hB[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hC=h(av[c1])if hC>10000 then a_=128 elseif hC>1000 then a_=64 elseif hC>150 then a_=32 end end;aQ=aQ+h(av[c1])if hA and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hC=h(av[c1])local hD=k(av[c1])local hx=0;local dR=q()if type=="Atmospheric Fuel Tank"then local hy=400;local hE=35.03;if hC>10000 then hy=51200;hE=5480 elseif hC>1300 then hy=6400;hE=988.67 elseif hC>150 then hy=1600;hE=182.67 end;hx=hD-hE;if fuelTankHandlingAtmo>0 then hy=hy+hy*fuelTankHandlingAtmo*0.2 end;hy=hw(hx,hy)aN[#aN+1]={av[c1],hz(av[c1]),hy,hE,hx,dR}end;if type=="Rocket Fuel Tank"then local hy=320;local hE=173.42;if hC>65000 then hy=40000;hE=25740 elseif hC>6000 then hy=5120;hE=4720 elseif hC>700 then hy=640;hE=886.72 end;hx=hD-hE;if fuelTankHandlingRocket>0 then hy=hy+hy*fuelTankHandlingRocket*0.1 end;hy=hw(hx,hy)aP[#aP+1]={av[c1],hz(av[c1]),hy,hE,hx,dR}end;if type=="Space Fuel Tank"then local hy=2400;local hE=182.67;if hC>10000 then hy=76800;hE=5480 elseif hC>1300 then hy=9600;hE=988.67 end;hx=hD-hE;if fuelTankHandlingSpace>0 then hy=hy+hy*fuelTankHandlingSpace*0.2 end;hy=hw(hx,hy)aO[#aO+1]={av[c1],hz(av[c1]),hy,hE,hx,dR}end end end;if not bL then VertTakeOff,VertTakeOffEngine=false,false end end;local function hF()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(as or not as and au<10000)then for _,c2 in pairs(door)do c2.toggle()end end;if switch then for _,c2 in pairs(switch)do c2.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,c2 in pairs(forcefield)do c2.toggle()end end;if antigrav then bM=antigrav.getState()==1;if bM and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hG=dc()if hG~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then s:setTargetGroundAltitude(bf)if bf==0 and not S then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if as and hG~=-1 then b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function hH(hI,hJ,hK,hL,du,el,hM,hN,hO)local hP={enableName=hI,disableName=hJ,width=hK,height=hL,x=du,y=el,toggleVar=hM,toggleFunction=hN,drawCondition=hO,hovered=false}table.insert(aG,hP)return hP end;local function hQ()local function hR()if dbHud_1 then local position=bK;local dK=planet.name..". "..#SavedLocations;if radar_1 then local gQ,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gQ~=nil and gQ~=""then dK=dK.." "..radar_1.getConstructName(gQ)end end;local cJ={}cJ={position=position,name=dK,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cJ;table.insert(b1[0],cJ)c0()a2="Location saved as "..dK else a2="Databank must be installed to save locations"end end;local function hS()TurnBurn=not TurnBurn end;local function hT(hU)if hU==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hV()hT(1)end;local function hW()local cI=-1;cI=cn(b1[0])if cI>-1 then table.remove(b1[0],cI)end;cI=-1;cI=cn(SavedLocations)if cI~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cI)end;cA()c0()end;local function hX()local dK=AutopilotTargetName;if dK==nil then local fi,cm=ci((bK-CustomTarget.position):len())dK=CustomTarget.name.." "..fi..cm end;if dK==nil then dK="None"end;return"Engage Autopilot: "..dK end;local function hY()local dK=AutopilotTargetName;if dK==nil then dK=CustomTarget.name end;if dK==nil then dK="None"end;return"Disable Autopilot: "..dK end;local hZ=50;local h_=260;local i0=hH("Enable Brake Toggle","Disable Brake Toggle",h_,hZ,aH/2-h_/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hH("Align Prograde","Disable Prograde",h_,hZ,aH/2-h_/2-50-i0.width,aI/2-hZ+380,function()return ProgradeIsOn end,hV)hH("Align Retrograde","Disable Retrograde",h_,hZ,aH/2-h_/2+i0.width+50,aI/2-hZ+380,function()return RetrogradeIsOn end,hT,function()return at==0 end)local i1=hH(hX,hY,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,cC)hH("Save Position","Save Position",200,i1.height,i1.x+i1.width+30,i1.y,function()return false end,hR,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hH("Update Position","Update Position",200,i1.height,i1.x+i1.width+30,i1.y,function()return false end,cG,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hH("Clear Position","Clear Position",200,i1.height,i1.x-200-30,i1.y,function()return true end,hW,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hZ=60;h_=300;local du=10;local el=aI/2-500;hH("Show Help","Hide Help",h_,hZ,du,el,function()return showHelp end,function()showHelp=not showHelp end)local el=aI/2-300;hH("Enable Turn and Burn","Disable Turn and Burn",h_,hZ,du,el,function()return TurnBurn end,hS)hH("Horizontal Takeoff Mode","Vertical Takeoff Mode",h_,hZ,du+h_+20,el,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bL end)el=el+hZ+20;hH("Show Orbit Display","Hide Orbit Display",h_,hZ,du,el,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hH("Engage Orbiting","Cancel Orbiting",h_,hZ,du+h_+20,el,function()return IntoOrbit end,cu,function()return at==0 and unit.getClosestPlanetInfluence()>0 end)el=el+hZ+20;hH("Glide Re-Entry","Cancel Glide Re-Entry",h_,hZ,du,el,function()return Reentry end,function()am=true;hV()end,function()return planet.hasAtmosphere and not as end)hH("Parachute Re-Entry","Cancel Parachute Re-Entry",h_,hZ,du+h_+20,el,function()return Reentry end,d1,function()return planet.hasAtmosphere and not as end)el=el+hZ+20;hH("Engage Follow Mode","Disable Follow Mode",h_,hZ,du,el,function()return a0 end,cw,function()return m()==1 end)hH("Enable Repair Arrows","Disable Repair Arrows",h_,hZ,du+h_+20,el,function()return aR end,function()aR=not aR;if aR then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)el=el+hZ+20;if not ExternalAGG then hH("Enable AGG","Disable AGG",h_,hZ,du,el,function()return bM end,d6,function()return antigrav~=nil end)end;el=el+hZ+20;hH(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,h_*2,hZ,du,el,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function i2()local i3=nil;local i4=nil;local i5=nil;local i6=nil;b1=gb()for c1,c2 in pairs(b1[0])do if i3==nil or c2.center.x<i3 then i3=c2.center.x end;if i4==nil or c2.center.x>i4 then i4=c2.center.x end;if i5==nil or c2.center.y<i5 then i5=c2.center.y end;if i6==nil or c2.center.y>i6 then i6=c2.center.y end end;b2=""local i7=1.1*(i4-i3)/1920;local i8=1.4*(i6-i5)/1080;for c1,c2 in pairs(b1[0])do local du=960+c2.center.x/i7;local el=540+c2.center.y/i8;b2=b2 ..'<circle cx="'..du..'" cy="'..el..'" r="'..c2.radius/i7*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not o(c2.name,"Moon")and not o(c2.name,"Sanctuary")and not o(c2.name,"Space")then b2=b2 .."<text x='"..du.."' y='"..el+c2.radius/i7*30+20 .."' font-size='28' fill="..az.." text-anchor='middle' font-family='Montserrat'>"..c2.name.."</text>"end end;local fU=bK;local du=960+fU.x/i7;local el=540+fU.y/i8;b2=b2 ..'<circle cx="'..du..'" cy="'..el..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='"..du.."' y='"..el-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b2=b2 ..[[</svg>]]b3=i7;b4=i8;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b2)local fU=bK;local du=960+fU.x/i7;local el=540+fU.y/i8;b2='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='80' y='105' font-size='18' fill="..az.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b5=screen_2.addContent((du-80)/19.20,(el-80)/10.80,b2)end end;local function i9()for c1,c2 in pairs(SavedLocations)do table.insert(b1[0],c2)end;c0()end;local function ia()local b8={}local ib=30000000/3600;local ic=ib*ib;local id=100;local function ie(c2)return 1/math.sqrt(1-c2*c2/ic)end;function b8.computeAccelerationTime(ig,ih,ii)local ij=ib*math.asin(ig/ib)return(ib*math.asin(ii/ib)-ij)/ih end;function b8.computeDistanceAndTime(ig,ii,ik,il,im,io)im=im or 0;io=io or 0;local ip=ig<=ii;local iq=il*(ip and 1 or-1)/ik;local ir=-io/ik;local is=iq+ir;if ip and is<=0 or not ip and is>=0 then return-1,-1 end;local it,iu=0,0;if iq~=0 and im>0 then local ij=math.asin(ig/ib)local iv=math.pi*(iq/2+ir)local iw=iq*im;local ix=ib*math.pi;local c2=function(gh)local iy=(iv*gh-iw*math.sin(math.pi*gh/2/im)+ix*ij)/ix;local iz=math.tan(iy)return ib*iz/math.sqrt(iz*iz+1)end;local iA=ip and function(gj)return gj>=ii end or function(gj)return gj<=ii end;iu=2*im;if iA(c2(iu))then local iB=0;while c(iu-iB)>0.5 do local gh=(iu+iB)/2;if iA(c2(gh))then iu=gh else iB=gh end end end;local iC=ig;local iD=iu/id;for iE=1,id do local bZ=c2(iE*iD)it=it+(bZ+iC)*iD/2;iC=bZ end;if iu<2*im then return it,iu end;ig=iC end;local ij=ib*math.asin(ig/ib)local bD=(ib*math.asin(ii/ib)-ij)/is;local iF=ic*math.cos(ij/ib)/is;local ai=iF-ic*math.cos((is*bD+ij)/ib)/is;return ai+it,bD+iu end;function b8.computeTravelTime(ig,ih,ai)if ai==0 then return 0 end;if ih>0 then local ij=ib*math.asin(ig/ib)local iF=ic*math.cos(ij/ib)/ih;return(ib*math.acos(ih*(iF-ai)/ic)-ij)/ih end;if ig==0 then return-1 end;assert(ig>0,'Acceleration and initial speed are both zero.')return ai/ig end;function b8.lorentz(c2)return ie(c2)end;return b8 end;local function iG()local vec3=require('cpml.vec3')local gc=gc()local function gi(gj)return type(gj)=='string'end;local function gg(gh)return type(gh)=='table'end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ce)assert(self.body)local ai=ce+self.body.radius;if not c6(ai,0)then local orbit=math.sqrt(self.body.GM/ai)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gI,bY)assert(self.body)assert(gg(gI)or gi(gI))assert(gg(bY))local fU=(gi(gI)or gc.isMapPosition(gI))and self.body:convertToWorldCoordinates(gI)or vec3(gI)local c2=vec3(bY)local iH=fU-self.body.center;local hc=c2:len2()local iI=iH:len()local iJ=self.body.GM;local iK=((hc-iJ/iI)*iH-iH:dot(c2)*c2)/iJ;local c7=iJ/(2*iJ/iI-hc)local iL=iK:len()local hd=iK:normalize()local iM=c7*(1-iL)local iN=c7*(1+iL)local iO=iM*hd+self.body.center;local iP=iL<=1 and-iN*hd+self.body.center or nil;local iQ=math.sqrt(c7*iJ*(1-iL*iL))local iR=iP and 2*math.pi*math.sqrt(c7^3/iJ)local iS=math.acos(iK:dot(iH)/(iL*iI))if iH:dot(c2)<0 then iS=-(iS-2*math.pi)end;local iT=math.acos((math.cos(iS)+iL)/(1+iL*math.cos(iS)))local iU=iT;if iU<0 then iU=iU+2*math.pi end;local iV=iU-iL*math.sin(iU)local iW=0;local iX=0;local iY=0;if iR~=nil then iW=iV/(2*math.pi/iR)iX=iR-iW;iY=iX+iR/2;if iS-math.pi>0 then iX=iW;iY=iX+iR/2 end;if iY>iR then iY=iY-iR end end;return{periapsis={position=iO,speed=iQ/iM,circularOrbitSpeed=math.sqrt(iJ/iM),altitude=iM-self.body.radius},apoapsis=iP and{position=iP,speed=iQ/iN,circularOrbitSpeed=math.sqrt(iJ/iN),altitude=iN-self.body.radius},currentVelocity=c2,currentPosition=fU,eccentricity=iL,period=iR,eccentricAnomaly=iT,meanAnomaly=iV,timeToPeriapsis=iX,timeToApoapsis=iY}end;local function iZ(i_)local hl=gc.BodyParameters(i_.planetarySystemId,i_.bodyId,i_.radius,i_.center,i_.GM)return setmetatable({body=hl},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iZ(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hr()coroutine.yield()hv()coroutine.yield()hF()hQ()coroutine.yield()i2()b6=gc()b7=b6(gb())b8=ia()ba=iG()bb=dj()i9()c0()cx()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,c2 in pairs(door)do c2.toggle()end end;if switch then for _,c2 in pairs(switch)do c2.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,c2 in pairs(forcefield)do c2.toggle()end end;df()if button then button.activate()end;local cE=c9(planet,bK)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end;function script.onTick(j0)local j1=system.createData;local j2=system.createWidget;local function j3()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=j2(panelInterplanetary,"value")interplanetaryHeaderText=j1('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=j2(panelInterplanetary,"value")widgetDistanceText=j1('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=j2(panelInterplanetary,"value")widgetTravelTimeText=j1('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=j2(panelInterplanetary,"value")widgetMaxMassText=j1('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=j2(panelInterplanetary,"value")widgetTargetOrbitText=j1('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=j2(panelInterplanetary,"value")widgetCurBrakeDistanceText=j1('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=j2(panelInterplanetary,"value")widgetCurBrakeTimeText=j1('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=j2(panelInterplanetary,"value")widgetMaxBrakeDistanceText=j1('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=j2(panelInterplanetary,"value")widgetMaxBrakeTimeText=j1('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=j2(panelInterplanetary,"value")widgetTrajectoryAltitudeText=j1('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function j4()u(panelInterplanetary)panelInterplanetary=nil end;local function j5(j6)local gE=500000;local j7,j8,j9=math.huge;local ja=false;local jb=vec3({13771471,7435803,-128971})local jc=18000000;j7=vec3(j6):dist(jb)if j7<jc then return true,c(j7-jc),"Safe Zone",0 end;j8=vec3(j6):dist(vec3(planet.center))if j8<gE then ja=true end;if c(j8-gE)<c(j7-jc)then return ja,c(j8-gE),planet.name,planet.bodyId else return ja,c(j7-jc),"Safe Zone",0 end end;local function jd(dt)local je=0;aE=""local jf=aQ;local jg=0;local jh=0;local ji=0;local dT=0;local dU=""local jj=core.getElementHitPointsById;for c1 in pairs(av)do local hC=0;local jk=0;jk=h(av[c1])hC=jj(av[c1])jg=jg+hC;if hC<jk then if hC==0 then ji=ji+1 else jh=jh+1 end;if aR and#aB==0 then position=vec3(core.getElementPositionById(av[c1]))local du=position.x-a_;local el=position.y-a_;local jl=position.z-a_;table.insert(aB,core.spawnArrowSticker(du,el,jl+1,"down"))table.insert(aB,core.spawnArrowSticker(du,el,jl+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(du+1,el,jl,"north"))table.insert(aB,core.spawnArrowSticker(du+1,el,jl,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(du-1,el,jl,"south"))table.insert(aB,core.spawnArrowSticker(du-1,el,jl,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(du,el-1,jl,"east"))table.insert(aB,core.spawnArrowSticker(du,el-1,jl,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(du,el+1,jl,"west"))table.insert(aB,core.spawnArrowSticker(du,el+1,jl,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,av[c1])end elseif aR and#aB>0 and aB[11]==av[c1]then for dM in pairs(aB)do core.deleteSticker(aB[dM])end;aB={}end end;je=d(jg/jf*100)if je<100 then dt[#dt+1]=[[<g class="pbright txt">]]dT=d(je*2.55)dU=e("rgb(%d,%d,%d)",255-dT,dT,0)if je<100 then dt[#dt+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dU,je)if ji>0 then dt[#dt+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dU,ji,jh)elseif jh>0 then dt[#dt+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dU,jh)end end;dt[#dt+1]=[[<\g>]]end end;local function jm(dt)local jn=d(r(ai/(aH/4)*255,0,255))dt[#dt+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(D+0.5)+jn,d(F+0.5)-jn,d(E+0.5)-jn)end;local function jo()local jp=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()return jp end;local function jq()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local bZ=bI;local jr=unit.getThrottle()/100;if AtmoSpeedAssist then jr=I end;local js,jt=b8.computeDistanceAndTime(bI,MaxGameVelocity,l(),Nav:maxForceForward()*jr,warmup,0)local a6,a7;if not TurnBurn then a6,a7=d4(MaxGameVelocity)else a6,a7=d5(MaxGameVelocity)end;local _,ju;if not TurnBurn and bZ>0 then _,ju=d4(bZ)else _,ju=d5(bZ)end;local jv=0;local jw=0;if AutopilotCruising or not Autopilot and bZ>5 then jw=b8.computeTravelTime(bZ,0,AutopilotDistance)elseif a6+js<AutopilotDistance then jv=AutopilotDistance-(a6+js)jw=b8.computeTravelTime(8333.0556,0,jv)else local jx=(AutopilotDistance-a6)/js;js=AutopilotDistance-a6;jt=jt*jx end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return jw elseif AutopilotBraking then return ju elseif AutopilotCruising then return jw+ju else return jt+a7+jw end end;local function jy()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jz()local dR=q()local f6=bI;local jA=dR-aw;if f6>1.38889 then f6=f6/1000;local jB=f6*(dR-aw)TotalDistanceTravelled=TotalDistanceTravelled+jB;ab=ab+jB end;ac=ac+jA;TotalFlightTime=TotalFlightTime+jA;aw=dR end;local function jC()for _,c2 in pairs(aG)do if c2.hovered then if not c2.drawCondition or c2.drawCondition()then c2.toggleFunction()end;c2.hovered=false end end end;local function jD()local function jE(jF,jG,du,el,hK,hL)if jF>du and jF<du+hK and jG>el and jG<el+hL then return true else return false end end;local du=af+aH/2;local el=ag+aI/2;for _,c2 in pairs(aG)do c2.hovered=jE(du,el,c2.x,c2.y,c2.width,c2.height)end end;local function jH(dt)local function jI(dt,jJ,hover,du,el,iy,jK,jL,jM,jN,jO)if type(jN)=="function"then jN=jN()end;if type(jO)=="function"then jO=jO()end;dt[#dt+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",du,el,iy,jK)if jJ then dt[#dt+1]=e("%s'",jL)else dt[#dt+1]=jM end;if hover then dt[#dt+1]=" style='stroke:white; stroke-width:2'"else dt[#dt+1]=" style='stroke:black; stroke-width:1'"end;dt[#dt+1]="></rect>"dt[#dt+1]=e("<text x='%f' y='%f' font-size='24' fill='",du+iy/2,el+jK/2+5)if jJ then dt[#dt+1]="black"else dt[#dt+1]="white"end;dt[#dt+1]="' text-anchor='middle' font-family='Montserrat'>"if jJ then dt[#dt+1]=e("%s</text>",jN)else dt[#dt+1]=e("%s</text>",jO)end end;local jP="rgb(50,50,50)'"local jQ="rgb(210,200,200)"local jR=jI;for _,c2 in pairs(aG)do local hJ=c2.disableName;local hI=c2.enableName;if type(hJ)=="function"then hJ=hJ()end;if type(hI)=="function"then hI=hI()end;if not c2.drawCondition or c2.drawCondition()then jR(dt,c2.toggleVar(),c2.hovered,c2.x,c2.y,c2.width,c2.height,jQ,jP,hJ,hI)end end end;if j0=="tenthSecond"then if at>0 and not WasInAtmo then if not bO and AtmoSpeedAssist and(AltitudeHold or Reentry)then bR(1)M=false end end;if bN~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bN then bU(bN,TRUE)else bN=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then j3()end;if AutopilotTargetName~=nil then local jS=CustomTarget~=nil;planetMaxMass=jo()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=jq()if jS and not Autopilot then ai=(bK-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a6,a7=d4(bI)a8,a9=d4(MaxGameVelocity)else a6,a7=d5(bI)a8,a9=d5(MaxGameVelocity)end;local fi,cm=ci(ai)v(widgetDistanceText,'{"label": "distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..d7(travelTime)..'", "unit":""}')fi,cm=ci(a6)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..d7(a7)..'", "unit":""}')fi,cm=ci(a8)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..d7(a9)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')fi,cm=ci(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",fi)..'", "unit":"'..cm..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else j4()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif j0=="oneSecond"then aq=false;bV(nil,true)jz()bb.UpdateRadar()jy()local dt={}dt=bb.DrawOdometer(dt,ab,TotalDistanceTravelled,ac)if ShouldCheckDamage then jd(dt)end;ak=table.concat(dt,"")collectgarbage("collect")elseif j0=="fiveSecond"then ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local cl=f(dbHud_1.getStringValue("SavedLocations"))if cl~=nil then _G["SavedLocations"]=cl;local cI=-1;local cJ;for c1,c2 in pairs(SavedLocations)do if c2.name and c2.name=="SatNav Location"then cI=c1;break end end;if cI~=-1 then cJ=SavedLocations[cI]cI=-1;for c1,c2 in pairs(b1[0])do if c2.name and c2.name=="SatNav Location"then cI=c1;break end end;if cI>-1 then b1[0][cI]=cJ end;c0()a2=cJ.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cx()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif j0=="msgTick"then local dt={}bb.DisplayMessage(dt,"empty")a2="empty"unit.stopTimer("msgTick")ah=3 elseif j0=="animateTick"then bd=true;bc=false;af=0;ag=0;unit.stopTimer("animateTick")elseif j0=="hudTick"then local dt={}bb.HUDPrologue(dt)if showHud then bb.UpdateHud(dt)else bb.DisplayOrbitScreen(dt)bb.DrawWarnings(dt)end;bb.HUDEpilogue(dt)dt[#dt+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aH,aI)if a2~="empty"then bb.DisplayMessage(dt,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bb.DrawDeadZone(dt)end end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then jD()jH(dt)if screen_1.getMouseState()==1 then jC()end;dt[#dt+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)elseif y()==0 then if m()==1 and a1 then jD()jH(dt)if not bc and not bd then local jT=table.concat(dt,"")dt={}dt[#dt+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dt[#dt+1]=b2;dt[#dt+1]=jT;dt[#dt+1]="</body>"bc=true;dt[#dt+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dt,"")system.setScreen(content)elseif bd then local jT=table.concat(dt,"")dt={}dt[#dt+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dt[#dt+1]=b2;dt[#dt+1]=jT;dt[#dt+1]="</body>"end;if not bc then dt[#dt+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end else jC()end else if not a1 and m()==0 then jC()if ai>DeadZone then if DisplayDeadZone then jm(dt)end end else jD()jH(dt)end;dt[#dt+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end;dt[#dt+1]=[[</svg></body>]]content=table.concat(dt,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif j0=="apTick"then as=j()>0;at=j()au=core.getAltitude()if antigrav then bM=antigrav.getState()==1 end;bD=q()local jU=bD-bj;bj=bD;local bP=bP;local jV=-math.deg(cL(bE,bH,bF))local jW=math.deg(cL(bG,bH,bF))local jX=1;local jY=1;bi=as and jV<-YawStallAngle or jV>YawStallAngle or jW<-PitchStallAngle or jW>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not a1 then bh=-bh end;V=0;Z=0;U=0;sys=b7[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=ba(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)if au==0 then au=(bK-planet.center):len()-planet.radius end;ap=cq()local bW=planet:getGravity(core.getConstructWorldPos()):len()*l()bk=0;b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not as then G,H,_,_=j5(bK)else G=true end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then af=screen_1.getMouseX()*aH;ag=screen_1.getMouseY()*aI elseif y()==0 then if m()==1 and a1 then if not bc then af=af+bg;ag=ag+bh end else af=0;ag=0 end else af=af+bg;ag=ag+bh;ai=math.sqrt(af*af+ag*ag)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then V=V-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then V=V-(af+DeadZone)*MouseXSensitivity else V=0 end;if ag>0 and ag>DeadZone then U=U-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then U=U-(ag+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then af=0;ag=0;U=(-utils.smoothstep(bh,-100,100)+0.5)*2*jX;V=(-utils.smoothstep(bg,-100,100)+0.5)*2*jY else af=0;ag=0 end end end;local jZ=bI>8334;if bI>SpaceSpeedLimit/3.6 and not as and not Autopilot and not jZ then a2="Space Speed Engine Shutoff reached"bR(0)end;if not jZ and LastIsWarping then if not BrakeIsOn then cP()end;if Autopilot then cC()end end;LastIsWarping=jZ;if as and at>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bI<bn/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local j_=false;if CustomTarget~=nil then j_=cT(CustomTarget.position-bK,0.01)else j_=cT(vec3(bH),0.01)end;be=true;if j_ and(c(bQ)<2 or c(bP)>85)and bI>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d1()elseif as and AtmoSpeedAssist then bR(1)else bU(d(bn))end elseif bI>Q then cT(vec3(bH),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bI>Q then cT(-vec3(bH))end end;if not ProgradeIsOn and am and not IntoOrbit then if at==0 then R=true;d1()am=false;ao=true else am=false;cC()end end;local cB=bJ*-1;local dX=bH.x*cB.x+bH.y*cB.y+bH.z*cB.z;if ao and CustomTarget~=nil and(au<HoldAltitude+200 and au>HoldAltitude-200)and bI*3.6>bn-100 and c(dX)<20 and at>=0.1 and(CustomTarget.position-bK):len()>2000+au then cC()ao=false end;if VertTakeOff then be=true;local k0=HoldAltitude;if dX<-30 then a2="Unable to achieve lift. Safety Landing."ae=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bM or HoldAltitude<planet.spaceEngineMinAltitude then if bM then k0=antigrav.getBaseAltitude()end;if au<k0-100 then bo=0;ae=15;BrakeIsOn=false elseif dX>0 then BrakeIsOn=true;ae=0 elseif dX<-30 then BrakeIsOn=true;ae=15 elseif au>=k0 then if bM then if Autopilot or VectorToTarget then ct()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"ct()end;ae=0 end else if at>0.08 then bo=0;BrakeIsOn=false;ae=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bA then bo=0;ae=20 else ae=0;bo=36;bU(3500)end else be=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;bw=k0;bv=true;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k1=r(bo-bP,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k1)local k2=r(vTpitchPID:get(),-1,1)U=k2 end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=aa else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius+bx.noAtmosphericDensityAltitude+1000)else bw=math.floor(bx.radius+bx.surfaceMaxAltitude+1000)end;bv=true end;local cZ;local k3=false;local k4,k5=ci(bw)local k6=k4 ..k5;if bu.VectorToTarget then cZ=CustomTarget.position-bK end;local k7,k8=ba(bx):escapeAndOrbitalSpeed((bK-bx.center):len()-bx.radius)local k9=bQ;if not bs then bR(0)br=0;bp="Aligning to orbital path - OrbitHeight: "..k6;local ka=false;local kb=false;if bu.VectorToTarget then cT(cZ:normalize():project_on_plane(bJ))k3=bF:dot(cZ:project_on_plane(bE):normalize())>0.95 else cT(bH)k3=jV<0.5;if bI<150 then k3=true end end;U=0;bq=0;if bP<=bq+1 and bP>=bq-1 then ka=true else ka=false end;if k9<=br+1 and k9>=br-1 then kb=true else kb=false end;if ka and kb and k3 then bq=nil;br=nil;bs=true end else if bu.VectorToTarget then cT(cZ:normalize():project_on_plane(bJ))elseif bI>150 then cT(bH)end;U=0;if bu.VectorToTarget then local a6,_=b8.computeDistanceAndTime(bI,bn/3.6,l(),0,0,LastMaxBrake)if by and cZ:len()>15000+a6+au then bp="Orbiting to Target"elseif by or cZ:len()<15000+a6+au then a2="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;R=true;ao=true;bu.VectorToTarget,bu.AutopilotAlign=false,false;cu()d1()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bw*0.9 and au<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;bR(0)by=true;bq=0;if not bu.VectorToTarget then a2="Orbit complete"cu()end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..k6;bt=true;bU(k8*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kc=dX;local kd=au-bw;local ke=c(kd)if dX<10 and c(bP)<10 and ke<100 then kc=dX*2 end;if kc<10 and c(bP)<10 and ke<100 then kc=kc*2 end;if kc<5 and c(bP)<5 and ke<100 then kc=kc*4 end;VSpdPID:inject(kc)bq=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kd)bq=r(bq-r(OrbitAltPID:get(),-15,15),-90,90)end end else local kf=2.75;local kg=c(p(k7*kf))local kh=kg%50;if kh>0 then kg=kg-kh+50 end;BrakeIsOn=false;if au<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..k6;bq=utils.map(dX,200,0,-15,80)elseif au>=bw*0.8 and au<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..k6;kg=kg*0.75;bq=utils.map(dX,100,-100,-15,65)elseif au>=bw*1.15 and au<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..k6;kg=kg*0.75;if dX<0 or bt then bq=utils.map(au,bw*1.5,bw*1.01,-30,0)else bq=utils.map(au,bw*0.99,bw*1.5,0,30)end elseif au>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..k6;bq=-85;local ki=utils.map(dX,-150,-400,1,0.55)kg=kg*ki end;bU(d(kg))end end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kj=bq-bP;OrbitPitchPID:inject(kj)local kk=r(OrbitPitchPID:get(),-0.5,0.5)U=kk end end;if Autopilot and at==0 and not am then local kl,km=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kn=(CustomTarget.position-aa.center):normalize()local ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()local kp=aa.center+ko*(aa.radius+AutopilotTargetOrbit)local kq=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bK-kp):len()<(bK-kq):len()then kl=kp;AutopilotTargetCoords=kl else kl=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))AutopilotTargetCoords=kl end;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)km=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;km=true;TargetSet=true;AutopilotRealigned=true;kl=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kn=(bK+bH*100000-aa.center):normalize()local ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()if ko:len()<1 then kn=(bK+bF*100000-aa.center):normalize()ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()end;kl=aa.center+ko*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kl;TargetSet=true;km=true;AutopilotRealigned=true;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end end;AutopilotDistance=(vec3(kl)-bK):len()local fj,fk,fl=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fm)if fm.noAtmosphericDensityAltitude>0 then return fm.radius+fm.noAtmosphericDensityAltitude else return fm.radius+fm.surfaceMaxAltitude*1.5 end end)local fn=fk;if fl~=nil and fk~=nil then fn=math.min(fl,fk)end;if fn~=nil and fn<AutopilotDistance and fj.name==aa.name then AutopilotDistance=fn end;local j_=true;local kr=(aa.center-(bK+vec3(bH):normalize()*AutopilotDistance)):len()-aa.radius;local fi,cm=ci(kr)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..fi..'", "unit":"'..cm..'"}')local a6,a7;if not TurnBurn then a6,a7=d4(bI)else a6,a7=d5(bI)end;if bI>300 and AutopilotAccelerating then local cZ=vec3(kl)-bK;local ks=r(math.deg(cL(bE,bH:normalize(),cZ:normalize()))*bI/500,-90,90)local kt=r(math.deg(cL(bG,bH:normalize(),cZ:normalize()))*bI/500,-90,90)if c(ks)<20 and c(kt)<20 then ks=ks*2;kt=kt*2 end;if c(ks)<2 and c(kt)<2 then ks=ks*2;kt=kt*2 end;local jV=-math.deg(cL(bE,bF,bH:normalize()))local jW=-math.deg(cL(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kt-jW)local ku=r(apPitchPID:get(),-1,1)U=U+ku;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ks-jV)local kv=r(apYawPID:get(),-1,1)V=V+kv;km=true;if c(ks)>2 or c(kt)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kr<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(kr)end end;if not AutopilotCruising and not AutopilotBraking and not km then j_=cT((kl-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then j_=cT(-vec3(bH):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bR(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local jr=unit.getThrottle()if AtmoSpeedAssist then jr=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jr==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bR(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bR(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bR(1,true)end;local _,k8=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local cZ;if CustomTarget~=nil then cZ=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=k8 and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bR(0)P=false;ProgradeIsOn=true;am=true;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,k8=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bI<=k8 then if CustomTarget~=nil then if bH:normalize():dot(cZ:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bR(0)P=false;ProgradeIsOn=true;am=true;BrakeIsOn=false;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bR(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;am=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jr=unit.getThrottle()if AtmoSpeedAssist then jr=I end;if jr>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if j_ then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif j_ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bR(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bR(0)P=false;ProgradeIsOn=true;am=true;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end;if a0 then be=true;local kt=0;local fU=bK+vec3(unit.getMasterPlayerRelativePosition())local kw=fU-bK;local kx=vec3(kw):project_on(bF):len()local ky=vec3(kw):project_on(bG):len()local ai=math.sqrt(kx*kx+ky*ky)cT(kw:normalize())local kz=40;local kA=ai<kz;local kB=100;local kC=r((ai-kz)/2,10,kB)U=0;local j_=c(V)<0.1;if j_ and bI<kC and not kA then BrakeIsOn=false;kt=-20 else BrakeIsOn=true;kt=0 end;local kD=0;if c(kt-bP)>kD then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kt-bP)local ku=pitchPID:get()U=ku end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cF=unit.getClosestPlanetInfluence()>0;local kE=HoldAltitude-au;local kF=500+bI;local kG=1;if AutoTakeoff then kG=r(bI/100,0.1,1)end;local kt=(utils.smoothstep(kE,-kF,kF)-0.5)*2*MaxPitch*kG;if not Reentry and not am and not VectorToTarget and bF:dot(bH:normalize())<0.99 then kt=(utils.smoothstep(kE,-kF*r(20-19*at*10,1,20),kF*r(20-19*at*10,1,20))-0.5)*2*MaxPitch*r(2-at*10,1,2)*kG end;if not AltitudeHold then kt=0 end;if LockPitch~=nil then if cF and not IntoOrbit then kt=LockPitch else LockPitch=nil end end;be=true;local kH=U;if Reentry then local kI=d(bn)local kJ,kK=b8.computeDistanceAndTime(bI,kI/3.6,l(),0,0,LastMaxBrake-planet.gravity*9.8*l())local kL=au-(planet.noAtmosphericDensityAltitude+5000)if not bO and au>planet.noAtmosphericDensityAltitude+5000 and bI<=kI/3.6 and bI>kI/3.6-10 and c(bH:normalize():dot(bF))>0.9 then bR(0)elseif bO and(kJ>-1 and kL<=kJ or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bU(kI,true)if not R then kt=-80;if at>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kt=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then be=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then bU(kI)if not bO and s:getTargetSpeed(axisCommandId.longitudinal)==bn then R=false;Reentry=false;be=true end end end;if bI>Q and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cT(vec3(bH))end;if(VectorToTarget or an)and AutopilotTargetIndex>0 and at>0.01 then local cZ;if CustomTarget~=nil then cZ=CustomTarget.position-bK else cZ=aa.center-bK end;local ks=math.deg(cL(bJ:normalize(),bH,cZ))*2;local kM=math.rad(c(bQ))if bI>minRollVelocity and at>0.01 then local kN=r(90-kt*2,-90,90)bk=r(ks*2,-kN,kN)local kO=ks;ks=r(r(ks,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kM)+4*(bP-kt)*math.sin(math.rad(bQ)),-YawStallAngle*0.80,YawStallAngle*0.80)kt=r(r(kt*math.cos(kM),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(r(c(kO)*math.sin(kM),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bk=0;ks=r(ks,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kP=jV-ks;if not bi and bI>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kP)local kv=r(yawPID:get(),-1,1)V=V+kv elseif as and ap>-1 or bI<minRollVelocity then cT(cZ)elseif bi and at>0.01 then if(jV<-YawStallAngle or jV>YawStallAngle)and at>0.01 then cT(bH)end;if(jW<-PitchStallAngle or jW>PitchStallAngle)and at>0.01 then kt=r(bP-jW,bP-PitchStallAngle*0.80,bP+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local k0=planet:getAltitude(CustomTarget.position)local kL=math.sqrt(cZ:len()^2-(au-k0)^2)local kQ=LastMaxBrakeInAtmo;if kQ then kQ=kQ*r(bI/100,0.1,1)*at else kQ=LastMaxBrake end;if at<0.01 then kQ=LastMaxBrake end;local kR=bH:len()-c(dX)local kS=vec3(core.getWorldAirFrictionAcceleration())local kT=math.sqrt(kS:len()-kS:project_on(cB):len())*l()if bI>100 then a6,a7=b8.computeDistanceAndTime(bI,100,l(),0,0,kQ+kT)local kU,kV=b8.computeDistanceAndTime(100,0,l(),0,0,kQ/2)a6=a6+kU else a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kQ/2)end;StrongBrakes=true;if not an and not Reentry and kL<=a6+bI*jU/2 and(bH:project_on_plane(bJ):normalize():dot(cZ:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bR(0)if AltitudeHold then cv()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kR<0.1 or kL<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kL)then if not bM then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kL end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local cZ=CustomTarget.position-bK;local k0=planet:getAltitude(CustomTarget.position)local kL=math.sqrt(cZ:len()^2-(au-k0)^2)local kQ=LastMaxBrakeInAtmo;if kQ then a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kQ/2)StrongBrakes=true;if kL<=a6+bI*jU/2 and bH:project_on_plane(bJ):normalize():dot(cZ:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d1()end end;LastDistanceToTarget=kL end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or IntoOrbit or Reentry)then if not by and not IntoOrbit then bw=HoldAltitude;bv=true;if VectorToTarget then bu.VectorToTarget=true end;cu()VectorToTarget=false;bs=true end end;if bi and at>0.01 and ap==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then cT(bH)kt=r(bP-jW,bP-PitchStallAngle*0.80,bP+PitchStallAngle*0.80)end;U=kH;local dd=-1;if BrakeLanding then kt=0;local kW=false;local kX=30;if b9~=nil and b9>0 then local kT=0;local fV=r(at,0.4,2)local kQ=LastMaxBrakeInAtmo*r(bI/100,0.1,1)*fV;local kY=b9*fV+kQ+kT-bW;local kZ=kQ/2+kT-bW;local k_=bI-math.sqrt(c(kZ/2)*20/(0.5*l()))*utils.sign(kZ)if k_<0 then k_=0 end;local l0;if bI>100 then local l1,_=b8.computeDistanceAndTime(bI,100,l(),0,0,kQ)local l2,_=b8.computeDistanceAndTime(100,0,l(),0,0,math.sqrt(kQ))l0=l1+l2 else l0=b8.computeDistanceAndTime(bI,0,l(),0,0,math.sqrt(kQ))end;if l0<20 then BrakeIsOn=false else local l3=0;if k_>100 then local l4,_=b8.computeDistanceAndTime(k_,100,l(),0,0,kY)local l5,_=b8.computeDistanceAndTime(100,0,l(),0,0,b9*fV+math.sqrt(kQ)+kT-bW)l3=l4+l5 else l3,_=b8.computeDistanceAndTime(k_,0,l(),0,0,b9*fV+math.sqrt(kQ)+kT-bW)end;l3=(l3+15+bI*jU)*1.1;local l6=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if l6 then local k0=planet:getAltitude(CustomTarget.position)local l7=au-k0-100;local cZ=CustomTarget.position-bK;local l8=math.sqrt(cZ:len()^2-(au-k0)^2)if l8>100 then l6=false elseif l7<=l3 or l3==-1 then BrakeIsOn=true;kW=true else BrakeIsOn=false;kW=true end end;if not l6 and CalculateBrakeLandingSpeed then if l3>=kX then BrakeIsOn=true else BrakeIsOn=false end;kW=true end end end;if not bO then bR(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)dd=ap;if dd>-1 then be=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-cB)<0.999 then BrakeIsOn=true elseif dX<-brakeLandingRate and not kW then BrakeIsOn=true elseif not kW then BrakeIsOn=false end end;if AutoTakeoff or an then local fj,fl,fk;if AutopilotTargetCoords~=nil then fj,fl,fk=b7:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(fm)return fm.radius+fm.noAtmosphericDensityAltitude end)end;if bM then if au>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;bR(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kt)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bO and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif an and bI<Q then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;bR(0)elseif an then bR(0)BrakeIsOn=true end elseif an and at==0 and aa~=nil and(fj==nil or fj.name==aa.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bO then bR(0)end;AutopilotAccelerating=true end end;local l9=cq()>-1;local la=bP;if(VectorToTarget or an)and not l9 and bI>minRollVelocity and at>0.01 then local kM=math.rad(c(bQ))la=bP*c(math.cos(kM))+jW*math.sin(kM)end;local lb=r(kt-la,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then lb=r(kt-la,-85,MaxPitch)elseif at<0.01 then lb=r(kt-la,-MaxPitch,MaxPitch)end;if c(bQ)<5 or VectorToTarget or BrakeLanding or l9 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lb)local ku=pitchPID:get()U=U+ku end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function lc(ld,kC)local le=vec3()local lf=vec3()if ld==axisCommandId.longitudinal then le=vec3(core.getConstructOrientationForward())lf=bF elseif ld==axisCommandId.vertical then le=vec3(core.getConstructOrientationUp())lf=bE elseif ld==axisCommandId.lateral then le=vec3(core.getConstructOrientationRight())lf=bG else return vec3()end;local lg=vec3(core.getWorldGravity())local lh=lg:dot(lf)local li=vec3(core.getWorldAirFrictionAcceleration())local lj=li:dot(lf)local lk=vec3(core.getVelocity())local ll=lk:dot(le)local lm=kC*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lm-ll)local ln=targetSpeedPID2:get()local lo=(ln-lj-lh)*lf;return lo end;local function lp(ld,kC)local le=vec3()local lf=vec3()if ld==axisCommandId.longitudinal then le=vec3(core.getConstructOrientationForward())lf=bF elseif ld==axisCommandId.vertical then le=vec3(core.getConstructOrientationUp())lf=bE elseif ld==axisCommandId.lateral then le=vec3(core.getConstructOrientationRight())lf=bG else return vec3()end;local lg=vec3(core.getWorldGravity())local lh=lg:dot(lf)local li=vec3(core.getWorldAirFrictionAcceleration())local lj=li:dot(lf)local lk=vec3(core.getVelocity())local ll=lk:dot(le)local lm=kC*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lm-ll)local ln=targetSpeedPID:get()local lo=(ln-lj-lh)*lf;return lo end;local function lq(lr,d_,c5)local ls=lr:cross(c5):normalize_inplace()local eK=math.acos(r(ls:dot(-d_),-1,1))*constants.rad2deg;if ls:cross(-d_):dot(c5)<0 then eK=-eK end;return eK end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bM and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bO=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bO and M then bR(0)M=false elseif not bO and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lt=r(T+U+system.getControlDeviceForwardInput(),-1,1)local lu=r(W+Z+system.getControlDeviceYawInput(),-1,1)local lv=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local lw=Y;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()bQ=getRoll(bJ,bF,bG)local lx=bQ/180*math.pi;local ly=math.cos(lx)local lz=math.sin(lx)bP=lq(bJ,bF,bG*ly+bE*lz)local lA=bH:normalize()local lB=getRoll(bJ,bF,bG)local lC=c(lB)local lD=utils.sign(lB)local lE=vec3(core.getWorldAngularVelocity())local lF=lt*pitchSpeedFactor*bG+lu*rollSpeedFactor*bF+lv*yawSpeedFactor*bE;if bJ:len()>0.01 and(at>0.0 or ProgradeIsOn or Reentry or am or AltitudeHold or IntoOrbit)then if be==true and c(bk-lB)>autoRollRollThreshold and lu==0 and c(bP)<85 then local lG=bk;local lH=autoRollFactor;if at==0 then lH=lH/4;bk=0;lG=0 end;if rollPID==nil then rollPID=pid.new(lH*0.01,0,lH*0.1)end;rollPID:inject(lG-lB)local lI=rollPID:get()lF=lF+lI*bF end end;if bJ:len()>0.01 and at>0.0 then local lJ=20.0;if turnAssist==true and lC>lJ and lt==0 and lv==0 then local lK=turnAssistFactor*0.1;local lL=turnAssistFactor*0.025;local lM=(lC-lJ)/(180-lJ)*180;local lN=0;if lM<90 then lN=lM/90 elseif lM<180 then lN=(180-lM)/90 end;lN=lN*lN;local lO=-lD*lL*(1.0-lN)local lP=lK*lN;lF=lF+lP*bG+lO*bE end end;local lQ=1;local lR=0;local lS=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bn=r(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bn=r(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I-speedChangeLarge/100,-1,1),2)end end;J=0;local dX=-bJ:dot(bH)if as and AtmoSpeedAssist and bO then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local lT=throttlePID:get()L=r(lT,-1,1)if L<I and at>0.005 then K=true;s:setThrottleCommand(axisCommandId.longitudinal,r(L,0.01,1))else K=false;s:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local lU=r(brakePID:get(),0,1)if at>0 and dX<-80 or at>0.005 then J=lU end;if J>0 then if K and L==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else L=r(L,0.01,1)end;local lV=''local lW=vec3()local lX=lc(axisCommandId.vertical,ae*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lX,lR)local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=s:getAxisCommandType(axisCommandId.longitudinal)local l_=s:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)local m0=lp(axisCommandId.lateral,LeftAmount*1000)lV=lV..' , '.."lateral airfoil , lateral ground "lW=lW+m0;if lW:len()>constants.epsilon then Nav:setEngineForceCommand(lV,lW,lR,'','','',lS)end;Nav:setEngineForceCommand(lY,l_,lQ)local m1='thrust analog vertical fueled 'local m2='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m1,lX,lQ)else Nav:setEngineForceCommand(m1,vec3(),lQ)end;if LeftAmount~=0 then Nav:setEngineForceCommand(m2,m0,lQ)else Nav:setEngineForceCommand(m2,vec3(),lQ)end;if lw==0 then lw=J end;local m3=-lw*(brakeSpeedFactor*bH+brakeFlatFactor*lA)Nav:setEngineForceCommand('brake',m3)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,I)end;local kC=unit.getAxisCommandValue(0)if not bO then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-kC/3.6)local lU=r(brakePID:get(),0,1)lw=r(lw+lU,0,1)end;local m3=-lw*(brakeSpeedFactor*bH+brakeFlatFactor*lA)Nav:setEngineForceCommand('brake',m3)local lV=''local lW=vec3()local m4=false;local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=s:getAxisCommandType(axisCommandId.longitudinal)if lZ==axisCommandType.byThrottle then local l_=s:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)Nav:setEngineForceCommand(lY,l_,lQ)elseif lZ==axisCommandType.byTargetSpeed then local l_=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lV=lV..' , '..lY;lW=lW+l_;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m4=true end end;local m2='thrust analog lateral 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;local m5=s:getAxisCommandType(axisCommandId.lateral)if m5==axisCommandType.byThrottle then local m6=s:composeAxisAccelerationFromThrottle(m2,axisCommandId.lateral)Nav:setEngineForceCommand(m2,m6,lQ)elseif m5==axisCommandType.byTargetSpeed then local m0=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lV=lV..' , '..m2;lW=lW+m0 end;local m1='thrust analog vertical 'if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;local m7=s:getAxisCommandType(axisCommandId.vertical)if m7==axisCommandType.byThrottle then local lX=s:composeAxisAccelerationFromThrottle(m1,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m1,lX,lQ,'airfoil','ground','',lS)else Nav:setEngineForceCommand(m1,vec3(),lQ)Nav:setEngineForceCommand('airfoil vertical',lX,lQ,'airfoil','','',lS)Nav:setEngineForceCommand('ground vertical',lX,lQ,'ground','','',lS)end elseif m7==axisCommandType.byTargetSpeed then if ae<0 then Nav:setEngineForceCommand('hover',vec3(),lQ)end;local m8=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lV=lV..' , '..m1;lW=lW+m8 end;if lW:len()>constants.epsilon then if Y~=0 or m4 or c(lA:dot(bF))<0.8 then lV=lV..', brake'end;Nav:setEngineForceCommand(lV,lW,lR,'','','',lS)end end;local m9=torqueFactor*(lF-lE)local ma=vec3(core.getWorldAirFrictionAngularAcceleration())m9=m9-ma;Nav:setEngineTorqueCommand('torque',m9,lQ,'airfoil','','',lS)Nav:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local bZ=vec3(core.getVelocity()):len()local mb=0.15;if not bO then local mc=s:getTargetSpeed(axisCommandId.longitudinal)if bZ*3.6>mc*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bZ*3.6<mc*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jr=unit.getThrottle()if AtmoSpeedAssist then jr=I*100 end;local kC=jr/100;if j==0 then kC=kC*MaxGameVelocity;if bZ>=kC*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bZ<kC*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kI=d(bn)kC=kC*kI/3.6;if bZ>=kC*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bZ<kC*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cl=coroutine.resume(beginSetup)if cl then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(md)local function me()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function mf()if LockPitch==nil then LockPitch=bP;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function mg()if aq then aq=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;am=false;an=false;R=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else aq=true end end;if md=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bR(0)if(vBooster or hover)and ap==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then Nav.control.extendLandingGears()end else if S then Nav.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif md=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif md=="forward"then T=T-1 elseif md=="backward"then T=T+1 elseif md=="left"then W=W-1 elseif md=="right"then W=W+1 elseif md=="yawright"then X=X-1 elseif md=="yawleft"then X=X+1 elseif md=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif md=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif md=="up"then ae=ae+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif md=="down"then ae=ae-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif md=="groundaltitudeup"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end else s:updateTargetGroundAltitudeFromActionStart(1.0)end elseif md=="groundaltitudedown"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end else s:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif md=="option1"then cA()toggleView=false elseif md=="option2"then cA(1)toggleView=false elseif md=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;me()toggleView=false elseif md=="option4"then cC()toggleView=false elseif md=="option5"then mf()toggleView=false elseif md=="option6"then cv()toggleView=false elseif md=="option7"then toggleView=false elseif md=="option8"then cw()toggleView=false elseif md=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif md=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;bd=false;bc=false end elseif md=="brake"then if BrakeToggleStatus then cP()elseif not BrakeIsOn then cP()else BrakeIsOn=true end elseif md=="lalt"then AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif md=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a5 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a5=false end elseif md=="stopengines"then s:resetCommand(axisCommandId.longitudinal)mg()I=0 elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cA()end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cA(1)end elseif md=="antigravity"and not ExternalAGG then if antigrav~=nil then d6()end end end;function script.onActionStop(md)if md=="forward"then T=0 elseif md=="backward"then T=0 elseif md=="left"then W=0 elseif md=="right"then W=0 elseif md=="yawright"then X=0 elseif md=="yawleft"then X=0 elseif md=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif md=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif md=="up"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif md=="down"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif md=="groundaltitudeup"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="lshift"then if y()==1 then a1=false;af=0;ag=0;x(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a1=false;bd=false;bc=false end elseif md=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cP()else BrakeIsOn=false end end elseif md=="lalt"then if m()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(md)if md=="groundaltitudeup"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(d2)local function mh()for c1,c2 in pairs(a)do dbHud_1.setStringValue(c2,g(nil))end;for c1,c2 in pairs(b)do if c2~="SavedLocations"then dbHud_1.setStringValue(c2,g(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5;aJ=false;ad=true end;local function mi(mj,planet,fU)local function mk(fU)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gp='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gC,gD,cf,cg,ce=o(fU,gp)if gC=="0"and gD=="0"then return vec3(tonumber(cf),tonumber(cg),tonumber(ce))end;cg=math.rad(cg)cf=math.rad(cf)local planet=b1[tonumber(gC)][tonumber(gD)]local ho=math.cos(cf)local ml=vec3(ho*math.cos(cg),ho*math.sin(cg),math.sin(cf))return planet.center+(planet.radius+ce)*ml end;if dbHud_1 then local cJ={}local position=mk(fU)if planet.name=="Space"then cJ={position=position,name=mj,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cJ={position=position,name=mj,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cJ;table.insert(b1[0],cJ)c0()else a2="Databank must be installed to save locations"end end;local i;local mm="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mn,mo=nil,nil;local mp="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(d2," ")mn=d2;if i~=nil then mn=string.sub(d2,0,i-1)mo=string.sub(d2,i+1)end;if mn=="/help"or mn=="/commands"then for g3 in string.gmatch(mp,"([^\n]+)")do system.print(g3)end;return elseif mn=="/setname"then if mo==nil or mo==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cG(mo)else a2="Select a saved target to rename first"end elseif mn=="/addlocation"then if mo==nil or mo==""or string.find(mo,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mo,"::")local mj=string.sub(mo,1,i-2)local fU=string.sub(mo,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gp='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gC,gD,cf,cg,ce=o(fU,gp)local planet=b1[tonumber(gC)][tonumber(gD)]mi(mj,planet,fU)a2="Added "..mj.." to saved locations,\nplanet "..planet.name.." at "..fU;ah=5 elseif mn=="/agg"then if mo==nil or mo==""then a2="Usage: ah-agg targetheight"return end;mo=tonumber(mo)if mo<1000 then mo=1000 end;AntigravTargetAltitude=mo;a2="AGG Target Height set to "..mo elseif mn=="/G"then if mo==nil or mo==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mo=="dump"then for c1,c2 in pairs(a)do if type(_G[c2])=="boolean"then if _G[c2]==true then system.print(c2 .." true")else system.print(c2 .." false")end elseif _G[c2]==nil then system.print(c2 .." nil")else system.print(c2 .." ".._G[c2])end end;return end;i=string.find(mo," ")local mq=string.sub(mo,0,i-1)local mr=string.sub(mo,i+1)for c1,c2 in pairs(a)do if c2==mq then a2="Variable "..mq.." changed to "..mr;local ms=type(_G[c2])if ms=="number"then mr=tonumber(mr)elseif ms=="boolean"then if string.lower(mr)=="true"then mr=true else mr=false end end;_G[c2]=mr;return end end;a2="No such global variable: "..mq elseif mn=="/copydatabank"then if dbHud_2 then df(true)else a2="Spare Databank required to copy databank"end elseif mn=="/wipedatabank"then if dbHud_1 then mh()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
