name: ArchHud - Archaegeo v1.516 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        AutoShieldToggle = true --export:
        PreventPvP = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.2 --export:
        LowOrbitHeight = 2000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        WipeDamage = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 0 --export:
        OrbitMapY = 25 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)local b=require("atlas")script={}VERSION_NUMBER=1.516;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"LastVersionUpdate=0.000;local c={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra","SelectedTab"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local y=math.sqrt;local z=tonumber;local core=core;local function A(B,C)local D=10^(C or 0)return e(B*D+0.5)/D end;local E=q()local F=q()local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8=0;local a9=0;local aa=0;local ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=k()>0;local ar=k()local as=core.getAltitude()local at=core.getElementIdList()local au=q()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]local az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=q()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=50000;local bJ=""local bK=nil;local bL={}local bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local bN=false;local bO=nil;local bP={}local bQ="Atmo"local bR=false;local bS=0;local bT={}function p(bU)system.print(E..": "..bU)end;local function bV(bW)local D=1;if bW then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn and aw then local bX=K;K=A(r(K+D*speedChangeLarge/100,-1,1),2)if K>=0 and bX<0 then K=0;aw=false end elseif AltIsOn then if ar>0 or Reentry then b7=r(b7+D*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+D*speedChangeLarge/3.6*100,0,8333.00)end else s:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if Autopilot or VectorToTarget or am or IntoOrbit then bS=bS+1*D*-1;if bS>#bG then bS=1 end;if bS<1 then bS=#bG end else if not bW then D=1 else D=nil end;aW.adjustAutopilotTargetIndex(D)end end end;local function bY(bZ)local b_,c0,c1=aR:getPlanetarySystem(0):castIntersections(bv,bZ,function(c2)if c2.noAtmosphericDensityAltitude>0 then return c2.radius+c2.noAtmosphericDensityAltitude else return c2.radius+c2.surfaceMaxAltitude*1.5 end end)local c3=c0;if c1~=nil and c0~=nil then c3=math.min(c1,c0)end;if c3~=nil then return b_,c3 else return nil,nil end end;local function c4(c5,c6,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c5 .."|"..c6 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c5 .."|"..c6 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c5 .."|"..c6 .."|"..soundVolume)end end;local function c7(c8,c9)for i=1,#c9 do c8[#c8+1]=c9[i]end;return c8 end;local function ca(cb)local cc={}local cd={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","voices","alerts","CollisionSystem","AutoShieldToggle","PreventPvP"}local ce={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization","WipeDamage"}local cf={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local cg={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not cb then c7(cc,cd)c7(cc,ce)c7(cc,cf)c7(cc,cg)return cc elseif cb=="boolean"then return cd elseif cb=="handling"then return ce elseif cb=="hud"then return cf elseif cb=="physics"then return cg end end;local function ch(ci,cj,ck,cl,cm)if cl==nil then cl=""end;if cm==nil then cm=""end;return f([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cl,ci,cj,cm,ck)end;local function cn(co,cp)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not cp then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,co)K=r(A(co*100,0)/100,-1,1)bz=nil end;local function cq(co,cp)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cp then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,co)bz=co end;local function cr(cs,ct)if cs==0 then return d(ct)<1e-09 end;if ct==0 then return d(cs)<1e-09 end;return d(cs-ct)<math.max(d(cs),d(ct))*epsilon end;local function cu(aj,cv)local cw=aj>100000;if cv==nil then cv=1 end;if cw then return A(aj/1000/200,cv).."SU"elseif aj<1000 then return A(aj,cv).."M"else return A(aj/1000,cv).."KM"end end;local function cx()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cq(e(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cy()bi=false;ba=nil;bb=nil;bm=0;if ar==0 then if IntoOrbit then c4("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bM then c4("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cz()if E-b5<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;c4("11","EP")else if bM then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cy()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=E end;if bM and ar==0 then bg=as;bf=true;bc=true;cy()if IntoOrbit then b5=E else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b0=true;LockPitch=nil;bi=false;if ao~=-1 and bs<20 then c4("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then cx()end else c4("altOn","AH")AutoTakeoff=false;if b5>-1 then if bM then HoldAltitude=as end end;if VertTakeOff then cx()end end;if am then HoldAltitude=100000 end else c4("altOff","AH")if IntoOrbit then cy()end;if VertTakeOff then cx()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cA(cB)if cB then am=false;Autopilot=false;AutopilotRealigned=false;P=false;HoldAltitude=as;TargetSet=false end;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bK=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cx()end;if IntoOrbit then cy()end;b0=autoRollPreference;al=false;an=false;af=0 end;local function cC()local function cD(SpaceTarget)bN=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cz()end end;VectorStatus="Proceeding to Waypoint"end;if E-b6<1.5 and ar>0 then if not bl then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;c4("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then c4("apSpc","AP")if ar~=0 then am=true;cz()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then c4("vtt","AP")cD(SpaceTarget)end else c4("apOn","AP")if not(ac.name==planet.name and as<AutopilotTargetOrbit*1.5)then bi=false;Autopilot=true elseif not aq then if IntoOrbit then cy()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cy()end end end else c4("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cz()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bM)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cy()else c4("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else c4("apP","AP")am=true;cz()end else c4("apOff","AP")cA(1)end end;local function cE()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then c4("bkOn","B",1)cA()else c4("bkOff","B",1)end end;local function cF()if Reentry then a2="Re-Entry cancelled"c4("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;c4("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local ck=cu(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..ck;c4("glide","RE")cq(e(b7))end;AutoTakeoff=false end;local function cG()if antigrav and not ExternalAGG then if by then c4("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;c4("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cH(cI)local cJ=0;local cK=0;local cL=0;if cI<60 then cI=e(cI)elseif cI<3600 then cJ=e(cI/60)cI=e(cI%60)elseif cI<86400 then cK=e(cI/3600)cJ=e(cI%3600/60)else cL=e(cI/86400)cK=e(cI%86400/3600)end;if cL>0 then return cL.."d "..cK.."h "elseif cK>0 then return cK.."h "..cJ.."m "elseif cJ>0 then return cJ.."m "..cI.."s"elseif cI>0 then return cI.."s"else return"0s"end end;local function cM(cN)local function cO(cP)for cQ,cR in pairs(cP)do dbHud_1.setStringValue(cR,h(_G[cR]))if cN and dbHud_2 then dbHud_2.setStringValue(cR,h(_G[cR]))end end end;if dbHud_1 then cO(c)cO(ca())system.print("Saved Variables to Datacore")if cN and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cS(cR)if aG==1920 then return cR else return A(aG*cR/1920,0)end end;local function cT(cR)if aH==1080 then return cR else return A(aH*cR/1080,0)end end;local function cU()local function cV(cW)return type(cW)=='number'end;local function cX(cW)return type(z(cW))=='number'end;local function cY(cZ)return type(cZ)=='table'end;local function c_(d0)return type(d0)=='string'end;local function d1(cR)return cY(cR)and cV(cR.x and cR.y and cR.z)end;local function d2(d3)return cY(d3)and cV(d3.latitude and d3.longitude and d3.altitude and d3.id and d3.systemId)end;local d4=math.pi/180;local d5=180/math.pi;local epsilon=1e-10;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d6='::pos{'..B..','..B..','..B..','..B..','..B..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function d7(cW)local d8=string.gsub(string.reverse(f('%.4f',cW)),'^0*%.?','')return d8==''and'0'or string.reverse(d8)end;local function d9(da)if d1(da)then return f('{x=%.3f,y=%.3f,z=%.3f}',da.x,da.y,da.z)end;if cY(da)and not getmetatable(da)then local db={}local dc=next(da)if type(dc)=='nil'or dc==1 then db=da else for cQ,cR in pairs(da)do local co=d9(cR)if type(cQ)=='number'then table.insert(db,f('[%s]=%s',cQ,co))else table.insert(db,f('%s=%s',cQ,co))end end end;return f('{%s}',table.concat(db,','))end;if c_(da)then return f("'%s'",da:gsub("'",[[\']]))end;return tostring(da)end;local dd={}dd.__index=dd;dd.__tostring=function(da,de)local df={}for cQ in pairs(da)do table.insert(df,cQ)end;table.sort(df)local db={}for _,cQ in ipairs(df)do local co=d9(da[cQ])if type(cQ)=='number'then table.insert(db,f('[%s]=%s',cQ,co))else table.insert(db,f('%s=%s',cQ,co))end end;if de then return f('%s%s',de,table.concat(db,',\n'..de))end;return f('{%s}',table.concat(db,','))end;dd.__eq=function(dg,dh)return dg.systemId==dh.systemId and dg.id==dh.id and cr(dg.radius,dh.radius)and cr(dg.center.x,dh.center.x)and cr(dg.center.y,dh.center.y)and cr(dg.center.z,dh.center.z)and cr(dg.GM,dh.GM)end;local function di(dj,dk,dl,dm,dn)assert(cX(dj),'Argument 1 (systemId) must be a number:'..type(dj))assert(cX(dk),'Argument 2 (id) must be a number:'..type(dk))assert(cX(dl),'Argument 3 (radius) must be a number:'..type(dl))assert(cY(dm),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dm))assert(cX(dn),'Argument 5 (GM) must be a number:'..type(dn))return setmetatable({systemId=z(dj),id=z(dk),radius=z(dl),center=vec3(dm),GM=z(dn)},dd)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return f('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,d7(p.latitude*d5),d7(p.longitude*d5),d7(p.altitude))end;MapPosition.__eq=function(dg,dh)return dg.id==dh.id and dg.systemId==dh.systemId and cr(dg.latitude,dh.latitude)and cr(dg.altitude,dh.altitude)and(cr(dg.longitude,dh.longitude)or cr(dg.latitude,math.pi/2)or cr(dg.latitude,-math.pi/2))end;local function dp(dq,dk,dr,ds,dt)local dj=dq;if c_(dq)and not ds and not dt and not dk and not dr then dj,dk,dr,ds,dt=o(dq,d6)assert(dj,'Argument 1 (position string) is malformed.')else assert(cX(dj),'Argument 1 (systemId) must be a number:'..type(dj))assert(cX(dk),'Argument 2 (id) must be a number:'..type(dk))assert(cX(dr),'Argument 3 (latitude) must be in degrees:'..type(dr))assert(cX(ds),'Argument 4 (longitude) must be in degrees:'..type(ds))assert(cX(dt),'Argument 5 (altitude) must be in meters:'..type(dt))end;dj=z(dj)dk=z(dk)dr=z(dr)ds=z(ds)dt=z(dt)if dk==0 then return setmetatable({latitude=dr,longitude=ds,altitude=dt,id=dk,systemId=dj},MapPosition)end;return setmetatable({latitude=d4*r(dr,-90,90),longitude=d4*(ds%360),altitude=dt,id=dk,systemId=dj},MapPosition)end;local du={}du.__index=du;du.__tostring=function(da,de)local dv=de and de..'  'local dw={}local df={}for cQ in pairs(da)do table.insert(df,cQ)end;table.sort(df)for _,dx in ipairs(df)do bdy=da[dx]local dy=dd.__tostring(bdy,dv)if de then table.insert(dw,f('[%s]={\n%s\n%s}',dx,dy,de))else table.insert(dw,f('  [%s]=%s',dx,dy))end end;if de then return f('\n%s%s%s',de,table.concat(dw,',\n'..de),de)end;return f('{\n%s\n}',table.concat(dw,',\n'))end;local function dz(dA)local b={}local pid;for _,cR in pairs(dA)do local dk=cR.planetarySystemId;if type(dk)~='number'then error('Invalid planetary system ID: '..tostring(dk))elseif pid and dk~=pid then error('Mistringmatch planetary system IDs: '..dk..' and '..pid)end;local dB=cR.bodyId;if type(dB)~='number'then error('Invalid body ID: '..tostring(dB))elseif b[dB]then error('Duplicate body ID: '..tostring(dB))end;setmetatable(cR.center,getmetatable(vec3.unit_x))b[dB]=setmetatable(cR,dd)pid=dk end;return setmetatable(b,du)end;aQ={}local function dC(dA)return setmetatable({galaxyAtlas=dA or{}},aQ)end;aQ.__index=function(cZ,i)if type(i)=='number'then local system=cZ.galaxyAtlas[i]return dz(system)end;return rawget(aQ,i)end;aQ.__pairs=function(da)return function(cZ,cQ)local dD,nv=next(cZ,cQ)return dD,nv and dz(nv)end,da.galaxyAtlas,nil end;aQ.__tostring=function(da)local dE={}for _,dF in pairs(da or{})do local dG=dF:getPlanetarySystemId()local dH=du.__tostring(dF,'    ')table.insert(dE,f('  [%s]={%s\n  }',dG,dH))end;return f('{\n%s\n}\n',table.concat(dE,',\n'))end;aQ.BodyParameters=di;aQ.MapPosition=dp;aQ.PlanetarySystem=dz;function aQ.createBodyParameters(dj,dk,dI,dJ,dK,dL,dM)assert(cX(dj),'Argument 1 (systemId) must be a number:'..type(dj))assert(cX(dk),'Argument 2 (id) must be a number:'..type(dk))assert(cX(dI),'Argument 3 (surfaceArea) must be a number:'..type(dI))assert(cY(dJ),'Argument 4 (aPosition) must be an array or vec3:'..type(dJ))assert(cY(dK),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dK))assert(cX(dL),'Argument 6 (altitude) must be in meters:'..type(dL))assert(cX(dM),'Argument 7 (gravityAtPosition) must be number:'..type(dM))local dl=y(dI/4/math.pi)local aj=dl+dL;local dN=vec3(dJ)+aj*vec3(dK)local dn=dM*aj*aj;return di(dj,dk,dl,dN,dn)end;aQ.isMapPosition=d2;function aQ:getPlanetarySystem(dq)if i==nil then i=0 end;if nv==nil then nv=0 end;local dj=dq;if d2(dq)then dj=dq.systemId end;if type(dj)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=du then system=dz(system)end;return system end end end;function du:sizeCalculator(c2)return 1.05*c2.radius end;function du:castIntersections(dO,dP,dQ,dR,dS,dT)local dU={}local dV=dS or self;for _,c2 in pairs(dV)do table.insert(dU,c2)end;if not dT then table.sort(dU,function(dW,dX)return(dW.center-dO):len()<(dX.center-dO):len()end)end;local dY=dP:normalize()for _,c2 in ipairs(dU)do local dZ=c2.center-dO;local dl=self:sizeCalculator(c2)local d_=dZ:dot(dY)local e0=d_^2-(dZ:len2()-dl^2)if e0>=0 then local e1=y(e0)local c0=d_+e1;local c1=d_-e1;if c1>0 then return c2,c0,c1 elseif c0>0 then return c2,c0,nil end end end;return nil,nil,nil end;function du:closestBody(e2)assert(type(e2)=='table','Invalid coordinates.')local e3,c2;local e4=vec3(e2)for _,e5 in pairs(self)do local e6=(e5.center-e4):len2()if(not c2 or e6<e3)and e5.name~="Space"then c2=e5;e3=e6 end end;return c2 end;function du:convertToBodyIdAndWorldCoordinates(dq)local e7=dq;if c_(dq)then e7=dp(dq)end;if e7.id==0 then return 0,vec3(e7.latitude,e7.longitude,e7.altitude)end;local e5=self:getBodyParameters(e7)if e5 then return e7.id,e5:convertToWorldCoordinates(e7)end end;function du:getBodyParameters(dq)local dk=dq;if d2(dq)then dk=dq.id end;assert(cX(dk),'Argument 1 (id) must be a number:'..type(dk))return self[dk]end;function du:getPlanetarySystemId()local _,cR=next(self)return cR and cR.systemId end;function dd:convertToMapPosition(dm)assert(cY(dm),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dm))local e8=vec3(dm)if self.id==0 then return setmetatable({latitude=e8.x,longitude=e8.y,altitude=e8.z,id=0,systemId=self.systemId},MapPosition)end;local e9=e8-self.center;local aj=e9:len()local dt=aj-self.radius;local dr=0;local ds=0;if not cr(aj,0)then local ea=n(e9.y,e9.x)ds=ea>=0 and ea or 2*math.pi+ea;dr=math.pi/2-math.acos(e9.z/aj)end;return setmetatable({latitude=dr,longitude=ds,altitude=dt,id=self.id,systemId=self.systemId},MapPosition)end;function dd:convertToWorldCoordinates(dq)local e7=c_(dq)and dp(dq)or dq;if e7.id==0 then return vec3(e7.latitude,e7.longitude,e7.altitude)end;assert(d2(e7),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e7.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e7.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local eb=math.cos(e7.latitude)return self.center+(self.radius+e7.altitude)*vec3(eb*math.cos(e7.longitude),eb*math.sin(e7.longitude),math.sin(e7.latitude))end;function dd:getAltitude(dm)return(vec3(dm)-self.center):len()-self.radius end;function dd:getDistance(dm)return(vec3(dm)-self.center):len()end;function dd:getGravity(dm)local ec=self.center-vec3(dm)local ed=ec:len2()return self.GM/ed*ec/y(ed)end;return setmetatable(aQ,{__call=function(_,...)return dC(...)end})end;local function ee()local aS={}local ef=30000000/3600;local eg=ef*ef;local eh=100;function aS.computeAccelerationTime(ei,ej,ek)local el=ef*math.asin(ei/ef)return(ef*math.asin(ek/ef)-el)/ej end;function aS.computeDistanceAndTime(ei,ek,em,en,eo,ep)eo=eo or 0;ep=ep or 0;local eq=ei<=ek;local er=en*(eq and 1 or-1)/em;local es=-ep/em;local et=er+es;if eq and et<=0 or not eq and et>=0 then return-1,-1 end;local eu,ev=0,0;if er~=0 and eo>0 then local el=math.asin(ei/ef)local ew=math.pi*(er/2+es)local ex=er*eo;local ey=ef*math.pi;local cR=function(cZ)local ez=(ew*cZ-ex*math.sin(math.pi*cZ/2/eo)+ey*el)/ey;local eA=math.tan(ez)return ef*eA/y(eA*eA+1)end;local eB=eq and function(d0)return d0>=ek end or function(d0)return d0<=ek end;ev=2*eo;if eB(cR(ev))then local eC=0;while d(ev-eC)>0.5 do local cZ=(ev+eC)/2;if eB(cR(cZ))then ev=cZ else eC=cZ end end end;local eD=ei;local eE=ev/eh;for eF=1,eh do local eG=cR(eF*eE)eu=eu+(eG+eD)*eE/2;eD=eG end;if ev<2*eo then return eu,ev end;ei=eD end;local el=ef*math.asin(ei/ef)local E=(ef*math.asin(ek/ef)-el)/et;local eH=eg*math.cos(el/ef)/et;local aj=eH-eg*math.cos((et*E+el)/ef)/et;return aj+eu,E+ev end;function aS.computeTravelTime(ei,ej,aj)if aj==0 then return 0 end;if ej>0 then local el=ef*math.asin(ei/ef)local eH=eg*math.cos(el/ef)/ej;return(ef*math.acos(ej*(eH-aj)/eg)-el)/ej end;if ei==0 then return-1 end;assert(ei>0,'Acceleration and initial speed are both zero.')return aj/ei end;return aS end;local function eI()local vec3=require('cpml.vec3')local cU=cU()local function c_(d0)return type(d0)=='string'end;local function cY(cZ)return type(cZ)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dt)assert(self.body)local aj=dt+self.body.radius;if not cr(aj,0)then local orbit=y(self.body.GM/aj)return y(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dq,eJ)assert(self.body)assert(cY(dq)or c_(dq))assert(cY(eJ))local eK=(c_(dq)or cU.isMapPosition(dq))and self.body:convertToWorldCoordinates(dq)or vec3(dq)local cR=vec3(eJ)local eL=eK-self.body.center;local eM=cR:len2()local eN=eL:len()local eO=self.body.GM;local eP=((eM-eO/eN)*eL-eL:dot(cR)*cR)/eO;local cs=eO/(2*eO/eN-eM)local eQ=eP:len()local dY=eP:normalize()local eR=cs*(1-eQ)local eS=cs*(1+eQ)local eT=eR*dY+self.body.center;local eU=eQ<=1 and-eS*dY+self.body.center or nil;local eV=y(cs*eO*(1-eQ*eQ))local eW=eU and 2*math.pi*y(cs^3/eO)local eX=math.acos(eP:dot(eL)/(eQ*eN))if eL:dot(cR)<0 then eX=-(eX-2*math.pi)end;local eY=math.acos((math.cos(eX)+eQ)/(1+eQ*math.cos(eX)))local eZ=eY;if eZ<0 then eZ=eZ+2*math.pi end;local e_=eZ-eQ*math.sin(eZ)local f0=0;local f1=0;local f2=0;if eW~=nil then f0=e_/(2*math.pi/eW)f1=eW-f0;f2=f1+eW/2;if eX-math.pi>0 then f1=f0;f2=f1+eW/2 end;if f2>eW then f2=f2-eW end end;return{periapsis={position=eT,speed=eV/eR,circularOrbitSpeed=y(eO/eR),altitude=eR-self.body.radius},apoapsis=eU and{position=eU,speed=eV/eS,circularOrbitSpeed=y(eO/eS),altitude=eS-self.body.radius},currentVelocity=cR,currentPosition=eK,eccentricity=eQ,period=eW,eccentricAnomaly=eY,meanAnomaly=e_,timeToPeriapsis=f1,timeToApoapsis=f2}end;local function f3(f4)local e5=cU.BodyParameters(f4.systemId,f4.id,f4.radius,f4.center,f4.GM)return setmetatable({body=e5},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return f3(...)end})end;local function f5()local f6={}local f7={}local f8={XS=13,S=27,M=55,L=110,XL=221}local f9={}local fa;local fb;local fc;local fd;local fe;local function ff()local function fg(fh,fi,fj,fk,fl,fm,fn,fo)fi,fk,fm,fo=vec3(fi),vec3(fk),vec3(fm),vec3(fo)local fp,fq,fr=fh*fh,fj*fj,fl*fl;local eM=fk-fi;local fs=eM:normalize()local ft=eM:len()local fu=fm-fi;local fv=(fu-fu:project_on(fs)):normalize()local fw,fx=fu:dot(fs),fu:dot(fv)local fy=fw*fw+fx*fx;local fz=fs:cross(fv)local ci=(fp-fq+ft*ft)/(2*ft)local cj=(fp-fr+fy-2*fw*ci)/(2*fx)local d3=fp-ci^2-cj^2;local fA=y(d3)local fB=fi+fs*ci+fv*cj+fz*fA;local fC=fi+fs*ci+fv*cj-fz*fA;if d((fo-fB):len()-fn)<d((fo-fC):len()-fn)then return fB else return fC end end;local function fD()local function fE()local fF=core.getConstructWorldOrientationRight()local eM=core.getConstructWorldOrientationForward()local fu=core.getConstructWorldOrientationUp()local fG=library.systemResolution3(fF,eM,fu,{1,0,0})local fH=library.systemResolution3(fF,eM,fu,{0,1,0})local fI=library.systemResolution3(fF,eM,fu,{0,0,1})return function(fJ)return library.systemResolution3(fG,fH,fI,fJ)end end;local fK=fE()local fL=core.getConstructWorldPos()local eK=core.getElementPositionById(1)local fM={eK[1],eK[2],eK[3]}local fN=fK(fM)local fO={fL[1]-fN[1],fL[2]-fN[2],fL[3]-fN[3]}return fO end;local function fP(fQ,eN,fR)local fS=fQ.pts;local fT=#fS;local fU=fQ.ref;if fT>3 then local fV,fW,fX,fY=fS[fT],fS[fT-1],fS[fT-2],fS[fT-3]fQ.ref=fR;local eK=fg(fV[1],fV[2],fW[1],fW[2],fX[1],fX[2],fY[1],fY[2])local ci,cj,fA=eK.x,eK.y,eK.z;if ci==ci and cj==cj and fA==fA then ci=ci+fU[1]cj=cj+fU[2]fA=fA+fU[3]local fZ=vec3(ci,cj,fA)if not fQ.lastPos then fQ.center=fZ elseif(fQ.lastPos-fZ):len()<2 then fQ.center=fZ;fQ.skipCalc=true end;fQ.lastPos=fZ end;fQ.pts={}else local f_={fR[1]-fU[1],fR[2]-fU[2],fR[3]-fU[3]}fS[fT+1]={eN,f_}end end;if bP[1]then fa=#bP[1].getConstructIds()local g0=bP[1].getData()local g1=g0:gmatch('{"constructId[^}]*}[^}]*}')if fa>0 then local fR=fD()local g2,g3=0,0;fe,fd=0,0;for cR in g1 do local dk,aj,g4=cR:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local g5=f8[g4]aj=z(aj)if bP[1].hasMatchingTransponder(dk)==1 then table.insert(f7,dk)end;local g6=bP[1].getConstructType(dk)if CollisionSystem then if g5>27 or g6=="static"or g6=="space"then fe=fe+1;local g7=bP[1].getConstructName(dk)local fQ=bL[dk]if fQ==nil then g5=g5+G;bL[dk]={pts={},ref=fR,name=g7,i=0,radius=g5,skipCalc=false}fQ=bL[dk]end;if not fQ.skipCalc then fP(fQ,aj,fR)g3=g3+1 end;if fQ.center then table.insert(f9,fQ)end end;g2=g2+1;if bM and g2>700 or g3>70 or(not bM and g2>300 or g3>30)then coroutine.yield()g2,g3=0,0 end end end;fd=#f9;if fd>0 and bs>20 then local c2,g8,g9,ga;local gb=0;local gc=aR:getPlanetarySystem(0)ga=br:normalize()while gb<fd do coroutine.yield()local gd={table.unpack(f9,gb,math.min(gb+75,fd))}c2,g8,g9=gc:castIntersections(bv,ga,nil,nil,gd,true)if c2 and g9 then bO={c2,g8,g9}break end;gb=gb+75 end;if not c2 then bO=nil end else bO=nil end;f9={}fb=g0:find('identifiedConstructs":%[%]')else fc=g0:find('worksInEnvironment":false')end end end;local function ge()if bP[1]then bQ="Atmo"if bP[1].getData():find('worksInAtmosphere":false')then bQ="Space"end end end;function f6.pickType()ge()end;function f6.assignRadar()if radar_1 and bP[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then bP[1]=radar_2 end;if bP[1]==radar_2 then ge()end elseif radar_2 and bP[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then bP[1]=radar_1 end;if bP[1]==radar_1 then ge()end end end;function f6.UpdateRadar()local gf=coroutine.status(UpdateRadarCoroutine)if gf=="suspended"then local co,gg=coroutine.resume(UpdateRadarCoroutine)if gg then system.print("ERROR UPDATE RADAR: "..gg)end elseif gf=="dead"then UpdateRadarCoroutine=coroutine.create(ff)local co,gg=coroutine.resume(UpdateRadarCoroutine)end end;function f6.GetRadarHud()local gh=f7;f7={}return fb,fc,fa,fd,fe,gh end;UpdateRadarCoroutine=coroutine.create(ff)return f6 end;local function gi()local gj=9.80665;local gk={}local gl={}local gm=vec3({13771471,7435803,-128971})local gn=18000000;local go=500000;local gp,gq=math.huge;local gr;local function gs(gt)gp=vec3(gt):dist(gm)if gp<gn then return true,d(gp-gn)end;gq=vec3(gt):dist(vec3(planet.center))if gq<go then gr=true else gr=false end;if d(gq-go)<d(gp-gn)then return gr,d(gq-go)else return gr,d(gp-gn)end end;local function cS(cR)if aG==1920 then return cR else return A(aG*cR/1920,0)end end;local function cT(cR)if aH==1080 then return cR else return A(aH*cR/1080,0)end end;local function gu()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function gv()local gw="TRAVEL"if not bA then gw="CRUISE"end;if Autopilot then gw="AUTOPILOT"end;return gw end;local gx=""local gy=""local gz=""local gA=1;local gB=2;local gC=3;local gD=4;local gE=5;local gF=6;local gG=""local gH=0;local gI=e(1/apTickRate)*2*hudTickRate;local gJ={}local gK={}local gL={}local gM={}local gN={}local gO={}local function gP(ci,gQ,gR,gS,gT,gU)local gV=tankY;local gW=tankY+5;if not BarFuelDisplay then gW=gW+5 end;if m()==1 and not RemoteHud then gV=gV-50;gW=gW-50 end;if gR=="ATMO"then gG="atmofueltank"elseif gR=="SPACE"then gG="spacefueltank"else gG="rocketfueltank"end;gH=_G[gG.."_size"]if#gS>0 then for i=1,#gS do local g7=string.sub(gS[i][gB],1,12)local gX=0;for gY=1,gH do if gS[i][gB]==g(unit[gG.."_"..gY].getData()).name then gX=gY;break end end;local gZ=q()if gT[i]==nil or gU[i]==nil or gZ-gS[i][gF]>gI then local g_;local h0=0;if gX~=0 then gU[i]=g(unit[gG.."_"..gX].getData()).percentage;gT[i]=g(unit[gG.."_"..gX].getData()).timeLeft;if gT[i]=="n/a"then gT[i]=0 end else h0=l(gS[i][gA])-gS[i][gD]gU[i]=e(0.5+h0*100/gS[i][gC])g_=gS[i][gE]if g_<=h0 then gT[i]=0 else gT[i]=e(0.5+h0/((g_-h0)/(gZ-gS[i][gF])))end;gS[i][gE]=h0;gS[i][gF]=gZ end end;if g7==gQ then g7=f("%s %d",gR,i)end;if gX==0 then g7=g7 .." *"end;local h1;if gT[i]==0 then h1=""else h1=cH(gT[i])end;if gU[i]~=nil then local h2=e(gU[i]*2.55)local h3=f("rgb(%d,%d,%d)",255-h2,h2,0)local cl=""if h1~=""and gT[i]<120 or gU[i]<5 then cl="red "end;local h4=f("rgb(%d,%d,%d)",r(e((255-h2)/2.55),50,100),r(e(h2/2.55),0,50),50)if BarFuelDisplay then gy=gy..f([[
                                            <g class="pdim">                        
                                            <rect fill=%s class="bar" x="%d" y="%d" width="170" height="20"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="20" x="%d" y="%d"></rect>
                                            <text class="txtstart" fill="white" x="%d" y="%d" style="font-family:Play;font-size:14px">%s %s%% %s</text>
                                            </g>]],h4,ci,gW,h3,e(gU[i]*1.7+0.5),ci,gW,ci+5,gW+14,g7,gU[i],h1)gV=gV-22;gW=gW-22 else gy=gy..ch(ci,gV,g7,cl.."pdim txtfuel")gy=gy..ch(ci,gW,f("%d%% %s",gU[i],h1),"pdim txtfuel","fill:"..h3)gV=gV+30;gW=gW+30 end end end end;tankY=gV end;local function h5(h6,dt)if dt<200000 and not aq or dt and aq then local h7=0;if d(bu)>1 then h7=45*math.log(d(bu),10)if bu<0 then h7=-h7 end end;h6[#h6+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(bu),e(h7))end;return h6 end;local function h8(h9)local ha=-bt;h9=h9-h9:project_on(ha)local hb=vec3(0,0,1)hb=hb-hb:project_on(ha)local hc=hb:cross(ha)local h7=hb:angle_between(h9)*constants.rad2deg;if h9:dot(hc)<0 then h7=360-h7 end;return h7 end;local function hd(h6,centerX,centerY,he,hf,bM)local hg=circleRad;local hh=20;local hi=e(he)if bM then for i=-45,45,5 do local hj=i;h6[#h6+1]=f([[<g transform="rotate(%f,%d,%d)">]],hj,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;h6[#h6+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+hg+hh-len,centerX,centerY+hg+hh)end;h6[#h6+1]=ch(centerX,centerY+hg+hh-35,hf,"pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY+hg+hh-25,hi.." deg","pdim txt txtmid")h6[#h6+1]=f([[<g transform="rotate(%f,%d,%d)">]],-he,centerX,centerY)h6[#h6+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+hg+hh-20,centerX+5,centerY+hg+hh-20,centerX,centerY+hg+hh-15)h6[#h6+1]="</g>"end;h6[#h6+1]=[[<g style="clip-path: url(#headingClip);">]]local hk=hi;if bM then hk=h8(bo)end;local hl=20;local hm=e(hk)local hn=0;local ho=centerY+hg+hh+20;local hp=centerX;if hf~="YAW"then ho=cT(130)hp=cS(960)end;local hq=[[<path class="txttick line" d="]]local hr=e(hm-(hl+10)-hm%5+0.5)for i=hr+70,hr,-5 do local ci=hp-(-i*5+hk*5)if i%10==0 then hn=10;local B=i;if B==360 then B=0 elseif B>360 then B=B-360 elseif B<0 then B=B+360 end;h6[#h6+1]=ch(ci,ho+15,B,"txtmid bright")elseif i%5==0 then hn=5 end;if hn==10 then hq=f([[%s M %f %f v %d]],hq,ci,ho-5,hn)else hq=f([[%s M %f %f v %d]],hq,ci,ho-2.5,hn)end end;h6[#h6+1]=hq..[["/>]]h6[#h6+1]=f([[<<polygon class="bright" points="%d,%d %d,%d %d,%d"/>]],hp-5,ho-20,hp+5,ho-20,hp,ho-10)if bM then hf="HDG"end;h6[#h6+1]=ch(cS(960),cT(100),hm.."°","dim txt txtmid size14","")h6[#h6+1]=ch(cS(960),cT(85),hf,"dim txt txtmid size20","")h6[#h6+1]=[[</g>]]end;local function hs(h6,ht,he,centerX,centerY,bM,hu,eG)local hg=circleRad;local hv=e(hg*3/5)if hg>0 then local hw=e(ht)local len=0;local hq=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*he,centerX,centerY)if not aq then hq=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;h6[#h6+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],hg-1,centerX,centerY)h6[#h6+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(hw-30-hw%5+0.5),e(hw+30+hw%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cj=centerY+-i*5+ht*5;if len==30 then hq=f([[%s M %d %f h %d]],hq,centerX-hv-len,cj,len)if aq then h6[#h6+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*he,centerX,centerY,centerX-hv+10,cj+4,i)h6[#h6+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*he,centerX,centerY,centerX+hv-10,cj+4,i)if i==0 or i==180 or i==-180 then h6[#h6+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*he,centerX,centerY,centerX-hv+20,cj,hv*2-40)end else h6[#h6+1]=ch(centerX-hv+10,cj,i,"pdim txt txtmid")h6[#h6+1]=ch(centerX+hv-10,cj,i,"pdim txt txtmid")end;hq=f([[%s M %d %f h %d]],hq,centerX+hv,cj,len)else hq=f([[%s M %d %f h %d]],hq,centerX-hv-len,cj,len)hq=f([[%s M %d %f h %d]],hq,centerX+hv,cj,len)end end;h6[#h6+1]=hq..[["/>]]local hx="PITCH"if not bM then hx="REL PITCH"end;if ht>90 and not aq then ht=90-(ht-90)elseif ht<-90 and not aq then ht=-90-(ht+90)end;if hg>200 then if aq then if eG>Q then h6[#h6+1]=ch(centerX,centerY-15,"Yaw","pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY+20,hu,"pdim txt txtmid")end;h6[#h6+1]=f([[<g transform="rotate(%f,%d,%d)">]],-he,centerX,centerY)else h6[#h6+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;h6[#h6+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hv+25,centerY-5,centerX-hv+20,centerY,centerX-hv+25,centerY+5,centerX-hv+50,centerY+4,hw)h6[#h6+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hv-25,centerY-5,centerX+hv-20,centerY,centerX+hv-25,centerY+5,centerX+hv-30,centerY+4,hw)h6[#h6+1]="</g>"end;local hy=e(hg/3)h6[#h6+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hy,centerY,hg-hy)if not aq and bM then h6[#h6+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*he,centerX,centerY,centerX-hv+10,centerY,hv*2-20)end;h6[#h6+1]="</g>"if hg<200 then if aq and eG>Q then h6[#h6+1]=ch(centerX,centerY-hg,hx,"pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY-hg+10,hw,"pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY-15,"Yaw","pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY+20,hu,"pdim txt txtmid")else h6[#h6+1]=ch(centerX,centerY-hg,hx,"pdim txt txtmid")h6[#h6+1]=ch(centerX,centerY-hg+15,hw,"pdim txt txtmid")end end end end;local function hz(h6,dt,bM)local hA=altMeterX;local hB=altMeterY;local hC=78;local hD=19;local hE=ao;if ao~=-1 then h6[#h6+1]=ch(hA+hC,hB+hD+20,f("AGL: %.1fm",ao),"pdim altsm txtend")end;if bM and(dt<200000 and not aq or dt and aq)then table.insert(h6,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hA-1,hB-4,hC+2,hD+6,hA+1,hB-1,hC-4,hD))local fT=0;local hF=1;local hG=0;local hH=dt<0;local hI=dt<planet.surfaceMaxAltitude;local hJ=9;if hH then hJ=0 end;local dt=d(dt)while fT<6 do local hK=11;local hL=16;local hM=9;local hN=14;local cl="altsm"if fT>2 then hL=hL+3;hK=hK+2;hN=hN+2;hM=hM-6;cl="altbig"end;if hH then cl=cl.." red"elseif hI then cl=cl.." orange"end;local hO=dt/hF%10;local hP=e(hO)local hQ=e((hP+1)%10)local hR=hG;if fT==0 then hR=hO-hP;if hH then hR=1-hR end end;if hH and(fT==0 or hG~=0)then local hS=hQ;hQ=hP;hP=hS end;local hT=hL*(hR-1)local hU=hT+hL;local ci=hA+hM+(6-fT)*hK;local cj=hB+hN;h6[#h6+1]=ch(ci,cj+hT,hQ,cl)h6[#h6+1]=ch(ci,cj+hU,hP,cl)fT=fT+1;hF=hF*10;if hP==hJ then hG=hR else hG=0 end end;table.insert(h6,[[</g></g>]])end end;local function hV(eJ)local hW=-math.deg(n(eJ.y,eJ.z))+180;hW=hW-90;if hW<0 then hW=360+hW end;if hW>180 then hW=-180+hW-180 end;return-hW end;local function hX(eJ)local hk=math.deg(n(eJ.y,eJ.x))-90;if hk<-180 then hk=360+hk end;return hk end;local function hY(h6,eJ,eG,centerX,centerY)if eG>5 and not aq or eG>Q then local hg=circleRad;local hZ=20;local h_=20;local i0=hV(eJ)local i1=hX(eJ)local i2=14;local i3=i2/2;local i4=-i1/h_*hg;local i5=i0/hZ*hg;local ci=centerX+i4;local cj=centerY+i5;local aj=y(i4^2+i5^2)local i6=[[<circle
                            cx="]]..ci..[["
                            cy="]]..cj..[["
                            r="]]..i3/i2 ..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ci..[["
                            cy="]]..cj..[["
                            r="]]..i3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ci-i2 ..[[,]]..cj..[[ h ]]..i3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ci+i3 ..[[,]]..cj..[[ h ]]..i3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ci..[[,]]..cj-i2 ..[[ v ]]..i3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<hg then h6[#h6+1]=i6 else local h7=n(i5,i4)local i7=4;local i8=centerX+hg*math.cos(h7)local i9=centerY+hg*math.sin(h7)h6[#h6+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',h7*180/math.pi,i8,i9,i8-i7,i9-i7/2,i7*2,i7,i8+i7,i9-i7,i7,i7,-i7,i7)end;if not aq then local ia=vec3(eJ)i0=hV(-ia)i1=hX(-ia)i4=-i1/h_*hg;i5=i0/hZ*hg;ci=centerX+i4;cj=centerY+i5;aj=y(i4^2+i5^2)if aj<hg then local ib=[[<circle
                                    cx="]]..ci..[["
                                    cy="]]..cj..[["
                                    r="]]..i3 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ci..[[,]]..cj-i2 ..[[ v ]]..i3 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ci..[[,]]..cj..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ci..[[,]]..cj..[[)" />
                                <path
                                    d="M ]]..ci-i3 ..[[,]]..cj..[[ h ]]..i2 ..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ci..[[,]]..cj..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ci..[[,]]..cj..[[)"/>]]h6[#h6+1]=ib end end end end;local function ic(h6,gw,id,ie)id=e(id+0.5)local gV=throtPosY+10;local gW=throtPosY+20;if m()==1 and not RemoteHud then gV=55;gW=65 end;local ig="CRUISE"local unit="km/h"local co=ie;if gw=="TRAVEL"or gw=="AUTOPILOT"then ig="THROT"unit="%"co=id;local ih="dim"if id<0 then ih="red"end;h6[#h6+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],ih,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(id),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;h6[#h6+1]=ch(throtPosX+10,gV,ig,"pbright txtstart")h6[#h6+1]=ch(throtPosX+10,gW,f("%.0f %s",co,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bA and M then id=e(N*100+0.5)local ih="red"if id<0 then ih="red"end;h6[#h6+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],ih,1-d(id),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)h6[#h6+1]=ch(throtPosX+10,gV+40,"LIMIT","pbright txtstart")h6[#h6+1]=ch(throtPosX+10,gW+40,id.."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then h6[#h6+1]=ch(throtPosX+10,gV-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not aq and Autopilot then h6[#h6+1]=ch(throtPosX+10,gV-40,"LIMIT: "..e(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function ii(h6,ij)local ik=throtPosY-10;local il=throtPosX+10;h6[#h6+1]=ch(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then ik=75 end;h6[#h6+1]=ch(il,ik,e(ij).." km/h","pbright txtbig txtstart")end;local function im(h6)h6[#h6+1]=ch(cS(1900),cT(1070),f("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")h6[#h6+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then h6[#h6+1]=ch(cS(960),cT(550),"Warning: Invalid Control Scheme Detected","warnings")h6[#h6+1]=ch(cS(960),cT(600),"Keyboard Scheme must be selected","warnings")h6[#h6+1]=ch(cS(960),cT(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local io=cS(960)local ip=cT(860)local iq=cT(880)local ir=cT(900)local is=cT(960)local it=cT(200)local iu=cT(250)local iv=cT(960)if m()==1 and not RemoteHud then ip=cT(135)iq=cT(155)ir=cT(175)it=cT(115)iu=cT(95)end;local iw="#222222"local ix="white"local iy="dimmer"local iz="pbright"local iA="#110000"local iB=iw;local iC=iy;if BrakeIsOn then h6[#h6+1]=ch(io,ip,"Brake Engaged","warnings")iA="#440000"iB=ix;iC=iz elseif L>0 then h6[#h6+1]=ch(io,ip,"Auto-Brake Engaged","warnings","opacity:"..L)end;local iD="#110000"local iE=iw;local iF=iy;if aq and b2 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then h6[#h6+1]=ch(io,it+50,"** STALL WARNING **","warnings")iD="#ff0000"iE=ix;iF=iz;c4("stall","SW",2)end end;if bK then h6[#h6+1]=ch(io,it+90,"Flight Assist in Progress","warnings")end;if ax then h6[#h6+1]=ch(io,iv,"Gyro Enabled","warnings")end;local iG="#111100"local iH=iw;local iI=iy;if GearExtended then iG="#775500"iH=ix;iI=iz;if S then h6[#h6+1]=ch(io,iq,"Gear Extended","warn")else h6[#h6+1]=ch(io,iq,"Landed (G: Takeoff)","warnings")end;local iJ=cu(a:getTargetGroundAltitude())h6[#h6+1]=ch(io,ir,"Hover Height: "..iJ,"warn")end;local iK="#000011"local iL=iw;local iM=iy;if a7 then iK="#0000DD"iL=ix;iM=iz;h6[#h6+1]=ch(io,is+20,"ROCKET BOOST ENABLED","warn")end;local iN="#001100"local iO=iw;local iP=iy;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then iN="#00DD00"iO=ix;iP=iz;if d(as-antigrav.getBaseAltitude())<501 then h6[#h6+1]=ch(io,it+15,f("Target Altitude: %d Singularity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warn")else h6[#h6+1]=ch(io,it+15,f("Target Altitude: %d Singluarity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then h6[#h6+1]=ch(io,it+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then h6[#h6+1]=ch(io,it+20,f("LockedPitch: %d",e(LockPitch)),"warn")elseif a0 then h6[#h6+1]=ch(io,it+20,"Follow Mode Engaged","warn")elseif Reentry or an then h6[#h6+1]=ch(io,it+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local iJ=cu(HoldAltitude,2)if VertTakeOff then if by then iJ=cu(antigrav.getBaseAltitude(),2).." AGG singularity height"end;h6[#h6+1]=ch(io,it,"VTO to "..iJ,"warn")elseif AutoTakeoff and not IntoOrbit then if am then h6[#h6+1]=ch(io,it,"Takeoff to "..AutopilotTargetName,"warn")else h6[#h6+1]=ch(io,it,"Takeoff to "..iJ,"warn")end;if BrakeIsOn and not VertTakeOff then h6[#h6+1]=ch(io,it+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else h6[#h6+1]=ch(io,it,"Altitude Hold: "..iJ,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then h6[#h6+1]=ch(io,it+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then h6[#h6+1]=ch(io,it+20,"Aligning trajectory","warn")elseif ar<0.05 then h6[#h6+1]=ch(io,it+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then h6[#h6+1]=ch(io,it,b9,"warn")end end;if BrakeLanding then if StrongBrakes then h6[#h6+1]=ch(io,it,"Brake-Landing","warnings")else h6[#h6+1]=ch(io,it,"Coast-Landing","warnings")end end;if ProgradeIsOn then h6[#h6+1]=ch(io,it,"Prograde Alignment","crit")end;if RetrogradeIsOn then h6[#h6+1]=ch(io,it,"Retrograde Alignment","crit")end;local iQ="#110000"local iR=iw;local iS=iy;if bN then iQ="#FF0000"iR=ix;iS=iz;local type;if string.find(bN,"COLLISION")then type="warnings"else type="crit"end;h6[#h6+1]=ch(io,iu+20,bN,type)elseif ar==0 then local b_,c3=bY(br:normalize())if c3~=nil then iS=iz;iQ="#FF0000"iR=ix;local iJ=cu(c3)local travelTime=aS.computeTravelTime(bs,0,c3)local iT="Collision"if b_.noAtmosphericDensityAltitude>0 then iT="Atmosphere"end;h6[#h6+1]=ch(io,iu+20,b_.name.." "..iT.." "..cH(travelTime).." In "..iJ,"crit")end end;if VectorToTarget and not IntoOrbit then h6[#h6+1]=ch(io,it+35,VectorStatus,"warn")end;local iU="#111100"local iV=iw;local iW=iy;if passengers and#passengers>1 then iU="#DDDD00"iV=ix;iW=iz end;local iX=cS;local iY=cT;local iy="topButton"local iZ="topButtonActive"local i_=iy;if Autopilot or VectorToTarget or am or IntoOrbit then i_=iZ end;local j0=iy;if ProgradeIsOn then j0=iZ end;local j1=iy;if BrakeLanding or GearExtended then j1=iZ end;local j2=iy;if AltitudeHold or VectorToTarget then j2=iZ end;local j3=iy;if RetrogradeIsOn then j3=iZ end;local j4=iy;if IntoOrbit or bi and Autopilot then j4=iZ end;local j5=iY(30)h6[#h6+1]=f([[ 
                            <g class="pdim txt txtmid">
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],i_,iX(960),iY(54),iY(-53),iX(-120),iX(25),iY(50))h6[#h6+1]=ch(iX(910),j5,"AUTOPILOT")h6[#h6+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j0,iX(865),iY(51),iX(-25),iY(-50),iX(-110),iX(25),iY(46))h6[#h6+1]=ch(iX(800),j5,"PROGRADE")h6[#h6+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j1,iX(755),iY(47),iX(-25),iY(-46),iX(-98),iX(44),iY(44))h6[#h6+1]=ch(iX(700),j5,"LAND")h6[#h6+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],j2,iX(960),iY(54),iY(-53),iX(120),iX(-25),iY(50))h6[#h6+1]=ch(iX(1010),j5,"ALT HOLD")h6[#h6+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j3,iX(1055),iY(51),iX(25),iY(-50),iX(110),iX(-25),iY(46))h6[#h6+1]=ch(iX(1122),j5,"RETROGRADE")h6[#h6+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j4,iX(1165),iY(47),iX(25),iY(-46),iX(98),iX(-44),iY(44))h6[#h6+1]=ch(iX(1220),j5,"ORBIT")h6[#h6+1]=[[
                                </g>
                            </g>]]h6[#h6+1]="</g>"return h6 end;local function j6(eG)return e(A(eG*3.6,0)+0.5).." km/h"end;local function j7(h6)local ci=OrbitMapX+10;local cj=OrbitMapY+20;local j8={}local j9={"Alt-4: AutoTakeoff to Target"}local ja={"Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local jb={"Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local jc={"","------------------ALWAYS--------------------","Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view","Alt-4: Autopilot to IPH target","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and off","Alt-8: Toggle ground stabilization (underwater flight)","CTRL: Toggle Brakes on and off. Cancels active AP","LAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}table.insert(j8,"--------------DYNAMIC-----------------")if aq then if ao~=-1 then c7(j8,j9)if ac and planet and ac.name==planet.name then table.insert(j8,"Alt-4-4: Low Orbit Autopilot to Target")end;if antigrav or VertTakeOffEngine then if antigrav then if by then table.insert(j8,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(j8,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(j8,"Alt-6: Begins Vertical AutoTakeoff.")end else table.insert(j8,"Alt-6: Autotakeoff to AutoTakeoffAltitude")table.insert(j8,"Alt-6-6: Autotakeoff to 11% atmosphere")end;if GearExtended then table.insert(j8,"G: Takeoff to hover height, raise gear")else table.insert(j8,"G: Lowergear and Land")end else c7(j8,ja)table.insert(j8,"G: Begin BrakeLanding or Land")end;if VertTakeOff then table.insert(j8,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end else c7(j8,jb)if shield_1 then table.insert(j8,"Alt-Shift-5: Toggle shield off and on")table.insert(j8,"Alt-Shift-6: Vent shields")end end;if gyro then table.insert(j8,"Alt-9: Activate Gyroscope")end;if ExtraLateralTags~="none"or ExtraLongitudeTags~="none"or ExtraVerticalTags~="none"then table.insert(j8,"Alt-Shift-9: Cycles engines with Extra tags")end;if AltitudeHold then table.insert(j8,"Alt-Spacebar/C will raise/lower target height")table.insert(j8,"Alt+Shift+Spacebar/C will raise/lower target to preset values")end;if AtmoSpeedAssist or not aq then table.insert(j8,"LALT+Mousewheel will lower/raise speed limit")end;c7(j8,jc)for i=1,#j8 do cj=cj+12;h6[#h6+1]=ch(ci,cj,j8[i],"pdim txtbig txtstart")end end;local function jd(h6)local je=cS(OrbitMapX)local jf=cT(OrbitMapY)local jg=OrbitMapSize;local jh=4;local ji=15;local ci=0;local cj=0;local jj,jk,jl,jm;local function jn(type)local jo,E,eG,jp;if type=="Periapsis"then jo=orbit.periapsis.altitude;E=orbit.timeToPeriapsis;eG=orbit.periapsis.speed;jp=35 else jo=orbit.apoapsis.altitude;E=orbit.timeToApoapsis;eG=orbit.apoapsis.speed;jp=-35 end;h6[#h6+1]=ch(ci,cj,type)cj=cj+ji;local iJ=cu(jo)h6[#h6+1]=ch(ci,cj,iJ)cj=cj+ji;h6[#h6+1]=ch(ci,cj,cH(E))cj=cj+ji;h6[#h6+1]=ch(ci,cj,j6(eG))end;local jq=jg*1.5;if SelectedTab=="INFO"then jq=25*8 end;if SelectedTab~="HIDE"then h6[#h6+1]=[[<g class="pbright txtorb txtmid">]]h6[#h6+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" class="dimfill brightstroke" style="stroke-width:3;fill-opacity:0.3;" />',jg*2,jq,je,jf)end;if SelectedTab=="ORBIT"then jf=jf+jh;ci=je+jg+jh;cj=jf+jg*1.5/2+5+jh;jj=jg/4;jm=0;if orbit.periapsis~=nil and orbit.apoapsis~=nil then jl=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(jj*2)jk=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/jl*(1-orbit.eccentricity)jm=jj-orbit.periapsis.altitude/jl-planet.radius/jl;local jr=""if orbit.periapsis.altitude<=0 then jr='redout'end;h6[#h6+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],jr,je+jg+jm+jh,jf+jg*1.5/2+jh,jj,jk)h6[#h6+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',je+jg+jh,jf+jg*1.5/2+jh,planet.radius/jl)end;cj=jf+jg*1.5/2+5+jh;ci=je+jg*1.5+jh;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then jn("Apoapsis")end;cj=jf+jg*1.5/2+5+jh;ci=je+jg/2+jh;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then jn("Periapsis")end;h6[#h6+1]=ch(je+jg+jh,jf+20+jh,planet.name,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local js=orbit.timeToApoapsis/orbit.period*2*math.pi;local jt=jj*math.cos(js)local ju=jk*math.sin(js)h6[#h6+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',je+jg+jt+jm+jh,jf+jg*1.5/2+ju+jh)end;h6[#h6+1]=[[</g>]]return h6 elseif SelectedTab=="INFO"then h6=aV.DrawOdometer(h6,ad,TotalDistanceTravelled,ae)elseif SelectedTab=="HELP"then h6=j7(h6)else return h6 end end;local function jv(jw,jx)local jy;local jz=(jx-jw):normalize()local eL=(bv-jw):dot(jz)/jz:dot(jz)if eL<=0.then return(bv-jw):len()elseif eL>=(jx-jw):len()then return(bv-jx):len()end;local jA=jw+eL*jz;jy=(jA-bv):len()return jy end;local function jB()local jy;local jC=nil;local jD=nil;local jE=nil;for cQ,jF in pairs(b[0])do if jF.hasAtmosphere then local aj=jv(planet.center,jF.center)if jC==nil or aj<jC then jD=jF;jC=aj;jE=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local e6=jv(ac.center,jF.center)if e6<jC then jD=jF;jC=e6;jE=ac end end end end;local jG=cS(1770)local jH=cT(330)if jC then local jI="txttick "local jJ=500000;if jC<jD.radius+jJ or jC<jE.radius+jJ then if bH then jI="txttick red "else jI="txttick orange "end end;jy=cu(jC,2)bJ=ch(jG,jH,"Pipe ("..jE.name.."--"..jD.name.."): "..jy,jI.."pbright txtmid")end end;local function jK(ci,cj,jL,jM,ig)local jN={x=ci,y=cj,width=jL,height=jM,label=ig}bT[ig]=jN;return jN end;local function jO(jP,jQ,jL,jM,ci,cj,jR,jS,jT,jU)local jN={enableName=jP,disableName=jQ,width=jL,height=jM,x=ci,y=cj,toggleVar=jR,toggleFunction=jS,drawCondition=jT,hovered=false}if jU then table.insert(gl,jN)else table.insert(gk,jN)end;return jN end;local function jV(jW)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif jW=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif jW=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif jW=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=ca(jW)showHud=false else bE={}showHud=true end end;local function jX()bD=not bD;if bD then aF=gl;a2="Hold SHIFT to see Settings"bF=showHud else aF=gk;a2="Hold SHIFT to see Control Buttons"jV()showHud=bF end end;local function jY()local function jZ(cR)_G[cR]=not _G[cR]if _G[cR]then a2=cR.." set to true"else a2=cR.." set to false"end;if cR=="showHud"then bF=_G[cR]elseif cR=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local j_=50;local k0=340;local ci=500;local cj=aH/2-400;local k1=0;for cQ,cR in pairs(ca("boolean"))do if type(_G[cR])=="boolean"then jO(cR,cR,k0,j_,ci,cj,function()return _G[cR]end,function()jZ(cR)end,function()return true end,true)cj=cj+j_+20;if k1==9 then ci=ci+k0+20;cj=aH/2-400;k1=0 else k1=k1+1 end end end;jO("Control View","Control View",k0,j_,10,aH/2-500,function()return true end,jX,function()return true end,true)jO("View Handling Settings",'Hide Handling Settings',k0,j_,10,aH/2-(500-j_),function()return showHandlingVariables end,function()jV("handling")end,function()return true end,true)jO("View Hud Settings",'Hide Hud Settings',k0,j_,10,aH/2-(500-j_*2),function()return showHudVariables end,function()jV("hud")end,function()return true end,true)jO("View Physics Settings",'Hide Physics Settings',k0,j_,10,aH/2-(500-j_*3),function()return showPhysicsVariables end,function()jV("physics")end,function()return true end,true)end;local function k2()local function k3()local position=bv;local g7=planet.name..". "..#SavedLocations;if bP[1]then local dk,_=bP[1].getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dk~=nil and dk~=""then g7=g7 .." "..bP[1].getConstructName(dk)end end;return aW.AddNewLocation(g7,position,false,true)end;local function k4()TurnBurn=not TurnBurn end;local function k5(k6)if k6==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function k7()aW.UpdatePosition()end;local function k8()aW.ClearCurrentPosition()end;local function k9(fT)local g7=AutopilotTargetName;if fT~=nil and type(fT)=="number"then if fT==0 then return"None"end;g7=bG[fT].name end;if g7==nil then g7=CustomTarget.name end;if g7==nil then g7="None"end;return g7 end;local function ka(fT)return"Engage Autopilot: "..k9(fT)end;local function kb(fT)return"Disable Autopilot: "..k9(fT)end;local function kc()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)c4("folOn","F")else c4("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local j_=50;local k0=260;local kd=jO("Enable Brake Toggle","Disable Brake Toggle",k0,j_,aG/2-k0/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)jO("Align Prograde","Disable Prograde",k0,j_,aG/2-k0/2-50-kd.width,aH/2-j_+380,function()return ProgradeIsOn end,function()k5(1)end)jO("Align Retrograde","Disable Retrograde",k0,j_,aG/2-k0/2+kd.width+50,aH/2-j_+380,function()return RetrogradeIsOn end,k5,function()return ar==0 end)apbutton=jO(ka,kb,600,60,aG/2-600/2,aH/2-60/2-330,function()return Autopilot or VectorToTarget or am or IntoOrbit end,function()end)local i;local function ke(kf)local fT=bS+kf;if fT>#bG then fT=fT-#bG-1 end;if fT<0 then fT=#bG+fT end;return fT end;apExtraButtons={}for i=0,10 do local button=jO(function(ct)local fT=ke(ct.apExtraIndex)if Autopilot or VectorToTarget or am or IntoOrbit then return"Redirect: "..k9(fT)end;return ka(fT)end,function(ct)local fT=ke(ct.apExtraIndex)return kb(fT)end,600,60,aG/2-600/2,aH/2-60/2-330+60*i,function(ct)local fT=ke(ct.apExtraIndex)return fT==AutopilotTargetIndex and(Autopilot or VectorToTarget or am or IntoOrbit)end,function(ct)local fT=ke(ct.apExtraIndex)local kg=AutopilotTargetIndex==fT;AutopilotTargetIndex=fT;aW.UpdateAutopilotTarget()cC()if not kg and not(Autopilot or VectorToTarget or am or IntoOrbit)then cC()end end,function()return bR end)button.apExtraIndex=i;apExtraButtons[i]=button end;jO("Save Position","Save Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,k3,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)jO("Update Position","Update Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,k7,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)jO("Clear Position","Clear Position",200,apbutton.height,apbutton.x-200-30,apbutton.y,function()return true end,k8,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)j_=60;k0=300;local ci=0;local cj=aH/2-150;jO("View Settings","View Settings",k0,j_,ci,cj,function()return true end,jX)cj=cj+j_+20;jO("Enable Turn and Burn","Disable Turn and Burn",k0,j_,ci,cj,function()return TurnBurn end,k4)ci=10;cj=aH/2-300;jO("Horizontal Takeoff Mode","Vertical Takeoff Mode",k0,j_,ci+k0+20,cj,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bx end)cj=cj+j_+20;jO("Engage Orbiting","Cancel Orbiting",k0,j_,ci+k0+20,cj,function()return IntoOrbit end,cy,function()return ar==0 and bM end)cj=cj+j_+20;jO("Glide Re-Entry","Cancel Glide Re-Entry",k0,j_,ci,cj,function()return Reentry end,function()al=1;k5(1)end,function()return planet.hasAtmosphere and not aq end)jO("Parachute Re-Entry","Cancel Parachute Re-Entry",k0,j_,ci+k0+20,cj,function()return Reentry end,cF,function()return planet.hasAtmosphere and not aq end)cj=cj+j_+20;jO("Engage Follow Mode","Disable Follow Mode",k0,j_,ci,cj,function()return a0 end,kc,function()return m()==1 end)jO("Enable Repair Arrows","Disable Repair Arrows",k0,j_,ci+k0+20,cj,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)cj=cj+j_+20;if not ExternalAGG then jO("Enable AGG","Disable AGG",k0,j_,ci,cj,function()return by end,cG,function()return antigrav~=nil end)end;jO(function()return f("Switch IPH Mode - Current: %s",iphCondition)end,function()return f("IPH Mode: %s",iphCondition)end,k0*2,j_,ci,cj,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)cj=cj+j_+20;jO(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,k0*2,j_,ci,cj,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)local kh=cT(20)local button=jK(0,0,cS(70),kh,"INFO")button=jK(button.x+button.width,button.y,cS(80),kh,"ORBIT")button=jK(button.x+button.width,button.y,cS(70),kh,"HELP")jK(button.x+button.width,button.y,cS(70),kh,"HIDE")end;local ki={}local kj=nil;function ki.HUDPrologue(h6)bH,bI=gs(bv)if not bH then H=PvPR;J=PvPG;I=PvPB;if shield_1 and AutoShieldToggle and shield_1.getState()==0 then shield_1.toggle()end else H=SafeR;J=SafeG;I=SafeB;if shield_1 and AutoShieldToggle and shield_1.getState()==1 then shield_1.toggle()end end;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.8+0.5)..","..e(J*0.8+0.5)..","..e(I*0.8+0.5)..[[)]]local kk=ay;local kl=az;local km=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.3+0.5)..[[)]]local kn=ay;local ko=az;if gu()and not brightHud then kk=[[rgb(]]..e(H*0.5+0.5)..","..e(J*0.5+0.5)..","..e(I*0.5+0.5)..[[)]]kl=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.2+0.5)..[[)]]end;local iX=cS;local iY=cT;h6[#h6+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none;stroke:%s}
                                .linethick {stroke-width:3px;fill:none}
                                .linethin {stroke-width:1px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank;}
                                .warn {fill:orange; font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                text.bright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pbright {fill:%s;stroke:%s}
                                text.pbright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dim {fill:%s;stroke:%s}
                                text.dim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pdim {fill:%s;stroke:%s}
                                text.pdim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .red {fill:red;stroke:red}
                                text.red {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .orange {fill:orange;stroke:orange}
                                text.orange {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                text { stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dimstroke {stroke:%s}
                                .brightstroke {stroke:%s}
                                .indicatorText {font-size:20px;fill:white}
                                .size14 {font-size:14px}
                                .size20 {font-size:20px}
                                .topButton {fill:%s;opacity:0.5;stroke-width:2;stroke:%s}
                                .topButtonActive {fill:url(#RadialGradientCenter);opacity:0.8;stroke-width:2;stroke:%s}
                                .topButton text {font-size:13px; fill: %s; opacity:1; stroke-width:20px}
                                .topButtonActive text {font-size:13px;fill:%s; stroke-width:0px; opacity:1}
                                .indicatorFont {font-size:20px;font-family:Bank}
                                .dimmer {stroke: %s;}
                                .dimfill {fill: %s;}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                                <defs>
                                    <radialGradient id="RadialGradientCenterTop" cx="0.5" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="100%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientRightTop" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinRightTopGradient" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientLeftTop" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinLeftTopGradient" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientCenter" cx="0.5" cy="0.5" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.8"/>
                                        <stop offset="100%%" stop-color="%s" stop-opacity="0.5"/>
                                    </radialGradient>
                                </defs>
                                <g class="pdim txt txtend">
                                
                            ]],kk,kk,kk,kn,kn,kl,kl,ko,ko,kl,kk,km,ko,kk,kk,km,km,km,aG,aH,kl,kl,kl,kl,kl,kn,kl)if not kj then kj=f([[<path class="linethick brightstroke" style="fill:url(#RadialGradientCenterTop);" d="M %f %f L %f %f L %f %f %f %f L %f %f"/>
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientRightTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientLeftTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <clipPath id="headingClip">
                            <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        </clipPath>
                        <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>]],iX(630),iY(0),iX(675),iY(45),iX(960),iY(55),iX(1245),iY(45),iX(1290),iY(0),iX(1000),iY(105),iX(1040),iY(59),iX(1250),iY(51),iX(1300),iY(0),iX(1920),iY(0),iX(1920),iY(20),iX(1400),iY(20),iX(1300),iY(105),iX(920),iY(105),iX(880),iY(59),iX(670),iY(51),iX(620),iY(0),iX(0),iY(0),iX(0),iY(20),iX(520),iY(20),iX(620),iY(105),iX(890),iY(59),iX(960),iY(62),iX(1030),iY(59),iX(985),iY(112),iX(1150),iY(112),iX(1100),iY(152),iX(820),iY(152),iX(780),iY(112),iX(935),iY(112),iX(890),iY(59),iX(960),iY(62),iX(1030),iY(59),iX(985),iY(112),iX(1150),iY(112),iX(1100),iY(152),iX(820),iY(152),iX(780),iY(112),iX(935),iY(112))end;h6[#h6+1]=kj;return h6 end;function ki.DrawVerticalSpeed(h6,dt)h5(h6,dt)end;function ki.UpdateHud(h6)local hW=bB;local kp=bC;local he=kp;local ht=hW;local id=e(unit.getThrottle())local ij=bs*3.6;local ie=unit.getAxisCommandValue(0)local kq=cS(1770)local kr=cT(310)if AtmoSpeedAssist and bA then ie=K;id=K*100 end;local gw=gv()local hf="ROLL"if id==nil then id=0 end;if not bM then if bs>5 then hW=hV(bq)kp=hX(bq)else hW=0;kp=0 end;hf="YAW"end;if bI>50000 and not aq then local ks;ks=cu(bI)h6[#h6+1]=ch(kq,kr,"PvP Boundary: "..ks,"pbright txtbig txtmid")end;h6[#h6+1]=ak;h6[#h6+1]=aD;h6[#h6+1]=gx;if bJ~=""then h6[#h6+1]=bJ end;if gy~=""then h6[#h6+1]=gy end;if gz~=""then h6[#h6+1]=gz end;h5(h6,as)if m()==0 or RemoteHud then if bM then hd(h6,centerX,centerY,he,hf,bM)else hd(h6,centerX,centerY,kp,hf,bM)end;if not gu()or brightHud then if bM then hd(h6,centerX,centerY,he,hf,bM)hs(h6,ht,he,centerX,centerY,bM,e(hX(bq)),bs)else hd(h6,centerX,centerY,kp,hf,bM)hs(h6,hW,kp,centerX,centerY,bM,e(kp),bs)end;hz(h6,as,bM)hY(h6,bq,bs,centerX,centerY)end end;ic(h6,gw,id,ie)ii(h6,ij)im(h6)jd(h6)return h6 end;function ki.HUDEpilogue(h6)h6[#h6+1]="</svg>"return h6 end;function ki.ExtraData(h6)local kt=cS(1240)local ku=cT(55)local kv=ku+10;local kw;local iX=cS;local iY=cT;local kx=0;local gw=gv()local ky=iY(99)local kz=iY(80)local kA=iY(85)local kB=iY(31)local kC=0;local kD=0;local kE=av>1000000 and A(av/1000000,2).."kT"or A(av/1000,2).."T"if aq then kx=LastMaxBrakeInAtmo else kx=LastMaxBrake end;local kF,kG=aS.computeDistanceAndTime(bs,0,av,0,0,kx)if kF<0 then kF=0 end;kx=A(kx/(av*gj),2).."g"local kH=a:maxForceForward()kw=core.g()if kw>0.1 then kD=av*kw;kD=A(kD/(av*gj),2).."g"kC=0.5*kH/kw;kC=kC>1000000 and A(kC/1000000,2).."kT"or A(kC/1000,2).."T"end;kH=A(kH/(av*gj),2).."g"local kI=vec3(core.getWorldAcceleration()):len()/9.80665;kw=core.g()h6[#h6+1]=[[<g class="dim txt txtend size14">]]if m()==1 and not RemoteHud then kt=cS(1120)ku=cT(55)kv=ku+10 elseif aq then local kJ=cS(770)h6[#h6+1]=ch(iX(895),ky,"ATMO","")h6[#h6+1]=f([[<path class="linethin dimstroke"  d="M %f %f l %f 0"/>]],iX(895),kA,iX(-80))h6[#h6+1]=ch(iX(815),kz,f("%.1f%%",ar*100),"txtstart size20")end;h6[#h6+1]=ch(iX(1025),ky,"GRAVITY","txtstart")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(1025),kA,iX(80))h6[#h6+1]=ch(iX(1105),kz,f("%.2fg",kw/9.80665),"size20")h6[#h6+1]=ch(iX(1125),ky,"ACCEL","txtstart")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(1125),kA,iX(80))h6[#h6+1]=ch(iX(1205),kz,f("%.2fg",kI),"size20")h6[#h6+1]=ch(iX(695),ky,"BRK TIME","")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(695),kA,iX(-80))h6[#h6+1]=ch(iX(615),kz,f("%s",cH(kG)),"txtstart size20")h6[#h6+1]=ch(iX(635),iY(45),"TRIP","")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(635),iY(31),iX(-90))if travelTime then h6[#h6+1]=ch(iX(532),iY(23),f("%s",cH(travelTime)),"txtstart size20")end;h6[#h6+1]=ch(iX(795),ky,"BRK DIST","")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(795),kA,iX(-80))h6[#h6+1]=ch(iX(715),kz,f("%s",cu(kF)),"txtstart size20")h6[#h6+1]=ch(iX(1285),iY(45),"MASS","txtstart")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(1285),iY(31),iX(90))h6[#h6+1]=ch(iX(1388),iY(23),f("%s",kE),"size20")h6[#h6+1]=ch(iX(1220),ky,"THRUST","txtstart")h6[#h6+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],iX(1220),kA,iX(80))h6[#h6+1]=ch(iX(1300),kz,f("%s",kH),"size20")h6[#h6+1]=ch(cS(960),cT(175),gw,"pbright txtbig txtmid size20")h6[#h6+1]="</g>"end;function ki.DrawOdometer(h6,ad,TotalDistanceTravelled,ae)if SelectedTab~="INFO"then return h6 end;local kw;local kC=0;local kD=0;local kx=0;local kE=av>1000000 and A(av/1000000,2).." kTons"or A(av/1000,2).." Tons"if aq then kx=LastMaxBrakeInAtmo else kx=LastMaxBrake end;local kF,kG=aS.computeDistanceAndTime(bs,0,av,0,0,kx)kx=A(kx/(av*gj),2).." g"local kH=a:maxForceForward()kw=core.g()if kw>0.1 then kD=av*kw;kD=A(kD/(av*gj),2).." g"kC=0.5*kH/kw;kC=kC>1000000 and A(kC/1000000,2).." kTons"or A(kC/1000,2).." Tons"end;kH=A(kH/(av*gj),2).." g"if m()==0 or RemoteHud then local kK=cS(OrbitMapX+10)local kL=cT(OrbitMapY+20)local kM=cS(OrbitMapX+10+OrbitMapSize/1.25)local jM=25;h6[#h6+1]="<g class='txtstart size14 bright'>"h6[#h6+1]=ch(kK,kL,f("BrkTime: %s",cH(kG)))h6[#h6+1]=ch(kM,kL,f("Trip: %.2f km",ad))h6[#h6+1]=ch(kK,kL+jM,f("Lifetime: %.2f kSU",TotalDistanceTravelled/200000))h6[#h6+1]=ch(kM,kL+jM,f("BrkDist: %s",cu(kF)))h6[#h6+1]=ch(kK,kL+jM*2,"Trip Time: "..cH(ae))h6[#h6+1]=ch(kM,kL+jM*2,"Total Time: "..cH(TotalFlightTime))h6[#h6+1]=ch(kK,kL+jM*3,f("Mass: %s",kE))h6[#h6+1]=ch(kM,kL+jM*3,f("Max Brake: %s",kx))h6[#h6+1]=ch(kK,kL+jM*4,f("Max Thrust: %s",kH))if kw>0.1 then h6[#h6+1]=ch(kM,kL+jM*4,f("Max Thrust Mass: %s",kC))h6[#h6+1]=ch(kK,kL+jM*5,f("Req Thrust: %s",kD))else h6[#h6+1]=ch(kM,kL+jM*5,"Max Mass: n/a")h6[#h6+1]=ch(kK,kL+jM*6,"Req Thrust: n/a")end end;h6[#h6+1]="</g></g>"return h6 end;function ki.DrawWarnings(h6)return im(h6)end;function ki.DisplayOrbitScreen(h6)return jd(h6)end;function ki.DisplayMessage(h6,iJ)if iJ~="empty"then local cj=310;for kN in string.gmatch(iJ,"([^\n]+)")do cj=cj+35;h6[#h6+1]=ch("50%",cj,kN,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function ki.DrawDeadZone(h6)h6[#h6+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ki.UpdatePipe()if aq then bJ=""return end;jB()end;function ki.DrawSettings(h6)if#bE>0 then local ci=cS(640)local cj=cT(200)h6[#h6+1]=[[<g class="pbright txtvspd txtstart">]]for cQ,cR in pairs(bE)do h6[#h6+1]=ch(ci,cj,cR..": ".._G[cR])cj=cj+20;if cQ%12==0 then ci=ci+cS(350)cj=cT(200)end end;h6[#h6+1]=ch(cS(640),cT(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")h6[#h6+1]="</g>"end;return h6 end;local kO;local kP=cS(1770)local kQ=cT(350)local kR=cT(15)local kS=cS(1370)local bU,kT;local kU=0;function ki.DrawRadarInfo()local function kV()if radarPanelID~=nil and kU==0 then t(radarPanelID)radarPanelID=nil;if kO~=nil then t(kO)kO=nil end else if kU==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(bP,1,"Periscope","periscope")kO=_autoconf.panels[_autoconf.panels_size]end;if radarPanelID==nil then _autoconf.displayCategoryPanel(bP,1,"Radar","radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]end;kU=0 end end;local fb,fc,fa,fd,fe,f7=aY.GetRadarHud()local B=fd or 0;if fa>0 then if CollisionSystem then bU=B.."/"..fe.." Plotted : "..fa-fe.." Ignored"else bU="Radar Contacts: "..fa end;gx=ch(kP,kQ,bU,"pbright txtbig txtmid")if#f7>0 then gx=gx..ch(kS,kR,"Friendlies In Range","pbright txtbig txtmid")for cQ,cR in pairs(f7)do kR=kR+20;gx=gx..ch(kS,kR,bP[1].getConstructName(cR),"pdim txtmid")end end;if fb==nil and kO==nil then kU=1;kV()end;if fb~=nil and kO~=nil then kV()end;if radarPanelID==nil then kV()end else if fc then gx=ch(kP,kQ,bQ.." Radar: Jammed","pbright txtbig txtmid")else gx=ch(kP,kQ,"Radar: No "..bQ.." Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then kU=0;kV()end end end;function ki.DrawTanks()if fuelX~=0 and fuelY~=0 then gy=ch(fuelX,fuelY,"","txtstart pdim txtfuel")tankY=fuelY;gP(fuelX,"Atmospheric ","ATMO",aI,gN,gO)gP(fuelX,"Space Fuel T","SPACE",aJ,gL,gM)gP(fuelX,"Rocket Fuel ","ROCKET",aK,gJ,gK)end end;function ki.DrawShield()local kW=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local kX=core.getPvPTimer()local kY=shield_1.getResistances()local kZ="A: "..10+kY[1]*100 .."% / E: "..10+kY[2]*100 .."% / K:"..10+kY[3]*100 .."% / T: "..10+kY[4]*100 .."%"local ci,cj=shieldX-60,shieldY+30;local k_=e(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local h2=e(k_*2.55)local h3=f("rgb(%d,%d,%d)",255-h2,h2,0)local cl=""gz=ch(ci,cj,"","txtmid pdim txtfuel")if k_<10 and kW~="Shield Disabled"then cl="red "end;kX=kX>0 and"   PvPTime: "..cH(kX)or""gz=gz..f([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],ci,cj,h3,k_*2,ci,cj,ci+2,cj+10,k_,kX)gz=gz..ch(ci,cj-5,kW,cl.."txtstart pbright txtbig")gz=gz..ch(ci,cj+30,kZ,cl.."txtstart pbright txtsmall")end;function ki.hudtick()if not planet then return end;local function l0(h6)local l1=e(r(aj/(aG/4)*255,0,255))h6[#h6+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,e(H+0.5)+l1,e(J+0.5)-l1,e(I+0.5)-l1)end;local function l2()for _,cR in pairs(aF)do if cR.hovered then if not cR.drawCondition or cR.drawCondition(cR)then cR.toggleFunction(cR)end;cR.hovered=false end end;for _,cR in pairs(bT)do if cR.hovered then SelectedTab=cR.label;cR.hovered=false end end end;local function l3()local function l4(l5,l6,ci,cj,jL,jM)if l5>=ci and l5<=ci+jL and l6>=cj and l6<=cj+jM then return true else return false end end;local ci=ag+aG/2;local cj=ah+aH/2;for _,cR in pairs(aF)do cR.hovered=l4(ci,cj,cR.x,cR.y,cR.width,cR.height)end;for _,cR in pairs(bT)do cR.hovered=l4(ci,cj,cR.x,cR.y,cR.width,cR.height)end;if bR then local l7=false;for _,ct in ipairs(apExtraButtons)do if ct.hovered then l7=true;break end end;if apbutton.hovered then l7=true end;bR=l7 else bR=apbutton.hovered;if not bR then bS=AutopilotTargetIndex end end end;local function l8(h6)if not SelectedTab or SelectedTab==""then SelectedTab="HELP"end;for cQ,cR in pairs(bT)do local cl="dim brightstroke"local l9=0.2;if SelectedTab==cQ then cl="pbright dimstroke"l9=0.6 end;local la=""if cR.hovered then l9=0.8;la=";stroke:white"end;h6[#h6+1]=f([[<rect width="%f" height="%d" x="%d" y="%d" clip-path="url(#round-corner)" class="%s" style="stroke-width:1;fill-opacity:%f;%s" />]],cR.width,cR.height,cR.x,cR.y,cl,l9,la)h6[#h6+1]=ch(cR.x+cR.width/2,cR.y+cR.height/2+5,cR.label,"txt txtmid pdim")end end;local function lb(h6)local function lc(h6,ld,hover,ci,cj,ez,le,lf,lg,lh,li,button)if type(lh)=="function"then lh=lh(button)end;if type(li)=="function"then li=li(button)end;h6[#h6+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",ci,cj,ez,le)if ld then h6[#h6+1]=f("%s'",lf)else h6[#h6+1]=lg end;if hover then h6[#h6+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:2'",SafeR,SafeG,SafeB)else h6[#h6+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:1'",A(SafeR*0.5,0),A(SafeG*0.5,0),A(SafeB*0.5,0))end;h6[#h6+1]=" rx='5'></rect>"h6[#h6+1]=f("<text x='%f' y='%f' font-size='24' fill='",ci+ez/2,cj+le/2+5)if ld then h6[#h6+1]="black"else h6[#h6+1]="white"end;h6[#h6+1]="' text-anchor='middle' font-family='Play' style='stroke-width:0px;'>"if ld then h6[#h6+1]=f("%s</text>",lh)else h6[#h6+1]=f("%s</text>",li)end end;local lj=f("rgb(%d,%d,%d)'",A(SafeR*0.1,0),A(SafeG*0.1,0),A(SafeB*0.1,0))local lk=f("rgb(%d,%d,%d)",A(SafeR*0.8,0),A(SafeG*0.8,0),A(SafeB*0.8,0))local ll=lc;for _,cR in pairs(aF)do local jQ=cR.disableName;local jP=cR.enableName;if type(jQ)=="function"then jQ=jQ(cR)end;if type(jP)=="function"then jP=jP(cR)end;if not cR.drawCondition or cR.drawCondition(cR)then ll(h6,cR.toggleVar(cR),cR.hovered,cR.x,cR.y,cR.width,cR.height,lk,lj,jQ,jP,cR)end end end;local lm=A(ResolutionX/2,0)local ln=A(ResolutionY/2,0)local h6={}aV.HUDPrologue(h6)if showHud then aV.UpdateHud(h6)else if AlwaysVSpd then aV.DrawVerticalSpeed(h6,as)end;aV.DisplayOrbitScreen(h6)aV.DrawWarnings(h6)end;if bD and bE~={}then aV.DrawSettings(h6)end;if radar_1 or radar_2 then aY.assignRadar()end;if bP[1]then aV.DrawRadarInfo()end;aV.HUDEpilogue(h6)h6[#h6+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aV.DisplayMessage(h6,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(h6)end end;l8(h6)if x()==0 then if m()==1 and a1 then if not AltIsOn then l3()lb(h6)end;if not aZ and not a_ then local lo=table.concat(h6,"")h6={}h6[#h6+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h6[#h6+1]=lo;h6[#h6+1]="</body>"aZ=true;h6[#h6+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(h6,"")system.setScreen(content)elseif a_ then local lo=table.concat(h6,"")h6={}h6[#h6+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h6[#h6+1]=lo;h6[#h6+1]="</body>"end;if not aZ then h6[#h6+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],lm,ln,ag,ah)end else l2()end else if not a1 and m()==0 then l2()if aj>DeadZone then if DisplayDeadZone then l0(h6)end end elseif not AltIsOn and a1 then l3()lb(h6)end;h6[#h6+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],lm,ln,ag,ah)end;h6[#h6+1]=[[</svg></body>]]content=table.concat(h6,"")end;function ki.TenthTick()aV.DrawTanks()if shield_1 then aV.DrawShield()end end;function ki.OneSecond(h6)local function lp()local gZ=q()local ij=bs;local lq=gZ-au;if ij>1.38889 then ij=ij/1000;local lr=ij*(gZ-au)TotalDistanceTravelled=TotalDistanceTravelled+lr;ad=ad+lr end;ae=ae+lq;TotalFlightTime=TotalFlightTime+lq;au=gZ end;lp()aV.UpdatePipe()aV.ExtraData(h6)end;function ki.ButtonSetup()jY()k2()aF=gk end;return ki end;local function ls()local function lt(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function lu()local function lv(lw,lx)return lw.name<lx.name end;bG={}for cQ,cR in pairs(b[0])do bG[#bG+1]={name=cR.name,index=cQ}end;table.sort(bG,lv)end;local function ly(lz)for cQ,cR in pairs(lz)do if cR.name and cR.name==CustomTarget.name then return cQ end end;return-1 end;local function lA()bS=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local lB=bG[AutopilotTargetIndex].index;local lC=b[0][lB]if lC.center then AutopilotTargetName=lC.name;ac=aR[0][lB]if CustomTarget~=nil then if ar==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=lC;for _,cR in pairs(aR[0])do if cR.name==CustomTarget.planetname then ac=cR;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function lD(ha)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if ha==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then lA()else local lB=bG[AutopilotTargetIndex].index;local lC=b[0][lB]if lC~=nil and lC.name=="Space"or iphCondition=="Custom Only"and lC.center or iphCondition=="No Moons"and string.find(lC.name,"Moon")~=nil then if ha==nil then lD()else lD(1)end else lA()end end else a2="Disengage autopilot before changing Interplanetary Helper"c4("iph","AP")end end;local function k8()local fT=-1;fT=ly(b[0])if fT>-1 then table.remove(b[0],fT)end;fT=-1;fT=ly(SavedLocations)if fT~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fT)end;lD()lu()end;local function k3(g7,position,hS,lE)if dbHud_1 or hS then local p=lt(position)local kw=p.gravity;if lE then kw=unit.getClosestPlanetInfluence()end;local lF={position=position,name=g7,planetname=p.name,gravity=kw,safe=lE}if not hS then SavedLocations[#SavedLocations+1]=lF else for cQ,cR in pairs(b[0])do if cR.name and g7==cR.name then table.remove(b[0],cQ)end end end;table.insert(b[0],lF)lu()lA()a2="Location saved as "..g7 .."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local lG={}function lG.UpdateAtlasLocationsList()lu()end;function lG.UpdateAutopilotTarget()lA()end;function lG.adjustAutopilotTargetIndex(ha)lD(ha)end;function lG.findAtlasIndex(lz)ly(lz)end;function lG.UpdatePosition(lH)local fT=ly(SavedLocations)if fT~=-1 then if lH~=nil then SavedLocations[fT].name=lH;AutopilotTargetIndex=AutopilotTargetIndex-1;lD()else local lI=SavedLocations[fT]lI.gravity=unit.getClosestPlanetInfluence()lI.position=bv;lI.safe=true end;a2=SavedLocations[fT].name.." position updated ("..SavedLocations[fT].planetname..")"else a2="Name Not Found"end end;function lG.AddNewLocation(g7,position,hS,lE)k3(g7,position,hS,lE)end;function lG.ClearCurrentPosition()k8()end;for cQ,cR in pairs(SavedLocations)do table.insert(b[0],cR)end;lu()if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end;lG.UpdateAutopilotTarget()return lG end;local function lJ()local cB={}local function lK(eG)local lL=AutopilotEndSpeed;if not Autopilot then lL=0 end;if not aq then return aS.computeDistanceAndTime(eG,lL,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(eG,lL,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function lM(eG)local lL=AutopilotEndSpeed;if not Autopilot then lL=0 end;return aS.computeDistanceAndTime(eG,lL,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local lN=false;local lO=0;function cB.GetAutopilotBrakeDistanceAndTime(eG)return lK(eG)end;function cB.GetAutopilotTBBrakeDistanceAndTime(eG)return lM(eG)end;local function lP(lQ,lR,lS)lR=lR:project_on_plane(lQ)lS=lS:project_on_plane(lQ)return n(lR:cross(lS):dot(lQ),lR:dot(lS))end;local function lT()local function lU()local lV=-1;local lW=-1;if vBooster then lV=vBooster.getDistance()end;if hover then lW=hover.getDistance()end;if lV~=-1 and lW~=-1 then if lV<lW then return lV else return lW end elseif lV~=-1 then return lV elseif lW~=-1 then return lW else return-1 end end;local lX=lU()local lY=-1;if telemeter_1 then lY=telemeter_1.getDistance()end;if lX~=-1 and lY~=-1 then if lX<lY then return lX else return lY end elseif lX~=-1 then return lX else return lY end end;local function lZ(planet,e2,l_)local function m0(m1,dm)local e8=vec3(dm)if m1.id==0 then return setmetatable({latitude=e8.x,longitude=e8.y,altitude=e8.z,id=0,systemId=m1.systemId},MapPosition)end;local e9=e8-m1.center;local aj=e9:len()local dt=aj-m1.radius;local dr=0;local ds=0;if not cr(aj,0)then local ea=n(e9.y,e9.x)ds=ea>=0 and ea or 2*math.pi+ea;dr=math.pi/2-math.acos(e9.z/aj)end;return setmetatable({latitude=math.deg(dr),longitude=math.deg(ds),altitude=dt,id=m1.id,systemId=m1.systemId},MapPosition)end;local m2=m0(planet,e2)m2="::pos{"..m2.systemId..","..m2.id..","..m2.latitude..","..m2.longitude..","..m2.altitude.."}"if l_ then return m2 else system.setWaypoint(m2)return true end end;local m3=false;function cB.showWayPoint(planet,e2,l_)return lZ(planet,e2,l_)end;function cB.APTick()local function m4()if bO and not BrakeLanding then local c2=bO[1]local g8,g9=bO[2],bO[3]local m5=math.min(g8,g9 or g8)local m6=m5/bs;local m7=AutoTakeoff and(bs<42 or ao~=-1)local m8=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if m8 and not m7 and(a8*1.5>m5 or m6<1)then BrakeIsOn=true;cn(0)if AltitudeHold then cz()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cC()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if m6<11 then bN=c2.name.." COLLISION "..cH(m6).." / "..cu(m5,2)else bN=c2.name.." collision "..cH(m6)end;if m6<6 then c4("alarm","AL",2)end else bN=false end end;local function m9(bZ,ma,mb)local function mc(bZ,dP)bZ=vec3(bZ)dP=vec3(dP):normalize()local d8=bZ*dP;return d8.x+d8.y+d8.z end;local md=0.001;local me=1;if not aq or not b2 or ao~=-1 or bs<Q then if mb==nil then mb=DampingMultiplier end;if ma==nil then ma=md end;bZ=vec3(bZ):normalize()local mf=vec3()-bZ;local mg=-mc(mf,core.getConstructWorldOrientationRight())*me;local mh=-mc(mf,core.getConstructWorldOrientationUp())*me;if aB==0 then aB=mg/2 end;if aC==0 then aC=mh/2 end;if d(mg)<0.1 then V=V-mg*2 else V=V-(mg+(mg-aB)*mb)end;if d(mh)<0.1 then U=U+mh*2 else U=U+mh+(mh-aC)*mb end;aB=mg;aC=mh;if d(mg)<ma and d(mh)<ma then return true end;return false elseif b2 and ao==-1 then bZ=br;if mb==nil then mb=DampingMultiplier end;if ma==nil then ma=md end;bZ=vec3(bZ):normalize()local mf=bo-bZ;local mg=-mc(mf,core.getConstructWorldOrientationRight())*me;local mh=-mc(mf,core.getConstructWorldOrientationUp())*me;if aB==0 then aB=mg/2 end;if aC==0 then aC=mh/2 end;if d(mg)<0.1 then V=V-mg*5 else V=V-(mg+(mg-aB)*mb)end;if d(mh)<0.1 then U=U+mh*5 else U=U+mh+(mh-aC)*mb end;aB=mg;aC=mh;if d(mg)<ma and d(mh)<ma then return true end;return false end end;aq=k()>0;ar=k()as=core.getAltitude()ao=lT()E=q()b3=E;if CollisionSystem then m4()end;if antigrav then by=antigrav.getState()==1 end;local mi=1;local mj=1;local mk=E-b3;local ml=-math.deg(lP(bn,br,bo))local mm=math.deg(lP(bp,br,bo))local ha=bt*-1;b2=aq and ml<-YawStallAngle or ml>YawStallAngle or mm<-PitchStallAngle or mm>PitchStallAngle;local mn=system.getMouseDeltaX()local mo=system.getMouseDeltaY()if InvertMouse and not a1 then mo=-mo end;V=0;Z=0;U=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if as==0 then as=(bv-planet.center):len()-planet.radius end;bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local kw=planet:getGravity(core.getConstructWorldPos()):len()*av;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and a1 then if not aZ then ag=ag+mn;ah=ah+mo end else ag=0;ah=0 end else ag=ag+mn;ah=ah+mo;aj=y(ag*ag+ah*ah)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(mo,-100,100)+0.5)*2*mi;V=(-utils.smoothstep(mn,-100,100)+0.5)*2*mj end end end end;local mp=bs>8334;if bs>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not mp then a2="Space Speed Engine Shutoff reached"cn(0)end;if not mp and LastIsWarping then if not BrakeIsOn then cE()end;if Autopilot then cC()end end;LastIsWarping=mp;if aq and ar>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not lN then BrakeIsOn=true;lN=true elseif not AtmoSpeedAssist and lN then if bs<b7/3.6 then BrakeIsOn=false;lN=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local mq=false;if CustomTarget and al~=1 then mq=m9(CustomTarget.position-bv,0.1)else mq=m9(vec3(br),0.01)end;b0=true;if mq then cq(e(b7))if(d(bC)<2 or d(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cF()end elseif aq and AtmoSpeedAssist then cn(1)end elseif bs>Q then m9(vec3(br),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bs>Q then m9(-vec3(br))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cF()al=false;an=true else al=false;cC()end end;if an and CustomTarget and(as<HoldAltitude+250 and as>HoldAltitude-250)and bs*3.6>b7-250 and d(bu)<25 and ar>=0.1 and(CustomTarget.position-bv):len()>2000+as then cC()an=false end;if VertTakeOff then b0=true;local mr=HoldAltitude;if bu<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then mr=antigrav.getBaseAltitude()end;if as<mr-100 then b8=0;af=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;af=0 elseif bu<-30 then BrakeIsOn=true;af=15 elseif as>=mr then if by then if Autopilot or VectorToTarget then cx()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"c4("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"c4("vtoc","VT")cx()end;af=0 end else if ar>0.08 then b8=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bk then b8=0;af=20 else af=0;b8=36;cq(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=mr;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local ms=r(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(ms)local mt=r(vTpitchPID:get(),-1,1)U=mt end end;if IntoOrbit then local mf;local mu=false;local mv=cu(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ac end end;if not bf then bg=e(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=e(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget and CustomTarget then mf=CustomTarget.position-bv end;local mw,mx=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local my=bC;if not bc then local mz=false;local mA=false;cn(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..mv;if be.VectorToTarget then m9(mf:normalize():project_on_plane(bt))mu=bo:dot(mf:project_on_plane(bn):normalize())>0.95 else m9(br)mu=ml<0.5;if bs<150 then mu=true end end;U=0;ba=0;if bB<=ba+1 and bB>=ba-1 then mz=true else mz=false end;if my<=bb+1 and my>=bb-1 then mA=true else mA=false end;if mz and mA and mu then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then m9(mf:normalize():project_on_plane(bt))elseif bs>150 then m9(br)end;U=0;if be.VectorToTarget and CustomTarget then local a8,_=aS.computeDistanceAndTime(bs,b7/3.6,av,0,0,LastMaxBrake)if bi and mf:len()>15000+a8+as then b9="Orbiting to Target"if as-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or mf:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"c4("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;be.VectorToTarget,be.AutopilotAlign=false,false;cy()cF()return end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bg*0.9 and as<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;cn(0)ba=0;if not be.VectorToTarget then a2="Orbit complete"c4("orCom","OB")cy()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..mv;bd=true;cq(mx*3.6+1)local mB=bg-as;if VSpdPID==nil then VSpdPID=pid.new(0.1,0,1*0.1)end;VSpdPID:inject(mB-bu*r(utils.smoothstep(2000-mB,-2000,2000)^6*10,1,10))ba=r(VSpdPID:get(),-60,60)end end else local mC=2.75;local mD=d(A(mw*mC))local mE=mD%50;if mE>0 then mD=mD-mE+50 end;BrakeIsOn=false;if as<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..mv;ba=utils.map(bu,200,0,-15,80)elseif as>=bg*0.8 and as<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..mv;mD=mD*0.75;ba=utils.map(bu,100,-100,-15,65)elseif as>=bg*1.15 and as<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..mv;mD=mD*0.75;if bu<0 or bd then ba=utils.map(as,bg*1.5,bg*1.01,-30,0)else ba=utils.map(as,bg*0.99,bg*1.5,0,30)end elseif as>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..mv;ba=-65;local mF=utils.map(bu,-150,-400,1,0.55)mD=mD*mF end;cq(e(mD))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local mG=ba-bB;OrbitPitchPID:inject(mG)local mH=r(OrbitPitchPID:get(),-0.5,0.5)U=mH end end;if Autopilot and ar==0 and not al then local function mI(bU,orbit)system.print(bU)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cn(0)P=false;a2=bU;c4("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bg=as;bf=true end;cy()end end;local mJ,mK=AutopilotTargetCoords,false;if CustomTarget and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local mL=(CustomTarget.position-ac.center):normalize()local mM=mL:project_on_plane((ac.center-bv):normalize()):normalize()local mN=ac.center+mM*(ac.radius+AutopilotTargetOrbit)local mO=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bv-mN):len()<(bv-mO):len()then mJ=mN else mJ=mO;AutopilotEndSpeed=0 end;AutopilotTargetCoords=mJ;aX.showWayPoint(ac,AutopilotTargetCoords)mK=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget and CustomTarget.planetname=="Space"then if not TargetSet then AutopilotPlanetGravity=0;mK=true;AutopilotRealigned=true;TargetSet=true;mJ=CustomTarget.position+(bv-CustomTarget.position):normalize()*AutopilotSpaceDistance;AutopilotTargetCoords=mJ end elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local mL=(bv+br*100000-ac.center):normalize()local mM=mL:project_on_plane((ac.center-bv):normalize()):normalize()if mM:len()<1 then mL=(bv+bo*100000-ac.center):normalize()mM=mL:project_on_plane((ac.center-bv):normalize()):normalize()end;mJ=ac.center+mM*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=mJ;TargetSet=true;mK=true;AutopilotRealigned=true;aX.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(mJ)-bv):len()local b_,c0,c1=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(c2)if c2.noAtmosphericDensityAltitude>0 then return c2.radius+c2.noAtmosphericDensityAltitude else return c2.radius+c2.surfaceMaxAltitude*1.5 end end)local c3=c0;if c1~=nil and c0~=nil then c3=math.min(c1,c0)end;if c3~=nil and c3<AutopilotDistance and b_.name==ac.name then AutopilotDistance=c3 end;local mq=true;local mP=(ac.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ac.radius;local iJ=cu(mP)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..iJ..'"}')local a8,a9;if not TurnBurn then a8,a9=lK(bs)else a8,a9=lM(bs)end;if bs>50 and AutopilotAccelerating then local mf=vec3(mJ)-bv;local mQ=r(math.deg(lP(bn,br:normalize(),mf:normalize()))*bs/500,-90,90)local mR=r(math.deg(lP(bp,br:normalize(),mf:normalize()))*bs/500,-90,90)if d(mQ)<20 and d(mR)<20 then mQ=mQ*2;mR=mR*2 end;if d(mQ)<2 and d(mR)<2 then mQ=mQ*2;mR=mR*2 end;local ml=-math.deg(lP(bn,bo,br:normalize()))local mm=-math.deg(lP(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(mR-mm)local mS=r(apPitchPID:get(),-1,1)U=U+mS;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(mQ-ml)local mT=r(apYawPID:get(),-1,1)V=V+mT;mK=true;if d(mQ)>2 or d(mR)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"c4("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c4("apAcc","AP")end end elseif AutopilotAccelerating and bs<=50 then m9((mJ-bv):normalize())end;if mP<AutopilotTargetOrbit*1.5 then if CustomTarget and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(mP)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local b_,c3=bY((AutopilotTargetCoords-bv):normalize())if ac.name~=planet.name then if b_~=nil and ac.name~=b_.name and c3<AutopilotDistance then a2="Collision with "..b_.name.." in "..cu(c3).."\nClear LOS to continue."ai=5;m3=true else m3=false;a2=""end end end;if not m3 then if not AutopilotCruising and not AutopilotBraking and not mK then mq=m9((mJ-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then mq=m9(-vec3(br):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cn(AutopilotInterplanetaryThrottle)K=A(AutopilotInterplanetaryThrottle,2)P=true end;local mU=unit.getThrottle()if AtmoSpeedAssist then mU=K end;local mV=99999;local kI=-vec3(core.getWorldAcceleration()):dot(br:normalize())local mW=r(br:dot((mJ-bv):normalize()),0,bs)if mW>0 or kI>0 then mV=aS.computeTravelTime(mW,kI,AutopilotDistance-a8)end;if bq:len()>=MaxGameVelocity or mU==0 and P or warmup/4>mV then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then c4("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cn(0)end;local mX=AutopilotDistance;if mX<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<lO and bI>2000 then cC()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;lO=bI else lO=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c4("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cn(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cn(1,true)end;local _,mx=aU(ac):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local mf;if CustomTarget then mf=CustomTarget.position-bv end;if CustomTarget and CustomTarget.planetname=="Space"and bs<50 then mI("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget and CustomTarget.planetname~="Space"and bs<=mx and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then mI("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,AutopilotTargetCoords)elseif(CustomTarget and CustomTarget.planetname~="Space"or CustomTarget==nil)and orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then c4("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=mx then if CustomTarget then if br:normalize():dot(mf:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then c4("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else mI("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else mI("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then mI("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local mX=AutopilotDistance;if mX<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<lO and bI>2000 then cC()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;lO=bI else lO=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c4("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local mU=unit.getThrottle()if AtmoSpeedAssist then mU=K end;if mU>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c4("apAcc","AP")end;AutopilotCruising=false end else if mq then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif mq and not m3 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c4("apAcc","AP")end;if not P then cn(AutopilotInterplanetaryThrottle,true)K=A(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"c4("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cn(0)P=false;ProgradeIsOn=true;al=true;aX.showWayPoint(ac,CustomTarget.position)end;if a0 then b0=true;local mR=0;local eK=bv+vec3(unit.getMasterPlayerRelativePosition())local mY=eK-bv;local mZ=vec3(mY):project_on(bo):len()local m_=vec3(mY):project_on(bp):len()local aj=y(mZ*mZ+m_*m_)m9(mY:normalize())local n0=40;local n1=aj<n0;local n2=100;local n3=r((aj-n0)/2,10,n2)U=0;local mq=d(V)<0.1;if mq and bs<n3 and not n1 then BrakeIsOn=false;mR=-20 else BrakeIsOn=true;mR=0 end;local n4=0;if d(mR-bB)>n4 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(mR-bB)local mS=pitchPID:get()U=mS end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local n5=LastMaxBrakeInAtmo;if n5 then n5=n5*r(bs/100,0.1,1)*ar else n5=LastMaxBrake end;if ar<0.01 then n5=LastMaxBrake end;local n6=bo:project_on_plane(bt):normalize():dot(br)local n7=vec3(core.getWorldAirFrictionAcceleration())local n8=n7:len()*av;if n6>100 then a8,a9=aS.computeDistanceAndTime(n6,100,av,0,0,n5)local n9,na=aS.computeDistanceAndTime(100,0,av,0,0,n5*0.55)a8=a8+n9 else a8,a9=aS.computeDistanceAndTime(n6,0,av,0,0,n5*0.55)end;local mB=HoldAltitude-as-bu;local nb=200+bs;if Reentry or al then minMax=2000+bs end;local nc=1;if AutoTakeoff then nc=r(bs/100,0.1,1)end;local mR=(utils.smoothstep(mB,-nb,nb)-0.5)*2*MaxPitch*nc;if not Reentry and not al and not VectorToTarget and bo:dot(br:normalize())<0.99 then mR=(utils.smoothstep(mB,-nb*r(20-19*ar*10,1,20),nb*r(20-19*ar*10,1,20))-0.5)*2*MaxPitch*r(2-ar*10,1,2)*nc end;if not AltitudeHold then mR=0 end;if LockPitch~=nil then if bM and not IntoOrbit then mR=LockPitch else LockPitch=nil end end;b0=true;local nd=U;if Reentry then local ne=e(b7)local nf,ng=aS.computeDistanceAndTime(bs,ne/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)nf=nf==-1 and 5000 or nf;local nh=as-(planet.noAtmosphericDensityAltitude+nf)local ni=as>planet.noAtmosphericDensityAltitude+nf*1.35;if ni then mR=ReEntryPitch;if bs<=ne/3.6 and bs>ne/3.6-10 and d(br:normalize():dot(bo))>0.9 and not bA then O=false;cn(1)end elseif bA and not ni and not aq then cq(ne,true)end;if bA then if bs>ne/3.6 and not ni then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not R then mR=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;mR=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ni then b0=true elseif not ni then if not aq and(bA or s:getTargetSpeed(axisCommandId.longitudinal)~=ne)then cq(ne)end;if bs<ne/3.6+1 then BrakeIsOn=false;R=false;Reentry=false;b0=true end end end;if bs>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then m9(vec3(br))end;if bK or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local mf;if bK then if type(bK)=="table"then mf=bK elseif bK<3 and bK>0 then mf=-bt:cross(br)*5000 elseif bK>=3 then mf=bt:cross(br)*5000 elseif bK<0 then mf=br*25000 end elseif CustomTarget~=nil then mf=CustomTarget.position-bv else mf=ac.center-bv end;local mQ=math.deg(lP(bt:normalize(),br,mf))*2;local nj=math.rad(d(bC))if bs>minRollVelocity and ar>0.01 then local nk=1000+bs;local nl=(utils.smoothstep(mB-bu*10,-nk,nk)-0.5)*2*MaxPitch;local nm=r(90-nl,0,180)b4=r(mQ*2,-nm,nm)local nn=mQ;mQ=r(r(mQ,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(nj)+4*(bB-mR)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)local no=1;if b4~=0 then no=d(nj/b4)end;no=(90-r(d(b4-bC),0,90))/90;local np=mR;if d(bC)>90 then np=-np end;mR=no*r(r(np*math.cos(nj),-PitchStallAngle*0.8,PitchStallAngle*0.8)+d(r(d(nn)*math.sin(nj),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;mQ=r(mQ,-YawStallAngle*0.80,YawStallAngle*0.80)end;local nq=ml-mQ;if bK and d(nq)<=0.0001 and(type(bK)=="table"or type(bK)~="table"and bK<0 and d(bC)<1)then if bK==-2 then cz()end;bK=nil;c4("180Off","BR")return end;if not b2 and bs>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(nq)local mT=r(yawPID:get(),-1,1)V=V+mT elseif aq and ao>-1 or bs<minRollVelocity then m9(mf)elseif b2 and ar>0.01 then if(ml<-YawStallAngle or ml>YawStallAngle)and ar>0.01 then m9(br)end;if(mm<-PitchStallAngle or mm>PitchStallAngle)and ar>0.01 then mR=r(bB-mm,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local mr=planet:getAltitude(CustomTarget.position)local nh=mf:project_on_plane(bt):len()StrongBrakes=true;if not am and not Reentry and nh<=a8 and(br:project_on_plane(bt):normalize():dot(mf:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cn(0)if AltitudeHold then cz()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(n6<0.1 or nh<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<nh)then if not by then c4("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bN=false end;LastDistanceToTarget=nh end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local mf=CustomTarget.position-bv;local mr=planet:getAltitude(CustomTarget.position)local nh=y(mf:len()^2-(as-mr)^2)local n5=LastMaxBrakeInAtmo;if n5 then a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,n5/2)StrongBrakes=true;if nh<=a8+bs*mk/2 and br:project_on_plane(bt):normalize():dot(mf:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cF()end end;LastDistanceToTarget=nh end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cy()VectorToTarget=false;bc=true end end;if b2 and ar>0.01 and ao==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then m9(br)mR=r(bB-mm,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;U=nd;local lY=-1;if BrakeLanding then mR=0;local nr=false;local ns=30;if aT~=nil and aT>0 then local nt=r(ar,0.4,2)local n5=LastMaxBrakeInAtmo*r(bs/100,0.1,1)*nt;local nu=aT*nt+n5-kw;local nw=n5/2-kw;local nx=bs-y(d(nw/2)*20/(0.5*av))*utils.sign(nw)if nx<0 then nx=0 end;local ny;if bs>100 then local nz,_=aS.computeDistanceAndTime(bs,100,av,0,0,n5)local nA,_=aS.computeDistanceAndTime(100,0,av,0,0,y(n5))ny=nz+nA else ny=aS.computeDistanceAndTime(bs,0,av,0,0,y(n5))end;if ny<20 then BrakeIsOn=false else local nB=0;if nx>100 then local nC,_=aS.computeDistanceAndTime(nx,100,av,0,0,nu)local nD,_=aS.computeDistanceAndTime(100,0,av,0,0,aT*nt+y(n5)-kw)nB=nC+nD else nB,_=aS.computeDistanceAndTime(nx,0,av,0,0,aT*nt+y(n5)-kw)end;nB=(nB+15+bs*mk)*1.1;local nE=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if nE then local mr=planet:getAltitude(CustomTarget.position)local nF=as-mr-100;local mf=CustomTarget.position-bv;local nG=y(mf:len()^2-(as-mr)^2)if nG>100 then nE=false elseif nF<=nB or nB==-1 then BrakeIsOn=true;nr=true else BrakeIsOn=false;nr=true end end;if not nE and CalculateBrakeLandingSpeed then if nB>=ns then BrakeIsOn=true else BrakeIsOn=false end;nr=true end end end;if not bA then cn(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)stablized=true;lY=ao;if lY>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()c4("grOut","LG",1)end;s:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-ha)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not nr then BrakeIsOn=true elseif not nr then BrakeIsOn=false end end;if AutoTakeoff or am then local b_,c1,c0;if AutopilotTargetCoords~=nil then b_,c1,c0=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(c2)return c2.radius+c2.noAtmosphericDensityAltitude end)end;if by then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cn(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(mR)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bs<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cn(0)elseif am then cn(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(b_==nil or b_.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bA then cn(0)end;AutopilotAccelerating=true end end;local nH=ao>-1;local nI=bB;if(VectorToTarget or am or bK)and not nH and bs>minRollVelocity and ar>0.01 then local nj=math.rad(d(bC))nI=bB*d(math.cos(nj))+mm*math.sin(nj)end;local nJ=r(mR-nI,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then nJ=r(mR-nI,-85,MaxPitch)elseif ar<0.01 then nJ=r(mR-nI,-MaxPitch,MaxPitch)end;if d(bC)<5 or VectorToTarget or bK or BrakeLanding or nH or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(nJ)local mS=pitchPID:get()U=U+mS end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=lT()return cB end;function script.onStart()local nK=false;local function nL()local function nM(nN)local nO=dbHud_1.hasKey;for cQ,cR in pairs(nN)do if nO(cR)then local d8=g(dbHud_1.getStringValue(cR))if d8~=nil then _G[cR]=d8;nK=true end end end end;if dbHud_1 then if not useTheseSettings then nM(ca())coroutine.yield()nM(c)else nM(c)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;nK=false end;coroutine.yield()if nK then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then a2="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function nP()local function nQ(nR,nS)if nR>nS then nS=nR end;local nT,nU=0,0;if ContainerOptimization>0 then nT=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then nU=FuelTankOptimization*0.05 end;nS=nS*(1-(nT+nU))return nS end;local nV=core.getElementNameById;local nW=fuelX~=0 and fuelY~=0;for cQ in pairs(at)do local type=core.getElementTypeById(at[cQ])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(at[cQ])),'^.*vertical.*$')and core.getElementForwardById(at[cQ])[3]>0 then bx=true end end;if o(type,'^.*Space Engine$')then bl=true;if o(tostring(core.getElementTagsById(at[cQ])),'^.*vertical.*$')then local nX=core.getElementForwardById(at[cQ])if nX[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local nY=j(at[cQ])if nY>10000 then G=110 elseif nY>1000 then G=55 elseif nY>150 then G=27 end end;aL=aL+j(at[cQ])if nW and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local nY=j(at[cQ])local kE=l(at[cQ])local nR=0;local gZ=q()if type=="Atmospheric Fuel Tank"then local nS=400;local nZ=35.03;if nY>10000 then nS=51200;nZ=5480 elseif nY>1300 then nS=6400;nZ=988.67 elseif nY>150 then nS=1600;nZ=182.67 end;nR=kE-nZ;if fuelTankHandlingAtmo>0 then nS=nS+nS*fuelTankHandlingAtmo*0.2 end;nS=nQ(nR,nS)aI[#aI+1]={at[cQ],nV(at[cQ]),nS,nZ,nR,gZ}end;if type=="Rocket Fuel Tank"then local nS=320;local nZ=173.42;if nY>65000 then nS=40000;nZ=25740 elseif nY>6000 then nS=5120;nZ=4720 elseif nY>700 then nS=640;nZ=886.72 end;nR=kE-nZ;if fuelTankHandlingRocket>0 then nS=nS+nS*fuelTankHandlingRocket*0.1 end;nS=nQ(nR,nS)aK[#aK+1]={at[cQ],nV(at[cQ]),nS,nZ,nR,gZ}end;if type=="Space Fuel Tank"then local nS=600;local nZ=35.03;if nY>10000 then nS=76800;nZ=5480 elseif nY>1300 then nS=9600;nZ=988.67 elseif nY>150 then nS=2400;nZ=182.67 end;nR=kE-nZ;if fuelTankHandlingSpace>0 then nS=nS+nS*fuelTankHandlingSpace*0.2 end;nS=nQ(nR,nS)aJ[#aJ+1]={at[cQ],nV(at[cQ]),nS,nZ,nR,gZ}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function n_()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then s:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(aq or not aq and as<10000)then for _,cR in pairs(door)do cR.toggle()end end;if switch then for _,cR in pairs(switch)do cR.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cR in pairs(forcefield)do cR.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;s:setTargetGroundAltitude(b1)if aq and ao~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function o0()local o1={}local function o2()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local o3={[1]=4480,[6]=4480,[7]=6270}for o4,o5 in pairs(b)do b[o4][0]=o2()b[o4][0].systemId=o4;o1[o4]={}for o6,planet in pairs(b[o4])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=o3[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=o4;planet.bodyId=planet.id;o1[o4][o6]=planet end end;aQ=cU()aR=aQ(o1)aS=ee()aU=eI()aW=ls()end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})nL()coroutine.yield()nP()coroutine.yield()aX=lJ()n_()coroutine.yield()o0()aY=f5()aV=gi()aV.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bP[1]=nil;if radar_1 then bP[1]=radar_1;aY.pickType()end;c4("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cR in pairs(door)do cR.toggle()end end;if switch then for _,cR in pairs(switch)do cR.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cR in pairs(forcefield)do cR.toggle()end end;cM()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;c4("stop","SU")end;function script.onTick(o7)local o8=nil;if o7=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a2="Radar Contact"c4("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif o7=="tenthSecond"then local function o9()local oa=system.createData;local ob=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=ob(panelInterplanetary,"value")interplanetaryHeaderText=oa('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=ob(panelInterplanetary,"value")widgetDistanceText=oa('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=ob(panelInterplanetary,"value")widgetTravelTimeText=oa('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=ob(panelInterplanetary,"value")widgetMaxMassText=oa('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=ob(panelInterplanetary,"value")widgetTargetOrbitText=oa('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=ob(panelInterplanetary,"value")widgetCurBrakeDistanceText=oa('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=ob(panelInterplanetary,"value")widgetCurBrakeTimeText=oa('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=ob(panelInterplanetary,"value")widgetMaxBrakeDistanceText=oa('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=ob(panelInterplanetary,"value")widgetMaxBrakeTimeText=oa('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=ob(panelInterplanetary,"value")widgetTrajectoryAltitudeText=oa('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function oc()t(panelInterplanetary)panelInterplanetary=nil end;local function od()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local eG=bs;local mU=unit.getThrottle()/100;if AtmoSpeedAssist then mU=K end;local oe,of=aS.computeDistanceAndTime(bs,MaxGameVelocity,av,a:maxForceForward()*mU,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,og;if not TurnBurn and eG>0 then _,og=aX.GetAutopilotBrakeDistanceAndTime(eG)else _,og=aX.GetAutopilotTBBrakeDistanceAndTime(eG)end;local oh=0;local oi=0;if AutopilotCruising or not Autopilot and eG>5 then oi=aS.computeTravelTime(eG,0,AutopilotDistance)elseif a8+oe<AutopilotDistance then oh=AutopilotDistance-(a8+oe)oi=aS.computeTravelTime(8333.0556,0,oh)else local oj=(AutopilotDistance-a8)/oe;oe=AutopilotDistance-a8;of=of*oj end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return oi elseif AutopilotBraking then return og elseif AutopilotCruising then return oi+og else return of+a9+oi end end;local function ok(kw,ol)if kw==nil then kw=core.g()end;kw=A(kw,5)if ol~=nil and ol or(o8==nil or o8~=kw)then local eG=bq:len()local om=g(unit.getData()).maxBrake;if om~=nil and om>0 and aq then om=om/r(eG/100,0.1,1)om=om/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+om)/2 else LastMaxBrakeInAtmo=om end end end;if om~=nil and om>0 then LastMaxBrake=om end;o8=kw end end;ok(nil,true)if bz~=nil then if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or s:getTargetSpeed(axisCommandId.longitudinal)~=bz then cq(bz)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then o9()end;if AutopilotTargetName~=nil then local on=CustomTarget~=nil;local oo=0.5*LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()oo=oo>1000000 and A(oo/1000000,2).." kTons"or A(oo/1000,2).." Tons"u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=od()if on and not Autopilot then aj=(bv-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local iJ=cu(aj)u(widgetDistanceText,'{"label": "distance", "value": "'..iJ..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cH(travelTime)..'", "unit":""}')iJ=cu(a8)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..iJ..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cH(a9)..'", "unit":""}')iJ=cu(aa)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..iJ..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cH(ab)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..f("%s",oo)..'", "unit":""}')iJ=cu(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..iJ..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then cn(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else oc()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.TenthTick()elseif o7=="oneSecond"then local function op(h6)local oq=0;aD=""local os=aL;local ot=0;local ou=0;local ov=0;local h2=0;local h3=""local ow=core.getElementHitPointsById;for cQ in pairs(at)do local nY=0;local ox=0;ox=j(at[cQ])nY=ow(at[cQ])ot=ot+nY;if nY<ox then if nY==0 then ov=ov+1 else ou=ou+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cQ]))local ci=position.x;local cj=position.y;local fA=position.z;table.insert(aA,core.spawnArrowSticker(ci,cj,fA+1,"down"))table.insert(aA,core.spawnArrowSticker(ci,cj,fA+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(ci+1,cj,fA,"north"))table.insert(aA,core.spawnArrowSticker(ci+1,cj,fA,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(ci-1,cj,fA,"south"))table.insert(aA,core.spawnArrowSticker(ci-1,cj,fA,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(ci,cj-1,fA,"east"))table.insert(aA,core.spawnArrowSticker(ci,cj-1,fA,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(ci,cj+1,fA,"west"))table.insert(aA,core.spawnArrowSticker(ci,cj+1,fA,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cQ])end elseif aM and#aA>0 and aA[11]==at[cQ]then for gY in pairs(aA)do core.deleteSticker(aA[gY])end;aA={}end end;oq=e(ot/os*100)if oq<100 then if oq>0 and oq<WipeDamage then SavedLocations={}aW.UpdateAtlasLocationsList()aW.UpdateAutopilotTarget()cM()end;h6[#h6+1]=ch(0,0,"","pbright txt")h2=e(oq*2.55)h3=f("rgb(%d,%d,%d)",255-h2,h2,0)if oq<100 then h6[#h6+1]=ch("50%",1035,"Elemental Integrity: "..oq.."%","txtbig txtmid","fill:"..h3)if ov>0 then h6[#h6+1]=ch("50%",1055,"Disabled Modules: "..ov.." Damaged Modules: "..ou,"txtbig txtmid","fill:"..h3)elseif ou>0 then h6[#h6+1]=ch("50%",1055,"Damaged Modules: "..ou,"txtbig txtmid","fill:"..h3)end end end end;local function oy()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()oy()local h6={}aV.OneSecond(h6)if ShouldCheckDamage then op(h6)end;ak=table.concat(h6,"")collectgarbage("collect")elseif o7=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local d8=g(dbHud_1.getStringValue("SavedLocations"))if d8~=nil then _G["SavedLocations"]=d8;local fT=-1;local lF;for cQ,cR in pairs(SavedLocations)do if cR.name and cR.name=="SatNav Location"then fT=cQ;break end end;if fT~=-1 then lF=SavedLocations[fT]fT=-1;for cQ,cR in pairs(b[0])do if cR.name and cR.name=="SatNav Location"then fT=cQ;break end end;if fT>-1 then b[0][fT]=lF end;aW.UpdateAtlasLocationsList()a2=lF.name.." position updated"end end;for i=1,#bG do if bG[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif o7=="msgTick"then local h6={}aV.DisplayMessage(h6,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif o7=="animateTick"then a_=true;aZ=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif o7=="hudTick"then aV.hudtick()elseif o7=="apTick"then aX.APTick()elseif o7=="radarTick"then aY.UpdateRadar()elseif o7=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function oz(oA,n3)local oB=vec3()local oC=vec3()if oA==axisCommandId.longitudinal then oB=vec3(core.getConstructOrientationForward())oC=bo elseif oA==axisCommandId.vertical then oB=vec3(core.getConstructOrientationUp())oC=bn elseif oA==axisCommandId.lateral then oB=vec3(core.getConstructOrientationRight())oC=bp else return vec3()end;local oD=vec3(core.getWorldGravity())local oE=oD:dot(oC)local oF=vec3(core.getWorldAirFrictionAcceleration())local oG=oF:dot(oC)local oH=bq:dot(oB)local oI=n3*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(oI-oH)local oJ=targetSpeedPID2:get()local oK=(oJ-oG-oE)*oC;return oK end;local function oL(oA,n3)local oB=vec3()local oC=vec3()if oA==axisCommandId.longitudinal then oB=vec3(core.getConstructOrientationForward())oC=bo elseif oA==axisCommandId.vertical then oB=vec3(core.getConstructOrientationUp())oC=bn elseif oA==axisCommandId.lateral then oB=vec3(core.getConstructOrientationRight())oC=bp else return vec3()end;local oD=vec3(core.getWorldGravity())local oE=oD:dot(oC)local oF=vec3(core.getWorldAirFrictionAcceleration())local oG=oF:dot(oC)local oH=bq:dot(oB)local oI=n3*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(oI-oH)local oJ=targetSpeedPID:get()local oK=(oJ-oG-oE)*oC;return oK end;local function oM(oN,h9,lx)local oO=oN:cross(lx):normalize_inplace()local hW=math.acos(r(oO:dot(-h9),-1,1))*constants.rad2deg;if oO:cross(-h9):dot(lx)<0 then hW=-hW end;return hW end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and O then cn(0)O=false elseif not bA and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local oP=r(T+U+system.getControlDeviceForwardInput(),-1,1)local oQ=r(W+Z+system.getControlDeviceYawInput(),-1,1)local oR=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local oS=Y;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())av=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local oT=bC/180*math.pi;local oU=math.cos(oT)local oV=math.sin(oT)bB=oM(bt,bo,bp*oU+bn*oV)local oW=br:normalize()local oX=d(bC)local oY=utils.sign(bC)local oZ=vec3(core.getWorldAngularVelocity())local o_=oP*pitchSpeedFactor*bp+oQ*rollSpeedFactor*bo+oR*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local p0=d(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and p0>0 or ar>0.0 and p0<autoRollRollThreshold and autoRollPreference)and oQ==0 and d(bB)<85 then local p1=b4;local p2=autoRollFactor;if ar==0 then p2=p2/4;b4=0;p1=0 end;if rollPID==nil then rollPID=pid.new(p2*0.01,0,p2*0.1)end;rollPID:inject(p1-bC)local p3=rollPID:get()o_=o_+p3*bo end end;local p4=1;local p5=0;local p6=1;local p7=system.getMouseWheel()if p7>0 then bV()elseif p7<0 then bV(true)else aw=true end;L=0;if aq and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local p8=throttlePID:get()N=r(p8,-1,1)if N<K and ar>0.005 then M=true;s:setThrottleCommand(axisCommandId.longitudinal,r(N,0.01,1))else M=false;s:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local p9=r(brakePID:get(),0,1)if ar>0 and bu<-80 or ar>0.005 then L=p9 end;if L>0 then if M and N==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else N=r(N,0.01,1)end;local pa=''local pb=vec3()local pc=oz(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",pc,p5)local pd='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pd=pd..ExtraLongitudeTags end;local pe=s:getAxisCommandType(axisCommandId.longitudinal)local pf=s:composeAxisAccelerationFromThrottle(pd,axisCommandId.longitudinal)local pg=oL(axisCommandId.lateral,LeftAmount*1000)pa=pa..' , '.."lateral airfoil , lateral ground "pb=pb+pg;if pb:len()>constants.epsilon then a:setEngineForceCommand(pa,pb,p5,'','','',p6)end;a:setEngineForceCommand(pd,pf,p4)local ph='thrust analog vertical fueled 'local pi='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then pi=pi..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then ph=ph..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(ph,pc,p4)else a:setEngineForceCommand(ph,vec3(),p4)end;if LeftAmount~=0 then a:setEngineForceCommand(pi,pg,p4)else a:setEngineForceCommand(pi,vec3(),p4)end;if oS==0 then oS=L end;local pj=-oS*(brakeSpeedFactor*br+brakeFlatFactor*oW)a:setEngineForceCommand('brake',pj)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,K)end;local n3=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-n3/3.6)local p9=r(brakePID:get(),0,1)oS=r(oS+p9,0,1)end;local pj=-oS*(brakeSpeedFactor*br+brakeFlatFactor*oW)a:setEngineForceCommand('brake',pj)local pa=''local pb=vec3()local pk=false;local pd='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pd=pd..ExtraLongitudeTags end;local pe=s:getAxisCommandType(axisCommandId.longitudinal)if pe==axisCommandType.byThrottle then local pf=s:composeAxisAccelerationFromThrottle(pd,axisCommandId.longitudinal)a:setEngineForceCommand(pd,pf,p4)elseif pe==axisCommandType.byTargetSpeed then local pf=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)pa=pa..' , '..pd;pb=pb+pf;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then pk=true end end;local pi='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then pi=pi..ExtraLateralTags end;local pl=s:getAxisCommandType(axisCommandId.lateral)if pl==axisCommandType.byThrottle then local pm=s:composeAxisAccelerationFromThrottle(pi,axisCommandId.lateral)a:setEngineForceCommand(pi,pm,p4)elseif pl==axisCommandType.byTargetSpeed then local pg=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)pa=pa..' , '..pi;pb=pb+pg end;local ph='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then ph=ph..ExtraVerticalTags end;local pn=s:getAxisCommandType(axisCommandId.vertical)if pn==axisCommandType.byThrottle then local pc=s:composeAxisAccelerationFromThrottle(ph,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(ph,pc,p4,'airfoil','ground','',p6)else a:setEngineForceCommand(ph,vec3(),p4)a:setEngineForceCommand('airfoil vertical',pc,p4,'airfoil','','',p6)a:setEngineForceCommand('ground vertical',pc,p4,'ground','','',p6)end elseif pn==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),p4)end;local po=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)pa=pa..' , '..ph;pb=pb+po end;if pb:len()>constants.epsilon then if Y~=0 or pk or d(oW:dot(bo))<0.5 then pa=pa..', brake'end;a:setEngineForceCommand(pa,pb,p5,'','','',p6)end end;local pp=torqueFactor*(o_-oZ)local pq=vec3(core.getWorldAirFrictionAngularAcceleration())pp=pp-pq;a:setEngineTorqueCommand('torque',pp,p4,'airfoil','','',p6)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local eG=bq:len()local pr=0.15;if not bA then local ps=s:getTargetSpeed(axisCommandId.longitudinal)if eG*3.6>ps*(1-pr)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eG*3.6<ps*(1-pr)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local mU=unit.getThrottle()if AtmoSpeedAssist then mU=K*100 end;local n3=mU/100;if k==0 then n3=n3*MaxGameVelocity;if eG>=n3*(1-pr)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eG<n3*(1-pr)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local ne=e(b7)n3=n3*ne/3.6;if eG>=n3*(1-pr)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eG<n3*(1-pr)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local gf=coroutine.status(beginSetup)if gf=="suspended"then local co,gg=coroutine.resume(beginSetup)if gg then system.print("ERROR STARTUP: "..gg)end elseif gf=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(pt)local function pu(bW)local D=1;local function pv(pw,bW)local px={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local py=pw;for _,cR in ipairs(px)do if bW and py>cR then pw=cR elseif pw<cR and not bW then pw=cR;break end end;return pw end;if bW then D=-1 end;if not ExternalAGG and by then if a1 and bW then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bg=pv(bg,bW)else bg=bg+D*a3 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=pv(HoldAltitude,bW)else HoldAltitude=HoldAltitude+D*a3 end end else s:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function pz(pA)if not aq then a2="Flight Assist in Atmo only"return end;local cZ=type(pA)if bK==nil then if cZ=="table"then if Autopilot or VectorToTarget then cC()end;c4("180On","BR")elseif pA==1 then c4("bnkLft","BR")else c4("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cz()if cZ~="table"then pA=pA+1 end end;bK=pA else c4("180Off","BR")bK=nil end end;if pt=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cn(0)if vBooster or hover then if aq and ao==-1 then c4("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if S then c4("grOut","LG",1)a.control.extendLandingGears()end;s:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then c4("grOut","LG",1)a.control.extendLandingGears()end else if S then c4("grIn","LG",1)a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif pt=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif pt=="forward"then T=T-1 elseif pt=="backward"then if AltIsOn then pz(-br*5000)else T=T+1 end elseif pt=="left"then if AltIsOn then pz(1)else W=W-1 end elseif pt=="right"then if AltIsOn then pz(3)else W=W+1 end elseif pt=="yawright"then X=X-1 elseif pt=="yawleft"then X=X+1 elseif pt=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif pt=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif pt=="up"then af=af+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif pt=="down"then af=af-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif pt=="groundaltitudeup"then pu()elseif pt=="groundaltitudedown"then pu(true)elseif pt=="option1"then toggleView=false;if AltIsOn and a1 then local pB=""for i=1,#passengers do pB=pB.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..A(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..pB)return end;aW.adjustAutopilotTargetIndex()elseif pt=="option2"then toggleView=false;if AltIsOn and a1 then for i=1,#passengers do core.forceDeboard(passengers[i])end;a2="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif pt=="option3"then local function pC()aE=not aE;if not aE then c4("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else c4("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then t(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then t(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a1 then local pB=""for i=1,#ships do pB=pB.."| ID: "..ships[i].." Mass: "..A(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..pB)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;pC()toggleView=false elseif pt=="option4"then toggleView=false;if AltIsOn and a1 then for i=1,#ships do core.forceUndock(ships[i])end;a2="Undocked all ships"return end;bK=nil;cC()elseif pt=="option5"then toggleView=false;function ToggleLockPitch()if LockPitch==nil then c4("lkPOn","LP")if not a1 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else c4("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif pt=="option6"then toggleView=false;if AltIsOn and a1 then if shield_1 then local pD=shield_1.getVentingCooldown()if pD>0 then a2="Cannot vent again for "..pD.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a2="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a2="Shields already at max hitpoints"end;return else a2="No shield found"return end end;cz()elseif pt=="option7"then toggleView=false;if AltIsOn and a1 then if shield_1 then shield_1.toggle()return else a2="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end elseif pt=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"s:deactivateGroundEngineAltitudeStabilization()c4("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)c4("gsOn","GS")end;toggleView=false elseif pt=="option9"then if AltIsOn and a1 then s:resetCommand(axisCommandId.longitudinal)s:resetCommand(axisCommandId.lateral)s:resetCommand(axisCommandId.vertical)cn(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then c4("gyOn","GA")else c4("gyOff","GA")end end;toggleView=false elseif pt=="lshift"then bR=false;if AltIsOn then a1=true end;if x()==1 then a1=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;a_=false;aZ=false end elseif pt=="brake"then if BrakeToggleStatus or AltIsOn then cE()elseif not BrakeIsOn then cE()else BrakeIsOn=true end elseif pt=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif pt=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif pt=="stopengines"then local function pE()if E-F<1.5 then c4("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bK=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;pE()F=E;if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then s:resetCommand(axisCommandId.longitudinal)cn(0)else cn(100)end else if s:getTargetSpeed(axisCommandId.longitudinal)~=0 then s:resetCommand(axisCommandId.longitudinal)else if aq then cq(AtmoSpeedLimit)else cq(MaxGameVelocity*3.6)end end end elseif pt=="speedup"then bV()elseif pt=="speeddown"then bV(true)elseif pt=="antigravity"and not ExternalAGG then if antigrav~=nil then cG()end end end;function script.onActionStop(pt)local function pF()if not ExternalAGG and by then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if pt=="forward"then T=0 elseif pt=="backward"then T=0 elseif pt=="left"then if bK then if bK==2 then bK=-2 else bK=-1 end end;W=0 elseif pt=="right"then if bK then if bK==4 then bK=-2 else bK=-1 end end;W=0 elseif pt=="yawright"then X=0 elseif pt=="yawleft"then X=0 elseif pt=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif pt=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif pt=="up"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pt=="down"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pt=="groundaltitudeup"then pF()toggleView=false elseif pt=="groundaltitudedown"then pF()toggleView=false elseif pt=="lshift"then if x()==1 then ag=0;ah=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a1=false elseif pt=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then cE()else BrakeIsOn=false end end elseif pt=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(pt)local function pG(bW)local D=1;if bW then D=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=r(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+D*a5;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a5 end;a5=r(a5*1.05,a3,50)else s:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function pH(bW)local D=1;if bW then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if pt=="groundaltitudeup"then if not a1 then pG()end elseif pt=="groundaltitudedown"then if not a1 then pG(true)end elseif pt=="speedup"then pH()elseif pt=="speeddown"then pH(true)end end;function script.onInputText(ck)local function pI(pJ,eK,hS)local function pK(eK)local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d6='::pos{'..B..','..B..','..B..','..B..','..B..'}'local dj,dk,dr,ds,dt=o(eK,d6)if dj=="0"and dk=="0"then return vec3(z(dr),z(ds),z(dt))end;ds=math.rad(ds)dr=math.rad(dr)local planet=b[z(dj)][z(dk)]local eb=math.cos(dr)local pL=vec3(eb*math.cos(ds),eb*math.sin(ds),math.sin(dr))return planet.center+(planet.radius+dt)*pL end;local position=pK(eK)return aW.AddNewLocation(pJ,position,hS)end;local i;local pM,pN=nil,nil;local pO="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(ck," ")pM=ck;if i~=nil then pM=string.sub(ck,0,i-1)pN=string.sub(ck,i+1)end;if pM=="/help"or pM=="/commands"then for kN in string.gmatch(pO,"([^\n]+)")do system.print(kN)end;return elseif pM=="/setname"then if pN==nil or pN==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(pN)else a2="Select a saved target to rename first"end elseif shield_1 and pM=="/resist"then if pN==nil or shield_1.getResistancesCooldown()>0 then a2="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d6=B..', '..B..', '..B..', '..B;local pP,pQ,pR,pS=o(pN,d6)if pS==nil or pP+pQ+pR+pS>0.6 then a2="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(pP,pQ,pR,pS)==1 then a2="Shield Resistances set"else a2="Resistance setting failed."end elseif pM=="/addlocation"or string.find(ck,"::pos")~=nil then local hS=false;local pJ="0-Temp"if pN==nil or pN==""then pN=pM;hS=true end;i=string.find(pN,"::")if not hS then pJ=string.sub(pN,1,i-2)end;local eK=string.sub(pN,i)pI(pJ,eK,hS)elseif pM=="/agg"then if pN==nil or pN==""then a2="Usage: /agg targetheight"return end;pN=z(pN)if pN<1000 then pN=1000 end;AntigravTargetAltitude=pN;a2="AGG Target Height set to "..pN elseif pM=="/G"then if pN==nil or pN==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if pN=="dump"then for cQ,cR in pairs(ca())do if type(_G[cR])=="boolean"then if _G[cR]==true then system.print(cR.." true")else system.print(cR.." false")end elseif _G[cR]==nil then system.print(cR.." nil")else system.print(cR.." ".._G[cR])end end;return end;i=string.find(pN," ")local pT=string.sub(pN,0,i-1)local pU=string.sub(pN,i+1)for cQ,cR in pairs(ca())do if cR==pT then a2="Variable "..pT.." changed to "..pU;local pV=type(_G[cR])if pV=="number"then pU=z(pU)if cR=="AtmoSpeedLimit"then b7=pU end elseif pV=="boolean"then if string.lower(pU)=="true"then pU=true else pU=false end end;_G[cR]=pU;return end end;a2="No such global variable: "..pT elseif pM=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then aW.ClearCurrentPosition()else a2="Select a custom wp to delete first in IPH"end elseif pM=="/copydatabank"then if dbHud_2 then cM(true)else a2="Spare Databank required to copy databank"end elseif pM=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dk)if bP[1]and not aq and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dk)if bP[1]and CollisionSystem then if#bL>650 then dk=tostring(dk)bL[dk]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
