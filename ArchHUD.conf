name: ArchHud - Archaegeo v1.704 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")require("autoconf/custom/archhud/radarclass")require("autoconf/custom/archhud/controlclass")script={}VERSION_NUMBER=1.704;local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;time=o()clearAllCheck=o()local D=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"isBoosting=false;brakeDistance=0;brakeTime=0;local E=0;local F=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;local G=""inAtmo=j()>0;atmosDensity=j()coreAltitude=core.getAltitude()local H=core.getElementIdList()lastTravelTime=o()coreMass=core.getConstructMass()local I=false;gyroIsOn=nil;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local J={}damageMessage=""resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;atmoTanks={}spaceTanks={}rocketTanks={}local K=0;repairArrows=false;local L=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;CONTROL=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;local M=LandingGearGroundHeight;stalling=false;targetRoll=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitalParams={VectorToTarget=false}OrbitTargetOrbit=0;OrbitAchieved=false;local N=false;SpaceEngineVertDn=false;SpaceEngines=false;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;AtlasOrdered={}notPvPZone=false;pvpDist=50000;ReversalIsOn=nil;contacts={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;planetAtlas={}scopeFOV=90;oldShowHud=showHud;function p(O)system.print(time..": "..O)end;local function P(Q)local C=1;if Q then C=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn and I then local R=PlayerThrottle;PlayerThrottle=z(q(PlayerThrottle+C*speedChangeLarge/100,-1,1),2)if PlayerThrottle>=0 and R<0 then PlayerThrottle=0;I=false end elseif AltIsOn then if atmosDensity>0 or Reentry then adjustedAtmoSpeedLimit=q(adjustedAtmoSpeedLimit+C*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+C*speedChangeLarge/3.6*100,0,8333.00)end else r:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if Autopilot or VectorToTarget or spaceLaunch or IntoOrbit then apScrollIndex=apScrollIndex+1*C*-1;if apScrollIndex>#AtlasOrdered then apScrollIndex=1 end;if apScrollIndex<1 then apScrollIndex=#AtlasOrdered end else if not Q then C=1 else C=nil end;ATLAS.adjustAutopilotTargetIndex(C)end end end;function play(S,T,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..S.."|"..T.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..S.."|"..T.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..S.."|"..T.."|"..soundVolume)end end;function addTable(U,V)for i=1,#V do U[#U+1]=V[i]end;return U end;function saveableVariables(W)local X={}if not W then addTable(X,saveableVariablesBoolean)addTable(X,savableVariablesHandling)addTable(X,savableVariablesHud)addTable(X,savableVariablesPhysics)return X elseif W=="boolean"then return saveableVariablesBoolean elseif W=="handling"then return savableVariablesHandling elseif W=="hud"then return savableVariablesHud elseif W=="physics"then return savableVariablesPhysics end end;local function Y(Z,a0,a1,a2,a3)if a2==nil then a2=""end;if a3==nil then a3=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],a2,Z,a0,a3,a1)end;function float_eq(a4,a5)if a4==0 then return c(a5)<1e-09 end;if a5==0 then return c(a4)<1e-09 end;return c(a4-a5)<math.max(c(a4),c(a5))*epsilon end;function getDistanceDisplayString(distance,a6)local a7=distance>100000;if a6==nil then a6=1 end;if a7 then return z(distance/1000/200,a6).."SU"elseif distance<1000 then return z(distance,a6).."M"else return z(distance/1000,a6).."KM"end end;function FormatTimeString(a8)local a9=0;local aa=0;local ab=0;if a8<60 then a8=d(a8)elseif a8<3600 then a9=d(a8/60)a8=d(a8%60)elseif a8<86400 then aa=d(a8/3600)a9=d(a8%3600/60)else ab=d(a8/86400)aa=d(a8%86400/3600)end;if ab>0 then return ab.."d "..aa.."h "elseif aa>0 then return aa.."h "..a9 .."m "elseif a9>0 then return a9 .."m "..a8 .."s"elseif a8>0 then return a8 .."s"else return"0s"end end;function SaveDataBank(ac)local function ad(ae)for af,ag in pairs(ae)do dbHud_1.setStringValue(ag,g(_G[ag]))if ac and dbHud_2 then dbHud_2.setStringValue(ag,g(_G[ag]))end end end;if dbHud_1 then ad(autoVariables)ad(saveableVariables())system.print("Saved Variables to Datacore")if ac and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function ah()local function ai(aj)return type(aj)=='number'end;local function ak(aj)return type(y(aj))=='number'end;local function al(am)return type(am)=='table'end;local function an(ao)return type(ao)=='string'end;local function ap(ag)return al(ag)and ai(ag.x and ag.y and ag.z)end;local function aq(ar)return al(ar)and ai(ar.latitude and ar.longitude and ar.altitude and ar.id and ar.systemId)end;local as=math.pi/180;local at=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local au='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function av(aj)local aw=string.gsub(string.reverse(e('%.4f',aj)),'^0*%.?','')return aw==''and'0'or string.reverse(aw)end;local function ax(ay)if ap(ay)then return e('{x=%.3f,y=%.3f,z=%.3f}',ay.x,ay.y,ay.z)end;if al(ay)and not getmetatable(ay)then local az={}local aA=next(ay)if type(aA)=='nil'or aA==1 then az=ay else for af,ag in pairs(ay)do local aB=ax(ag)if type(af)=='number'then table.insert(az,e('[%s]=%s',af,aB))else table.insert(az,e('%s=%s',af,aB))end end end;return e('{%s}',table.concat(az,','))end;if an(ay)then return e("'%s'",ay:gsub("'",[[\']]))end;return tostring(ay)end;local aC={}aC.__index=aC;aC.__tostring=function(ay,aD)local aE={}for af in pairs(ay)do table.insert(aE,af)end;table.sort(aE)local az={}for _,af in ipairs(aE)do local aB=ax(ay[af])if type(af)=='number'then table.insert(az,e('[%s]=%s',af,aB))else table.insert(az,e('%s=%s',af,aB))end end;if aD then return e('%s%s',aD,table.concat(az,',\n'..aD))end;return e('{%s}',table.concat(az,','))end;aC.__eq=function(aF,aG)return aF.systemId==aG.systemId and aF.id==aG.id and float_eq(aF.radius,aG.radius)and float_eq(aF.center.x,aG.center.x)and float_eq(aF.center.y,aG.center.y)and float_eq(aF.center.z,aG.center.z)and float_eq(aF.GM,aG.GM)end;local function aH(aI,aJ,aK,aL,aM)assert(ak(aI),'Argument 1 (systemId) must be a number:'..type(aI))assert(ak(aJ),'Argument 2 (id) must be a number:'..type(aJ))assert(ak(aK),'Argument 3 (radius) must be a number:'..type(aK))assert(al(aL),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(aL))assert(ak(aM),'Argument 5 (GM) must be a number:'..type(aM))return setmetatable({systemId=y(aI),id=y(aJ),radius=y(aK),center=vec3(aL),GM=y(aM)},aC)end;local aN={}aN.__index=aN;aN.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,av(p.latitude*at),av(p.longitude*at),av(p.altitude))end;aN.__eq=function(aF,aG)return aF.id==aG.id and aF.systemId==aG.systemId and float_eq(aF.latitude,aG.latitude)and float_eq(aF.altitude,aG.altitude)and(float_eq(aF.longitude,aG.longitude)or float_eq(aF.latitude,math.pi/2)or float_eq(aF.latitude,-math.pi/2))end;local function aO(aP,aJ,aQ,aR,aS)local aI=aP;if an(aP)and not aR and not aS and not aJ and not aQ then aI,aJ,aQ,aR,aS=n(aP,au)assert(aI,'Argument 1 (position string) is malformed.')else assert(ak(aI),'Argument 1 (systemId) must be a number:'..type(aI))assert(ak(aJ),'Argument 2 (id) must be a number:'..type(aJ))assert(ak(aQ),'Argument 3 (latitude) must be in degrees:'..type(aQ))assert(ak(aR),'Argument 4 (longitude) must be in degrees:'..type(aR))assert(ak(aS),'Argument 5 (altitude) must be in meters:'..type(aS))end;aI=y(aI)aJ=y(aJ)aQ=y(aQ)aR=y(aR)aS=y(aS)if aJ==0 then return setmetatable({latitude=aQ,longitude=aR,altitude=aS,id=aJ,systemId=aI},aN)end;return setmetatable({latitude=as*q(aQ,-90,90),longitude=as*(aR%360),altitude=aS,id=aJ,systemId=aI},aN)end;local aT={}aT.__index=aT;aT.__tostring=function(ay,aD)local aU=aD and aD..'  'local aV={}local aE={}for af in pairs(ay)do table.insert(aE,af)end;table.sort(aE)for _,aW in ipairs(aE)do bdy=ay[aW]local aX=aC.__tostring(bdy,aU)if aD then table.insert(aV,e('[%s]={\n%s\n%s}',aW,aX,aD))else table.insert(aV,e('  [%s]=%s',aW,aX))end end;if aD then return e('\n%s%s%s',aD,table.concat(aV,',\n'..aD),aD)end;return e('{\n%s\n}',table.concat(aV,',\n'))end;local function aY(aZ)local b={}local pid;for _,ag in pairs(aZ)do local aJ=ag.planetarySystemId;if type(aJ)~='number'then error('Invalid planetary system ID: '..tostring(aJ))elseif pid and aJ~=pid then error('Mistringmatch planetary system IDs: '..aJ..' and '..pid)end;local a_=ag.bodyId;if type(a_)~='number'then error('Invalid body ID: '..tostring(a_))elseif b[a_]then error('Duplicate body ID: '..tostring(a_))end;setmetatable(ag.center,getmetatable(vec3.unit_x))b[a_]=setmetatable(ag,aC)pid=aJ end;return setmetatable(b,aT)end;L={}local function b0(aZ)return setmetatable({galaxyAtlas=aZ or{}},L)end;L.__index=function(am,i)if type(i)=='number'then local system=am.galaxyAtlas[i]return aY(system)end;return rawget(L,i)end;L.__pairs=function(ay)return function(am,af)local b1,nv=next(am,af)return b1,nv and aY(nv)end,ay.galaxyAtlas,nil end;L.__tostring=function(ay)local b2={}for _,b3 in pairs(ay or{})do local b4=b3:getPlanetarySystemId()local b5=aT.__tostring(b3,'    ')table.insert(b2,e('  [%s]={%s\n  }',b4,b5))end;return e('{\n%s\n}\n',table.concat(b2,',\n'))end;L.BodyParameters=aH;L.MapPosition=aO;L.PlanetarySystem=aY;function L.createBodyParameters(aI,aJ,b6,b7,b8,b9,ba)assert(ak(aI),'Argument 1 (systemId) must be a number:'..type(aI))assert(ak(aJ),'Argument 2 (id) must be a number:'..type(aJ))assert(ak(b6),'Argument 3 (surfaceArea) must be a number:'..type(b6))assert(al(b7),'Argument 4 (aPosition) must be an array or vec3:'..type(b7))assert(al(b8),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(b8))assert(ak(b9),'Argument 6 (altitude) must be in meters:'..type(b9))assert(ak(ba),'Argument 7 (gravityAtPosition) must be number:'..type(ba))local aK=x(b6/4/math.pi)local distance=aK+b9;local bb=vec3(b7)+distance*vec3(b8)local aM=ba*distance*distance;return aH(aI,aJ,aK,bb,aM)end;L.isMapPosition=aq;function L:getPlanetarySystem(aP)if i==nil then i=0 end;if nv==nil then nv=0 end;local aI=aP;if aq(aP)then aI=aP.systemId end;if type(aI)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=aT then system=aY(system)end;return system end end end;function aT:sizeCalculator(bc)return 1.05*bc.radius end;function aT:castIntersections(bd,be,bf,bg,bh,bi)local bj={}if bh then for _,bc in pairs(bh)do table.insert(bj,bc)end else bj=planetAtlas end;if not bi then table.sort(bj,function(bk,bl)local a4=bk.center;local a5=bl.center;return(a4.x-bd.x)^2+(a4.y-bd.y)^2+(a4.z-bd.z)^2<(a5.x-bd.x)^2+(a5.y-bd.y)^2+(a5.z-bd.z)^2 end)end;local bm=be:normalize()for _,bc in ipairs(bj)do local bn=bc.center-bd;local aK=self:sizeCalculator(bc)local bo=bn:dot(bm)local bp=bo^2-(bn:len2()-aK^2)if bp>=0 then local bq=x(bp)local br=bo+bq;local bs=bo-bq;if bs>0 then return bc,br,bs elseif br>0 then return bc,br,nil end end end;return nil,nil,nil end;function aT:closestBody(bt)assert(type(bt)=='table','Invalid coordinates.')local bu,bc;local bv=vec3(bt)for _,bw in pairs(self)do local bx=(bw.center-bv):len2()if(not bc or bx<bu)and bw.name~="Space"then bc=bw;bu=bx end end;return bc end;function aT:convertToBodyIdAndWorldCoordinates(aP)local by=aP;if an(aP)then by=aO(aP)end;if by.id==0 then return 0,vec3(by.latitude,by.longitude,by.altitude)end;local bw=self:getBodyParameters(by)if bw then return by.id,bw:convertToWorldCoordinates(by)end end;function aT:getBodyParameters(aP)local aJ=aP;if aq(aP)then aJ=aP.id end;assert(ak(aJ),'Argument 1 (id) must be a number:'..type(aJ))return self[aJ]end;function aT:getPlanetarySystemId()local _,ag=next(self)return ag and ag.systemId end;function aC:convertToMapPosition(aL)assert(al(aL),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(aL))local bz=vec3(aL)if self.id==0 then return setmetatable({latitude=bz.x,longitude=bz.y,altitude=bz.z,id=0,systemId=self.systemId},aN)end;local bA=bz-self.center;local distance=bA:len()local aS=distance-self.radius;local aQ=0;local aR=0;if not float_eq(distance,0)then local bB=m(bA.y,bA.x)aR=bB>=0 and bB or 2*math.pi+bB;aQ=math.pi/2-math.acos(bA.z/distance)end;return setmetatable({latitude=aQ,longitude=aR,altitude=aS,id=self.id,systemId=self.systemId},aN)end;function aC:convertToWorldCoordinates(aP)local by=an(aP)and aO(aP)or aP;if by.id==0 then return vec3(by.latitude,by.longitude,by.altitude)end;assert(aq(by),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(by.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(by.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local bC=math.cos(by.latitude)return self.center+(self.radius+by.altitude)*vec3(bC*math.cos(by.longitude),bC*math.sin(by.longitude),math.sin(by.latitude))end;function aC:getAltitude(aL)return(vec3(aL)-self.center):len()-self.radius end;function aC:getDistance(aL)return(vec3(aL)-self.center):len()end;function aC:getGravity(aL)local bD=self.center-vec3(aL)local bE=bD:len2()return self.GM/bE*bD/x(bE)end;return setmetatable(L,{__call=function(_,...)return b0(...)end})end;local function bF()local Kinematic={}local bG=30000000/3600;local bH=bG*bG;local bI=100;function Kinematic.computeAccelerationTime(bJ,bK,bL)local bM=bG*math.asin(bJ/bG)return(bG*math.asin(bL/bG)-bM)/bK end;function Kinematic.computeDistanceAndTime(bJ,bL,bN,bO,bP,bQ)bP=bP or 0;bQ=bQ or 0;local bR=bJ<=bL;local bS=bO*(bR and 1 or-1)/bN;local bT=-bQ/bN;local bU=bS+bT;if bR and bU<=0 or not bR and bU>=0 then return-1,-1 end;local bV,bW=0,0;if bS~=0 and bP>0 then local bM=math.asin(bJ/bG)local bX=math.pi*(bS/2+bT)local bY=bS*bP;local bZ=bG*math.pi;local ag=function(am)local b_=(bX*am-bY*math.sin(math.pi*am/2/bP)+bZ*bM)/bZ;local c0=math.tan(b_)return bG*c0/x(c0*c0+1)end;local c1=bR and function(ao)return ao>=bL end or function(ao)return ao<=bL end;bW=2*bP;if c1(ag(bW))then local c2=0;while c(bW-c2)>0.5 do local am=(bW+c2)/2;if c1(ag(am))then bW=am else c2=am end end end;local c3=bJ;local c4=bW/bI;for c5=1,bI do local c6=ag(c5*c4)bV=bV+(c6+c3)*c4/2;c3=c6 end;if bW<2*bP then return bV,bW end;bJ=c3 end;local bM=bG*math.asin(bJ/bG)local time=(bG*math.asin(bL/bG)-bM)/bU;local c7=bH*math.cos(bM/bG)/bU;local distance=c7-bH*math.cos((bU*time+bM)/bG)/bU;return distance+bV,time+bW end;function Kinematic.computeTravelTime(bJ,bK,distance)if distance==0 then return 0 end;if bK>0 then local bM=bG*math.asin(bJ/bG)local c7=bH*math.cos(bM/bG)/bK;return(bG*math.acos(bK*(c7-distance)/bH)-bM)/bK end;if bJ==0 then return-1 end;assert(bJ>0,'Acceleration and initial speed are both zero.')return distance/bJ end;return Kinematic end;local function c8()local vec3=require('cpml.vec3')local ah=ah()local function an(ao)return type(ao)=='string'end;local function al(am)return type(am)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(aS)assert(self.body)local distance=aS+self.body.radius;if not float_eq(distance,0)then local c9=x(self.body.GM/distance)return x(2)*c9,c9 end;return nil,nil end;function Kepler:orbitalParameters(aP,ca)assert(self.body)assert(al(aP)or an(aP))assert(al(ca))local cb=(an(aP)or ah.isMapPosition(aP))and self.body:convertToWorldCoordinates(aP)or vec3(aP)local ag=vec3(ca)local cc=cb-self.body.center;local cd=ag:len2()local ce=cc:len()local cf=self.body.GM;local cg=((cd-cf/ce)*cc-cc:dot(ag)*ag)/cf;local a4=cf/(2*cf/ce-cd)local ch=cg:len()local bm=cg:normalize()local ci=a4*(1-ch)local cj=a4*(1+ch)local ck=ci*bm+self.body.center;local cl=ch<=1 and-cj*bm+self.body.center or nil;local cm=x(a4*cf*(1-ch*ch))local cn=cl and 2*math.pi*x(a4^3/cf)local co=math.acos(cg:dot(cc)/(ch*ce))if cc:dot(ag)<0 then co=-(co-2*math.pi)end;local cp=math.acos((math.cos(co)+ch)/(1+ch*math.cos(co)))local cq=cp;if cq<0 then cq=cq+2*math.pi end;local cr=cq-ch*math.sin(cq)local cs=0;local ct=0;local cu=0;if cn~=nil then cs=cr/(2*math.pi/cn)ct=cn-cs;cu=ct+cn/2;if co-math.pi>0 then ct=cs;cu=ct+cn/2 end;if cu>cn then cu=cu-cn end end;return{periapsis={position=ck,speed=cm/ci,circularOrbitSpeed=x(cf/ci),altitude=ci-self.body.radius},apoapsis=cl and{position=cl,speed=cm/cj,circularOrbitSpeed=x(cf/cj),altitude=cj-self.body.radius},currentVelocity=ag,currentPosition=cb,eccentricity=ch,period=cn,eccentricAnomaly=cp,meanAnomaly=cr,timeToPeriapsis=ct,timeToApoapsis=cu,trueAnomaly=co}end;local function cv(cw)local bw=ah.BodyParameters(cw.systemId,cw.id,cw.radius,cw.center,cw.GM)return setmetatable({body=bw},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return cv(...)end})end;local function cx()local function cy(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function cz()local function cA(cB,cC)return cB.name<cC.name end;AtlasOrdered={}for af,ag in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=ag.name,index=af}end;table.sort(AtlasOrdered,cA)end;local function cD(cE)for af,ag in pairs(cE)do if ag.name and ag.name==CustomTarget.name then return af end end;return-1 end;local function cF()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local cG=AtlasOrdered[AutopilotTargetIndex].index;local cH=b[0][cG]if cH.center then AutopilotTargetName=cH.name;autopilotTargetPlanet=galaxyReference[0][cG]if CustomTarget~=nil then if atmosDensity==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cH;for _,ag in pairs(galaxyReference[0])do if ag.name==CustomTarget.planetname then autopilotTargetPlanet=ag;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cI(cJ)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit and not Reentry and not finalLand then if cJ==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cF()else local cG=AtlasOrdered[AutopilotTargetIndex].index;local cH=b[0][cG]if cH~=nil and cH.name=="Space"or iphCondition=="Custom Only"and cH.center or iphCondition=="No Moons"and string.find(cH.name,"Moon")~=nil then if cJ==nil then cI()else cI(1)end else cF()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function cK()local cL=-1;cL=cD(b[0])if cL>-1 then table.remove(b[0],cL)end;cL=-1;cL=cD(SavedLocations)if cL~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cL)end;cI()cz()end;local function cM(cN,position,cO,cP)if dbHud_1 or cO then local p=cy(position)local cQ=p.gravity;if cP then cQ=unit.getClosestPlanetInfluence()end;local cR={position=position,name=cN,planetname=p.name,gravity=cQ,safe=cP}if not cO then SavedLocations[#SavedLocations+1]=cR else for af,ag in pairs(b[0])do if ag.name and cN==ag.name then table.remove(b[0],af)end end end;table.insert(b[0],cR)cz()cF()msgText="Location saved as "..cN.."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local cS={}function cS.UpdateAtlasLocationsList()cz()end;function cS.UpdateAutopilotTarget()cF()end;function cS.adjustAutopilotTargetIndex(cJ)cI(cJ)end;function cS.findAtlasIndex(cE)cD(cE)end;function cS.UpdatePosition(cT)local cL=cD(SavedLocations)if cL~=-1 then if cT~=nil then SavedLocations[cL].name=cT;AutopilotTargetIndex=AutopilotTargetIndex-1;cI()else local cU=SavedLocations[cL]cU.gravity=unit.getClosestPlanetInfluence()cU.position=worldPos;cU.safe=true end;msgText=SavedLocations[cL].name.." position updated ("..SavedLocations[cL].planetname..")"else msgText="Name Not Found"end end;function cS.AddNewLocation(cN,position,cO,cP)cM(cN,position,cO,cP)end;function cS.ClearCurrentPosition()cK()end;for af,ag in pairs(SavedLocations)do table.insert(b[0],ag)end;cz()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;cS.UpdateAutopilotTarget()return cS end;function script.onStart()local cV=false;local function cW()local function cX(cY)local cZ=dbHud_1.hasKey;for af,ag in pairs(cY)do if cZ(ag)then local aw=f(dbHud_1.getStringValue(ag))if aw~=nil then _G[ag]=aw;cV=true end end end end;if dbHud_1 then if not useTheseSettings then cX(saveableVariables())coroutine.yield()cX(autoVariables)else cX(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;cV=false end;coroutine.yield()if cV then msgText="Loaded Saved Variables"resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function c_()local function d0(d1,d2)if d1>d2 then d2=d1 end;local d3,d4=0,0;if ContainerOptimization>0 then d3=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then d4=FuelTankOptimization*0.05 end;d2=d2*(1-(d3+d4))return d2 end;local d5=core.getElementNameById;local d6=fuelX~=0 and fuelY~=0;for af in pairs(H)do local type=core.getElementTypeById(H[af])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(H[af])),'^.*vertical.*$')and core.getElementForwardById(H[af])[3]>0 then UpVertAtmoEngine=true end end;if n(type,'^.*Space Engine$')then SpaceEngines=true;if n(tostring(core.getElementTagsById(H[af])),'^.*vertical.*$')then local d7=core.getElementForwardById(H[af])if d7[3]<0 then N=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local d8=h(H[af])if d8>10000 then D=110 elseif d8>1000 then D=55 elseif d8>150 then D=27 end end;K=K+h(H[af])if d6 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local d8=h(H[af])local d9=k(H[af])local d1=0;local da=o()if type=="Atmospheric Fuel Tank"then local d2=400;local db=35.03;if d8>10000 then d2=51200;db=5480 elseif d8>1300 then d2=6400;db=988.67 elseif d8>150 then d2=1600;db=182.67 end;d1=d9-db;if fuelTankHandlingAtmo>0 then d2=d2+d2*fuelTankHandlingAtmo*0.2 end;d2=d0(d1,d2)atmoTanks[#atmoTanks+1]={H[af],d5(H[af]),d2,db,d1,da}end;if type=="Rocket Fuel Tank"then local d2=320;local db=173.42;if d8>65000 then d2=40000;db=25740 elseif d8>6000 then d2=5120;db=4720 elseif d8>700 then d2=640;db=886.72 end;d1=d9-db;if fuelTankHandlingRocket>0 then d2=d2+d2*fuelTankHandlingRocket*0.1 end;d2=d0(d1,d2)rocketTanks[#rocketTanks+1]={H[af],d5(H[af]),d2,db,d1,da}end;if type=="Space Fuel Tank"then local d2=600;local db=35.03;if d8>10000 then d2=76800;db=5480 elseif d8>1300 then d2=9600;db=988.67 elseif d8>150 then d2=2400;db=182.67 end;d1=d9-db;if fuelTankHandlingSpace>0 then d2=d2+d2*fuelTankHandlingSpace*0.2 end;d2=d0(d1,d2)spaceTanks[#spaceTanks+1]={H[af],d5(H[af]),d2,db,d1,da}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function dc()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,ag in pairs(door)do ag.toggle()end end;if switch then for _,ag in pairs(switch)do ag.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,ag in pairs(forcefield)do ag.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(M)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function dd()local de={}local function df()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local dg={[1]=4480,[6]=4480,[7]=6270}for dh,di in pairs(b)do b[dh][0]=df()b[dh][0].systemId=dh;de[dh]={}for dj,planet in pairs(b[dh])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=dg[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=dh;planet.bodyId=planet.id;de[dh][dj]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end;if planet.center and planet.name~="Space"then planetAtlas[#planetAtlas+1]=planet end end end;L=ah()galaxyReference=L(de)Kinematic=bF()Kep=c8()ATLAS=cx()end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})cW()coroutine.yield()c_()coroutine.yield()AP=APClass(a,core,unit,system,b,vBooster,hover,telemeter_1,antigrav,c,d,j,l,m,o,q,r,t,w,x,z)dc()coroutine.yield()dd()RADAR=RadarClass(core,system,library,radar_1,radar_2,c,s,x,Y,y,D)HUD=HudClass(a,core,unit,system,b,radar_1,radar_2,antigrav,hover,shield_1,c,d,e,f,j,k,l,m,o,q,r,s,w,x,z,Y)HUD.ButtonSetup()CONTROL=ControlClass(a,core,unit,system,b,vBooster,hover,antigrav,shield_1,dbHud_2,l,r,w,v,s,z,n,y,q)coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ag in pairs(door)do ag.toggle()end end;if switch then for _,ag in pairs(switch)do ag.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ag in pairs(forcefield)do ag.toggle()end end;showHud=oldShowHud;SaveDataBank()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(dk)local dl=nil;if dk=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif dk=="tenthSecond"then local function dm()local dn=system.createData;local dp=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=dp(panelInterplanetary,"value")interplanetaryHeaderText=dn('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=dp(panelInterplanetary,"value")widgetDistanceText=dn('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=dp(panelInterplanetary,"value")widgetTravelTimeText=dn('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=dp(panelInterplanetary,"value")widgetMaxMassText=dn('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=dp(panelInterplanetary,"value")widgetTargetOrbitText=dn('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=dp(panelInterplanetary,"value")widgetCurBrakeDistanceText=dn('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=dp(panelInterplanetary,"value")widgetCurBrakeTimeText=dn('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=dp(panelInterplanetary,"value")widgetMaxBrakeDistanceText=dn('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=dp(panelInterplanetary,"value")widgetMaxBrakeTimeText=dn('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=dp(panelInterplanetary,"value")widgetTrajectoryAltitudeText=dn('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function dq()s(panelInterplanetary)panelInterplanetary=nil end;local function dr()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local c6=velMag;local ds=unit.getThrottle()/100;if AtmoSpeedAssist then ds=PlayerThrottle end;local dt,du=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*ds,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,dv;if not TurnBurn and c6>0 then _,dv=AP.GetAutopilotBrakeDistanceAndTime(c6)else _,dv=AP.GetAutopilotTBBrakeDistanceAndTime(c6)end;local dw=0;local dx=0;if AutopilotCruising or not Autopilot and c6>5 then dx=Kinematic.computeTravelTime(c6,0,AutopilotDistance)elseif brakeDistance+dt<AutopilotDistance then dw=AutopilotDistance-(brakeDistance+dt)dx=Kinematic.computeTravelTime(8333.0556,0,dw)else local dy=(AutopilotDistance-brakeDistance)/dt;dt=AutopilotDistance-brakeDistance;du=du*dy end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return dx elseif AutopilotBraking then return dv elseif AutopilotCruising then return dx+dv else return du+brakeTime+dx end end;local function dz(cQ,dA)if cQ==nil then cQ=core.g()end;cQ=z(cQ,5)if dA~=nil and dA or(dl==nil or dl~=cQ)then local c6=coreVelocity:len()local dB=f(unit.getData()).maxBrake;if dB~=nil and dB>0 and inAtmo then dB=dB/q(c6/100,0.1,1)dB=dB/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+dB)/2 else LastMaxBrakeInAtmo=dB end end end;if dB~=nil and dB>0 then LastMaxBrake=dB end;dl=cQ end end;dz(nil,true)if setCruiseSpeed~=nil then if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or r:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then dm()end;if AutopilotTargetName~=nil then local dC=CustomTarget~=nil;local dD=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()dD=dD>1000000 and z(dD/1000000,2).." kTons"or z(dD/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=dr()if dC and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dE=getDistanceDisplayString(distance)t(widgetDistanceText,'{"label": "distance", "value": "'..dE..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dE=getDistanceDisplayString(brakeDistance)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dE..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')dE=getDistanceDisplayString(E)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dE..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(F)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",dD)..'", "unit":""}')dE=getDistanceDisplayString(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..dE..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else dq()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif dk=="oneSecond"then local function dF(dG)local dH=0;damageMessage=""local dI=K;local dJ=0;local dK=0;local dL=0;local dM=0;local dN=""local dO=core.getElementHitPointsById;for af in pairs(H)do local d8=0;local dP=0;dP=h(H[af])d8=dO(H[af])dJ=dJ+d8;if d8<dP then if d8==0 then dL=dL+1 else dK=dK+1 end;if repairArrows and#J==0 then position=vec3(core.getElementPositionById(H[af]))local Z=position.x;local a0=position.y;local dQ=position.z;table.insert(J,core.spawnArrowSticker(Z,a0,dQ+1,"down"))table.insert(J,core.spawnArrowSticker(Z,a0,dQ+1,"down"))core.rotateSticker(J[2],0,0,90)table.insert(J,core.spawnArrowSticker(Z+1,a0,dQ,"north"))table.insert(J,core.spawnArrowSticker(Z+1,a0,dQ,"north"))core.rotateSticker(J[4],90,90,0)table.insert(J,core.spawnArrowSticker(Z-1,a0,dQ,"south"))table.insert(J,core.spawnArrowSticker(Z-1,a0,dQ,"south"))core.rotateSticker(J[6],90,-90,0)table.insert(J,core.spawnArrowSticker(Z,a0-1,dQ,"east"))table.insert(J,core.spawnArrowSticker(Z,a0-1,dQ,"east"))core.rotateSticker(J[8],90,0,90)table.insert(J,core.spawnArrowSticker(Z,a0+1,dQ,"west"))table.insert(J,core.spawnArrowSticker(Z,a0+1,dQ,"west"))core.rotateSticker(J[10],-90,0,90)table.insert(J,H[af])end elseif repairArrows and#J>0 and J[11]==H[af]then for dR in pairs(J)do core.deleteSticker(J[dR])end;J={}end end;dH=d(dJ/dI*100)if dH<100 then dG[#dG+1]=Y(0,0,"","pbright txt")dM=d(dH*2.55)dN=e("rgb(%d,%d,%d)",255-dM,dM,0)if dH<100 then dG[#dG+1]=Y("50%",1035,"Elemental Integrity: "..dH.."%","txtbig txtmid","fill:"..dN)if dL>0 then dG[#dG+1]=Y("50%",1055,"Disabled Modules: "..dL.." Damaged Modules: "..dK,"txtbig txtmid","fill:"..dN)elseif dK>0 then dG[#dG+1]=Y("50%",1055,"Damaged Modules: "..dK,"txtbig txtmid","fill:"..dN)end end end end;local function dS()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,"Weapons","weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function dT()local da=o()local dU=velMag;local dV=da-lastTravelTime;if dU>1.38889 then dU=dU/1000;local dW=dU*(da-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+dW;totalDistanceTrip=totalDistanceTrip+dW end;flightTime=flightTime+dV;TotalFlightTime=TotalFlightTime+dV;lastTravelTime=da end;dT()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()dS()local dG={}HUD.OneSecond(dG)if ShouldCheckDamage then dF(dG)end;lastOdometerOutput=table.concat(dG,"")collectgarbage("collect")elseif dk=="fiveSecond"then if not UseSatNav then return end;G=dbHud_1.getStringValue("SPBAutopilotTargetName")if G~=nil and G~=""and G~="SatNavNotChanged"then local aw=f(dbHud_1.getStringValue("SavedLocations"))if aw~=nil then _G["SavedLocations"]=aw;local cL=-1;local cR;for af,ag in pairs(SavedLocations)do if ag.name and ag.name=="SatNav Location"then cL=af;break end end;if cL~=-1 then cR=SavedLocations[cL]cL=-1;for af,ag in pairs(b[0])do if ag.name and ag.name=="SatNav Location"then cL=af;break end end;if cL>-1 then b[0][cL]=cR end;ATLAS.UpdateAtlasLocationsList()msgText=cR.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==G then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif dk=="msgTick"then local dG={}HUD.DisplayMessage(dG,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif dk=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif dk=="hudTick"then HUD.hudtick()elseif dk=="apTick"then AP.APTick()elseif dk=="radarTick"then RADAR.UpdateRadar()elseif dk=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function dX(dY,dZ)local d_=vec3()local e0=vec3()if dY==axisCommandId.longitudinal then d_=vec3(core.getConstructOrientationForward())e0=constructForward elseif dY==axisCommandId.vertical then d_=vec3(core.getConstructOrientationUp())e0=constructUp elseif dY==axisCommandId.lateral then d_=vec3(core.getConstructOrientationRight())e0=constructRight else return vec3()end;local e1=vec3(core.getWorldGravity())local e2=e1:dot(e0)local e3=vec3(core.getWorldAirFrictionAcceleration())local e4=e3:dot(e0)local e5=coreVelocity:dot(d_)local e6=dZ*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(e6-e5)local e7=targetSpeedPID2:get()local e8=(e7-e4-e2)*e0;return e8 end;local function e9(dY,dZ)local d_=vec3()local e0=vec3()if dY==axisCommandId.longitudinal then d_=vec3(core.getConstructOrientationForward())e0=constructForward elseif dY==axisCommandId.vertical then d_=vec3(core.getConstructOrientationUp())e0=constructUp elseif dY==axisCommandId.lateral then d_=vec3(core.getConstructOrientationRight())e0=constructRight else return vec3()end;local e1=vec3(core.getWorldGravity())local e2=e1:dot(e0)local e3=vec3(core.getWorldAirFrictionAcceleration())local e4=e3:dot(e0)local e5=coreVelocity:dot(d_)local e6=dZ*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(e6-e5)local e7=targetSpeedPID:get()local e8=(e7-e4-e2)*e0;return e8 end;local function ea(eb,ec,cC)local ed=eb:cross(cC):normalize_inplace()local ee=math.acos(q(ed:dot(-ec),-1,1))*constants.rad2deg;if ed:cross(-ec):dot(cC)<0 then ee=-ee end;return ee end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=r:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local ef=q(pitchInput+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local eg=q(rollInput+rollInput2+system.getControlDeviceYawInput(),-1,1)local eh=q(yawInput+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local ei=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local ej=adjustedRoll/180*math.pi;local ek=math.cos(ej)local el=math.sin(ej)adjustedPitch=ea(worldVertical,constructForward,constructRight*ek+constructUp*el)local em=constructVelocity:normalize()local en=c(adjustedRoll)local eo=utils.sign(adjustedRoll)local ep=vec3(core.getWorldAngularVelocity())local eq=ef*pitchSpeedFactor*constructRight+eg*rollSpeedFactor*constructForward+eh*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local er=c(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and er>0 or atmosDensity>0.0 and er<autoRollRollThreshold and autoRollPreference)and eg==0 and c(adjustedPitch)<85 then local es=targetRoll;local et=autoRollFactor;if atmosDensity==0 then et=et/4;targetRoll=0;es=0 end;if rollPID==nil then rollPID=pid.new(et*0.01,0,et*0.1)end;rollPID:inject(es-adjustedRoll)local eu=rollPID:get()eq=eq+eu*constructForward end end;local ev=1;local ew=0;local ex=1;local ey=system.getMouseWheel()if ey>0 then P()elseif ey<0 then P(true)else I=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local ez=throttlePID:get()calculatedThrottle=q(ez,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;r:setThrottleCommand(axisCommandId.longitudinal,q(calculatedThrottle,0.01,1))else ThrottleLimited=false;r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local eA=q(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=eA end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=q(calculatedThrottle,0.01,1)end;local eB=''local eC=vec3()local eD=dX(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",eD,ew)local eE='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eE=eE..ExtraLongitudeTags end;local eF=r:getAxisCommandType(axisCommandId.longitudinal)local eG=r:composeAxisAccelerationFromThrottle(eE,axisCommandId.longitudinal)local eH=e9(axisCommandId.lateral,LeftAmount*1000)eB=eB..' , '.."lateral airfoil , lateral ground "eC=eC+eH;if eC:len()>constants.epsilon then a:setEngineForceCommand(eB,eC,ew,'','','',ex)end;a:setEngineForceCommand(eE,eG,ev)local eI='thrust analog vertical fueled 'local eJ='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then eJ=eJ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then eI=eI..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(eI,eD,ev)else a:setEngineForceCommand(eI,vec3(),ev)end;if LeftAmount~=0 then a:setEngineForceCommand(eJ,eH,ev)else a:setEngineForceCommand(eJ,vec3(),ev)end;if ei==0 then ei=brakeInput2 end;local eK=-ei*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*em)a:setEngineForceCommand('brake',eK)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local dZ=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-dZ/3.6)local eA=q(brakePID:get(),0,1)ei=q(ei+eA,0,1)end;local eK=-ei*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*em)a:setEngineForceCommand('brake',eK)local eB=''local eC=vec3()local eL=false;local eE='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eE=eE..ExtraLongitudeTags end;local eF=r:getAxisCommandType(axisCommandId.longitudinal)if eF==axisCommandType.byThrottle then local eG=r:composeAxisAccelerationFromThrottle(eE,axisCommandId.longitudinal)a:setEngineForceCommand(eE,eG,ev)elseif eF==axisCommandType.byTargetSpeed then local eG=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)eB=eB..' , '..eE;eC=eC+eG;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then eL=true end end;local eJ='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then eJ=eJ..ExtraLateralTags end;local eM=r:getAxisCommandType(axisCommandId.lateral)if eM==axisCommandType.byThrottle then local eN=r:composeAxisAccelerationFromThrottle(eJ,axisCommandId.lateral)a:setEngineForceCommand(eJ,eN,ev)elseif eM==axisCommandType.byTargetSpeed then local eH=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)eB=eB..' , '..eJ;eC=eC+eH end;local eI='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then eI=eI..ExtraVerticalTags end;local eO=r:getAxisCommandType(axisCommandId.vertical)if eO==axisCommandType.byThrottle then local eD=r:composeAxisAccelerationFromThrottle(eI,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(eI,eD,ev,'airfoil','ground','',ex)else a:setEngineForceCommand(eI,vec3(),ev)a:setEngineForceCommand('airfoil vertical',eD,ev,'airfoil','','',ex)a:setEngineForceCommand('ground vertical',eD,ev,'ground','','',ex)end elseif eO==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),ev)end;local eP=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)eB=eB..' , '..eI;eC=eC+eP end;if eC:len()>constants.epsilon then if brakeInput~=0 or eL or c(em:dot(constructForward))<0.5 then eB=eB..', brake'end;a:setEngineForceCommand(eB,eC,ew,'','','',ex)end end;local eQ=torqueFactor*(eq-ep)local eR=vec3(core.getWorldAirFrictionAngularAcceleration())eQ=eQ-eR;a:setEngineTorqueCommand('torque',eQ,ev,'airfoil','','',ex)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local c6=coreVelocity:len()local eS=0.15;if not throttleMode then local eT=r:getTargetSpeed(axisCommandId.longitudinal)if c6*3.6>eT*(1-eS)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c6*3.6<eT*(1-eS)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local ds=unit.getThrottle()if AtmoSpeedAssist then ds=PlayerThrottle*100 end;local dZ=ds/100;if j==0 then dZ=dZ*MaxGameVelocity;if c6>=dZ*(1-eS)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c6<dZ*(1-eS)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local eU=d(adjustedAtmoSpeedLimit)dZ=dZ*eU/3.6;if c6>=dZ*(1-eS)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c6<dZ*(1-eS)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local eV=coroutine.status(beginSetup)if eV=="suspended"then local aB,eW=coroutine.resume(beginSetup)if eW then system.print("ERROR STARTUP: "..eW)end elseif eV=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(eX)CONTROL.startControl(eX)end;function script.onActionStop(eX)CONTROL.stopControl(eX)end;function script.onActionLoop(eX)CONTROL.loopControl(eX)end;function script.onInputText(a1)CONTROL.inputTextControl(a1)end;function script.onEnter(aJ)if radar_1 and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aJ)if radar_1 and CollisionSystem then if#contacts>650 then aJ=tostring(aJ)contacts[aJ]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
