name: ArchHud - Archaegeo v1.606 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")script={}VERSION_NUMBER=1.606;local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;time=o()local D=o()local E=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;local F=0;pitchInput2=0;yawInput2=0;local G=0;local H=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"local I=5;local J=5;local K=I;local L=J;isBoosting=false;brakeDistance=0;brakeTime=0;local M=0;local N=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;local O=""inAtmo=j()>0;atmosDensity=j()coreAltitude=core.getAltitude()local P=core.getElementIdList()lastTravelTime=o()coreMass=core.getConstructMass()local Q=false;gyroIsOn=nil;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local R={}damageMessage=""local S=true;resolutionWidth=1920;resolutionHeight=resolutionWidth*ResolutionY/ResolutionX;atmoTanks={}spaceTanks={}rocketTanks={}local T=0;repairArrows=false;local U=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;local V=LandingGearGroundHeight;stalling=false;targetRoll=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitalParams={VectorToTarget=false}OrbitTargetOrbit=0;OrbitAchieved=false;local W=false;SpaceEngineVertDn=false;SpaceEngines=false;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;AtlasOrdered={}notPvPZone=false;pvpDist=50000;ReversalIsOn=nil;local X={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;radars={}rType="Atmo"apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;function p(Y)system.print(time..": "..Y)end;local function Z(a0)local C=1;if a0 then C=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn and Q then local a1=PlayerThrottle;PlayerThrottle=z(q(PlayerThrottle+C*speedChangeLarge/100,-1,1),2)if PlayerThrottle>=0 and a1<0 then PlayerThrottle=0;Q=false end elseif AltIsOn then if atmosDensity>0 or Reentry then adjustedAtmoSpeedLimit=q(adjustedAtmoSpeedLimit+C*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+C*speedChangeLarge/3.6*100,0,8333.00)end else r:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if Autopilot or VectorToTarget or spaceLaunch or IntoOrbit then apScrollIndex=apScrollIndex+1*C*-1;if apScrollIndex>#AtlasOrdered then apScrollIndex=1 end;if apScrollIndex<1 then apScrollIndex=#AtlasOrdered end else if not a0 then C=1 else C=nil end;ATLAS.adjustAutopilotTargetIndex(C)end end end;function play(a2,a3,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)end end;function addTable(a4,a5)for i=1,#a5 do a4[#a4+1]=a5[i]end;return a4 end;function saveableVariables(a6)local a7={}if not a6 then addTable(a7,saveableVariablesBoolean)addTable(a7,savableVariablesHandling)addTable(a7,savableVariablesHud)addTable(a7,savableVariablesPhysics)return a7 elseif a6=="boolean"then return saveableVariablesBoolean elseif a6=="handling"then return savableVariablesHandling elseif a6=="hud"then return savableVariablesHud elseif a6=="physics"then return savableVariablesPhysics end end;local function a8(a9,aa,ab,ac,ad)if ac==nil then ac=""end;if ad==nil then ad=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],ac,a9,aa,ad,ab)end;function float_eq(ae,af)if ae==0 then return c(af)<1e-09 end;if af==0 then return c(ae)<1e-09 end;return c(ae-af)<math.max(c(ae),c(af))*epsilon end;function getDistanceDisplayString(distance,ag)local ah=distance>100000;if ag==nil then ag=1 end;if ah then return z(distance/1000/200,ag).."SU"elseif distance<1000 then return z(distance,ag).."M"else return z(distance/1000,ag).."KM"end end;function FormatTimeString(ai)local aj=0;local ak=0;local al=0;if ai<60 then ai=d(ai)elseif ai<3600 then aj=d(ai/60)ai=d(ai%60)elseif ai<86400 then ak=d(ai/3600)aj=d(ai%3600/60)else al=d(ai/86400)ak=d(ai%86400/3600)end;if al>0 then return al.."d "..ak.."h "elseif ak>0 then return ak.."h "..aj.."m "elseif aj>0 then return aj.."m "..ai.."s"elseif ai>0 then return ai.."s"else return"0s"end end;local function am(an)local function ao(ap)for aq,ar in pairs(ap)do dbHud_1.setStringValue(ar,g(_G[ar]))if an and dbHud_2 then dbHud_2.setStringValue(ar,g(_G[ar]))end end end;if dbHud_1 then ao(autoVariables)ao(saveableVariables())system.print("Saved Variables to Datacore")if an and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function as()local function at(au)return type(au)=='number'end;local function av(au)return type(y(au))=='number'end;local function aw(ax)return type(ax)=='table'end;local function ay(az)return type(az)=='string'end;local function aA(ar)return aw(ar)and at(ar.x and ar.y and ar.z)end;local function aB(aC)return aw(aC)and at(aC.latitude and aC.longitude and aC.altitude and aC.id and aC.systemId)end;local aD=math.pi/180;local aE=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function aG(au)local aH=string.gsub(string.reverse(e('%.4f',au)),'^0*%.?','')return aH==''and'0'or string.reverse(aH)end;local function aI(aJ)if aA(aJ)then return e('{x=%.3f,y=%.3f,z=%.3f}',aJ.x,aJ.y,aJ.z)end;if aw(aJ)and not getmetatable(aJ)then local aK={}local aL=next(aJ)if type(aL)=='nil'or aL==1 then aK=aJ else for aq,ar in pairs(aJ)do local aM=aI(ar)if type(aq)=='number'then table.insert(aK,e('[%s]=%s',aq,aM))else table.insert(aK,e('%s=%s',aq,aM))end end end;return e('{%s}',table.concat(aK,','))end;if ay(aJ)then return e("'%s'",aJ:gsub("'",[[\']]))end;return tostring(aJ)end;local aN={}aN.__index=aN;aN.__tostring=function(aJ,aO)local aP={}for aq in pairs(aJ)do table.insert(aP,aq)end;table.sort(aP)local aK={}for _,aq in ipairs(aP)do local aM=aI(aJ[aq])if type(aq)=='number'then table.insert(aK,e('[%s]=%s',aq,aM))else table.insert(aK,e('%s=%s',aq,aM))end end;if aO then return e('%s%s',aO,table.concat(aK,',\n'..aO))end;return e('{%s}',table.concat(aK,','))end;aN.__eq=function(aQ,aR)return aQ.systemId==aR.systemId and aQ.id==aR.id and float_eq(aQ.radius,aR.radius)and float_eq(aQ.center.x,aR.center.x)and float_eq(aQ.center.y,aR.center.y)and float_eq(aQ.center.z,aR.center.z)and float_eq(aQ.GM,aR.GM)end;local function aS(aT,aU,aV,aW,aX)assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(aV),'Argument 3 (radius) must be a number:'..type(aV))assert(aw(aW),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(aW))assert(av(aX),'Argument 5 (GM) must be a number:'..type(aX))return setmetatable({systemId=y(aT),id=y(aU),radius=y(aV),center=vec3(aW),GM=y(aX)},aN)end;local aY={}aY.__index=aY;aY.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,aG(p.latitude*aE),aG(p.longitude*aE),aG(p.altitude))end;aY.__eq=function(aQ,aR)return aQ.id==aR.id and aQ.systemId==aR.systemId and float_eq(aQ.latitude,aR.latitude)and float_eq(aQ.altitude,aR.altitude)and(float_eq(aQ.longitude,aR.longitude)or float_eq(aQ.latitude,math.pi/2)or float_eq(aQ.latitude,-math.pi/2))end;local function aZ(a_,aU,b0,b1,b2)local aT=a_;if ay(a_)and not b1 and not b2 and not aU and not b0 then aT,aU,b0,b1,b2=n(a_,aF)assert(aT,'Argument 1 (position string) is malformed.')else assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(b0),'Argument 3 (latitude) must be in degrees:'..type(b0))assert(av(b1),'Argument 4 (longitude) must be in degrees:'..type(b1))assert(av(b2),'Argument 5 (altitude) must be in meters:'..type(b2))end;aT=y(aT)aU=y(aU)b0=y(b0)b1=y(b1)b2=y(b2)if aU==0 then return setmetatable({latitude=b0,longitude=b1,altitude=b2,id=aU,systemId=aT},aY)end;return setmetatable({latitude=aD*q(b0,-90,90),longitude=aD*(b1%360),altitude=b2,id=aU,systemId=aT},aY)end;local b3={}b3.__index=b3;b3.__tostring=function(aJ,aO)local b4=aO and aO..'  'local b5={}local aP={}for aq in pairs(aJ)do table.insert(aP,aq)end;table.sort(aP)for _,b6 in ipairs(aP)do bdy=aJ[b6]local b7=aN.__tostring(bdy,b4)if aO then table.insert(b5,e('[%s]={\n%s\n%s}',b6,b7,aO))else table.insert(b5,e('  [%s]=%s',b6,b7))end end;if aO then return e('\n%s%s%s',aO,table.concat(b5,',\n'..aO),aO)end;return e('{\n%s\n}',table.concat(b5,',\n'))end;local function b8(b9)local b={}local pid;for _,ar in pairs(b9)do local aU=ar.planetarySystemId;if type(aU)~='number'then error('Invalid planetary system ID: '..tostring(aU))elseif pid and aU~=pid then error('Mistringmatch planetary system IDs: '..aU..' and '..pid)end;local ba=ar.bodyId;if type(ba)~='number'then error('Invalid body ID: '..tostring(ba))elseif b[ba]then error('Duplicate body ID: '..tostring(ba))end;setmetatable(ar.center,getmetatable(vec3.unit_x))b[ba]=setmetatable(ar,aN)pid=aU end;return setmetatable(b,b3)end;U={}local function bb(b9)return setmetatable({galaxyAtlas=b9 or{}},U)end;U.__index=function(ax,i)if type(i)=='number'then local system=ax.galaxyAtlas[i]return b8(system)end;return rawget(U,i)end;U.__pairs=function(aJ)return function(ax,aq)local bc,nv=next(ax,aq)return bc,nv and b8(nv)end,aJ.galaxyAtlas,nil end;U.__tostring=function(aJ)local bd={}for _,be in pairs(aJ or{})do local bf=be:getPlanetarySystemId()local bg=b3.__tostring(be,'    ')table.insert(bd,e('  [%s]={%s\n  }',bf,bg))end;return e('{\n%s\n}\n',table.concat(bd,',\n'))end;U.BodyParameters=aS;U.MapPosition=aZ;U.PlanetarySystem=b8;function U.createBodyParameters(aT,aU,bh,bi,bj,bk,bl)assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(bh),'Argument 3 (surfaceArea) must be a number:'..type(bh))assert(aw(bi),'Argument 4 (aPosition) must be an array or vec3:'..type(bi))assert(aw(bj),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(bj))assert(av(bk),'Argument 6 (altitude) must be in meters:'..type(bk))assert(av(bl),'Argument 7 (gravityAtPosition) must be number:'..type(bl))local aV=x(bh/4/math.pi)local distance=aV+bk;local bm=vec3(bi)+distance*vec3(bj)local aX=bl*distance*distance;return aS(aT,aU,aV,bm,aX)end;U.isMapPosition=aB;function U:getPlanetarySystem(a_)if i==nil then i=0 end;if nv==nil then nv=0 end;local aT=a_;if aB(a_)then aT=a_.systemId end;if type(aT)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=b3 then system=b8(system)end;return system end end end;function b3:sizeCalculator(bn)return 1.05*bn.radius end;function b3:castIntersections(bo,bp,bq,br,bs,bt)local bu={}local bv=bs or self;for _,bn in pairs(bv)do table.insert(bu,bn)end;if not bt then table.sort(bu,function(bw,bx)return(bw.center-bo):len()<(bx.center-bo):len()end)end;local by=bp:normalize()for _,bn in ipairs(bu)do local bz=bn.center-bo;local aV=self:sizeCalculator(bn)local bA=bz:dot(by)local bB=bA^2-(bz:len2()-aV^2)if bB>=0 then local bC=x(bB)local bD=bA+bC;local bE=bA-bC;if bE>0 then return bn,bD,bE elseif bD>0 then return bn,bD,nil end end end;return nil,nil,nil end;function b3:closestBody(bF)assert(type(bF)=='table','Invalid coordinates.')local bG,bn;local bH=vec3(bF)for _,bI in pairs(self)do local bJ=(bI.center-bH):len2()if(not bn or bJ<bG)and bI.name~="Space"then bn=bI;bG=bJ end end;return bn end;function b3:convertToBodyIdAndWorldCoordinates(a_)local bK=a_;if ay(a_)then bK=aZ(a_)end;if bK.id==0 then return 0,vec3(bK.latitude,bK.longitude,bK.altitude)end;local bI=self:getBodyParameters(bK)if bI then return bK.id,bI:convertToWorldCoordinates(bK)end end;function b3:getBodyParameters(a_)local aU=a_;if aB(a_)then aU=a_.id end;assert(av(aU),'Argument 1 (id) must be a number:'..type(aU))return self[aU]end;function b3:getPlanetarySystemId()local _,ar=next(self)return ar and ar.systemId end;function aN:convertToMapPosition(aW)assert(aw(aW),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(aW))local bL=vec3(aW)if self.id==0 then return setmetatable({latitude=bL.x,longitude=bL.y,altitude=bL.z,id=0,systemId=self.systemId},aY)end;local bM=bL-self.center;local distance=bM:len()local b2=distance-self.radius;local b0=0;local b1=0;if not float_eq(distance,0)then local bN=m(bM.y,bM.x)b1=bN>=0 and bN or 2*math.pi+bN;b0=math.pi/2-math.acos(bM.z/distance)end;return setmetatable({latitude=b0,longitude=b1,altitude=b2,id=self.id,systemId=self.systemId},aY)end;function aN:convertToWorldCoordinates(a_)local bK=ay(a_)and aZ(a_)or a_;if bK.id==0 then return vec3(bK.latitude,bK.longitude,bK.altitude)end;assert(aB(bK),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(bK.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(bK.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local bO=math.cos(bK.latitude)return self.center+(self.radius+bK.altitude)*vec3(bO*math.cos(bK.longitude),bO*math.sin(bK.longitude),math.sin(bK.latitude))end;function aN:getAltitude(aW)return(vec3(aW)-self.center):len()-self.radius end;function aN:getDistance(aW)return(vec3(aW)-self.center):len()end;function aN:getGravity(aW)local bP=self.center-vec3(aW)local bQ=bP:len2()return self.GM/bQ*bP/x(bQ)end;return setmetatable(U,{__call=function(_,...)return bb(...)end})end;local function bR()local Kinematic={}local bS=30000000/3600;local bT=bS*bS;local bU=100;function Kinematic.computeAccelerationTime(bV,bW,bX)local bY=bS*math.asin(bV/bS)return(bS*math.asin(bX/bS)-bY)/bW end;function Kinematic.computeDistanceAndTime(bV,bX,bZ,b_,c0,c1)c0=c0 or 0;c1=c1 or 0;local c2=bV<=bX;local c3=b_*(c2 and 1 or-1)/bZ;local c4=-c1/bZ;local c5=c3+c4;if c2 and c5<=0 or not c2 and c5>=0 then return-1,-1 end;local c6,c7=0,0;if c3~=0 and c0>0 then local bY=math.asin(bV/bS)local c8=math.pi*(c3/2+c4)local c9=c3*c0;local ca=bS*math.pi;local ar=function(ax)local cb=(c8*ax-c9*math.sin(math.pi*ax/2/c0)+ca*bY)/ca;local cc=math.tan(cb)return bS*cc/x(cc*cc+1)end;local cd=c2 and function(az)return az>=bX end or function(az)return az<=bX end;c7=2*c0;if cd(ar(c7))then local ce=0;while c(c7-ce)>0.5 do local ax=(c7+ce)/2;if cd(ar(ax))then c7=ax else ce=ax end end end;local cf=bV;local cg=c7/bU;for ch=1,bU do local ci=ar(ch*cg)c6=c6+(ci+cf)*cg/2;cf=ci end;if c7<2*c0 then return c6,c7 end;bV=cf end;local bY=bS*math.asin(bV/bS)local time=(bS*math.asin(bX/bS)-bY)/c5;local cj=bT*math.cos(bY/bS)/c5;local distance=cj-bT*math.cos((c5*time+bY)/bS)/c5;return distance+c6,time+c7 end;function Kinematic.computeTravelTime(bV,bW,distance)if distance==0 then return 0 end;if bW>0 then local bY=bS*math.asin(bV/bS)local cj=bT*math.cos(bY/bS)/bW;return(bS*math.acos(bW*(cj-distance)/bT)-bY)/bW end;if bV==0 then return-1 end;assert(bV>0,'Acceleration and initial speed are both zero.')return distance/bV end;return Kinematic end;local function ck()local vec3=require('cpml.vec3')local as=as()local function ay(az)return type(az)=='string'end;local function aw(ax)return type(ax)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(b2)assert(self.body)local distance=b2+self.body.radius;if not float_eq(distance,0)then local cl=x(self.body.GM/distance)return x(2)*cl,cl end;return nil,nil end;function Kepler:orbitalParameters(a_,cm)assert(self.body)assert(aw(a_)or ay(a_))assert(aw(cm))local cn=(ay(a_)or as.isMapPosition(a_))and self.body:convertToWorldCoordinates(a_)or vec3(a_)local ar=vec3(cm)local co=cn-self.body.center;local cp=ar:len2()local cq=co:len()local cr=self.body.GM;local cs=((cp-cr/cq)*co-co:dot(ar)*ar)/cr;local ae=cr/(2*cr/cq-cp)local ct=cs:len()local by=cs:normalize()local cu=ae*(1-ct)local cv=ae*(1+ct)local cw=cu*by+self.body.center;local cx=ct<=1 and-cv*by+self.body.center or nil;local cy=x(ae*cr*(1-ct*ct))local cz=cx and 2*math.pi*x(ae^3/cr)local cA=math.acos(cs:dot(co)/(ct*cq))if co:dot(ar)<0 then cA=-(cA-2*math.pi)end;local cB=math.acos((math.cos(cA)+ct)/(1+ct*math.cos(cA)))local cC=cB;if cC<0 then cC=cC+2*math.pi end;local cD=cC-ct*math.sin(cC)local cE=0;local cF=0;local cG=0;if cz~=nil then cE=cD/(2*math.pi/cz)cF=cz-cE;cG=cF+cz/2;if cA-math.pi>0 then cF=cE;cG=cF+cz/2 end;if cG>cz then cG=cG-cz end end;return{periapsis={position=cw,speed=cy/cu,circularOrbitSpeed=x(cr/cu),altitude=cu-self.body.radius},apoapsis=cx and{position=cx,speed=cy/cv,circularOrbitSpeed=x(cr/cv),altitude=cv-self.body.radius},currentVelocity=ar,currentPosition=cn,eccentricity=ct,period=cz,eccentricAnomaly=cB,meanAnomaly=cD,timeToPeriapsis=cF,timeToApoapsis=cG,trueAnomaly=cA}end;local function cH(cI)local bI=as.BodyParameters(cI.systemId,cI.id,cI.radius,cI.center,cI.GM)return setmetatable({body=bI},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return cH(...)end})end;local function cJ()local cK={}local cL={}local cM={XS=13,S=27,M=55,L=110,XL=221}local cN={}local cO;local cP;local cQ;local cR;local cS;local function cT()local function cU(cV,cW,cX,cY,cZ,c_,d0,d1)cW,cY,c_,d1=vec3(cW),vec3(cY),vec3(c_),vec3(d1)local d2,d3,d4=cV*cV,cX*cX,cZ*cZ;local cp=cY-cW;local d5=cp:normalize()local d6=cp:len()local d7=c_-cW;local d8=(d7-d7:project_on(d5)):normalize()local d9,da=d7:dot(d5),d7:dot(d8)local db=d9*d9+da*da;local dc=d5:cross(d8)local a9=(d2-d3+d6*d6)/(2*d6)local aa=(d2-d4+db-2*d9*a9)/(2*da)local aC=d2-a9^2-aa^2;local dd=x(aC)local de=cW+d5*a9+d8*aa+dc*dd;local df=cW+d5*a9+d8*aa-dc*dd;if c((d1-de):len()-d0)<c((d1-df):len()-d0)then return de else return df end end;local function dg()local function dh()local di=core.getConstructWorldOrientationRight()local cp=core.getConstructWorldOrientationForward()local d7=core.getConstructWorldOrientationUp()local dj=library.systemResolution3(di,cp,d7,{1,0,0})local dk=library.systemResolution3(di,cp,d7,{0,1,0})local dl=library.systemResolution3(di,cp,d7,{0,0,1})return function(dm)return library.systemResolution3(dj,dk,dl,dm)end end;local dn=dh()local dp=core.getConstructWorldPos()local cn=core.getElementPositionById(1)local dq={cn[1],cn[2],cn[3]}local dr=dn(dq)local ds={dp[1]-dr[1],dp[2]-dr[2],dp[3]-dr[3]}return ds end;local function dt(du,cq,dv)local dw=du.pts;local dx=#dw;local dy=du.ref;if dx>3 then local dz,dA,dB,dC=dw[dx],dw[dx-1],dw[dx-2],dw[dx-3]du.ref=dv;local cn=cU(dz[1],dz[2],dA[1],dA[2],dB[1],dB[2],dC[1],dC[2])local a9,aa,dd=cn.x,cn.y,cn.z;if a9==a9 and aa==aa and dd==dd then a9=a9+dy[1]aa=aa+dy[2]dd=dd+dy[3]local dD=vec3(a9,aa,dd)if not du.lastPos then du.center=dD elseif(du.lastPos-dD):len()<2 then du.center=dD;du.skipCalc=true end;du.lastPos=dD end;du.pts={}else local dE={dv[1]-dy[1],dv[2]-dy[2],dv[3]-dy[3]}dw[dx+1]={cq,dE}end end;if radars[1]then cO=#radars[1].getConstructIds()local dF=radars[1].getData()local dG=dF:gmatch('{"constructId[^}]*}[^}]*}')if cO>0 then local dv=dg()local dH,dI=0,0;cS,cR=0,0;for ar in dG do local aU,distance,dJ=ar:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local dK=cM[dJ]distance=y(distance)if radars[1].hasMatchingTransponder(aU)==1 then table.insert(cL,aU)end;local dL=radars[1].getConstructType(aU)if CollisionSystem then if dK>27 or dL=="static"or dL=="space"then cS=cS+1;local dM=radars[1].getConstructName(aU)local du=X[aU]if du==nil then dK=dK+E;X[aU]={pts={},ref=dv,name=dM,i=0,radius=dK,skipCalc=false}du=X[aU]end;if not du.skipCalc then dt(du,distance,dv)dI=dI+1 end;if du.center then table.insert(cN,du)end end;dH=dH+1;if nearPlanet and dH>700 or dI>70 or(not nearPlanet and dH>300 or dI>30)then coroutine.yield()dH,dI=0,0 end end end;cR=#cN;if cR>0 and velMag>20 then local bn,dN,dO,dP;local dQ=0;local dR=galaxyReference:getPlanetarySystem(0)dP=constructVelocity:normalize()while dQ<cR do coroutine.yield()local dS={table.unpack(cN,dQ,math.min(dQ+75,cR))}bn,dN,dO=dR:castIntersections(worldPos,dP,nil,nil,dS,true)if bn and dO then collisionTarget={bn,dN,dO}break end;dQ=dQ+75 end;if not bn then collisionTarget=nil end else collisionTarget=nil end;cN={}cP=dF:find('identifiedConstructs":%[%]')else cQ=dF:find('worksInEnvironment":false')end end end;local function dT()if radars[1]then rType="Atmo"if radars[1].getData():find('worksInAtmosphere":false')then rType="Space"end end end;function cK.pickType()dT()end;function cK.assignRadar()if radar_1 and radars[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then radars[1]=radar_2 end;if radars[1]==radar_2 then dT()end elseif radar_2 and radars[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then radars[1]=radar_1 end;if radars[1]==radar_1 then dT()end end end;function cK.UpdateRadar()local dU=coroutine.status(UpdateRadarCoroutine)if dU=="suspended"then local aM,dV=coroutine.resume(UpdateRadarCoroutine)if dV then system.print("ERROR UPDATE RADAR: "..dV)end elseif dU=="dead"then UpdateRadarCoroutine=coroutine.create(cT)local aM,dV=coroutine.resume(UpdateRadarCoroutine)end end;function cK.GetRadarHud()local dW=cL;cL={}return cP,cQ,cO,cR,cS,dW end;UpdateRadarCoroutine=coroutine.create(cT)return cK end;local function dX()local function dY(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function dZ()local function d_(e0,e1)return e0.name<e1.name end;AtlasOrdered={}for aq,ar in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=ar.name,index=aq}end;table.sort(AtlasOrdered,d_)end;local function e2(e3)for aq,ar in pairs(e3)do if ar.name and ar.name==CustomTarget.name then return aq end end;return-1 end;local function e4()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local e5=AtlasOrdered[AutopilotTargetIndex].index;local e6=b[0][e5]if e6.center then AutopilotTargetName=e6.name;autopilotTargetPlanet=galaxyReference[0][e5]if CustomTarget~=nil then if atmosDensity==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=e6;for _,ar in pairs(galaxyReference[0])do if ar.name==CustomTarget.planetname then autopilotTargetPlanet=ar;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function e7(e8)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit then if e8==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then e4()else local e5=AtlasOrdered[AutopilotTargetIndex].index;local e6=b[0][e5]if e6~=nil and e6.name=="Space"or iphCondition=="Custom Only"and e6.center or iphCondition=="No Moons"and string.find(e6.name,"Moon")~=nil then if e8==nil then e7()else e7(1)end else e4()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function e9()local dx=-1;dx=e2(b[0])if dx>-1 then table.remove(b[0],dx)end;dx=-1;dx=e2(SavedLocations)if dx~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,dx)end;e7()dZ()end;local function ea(dM,position,eb,ec)if dbHud_1 or eb then local p=dY(position)local ed=p.gravity;if ec then ed=unit.getClosestPlanetInfluence()end;local ee={position=position,name=dM,planetname=p.name,gravity=ed,safe=ec}if not eb then SavedLocations[#SavedLocations+1]=ee else for aq,ar in pairs(b[0])do if ar.name and dM==ar.name then table.remove(b[0],aq)end end end;table.insert(b[0],ee)dZ()e4()msgText="Location saved as "..dM.."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local ef={}function ef.UpdateAtlasLocationsList()dZ()end;function ef.UpdateAutopilotTarget()e4()end;function ef.adjustAutopilotTargetIndex(e8)e7(e8)end;function ef.findAtlasIndex(e3)e2(e3)end;function ef.UpdatePosition(eg)local dx=e2(SavedLocations)if dx~=-1 then if eg~=nil then SavedLocations[dx].name=eg;AutopilotTargetIndex=AutopilotTargetIndex-1;e7()else local eh=SavedLocations[dx]eh.gravity=unit.getClosestPlanetInfluence()eh.position=worldPos;eh.safe=true end;msgText=SavedLocations[dx].name.." position updated ("..SavedLocations[dx].planetname..")"else msgText="Name Not Found"end end;function ef.AddNewLocation(dM,position,eb,ec)ea(dM,position,eb,ec)end;function ef.ClearCurrentPosition()e9()end;for aq,ar in pairs(SavedLocations)do table.insert(b[0],ar)end;dZ()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;ef.UpdateAutopilotTarget()return ef end;function script.onStart()local ei=false;local function ej()local function ek(el)local em=dbHud_1.hasKey;for aq,ar in pairs(el)do if em(ar)then local aH=f(dbHud_1.getStringValue(ar))if aH~=nil then _G[ar]=aH;ei=true end end end end;if dbHud_1 then if not useTheseSettings then ek(saveableVariables())coroutine.yield()ek(autoVariables)else ek(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;ei=false end;coroutine.yield()if ei then msgText="Loaded Saved Variables"resolutionHeight=resolutionWidth*ResolutionY/ResolutionX;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function en()local function eo(ep,eq)if ep>eq then eq=ep end;local er,es=0,0;if ContainerOptimization>0 then er=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then es=FuelTankOptimization*0.05 end;eq=eq*(1-(er+es))return eq end;local et=core.getElementNameById;local eu=fuelX~=0 and fuelY~=0;for aq in pairs(P)do local type=core.getElementTypeById(P[aq])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(P[aq])),'^.*vertical.*$')and core.getElementForwardById(P[aq])[3]>0 then UpVertAtmoEngine=true end end;if n(type,'^.*Space Engine$')then SpaceEngines=true;if n(tostring(core.getElementTagsById(P[aq])),'^.*vertical.*$')then local ev=core.getElementForwardById(P[aq])if ev[3]<0 then W=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local ew=h(P[aq])if ew>10000 then E=110 elseif ew>1000 then E=55 elseif ew>150 then E=27 end end;T=T+h(P[aq])if eu and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local ew=h(P[aq])local ex=k(P[aq])local ep=0;local ey=o()if type=="Atmospheric Fuel Tank"then local eq=400;local ez=35.03;if ew>10000 then eq=51200;ez=5480 elseif ew>1300 then eq=6400;ez=988.67 elseif ew>150 then eq=1600;ez=182.67 end;ep=ex-ez;if fuelTankHandlingAtmo>0 then eq=eq+eq*fuelTankHandlingAtmo*0.2 end;eq=eo(ep,eq)atmoTanks[#atmoTanks+1]={P[aq],et(P[aq]),eq,ez,ep,ey}end;if type=="Rocket Fuel Tank"then local eq=320;local ez=173.42;if ew>65000 then eq=40000;ez=25740 elseif ew>6000 then eq=5120;ez=4720 elseif ew>700 then eq=640;ez=886.72 end;ep=ex-ez;if fuelTankHandlingRocket>0 then eq=eq+eq*fuelTankHandlingRocket*0.1 end;eq=eo(ep,eq)rocketTanks[#rocketTanks+1]={P[aq],et(P[aq]),eq,ez,ep,ey}end;if type=="Space Fuel Tank"then local eq=600;local ez=35.03;if ew>10000 then eq=76800;ez=5480 elseif ew>1300 then eq=9600;ez=988.67 elseif ew>150 then eq=2400;ez=182.67 end;ep=ex-ez;if fuelTankHandlingSpace>0 then eq=eq+eq*fuelTankHandlingSpace*0.2 end;eq=eo(ep,eq)spaceTanks[#spaceTanks+1]={P[aq],et(P[aq]),eq,ez,ep,ey}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function eA()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,ar in pairs(door)do ar.toggle()end end;if switch then for _,ar in pairs(switch)do ar.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,ar in pairs(forcefield)do ar.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(V)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function eB()local eC={}local function eD()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local eE={[1]=4480,[6]=4480,[7]=6270}for eF,eG in pairs(b)do b[eF][0]=eD()b[eF][0].systemId=eF;eC[eF]={}for eH,planet in pairs(b[eF])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=eE[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=eF;planet.bodyId=planet.id;eC[eF][eH]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end end end;U=as()galaxyReference=U(eC)Kinematic=bR()Kep=ck()ATLAS=dX()end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})ej()coroutine.yield()en()coroutine.yield()AP=APClass(a,core,unit,system,b,vBooster,hover,telemeter_1,antigrav,c,d,j,l,m,o,q,r,t,w,x,z)eA()coroutine.yield()eB()RADAR=cJ()HUD=HudClass(a,core,unit,system,b,radar_1,radar_2,antigrav,hover,shield_1,c,d,e,f,j,k,l,m,o,q,r,s,w,x,z,a8)HUD.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)radars[1]=nil;if radar_1 then radars[1]=radar_1;RADAR.pickType()end;play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ar in pairs(door)do ar.toggle()end end;if switch then for _,ar in pairs(switch)do ar.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ar in pairs(forcefield)do ar.toggle()end end;am()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(eI)local eJ=nil;if eI=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif eI=="tenthSecond"then local function eK()local eL=system.createData;local eM=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=eM(panelInterplanetary,"value")interplanetaryHeaderText=eL('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=eM(panelInterplanetary,"value")widgetDistanceText=eL('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=eM(panelInterplanetary,"value")widgetTravelTimeText=eL('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=eM(panelInterplanetary,"value")widgetMaxMassText=eL('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=eM(panelInterplanetary,"value")widgetTargetOrbitText=eL('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=eM(panelInterplanetary,"value")widgetCurBrakeDistanceText=eL('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=eM(panelInterplanetary,"value")widgetCurBrakeTimeText=eL('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=eM(panelInterplanetary,"value")widgetMaxBrakeDistanceText=eL('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=eM(panelInterplanetary,"value")widgetMaxBrakeTimeText=eL('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=eM(panelInterplanetary,"value")widgetTrajectoryAltitudeText=eL('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function eN()s(panelInterplanetary)panelInterplanetary=nil end;local function eO()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local ci=velMag;local eP=unit.getThrottle()/100;if AtmoSpeedAssist then eP=PlayerThrottle end;local eQ,eR=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*eP,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eS;if not TurnBurn and ci>0 then _,eS=AP.GetAutopilotBrakeDistanceAndTime(ci)else _,eS=AP.GetAutopilotTBBrakeDistanceAndTime(ci)end;local eT=0;local eU=0;if AutopilotCruising or not Autopilot and ci>5 then eU=Kinematic.computeTravelTime(ci,0,AutopilotDistance)elseif brakeDistance+eQ<AutopilotDistance then eT=AutopilotDistance-(brakeDistance+eQ)eU=Kinematic.computeTravelTime(8333.0556,0,eT)else local eV=(AutopilotDistance-brakeDistance)/eQ;eQ=AutopilotDistance-brakeDistance;eR=eR*eV end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eU elseif AutopilotBraking then return eS elseif AutopilotCruising then return eU+eS else return eR+brakeTime+eU end end;local function eW(ed,eX)if ed==nil then ed=core.g()end;ed=z(ed,5)if eX~=nil and eX or(eJ==nil or eJ~=ed)then local ci=coreVelocity:len()local eY=f(unit.getData()).maxBrake;if eY~=nil and eY>0 and inAtmo then eY=eY/q(ci/100,0.1,1)eY=eY/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+eY)/2 else LastMaxBrakeInAtmo=eY end end end;if eY~=nil and eY>0 then LastMaxBrake=eY end;eJ=ed end end;eW(nil,true)if setCruiseSpeed~=nil then if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or r:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then eK()end;if AutopilotTargetName~=nil then local eZ=CustomTarget~=nil;local e_=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()e_=e_>1000000 and z(e_/1000000,2).." kTons"or z(e_/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=eO()if eZ and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)M,N=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)M,N=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local f0=getDistanceDisplayString(distance)t(widgetDistanceText,'{"label": "distance", "value": "'..f0 ..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')f0=getDistanceDisplayString(brakeDistance)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f0 ..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')f0=getDistanceDisplayString(M)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f0 ..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(N)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",e_)..'", "unit":""}')f0=getDistanceDisplayString(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..f0 ..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else eN()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif eI=="oneSecond"then local function f1(f2)local f3=0;damageMessage=""local f4=T;local f5=0;local f6=0;local f7=0;local f8=0;local f9=""local fa=core.getElementHitPointsById;for aq in pairs(P)do local ew=0;local fb=0;fb=h(P[aq])ew=fa(P[aq])f5=f5+ew;if ew<fb then if ew==0 then f7=f7+1 else f6=f6+1 end;if repairArrows and#R==0 then position=vec3(core.getElementPositionById(P[aq]))local a9=position.x;local aa=position.y;local dd=position.z;table.insert(R,core.spawnArrowSticker(a9,aa,dd+1,"down"))table.insert(R,core.spawnArrowSticker(a9,aa,dd+1,"down"))core.rotateSticker(R[2],0,0,90)table.insert(R,core.spawnArrowSticker(a9+1,aa,dd,"north"))table.insert(R,core.spawnArrowSticker(a9+1,aa,dd,"north"))core.rotateSticker(R[4],90,90,0)table.insert(R,core.spawnArrowSticker(a9-1,aa,dd,"south"))table.insert(R,core.spawnArrowSticker(a9-1,aa,dd,"south"))core.rotateSticker(R[6],90,-90,0)table.insert(R,core.spawnArrowSticker(a9,aa-1,dd,"east"))table.insert(R,core.spawnArrowSticker(a9,aa-1,dd,"east"))core.rotateSticker(R[8],90,0,90)table.insert(R,core.spawnArrowSticker(a9,aa+1,dd,"west"))table.insert(R,core.spawnArrowSticker(a9,aa+1,dd,"west"))core.rotateSticker(R[10],-90,0,90)table.insert(R,P[aq])end elseif repairArrows and#R>0 and R[11]==P[aq]then for fc in pairs(R)do core.deleteSticker(R[fc])end;R={}end end;f3=d(f5/f4*100)if f3<100 then f2[#f2+1]=a8(0,0,"","pbright txt")f8=d(f3*2.55)f9=e("rgb(%d,%d,%d)",255-f8,f8,0)if f3<100 then f2[#f2+1]=a8("50%",1035,"Elemental Integrity: "..f3 .."%","txtbig txtmid","fill:"..f9)if f7>0 then f2[#f2+1]=a8("50%",1055,"Disabled Modules: "..f7 .." Damaged Modules: "..f6,"txtbig txtmid","fill:"..f9)elseif f6>0 then f2[#f2+1]=a8("50%",1055,"Damaged Modules: "..f6,"txtbig txtmid","fill:"..f9)end end end end;local function fd()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function fe()local ey=o()local ff=velMag;local fg=ey-lastTravelTime;if ff>1.38889 then ff=ff/1000;local fh=ff*(ey-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+fh;totalDistanceTrip=totalDistanceTrip+fh end;flightTime=flightTime+fg;TotalFlightTime=TotalFlightTime+fg;lastTravelTime=ey end;fe()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()fd()local f2={}HUD.OneSecond(f2)if ShouldCheckDamage then f1(f2)end;lastOdometerOutput=table.concat(f2,"")collectgarbage("collect")elseif eI=="fiveSecond"then if not UseSatNav then return end;O=dbHud_1.getStringValue("SPBAutopilotTargetName")if O~=nil and O~=""and O~="SatNavNotChanged"then local aH=f(dbHud_1.getStringValue("SavedLocations"))if aH~=nil then _G["SavedLocations"]=aH;local dx=-1;local ee;for aq,ar in pairs(SavedLocations)do if ar.name and ar.name=="SatNav Location"then dx=aq;break end end;if dx~=-1 then ee=SavedLocations[dx]dx=-1;for aq,ar in pairs(b[0])do if ar.name and ar.name=="SatNav Location"then dx=aq;break end end;if dx>-1 then b[0][dx]=ee end;ATLAS.UpdateAtlasLocationsList()msgText=ee.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==O then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif eI=="msgTick"then local f2={}HUD.DisplayMessage(f2,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif eI=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif eI=="hudTick"then HUD.hudtick()elseif eI=="apTick"then AP.APTick()elseif eI=="radarTick"then RADAR.UpdateRadar()elseif eI=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function fi(fj,fk)local fl=vec3()local fm=vec3()if fj==axisCommandId.longitudinal then fl=vec3(core.getConstructOrientationForward())fm=constructForward elseif fj==axisCommandId.vertical then fl=vec3(core.getConstructOrientationUp())fm=constructUp elseif fj==axisCommandId.lateral then fl=vec3(core.getConstructOrientationRight())fm=constructRight else return vec3()end;local fn=vec3(core.getWorldGravity())local fo=fn:dot(fm)local fp=vec3(core.getWorldAirFrictionAcceleration())local fq=fp:dot(fm)local fr=coreVelocity:dot(fl)local fs=fk*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(fs-fr)local ft=targetSpeedPID2:get()local fu=(ft-fq-fo)*fm;return fu end;local function fv(fj,fk)local fl=vec3()local fm=vec3()if fj==axisCommandId.longitudinal then fl=vec3(core.getConstructOrientationForward())fm=constructForward elseif fj==axisCommandId.vertical then fl=vec3(core.getConstructOrientationUp())fm=constructUp elseif fj==axisCommandId.lateral then fl=vec3(core.getConstructOrientationRight())fm=constructRight else return vec3()end;local fn=vec3(core.getWorldGravity())local fo=fn:dot(fm)local fp=vec3(core.getWorldAirFrictionAcceleration())local fq=fp:dot(fm)local fr=coreVelocity:dot(fl)local fs=fk*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(fs-fr)local ft=targetSpeedPID:get()local fu=(ft-fq-fo)*fm;return fu end;local function fw(fx,fy,e1)local fz=fx:cross(e1):normalize_inplace()local fA=math.acos(q(fz:dot(-fy),-1,1))*constants.rad2deg;if fz:cross(-fy):dot(e1)<0 then fA=-fA end;return fA end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=r:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local fB=q(F+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local fC=q(G+rollInput2+system.getControlDeviceYawInput(),-1,1)local fD=q(H+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local fE=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local fF=adjustedRoll/180*math.pi;local fG=math.cos(fF)local fH=math.sin(fF)adjustedPitch=fw(worldVertical,constructForward,constructRight*fG+constructUp*fH)local fI=constructVelocity:normalize()local fJ=c(adjustedRoll)local fK=utils.sign(adjustedRoll)local fL=vec3(core.getWorldAngularVelocity())local fM=fB*pitchSpeedFactor*constructRight+fC*rollSpeedFactor*constructForward+fD*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local fN=c(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and fN>0 or atmosDensity>0.0 and fN<autoRollRollThreshold and autoRollPreference)and fC==0 and c(adjustedPitch)<85 then local fO=targetRoll;local fP=autoRollFactor;if atmosDensity==0 then fP=fP/4;targetRoll=0;fO=0 end;if rollPID==nil then rollPID=pid.new(fP*0.01,0,fP*0.1)end;rollPID:inject(fO-adjustedRoll)local fQ=rollPID:get()fM=fM+fQ*constructForward end end;local fR=1;local fS=0;local fT=1;local fU=system.getMouseWheel()if fU>0 then Z()elseif fU<0 then Z(true)else Q=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local fV=throttlePID:get()calculatedThrottle=q(fV,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;r:setThrottleCommand(axisCommandId.longitudinal,q(calculatedThrottle,0.01,1))else ThrottleLimited=false;r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local fW=q(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=fW end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=q(calculatedThrottle,0.01,1)end;local fX=''local fY=vec3()local fZ=fi(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",fZ,fS)local f_='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then f_=f_..ExtraLongitudeTags end;local g0=r:getAxisCommandType(axisCommandId.longitudinal)local g1=r:composeAxisAccelerationFromThrottle(f_,axisCommandId.longitudinal)local g2=fv(axisCommandId.lateral,LeftAmount*1000)fX=fX..' , '.."lateral airfoil , lateral ground "fY=fY+g2;if fY:len()>constants.epsilon then a:setEngineForceCommand(fX,fY,fS,'','','',fT)end;a:setEngineForceCommand(f_,g1,fR)local g3='thrust analog vertical fueled 'local g4='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then g4=g4 ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then g3=g3 ..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(g3,fZ,fR)else a:setEngineForceCommand(g3,vec3(),fR)end;if LeftAmount~=0 then a:setEngineForceCommand(g4,g2,fR)else a:setEngineForceCommand(g4,vec3(),fR)end;if fE==0 then fE=brakeInput2 end;local g5=-fE*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*fI)a:setEngineForceCommand('brake',g5)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local fk=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-fk/3.6)local fW=q(brakePID:get(),0,1)fE=q(fE+fW,0,1)end;local g5=-fE*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*fI)a:setEngineForceCommand('brake',g5)local fX=''local fY=vec3()local g6=false;local f_='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then f_=f_..ExtraLongitudeTags end;local g0=r:getAxisCommandType(axisCommandId.longitudinal)if g0==axisCommandType.byThrottle then local g1=r:composeAxisAccelerationFromThrottle(f_,axisCommandId.longitudinal)a:setEngineForceCommand(f_,g1,fR)elseif g0==axisCommandType.byTargetSpeed then local g1=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)fX=fX..' , '..f_;fY=fY+g1;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then g6=true end end;local g4='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then g4=g4 ..ExtraLateralTags end;local g7=r:getAxisCommandType(axisCommandId.lateral)if g7==axisCommandType.byThrottle then local g8=r:composeAxisAccelerationFromThrottle(g4,axisCommandId.lateral)a:setEngineForceCommand(g4,g8,fR)elseif g7==axisCommandType.byTargetSpeed then local g2=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)fX=fX..' , '..g4;fY=fY+g2 end;local g3='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then g3=g3 ..ExtraVerticalTags end;local g9=r:getAxisCommandType(axisCommandId.vertical)if g9==axisCommandType.byThrottle then local fZ=r:composeAxisAccelerationFromThrottle(g3,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(g3,fZ,fR,'airfoil','ground','',fT)else a:setEngineForceCommand(g3,vec3(),fR)a:setEngineForceCommand('airfoil vertical',fZ,fR,'airfoil','','',fT)a:setEngineForceCommand('ground vertical',fZ,fR,'ground','','',fT)end elseif g9==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),fR)end;local ga=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)fX=fX..' , '..g3;fY=fY+ga end;if fY:len()>constants.epsilon then if brakeInput~=0 or g6 or c(fI:dot(constructForward))<0.5 then fX=fX..', brake'end;a:setEngineForceCommand(fX,fY,fS,'','','',fT)end end;local gb=torqueFactor*(fM-fL)local gc=vec3(core.getWorldAirFrictionAngularAcceleration())gb=gb-gc;a:setEngineTorqueCommand('torque',gb,fR,'airfoil','','',fT)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local ci=coreVelocity:len()local gd=0.15;if not throttleMode then local ge=r:getTargetSpeed(axisCommandId.longitudinal)if ci*3.6>ge*(1-gd)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ci*3.6<ge*(1-gd)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local eP=unit.getThrottle()if AtmoSpeedAssist then eP=PlayerThrottle*100 end;local fk=eP/100;if j==0 then fk=fk*MaxGameVelocity;if ci>=fk*(1-gd)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ci<fk*(1-gd)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local gf=d(adjustedAtmoSpeedLimit)fk=fk*gf/3.6;if ci>=fk*(1-gd)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ci<fk*(1-gd)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local dU=coroutine.status(beginSetup)if dU=="suspended"then local aM,dV=coroutine.resume(beginSetup)if dV then system.print("ERROR STARTUP: "..dV)end elseif dU=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gg)local function gh(a0)local C=1;local function gi(gj,a0)local gk={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local gl=gj;for _,ar in ipairs(gk)do if a0 and gl>ar then gj=ar elseif gj<ar and not a0 then gj=ar;break end end;return gj end;if a0 then C=-1 end;if not ExternalAGG and antigravOn then if holdingShift and a0 then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*J;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if holdingShift then OrbitTargetOrbit=gi(OrbitTargetOrbit,a0)else OrbitTargetOrbit=OrbitTargetOrbit+C*I end;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else if holdingShift and inAtmo then HoldAltitude=gi(HoldAltitude,a0)else HoldAltitude=HoldAltitude+C*I end end else r:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function gm(gn)if not inAtmo then msgText="Flight Assist in Atmo only"return end;local ax=type(gn)if ReversalIsOn==nil then if ax=="table"then if Autopilot or VectorToTarget then AP.ToggleAutopilot()end;play("180On","BR")elseif gn==1 then play("bnkLft","BR")else play("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then AP.ToggleAltitudeHold()if ax~="table"then gn=gn+1 end end;ReversalIsOn=gn else play("180Off","BR")ReversalIsOn=nil end end;if gg=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;AP.cmdThrottle(0)if vBooster or hover then if inAtmo and abvGndDet==-1 then play("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else if hasGear then play("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if inAtmo then BrakeIsOn=true end end end;if hasGear and not BrakeLanding and not(vBooster or hover)then play("grOut","LG",1)a.control.extendLandingGears()end else if hasGear then play("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif gg=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif gg=="forward"then F=F-1 elseif gg=="backward"then if AltIsOn then gm(-constructVelocity*5000)else F=F+1 end elseif gg=="left"then if AltIsOn then gm(1)else G=G-1 end elseif gg=="right"then if AltIsOn then gm(3)else G=G+1 end elseif gg=="yawright"then H=H-1 elseif gg=="yawleft"then H=H+1 elseif gg=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif gg=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif gg=="up"then upAmount=upAmount+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gg=="down"then upAmount=upAmount-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gg=="groundaltitudeup"then gh()elseif gg=="groundaltitudedown"then gh(true)elseif gg=="option1"then toggleView=false;if AltIsOn and holdingShift then local go=""for i=1,#passengers do go=go.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..z(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..go)return end;ATLAS.adjustAutopilotTargetIndex()elseif gg=="option2"then toggleView=false;if AltIsOn and holdingShift then for i=1,#passengers do core.forceDeboard(passengers[i])end;msgText="Deboarded All Passengers"return end;ATLAS.adjustAutopilotTargetIndex(1)elseif gg=="option3"then local function gp()S=not S;if not S then play("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else play("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then s(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then s(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and holdingShift then local go=""for i=1,#ships do go=go.."| ID: "..ships[i].." Mass: "..z(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..go)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;gp()toggleView=false elseif gg=="option4"then toggleView=false;if AltIsOn and holdingShift then for i=1,#ships do core.forceUndock(ships[i])end;msgText="Undocked all ships"return end;ReversalIsOn=nil;AP.ToggleAutopilot()elseif gg=="option5"then toggleView=false;AP.ToggleLockPitch()elseif gg=="option6"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then local gq=shield_1.getVentingCooldown()if gq>0 then msgText="Cannot vent again for "..gq.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()msgText="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else msgText="Shields already at max hitpoints"end;return else msgText="No shield found"return end end;AP.ToggleAltitudeHold()elseif gg=="option7"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then shield_1.toggle()return else msgText="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then msgText="Collision System Enabled"else msgText="Collision System Secured"end elseif gg=="option8"then stablized=not stablized;if not stablized then msgText="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()play("gsOff","GS")else msgText="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)play("gsOn","GS")end;toggleView=false elseif gg=="option9"then if AltIsOn and holdingShift then r:resetCommand(axisCommandId.longitudinal)r:resetCommand(axisCommandId.lateral)r:resetCommand(axisCommandId.vertical)AP.cmdThrottle(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()gyroIsOn=gyro.getState()==1;if gyroIsOn then play("gyOn","GA")else play("gyOff","GA")end end;toggleView=false elseif gg=="lshift"then apButtonsHovered=false;if AltIsOn then holdingShift=true end;if w()==1 then holdingShift=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then holdingShift=true;Animated=false;Animating=false end elseif gg=="brake"then if BrakeToggleStatus or AltIsOn then AP.BrakeToggle()elseif not BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=true end elseif gg=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif gg=="booster"then if VanillaRockets then a:toggleBoosters()elseif not isBoosting then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;isBoosting=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;isBoosting=false end elseif gg=="stopengines"then local function gr()if time-D<1.5 then play("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;ReversalIsOn=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;followMode=false;apThrottleSet=false;spaceLand=false;spaceLaunch=false;reentryMode=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;gyroIsOn=false;LockPitch=nil;IntoOrbit=false end end;gr()D=time;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if PlayerThrottle~=0 then r:resetCommand(axisCommandId.longitudinal)AP.cmdThrottle(0)else AP.cmdThrottle(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if inAtmo then AP.cmdCruise(AtmoSpeedLimit)else AP.cmdCruise(MaxGameVelocity*3.6)end end end elseif gg=="speedup"then Z()elseif gg=="speeddown"then Z(true)elseif gg=="antigravity"and not ExternalAGG then if antigrav~=nil then AP.ToggleAntigrav()end end end;function script.onActionStop(gg)local function gs()if not ExternalAGG and antigravOn then L=J end;if AltitudeHold or VertTakeOff or IntoOrbit then K=I end end;if gg=="forward"then F=0 elseif gg=="backward"then F=0 elseif gg=="left"then if ReversalIsOn then if ReversalIsOn==2 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;G=0 elseif gg=="right"then if ReversalIsOn then if ReversalIsOn==4 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;G=0 elseif gg=="yawright"then H=0 elseif gg=="yawleft"then H=0 elseif gg=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif gg=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif gg=="up"then upAmount=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif gg=="down"then upAmount=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif gg=="groundaltitudeup"then gs()toggleView=false elseif gg=="groundaltitudedown"then gs()toggleView=false elseif gg=="lshift"then if w()==1 then simulatedX=0;simulatedY=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then Animated=false;Animating=false end;holdingShift=false elseif gg=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=false end end elseif gg=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(gg)local function gt(a0)local C=1;if a0 then C=-1 end;if not ExternalAGG and antigravOn then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*L;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;L=q(L*1.05,J,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then OrbitTargetOrbit=OrbitTargetOrbit+C*K;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*K end;K=q(K*1.05,I,50)else r:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function gu(a0)local C=1;if a0 then C=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn then PlayerThrottle=q(PlayerThrottle+C*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if gg=="groundaltitudeup"then if not holdingShift then gt()end elseif gg=="groundaltitudedown"then if not holdingShift then gt(true)end elseif gg=="speedup"then gu()elseif gg=="speeddown"then gu(true)end end;function script.onInputText(ab)local function gv(gw,cn,eb)local function gx(cn)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF='::pos{'..A..','..A..','..A..','..A..','..A..'}'local aT,aU,b0,b1,b2=n(cn,aF)if aT=="0"and aU=="0"then return vec3(y(b0),y(b1),y(b2))end;b1=math.rad(b1)b0=math.rad(b0)local planet=b[y(aT)][y(aU)]local bO=math.cos(b0)local gy=vec3(bO*math.cos(b1),bO*math.sin(b1),math.sin(b0))return planet.center+(planet.radius+b2)*gy end;local position=gx(cn)return ATLAS.AddNewLocation(gw,position,eb)end;local i;local gz,gA=nil,nil;local gB="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(ab," ")gz=ab;if i~=nil then gz=string.sub(ab,0,i-1)gA=string.sub(ab,i+1)end;if gz=="/help"or gz=="/commands"then for gC in string.gmatch(gB,"([^\n]+)")do system.print(gC)end;return elseif gz=="/setname"then if gA==nil or gA==""then msgText="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.UpdatePosition(gA)else msgText="Select a saved target to rename first"end elseif shield_1 and gz=="/resist"then if gA==nil or shield_1.getResistancesCooldown()>0 then msgText="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF=A..', '..A..', '..A..', '..A;local gD,gE,gF,gG=n(gA,aF)if gG==nil or gD+gE+gF+gG>0.6 then msgText="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(gD,gE,gF,gG)==1 then msgText="Shield Resistances set"else msgText="Resistance setting failed."end elseif gz=="/addlocation"or string.find(ab,"::pos")~=nil then local eb=false;local gw="0-Temp"if gA==nil or gA==""then gA=gz;eb=true end;i=string.find(gA,"::")if not eb then gw=string.sub(gA,1,i-2)end;local cn=string.sub(gA,i)gv(gw,cn,eb)elseif gz=="/agg"then if gA==nil or gA==""then msgText="Usage: /agg targetheight"return end;gA=y(gA)if gA<1000 then gA=1000 end;AntigravTargetAltitude=gA;msgText="AGG Target Height set to "..gA elseif gz=="/G"then if gA==nil or gA==""then msgText="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if gA=="dump"then for aq,ar in pairs(saveableVariables())do if type(_G[ar])=="boolean"then if _G[ar]==true then system.print(ar.." true")else system.print(ar.." false")end elseif _G[ar]==nil then system.print(ar.." nil")else system.print(ar.." ".._G[ar])end end;return end;i=string.find(gA," ")local gH=string.sub(gA,0,i-1)local gI=string.sub(gA,i+1)for aq,ar in pairs(saveableVariables())do if ar==gH then msgText="Variable "..gH.." changed to "..gI;local gJ=type(_G[ar])if gJ=="number"then gI=y(gI)if ar=="AtmoSpeedLimit"then adjustedAtmoSpeedLimit=gI end elseif gJ=="boolean"then if string.lower(gI)=="true"then gI=true else gI=false end end;_G[ar]=gI;return end end;msgText="No such global variable: "..gH elseif gz=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.ClearCurrentPosition()else msgText="Select a custom wp to delete first in IPH"end elseif gz=="/copydatabank"then if dbHud_2 then am(true)else msgText="Spare Databank required to copy databank"end elseif gz=="/iphWP"then if AutopilotTargetIndex>0 then system.print(AP.showWayPoint(autopilotTargetPlanet,AutopilotTargetCoords,true))msgText="::pos waypoint shown in lua chat"else msgText="No target selected in IPH"end end end;function script.onEnter(aU)if radars[1]and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aU)if radars[1]and CollisionSystem then if#X>650 then aU=tostring(aU)X[aU]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
