name: ArchHud - Archaegeo v1.400 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        turnAssist = true --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        IntruderAlertSystem = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        showHelp = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        LockPitchTarget = 0 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 5000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        turnAssistFactor = 2 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.400;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;safeMass=0;iphCondition="All"stablized=true;local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass","iphCondition","stablized"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local vec3=vec3;local p=utils.clamp;local q=a.axisCommandManager;local r=system.destroyWidgetPanel;local s=system.updateData;local t=system.addDataToWidget;local u=system.lockView;local v=system.isViewLocked;local w=math.sqrt;local x=tonumber;local core=core;local function y(z,A)local mult=10^(A or 0)return d(z*mult+0.5)/mult end;local B=o()local C=o()local D=16;local E=13;local F=SafeR;local G=SafeB;local H=SafeG;local I=0;local J=0;local K=false;local L=0;local M=false;local N=false;local O=55;local P=false;local Q=false;local R=0;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=false;local Z=false;local a0="empty"local a1=5;local a2=5;local a3=a1;local a4=a2;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=0;local ae=0;local af=0;local ag=3;local ah=0;local ai=""local aj=false;local ak=false;local al=false;local am=-1;local an=""local ao=j()>0;local ap=j()local aq=core.getAltitude()local ar=core.getElementIdList()local as=o()local at=core.getConstructMass()local au=false;local av=nil;local aw=[[rgb(]]..d(F+0.5)..","..d(H+0.5)..","..d(G+0.5)..[[)]]local ax=[[rgb(]]..d(F*0.9+0.5)..","..d(H*0.9+0.5)..","..d(G*0.9+0.5)..[[)]]local ay={}local az=0;local aA=0;local aB=""local aC=true;local aD={}local aE=ResolutionX;local aF=ResolutionY;local aG={}local aH={}local aI={}local aJ=0;local aK=false;local aL=nil;local aM=nil;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=false;local aZ=false;local a_=autoRollPreference;local b0=LandingGearGroundHeight;local b1=false;local b2=o()local b3=0;local b4=0;local b5=0;local b6=AtmoSpeedLimit;local b7=0;local b8=nil;local b9=0;local ba=0;local bb=false;local bc=false;local bd={VectorToTarget=false}local be=false;local bf=0;local bg=nil;local bh=false;local bi=false;local bj=false;local bk=false;local bl=0;local bm=vec3(core.getConstructWorldOrientationUp())local bn=vec3(core.getConstructWorldOrientationForward())local bo=vec3(core.getConstructWorldOrientationRight())local bp=vec3(core.getWorldVelocity())local bq=vec3(bp):len()local br=vec3(core.getWorldVertical())local bs=-br:dot(bp)local bt=vec3(core.getConstructWorldPos())local bu=0;local bv=false;local bw=false;local bx=nil;local by=true;local bz=0;local bA=0;local bB=false;local bC={}local bD=showHud;local bE={}local bF=false;local bG=""local bH=nil;local bI={}local bJ=unit.getClosestPlanetInfluence()>0;local bK=false;local bL=nil;function Log(bM,bN)local self={}self.Name=bM or'Log'self.Value=bN=='number'and 0 or{}self.Type=bN or'mean'function self.Update(bO)if self.Type=='number'then self.Value=bO else self.Value[#self.Value]=bO end end;function self.getString()if self.Type=='number'then return tostring(self.Value)elseif self.Type=='time'then return utils.round(self.getMean()*1000,0.0001)..'ms ('..#self.Value..")"elseif self.Type=='mean'then return tostring(utils.round(self.getMean(),0.01))end end;function self.getValue()if self.Type=='number'then return self.value else return self.getMean()end end;function self.addValue(bO)if self.Type=='number'then return end;table.insert(self.Value,1,bO)if#self.Value>1000 then self.Value[1001]=nil end end;function self.getMean()local bP=0;for i=1,#self.Value do bP=bP+self.Value[i]end;return bP/#self.Value end;return self end;function Logger()local self={}self.Logs={}function self.CreateLog(bM,type)local bQ=Log(bM,type)Register(bQ)return bQ end;function self.getLogs()local bR={}for _,bS in pairs(self.Logs)do bR[#bR+1]=bS.Name..': '..bS.getString()end;return bR end;function Register(bQ)self.Logs[#self.Logs+1]=bQ end;return self end;local function bT(bU)local bV,bW,bX=aQ:getPlanetarySystem(0):castIntersections(bt,bU,function(bY)if bY.noAtmosphericDensityAltitude>0 then return bY.radius+bY.noAtmosphericDensityAltitude else return bY.radius+bY.surfaceMaxAltitude*1.5 end end)local bZ=bW;if bX~=nil and bW~=nil then bZ=math.min(bX,bW)end;if bZ~=nil then return bV,bZ else return nil,nil end end;local function b_(c0,c1,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)end end;local function c2(c3,c4)for i=1,#c4 do c3[#c3+1]=c4[i]end;return c3 end;local function c5(c6)local c7={}local c8={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd","BarFuelDisplay","showHelp","Cockpit","voices","alerts","CollisionSystem"}local c9={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","LockPitchTarget","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local ca={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local cb={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c6 then c2(c7,c8)c2(c7,c9)c2(c7,ca)c2(c7,cb)return c7 elseif c6=="boolean"then return c8 elseif c6=="handling"then return c9 elseif c6=="hud"then return ca elseif c6=="physics"then return cb end end;local function cc(cd,ce,cf,cg,ch)if cg==nil then cg=""end;if ch==nil then ch=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cg,cd,ce,ch,cf)end;local function ci(cj,ck)if q:getAxisCommandType(0)~=axisCommandType.byThrottle and not ck then a.control.cancelCurrentControlMasterMode()end;q:setThrottleCommand(axisCommandId.longitudinal,cj)I=p(y(cj*100,0)/100,-1,1)end;local function cl(cj,ck)if q:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not ck then a.control.cancelCurrentControlMasterMode()end;q:setTargetSpeedCommand(axisCommandId.longitudinal,cj)bx=cj end;local function cm(cn,co)if cn==0 then return c(co)<1e-09 end;if co==0 then return c(cn)<1e-09 end;return c(cn-co)<math.max(c(cn),c(co))*epsilon end;local function cp(ah,cq)local cr=ah>100000;if cq==nil then cq=1 end;if cr then return y(ah/1000/200,cq).."SU"elseif ah<1000 then return y(ah,cq).."M"else return y(ah/1000,cq).."KM"end end;local function cs()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;a_=true;ad=0;if ao and am==-1 then BrakeLanding=false;AltitudeHold=true;ad=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cl(d(b6))end else bh=false;GearExtended=false;a.control.retractLandingGears()q:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function ct()bh=false;b9=nil;ba=nil;bl=0;if ap==0 then if IntoOrbit then b_("orOff","AP")IntoOrbit=false;bb=false;bg=nil;a_=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bd.VectorToTarget=false;bd.AutopilotAlign=false;be=false elseif bJ then b_("orOn","AP")IntoOrbit=true;a_=true;if bg==nil then bg=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a0="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bb=false;bg=nil;a_=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bd.VectorToTarget=false;bd.AutopilotAlign=false;be=false end end;local function cu()if B-b4<1.5 then if planet.hasAtmosphere then if ap>0 then HoldAltitude=planet.spaceEngineMinAltitude-50;b_("11","EP")else if bJ then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=HoldAltitude;be=true;if not IntoOrbit then ct()end;bb=true end end;b4=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b4=B end;if bJ and ap==0 then bf=aq;be=true;bb=true;ct()if IntoOrbit then b4=B else b4=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Y=false;a_=true;LockPitch=nil;bh=false;if am==-1 then b_("altOn","AH")AutoTakeoff=false;if b4>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=aq end end;if VertTakeOff then cs()end else b_("lfs","LS")AutoTakeoff=true;if b4>-1 then HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;q:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bv then cs()end end;if ak then HoldAltitude=100000 end else b_("altOff","AH")if IntoOrbit then ct()end;if VertTakeOff then cs()end;a_=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b4=0 end end;local function cv()local function cw(SpaceTarget)bK=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cu()end end;VectorStatus="Proceeding to Waypoint"end;if B-b5<1.5 and ap>0 then if not bk then a0="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ap>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;b_("orH","OH")end;b5=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b5=B end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ak and not IntoOrbit then aV.UpdateAutopilotTarget()aW.showWayPoint(aa,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then b_("apSpc","AP")if ap~=0 then ak=true;cu()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ap>0 then if not VectorToTarget then b_("vtt","AP")cw(SpaceTarget)end else b_("apOn","AP")if not(aa.name==planet.name and bJ)then bh=false;Autopilot=true elseif not ao then if IntoOrbit then ct()end;bf=planet.noAtmosphericDensityAltitude+LowOrbitHeight;be=true;bd.AutopilotAlign=true;bd.VectorToTarget=true;bb=false;if not IntoOrbit then ct()end end end else b_("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ap~=0 then ak=true;cu()else Autopilot=true end end elseif ap==0 then if CustomTarget==nil and(aa.name==planet.name and bJ)and not IntoOrbit then WaypointSet=false;bh=false;bb=false;ct()else b_("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Y=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;N=false;LockPitch=nil;WaypointSet=false end else b_("apP","AP")ak=true;cu()end else b_("apOff","AP")ak=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;N=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aq;TargetSet=false;Reentry=false;if IntoOrbit then ct()end end end;local function cx()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;a_=autoRollPreference end;if BrakeIsOn then b_("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bH=nil;if not bw then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cs()end;if IntoOrbit then ct()end;a_=autoRollPreference;aj=false;al=false;ad=0 else b_("bkOff","B",1)end end;local function cy()if Reentry then a0="Re-Entry cancelled"b_("reOff","RE")Reentry=false;a_=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a0="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ag=5 elseif not P then Reentry=true;if q:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;a_=true;BrakeIsOn=false;a0="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b6;b_("par","RE")else Reentry=true;AltitudeHold=true;a_=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-planet.spaceEngineMinAltitude/10 end;local cf=cp(HoldAltitude)a0="Beginning Re-entry.  Target speed: "..b6 .." Target Altitude: "..cf;b_("glide","RE")cl(d(b6))end;AutoTakeoff=false end;local function cz()if antigrav and not ExternalAGG then if bw then b_("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;b_("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cA(cB)local cC=0;local cD=0;local cE=0;if cB<60 then cB=d(cB)elseif cB<3600 then cC=d(cB/60)cB=d(cB%60)elseif cB<86400 then cD=d(cB/3600)cC=d(cB%3600/60)else cE=d(cB/86400)cD=d(cB%86400/3600)end;if cE>0 then return cE.."d "..cD.."h "elseif cD>0 then return cD.."h "..cC.."m "elseif cC>0 then return cC.."m "..cB.."s"elseif cB>0 then return cB.."s"else return"0s"end end;local function cF(cG)local function cH(cI)for cJ,bO in pairs(cI)do dbHud_1.setStringValue(bO,g(_G[bO]))if cG and dbHud_2 then dbHud_2.setStringValue(bO,g(_G[bO]))end end end;if dbHud_1 then cH(b)cH(c5())system.print("Saved Variables to Datacore")if cG and dbHud_2 then a0="Databank copied.  Remove copy when ready."end end end;local function cK()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function cL()local function cM(cN)return type(cN)=='number'end;local function cO(cN)return type(x(cN))=='number'end;local function cP(cQ)return type(cQ)=='table'end;local function cR(cS)return type(cS)=='string'end;local function cT(bO)return cP(bO)and cM(bO.x and bO.y and bO.z)end;local function cU(bP)return cP(bP)and cM(bP.latitude and bP.longitude and bP.altitude and bP.bodyId and bP.systemId)end;local cV=math.pi/180;local cW=180/math.pi;local epsilon=1e-10;local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cX='::pos{'..z..','..z..','..z..','..z..','..z..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function cY(cN)local cZ=string.gsub(string.reverse(e('%.4f',cN)),'^0*%.?','')return cZ==''and'0'or string.reverse(cZ)end;local function c_(d0)if cT(d0)then return e('{x=%.3f,y=%.3f,z=%.3f}',d0.x,d0.y,d0.z)end;if cP(d0)and not getmetatable(d0)then local d1={}local d2=next(d0)if type(d2)=='nil'or d2==1 then d1=d0 else for cJ,bO in pairs(d0)do local cj=c_(bO)if type(cJ)=='number'then table.insert(d1,e('[%s]=%s',cJ,cj))else table.insert(d1,e('%s=%s',cJ,cj))end end end;return e('{%s}',table.concat(d1,','))end;if cR(d0)then return e("'%s'",d0:gsub("'",[[\']]))end;return tostring(d0)end;local d3={}d3.__index=d3;d3.__tostring=function(d0,d4)local d5={}for cJ in pairs(d0)do table.insert(d5,cJ)end;table.sort(d5)local d1={}for _,cJ in ipairs(d5)do local cj=c_(d0[cJ])if type(cJ)=='number'then table.insert(d1,e('[%s]=%s',cJ,cj))else table.insert(d1,e('%s=%s',cJ,cj))end end;if d4 then return e('%s%s',d4,table.concat(d1,',\n'..d4))end;return e('{%s}',table.concat(d1,','))end;d3.__eq=function(d6,d7)return d6.planetarySystemId==d7.planetarySystemId and d6.bodyId==d7.bodyId and cm(d6.radius,d7.radius)and cm(d6.center.x,d7.center.x)and cm(d6.center.y,d7.center.y)and cm(d6.center.z,d7.center.z)and cm(d6.GM,d7.GM)end;local function d8(d9,da,db,dc,dd)assert(cO(d9),'Argument 1 (planetarySystemId) must be a number:'..type(d9))assert(cO(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cO(db),'Argument 3 (radius) must be a number:'..type(db))assert(cP(dc),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dc))assert(cO(dd),'Argument 5 (GM) must be a number:'..type(dd))return setmetatable({planetarySystemId=x(d9),bodyId=x(da),radius=x(db),center=vec3(dc),GM=x(dd)},d3)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(de)return e('::pos{%d,%d,%s,%s,%s}',de.systemId,de.bodyId,cY(de.latitude*cW),cY(de.longitude*cW),cY(de.altitude))end;MapPosition.__eq=function(d6,d7)return d6.bodyId==d7.bodyId and d6.systemId==d7.systemId and cm(d6.latitude,d7.latitude)and cm(d6.altitude,d7.altitude)and(cm(d6.longitude,d7.longitude)or cm(d6.latitude,math.pi/2)or cm(d6.latitude,-math.pi/2))end;local function df(dg,da,dh,di,dj)local d9=dg;if cR(dg)and not di and not dj and not da and not dh then d9,da,dh,di,dj=n(dg,cX)assert(d9,'Argument 1 (position string) is malformed.')else assert(cO(d9),'Argument 1 (systemId) must be a number:'..type(d9))assert(cO(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cO(dh),'Argument 3 (latitude) must be in degrees:'..type(dh))assert(cO(di),'Argument 4 (longitude) must be in degrees:'..type(di))assert(cO(dj),'Argument 5 (altitude) must be in meters:'..type(dj))end;d9=x(d9)da=x(da)dh=x(dh)di=x(di)dj=x(dj)if da==0 then return setmetatable({latitude=dh,longitude=di,altitude=dj,bodyId=da,systemId=d9},MapPosition)end;return setmetatable({latitude=cV*p(dh,-90,90),longitude=cV*(di%360),altitude=dj,bodyId=da,systemId=d9},MapPosition)end;local dk={}dk.__index=dk;dk.__tostring=function(d0,d4)local dl=d4 and d4 ..'  'local dm={}local d5={}for cJ in pairs(d0)do table.insert(d5,cJ)end;table.sort(d5)for _,dn in ipairs(d5)do bdy=d0[dn]local dp=d3.__tostring(bdy,dl)if d4 then table.insert(dm,e('[%s]={\n%s\n%s}',dn,dp,d4))else table.insert(dm,e('  [%s]=%s',dn,dp))end end;if d4 then return e('\n%s%s%s',d4,table.concat(dm,',\n'..d4),d4)end;return e('{\n%s\n}',table.concat(dm,',\n'))end;local function dq(dr)local aL={}local pid;for _,bO in pairs(dr)do local ds=bO.planetarySystemId;if type(ds)~='number'then error('Invalid planetary system ID: '..tostring(ds))elseif pid and ds~=pid then error('Mistringmatch planetary system IDs: '..ds..' and '..pid)end;local dt=bO.bodyId;if type(dt)~='number'then error('Invalid body ID: '..tostring(dt))elseif aL[dt]then error('Duplicate body ID: '..tostring(dt))end;setmetatable(bO.center,getmetatable(vec3.unit_x))aL[dt]=setmetatable(bO,d3)pid=ds end;return setmetatable(aL,dk)end;aP={}local function du(dr)return setmetatable({galaxyAtlas=dr or{}},aP)end;aP.__index=function(cQ,i)if type(i)=='number'then local system=cQ.galaxyAtlas[i]return dq(system)end;return rawget(aP,i)end;aP.__pairs=function(d0)return function(cQ,cJ)local dv,nv=next(cQ,cJ)return dv,nv and dq(nv)end,d0.galaxyAtlas,nil end;aP.__tostring=function(d0)local dw={}for _,dx in pairs(d0 or{})do local dy=dx:getPlanetarySystemId()local dz=dk.__tostring(dx,'    ')table.insert(dw,e('  [%s]={%s\n  }',dy,dz))end;return e('{\n%s\n}\n',table.concat(dw,',\n'))end;aP.BodyParameters=d8;aP.MapPosition=df;aP.PlanetarySystem=dq;function aP.createBodyParameters(dA,da,dB,dC,dD,dE,dF)assert(cO(dA),'Argument 1 (planetarySystemId) must be a number:'..type(dA))assert(cO(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cO(dB),'Argument 3 (surfaceArea) must be a number:'..type(dB))assert(cP(dC),'Argument 4 (aPosition) must be an array or vec3:'..type(dC))assert(cP(dD),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dD))assert(cO(dE),'Argument 6 (altitude) must be in meters:'..type(dE))assert(cO(dF),'Argument 7 (gravityAtPosition) must be number:'..type(dF))local db=w(dB/4/math.pi)local ah=db+dE;local dG=vec3(dC)+ah*vec3(dD)local dd=dF*ah*ah;return d8(dA,da,db,dG,dd)end;aP.isMapPosition=cU;function aP:getPlanetarySystem(dg)if i==nil then i=0 end;if nv==nil then nv=0 end;local dA=dg;if cU(dg)then dA=dg.systemId end;if type(dA)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dk then system=dq(system)end;return system end end end;function dk:sizeCalculator(bY)return 1.05*bY.radius end;function dk:castIntersections(dH,dI,dJ,dK,dL,dM)local dN={}local dO=dL or self;for _,bY in pairs(dO)do table.insert(dN,bY)end;if not dM then table.sort(dN,function(dP,dQ)return(dP.center-dH):len()<(dQ.center-dH):len()end)end;local dR=dI:normalize()for _,bY in ipairs(dN)do local dS=bY.center-dH;local db=self:sizeCalculator(bY)local dT=dS:dot(dR)local dU=dT^2-(dS:len2()-db^2)if dU>=0 then local dV=w(dU)local bW=dT+dV;local bX=dT-dV;if bX>0 then return bY,bW,bX elseif bW>0 then return bY,bW,nil end end end;return nil,nil,nil end;function dk:closestBody(dW)assert(type(dW)=='table','Invalid coordinates.')local dX,bY;local dY=vec3(dW)for _,dZ in pairs(self)do local d_=(dZ.center-dY):len2()if(not bY or d_<dX)and dZ.name~="Space"then bY=dZ;dX=d_ end end;return bY end;function dk:convertToBodyIdAndWorldCoordinates(dg)local e0=dg;if cR(dg)then e0=df(dg)end;if e0.bodyId==0 then return 0,vec3(e0.latitude,e0.longitude,e0.altitude)end;local dZ=self:getBodyParameters(e0)if dZ then return e0.bodyId,dZ:convertToWorldCoordinates(e0)end end;function dk:getBodyParameters(dg)local da=dg;if cU(dg)then da=dg.bodyId end;assert(cO(da),'Argument 1 (bodyId) must be a number:'..type(da))return self[da]end;function dk:getPlanetarySystemId()local _,bO=next(self)return bO and bO.planetarySystemId end;function d3:convertToMapPosition(dc)assert(cP(dc),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dc))local e1=vec3(dc)if self.bodyId==0 then return setmetatable({latitude=e1.x,longitude=e1.y,altitude=e1.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local e2=e1-self.center;local ah=e2:len()local dj=ah-self.radius;local dh=0;local di=0;if not cm(ah,0)then local e3=m(e2.y,e2.x)di=e3>=0 and e3 or 2*math.pi+e3;dh=math.pi/2-math.acos(e2.z/ah)end;return setmetatable({latitude=dh,longitude=di,altitude=dj,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function d3:convertToWorldCoordinates(dg)local e0=cR(dg)and df(dg)or dg;if e0.bodyId==0 then return vec3(e0.latitude,e0.longitude,e0.altitude)end;assert(cU(e0),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e0.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e0.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e4=math.cos(e0.latitude)return self.center+(self.radius+e0.altitude)*vec3(e4*math.cos(e0.longitude),e4*math.sin(e0.longitude),math.sin(e0.latitude))end;function d3:getAltitude(dc)return(vec3(dc)-self.center):len()-self.radius end;function d3:getDistance(dc)return(vec3(dc)-self.center):len()end;function d3:getGravity(dc)local e5=self.center-vec3(dc)local e6=e5:len2()return self.GM/e6*e5/w(e6)end;return setmetatable(aP,{__call=function(_,...)return du(...)end})end;local function e7()local aR={}local e8=30000000/3600;local e9=e8*e8;local ea=100;local function eb(bO)return 1/w(1-bO*bO/e9)end;function aR.computeAccelerationTime(ec,ed,ee)local ef=e8*math.asin(ec/e8)return(e8*math.asin(ee/e8)-ef)/ed end;function aR.computeDistanceAndTime(ec,ee,eg,eh,ei,ej)ei=ei or 0;ej=ej or 0;local ek=ec<=ee;local el=eh*(ek and 1 or-1)/eg;local em=-ej/eg;local en=el+em;if ek and en<=0 or not ek and en>=0 then return-1,-1 end;local eo,ep=0,0;if el~=0 and ei>0 then local ef=math.asin(ec/e8)local eq=math.pi*(el/2+em)local er=el*ei;local es=e8*math.pi;local bO=function(cQ)local et=(eq*cQ-er*math.sin(math.pi*cQ/2/ei)+es*ef)/es;local eu=math.tan(et)return e8*eu/w(eu*eu+1)end;local ev=ek and function(cS)return cS>=ee end or function(cS)return cS<=ee end;ep=2*ei;if ev(bO(ep))then local ew=0;while c(ep-ew)>0.5 do local cQ=(ep+ew)/2;if ev(bO(cQ))then ep=cQ else ew=cQ end end end;local ex=ec;local ey=ep/ea;for ez=1,ea do local eA=bO(ez*ey)eo=eo+(eA+ex)*ey/2;ex=eA end;if ep<2*ei then return eo,ep end;ec=ex end;local ef=e8*math.asin(ec/e8)local B=(e8*math.asin(ee/e8)-ef)/en;local eB=e9*math.cos(ef/e8)/en;local ah=eB-e9*math.cos((en*B+ef)/e8)/en;return ah+eo,B+ep end;function aR.computeTravelTime(ec,ed,ah)if ah==0 then return 0 end;if ed>0 then local ef=e8*math.asin(ec/e8)local eB=e9*math.cos(ef/e8)/ed;return(e8*math.acos(ed*(eB-ah)/e9)-ef)/ed end;if ec==0 then return-1 end;assert(ec>0,'Acceleration and initial speed are both zero.')return ah/ec end;function aR.lorentz(bO)return eb(bO)end;return aR end;local function eC()local vec3=require('cpml.vec3')local cL=cL()local function cR(cS)return type(cS)=='string'end;local function cP(cQ)return type(cQ)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dj)assert(self.body)local ah=dj+self.body.radius;if not cm(ah,0)then local orbit=w(self.body.GM/ah)return w(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dg,eD)assert(self.body)assert(cP(dg)or cR(dg))assert(cP(eD))local eE=(cR(dg)or cL.isMapPosition(dg))and self.body:convertToWorldCoordinates(dg)or vec3(dg)local bO=vec3(eD)local eF=eE-self.body.center;local eG=bO:len2()local eH=eF:len()local eI=self.body.GM;local eJ=((eG-eI/eH)*eF-eF:dot(bO)*bO)/eI;local cn=eI/(2*eI/eH-eG)local eK=eJ:len()local dR=eJ:normalize()local eL=cn*(1-eK)local eM=cn*(1+eK)local eN=eL*dR+self.body.center;local eO=eK<=1 and-eM*dR+self.body.center or nil;local eP=w(cn*eI*(1-eK*eK))local eQ=eO and 2*math.pi*w(cn^3/eI)local eR=math.acos(eJ:dot(eF)/(eK*eH))if eF:dot(bO)<0 then eR=-(eR-2*math.pi)end;local eS=math.acos((math.cos(eR)+eK)/(1+eK*math.cos(eR)))local eT=eS;if eT<0 then eT=eT+2*math.pi end;local eU=eT-eK*math.sin(eT)local eV=0;local eW=0;local eX=0;if eQ~=nil then eV=eU/(2*math.pi/eQ)eW=eQ-eV;eX=eW+eQ/2;if eR-math.pi>0 then eW=eV;eX=eW+eQ/2 end;if eX>eQ then eX=eX-eQ end end;return{periapsis={position=eN,speed=eP/eL,circularOrbitSpeed=w(eI/eL),altitude=eL-self.body.radius},apoapsis=eO and{position=eO,speed=eP/eM,circularOrbitSpeed=w(eI/eM),altitude=eM-self.body.radius},currentVelocity=bO,currentPosition=eE,eccentricity=eK,period=eQ,eccentricAnomaly=eS,meanAnomaly=eU,timeToPeriapsis=eW,timeToApoapsis=eX}end;local function eY(eZ)local dZ=cL.BodyParameters(eZ.planetarySystemId,eZ.bodyId,eZ.radius,eZ.center,eZ.GM)return setmetatable({body=dZ},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eY(...)end})end;local function e_()local f0={}local f1={}local f2={XS=13,S=27,M=55,L=110,XL=221}local f3={}local f4;local f5;local f6;local f7;local f8;local function f9()local function fa(fb,fc,fd,fe,ff,fg,fh,fi)fc,fe,fg,fi=vec3(fc),vec3(fe),vec3(fg),vec3(fi)local fj,fk,fl=fb*fb,fd*fd,ff*ff;local eG=fe-fc;local fm=eG:normalize()local fn=eG:len()local fo=fg-fc;local fp=(fo-fo:project_on(fm)):normalize()local fq,fr=fo:dot(fm),fo:dot(fp)local fs=fq*fq+fr*fr;local ft=fm:cross(fp)local cd=(fj-fk+fn*fn)/(2*fn)local ce=(fj-fl+fs-2*fq*cd)/(2*fr)local bP=fj-cd^2-ce^2;local fu=w(bP)local fv=fc+fm*cd+fp*ce+ft*fu;local fw=fc+fm*cd+fp*ce-ft*fu;if c((fi-fv):len()-fh)<c((fi-fw):len()-fh)then return fv else return fw end end;local function fx()local function fy()local fz=core.getConstructWorldOrientationRight()local eG=core.getConstructWorldOrientationForward()local fo=core.getConstructWorldOrientationUp()local fA=library.systemResolution3(fz,eG,fo,{1,0,0})local fB=library.systemResolution3(fz,eG,fo,{0,1,0})local fC=library.systemResolution3(fz,eG,fo,{0,0,1})return function(fD)return library.systemResolution3(fA,fB,fC,fD)end end;local fE=fy()local fF=core.getConstructWorldPos()local eE=core.getElementPositionById(1)local fG={eE[1]-D,eE[2]-D,eE[3]-D}local fH=fE(fG)local fI={fF[1]-fH[1],fF[2]-fH[2],fF[3]-fH[3]}return fI end;local function fJ(fK,eH,fL)local fM=fK.pts;local fN=#fM;local fO=fK.ref;if fN>3 then local fP,fQ,fR,fS=fM[fN],fM[fN-1],fM[fN-2],fM[fN-3]fK.ref=fL;local eE=fa(fP[1],fP[2],fQ[1],fQ[2],fR[1],fR[2],fS[1],fS[2])local cd,ce,fu=eE.x,eE.y,eE.z;if cd==cd and ce==ce and fu==fu then cd=cd+fO[1]ce=ce+fO[2]fu=fu+fO[3]local fT=vec3(cd,ce,fu)if not fK.lastPos then fK.center=fT elseif(fK.lastPos-fT):len()<2 then fK.center=fT;fK.skipCalc=true end;fK.lastPos=fT end;fK.pts={}else local fU={fL[1]-fO[1],fL[2]-fO[2],fL[3]-fO[3]}fM[fN+1]={eH,fU}end end;if radar_1 then f4=#radar_1.getEntries()local fV=radar_1.getData()local fW=fV:gmatch('{"constructId[^}]*}[^}]*}')if f4>0 then local fL=fx()local fX,fY=0,0;f8=0;for bO in fW do local ds,ah,fZ=bO:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local f_=f2[fZ]ah=x(ah)if radar_1.hasMatchingTransponder(ds)==1 then table.insert(f1,ds)end;local g0=radar_1.getConstructType(ds)if CollisionSystem then if f_>27 or g0=="static"or g0=="space"then f8=f8+1;local bM=radar_1.getConstructName(ds)local fK=bI[ds]if fK==nil then f_=f_+E;bI[ds]={pts={},ref=fL,name=bM,i=0,radius=f_,skipCalc=false}fK=bI[ds]end;if not fK.skipCalc then fJ(fK,ah,fL)fY=fY+1 end;if fK.center then table.insert(f3,fK)end end;fX=fX+1;if bJ and fX>700 or fY>70 or(not bJ and fX>300 or fY>30)then coroutine.yield()fX,fY=0,0 end end end;f7=#f3;if f7>0 and bq>20 then local bY,g1,g2,g3;local g4=0;local g5=aQ:getPlanetarySystem(0)g3=bp:normalize()while g4<f7 do coroutine.yield()local g6={table.unpack(f3,g4,math.min(g4+75,f7))}bY,g1,g2=g5:castIntersections(bt,g3,nil,nil,g6,true)if bY and g2 then bL={bY,g1,g2}break end;g4=g4+75 end;if not bY then bL=nil end else bL=nil end;f3={}f5=fV:find('identifiedConstructs":%[%]')else f6=fV:find('worksInEnvironment":false')end end end;function f0.UpdateRadar()local g7=coroutine.status(UpdateRadarCoroutine)if g7=="suspended"then local cj,g8=coroutine.resume(UpdateRadarCoroutine)if g8 then system.print("ERROR UPDATE RADAR: "..g8)end elseif g7=="dead"then UpdateRadarCoroutine=coroutine.create(f9)local cj,g8=coroutine.resume(UpdateRadarCoroutine)end end;function f0.GetRadarHud()return f5,f6,f4,f7,f8,f1 end;UpdateRadarCoroutine=coroutine.create(f9)return f0 end;local function g9()local ga=0;local gb=vec3({13771471,7435803,-128971})local gc=18000000;local gd=500000;local ge,gf=math.huge;local gg;local function gh(gi)ge=vec3(gi):dist(gb)if ge<gc then return true,c(ge-gc)end;gf=vec3(gi):dist(vec3(planet.center))if gf<gd then gg=true else gg=false end;if c(gf-gd)<c(ge-gc)then return gg,c(gf-gd)else return gg,c(ge-gc)end end;local function gj(bO)if aE==1920 then return bO else return y(aE*bO/1920,0)end end;local function gk(bO)if aF==1080 then return bO else return y(aF*bO/1080,0)end end;local function gl()return v()==0 and userControlScheme~="keyboard"and l()==0 end;local function gm()local gn="TRAVEL"if not by then gn="CRUISE"end;if Autopilot then gn="AUTOPILOT"end;return gn end;local go=""local gp=""local gq=1;local gr=2;local gs=3;local gt=4;local gu=5;local gv=6;local gw=""local gx=0;local gy=d(1/apTickRate)*2*hudTickRate;local gz={}local gA={}local gB={}local gC={}local gD={}local gE={}local function gF(cd,gG,gH,gI,gJ,gK)local gL=fuelY;local gM=fuelY+5;if not BarFuelDisplay then gM=gM+5 end;if l()==1 and not RemoteHud then gL=gL-50;gM=gM-50 end;if gH=="ATMO"then gw="atmofueltank"elseif gH=="SPACE"then gw="spacefueltank"else gw="rocketfueltank"end;gx=_G[gw.."_size"]if#gI>0 then for i=1,#gI do local bM=string.sub(gI[i][gr],1,12)local gN=0;for gO=1,gx do if gI[i][gr]==f(unit[gw.."_"..gO].getData()).name then gN=gO;break end end;local gP=o()if gJ[i]==nil or gK[i]==nil or gP-gI[i][gv]>gy then local gQ;local gR=0;if gN~=0 then gK[i]=f(unit[gw.."_"..gN].getData()).percentage;gJ[i]=f(unit[gw.."_"..gN].getData()).timeLeft;if gJ[i]=="n/a"then gJ[i]=0 end else gR=k(gI[i][gq])-gI[i][gt]gK[i]=d(0.5+gR*100/gI[i][gs])gQ=gI[i][gu]if gQ<=gR then gJ[i]=0 else gJ[i]=d(0.5+gR/((gQ-gR)/(gP-gI[i][gv])))end;gI[i][gu]=gR;gI[i][gv]=gP end end;if bM==gG then bM=e("%s %d",gH,i)end;if gN==0 then bM=bM.." *"end;local gS;if gJ[i]==0 then gS=""else gS=cA(gJ[i])end;if gK[i]~=nil then local gT=d(gK[i]*2.55)local gU=e("rgb(%d,%d,%d)",255-gT,gT,0)local cg=""if gS~=""and gJ[i]<120 or gK[i]<5 then cg=[[class="red"]]end;if BarFuelDisplay then gp=gp..e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],cd,gM,gU,gK[i],cd,gM,cd+2,gM+10,gK[i],gS)gp=gp..cc(cd,gL,bM,cg.."txtstart pdim txtfuel")gL=gL-30;gM=gM-30 else gp=gp..cc(cd,gL,bM,cg.." pdim txtfuel")gp=gp..cc(cd,gM,e("%d%% %s",gK[i],gS),"pdim txtfuel","fill:"..gU)gL=gL+30;gM=gM+30 end end end end end;local function gV(gW,dj)if dj<200000 and not ao or dj and ao then local gX=0;if c(bs)>1 then gX=45*math.log(c(bs),10)if bs<0 then gX=-gX end end;gW[#gW+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bs),d(gX))end;return gW end;local function gY(gZ)local g_=-br;gZ=gZ-gZ:project_on(g_)local h0=vec3(0,0,1)h0=h0-h0:project_on(g_)local h1=h0:cross(g_)local gX=h0:angle_between(gZ)*constants.rad2deg;if gZ:dot(h1)<0 then gX=360-gX end;return gX end;local function h2(gW,centerX,centerY,h3,h4,bJ)local h5=circleRad;local h6=20;local h7=d(h3)if bJ then for i=-45,45,5 do local h8=i;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],h8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;gW[#gW+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+h5+h6-len,centerX,centerY+h5+h6)end;gW[#gW+1]=cc(centerX,centerY+h5+h6-35,h4,"pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY+h5+h6-25,h7 .." deg","pdim txt txtmid")gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+h5+h6-20,centerX+5,centerY+h5+h6-20,centerX,centerY+h5+h6-15)gW[#gW+1]="</g>"end;local h9=h7;if bJ then h9=gY(bn)end;local ha=20;local hb=d(h9)local hc=0;local hd=centerY+h5+h6+20;local he=centerX;if h4~="YAW"then hd=gk(130)he=gj(960)end;local hf=[[<path class="txttick line" d="]]local hg=d(hb-(ha+10)-hb%5+0.5)for i=hg+60,hg,-5 do local cd=he-(-i*5+h9*5)if i%10==0 then hc=10;local z=i;if z==360 then z=0 elseif z>360 then z=z-360 elseif z<0 then z=z+360 end;gW[#gW+1]=cc(cd+5,hd-12,z)elseif i%5==0 then hc=5 end;if hc==10 then hf=e([[%s M %f %f v %d]],hf,cd,hd-5,hc)else hf=e([[%s M %f %f v %d]],hf,cd,hd-2.5,hc)end end;gW[#gW+1]=hf..[["/>]]gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],he-5,hd+10,he+5,hd+10,he,hd+5)if bJ then h4="HDG"end;gW[#gW+1]=cc(he,hd+25,hb.."deg","pdim txt txtmid","")gW[#gW+1]=cc(he,hd+35,h4,"pdim txt txtmid","")end;local function hh(gW,hi,h3,centerX,centerY,bJ,hj,eA)local h5=circleRad;local hk=d(h5*3/5)if h5>0 then local hl=d(hi)local len=0;local hf=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*h3,centerX,centerY)if not ao then hf=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;gW[#gW+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],h5-1,centerX,centerY)gW[#gW+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(hl-30-hl%5+0.5),d(hl+30+hl%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ce=centerY+-i*5+hi*5;if len==30 then hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,ce,len)if ao then gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX-hk+10,ce,i)gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX+hk-10,ce,i)if i==0 or i==180 or i==-180 then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+20,ce,hk*2-40)end else gW[#gW+1]=cc(centerX-hk+10,ce,i,"pdim txt txtmid")gW[#gW+1]=cc(centerX+hk-10,ce,i,"pdim txt txtmid")end;hf=e([[%s M %d %f h %d]],hf,centerX+hk,ce,len)else hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,ce,len)hf=e([[%s M %d %f h %d]],hf,centerX+hk,ce,len)end end;gW[#gW+1]=hf..[["/>]]local hm="PITCH"if not bJ then hm="REL PITCH"end;if hi>90 and not ao then hi=90-(hi-90)elseif hi<-90 and not ao then hi=-90-(hi+90)end;if h5>200 then if ao then if eA>O then gW[#gW+1]=cc(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY+20,hj,"pdim txt txtmid")end;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)else gW[#gW+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hk+25,centerY-5,centerX-hk+20,centerY,centerX-hk+25,centerY+5,centerX-hk+50,centerY+4,hl)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hk-25,centerY-5,centerX+hk-20,centerY,centerX+hk-25,centerY+5,centerX+hk-30,centerY+4,hl)gW[#gW+1]="</g>"end;local hn=d(h5/3)gW[#gW+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hn,centerY,h5-hn)if not ao and bJ then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+10,centerY,hk*2-20)end;gW[#gW+1]="</g>"if h5<200 then if ao and eA>O then gW[#gW+1]=cc(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY-h5+10,hl,"pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY+20,hj,"pdim txt txtmid")else gW[#gW+1]=cc(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=cc(centerX,centerY-h5+15,hl,"pdim txt txtmid")end end end end;local function ho(gW,dj,bJ)local hp=altMeterX;local hq=altMeterY;local hr=78;local hs=19;local ht=am;if am~=-1 then gW[#gW+1]=cc(hp+hr,hq+hs+20,e("AGL: %.1fm",am),"pdim altsm txtend")end;if bJ and(dj<200000 and not ao or dj and ao)then table.insert(gW,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hp-1,hq-4,hr+2,hs+6,hp+1,hq-1,hr-4,hs))local fN=0;local hu=1;local hv=0;local hw=dj<0;local hx=dj<planet.surfaceMaxAltitude;local hy=9;if hw then hy=0 end;local dj=c(dj)while fN<6 do local hz=11;local hA=16;local hB=9;local hC=14;local cg="altsm"if fN>2 then hA=hA+3;hz=hz+2;hC=hC+2;hB=hB-6;cg="altbig"end;if hw then cg=cg.." red"elseif hx then cg=cg.." orange"end;local hD=dj/hu%10;local hE=d(hD)local hF=d((hE+1)%10)local hG=hv;if fN==0 then hG=hD-hE;if hw then hG=1-hG end end;if hw and(fN==0 or hv~=0)then local hH=hF;hF=hE;hE=hH end;local hI=hA*(hG-1)local hJ=hI+hA;local cd=hp+hB+(6-fN)*hz;local ce=hq+hC;gW[#gW+1]=cc(cd,ce+hI,hF,cg)gW[#gW+1]=cc(cd,ce+hJ,hE,cg)fN=fN+1;hu=hu*10;if hE==hy then hv=hG else hv=0 end end;table.insert(gW,[[</g></g>]])end end;local function hK(eD)eD=vec3(eD)local hL=-math.deg(m(eD.y,eD.z))+180;hL=hL-90;if hL<0 then hL=360+hL end;if hL>180 then hL=-180+hL-180 end;return-hL end;local function hM(eD)eD=vec3(eD)local h9=math.deg(m(eD.y,eD.x))-90;if h9<-180 then h9=360+h9 end;return h9 end;local function hN(gW,eD,eA,centerX,centerY)if eA>5 and not ao or eA>O then local h5=circleRad;local hO=20;local hP=20;local hQ=hK(eD)local hR=hM(eD)local hS=14;local hT=hS/2;local hU=-hR/hP*h5;local hV=hQ/hO*h5;local cd=centerX+hU;local ce=centerY+hV;local ah=w(hU^2+hV^2)local hW=[[<circle
                            cx="]]..cd..[["
                            cy="]]..ce..[["
                            r="]]..hT/hS..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..cd..[["
                            cy="]]..ce..[["
                            r="]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..cd-hS..[[,]]..ce..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..cd+hT..[[,]]..ce..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..cd..[[,]]..ce-hS..[[ v ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ah<h5 then gW[#gW+1]=hW else local gX=m(hV,hU)local hX=4;local hY=centerX+h5*math.cos(gX)local hZ=centerY+h5*math.sin(gX)gW[#gW+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',gX*180/math.pi,hY,hZ,hY-hX,hZ-hX/2,hX*2,hX,hY+hX,hZ-hX,hX,hX,-hX,hX)end;if not ao then local h_=vec3(eD)hQ=hK(-h_)hR=hM(-h_)hU=-hR/hP*h5;hV=hQ/hO*h5;cd=centerX+hU;ce=centerY+hV;ah=w(hU^2+hV^2)if ah<h5 then local i0=[[<circle
                                    cx="]]..cd..[["
                                    cy="]]..ce..[["
                                    r="]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..cd..[[,]]..ce-hS..[[ v ]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..cd..[[,]]..ce..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..cd..[[,]]..ce..[[)" />
                                <path
                                    d="M ]]..cd-hT..[[,]]..ce..[[ h ]]..hS..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..cd..[[,]]..ce..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..cd..[[,]]..ce..[[)"/>]]gW[#gW+1]=i0 end end end end;local function i1(gW,gn,i2,i3)i2=d(i2+0.5)local gL=throtPosY+10;local gM=throtPosY+20;if l()==1 and not RemoteHud then gL=55;gM=65 end;local i4="CRUISE"local unit="km/h"local cj=i3;if gn=="TRAVEL"or gn=="AUTOPILOT"then i4="THROT"unit="%"cj=i2;local i5="dim"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],i5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;gW[#gW+1]=cc(throtPosX+10,gL,i4,"pbright txtstart")gW[#gW+1]=cc(throtPosX+10,gM,e("%.0f %s",cj,unit),"pbright txtstart")if ao and AtmoSpeedAssist and by and K then i2=d(L*100+0.5)local i5="red"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],i5,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)gW[#gW+1]=cc(throtPosX+10,gL+40,"LIMIT","pbright txtstart")gW[#gW+1]=cc(throtPosX+10,gM+40,i2 .."%","pbright txtstart")end;if ao and AtmoSpeedAssist or Reentry then gW[#gW+1]=cc(throtPosX+10,gL-40,"LIMIT: "..b6 .." km/h","dim txtstart")elseif not ao and Autopilot then gW[#gW+1]=cc(throtPosX+10,gL-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function i6(gW,i7)local i8=throtPosY-10;local i9=throtPosX+10;gW[#gW+1]=cc(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then i8=75 end;gW[#gW+1]=cc(i9,i8,d(i7).." km/h","pbright txtbig txtstart")end;local function ia(gW)gW[#gW+1]=cc(gj(1900),gk(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")gW[#gW+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then gW[#gW+1]=cc(gj(960),gk(550),"Warning: Invalid Control Scheme Detected","warnings")gW[#gW+1]=cc(gj(960),gk(600),"Keyboard Scheme must be selected","warnings")gW[#gW+1]=cc(gj(960),gk(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ib=gj(960)local ic=gk(860)local id=gk(880)local ie=gk(900)local ig=gk(960)local ih=gk(200)local ii=gk(250)local ij=gk(960)if l()==1 and not RemoteHud then ic=gk(135)id=gk(155)ie=gk(175)ih=gk(115)ii=gk(95)end;if BrakeIsOn then gW[#gW+1]=cc(ib,ic,"Brake Engaged","warnings")elseif J>0 then gW[#gW+1]=cc(ib,ic,"Auto-Brake Engaged","warnings","opacity:"..J)end;if ao and b1 and am==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bw and not VertTakeOff and not AutoTakeoff then gW[#gW+1]=cc(ib,ih+50,"** STALL WARNING **","warnings")b_("stall","SW",2)end end;if bH then gW[#gW+1]=cc(ib,ih+90,"Flight Assist in Progress","warnings")end;if av then gW[#gW+1]=cc(ib,ij,"Gyro Enabled","warnings")end;if GearExtended then if Q then gW[#gW+1]=cc(ib,id,"Gear Extended","warn")else gW[#gW+1]=cc(ib,id,"Landed (G: Takeoff)","warnings")end;local ik=cp(a:getTargetGroundAltitude())gW[#gW+1]=cc(ib,ie,"Hover Height: "..ik,"warn")end;if a5 then gW[#gW+1]=cc(ib,ig+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bw and AntigravTargetAltitude~=nil then if c(aq-antigrav.getBaseAltitude())<501 then gW[#gW+1]=cc(ib,ih+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else gW[#gW+1]=cc(ib,ih+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then gW[#gW+1]=cc(ib,ih+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then gW[#gW+1]=cc(ib,ih+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif Y then gW[#gW+1]=cc(ib,ih+20,"Follow Mode Engaged","warn")elseif Reentry then gW[#gW+1]=cc(ib,ih+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local ik=cp(HoldAltitude,2)if VertTakeOff then if bw then ik=cp(antigrav.getBaseAltitude(),2).." AGG singularity height"end;gW[#gW+1]=cc(ib,ih,"VTO to "..ik,"warn")elseif AutoTakeoff and not IntoOrbit then if ak then gW[#gW+1]=cc(ib,ih,"Takeoff to "..AutopilotTargetName,"warn")else gW[#gW+1]=cc(ib,ih,"Takeoff to "..ik,"warn")end;if BrakeIsOn and not VertTakeOff then gW[#gW+1]=cc(ib,ih+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else gW[#gW+1]=cc(ib,ih,"Altitude Hold: "..ik,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ap>0.1 then gW[#gW+1]=cc(ib,ih+20,"Beginning ascent","warn")elseif ap<0.09 and ap>0.05 then gW[#gW+1]=cc(ib,ih+20,"Aligning trajectory","warn")elseif ap<0.05 then gW[#gW+1]=cc(ib,ih+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b8~=nil then gW[#gW+1]=cc(ib,ih,b8,"warn")end end;if IntruderAlertSystem and safeMass==-1 then gW[#gW+1]=cc(ib,ih+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bu.."kg DETECTED","warnings")b_("alarm","AL",2)end;if BrakeLanding then if StrongBrakes then gW[#gW+1]=cc(ib,ih,"Brake-Landing","warnings")else gW[#gW+1]=cc(ib,ih,"Coast-Landing","warnings")end end;if ProgradeIsOn then gW[#gW+1]=cc(ib,ih,"Prograde Alignment","crit")end;if RetrogradeIsOn then gW[#gW+1]=cc(ib,ih,"Retrograde Alignment","crit")end;if bK then local type;if string.find(bK,"COLLISION")then type="warnings"else type="crit"end;gW[#gW+1]=cc(ib,ii+20,bK,type)elseif ap==0 then local bV,bZ=bT(bp:normalize())if bZ~=nil then local ik=cp(bZ)local travelTime=aR.computeTravelTime(bq,0,bZ)local il="Collision"if bV.noAtmosphericDensityAltitude>0 then il="Atmosphere"end;gW[#gW+1]=cc(ib,ii+20,bV.name.." "..il.." "..cA(travelTime).." In "..ik,"crit")end end;if VectorToTarget and not IntoOrbit then gW[#gW+1]=cc(ib,ih+35,VectorStatus,"warn")end;gW[#gW+1]="</g>"return gW end;local function im(eA)return d(y(eA*3.6,0)+0.5).." km/h"end;local function io(gW)local ip=OrbitMapX;local iq=OrbitMapY;local ir=OrbitMapSize;local is=4;local it=15;local cd=0;local ce=0;local iu,iv,iw,ix;local function iy(type)local iz,B,eA,iA;if type=="Periapsis"then iz=orbit.periapsis.altitude;B=orbit.timeToPeriapsis;eA=orbit.periapsis.speed;iA=35 else iz=orbit.apoapsis.altitude;B=orbit.timeToApoapsis;eA=orbit.apoapsis.speed;iA=-35 end;gW[#gW+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cd+iA,ce-5,ip+ir/2-iu+ix,ce-5)gW[#gW+1]=cc(cd,ce,type)ce=ce+it;local ik=cp(iz)gW[#gW+1]=cc(cd,ce,ik)ce=ce+it;gW[#gW+1]=cc(cd,ce,cA(B))ce=ce+it;gW[#gW+1]=cc(cd,ce,im(eA))end;if orbit~=nil and ap<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then iq=iq+is;cd=ip+ir+ip/2+is;ce=iq+ir/2+5+is;iu=ir/4;ix=0;gW[#gW+1]=[[<g class="pbright txtorb txtmid">]]gW[#gW+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ir+ip*2,ir+iq,is,is)if orbit.periapsis~=nil and orbit.apoapsis~=nil then iw=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(iu*2)iv=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/iw*(1-orbit.eccentricity)ix=iu-orbit.periapsis.altitude/iw-planet.radius/iw;local iB=""if orbit.periapsis.altitude<=0 then iB='redout'end;gW[#gW+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iB,ip+ir/2+ix+is,iq+ir/2+is,iu,iv)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ip+ir/2+is,iq+ir/2+is,planet.radius/iw)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then iy("Apoapsis")end;ce=iq+ir/2+5+is;cd=ip-ip/2+10+is;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then iy("Periapsis")end;gW[#gW+1]=cc(ip+ir/2+is,planet.name,20+is,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iC=orbit.timeToApoapsis/orbit.period*2*math.pi;local iD=iu*math.cos(iC)local iE=iv*math.sin(iC)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ip+ir/2+iD+ix+is,iq+ir/2+iE+is)end;gW[#gW+1]=[[</g>]]return gW else return gW end end;local function iF(gW)local cd=30;local ce=275;local iG={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local iH={"","------------------IN ATMO-----------------","Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to LowOrbitHeight over atmosphere and orbit to target","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local iI={"","------------------NO ATMO-----------------","Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local iJ={"","------------------ALWAYS--------------------","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and offset","Alt-8: Toggle ground stabilization (underwater flight)","Alt-9: Activate Gyroscope","","CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if ao then c2(iG,iH)table.insert(iG,"--------------CONDITIONAL-----------------")if VertTakeOff then table.insert(iG,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if am~=-1 then if antigrav then if bw then table.insert(iG,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(iG,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(iG,"Alt-6: Begins Vertical Takeoff.")else table.insert(iG,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(iG,"G: Begin BrakeLanding or Land")end else c2(iG,iI)end;if AltitudeHold then table.insert(iG,"Alt-Spacebar/Alt-C will raise/lower target height")end;c2(iG,iJ)for i=1,#iG do ce=ce+12;gW[#gW+1]=cc(cd,ce,iG[i],"pdim txttick txtstart")end end;local function iK(iL,iM)local iN;local iO=(iM-iL):normalize()local eF=(bt-iL):dot(iO)/iO:dot(iO)if eF<=0.then return(bt-iL):len()elseif eF>=(iM-iL):len()then return(bt-iM):len()end;local iP=iL+eF*iO;iN=(iP-bt):len()return iN end;local function iQ()local iN;local iR=nil;local iS=nil;local iT=nil;for cJ,iU in pairs(aL[0])do if iU.hasAtmosphere then local ah=iK(planet.center,iU.center)if iR==nil or ah<iR then iS=iU;iR=ah;iT=planet end;if aa and aa.hasAtmosphere and aa.name~=planet.name then local d_=iK(aa.center,iU.center)if d_<iR then iS=iU;iR=d_;iT=aa end end end end;local iV=gj(1770)local iW=gk(330)if iR then local iX="txttick "local iY=500000;if iR<iS.radius+iY or iR<iT.radius+iY then if bF then iX="txttick red "else iX="txttick orange "end end;iN=cp(iR,2)bG=cc(iV,iW,"Pipe ("..iT.name.."--"..iS.name.."): "..iN,iX.."pbright txtmid")end end;local iZ={}function iZ.HUDPrologue(gW)bF,ga=gh(bt)if not bF then F=PvPR;H=PvPG;G=PvPB else F=SafeR;H=SafeG;G=SafeB end;aw=[[rgb(]]..d(F+0.5)..","..d(H+0.5)..","..d(G+0.5)..[[)]]ax=[[rgb(]]..d(F*0.9+0.5)..","..d(H*0.9+0.5)..","..d(G*0.9+0.5)..[[)]]local i_=aw;local j0=ax;local j1=aw;local j2=ax;if gl()and not brightHud then i_=[[rgb(]]..d(F*0.4+0.5)..","..d(H*0.4+0.5)..","..d(G*0.3+0.5)..[[)]]j0=[[rgb(]]..d(F*0.3+0.5)..","..d(H*0.3+0.5)..","..d(G*0.2+0.5)..[[)]]end;gW[#gW+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],i_,i_,j1,j1,j0,j0,j2,j2,aE,aF)return gW end;function iZ.DrawVerticalSpeed(gW,dj)gV(gW,dj)end;function iZ.UpdateHud(gW)local hL=bz;local eD=core.getVelocity()local j3=bA;local h3=j3;local hi=hL;local i2=d(unit.getThrottle())local i7=bq*3.6;local i3=unit.getAxisCommandValue(0)local j4=gj(1770)local j5=gk(310)if AtmoSpeedAssist and by then i3=I;i2=I*100 end;local gn=gm()local h4="ROLL"if i2==nil then i2=0 end;if not bJ then if bq>5 then hL=hK(eD)j3=hM(eD)else hL=0;j3=0 end;h4="YAW"end;if ga>50000 and not ao then local j6;j6=cp(ga)gW[#gW+1]=cc(j4,j5,"PvP Boundary: "..j6,"pbright txtbig txtmid")end;gW[#gW+1]=ai;gW[#gW+1]=aB;gW[#gW+1]=go;if bG~=""then gW[#gW+1]=bG end;if gp~=""then gW[#gW+1]=gp end;gV(gW,aq)if l()==0 or RemoteHud then if not gl()or brightHud then if bJ then h2(gW,centerX,centerY,h3,h4,bJ)hh(gW,hi,h3,centerX,centerY,bJ,d(hM(eD)),bq)else h2(gW,centerX,centerY,j3,h4,bJ)hh(gW,hL,j3,centerX,centerY,bJ,d(j3),bq)end;ho(gW,aq,bJ)hN(gW,eD,bq,centerX,centerY)end end;i1(gW,gn,i2,i3)i6(gW,i7)ia(gW)io(gW)if showHelp then iF(gW)end;return gW end;function iZ.HUDEpilogue(gW)gW[#gW+1]="</svg>"return gW end;function iZ.ExtraData(gW)local j7=gj(1240)local j8=gk(55)local j9=j8+10;local ja;local jb=0;local gn=gm()if VertTakeOffEngine then gn=gn.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bq>20 then gn=gn.."-COLLISION ON"end;if TurnBurn then gn="TB-"..gn end;if not stablized then gn=gn.."-DeCoupled"end;local jc=vec3(core.getWorldAcceleration()):len()/9.80665;ja=core.g()gW[#gW+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then j7=gj(1120)j8=gk(55)j9=j8+10 elseif ao then local jd=gj(770)gW[#gW+1]=cc(jd,j8,"ATMOSPHERE","pdim txt txtend")gW[#gW+1]=cc(jd,j9,e("%.2f",ap),"pdim txt txtend","")end;gW[#gW+1]=cc(j7,j8,"GRAVITY","pdim txt txtend")gW[#gW+1]=cc(j7,j9,e("%.2f",ja/9.80665),"pdim txt txtend")gW[#gW+1]=cc(j7,j8+20,"ACCEL","pdim txt txtend")gW[#gW+1]=cc(j7,j9+20,e("%.2f",jc),"pdim txt txtend")gW[#gW+1]=cc(gj(960),gk(180),gn,"txtbig txtmid")end;function iZ.DrawOdometer(gW,ab,TotalDistanceTravelled,ac)local ja;local je=0;local jf=0;local jb=0;if ao then jb=LastMaxBrakeInAtmo else jb=LastMaxBrake end;maxThrust=a:maxForceForward()ja=core.g()if ja>0.1 then jf=at*ja;je=maxThrust/ja end;gW[#gW+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gj(660),gj(700),gk(35),gj(960),gk(55),gj(1240),gk(35),gj(1280))if l()==0 or RemoteHud then gW[#gW+1]=cc(gj(700),gk(20),e("Trip: %.2f km",ab),"txtstart")gW[#gW+1]=cc(gj(700),gk(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")gW[#gW+1]=cc(gj(830),gk(20),"Trip Time: "..cA(ac),"txtstart")gW[#gW+1]=cc(gj(830),gk(30),"Total Time: "..cA(TotalFlightTime),"txtstart")gW[#gW+1]=cc(gj(970),gk(20),e("Mass: %.2f Tons",at/1000),"txtstart")gW[#gW+1]=cc(gj(1240),gk(10),e("Max Brake: %.2f kN",jb/1000),"txtend")gW[#gW+1]=cc(gj(1240),gk(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if ja>0.1 then gW[#gW+1]=cc(gj(970),gk(30),e("Max Mass: %.2f Tons",je/1000),"txtstart")gW[#gW+1]=cc(gj(1240),gk(20),e("Req Thrust: %.2f kN",jf/1000),"txtend")else gW[#gW+1]=cc(gj(970),gk(30),"Max Mass: n/a","txtstart")gW[#gW+1]=cc(gj(1240),gk(20),"Req Thrust: n/a","txtend")end end;gW[#gW+1]="</g>"return gW end;function iZ.DrawWarnings(gW)return ia(gW)end;function iZ.DisplayOrbitScreen(gW)return io(gW)end;function iZ.DisplayMessage(gW,ik)if ik~="empty"then local ce=310;for jg in string.gmatch(ik,"([^\n]+)")do ce=ce+35;gW[#gW+1]=cc("50%",ce,jg,"msg")end end;if ag~=0 then unit.setTimer("msgTick",ag)ag=0 end end;function iZ.DrawDeadZone(gW)gW[#gW+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function iZ.UpdatePipe()if ao then bG=""return end;iQ()end;function iZ.DrawSettings(gW)if#bC>0 then local cd=gj(640)local ce=gk(200)gW[#gW+1]=[[<g class="pbright txtvspd txtstart">]]for cJ,bO in pairs(bC)do gW[#gW+1]=cc(cd,ce,bO..": ".._G[bO])ce=ce+20;if cJ%12==0 then cd=cd+gj(350)ce=gk(200)end end;gW[#gW+1]=cc(gj(640),gk(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")gW[#gW+1]="</g>"end;return gW end;local jh;local ji=gj(1770)local jj=gk(350)local jk=gk(15)local jl=gj(1370)local jm,jn;local jo=0;function iZ.DrawRadarInfo()local function jp()if radarPanelID~=nil and jo==0 then r(radarPanelID)radarPanelID=nil;if jh~=nil then r(jh)jh=nil end else if jo==1 then r(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jh=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;jo=0 end end;local f5,f6,f4,f7,f8,f1=aX.GetRadarHud()if f4>0 then if CollisionSystem then jm=f7 .."/"..f8 .." Plotted : "..f4-f8 .." Ignored"else jm="Radar Contacts: "..f4 end;go=cc(ji,jj,jm,"pbright txtbig txtmid")if#f1>0 then go=go..cc(jl,jk,"Friendlies In Range","pbright txtbig txtmid")for cJ,bO in pairs(f1)do jk=jk+20;go=go..cc(jl,jk,radar_1.getConstructName(bO),"pdim txtmid")end;f1={}end;if f5==nil and jh==nil then jo=1;jp()end;if f5~=nil and jh~=nil then jp()end;if radarPanelID==nil then jp()end else if f6 then go=cc(ji,jj,"Radar: Jammed","pbright txtbig txtmid")else go=cc(ji,jj,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jo=0;jp()end end end;function iZ.DrawTanks()if fuelX~=0 and fuelY~=0 then gp=cc(fuelX,fuelY,"","txtstart pdim txtfuel")gF(fuelX,"Atmospheric ","ATMO",aG,gD,gE)gF(fuelX+120,"Space fuel t","SPACE",aH,gB,gC)gF(fuelX+240,"Rocket fuel ","ROCKET",aI,gz,gA)end end;return iZ end;local function jq()local function jr(position)local de=sys:closestBody(position)if(position-de.center):len()>de.radius+de.noAtmosphericDensityAltitude then de=aL[0][0]end;return de end;local function js()local function jt(ju,jv)return ju.name<jv.name end;bE={}for cJ,bO in pairs(aL[0])do bE[#bE+1]={name=bO.name,index=cJ}end;table.sort(bE,jt)end;local function jw(jx)for cJ,bO in pairs(jx)do if bO.name and bO.name==CustomTarget.name then return cJ end end;return-1 end;local function jy()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local jz=bE[AutopilotTargetIndex].index;local jA=aL[0][jz]if jA.center then AutopilotTargetName=jA.name;aa=aQ[0][jz]if CustomTarget~=nil then if ap==0 then if s(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if s(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if s(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then t(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if s(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if s(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if s(widgetMaxMassText,widgetMaxMass)~=1 then t(widgetMaxMassText,widgetMaxMass)end;if s(widgetTravelTimeText,widgetTravelTime)~=1 then t(widgetTravelTimeText,widgetTravelTime)end;if s(widgetTargetOrbitText,widgetTargetOrbit)~=1 then t(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jA;for _,bO in pairs(aQ[0])do if bO.name==CustomTarget.planetname then aa=bO;AutopilotTargetName=CustomTarget.name;break end end;if s(widgetMaxMassText,widgetMaxMass)~=1 then t(widgetMaxMassText,widgetMaxMass)end;if s(widgetTravelTimeText,widgetTravelTime)~=1 then t(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aT(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jB(g_)if not Autopilot and not VectorToTarget and not ak and not IntoOrbit then if g_==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bE then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bE end end;if AutopilotTargetIndex==0 then jy()else local jz=bE[AutopilotTargetIndex].index;local jA=aL[0][jz]if jA.name=="Space"or iphCondition=="Custom Only"and jA.center or iphCondition=="No Moons"and string.find(jA.name,"Moon")~=nil then if g_==nil then jB()else jB(1)end else jy()end end else a0="Disengage autopilot before changing Interplanetary Helper"b_("iph","AP")end end;local function jC()local fN=-1;fN=jw(aL[0])if fN>-1 then table.remove(aL[0],fN)end;fN=-1;fN=jw(SavedLocations)if fN~=-1 then a0=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fN)end;jB()js()end;local function jD(bM,position,hH,jE)if dbHud_1 or hH then local de=jr(position)local ja=de.gravity;local jF=de.atmosphericDensityAboveSurface;if jE then jF=ap;ja=unit.getClosestPlanetInfluence()end;local jG={position=position,name=bM,atmosphere=jF,planetname=de.name,gravity=ja,safe=jE}if not hH then SavedLocations[#SavedLocations+1]=jG else for cJ,bO in pairs(aL[0])do if bO.name and bM==bO.name then table.remove(aL[0],cJ)end end end;table.insert(aL[0],jG)js()jy()a0="Location saved as "..bM.."("..de.name..")"else a0="Databank must be installed to save permanent locations"end end;local cK={}function cK.UpdateAtlasLocationsList()js()end;function cK.UpdateAutopilotTarget()jy()end;function cK.adjustAutopilotTargetIndex(g_)jB(g_)end;function cK.findAtlasIndex(jx)jw(jx)end;function cK.UpdatePosition(jH)local fN=jw(SavedLocations)if fN~=-1 then if jH~=nil then SavedLocations[fN].name=jH else local jI=SavedLocations[fN]jC()jD(jI.name,bt,false,true)end;a0=SavedLocations[fN].name.." position updated ("..SavedLocations[fN].planetname..")"else a0="Name Not Found"end end;function cK.AddNewLocation(bM,position,hH,jE)jD(bM,position,hH,jE)end;function cK.ClearCurrentPosition()jC()end;for cJ,bO in pairs(SavedLocations)do table.insert(aL[0],bO)end;js()cK.UpdateAutopilotTarget()return cK end;local function jJ()local jK={}local function jL(eA)local jM=AutopilotEndSpeed;if not Autopilot then jM=0 end;if not ao then return aR.computeDistanceAndTime(eA,jM,at,0,0,LastMaxBrake-AutopilotPlanetGravity*at)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aR.computeDistanceAndTime(eA,jM,at,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*at)else return 0,0 end end end;local function jN(eA)local jM=AutopilotEndSpeed;if not Autopilot then jM=0 end;return aR.computeDistanceAndTime(eA,jM,at,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*at)end;local jO=false;function jK.GetAutopilotBrakeDistanceAndTime(eA)return jL(eA)end;function jK.GetAutopilotTBBrakeDistanceAndTime(eA)return jN(eA)end;local function jP(jQ,jR,jS)jR=jR:project_on_plane(jQ)jS=jS:project_on_plane(jQ)return m(jR:cross(jS):dot(jQ),jR:dot(jS))end;local function jT()local function jU()local jV=-1;local jW=-1;if vBooster then jV=vBooster.distance()end;if hover then jW=hover.distance()end;if jV~=-1 and jW~=-1 then if jV<jW then return jV else return jW end elseif jV~=-1 then return jV elseif jW~=-1 then return jW else return-1 end end;local jX=jU()local jY=-1;if telemeter_1 then jY=telemeter_1.getDistance()end;if jX~=-1 and jY~=-1 then if jX<jY then return jX else return jY end elseif jX~=-1 then return jX else return jY end end;local function jZ(planet,dW,j_)local function k0(k1,dc)local e1=vec3(dc)if k1.bodyId==0 then return setmetatable({latitude=e1.x,longitude=e1.y,altitude=e1.z,bodyId=0,systemId=k1.planetarySystemId},MapPosition)end;local e2=e1-k1.center;local ah=e2:len()local dj=ah-k1.radius;local dh=0;local di=0;if not cm(ah,0)then local e3=m(e2.y,e2.x)di=e3>=0 and e3 or 2*math.pi+e3;dh=math.pi/2-math.acos(e2.z/ah)end;return setmetatable({latitude=math.deg(dh),longitude=math.deg(di),altitude=dj,bodyId=k1.bodyId,systemId=k1.planetarySystemId},MapPosition)end;local k2=k0(planet,dW)k2="::pos{"..k2.systemId..","..k2.bodyId..","..k2.latitude..","..k2.longitude..","..k2.altitude.."}"if j_ then return k2 else system.setWaypoint(k2)return true end end;local k3=false;function jK.showWayPoint(planet,dW,j_)return jZ(planet,dW,j_)end;function jK.APTick()local function k4()if bL and not BrakeLanding then local bY=bL[1]local g1,g2=bL[2],bL[3]local k5=math.min(g1,g2 or g1)local k6=k5/bq;local k7=AutoTakeoff and(bq<42 or am~=-1)local k8=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if k8 and not k7 and(a6*1.5>k5 or k6<1)then BrakeIsOn=true;ci(0)if AltitudeHold then cu()end;if LockPitch then ToggleLockPitch()end;a0="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cv()end;StrongBrakes=true;BrakeLanding=true;a_=true end;if k6<11 then bK=bY.name.." COLLISION "..cA(k6).." / "..cp(k5,2)else bK=bY.name.." collision "..cA(k6)end;if k6<6 then b_("alarm","AL",2)end else bK=false end end;local function k9(bU,ka,kb)local function kc(bU,dI)bU=vec3(bU)dI=vec3(dI):normalize()local cZ=bU*dI;return cZ.x+cZ.y+cZ.z end;local kd=0.001;local ke=1;if not ao or not b1 or am~=-1 or bq<O then if kb==nil then kb=DampingMultiplier end;if ka==nil then ka=kd end;bU=vec3(bU):normalize()local kf=vec3()-bU;local kg=-kc(kf,core.getConstructWorldOrientationRight())*ke;local kh=-kc(kf,core.getConstructWorldOrientationUp())*ke;if az==0 then az=kg/2 end;if aA==0 then aA=kh/2 end;if c(kg)<0.1 then T=T-kg*2 else T=T-(kg+(kg-az)*kb)end;if c(kh)<0.1 then S=S+kh*2 else S=S+kh+(kh-aA)*kb end;az=kg;aA=kh;if c(kg)<ka and c(kh)<ka then return true end;return false elseif b1 and am==-1 then bU=bp;if kb==nil then kb=DampingMultiplier end;if ka==nil then ka=kd end;bU=vec3(bU):normalize()local kf=bn-bU;local kg=-kc(kf,core.getConstructWorldOrientationRight())*ke;local kh=-kc(kf,core.getConstructWorldOrientationUp())*ke;if az==0 then az=kg/2 end;if aA==0 then aA=kh/2 end;if c(kg)<0.1 then T=T-kg*5 else T=T-(kg+(kg-az)*kb)end;if c(kh)<0.1 then S=S+kh*5 else S=S+kh+(kh-aA)*kb end;az=kg;aA=kh;if c(kg)<ka and c(kh)<ka then return true end;return false end end;ao=j()>0;ap=j()aq=core.getAltitude()am=jT()B=o()b2=B;bJ=unit.getClosestPlanetInfluence()>0;if CollisionSystem then k4()end;if antigrav then bw=antigrav.getState()==1 end;local ki=1;local kj=1;local kk=B-b2;local kl=-math.deg(jP(bm,bp,bn))local km=math.deg(jP(bo,bp,bn))local g_=br*-1;b1=ao and kl<-YawStallAngle or kl>YawStallAngle or km<-PitchStallAngle or km>PitchStallAngle;local kn=system.getMouseDeltaX()local ko=system.getMouseDeltaY()if InvertMouse and not Z then ko=-ko end;T=0;X=0;S=0;sys=aQ[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aT(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bp)if aq==0 then aq=(bt-planet.center):len()-planet.radius end;local ja=planet:getGravity(core.getConstructWorldPos()):len()*at;b3=0;aS=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if v()==0 then if l()==1 and Z then if not aY then ae=ae+kn;af=af+ko end else ae=0;af=0 end else ae=ae+kn;af=af+ko;ah=w(ae*ae+af*af)if not Z and l()==0 then if userControlScheme=="virtual joystick"then if ae>0 and ae>DeadZone then T=T-(ae-DeadZone)*MouseXSensitivity elseif ae<0 and ae<DeadZone*-1 then T=T-(ae+DeadZone)*MouseXSensitivity else T=0 end;if af>0 and af>DeadZone then S=S-(af-DeadZone)*MouseYSensitivity elseif af<0 and af<DeadZone*-1 then S=S-(af+DeadZone)*MouseYSensitivity else S=0 end else ae=0;af=0;if userControlScheme=="mouse"then S=(-utils.smoothstep(ko,-100,100)+0.5)*2*ki;T=(-utils.smoothstep(kn,-100,100)+0.5)*2*kj end end end end;local kp=bq>8334;if bq>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not kp then a0="Space Speed Engine Shutoff reached"ci(0)end;if not kp and LastIsWarping then if not BrakeIsOn then cx()end;if Autopilot then cv()end end;LastIsWarping=kp;if ao and ap>0.09 then if bq>b6/3.6 and not AtmoSpeedAssist and not jO then BrakeIsOn=true;jO=true elseif not AtmoSpeedAssist and jO then if bq<b6/3.6 then BrakeIsOn=false;jO=false end end end;if BrakeIsOn then W=1 else W=0 end;if ProgradeIsOn then if aj then BrakeIsOn=false;local kq=false;if CustomTarget~=nil then kq=k9(CustomTarget.position-bt,0.1)else kq=k9(vec3(bp),0.01)end;a_=true;if kq then cl(d(b6))if(c(bA)<2 or c(bz)>85)and bq>=b6/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;P=true;aj=false;al=true;Autopilot=false;cy()end elseif ao and AtmoSpeedAssist then ci(1)end elseif bq>O then k9(vec3(bp),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bq>O then k9(-vec3(bp))end end;if not ProgradeIsOn and aj and not IntoOrbit then if ap==0 then P=true;cy()aj=false;al=true else aj=false;cv()end end;if al and CustomTarget~=nil and(aq<HoldAltitude+250 and aq>HoldAltitude-250)and bq*3.6>b6-250 and c(bs)<25 and ap>=0.1 and(CustomTarget.position-bt):len()>2000+aq then cv()al=false end;if VertTakeOff then a_=true;local kr=HoldAltitude;if bs<-30 then a0="Unable to achieve lift. Safety Landing."ad=0;a_=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bw or HoldAltitude<planet.spaceEngineMinAltitude then if bw then kr=antigrav.getBaseAltitude()end;if aq<kr-100 then b7=0;ad=15;BrakeIsOn=false elseif bs>0 then BrakeIsOn=true;ad=0 elseif bs<-30 then BrakeIsOn=true;ad=15 elseif aq>=kr then if bw then if Autopilot or VectorToTarget then cs()else BrakeIsOn=true;VertTakeOff=false end;a0="Takeoff complete. Singularity engaged"b_("aggLk","AG")else BrakeIsOn=false;a0="VTO complete. Engaging Horizontal Flight"b_("vtoc","VT")cs()end;ad=0 end else if ap>0.08 then b7=0;BrakeIsOn=false;ad=20 elseif ap<0.08 and ap>0 then BrakeIsOn=false;if bj then b7=0;ad=20 else ad=0;b7=36;cl(3500)end else a_=autoRollPreference;IntoOrbit=true;bh=false;CancelIntoOrbit=false;bb=false;b9=nil;ba=nil;if bg==nil then bg=planet end;bf=kr;be=true;VertTakeOff=false end end;if b7~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local ks=p(b7-bz,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(ks)local kt=p(vTpitchPID:get(),-1,1)S=kt end end;if IntoOrbit then local kf;local ku=false;local kv=cp(bf)if bg==nil then bg=planet;if VectorToTarget then bg=aa end end;if not be then bf=d(bg.radius+bg.surfaceMaxAltitude+LowOrbitHeight)if bg.hasAtmosphere then bf=d(bg.radius+bg.noAtmosphericDensityAltitude+LowOrbitHeight)end;be=true end;if bd.VectorToTarget then kf=CustomTarget.position-bt end;local kw,kx=aT(bg):escapeAndOrbitalSpeed((bt-bg.center):len()-bg.radius)local ky=bA;if not bb then local kz=false;local kA=false;ci(0)ba=0;b8="Aligning to orbital path - OrbitHeight: "..kv;if bd.VectorToTarget then k9(kf:normalize():project_on_plane(br))ku=bn:dot(kf:project_on_plane(bm):normalize())>0.95 else k9(bp)ku=kl<0.5;if bq<150 then ku=true end end;S=0;b9=0;if bz<=b9+1 and bz>=b9-1 then kz=true else kz=false end;if ky<=ba+1 and ky>=ba-1 then kA=true else kA=false end;if kz and kA and ku then b9=nil;ba=nil;bb=true end else if bd.VectorToTarget then k9(kf:normalize():project_on_plane(br))elseif bq>150 then k9(bp)end;S=0;if bd.VectorToTarget then local a6,_=aR.computeDistanceAndTime(bq,b6/3.6,at,0,0,LastMaxBrake)if bh and kf:len()>15000+a6+aq then b8="Orbiting to Target"if aq-100<=bg.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bg.noAtmosphericDensityAltitude then bh=false end elseif bh or kf:len()<15000+a6+aq then a0="Orbit complete, proceeding with reentry"b_("orCom","OB")AutopilotTargetCoords=CustomTarget.position;P=true;al=true;bd.VectorToTarget,bd.AutopilotAlign=false,false;ct()cy()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and aq>bf*0.9 and aq<bf*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bf*0.99 and orbit.apoapsis.altitude>=bf*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bh then if bh then BrakeIsOn=false;ci(0)b9=0;if not bd.VectorToTarget then a0="Orbit complete"b_("orCom","OB")ct()end else bl=bl+1;if bl>=2 then bh=true end end else b8="Adjusting Orbit - OrbitHeight: "..kv;bc=true;cl(kx*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kB=bs;local kC=aq-bf;local kD=c(kC)if bs<10 and c(bz)<10 and kD<100 then kB=bs*2 end;if kB<10 and c(bz)<10 and kD<100 then kB=kB*2 end;if kB<5 and c(bz)<5 and kD<100 then kB=kB*4 end;VSpdPID:inject(kB)b9=p(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kC)b9=p(b9-p(OrbitAltPID:get(),-15,15),-90,90)end end else local kE=2.75;local kF=c(y(kw*kE))local kG=kF%50;if kG>0 then kF=kF-kG+50 end;BrakeIsOn=false;if aq<bf*0.8 then b8="Escaping planet gravity - OrbitHeight: "..kv;b9=utils.map(bs,200,0,-15,80)elseif aq>=bf*0.8 and aq<bf*1.15 then b8="Approaching orbital corridor - OrbitHeight: "..kv;kF=kF*0.75;b9=utils.map(bs,100,-100,-15,65)elseif aq>=bf*1.15 and aq<bf*1.5 then b8="Approaching orbital corridor - OrbitHeight: "..kv;kF=kF*0.75;if bs<0 or bc then b9=utils.map(aq,bf*1.5,bf*1.01,-30,0)else b9=utils.map(aq,bf*0.99,bf*1.5,0,30)end elseif aq>bf*1.5 then b8="Reentering orbital corridor - OrbitHeight: "..kv;b9=-65;local kH=utils.map(bs,-150,-400,1,0.55)kF=kF*kH end;cl(d(kF))end end;if b9~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kI=b9-bz;OrbitPitchPID:inject(kI)local kJ=p(OrbitPitchPID:get(),-0.5,0.5)S=kJ end end;if Autopilot and ap==0 and not aj then local function kK(jm,orbit)system.print(jm)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ci(0)N=false;a0=jm;b_("apCom","AP")if orbit or aj then if orbit and AutopilotTargetOrbit~=nil and not aj then if not aq or aq==0 then return end;bf=aq;be=true end;ct()end end;local kL,kM=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kN=(CustomTarget.position-aa.center):normalize()local kO=kN:project_on_plane((aa.center-bt):normalize()):normalize()local kP=aa.center+kO*(aa.radius+AutopilotTargetOrbit)local kQ=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bt-kP):len()<(bt-kQ):len()then kL=kP else kL=kQ;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kL;aW.showWayPoint(aa,AutopilotTargetCoords)kM=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kM=true;TargetSet=true;AutopilotRealigned=true;kL=CustomTarget.position+(bt-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kN=(bt+bp*100000-aa.center):normalize()local kO=kN:project_on_plane((aa.center-bt):normalize()):normalize()if kO:len()<1 then kN=(bt+bn*100000-aa.center):normalize()kO=kN:project_on_plane((aa.center-bt):normalize()):normalize()end;kL=aa.center+kO*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kL;TargetSet=true;kM=true;AutopilotRealigned=true;aW.showWayPoint(aa,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kL)-bt):len()local bV,bW,bX=aQ:getPlanetarySystem(0):castIntersections(bt,bp:normalize(),function(bY)if bY.noAtmosphericDensityAltitude>0 then return bY.radius+bY.noAtmosphericDensityAltitude else return bY.radius+bY.surfaceMaxAltitude*1.5 end end)local bZ=bW;if bX~=nil and bW~=nil then bZ=math.min(bX,bW)end;if bZ~=nil and bZ<AutopilotDistance and bV.name==aa.name then AutopilotDistance=bZ end;local kq=true;local kR=(aa.center-(bt+vec3(bp):normalize()*AutopilotDistance)):len()-aa.radius;local ik=cp(kR)s(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ik..'"}')local a6,a7;if not TurnBurn then a6,a7=jL(bq)else a6,a7=jN(bq)end;if bq>300 and AutopilotAccelerating then local kf=vec3(kL)-bt;local kS=p(math.deg(jP(bm,bp:normalize(),kf:normalize()))*bq/500,-90,90)local kT=p(math.deg(jP(bo,bp:normalize(),kf:normalize()))*bq/500,-90,90)if c(kS)<20 and c(kT)<20 then kS=kS*2;kT=kT*2 end;if c(kS)<2 and c(kT)<2 then kS=kS*2;kT=kT*2 end;local kl=-math.deg(jP(bm,bn,bp:normalize()))local km=-math.deg(jP(bo,bn,bp:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kT-km)local kU=p(apPitchPID:get(),-1,1)S=S+kU;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kS-kl)local kV=p(apYawPID:get(),-1,1)T=T+kV;kM=true;if c(kS)>2 or c(kT)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"b_("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end end end;if kR<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aT(aa):escapeAndOrbitalSpeed(kR)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bV,bZ=bT((AutopilotTargetCoords-bt):normalize())if aa.name~=planet.name then if bV~=nil then a0="Collision with "..bV.name.." in "..cp(bZ).."\nClear LOS to continue."ag=5;k3=true else k3=false;a0=""end end end;if not k3 then if not AutopilotCruising and not AutopilotBraking and not kM then kq=k9((kL-bt):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kq=k9(-vec3(bp):normalize())end end;if AutopilotAccelerating then if not N then BrakeIsOn=false;ci(AutopilotInterplanetaryThrottle)I=y(AutopilotInterplanetaryThrottle,2)N=true end;local kW=unit.getThrottle()if AtmoSpeedAssist then kW=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or kW==0 and N then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then b_("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;ci(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then b_("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;ci(0)N=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;W=1 end;if TurnBurn then ci(1,true)end;local _,kx=aT(aa):escapeAndOrbitalSpeed((bt-planet.center):len()-planet.radius)local kf;if CustomTarget~=nil then kf=CustomTarget.position-bt end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bq<50 then kK("Autopilot complete, arrived at space location")BrakeIsOn=true;W=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bq<=kx and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kK("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;aj=true;aW.showWayPoint(aa,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then b_("apCir","AP")AutopilotStatus="Circularizing"end;if bq<=kx then if CustomTarget~=nil then if bp:normalize():dot(kf:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then b_("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aW.showWayPoint(aa,CustomTarget.position)WaypointSet=true end else kK("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;aj=true;aW.showWayPoint(aa,CustomTarget.position)WaypointSet=false end else kK("Autopilot completed, setting orbit",true)W=0 end end elseif AutopilotStatus=="Circularizing"then kK("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then b_("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kW=unit.getThrottle()if AtmoSpeedAssist then kW=I end;if kW>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end;AutopilotCruising=false end else if kq then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not aj then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bo;AutopilotShipUp=bm;AutopilotShipRight=bo end;AutopilotRealigned=true elseif kq and not k3 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end;if not N then ci(AutopilotInterplanetaryThrottle,true)I=y(AutopilotInterplanetaryThrottle,2)N=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ap>0)then a0="Autopilot complete, proceeding with reentry"b_("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W=0;ci(0)N=false;ProgradeIsOn=true;aj=true;aW.showWayPoint(aa,CustomTarget.position)end;if Y then a_=true;local kT=0;local eE=bt+vec3(unit.getMasterPlayerRelativePosition())local kX=eE-bt;local kY=vec3(kX):project_on(bn):len()local kZ=vec3(kX):project_on(bo):len()local ah=w(kY*kY+kZ*kZ)k9(kX:normalize())local k_=40;local l0=ah<k_;local l1=100;local l2=p((ah-k_)/2,10,l1)S=0;local kq=c(T)<0.1;if kq and bq<l2 and not l0 then BrakeIsOn=false;kT=-20 else BrakeIsOn=true;kT=0 end;local l3=0;if c(kT-bz)>l3 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kT-bz)local kU=pitchPID:get()S=kU end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local l4=LastMaxBrakeInAtmo;if l4 then l4=l4*p(bq/100,0.1,1)*ap else l4=LastMaxBrake end;if ap<0.01 then l4=LastMaxBrake end;local l5=vec3(core.getWorldAirFrictionAcceleration())local l6=w(l5:len()-l5:project_on(g_):len())*at;if bq>100 then a6,a7=aR.computeDistanceAndTime(bq,100,at,0,0,l4+l6)local l7,l8=aR.computeDistanceAndTime(100,0,at,0,0,l4/2)a6=a6+l7 else a6,a7=aR.computeDistanceAndTime(bq,0,at,0,0,l4/2)end;local l9=HoldAltitude-aq;local la=500+bq;local lb=1;if AutoTakeoff then lb=p(bq/100,0.1,1)end;local kT=(utils.smoothstep(l9,-la,la)-0.5)*2*MaxPitch*lb;if not Reentry and not aj and not VectorToTarget and bn:dot(bp:normalize())<0.99 then kT=(utils.smoothstep(l9,-la*p(20-19*ap*10,1,20),la*p(20-19*ap*10,1,20))-0.5)*2*MaxPitch*p(2-ap*10,1,2)*lb end;if not AltitudeHold then kT=0 end;if LockPitch~=nil then if bJ and not IntoOrbit then kT=LockPitch else LockPitch=nil end end;a_=true;local lc=S;if Reentry then local ld=d(b6)local le,lf=aR.computeDistanceAndTime(bq,ld/3.6,at,0,0,LastMaxBrake-planet.gravity*9.8*at)local lg=aq-(planet.noAtmosphericDensityAltitude+5000)if not by and aq>planet.noAtmosphericDensityAltitude+5000 and bq<=ld/3.6 and bq>ld/3.6-10 and c(bp:normalize():dot(bn))>0.9 then ci(0)elseif by and bq>ld/3.6 and(le>-1 and lg<=le or aq<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cl(ld,true)if not P then kT=-80;if ap>0.02 then a0="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kT=0;a_=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aq>planet.noAtmosphericDensityAltitude+5000 then a_=true elseif aq<=planet.noAtmosphericDensityAltitude+5000 then cl(ld)if not by and q:getTargetSpeed(axisCommandId.longitudinal)==b6 then P=false;Reentry=false;a_=true end end end;if bq>O and not ak and not VectorToTarget and not BrakeLanding and ForceAlignment then k9(vec3(bp))end;if bH or(VectorToTarget or ak)and AutopilotTargetIndex>0 and ap>0.01 then local kf;if bH then if type(bH)=="table"then kf=bH elseif bH<3 and bH>0 then kf=-br:cross(bp)*5000 elseif bH>=3 then kf=br:cross(bp)*5000 elseif bH<0 then kf=bp*25000 end elseif CustomTarget~=nil then kf=CustomTarget.position-bt else kf=aa.center-bt end;local kS=math.deg(jP(br:normalize(),bp,kf))*2;local lh=math.rad(c(bA))if bq>minRollVelocity and ap>0.01 then local li=p(90-kT*2,-90,90)b3=p(kS*2,-li,li)local lj=kS;kS=p(p(kS,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(lh)+4*(bz-kT)*math.sin(math.rad(bA)),-YawStallAngle*0.80,YawStallAngle*0.80)kT=p(p(kT*math.cos(lh),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(p(c(lj)*math.sin(lh),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b3=0;kS=p(kS,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lk=kl-kS;if bH and c(lk)<=0.0001 and(type(bH)=="table"or type(bH)~="table"and bH<0 and c(bA)<1)then if bH==-2 then cu()end;bH=nil;b_("180Off","BR")return end;if not b1 and bq>minRollVelocity and ap>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lk)local kV=p(yawPID:get(),-1,1)T=T+kV elseif ao and am>-1 or bq<minRollVelocity then k9(kf)elseif b1 and ap>0.01 then if(kl<-YawStallAngle or kl>YawStallAngle)and ap>0.01 then k9(bp)end;if(km<-PitchStallAngle or km>PitchStallAngle)and ap>0.01 then kT=p(bz-km,bz-PitchStallAngle*0.80,bz+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not ak then local kr=planet:getAltitude(CustomTarget.position)local lg=w(kf:len()^2-(aq-kr)^2)local ll=bp:len()-c(bs)StrongBrakes=true;if not ak and not Reentry and lg<=a6+bq*kk/2 and(bp:project_on_plane(br):normalize():dot(kf:project_on_plane(br):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"ci(0)if AltitudeHold then cu()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ll<0.1 or lg<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<lg)then if not bw then b_("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bK=false end;LastDistanceToTarget=lg end elseif VectorToTarget and ap==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ak or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local kf=CustomTarget.position-bt;local kr=planet:getAltitude(CustomTarget.position)local lg=w(kf:len()^2-(aq-kr)^2)local l4=LastMaxBrakeInAtmo;if l4 then a6,a7=aR.computeDistanceAndTime(bq,0,at,0,0,l4/2)StrongBrakes=true;if lg<=a6+bq*kk/2 and bp:project_on_plane(br):normalize():dot(kf:project_on_plane(br):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;P=true;aj=false;al=true;Autopilot=false;cy()end end;LastDistanceToTarget=lg end end end;if ap==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ak or IntoOrbit or Reentry)then if not bh and not IntoOrbit then bf=HoldAltitude;be=true;if VectorToTarget then bd.VectorToTarget=true end;ct()VectorToTarget=false;bb=true end end;if b1 and ap>0.01 and am==-1 and bq>minRollVelocity and VectorStatus~="Finalizing Approach"then k9(bp)kT=p(bz-km,bz-PitchStallAngle*0.80,bz+PitchStallAngle*0.80)end;S=lc;local jY=-1;if BrakeLanding then kT=0;local lm=false;local ln=30;if aS~=nil and aS>0 then local lo=p(ap,0.4,2)local l4=LastMaxBrakeInAtmo*p(bq/100,0.1,1)*lo;local lp=aS*lo+l4-ja;local lq=l4/2-ja;local lr=bq-w(c(lq/2)*20/(0.5*at))*utils.sign(lq)if lr<0 then lr=0 end;local ls;if bq>100 then local lt,_=aR.computeDistanceAndTime(bq,100,at,0,0,l4)local lu,_=aR.computeDistanceAndTime(100,0,at,0,0,w(l4))ls=lt+lu else ls=aR.computeDistanceAndTime(bq,0,at,0,0,w(l4))end;if ls<20 then BrakeIsOn=false else local lv=0;if lr>100 then local lw,_=aR.computeDistanceAndTime(lr,100,at,0,0,lp)local lx,_=aR.computeDistanceAndTime(100,0,at,0,0,aS*lo+w(l4)-ja)lv=lw+lx else lv,_=aR.computeDistanceAndTime(lr,0,at,0,0,aS*lo+w(l4)-ja)end;lv=(lv+15+bq*kk)*1.1;local ly=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if ly then local kr=planet:getAltitude(CustomTarget.position)local lz=aq-kr-100;local kf=CustomTarget.position-bt;local lA=w(kf:len()^2-(aq-kr)^2)if lA>100 then ly=false elseif lz<=lv or lv==-1 then BrakeIsOn=true;lm=true else BrakeIsOn=false;lm=true end end;if not ly and CalculateBrakeLandingSpeed then if lv>=ln then BrakeIsOn=true else BrakeIsOn=false end;lm=true end end end;if not by then ci(0)end;q:setTargetGroundAltitude(500)q:activateGroundEngineAltitudeStabilization(500)stablized=true;jY=am;if jY>-1 then a_=autoRollPreference;if bq<1 or bp:normalize():dot(br)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if Q then a.control.extendLandingGears()b_("grOut","LG",1)end;q:setTargetGroundAltitude(LandingGearGroundHeight)ad=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bp:normalize():dot(-g_)<0.999 then BrakeIsOn=true elseif bs<-brakeLandingRate and not lm then BrakeIsOn=true elseif not lm then BrakeIsOn=false end end;if AutoTakeoff or ak then local bV,bX,bW;if AutopilotTargetCoords~=nil then bV,bX,bW=aQ:getPlanetarySystem(0):castIntersections(bt,(AutopilotTargetCoords-bt):normalize(),function(bY)return bY.radius+bY.noAtmosphericDensityAltitude end)end;if bw then if aq>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;ci(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kT)<15 and aq/HoldAltitude>0.75 then AutoTakeoff=false;if not ak then if by and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif ak and bq<O then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;ci(0)elseif ak then ci(0)BrakeIsOn=true end elseif ak and ap==0 and aa~=nil and(bV==nil or bV.name==aa.name)then Autopilot=true;ak=false;AltitudeHold=false;AutoTakeoff=false;if not by then ci(0)end;AutopilotAccelerating=true end end;local lB=am>-1;local lC=bz;if(VectorToTarget or ak or bH)and not lB and bq>minRollVelocity and ap>0.01 then local lh=math.rad(c(bA))lC=bz*c(math.cos(lh))+km*math.sin(lh)end;local lD=p(kT-lC,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ap<0.01 and VectorToTarget then lD=p(kT-lC,-85,MaxPitch)elseif ap<0.01 then lD=p(kT-lC,-MaxPitch,MaxPitch)end;if c(bA)<5 or VectorToTarget or bH or BrakeLanding or lB or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lD)local kU=pitchPID:get()S=S+kU end end;if antigrav~=nil and(antigrav and not ExternalAGG and aq<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;am=jT()return jK end;function script.onStart()local lE={}local lF={}local lG=false;local function lH()local function lI(lJ)local lK=dbHud_1.hasKey;for cJ,bO in pairs(lJ)do if lK(bO)then local cZ=f(dbHud_1.getStringValue(bO))if cZ~=nil then _G[bO]=cZ;lG=true end end end end;if dbHud_1 then if not useTheseSettings then lI(c5())coroutine.yield()lI(b)else lI(b)a0="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ag=5;lG=false end;coroutine.yield()if lG then a0="Loaded Saved Variables"aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)a_=autoRollPreference;b6=AtmoSpeedLimit;aw=[[rgb(]]..d(F+0.5)..","..d(H+0.5)..","..d(G+0.5)..[[)]]ax=[[rgb(]]..d(F*0.9+0.5)..","..d(H*0.9+0.5)..","..d(G*0.9+0.5)..[[)]]elseif not useTheseSettings then a0="No Saved Variables Found - Exit HUD to save settings"end else a0="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<B then LastMaxBrakeInAtmo=0 end;LastStartTime=B;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a0="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ag=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=at end;VectorStatus="Proceeding to Waypoint"end;local function lL()local function lM(lN,lO)if lN>lO then lO=lN end;local lP,lQ=0,0;if ContainerOptimization>0 then lP=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lQ=FuelTankOptimization*0.05 end;lO=lO*(1-(lP+lQ))return lO end;local lR=core.getElementNameById;local lS=fuelX~=0 and fuelY~=0;for cJ in pairs(ar)do local type=core.getElementTypeById(ar[cJ])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(ar[cJ])),'^.*vertical.*$')then bv=true end end;if n(type,'^.*Space Engine$')then bk=true;if n(tostring(core.getElementTagsById(ar[cJ])),'^.*vertical.*$')then local lT=core.getElementRotationById(ar[cJ])if lT[4]<0 then if y(-lT[4],0.1)==0.5 then bi=true end else if y(lT[4],0.1)==0.5 then bj=true end end end end;if type=="Landing Gear"then Q=true end;if type=="Dynamic Core Unit"then local lU=h(ar[cJ])if lU>10000 then D=128;E=110 elseif lU>1000 then D=64;E=55 elseif lU>150 then D=32;E=27 end end;aJ=aJ+h(ar[cJ])if lS and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lU=h(ar[cJ])local lV=k(ar[cJ])local lN=0;local gP=o()if type=="Atmospheric Fuel Tank"then local lO=400;local lW=35.03;if lU>10000 then lO=51200;lW=5480 elseif lU>1300 then lO=6400;lW=988.67 elseif lU>150 then lO=1600;lW=182.67 end;lN=lV-lW;if fuelTankHandlingAtmo>0 then lO=lO+lO*fuelTankHandlingAtmo*0.2 end;lO=lM(lN,lO)aG[#aG+1]={ar[cJ],lR(ar[cJ]),lO,lW,lN,gP}end;if type=="Rocket Fuel Tank"then local lO=320;local lW=173.42;if lU>65000 then lO=40000;lW=25740 elseif lU>6000 then lO=5120;lW=4720 elseif lU>700 then lO=640;lW=886.72 end;lN=lV-lW;if fuelTankHandlingRocket>0 then lO=lO+lO*fuelTankHandlingRocket*0.1 end;lO=lM(lN,lO)aI[#aI+1]={ar[cJ],lR(ar[cJ]),lO,lW,lN,gP}end;if type=="Space Fuel Tank"then local lO=2400;local lW=182.67;if lU>10000 then lO=76800;lW=5480 elseif lU>1300 then lO=9600;lW=988.67 end;lN=lV-lW;if fuelTankHandlingSpace>0 then lO=lO+lO*fuelTankHandlingSpace*0.2 end;lO=lM(lN,lO)aH[#aH+1]={ar[cJ],lR(ar[cJ]),lO,lW,lN,gP}end end end;if not bv then VertTakeOff,VertTakeOffEngine=false,false end end;local function lX()if gyro~=nil then av=gyro.getState()==1 end;if not stablized then q:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then u(1)else u(0)end;if door and(ao or not ao and aq<10000)then for _,bO in pairs(door)do bO.toggle()end end;if switch then for _,bO in pairs(switch)do bO.toggle()end end;if forcefield and(ao or not ao==0 and aq<10000)then for _,bO in pairs(forcefield)do bO.toggle()end end;if antigrav then bw=antigrav.getState()==1;if bw and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if Q then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if am~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;GearExtended=true;if Q then a.control.extendLandingGears()end else BrakeIsOn=false end;q:setTargetGroundAltitude(b0)if ao and am~=-1 then aS=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ao end;local function lY(lZ,l_,m0,m1,cd,ce,m2,m3,m4,m5)local m6={enableName=lZ,disableName=l_,width=m0,height=m1,x=cd,y=ce,toggleVar=m2,toggleFunction=m3,drawCondition=m4,hovered=false}if m5 then table.insert(lF,m6)else table.insert(lE,m6)end;return m6 end;local function m7(m8)if not bB then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif m8=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif m8=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif m8=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bC=c5(m8)showHud=false else bC={}showHud=true end end;local function m9()bB=not bB;if bB then aD=lF;a0="Hold SHIFT to see Settings"bD=showHud else aD=lE;a0="Hold SHIFT to see Control Buttons"m7()showHud=bD end end;local function ma(bO)_G[bO]=not _G[bO]if _G[bO]then a0=bO.." set to true"else a0=bO.." set to false"end;if bO=="showHud"then bD=_G[bO]elseif bO=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif bO=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function mb()local mc=50;local md=340;local cd=500;local ce=aF/2-400;local me=0;for cJ,bO in pairs(c5("boolean"))do if type(_G[bO])=="boolean"then lY(bO,bO,md,mc,cd,ce,function()return _G[bO]end,function()ma(bO)end,function()return true end,true)ce=ce+mc+20;if me==9 then cd=cd+md+20;ce=aF/2-400;me=0 else me=me+1 end end end;lY("Control View","Control View",md,mc,10,aF/2-500,function()return true end,m9,function()return true end,true)lY("View Handling Settings",'Hide Handling Settings',md,mc,10,aF/2-(500-mc),function()return showHandlingVariables end,function()m7("handling")end,function()return true end,true)lY("View Hud Settings",'Hide Hud Settings',md,mc,10,aF/2-(500-mc*2),function()return showHudVariables end,function()m7("hud")end,function()return true end,true)lY("View Physics Settings",'Hide Physics Settings',md,mc,10,aF/2-(500-mc*3),function()return showPhysicsVariables end,function()m7("physics")end,function()return true end,true)end;local function mf()local function jD()local position=bt;local bM=planet.name..". "..#SavedLocations;if radar_1 then local ds,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ds~=nil and ds~=""then bM=bM.." "..radar_1.getConstructName(ds)end end;return aV.AddNewLocation(bM,position,false,true)end;local function mg()TurnBurn=not TurnBurn end;local function mh(mi)if mi==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;Y=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function mj()mh(1)end;local function mk()aV.UpdatePosition()end;local function jC()aV.ClearCurrentPosition()end;local function ml()local bM=AutopilotTargetName;if bM==nil then local ik=cp((bt-CustomTarget.position):len())bM=CustomTarget.name.." "..ik end;if bM==nil then bM="None"end;return"Engage Autopilot: "..bM end;local function mm()local bM=AutopilotTargetName;if bM==nil then bM=CustomTarget.name end;if bM==nil then bM="None"end;return"Disable Autopilot: "..bM end;local function mn()if safeMass>0 then a0="Safe Mass set to "..y(at,2).." kg"else a0="Intruder Detection reset\nSafe Mass set to "..y(at,2).." kg"ag=5;bu=0 end;safeMass=at end;local function mo()if l()==1 then Y=not Y;if Y then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()q:setTargetGroundAltitude(TargetHoverHeight)b_("folOn","F")else b_("folOff","F")BrakeIsOn=true;a_=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()q:setTargetGroundAltitude(LandingGearGroundHeight)end end else a0="Follow Mode only works with Remote controller"Y=false end end;local mc=50;local md=260;local mp=lY("Enable Brake Toggle","Disable Brake Toggle",md,mc,aE/2-md/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a0="Brakes in Toggle Mode"else a0="Brakes in Default Mode"end end)lY("Align Prograde","Disable Prograde",md,mc,aE/2-md/2-50-mp.width,aF/2-mc+380,function()return ProgradeIsOn end,mj)lY("Align Retrograde","Disable Retrograde",md,mc,aE/2-md/2+mp.width+50,aF/2-mc+380,function()return RetrogradeIsOn end,mh,function()return ap==0 end)local mq=lY(ml,mm,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,cv)lY("Save Position","Save Position",200,mq.height,mq.x+mq.width+30,mq.y,function()return false end,jD,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)lY("Update Position","Update Position",200,mq.height,mq.x+mq.width+30,mq.y,function()return false end,mk,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lY("Clear Position","Clear Position",200,mq.height,mq.x-200-30,mq.y,function()return true end,jC,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)mc=60;md=300;local cd=10;local ce=aF/2-500;lY("Show Help","Hide Help",md,mc,cd,ce,function()return showHelp end,function()showHelp=not showHelp end)ce=ce+mc+20;lY("View Settings","View Settings",md,mc,cd,ce,function()return true end,m9)local ce=aF/2-300;lY("Enable Turn and Burn","Disable Turn and Burn",md,mc,cd,ce,function()return TurnBurn end,mg)lY("Horizontal Takeoff Mode","Vertical Takeoff Mode",md,mc,cd+md+20,ce,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a0="Vertical Takeoff Mode"else a0="Horizontal Takeoff Mode"end end,function()return bv end)ce=ce+mc+20;lY("Show Orbit Display","Hide Orbit Display",md,mc,cd,ce,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a0="Orbit Display Enabled"else a0="Orbit Display Disabled"end end)lY("Engage Orbiting","Cancel Orbiting",md,mc,cd+md+20,ce,function()return IntoOrbit end,ct,function()return ap==0 and bJ end)ce=ce+mc+20;lY("Glide Re-Entry","Cancel Glide Re-Entry",md,mc,cd,ce,function()return Reentry end,function()aj=true;mj()end,function()return planet.hasAtmosphere and not ao end)lY("Parachute Re-Entry","Cancel Parachute Re-Entry",md,mc,cd+md+20,ce,function()return Reentry end,cy,function()return planet.hasAtmosphere and not ao end)ce=ce+mc+20;lY("Engage Follow Mode","Disable Follow Mode",md,mc,cd,ce,function()return Y end,mo,function()return l()==1 end)lY("Enable Repair Arrows","Disable Repair Arrows",md,mc,cd+md+20,ce,function()return aK end,function()aK=not aK;if aK then a0="Repair Arrows Enabled"else a0="Repair Arrows Diabled"end end,function()return l()==1 end)ce=ce+mc+20;if not ExternalAGG then lY("Enable AGG","Disable AGG",md,mc,cd,ce,function()return bw end,cz,function()return antigrav~=nil end)end;lY("Reset Intruder Alert","Set Safe Mass",md,mc,cd+md+20,ce,function()return safeMass>0 end,mn,function()return IntruderAlertSystem end)ce=ce+mc+20;lY(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,md*2,mc,cd,ce,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a0="IPH Mode: "..iphCondition end)ce=ce+mc+20;lY(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,md*2,mc,cd,ce,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a0="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()Logs=Logger()_logCompute=Logs.CreateLog("Computation","time")q:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lH()coroutine.yield()lL()coroutine.yield()aW=jJ()lX()mb()mf()aD=lE;coroutine.yield()aL=cK()aP=cL()aQ=aP(cK())aR=e7()aT=eC()aX=e_()aU=g9()aV=jq()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)b_("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ap>0 or ap==0 and aq<10000)then for _,bO in pairs(door)do bO.toggle()end end;if switch then for _,bO in pairs(switch)do bO.toggle()end end;if forcefield and(ap>0 or ap==0 and aq<10000)then for _,bO in pairs(forcefield)do bO.toggle()end end;safeMass=at;cF()if button then button.activate()end;if SetWaypointOnExit then aW.showWayPoint(planet,bt)end;b_("stop","SU")for _,cS in pairs(Logs.getLogs())do system.print(cS)end end;function script.onTick(mr)local ms=nil;if mr=="contact"then if not contactTimer then contactTimer=0 end;if B>contactTimer+10 then a0="Radar Contact"b_("rdrCon","RC")contactTimer=B end;unit.stopTimer("contact")elseif mr=="tenthSecond"then local function mt()local mu=system.createData;local mv=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mv(panelInterplanetary,"value")interplanetaryHeaderText=mu('{"label": "Target Planet", "value": "N/A", "unit":""}')t(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mv(panelInterplanetary,"value")widgetDistanceText=mu('{"label": "distance", "value": "N/A", "unit":""}')t(widgetDistanceText,widgetDistance)widgetTravelTime=mv(panelInterplanetary,"value")widgetTravelTimeText=mu('{"label": "Travel Time", "value": "N/A", "unit":""}')t(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mv(panelInterplanetary,"value")widgetMaxMassText=mu('{"label": "Maximum Mass", "value": "N/A", "unit":""}')t(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mv(panelInterplanetary,"value")widgetTargetOrbitText=mu('{"label": "Target Altitude", "value": "N/A", "unit":""}')t(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mv(panelInterplanetary,"value")widgetCurBrakeDistanceText=mu('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mv(panelInterplanetary,"value")widgetCurBrakeTimeText=mu('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mv(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mu('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mv(panelInterplanetary,"value")widgetMaxBrakeTimeText=mu('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mv(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mu('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)t(widgetCurBrakeTimeText,widgetCurBrakeTime)t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mw()r(panelInterplanetary)panelInterplanetary=nil end;local function mx()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bt):len()else AutopilotDistance=(CustomTarget.position-bt):len()end end;local eA=bq;local kW=unit.getThrottle()/100;if AtmoSpeedAssist then kW=I end;local my,mz=aR.computeDistanceAndTime(bq,MaxGameVelocity,at,a:maxForceForward()*kW,warmup,0)local a6,a7;if not TurnBurn then a6,a7=aW.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a6,a7=aW.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mA;if not TurnBurn and eA>0 then _,mA=aW.GetAutopilotBrakeDistanceAndTime(eA)else _,mA=aW.GetAutopilotTBBrakeDistanceAndTime(eA)end;local mB=0;local mC=0;if AutopilotCruising or not Autopilot and eA>5 then mC=aR.computeTravelTime(eA,0,AutopilotDistance)elseif a6+my<AutopilotDistance then mB=AutopilotDistance-(a6+my)mC=aR.computeTravelTime(8333.0556,0,mB)else local mD=(AutopilotDistance-a6)/my;my=AutopilotDistance-a6;mz=mz*mD end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mC elseif AutopilotBraking then return mA elseif AutopilotCruising then return mC+mA else return mz+a7+mC end end;local function mE(ja,mF)if ja==nil then ja=core.g()end;ja=y(ja,5)if mF~=nil and mF or(ms==nil or ms~=ja)then local eD=core.getVelocity()local eA=vec3(eD):len()local mG=f(unit.getData()).maxBrake;if mG~=nil and mG>0 and ao then mG=mG/p(eA/100,0.1,1)mG=mG/ap;if ap>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mG)/2 else LastMaxBrakeInAtmo=mG end end end;if mG~=nil and mG>0 then LastMaxBrake=mG end;ms=ja end end;mE(nil,true)if ap>0 and not WasInAtmo then if not by and AtmoSpeedAssist and(AltitudeHold or Reentry)then ci(1)M=false end end;if bx~=nil then if q:getTargetSpeed(axisCommandId.longitudinal)~=bx then cl(bx,TRUE)else bx=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mt()end;if AutopilotTargetName~=nil then local mH=CustomTarget~=nil;local mI=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()s(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mx()if mH and not Autopilot then ah=(bt-CustomTarget.position):len()else ah=(AutopilotTargetCoords-bt):len()end;if not TurnBurn then a6,a7=aW.GetAutopilotBrakeDistanceAndTime(bq)a8,a9=aW.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a6,a7=aW.GetAutopilotTBBrakeDistanceAndTime(bq)a8,a9=aW.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ik=cp(ah)s(widgetDistanceText,'{"label": "distance", "value": "'..ik..'"}')s(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cA(travelTime)..'", "unit":""}')ik=cp(a6)s(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ik..'"}')s(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cA(a7)..'", "unit":""}')ik=cp(a8)s(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ik..'"}')s(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cA(a9)..'", "unit":""}')s(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",mI/1000)..'", "unit":" Tons"}')ik=cp(AutopilotTargetOrbit)s(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..ik..'"}')if ap>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if ap==0 and WasInAtmo then if s(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if s(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if s(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then t(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if s(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if s(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mw()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aU.DrawTanks()elseif mr=="oneSecond"then local function mJ(gW)local mK=0;aB=""local mL=aJ;local mM=0;local mN=0;local mO=0;local gT=0;local gU=""local mP=core.getElementHitPointsById;for cJ in pairs(ar)do local lU=0;local mQ=0;mQ=h(ar[cJ])lU=mP(ar[cJ])mM=mM+lU;if lU<mQ then if lU==0 then mO=mO+1 else mN=mN+1 end;if aK and#ay==0 then position=vec3(core.getElementPositionById(ar[cJ]))local cd=position.x-D;local ce=position.y-D;local fu=position.z-D;table.insert(ay,core.spawnArrowSticker(cd,ce,fu+1,"down"))table.insert(ay,core.spawnArrowSticker(cd,ce,fu+1,"down"))core.rotateSticker(ay[2],0,0,90)table.insert(ay,core.spawnArrowSticker(cd+1,ce,fu,"north"))table.insert(ay,core.spawnArrowSticker(cd+1,ce,fu,"north"))core.rotateSticker(ay[4],90,90,0)table.insert(ay,core.spawnArrowSticker(cd-1,ce,fu,"south"))table.insert(ay,core.spawnArrowSticker(cd-1,ce,fu,"south"))core.rotateSticker(ay[6],90,-90,0)table.insert(ay,core.spawnArrowSticker(cd,ce-1,fu,"east"))table.insert(ay,core.spawnArrowSticker(cd,ce-1,fu,"east"))core.rotateSticker(ay[8],90,0,90)table.insert(ay,core.spawnArrowSticker(cd,ce+1,fu,"west"))table.insert(ay,core.spawnArrowSticker(cd,ce+1,fu,"west"))core.rotateSticker(ay[10],-90,0,90)table.insert(ay,ar[cJ])end elseif aK and#ay>0 and ay[11]==ar[cJ]then for gO in pairs(ay)do core.deleteSticker(ay[gO])end;ay={}end end;mK=d(mM/mL*100)if mK<100 then gW[#gW+1]=cc(0,0,"","pbright txt")gT=d(mK*2.55)gU=e("rgb(%d,%d,%d)",255-gT,gT,0)if mK<100 then gW[#gW+1]=cc("50%",1035,"Elemental Integrity: "..mK.."%","txtbig txtmid","fill:"..gU)if mO>0 then gW[#gW+1]=cc("50%",1055,"Disabled Modules: "..mO.." Damaged Modules: "..mN,"txtbig txtmid","fill:"..gU)elseif mN>0 then gW[#gW+1]=cc("50%",1055,"Damaged Modules: "..mN,"txtbig txtmid","fill:"..gU)end end end end;local function mR()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then r(WeaponPanelID)WeaponPanelID=nil end end end;local function mS()local gP=o()local i7=bq;local mT=gP-as;if i7>1.38889 then i7=i7/1000;local mU=i7*(gP-as)TotalDistanceTravelled=TotalDistanceTravelled+mU;ab=ab+mU end;ac=ac+mT;TotalFlightTime=TotalFlightTime+mT;as=gP end;local function mV()if safeMass>0 then if at>safeMass+50 then bu=d(at-safeMass)safeMass=-1 elseif at<safeMass then safeMass=at end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;if IntruderAlertSystem then mV()end;mS()aU.UpdatePipe()mR()local gW={}aU.ExtraData(gW)if ShowOdometer then gW=aU.DrawOdometer(gW,ab,TotalDistanceTravelled,ac)end;if ShouldCheckDamage then mJ(gW)end;ai=table.concat(gW,"")collectgarbage("collect")elseif mr=="fiveSecond"then if not UseSatNav then return end;an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local cZ=f(dbHud_1.getStringValue("SavedLocations"))if cZ~=nil then _G["SavedLocations"]=cZ;local fN=-1;local jG;for cJ,bO in pairs(SavedLocations)do if bO.name and bO.name=="SatNav Location"then fN=cJ;break end end;if fN~=-1 then jG=SavedLocations[fN]fN=-1;for cJ,bO in pairs(aL[0])do if bO.name and bO.name=="SatNav Location"then fN=cJ;break end end;if fN>-1 then aL[0][fN]=jG end;aV.UpdateAtlasLocationsList()a0=jG.name.." position updated"end end;for i=1,#bE do if bE[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bE[i].name)aV.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mr=="msgTick"then local gW={}aU.DisplayMessage(gW,"empty")a0="empty"unit.stopTimer("msgTick")ag=3 elseif mr=="animateTick"then aZ=true;aY=false;ae=0;af=0;unit.stopTimer("animateTick")elseif mr=="hudTick"then local function mW(gW)local mX=d(p(ah/(aE/4)*255,0,255))gW[#gW+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ae,af,d(F+0.5)+mX,d(H+0.5)-mX,d(G+0.5)-mX)end;local function mY()for _,bO in pairs(aD)do if bO.hovered then if not bO.drawCondition or bO.drawCondition()then bO.toggleFunction()end;bO.hovered=false end end end;local function mZ()local function m_(n0,n1,cd,ce,m0,m1)if n0>cd and n0<cd+m0 and n1>ce and n1<ce+m1 then return true else return false end end;local cd=ae+aE/2;local ce=af+aF/2;for _,bO in pairs(aD)do bO.hovered=m_(cd,ce,bO.x,bO.y,bO.width,bO.height)end end;local function n2(gW)local function n3(gW,n4,hover,cd,ce,et,n5,n6,n7,n8,n9)if type(n8)=="function"then n8=n8()end;if type(n9)=="function"then n9=n9()end;gW[#gW+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",cd,ce,et,n5)if n4 then gW[#gW+1]=e("%s'",n6)else gW[#gW+1]=n7 end;if hover then gW[#gW+1]=" style='stroke:white; stroke-width:2'"else gW[#gW+1]=" style='stroke:black; stroke-width:1'"end;gW[#gW+1]="></rect>"gW[#gW+1]=e("<text x='%f' y='%f' font-size='24' fill='",cd+et/2,ce+n5/2+5)if n4 then gW[#gW+1]="black"else gW[#gW+1]="white"end;gW[#gW+1]="' text-anchor='middle' font-family='Montserrat'>"if n4 then gW[#gW+1]=e("%s</text>",n8)else gW[#gW+1]=e("%s</text>",n9)end end;local na="rgb(50,50,50)'"local nb="rgb(210,200,200)"local nc=n3;for _,bO in pairs(aD)do local l_=bO.disableName;local lZ=bO.enableName;if type(l_)=="function"then l_=l_()end;if type(lZ)=="function"then lZ=lZ()end;if not bO.drawCondition or bO.drawCondition()then nc(gW,bO.toggleVar(),bO.hovered,bO.x,bO.y,bO.width,bO.height,nb,na,l_,lZ)end end end;local nd=y(ResolutionX/2,0)local ne=y(ResolutionY/2,0)local gW={}local nf=system.getTime()aU.HUDPrologue(gW)if showHud then local nf=system.getTime()aU.UpdateHud(gW)_logCompute.addValue(system.getTime()-nf)else if AlwaysVSpd then aU.DrawVerticalSpeed(gW,aq)end;aU.DisplayOrbitScreen(gW)aU.DrawWarnings(gW)end;if bB and bC~={}then aU.DrawSettings(gW)end;aU.DrawRadarInfo()aU.HUDEpilogue(gW)gW[#gW+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aE,aF)if a0~="empty"then aU.DisplayMessage(gW,a0)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aU.DrawDeadZone(gW)end end;if v()==0 then if l()==1 and Z then if not AltIsOn then mZ()n2(gW)end;if not aY and not aZ then local ng=table.concat(gW,"")gW={}gW[#gW+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aE,aF)gW[#gW+1]=ng;gW[#gW+1]="</body>"aY=true;gW[#gW+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(gW,"")system.setScreen(content)elseif aZ then local ng=table.concat(gW,"")gW={}gW[#gW+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aE,aF)gW[#gW+1]=ng;gW[#gW+1]="</body>"end;if not aY then gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nd,ne,ae,af)end else mY()end else if not Z and l()==0 then mY()if ah>DeadZone then if DisplayDeadZone then mW(gW)end end elseif not AltIsOn or AltIsOn and Z then mZ()n2(gW)end;gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nd,ne,ae,af)end;gW[#gW+1]=[[</svg></body>]]content=table.concat(gW,"")elseif mr=="apTick"then aW.APTick()elseif mr=="radarTick"then aX.UpdateRadar()end end;function script.onFlush()local function nh(ni,l2)local nj=vec3()local nk=vec3()if ni==axisCommandId.longitudinal then nj=vec3(core.getConstructOrientationForward())nk=bn elseif ni==axisCommandId.vertical then nj=vec3(core.getConstructOrientationUp())nk=bm elseif ni==axisCommandId.lateral then nj=vec3(core.getConstructOrientationRight())nk=bo else return vec3()end;local nl=vec3(core.getWorldGravity())local nm=nl:dot(nk)local nn=vec3(core.getWorldAirFrictionAcceleration())local no=nn:dot(nk)local np=vec3(core.getVelocity())local nq=np:dot(nj)local nr=l2*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nr-nq)local ns=targetSpeedPID2:get()local nt=(ns-no-nm)*nk;return nt end;local function nu(ni,l2)local nj=vec3()local nk=vec3()if ni==axisCommandId.longitudinal then nj=vec3(core.getConstructOrientationForward())nk=bn elseif ni==axisCommandId.vertical then nj=vec3(core.getConstructOrientationUp())nk=bm elseif ni==axisCommandId.lateral then nj=vec3(core.getConstructOrientationRight())nk=bo else return vec3()end;local nl=vec3(core.getWorldGravity())local nm=nl:dot(nk)local nn=vec3(core.getWorldAirFrictionAcceleration())local no=nn:dot(nk)local np=vec3(core.getVelocity())local nq=np:dot(nj)local nr=l2*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nr-nq)local ns=targetSpeedPID:get()local nt=(ns-no-nm)*nk;return nt end;local function nw(nx,gZ,jv)local ny=nx:cross(jv):normalize_inplace()local hL=math.acos(p(ny:dot(-gZ),-1,1))*constants.rad2deg;if ny:cross(-gZ):dot(jv)<0 then hL=-hL end;return hL end;if antigrav and not ExternalAGG then if not bw and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;by=q:getAxisCommandType(0)==axisCommandType.byThrottle;if by and M then ci(0)M=false elseif not by and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local nz=p(R+S+system.getControlDeviceForwardInput(),-1,1)local nA=p(U+X+system.getControlDeviceYawInput(),-1,1)local nB=p(V+T-system.getControlDeviceLeftRightInput(),-1,1)local nC=W;br=vec3(core.getWorldVertical())if br==nil or br:len()==0 then br=(planet.center-bt):normalize()end;bm=vec3(core.getConstructWorldOrientationUp())bn=vec3(core.getConstructWorldOrientationForward())bo=vec3(core.getConstructWorldOrientationRight())bp=vec3(core.getWorldVelocity())bt=vec3(core.getConstructWorldPos())at=core.getConstructMass()bq=vec3(bp):len()bs=-br:dot(bp)bA=getRoll(br,bn,bo)local nD=bA/180*math.pi;local nE=math.cos(nD)local nF=math.sin(nD)bz=nw(br,bn,bo*nE+bm*nF)local nG=bp:normalize()local nH=c(bA)local nI=utils.sign(bA)local nJ=vec3(core.getWorldAngularVelocity())local nK=nz*pitchSpeedFactor*bo+nA*rollSpeedFactor*bn+nB*yawSpeedFactor*bm;if a_==true and br:len()>0.01 then local nL=c(b3-bA)if((ProgradeIsOn or Reentry or BrakeLanding or aj or AltitudeHold or IntoOrbit)and nL>0 or ap>0.0 and nL<autoRollRollThreshold and autoRollPreference)and nA==0 and c(bz)<85 then local nM=b3;local nN=autoRollFactor;if ap==0 then nN=nN/4;b3=0;nM=0 end;if rollPID==nil then rollPID=pid.new(nN*0.01,0,nN*0.1)end;rollPID:inject(nM-bA)local nO=rollPID:get()nK=nK+nO*bn end end;if br:len()>0.01 and ap>0.0 then local nP=20.0;if turnAssist==true and nH>nP and nz==0 and nB==0 then local nQ=turnAssistFactor*0.1;local nR=turnAssistFactor*0.025;local nS=(nH-nP)/(180-nP)*180;local nT=0;if nS<90 then nT=nS/90 elseif nS<180 then nT=(180-nS)/90 end;nT=nT*nT;local nU=-nI*nR*(1.0-nT)local nV=nQ*nT;nK=nK+nV*bo+nU*bm end end;local nW=1;local nX=0;local nY=1;if system.getMouseWheel()>0 then if AltIsOn then if ap>0 or Reentry then b6=p(b6+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=p(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif au then local nZ=I;I=y(p(I+speedChangeLarge/100,-1,1),2)if I>=0 and nZ<0 then I=0;au=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ap>0 or Reentry then b6=p(b6-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=p(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif au then local nZ=I;I=y(p(I-speedChangeLarge/100,-1,1),2)if I<=0 and nZ>0 then I=0;au=false end end else au=true end;J=0;if ao and AtmoSpeedAssist and by then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b6/3.6-bp:dot(bn))local n_=throttlePID:get()L=p(n_,-1,1)if L<I and ap>0.005 then K=true;q:setThrottleCommand(axisCommandId.longitudinal,p(L,0.01,1))else K=false;q:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bp:len()-b6/3.6)local o0=p(brakePID:get(),0,1)if ap>0 and bs<-80 or ap>0.005 then J=o0 end;if J>0 then if K and L==0.01 then q:setThrottleCommand(axisCommandId.longitudinal,0)end else L=p(L,0.01,1)end;local o1=''local o2=vec3()local o3=nh(axisCommandId.vertical,ad*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",o3,nX)local o4='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then o4=o4 ..ExtraLongitudeTags end;local o5=q:getAxisCommandType(axisCommandId.longitudinal)local o6=q:composeAxisAccelerationFromThrottle(o4,axisCommandId.longitudinal)local o7=nu(axisCommandId.lateral,LeftAmount*1000)o1=o1 ..' , '.."lateral airfoil , lateral ground "o2=o2+o7;if o2:len()>constants.epsilon then a:setEngineForceCommand(o1,o2,nX,'','','',nY)end;a:setEngineForceCommand(o4,o6,nW)local o8='thrust analog vertical fueled 'local o9='thrust analog lateral fueled 'if ExtraLateralTags~="none"then o9=o9 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then o8=o8 ..ExtraVerticalTags end;if ad~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(o8,o3,nW)else a:setEngineForceCommand(o8,vec3(),nW)end;if LeftAmount~=0 then a:setEngineForceCommand(o9,o7,nW)else a:setEngineForceCommand(o9,vec3(),nW)end;if nC==0 then nC=J end;local oa=-nC*(brakeSpeedFactor*bp+brakeFlatFactor*nG)a:setEngineForceCommand('brake',oa)else if AtmoSpeedAssist then q:setThrottleCommand(axisCommandId.longitudinal,I)end;local l2=unit.getAxisCommandValue(0)if not by then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bp:len()-l2/3.6)local o0=p(brakePID:get(),0,1)nC=p(nC+o0,0,1)end;local oa=-nC*(brakeSpeedFactor*bp+brakeFlatFactor*nG)a:setEngineForceCommand('brake',oa)local o1=''local o2=vec3()local ob=false;local o4='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then o4=o4 ..ExtraLongitudeTags end;local o5=q:getAxisCommandType(axisCommandId.longitudinal)if o5==axisCommandType.byThrottle then local o6=q:composeAxisAccelerationFromThrottle(o4,axisCommandId.longitudinal)a:setEngineForceCommand(o4,o6,nW)elseif o5==axisCommandType.byTargetSpeed then local o6=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)o1=o1 ..' , '..o4;o2=o2+o6;if q:getTargetSpeed(axisCommandId.longitudinal)==0 or q:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-q:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ob=true end end;local o9='thrust analog lateral 'if ExtraLateralTags~="none"then o9=o9 ..ExtraLateralTags end;local oc=q:getAxisCommandType(axisCommandId.lateral)if oc==axisCommandType.byThrottle then local od=q:composeAxisAccelerationFromThrottle(o9,axisCommandId.lateral)a:setEngineForceCommand(o9,od,nW)elseif oc==axisCommandType.byTargetSpeed then local o7=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)o1=o1 ..' , '..o9;o2=o2+o7 end;local o8='thrust analog vertical 'if ExtraVerticalTags~="none"then o8=o8 ..ExtraVerticalTags end;local oe=q:getAxisCommandType(axisCommandId.vertical)if oe==axisCommandType.byThrottle then local o3=q:composeAxisAccelerationFromThrottle(o8,axisCommandId.vertical)if ad~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(o8,o3,nW,'airfoil','ground','',nY)else a:setEngineForceCommand(o8,vec3(),nW)a:setEngineForceCommand('airfoil vertical',o3,nW,'airfoil','','',nY)a:setEngineForceCommand('ground vertical',o3,nW,'ground','','',nY)end elseif oe==axisCommandType.byTargetSpeed then if ad<0 then a:setEngineForceCommand('hover',vec3(),nW)end;local of=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)o1=o1 ..' , '..o8;o2=o2+of end;if o2:len()>constants.epsilon then if W~=0 or ob or c(nG:dot(bn))<0.8 then o1=o1 ..', brake'end;a:setEngineForceCommand(o1,o2,nX,'','','',nY)end end;local og=torqueFactor*(nK-nJ)local oh=vec3(core.getWorldAirFrictionAngularAcceleration())og=og-oh;a:setEngineTorqueCommand('torque',og,nW,'airfoil','','',nY)a:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local eA=vec3(core.getVelocity()):len()local oi=0.15;if not by then local oj=q:getTargetSpeed(axisCommandId.longitudinal)if eA*3.6>oj*(1-oi)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eA*3.6<oj*(1-oi)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kW=unit.getThrottle()if AtmoSpeedAssist then kW=I*100 end;local l2=kW/100;if j==0 then l2=l2*MaxGameVelocity;if eA>=l2*(1-oi)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eA<l2*(1-oi)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local ld=d(b6)l2=l2*ld/3.6;if eA>=l2*(1-oi)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eA<l2*(1-oi)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local g7=coroutine.status(beginSetup)if g7=="suspended"then local cj,g8=coroutine.resume(beginSetup)if g8 then system.print("ERROR STARTUP: "..g8)end elseif g7=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aY and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(ok)local mult=1;local function ol(om)local function on(oo,om)local op={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-50,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oq=oo;for _,bO in ipairs(op)do if om and oq>bO then oo=bO elseif oo<bO and not om then oo=bO;break end end;return oo end;if om then mult=-1 end;if not ExternalAGG and bw then if Z and om then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+mult*a2;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+mult*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if Z then bf=on(bf,om)else bf=bf+mult*a1 end;if bf<planet.noAtmosphericDensityAltitude then bf=planet.noAtmosphericDensityAltitude end else if Z and ao then HoldAltitude=on(HoldAltitude,om)else HoldAltitude=HoldAltitude+mult*a1 end end else q:updateTargetGroundAltitudeFromActionStart(mult*1.0)end end;local function os(om)if om then mult=-1 end;if not Z then if AtmoSpeedAssist and not AltIsOn then I=p(I+mult*speedChangeLarge/100,-1,1)else q:updateCommandFromActionStart(axisCommandId.longitudinal,mult*speedChangeLarge)end else if om then mult=1 else mult=nil end;aV.adjustAutopilotTargetIndex(mult)end end;local function ot(ou)if not ao then a0="Flight Assist in Atmo only"return end;local cQ=type(ou)if bH==nil then if cQ=="table"then if Autopilot or VectorToTarget then cv()end;b_("180On","BR")elseif ou==1 then b_("bnkLft","BR")else b_("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cu()if cQ~="table"then ou=ou+1 end end;bH=ou else b_("180Off","BR")bH=nil end end;if ok=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;ci(0)if vBooster or hover then if ao and am==-1 then b_("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;a_=true;GearExtended=false else if Q then b_("grOut","LG",1)a.control.extendLandingGears()end;q:setTargetGroundAltitude(LandingGearGroundHeight)if ao then BrakeIsOn=true end end end;if Q and not BrakeLanding and not(vBooster or hover)then b_("grOut","LG",1)a.control.extendLandingGears()end else if Q then b_("grIn","LG",1)a.control.retractLandingGears()end;q:setTargetGroundAltitude(TargetHoverHeight)end elseif ok=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif ok=="forward"then R=R-1 elseif ok=="backward"then if AltIsOn then ot(-bp*5000)else R=R+1 end elseif ok=="left"then if AltIsOn then ot(1)else U=U-1 end elseif ok=="right"then if AltIsOn then ot(3)else U=U+1 end elseif ok=="yawright"then V=V-1 elseif ok=="yawleft"then V=V+1 elseif ok=="straferight"then q:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif ok=="strafeleft"then q:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif ok=="up"then ad=ad+1;q:deactivateGroundEngineAltitudeStabilization()q:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif ok=="down"then ad=ad-1;q:deactivateGroundEngineAltitudeStabilization()q:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif ok=="groundaltitudeup"then ol()elseif ok=="groundaltitudedown"then ol(true)elseif ok=="option1"then aV.adjustAutopilotTargetIndex()toggleView=false elseif ok=="option2"then aV.adjustAutopilotTargetIndex(1)toggleView=false elseif ok=="option3"then local function ov()aC=not aC;if not aC then b_("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else b_("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then r(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then r(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then r(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ov()toggleView=false elseif ok=="option4"then bH=nil;cv()toggleView=false elseif ok=="option5"then function ToggleLockPitch()if LockPitch==nil then b_("lkPOn","LP")if not Z then LockPitch=bz else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else b_("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()toggleView=false elseif ok=="option6"then cu()toggleView=false elseif ok=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a0="Collision System Enabled"else a0="Collision System Secured"end;toggleView=false elseif ok=="option8"then stablized=not stablized;if not stablized then a0="DeCoupled Mode - Ground Stabilization off"q:deactivateGroundEngineAltitudeStabilization()b_("gsOff","GS")else a0="Coupled Mode - Ground Stabilization on"q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)b_("gsOn","GS")end;toggleView=false elseif ok=="option9"then if gyro~=nil then gyro.toggle()av=gyro.getState()==1;if av then b_("gyOn","GA")else b_("gyOff","GA")end end;toggleView=false elseif ok=="lshift"then if AltIsOn then Z=true end;if v()==1 then Z=true;PrevViewLock=v()u(1)elseif l()==1 and ShiftShowsRemoteButtons then Z=true;aZ=false;aY=false end elseif ok=="brake"then if BrakeToggleStatus then cx()elseif not BrakeIsOn then cx()else BrakeIsOn=true end elseif ok=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then u(1)end elseif ok=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a5 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a5=false end elseif ok=="stopengines"then local function ow()if B-C<1.5 then b_("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bH=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Y=false;N=false;aj=false;ak=false;P=false;a_=autoRollPreference;VectorToTarget=false;TurnBurn=false;av=false;LockPitch=nil;IntoOrbit=false end end;ow()C=B;if q:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if I~=0 then q:resetCommand(axisCommandId.longitudinal)ci(0)else ci(100)end else if q:getTargetSpeed(axisCommandId.longitudinal)~=0 then q:resetCommand(axisCommandId.longitudinal)else if ao then cl(AtmoSpeedLimit)else cl(MaxGameVelocity*3.6)end end end elseif ok=="speedup"then os()elseif ok=="speeddown"then os(true)elseif ok=="antigravity"and not ExternalAGG then if antigrav~=nil then cz()end end end;function script.onActionStop(ok)local function ox()if not ExternalAGG and bw then a4=a2 end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=a1 end end;if ok=="forward"then R=0 elseif ok=="backward"then R=0 elseif ok=="left"then if bH then if bH==2 then bH=-2 else bH=-1 end end;U=0 elseif ok=="right"then if bH then if bH==4 then bH=-2 else bH=-1 end end;U=0 elseif ok=="yawright"then V=0 elseif ok=="yawleft"then V=0 elseif ok=="straferight"then q:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif ok=="strafeleft"then q:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif ok=="up"then ad=0;q:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif ok=="down"then ad=0;q:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif ok=="groundaltitudeup"then ox()toggleView=false elseif ok=="groundaltitudedown"then ox()toggleView=false elseif ok=="lshift"then if v()==1 then ae=0;af=0;u(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then aZ=false;aY=false end;Z=false elseif ok=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cx()else BrakeIsOn=false end end elseif ok=="lalt"then if l()==0 and freeLookToggle then if toggleView then if v()==1 then u(0)else u(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then u(0)end;AltIsOn=false end end;function script.onActionLoop(ok)local function oy(om)local mult=1;if om then mult=-1 end;if not ExternalAGG and bw then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+mult*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a4=p(a4*1.05,a2,500)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+mult*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bf=bf+mult*a3;if bf<planet.noAtmosphericDensityAltitude then bf=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+mult*a3 end;a3=p(a3*1.05,a1,500)else q:updateTargetGroundAltitudeFromActionLoop(mult*1.0)end end;local function oz(om)if om then mult=-1 end;if not Z then if AtmoSpeedAssist and not AltIsOn then I=p(I+mult*speedChangeSmall/100,-1,1)else q:updateCommandFromActionLoop(axisCommandId.longitudinal,mult*speedChangeSmall)end end end;if ok=="groundaltitudeup"then if not Z then oy()end elseif ok=="groundaltitudedown"then if not Z then oy(true)end elseif ok=="speedup"then oz()elseif ok=="speeddown"then oz(true)end end;function script.onInputText(cf)local function oA()for cJ,bO in pairs(c5())do dbHud_1.setStringValue(bO,g(nil))end;for cJ,bO in pairs(b)do if bO~="SavedLocations"then dbHud_1.setStringValue(bO,g(nil))end end;a0="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ag=5 end;local function oB(oC,eE,hH)local function oD(eE)local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cX='::pos{'..z..','..z..','..z..','..z..','..z..'}'local d9,da,dh,di,dj=n(eE,cX)if d9=="0"and da=="0"then return vec3(x(dh),x(di),x(dj))end;di=math.rad(di)dh=math.rad(dh)local planet=aL[x(d9)][x(da)]local e4=math.cos(dh)local oE=vec3(e4*math.cos(di),e4*math.sin(di),math.sin(dh))return planet.center+(planet.radius+dj)*oE end;local position=oD(eE)return aV.AddNewLocation(oC,position,hH)end;local i;local oF,oG=nil,nil;local oH="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cf," ")oF=cf;if i~=nil then oF=string.sub(cf,0,i-1)oG=string.sub(cf,i+1)end;if oF=="/help"or oF=="/commands"then for jg in string.gmatch(oH,"([^\n]+)")do system.print(jg)end;return elseif oF=="/setname"then if oG==nil or oG==""then a0="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aV.UpdatePosition(oG)else a0="Select a saved target to rename first"end elseif oF=="/addlocation"or string.find(cf,"::pos")~=nil then local hH=false;local oC="0-Temp"if oG==nil or oG==""then oG=oF;hH=true end;i=string.find(oG,"::")if not hH then oC=string.sub(oG,1,i-2)end;local eE=string.sub(oG,i)oB(oC,eE,hH)elseif oF=="/agg"then if oG==nil or oG==""then a0="Usage: /agg targetheight"return end;oG=x(oG)if oG<1000 then oG=1000 end;AntigravTargetAltitude=oG;a0="AGG Target Height set to "..oG elseif oF=="/G"then if oG==nil or oG==""then a0="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if oG=="dump"then for cJ,bO in pairs(c5())do if type(_G[bO])=="boolean"then if _G[bO]==true then system.print(bO.." true")else system.print(bO.." false")end elseif _G[bO]==nil then system.print(bO.." nil")else system.print(bO.." ".._G[bO])end end;return end;i=string.find(oG," ")local oI=string.sub(oG,0,i-1)local oJ=string.sub(oG,i+1)for cJ,bO in pairs(c5())do if bO==oI then a0="Variable "..oI.." changed to "..oJ;local oK=type(_G[bO])if oK=="number"then oJ=x(oJ)elseif oK=="boolean"then if string.lower(oJ)=="true"then oJ=true else oJ=false end end;_G[bO]=oJ;return end end;a0="No such global variable: "..oI elseif oF=="/copydatabank"then if dbHud_2 then cF(true)else a0="Spare Databank required to copy databank"end elseif oF=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aW.showWayPoint(aa,AutopilotTargetCoords,true))a0="::pos waypoint shown in lua chat"else a0="No target selected in IPH"end end end;function script.onEnter(ds)if radar_1 and not ao and not bF then unit.setTimer("contact",0.1)end end;function script.onLeave(ds)if radar_1 and CollisionSystem then if#bI>650 then ds=tostring(ds)bI[ds]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
