name: ArchHud - Archaegeo v1.357 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        turnAssist = true --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        IntruderAlertSystem = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        showHelp = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        LockPitchTarget = 0 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 5000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        turnAssistFactor = 2 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.357;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;safeMass=0;iphCondition="All"stablized=true;local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass","iphCondition","stablized"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=utils.round;local p=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local z=math.sqrt;local A=tonumber;local core=core;local function B(num,C)local D=10^(C or 0)return d(num*D+0.5)/D end;local E=p()local F=p()local G=16;local H=13;local I=SafeR;local J=SafeB;local K=SafeG;local L=0;local M=0;local N=false;local O=0;local P=false;local Q=false;local R=55;local S=false;local T=false;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=0;local a1=false;local a2=false;local a3="empty"local a4=5;local a5=5;local a6=a4;local a7=a5;local a8=false;local a9,aa=0;local ab,ac=0;local ad=nil;local ae=0;local af=0;local ag=0;local ah=0;local ai=0;local aj=3;local ak=0;local al=""local am=0;local an=false;local ao=false;local ap=false;local aq=-1;local ar=""local as=j()>0;local at=j()local au=core.getAltitude()local av=core.getElementIdList()local aw=p()local ax=core.getConstructMass()local ay=false;local az=nil;local aA=false;local aB=[[rgb(]]..d(I+0.5)..","..d(K+0.5)..","..d(J+0.5)..[[)]]local aC=[[rgb(]]..d(I*0.9+0.5)..","..d(K*0.9+0.5)..","..d(J*0.9+0.5)..[[)]]local aD={}local aE=0;local aF=0;local aG=""local aH=true;local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL={}local aM={}local aN={}local aO=0;local aP=false;local aQ={}local aR={}local aS=d(1/apTickRate)*2;local aT={}local aU={}local aV={}local aW={}local aX=false;local aY=0;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=false;local bb=false;local bc=autoRollPreference;local bd=LandingGearGroundHeight;local be=false;local bf=p()local bg=0;local bh=0;local bi=0;local bj=AtmoSpeedLimit;local bk=0;local bl=nil;local bm=0;local bn=0;local bo=false;local bp=false;local bq={VectorToTarget=false}local br=false;local bs=0;local bt=nil;local bu=false;local bv=false;local bw=false;local bx=false;local by=0;local bz=vec3(core.getConstructWorldOrientationUp())local bA=vec3(core.getConstructWorldOrientationForward())local bB=vec3(core.getConstructWorldOrientationRight())local bC=vec3(core.getWorldVelocity())local bD=vec3(bC):len()local bE=vec3(core.getWorldVertical())local bF=-bE:dot(bC)local bG=vec3(core.getConstructWorldPos())local bH=0;local bI=false;local bJ=false;local bK=nil;local bL=true;local bM=0;local bN=0;local bO=false;local bP={}local bQ=showHud;local bR={}local bS=false;local bT=""local bU=""local bV=nil;local bW={}local bX=unit.getClosestPlanetInfluence()>0;local bY=false;local bZ=nil;timeCount=0;totalTime=0;local function b_(c0,c1,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c0 .."|"..c1 .."|"..soundVolume)end end;local function c2(c3,c4)for i=1,#c4 do c3[#c3+1]=c4[i]end;return c3 end;local function c5(c6)local c7={}local c8={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd","BarFuelDisplay","showHelp","Cockpit","voices","alerts","CollisionSystem"}local c9={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","LockPitchTarget","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local ca={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local cb={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c6 then c2(c7,c8)c2(c7,c9)c2(c7,ca)c2(c7,cb)return c7 elseif c6=="boolean"then return c8 elseif c6=="handling"then return c9 elseif c6=="hud"then return ca elseif c6=="physics"then return cb end end;local function cc(x,y,cd,ce,cf)if ce==nil then ce=""end;if cf==nil then cf=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],ce,x,y,cf,cd)end;local function cg(ch,ci)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not ci then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,ch)L=q(B(ch*100,0)/100,-1,1)end;local function cj(ch,ci)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not ci then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,ch)bK=ch end;local function ck(cl,cm)if cl==0 then return c(cm)<1e-09 end;if cm==0 then return c(cl)<1e-09 end;return c(cl-cm)<math.max(c(cl),c(cm))*epsilon end;local function cn(ak,co)local cp=ak>100000;if co==nil then co=1 end;if cp then return B(ak/1000/200,co).."SU"elseif ak<1000 then return B(ak,co).."M"else return B(ak/1000,co).."KM"end end;local function cq()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;bc=true;ag=0;if as and aq==-1 then BrakeLanding=false;AltitudeHold=true;ag=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cj(d(bj))end else bu=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cr()bu=false;bm=nil;bn=nil;by=0;if at==0 then if IntoOrbit then b_("orOff","AP")IntoOrbit=false;bo=false;bt=nil;bc=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bq.VectorToTarget=false;bq.AutopilotAlign=false;br=false elseif bX then b_("orOn","AP")IntoOrbit=true;bc=true;if bt==nil then bt=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a3="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bo=false;bt=nil;bc=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bq.VectorToTarget=false;bq.AutopilotAlign=false;br=false end end;local function cs()if E-bh<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50;b_("11","EP")else if bX then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bs=HoldAltitude;br=true;if not IntoOrbit then cr()end;bo=true end end;bh=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bh=E end;if bX and at==0 then bs=au;br=true;bo=true;cr()if IntoOrbit then bh=E else bh=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a1=false;bc=true;LockPitch=nil;bu=false;if aq==-1 then b_("altOn","AH")AutoTakeoff=false;if bh>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if VertTakeOff then cq()end else b_("lfs","LS")AutoTakeoff=true;if bh>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bI then cq()end end;if ao then HoldAltitude=100000 end else b_("altOff","AH")if IntoOrbit then cr()end;if VertTakeOff then cq()end;bc=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bh=0 end end;local function ct()local function cu(SpaceTarget)bY=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cs()end end;VectorStatus="Proceeding to Waypoint"end;if E-bi<1.5 and at>0 then if not bx then a3="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;b_("orH","OH")end;bi=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else bi=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ao and not IntoOrbit then b8.UpdateAutopilotTarget()b9.showWayPoint(ad,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then b_("apSpc","AP")if at~=0 then ao=true;cs()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then if not VectorToTarget then b_("vtt","AP")cu(SpaceTarget)end else b_("apOn","AP")if not(ad.name==planet.name and bX)then bu=false;Autopilot=true elseif not as then if IntoOrbit then cr()end;bs=planet.noAtmosphericDensityAltitude+LowOrbitHeight;br=true;bq.AutopilotAlign=true;bq.VectorToTarget=true;bo=false;if not IntoOrbit then cr()end end end else b_("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then ao=true;cs()else Autopilot=true end end elseif at==0 then if CustomTarget==nil and(ad.name==planet.name and bX)and not IntoOrbit then WaypointSet=false;bu=false;bo=false;cr()else b_("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a1=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;Q=false;LockPitch=nil;WaypointSet=false end else b_("apP","AP")ao=true;cs()end else b_("apOff","AP")ao=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;Q=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then cr()end end end;local function cv(cw)local cx=-1;local cy;cx=b8.findAtlasIndex(SavedLocations)if cx~=-1 then local cz;if cw~=nil then cy={position=SavedLocations[cx].position,name=cw,atmosphere=SavedLocations[cx].atmosphere,planetname=SavedLocations[cx].planetname,gravity=SavedLocations[cx].gravity}else cy={position=bG,name=SavedLocations[cx].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cx]=cy;cx=-1;cx=b8.findAtlasIndex(aZ[0])if cx>-1 then aZ[0][cx]=cy end;b8.UpdateAtlasLocationsList()a3=CustomTarget.name.." position updated"b8.UpdateAutopilotTarget()else a3="Name Not Found"end end;local function cA()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bc=autoRollPreference end;if BrakeIsOn then b_("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bV=nil;if not bJ then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cq()end;if IntoOrbit then cr()end;bc=autoRollPreference;an=false;ap=false;ag=0 else b_("bkOff","B",1)end end;local function cB(cC,cD,cE)local function cF(cC,cG)cC=vec3(cC)cG=vec3(cG):normalize()local cH=cC*cG;return cH.x+cH.y+cH.z end;local cI=0.001;local cJ=1;if not as or not be or aq~=-1 or bD<R then if cE==nil then cE=DampingMultiplier end;if cD==nil then cD=cI end;cC=vec3(cC):normalize()local cK=vec3()-cC;local cL=-cF(cK,core.getConstructWorldOrientationRight())*cJ;local cM=-cF(cK,core.getConstructWorldOrientationUp())*cJ;if aE==0 then aE=cL/2 end;if aF==0 then aF=cM/2 end;if c(cL)<0.1 then W=W-cL*2 else W=W-(cL+(cL-aE)*cE)end;if c(cM)<0.1 then V=V+cM*2 else V=V+cM+(cM-aF)*cE end;aE=cL;aF=cM;if c(cL)<cD and c(cM)<cD then return true end;return false elseif be and aq==-1 then cC=bC;if cE==nil then cE=DampingMultiplier end;if cD==nil then cD=cI end;cC=vec3(cC):normalize()local cK=bA-cC;local cL=-cF(cK,core.getConstructWorldOrientationRight())*cJ;local cM=-cF(cK,core.getConstructWorldOrientationUp())*cJ;if aE==0 then aE=cL/2 end;if aF==0 then aF=cM/2 end;if c(cL)<0.1 then W=W-cL*5 else W=W-(cL+(cL-aE)*cE)end;if c(cM)<0.1 then V=V+cM*5 else V=V+cM+(cM-aF)*cE end;aE=cL;aF=cM;if c(cL)<cD and c(cM)<cD then return true end;return false end end;local function cN()if Reentry then a3="Re-Entry cancelled"b_("reOff","RE")Reentry=false;bc=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a3="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"aj=5 elseif not S then Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bc=true;BrakeIsOn=false;a3="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bj;b_("par","RE")else Reentry=true;AltitudeHold=true;bc=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-planet.spaceEngineMinAltitude/10 end;local cd=cn(HoldAltitude)a3="Beginning Re-entry.  Target speed: "..bj.." Target Altitude: "..cd;b_("glide","RE")cj(d(bj))end;AutoTakeoff=false end;local function cO()if antigrav and not ExternalAGG then if bJ then b_("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;b_("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cP(cQ)local cR=0;local cS=0;local cT=0;if cQ<60 then cQ=d(cQ)elseif cQ<3600 then cR=d(cQ/60)cQ=d(cQ%60)elseif cQ<86400 then cS=d(cQ/3600)cR=d(cQ%3600/60)else cT=d(cQ/86400)cS=d(cQ%86400/3600)end;if cT>0 then return cT.."d "..cS.."h "elseif cS>0 then return cS.."h "..cR.."m "elseif cR>0 then return cR.."m "..cQ.."s"elseif cQ>0 then return cQ.."s"else return"0s"end end;local function cU(cV)local function cW(cX)for cY,cZ in pairs(cX)do dbHud_1.setStringValue(cZ,g(_G[cZ]))if cV and dbHud_2 then dbHud_2.setStringValue(cZ,g(_G[cZ]))end end end;if dbHud_1 then cW(b)cW(c5())system.print("Saved Variables to Datacore")if cV and dbHud_2 then a3="Databank copied.  Remove copy when ready."end end end;local function c_()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function d0()local function d1(d2)return type(d2)=='number'end;local function d3(d2)return type(A(d2))=='number'end;local function d4(d5)return type(d5)=='table'end;local function d6(d7)return type(d7)=='string'end;local function d8(cZ)return d4(cZ)and d1(cZ.x and cZ.y and cZ.z)end;local function d9(da)return d4(da)and d1(da.latitude and da.longitude and da.altitude and da.bodyId and da.systemId)end;local db=math.pi/180;local dc=180/math.pi;local epsilon=1e-10;local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..num..','..num..','..num..','..num..','..num..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function de(d2)local cH=string.gsub(string.reverse(e('%.4f',d2)),'^0*%.?','')return cH==''and'0'or string.reverse(cH)end;local function df(dg)if d8(dg)then return e('{x=%.3f,y=%.3f,z=%.3f}',dg.x,dg.y,dg.z)end;if d4(dg)and not getmetatable(dg)then local dh={}local di=next(dg)if type(di)=='nil'or di==1 then dh=dg else for cY,cZ in pairs(dg)do local ch=df(cZ)if type(cY)=='number'then table.insert(dh,e('[%s]=%s',cY,ch))else table.insert(dh,e('%s=%s',cY,ch))end end end;return e('{%s}',table.concat(dh,','))end;if d6(dg)then return e("'%s'",dg:gsub("'",[[\']]))end;return tostring(dg)end;local dj={}dj.__index=dj;dj.__tostring=function(dg,dk)local dl={}for cY in pairs(dg)do table.insert(dl,cY)end;table.sort(dl)local dh={}for _,cY in ipairs(dl)do local ch=df(dg[cY])if type(cY)=='number'then table.insert(dh,e('[%s]=%s',cY,ch))else table.insert(dh,e('%s=%s',cY,ch))end end;if dk then return e('%s%s',dk,table.concat(dh,',\n'..dk))end;return e('{%s}',table.concat(dh,','))end;dj.__eq=function(dm,dn)return dm.planetarySystemId==dn.planetarySystemId and dm.bodyId==dn.bodyId and ck(dm.radius,dn.radius)and ck(dm.center.x,dn.center.x)and ck(dm.center.y,dn.center.y)and ck(dm.center.z,dn.center.z)and ck(dm.GM,dn.GM)end;local function dp(dq,dr,ds,dt,du)assert(d3(dq),'Argument 1 (planetarySystemId) must be a number:'..type(dq))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(ds),'Argument 3 (radius) must be a number:'..type(ds))assert(d4(dt),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dt))assert(d3(du),'Argument 5 (GM) must be a number:'..type(du))return setmetatable({planetarySystemId=A(dq),bodyId=A(dr),radius=A(ds),center=vec3(dt),GM=A(du)},dj)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dv)return e('::pos{%d,%d,%s,%s,%s}',dv.systemId,dv.bodyId,de(dv.latitude*dc),de(dv.longitude*dc),de(dv.altitude))end;MapPosition.__eq=function(dm,dn)return dm.bodyId==dn.bodyId and dm.systemId==dn.systemId and ck(dm.latitude,dn.latitude)and ck(dm.altitude,dn.altitude)and(ck(dm.longitude,dn.longitude)or ck(dm.latitude,math.pi/2)or ck(dm.latitude,-math.pi/2))end;local function dw(dx,dr,dy,dz,dA)local dq=dx;if d6(dx)and not dz and not dA and not dr and not dy then dq,dr,dy,dz,dA=n(dx,dd)assert(dq,'Argument 1 (position string) is malformed.')else assert(d3(dq),'Argument 1 (systemId) must be a number:'..type(dq))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(dy),'Argument 3 (latitude) must be in degrees:'..type(dy))assert(d3(dz),'Argument 4 (longitude) must be in degrees:'..type(dz))assert(d3(dA),'Argument 5 (altitude) must be in meters:'..type(dA))end;dq=A(dq)dr=A(dr)dy=A(dy)dz=A(dz)dA=A(dA)if dr==0 then return setmetatable({latitude=dy,longitude=dz,altitude=dA,bodyId=dr,systemId=dq},MapPosition)end;return setmetatable({latitude=db*q(dy,-90,90),longitude=db*(dz%360),altitude=dA,bodyId=dr,systemId=dq},MapPosition)end;local dB={}dB.__index=dB;dB.__tostring=function(dg,dk)local dC=dk and dk..'  'local dD={}local dl={}for cY in pairs(dg)do table.insert(dl,cY)end;table.sort(dl)for _,dE in ipairs(dl)do bdy=dg[dE]local dF=dj.__tostring(bdy,dC)if dk then table.insert(dD,e('[%s]={\n%s\n%s}',dE,dF,dk))else table.insert(dD,e('  [%s]=%s',dE,dF))end end;if dk then return e('\n%s%s%s',dk,table.concat(dD,',\n'..dk),dk)end;return e('{\n%s\n}',table.concat(dD,',\n'))end;local function dG(dH)local aZ={}local pid;for _,cZ in pairs(dH)do local dI=cZ.planetarySystemId;if type(dI)~='number'then error('Invalid planetary system ID: '..tostring(dI))elseif pid and dI~=pid then error('Mistringmatch planetary system IDs: '..dI..' and '..pid)end;local dJ=cZ.bodyId;if type(dJ)~='number'then error('Invalid body ID: '..tostring(dJ))elseif aZ[dJ]then error('Duplicate body ID: '..tostring(dJ))end;setmetatable(cZ.center,getmetatable(vec3.unit_x))aZ[dJ]=setmetatable(cZ,dj)pid=dI end;return setmetatable(aZ,dB)end;b2={}local function dK(dH)return setmetatable({galaxyAtlas=dH or{}},b2)end;b2.__index=function(d5,i)if type(i)=='number'then local system=d5.galaxyAtlas[i]return dG(system)end;return rawget(b2,i)end;b2.__pairs=function(dg)return function(d5,cY)local dL,nv=next(d5,cY)return dL,nv and dG(nv)end,dg.galaxyAtlas,nil end;b2.__tostring=function(dg)local dM={}for _,dN in pairs(dg or{})do local dO=dN:getPlanetarySystemId()local dP=dB.__tostring(dN,'    ')table.insert(dM,e('  [%s]={%s\n  }',dO,dP))end;return e('{\n%s\n}\n',table.concat(dM,',\n'))end;b2.BodyParameters=dp;b2.MapPosition=dw;b2.PlanetarySystem=dG;function b2.createBodyParameters(dQ,dr,dR,dS,dT,dU,dV)assert(d3(dQ),'Argument 1 (planetarySystemId) must be a number:'..type(dQ))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(dR),'Argument 3 (surfaceArea) must be a number:'..type(dR))assert(d4(dS),'Argument 4 (aPosition) must be an array or vec3:'..type(dS))assert(d4(dT),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dT))assert(d3(dU),'Argument 6 (altitude) must be in meters:'..type(dU))assert(d3(dV),'Argument 7 (gravityAtPosition) must be number:'..type(dV))local ds=z(dR/4/math.pi)local ak=ds+dU;local dW=vec3(dS)+ak*vec3(dT)local du=dV*ak*ak;return dp(dQ,dr,ds,dW,du)end;b2.isMapPosition=d9;function b2:getPlanetarySystem(dx)if i==nil then i=0 end;if nv==nil then nv=0 end;local dQ=dx;if d9(dx)then dQ=dx.systemId end;if type(dQ)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dB then system=dG(system)end;return system end end end;function dB:sizeCalculator(dX)return 1.05*dX.radius end;function dB:castIntersections(dY,cG,dZ,d_,e0,e1)local e2={}local e3=e0 or self;for _,dX in pairs(e3)do table.insert(e2,dX)end;if not e1 then table.sort(e2,function(e4,e5)return(e4.center-dY):len()<(e5.center-dY):len()end)end;local e6=cG:normalize()for _,dX in ipairs(e2)do local e7=dX.center-dY;local ds=self:sizeCalculator(dX)local e8=e7:dot(e6)local e9=e8^2-(e7:len2()-ds^2)if e9>=0 then local ea=z(e9)local eb=e8+ea;local ec=e8-ea;if ec>0 then return dX,eb,ec elseif eb>0 then return dX,eb,nil end end end;return nil,nil,nil end;function dB:closestBody(ed)assert(type(ed)=='table','Invalid coordinates.')local ee,dX;local ef=vec3(ed)for _,eg in pairs(self)do local eh=(eg.center-ef):len2()if(not dX or eh<ee)and eg.name~="Space"then dX=eg;ee=eh end end;return dX end;function dB:convertToBodyIdAndWorldCoordinates(dx)local ei=dx;if d6(dx)then ei=dw(dx)end;if ei.bodyId==0 then return 0,vec3(ei.latitude,ei.longitude,ei.altitude)end;local eg=self:getBodyParameters(ei)if eg then return ei.bodyId,eg:convertToWorldCoordinates(ei)end end;function dB:getBodyParameters(dx)local dr=dx;if d9(dx)then dr=dx.bodyId end;assert(d3(dr),'Argument 1 (bodyId) must be a number:'..type(dr))return self[dr]end;function dB:getPlanetarySystemId()local _,cZ=next(self)return cZ and cZ.planetarySystemId end;function dj:convertToMapPosition(dt)assert(d4(dt),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dt))local ej=vec3(dt)if self.bodyId==0 then return setmetatable({latitude=ej.x,longitude=ej.y,altitude=ej.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ek=ej-self.center;local ak=ek:len()local dA=ak-self.radius;local dy=0;local dz=0;if not ck(ak,0)then local el=m(ek.y,ek.x)dz=el>=0 and el or 2*math.pi+el;dy=math.pi/2-math.acos(ek.z/ak)end;return setmetatable({latitude=dy,longitude=dz,altitude=dA,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dj:convertToWorldCoordinates(dx)local ei=d6(dx)and dw(dx)or dx;if ei.bodyId==0 then return vec3(ei.latitude,ei.longitude,ei.altitude)end;assert(d9(ei),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ei.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ei.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local em=math.cos(ei.latitude)return self.center+(self.radius+ei.altitude)*vec3(em*math.cos(ei.longitude),em*math.sin(ei.longitude),math.sin(ei.latitude))end;function dj:getAltitude(dt)return(vec3(dt)-self.center):len()-self.radius end;function dj:getDistance(dt)return(vec3(dt)-self.center):len()end;function dj:getGravity(dt)local en=self.center-vec3(dt)local eo=en:len2()return self.GM/eo*en/z(eo)end;return setmetatable(b2,{__call=function(_,...)return dK(...)end})end;local function ep()local b4={}local eq=30000000/3600;local er=eq*eq;local es=100;local function et(cZ)return 1/z(1-cZ*cZ/er)end;function b4.computeAccelerationTime(eu,ev,ew)local ex=eq*math.asin(eu/eq)return(eq*math.asin(ew/eq)-ex)/ev end;function b4.computeDistanceAndTime(eu,ew,ey,ez,eA,eB)eA=eA or 0;eB=eB or 0;local eC=eu<=ew;local eD=ez*(eC and 1 or-1)/ey;local eE=-eB/ey;local eF=eD+eE;if eC and eF<=0 or not eC and eF>=0 then return-1,-1 end;local eG,eH=0,0;if eD~=0 and eA>0 then local ex=math.asin(eu/eq)local eI=math.pi*(eD/2+eE)local eJ=eD*eA;local eK=eq*math.pi;local cZ=function(d5)local eL=(eI*d5-eJ*math.sin(math.pi*d5/2/eA)+eK*ex)/eK;local eM=math.tan(eL)return eq*eM/z(eM*eM+1)end;local eN=eC and function(d7)return d7>=ew end or function(d7)return d7<=ew end;eH=2*eA;if eN(cZ(eH))then local eO=0;while c(eH-eO)>0.5 do local d5=(eH+eO)/2;if eN(cZ(d5))then eH=d5 else eO=d5 end end end;local eP=eu;local eQ=eH/es;for eR=1,es do local eS=cZ(eR*eQ)eG=eG+(eS+eP)*eQ/2;eP=eS end;if eH<2*eA then return eG,eH end;eu=eP end;local ex=eq*math.asin(eu/eq)local E=(eq*math.asin(ew/eq)-ex)/eF;local eT=er*math.cos(ex/eq)/eF;local ak=eT-er*math.cos((eF*E+ex)/eq)/eF;return ak+eG,E+eH end;function b4.computeTravelTime(eu,ev,ak)if ak==0 then return 0 end;if ev>0 then local ex=eq*math.asin(eu/eq)local eT=er*math.cos(ex/eq)/ev;return(eq*math.acos(ev*(eT-ak)/er)-ex)/ev end;if eu==0 then return-1 end;assert(eu>0,'Acceleration and initial speed are both zero.')return ak/eu end;function b4.lorentz(cZ)return et(cZ)end;return b4 end;local function eU()local vec3=require('cpml.vec3')local d0=d0()local function d6(d7)return type(d7)=='string'end;local function d4(d5)return type(d5)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dA)assert(self.body)local ak=dA+self.body.radius;if not ck(ak,0)then local orbit=z(self.body.GM/ak)return z(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dx,eV)assert(self.body)assert(d4(dx)or d6(dx))assert(d4(eV))local eW=(d6(dx)or d0.isMapPosition(dx))and self.body:convertToWorldCoordinates(dx)or vec3(dx)local cZ=vec3(eV)local eX=eW-self.body.center;local eY=cZ:len2()local eZ=eX:len()local e_=self.body.GM;local f0=((eY-e_/eZ)*eX-eX:dot(cZ)*cZ)/e_;local cl=e_/(2*e_/eZ-eY)local f1=f0:len()local e6=f0:normalize()local f2=cl*(1-f1)local f3=cl*(1+f1)local f4=f2*e6+self.body.center;local f5=f1<=1 and-f3*e6+self.body.center or nil;local f6=z(cl*e_*(1-f1*f1))local f7=f5 and 2*math.pi*z(cl^3/e_)local f8=math.acos(f0:dot(eX)/(f1*eZ))if eX:dot(cZ)<0 then f8=-(f8-2*math.pi)end;local f9=math.acos((math.cos(f8)+f1)/(1+f1*math.cos(f8)))local fa=f9;if fa<0 then fa=fa+2*math.pi end;local fb=fa-f1*math.sin(fa)local fc=0;local fd=0;local fe=0;if f7~=nil then fc=fb/(2*math.pi/f7)fd=f7-fc;fe=fd+f7/2;if f8-math.pi>0 then fd=fc;fe=fd+f7/2 end;if fe>f7 then fe=fe-f7 end end;return{periapsis={position=f4,speed=f6/f2,circularOrbitSpeed=z(e_/f2),altitude=f2-self.body.radius},apoapsis=f5 and{position=f5,speed=f6/f3,circularOrbitSpeed=z(e_/f3),altitude=f3-self.body.radius},currentVelocity=cZ,currentPosition=eW,eccentricity=f1,period=f7,eccentricAnomaly=f9,meanAnomaly=fb,timeToPeriapsis=fd,timeToApoapsis=fe}end;local function ff(fg)local eg=d0.BodyParameters(fg.planetarySystemId,fg.bodyId,fg.radius,fg.center,fg.GM)return setmetatable({body=eg},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ff(...)end})end;local function fh()local fi=0;local function fj(fk)local ds=500000;local fl,fm,fn=math.huge;local fo=false;local fp=vec3({13771471,7435803,-128971})local fq=18000000;fl=vec3(fk):dist(fp)if fl<fq then return true,c(fl-fq),"Safe Zone",0 end;fm=vec3(fk):dist(vec3(planet.center))if fm<ds then fo=true end;if c(fm-ds)<c(fl-fq)then return fo,c(fm-ds),planet.name,planet.bodyId else return fo,c(fl-fq),"Safe Zone",0 end end;local function fr(cZ)if aJ==1920 then return cZ else return B(aJ*cZ/1920,0)end end;local function fs(cZ)if aK==1080 then return cZ else return B(aK*cZ/1080,0)end end;local function ft()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function fu()local fv="TRAVEL"if not bL then fv="CRUISE"end;if Autopilot then fv="AUTOPILOT"end;return fv end;local function fw(fx,aX,x,fy,fz,fA,fB,fC)local fD=1;local fE=2;local fF=3;local fG=4;local fH=5;local fI=6;local fJ=""local fK=0;local fL=fuelY;local fM=fuelY+5;if not BarFuelDisplay then fM=fM+5 end;if l()==1 and not RemoteHud then fL=fL-50;fM=fM-50 end;if fz=="ATMO"then fJ="atmofueltank"elseif fz=="SPACE"then fJ="spacefueltank"else fJ="rocketfueltank"end;fK=_G[fJ.."_size"]if#fA>0 then for i=1,#fA do local fN=string.sub(fA[i][fE],1,12)local fO=0;for fP=1,fK do if fA[i][fE]==f(unit[fJ.."_"..fP].getData()).name then fO=fP;break end end;if aX or fB[i]==nil or fC[i]==nil then local fQ=0;local fR=0;local fS=0;local fT=0;local fU=p()if fO~=0 then fC[i]=f(unit[fJ.."_"..fO].getData()).percentage;fB[i]=f(unit[fJ.."_"..fO].getData()).timeLeft;if fB[i]=="n/a"then fB[i]=0 end else fS=k(fA[i][fD])-fA[i][fG]fQ=fA[i][fF]fC[i]=d(0.5+fS*100/fQ)fR=fA[i][fH]fT=fA[i][fI]if fR<=fS then fB[i]=0 else fB[i]=d(0.5+fS/((fR-fS)/(fU-fT)))end;fA[i][fH]=fS;fA[i][fI]=fU end end;if fN==fy then fN=e("%s %d",fz,i)end;if fO==0 then fN=fN.." *"end;local fV;if fB[i]==0 then fV=""else fV=cP(fB[i])end;if fC[i]~=nil then local fW=d(fC[i]*2.55)local fX=e("rgb(%d,%d,%d)",255-fW,fW,0)local ce=""if fV~=""and fB[i]<120 or fC[i]<5 then if aX then ce=[[class="red"]]end end;if BarFuelDisplay then table.insert(fx,e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],x,fM,fX,fC[i],x,fM,x+2,fM+10,fC[i],fV))fx[#fx+1]=cc(x,fL,fN,ce.."txtstart pdim txtfuel")fL=fL-30;fM=fM-30 else fx[#fx+1]=cc(x,fL,fN,ce.." pdim txtfuel")fx[#fx+1]=cc(x,fM,e("%d%% %s",fC[i],fV),"pdim txtfuel","fill:"..fX)fL=fL+30;fM=fM+30 end end end end end;local function fY(fx,dA)if dA<200000 and not as or dA and as then local fZ=0;if c(bF)>1 then fZ=45*math.log(c(bF),10)if bF<0 then fZ=-fZ end end;fx[#fx+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bF),d(fZ))end;return fx end;local function f_(g0)local g1=-bE;g0=g0-g0:project_on(g1)local g2=vec3(0,0,1)g2=g2-g2:project_on(g1)local g3=g2:cross(g1)local fZ=g2:angle_between(g0)*constants.rad2deg;if g0:dot(g3)<0 then fZ=360-fZ end;return fZ end;local function g4(fx,centerX,centerY,g5,g6,bX)local g7=circleRad;local g8=20;local g9=d(g5)if bX then for i=-45,45,5 do local ga=i;fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],ga,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fx[#fx+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+g7+g8-len,centerX,centerY+g7+g8)end;fx[#fx+1]=cc(centerX,centerY+g7+g8-35,g6,"pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY+g7+g8-25,g9 .." deg","pdim txt txtmid")fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g5,centerX,centerY)fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+g7+g8-20,centerX+5,centerY+g7+g8-20,centerX,centerY+g7+g8-15)fx[#fx+1]="</g>"end;local gb=g9;if bX then gb=f_(bA)end;local gc=20;local gd=d(gb)local ge=0;local gf=centerY+g7+g8+20;local gg=centerX;if g6~="YAW"then gf=fs(130)gg=fr(960)end;local gh=[[<path class="txttick line" d="]]local gi=d(gd-(gc+10)-gd%5+0.5)for i=gi+60,gi,-5 do local x=gg-(-i*5+gb*5)if i%10==0 then ge=10;local num=i;if num==360 then num=0 elseif num>360 then num=num-360 elseif num<0 then num=num+360 end;fx[#fx+1]=cc(x+5,gf-12,num)elseif i%5==0 then ge=5 end;if ge==10 then gh=e([[%s M %f %f v %d]],gh,x,gf-5,ge)else gh=e([[%s M %f %f v %d]],gh,x,gf-2.5,ge)end end;fx[#fx+1]=gh..[["/>]]fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gg-5,gf+10,gg+5,gf+10,gg,gf+5)if bX then g6="HDG"end;fx[#fx+1]=cc(gg,gf+25,gd.."deg","pdim txt txtmid","")fx[#fx+1]=cc(gg,gf+35,g6,"pdim txt txtmid","")end;local function gj(fx,gk,g5,centerX,centerY,bX,gl,eS)local g7=circleRad;local gm=d(g7*3/5)if g7>0 then local gn=d(gk)local len=0;local gh=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*g5,centerX,centerY)if not as then gh=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fx[#fx+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],g7-1,centerX,centerY)fx[#fx+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gn-30-gn%5+0.5),d(gn+30+gn%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local y=centerY+-i*5+gk*5;if len==30 then gh=e([[%s M %d %f h %d]],gh,centerX-gm-len,y,len)if as then fx[#fx+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g5,centerX,centerY,centerX-gm+10,y,i)fx[#fx+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g5,centerX,centerY,centerX+gm-10,y,i)if i==0 or i==180 or i==-180 then fx[#fx+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g5,centerX,centerY,centerX-gm+20,y,gm*2-40)end else fx[#fx+1]=cc(centerX-gm+10,y,i,"pdim txt txtmid")fx[#fx+1]=cc(centerX+gm-10,y,i,"pdim txt txtmid")end;gh=e([[%s M %d %f h %d]],gh,centerX+gm,y,len)else gh=e([[%s M %d %f h %d]],gh,centerX-gm-len,y,len)gh=e([[%s M %d %f h %d]],gh,centerX+gm,y,len)end end;fx[#fx+1]=gh..[["/>]]local go="PITCH"if not bX then go="REL PITCH"end;if gk>90 and not as then gk=90-(gk-90)elseif gk<-90 and not as then gk=-90-(gk+90)end;if g7>200 then if as then if eS>R then fx[#fx+1]=cc(centerX,centerY-15,"Yaw","pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY+20,gl,"pdim txt txtmid")end;fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g5,centerX,centerY)else fx[#fx+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-gm+25,centerY-5,centerX-gm+20,centerY,centerX-gm+25,centerY+5,centerX-gm+50,centerY+4,gn)fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+gm-25,centerY-5,centerX+gm-20,centerY,centerX+gm-25,centerY+5,centerX+gm-30,centerY+4,gn)fx[#fx+1]="</g>"end;local gp=d(g7/3)fx[#fx+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-gp,centerY,g7-gp)if not as and bX then fx[#fx+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g5,centerX,centerY,centerX-gm+10,centerY,gm*2-20)end;fx[#fx+1]="</g>"if g7<200 then if as and eS>R then fx[#fx+1]=cc(centerX,centerY-g7,go,"pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY-g7+10,gn,"pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY-15,"Yaw","pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY+20,gl,"pdim txt txtmid")else fx[#fx+1]=cc(centerX,centerY-g7,go,"pdim txt txtmid")fx[#fx+1]=cc(centerX,centerY-g7+15,gn,"pdim txt txtmid")end end end end;local function gq(fx,dA,bX)local gr=altMeterX;local gs=altMeterY;local gt=78;local gu=19;local gv=aq;if aq~=-1 then fx[#fx+1]=cc(gr+gt,gs+gu+20,e("AGL: %.1fm",aq),"pdim altsm txtend")end;if bX and(dA<200000 and not as or dA and as)then table.insert(fx,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gr-1,gs-4,gt+2,gu+6,gr+1,gs-1,gt-4,gu))local cx=0;local gw=1;local gx=0;local gy=dA<0;local gz=dA<planet.surfaceMaxAltitude;local gA=9;if gy then gA=0 end;local dA=c(dA)while cx<6 do local gB=11;local gC=16;local gD=9;local gE=14;local ce="altsm"if cx>2 then gC=gC+3;gB=gB+2;gE=gE+2;gD=gD-6;ce="altbig"end;if gy then ce=ce.." red"elseif gz then ce=ce.." orange"end;local gF=dA/gw%10;local gG=d(gF)local gH=d((gG+1)%10)local gI=gx;if cx==0 then gI=gF-gG;if gy then gI=1-gI end end;if gy and(cx==0 or gx~=0)then local gJ=gH;gH=gG;gG=gJ end;local gK=gC*(gI-1)local gL=gK+gC;local x=gr+gD+(6-cx)*gB;local y=gs+gE;fx[#fx+1]=cc(x,y+gK,gH,ce)fx[#fx+1]=cc(x,y+gL,gG,ce)cx=cx+1;gw=gw*10;if gG==gA then gx=gI else gx=0 end end;table.insert(fx,[[</g></g>]])end end;local function gM(eV)eV=vec3(eV)local gN=-math.deg(m(eV.y,eV.z))+180;gN=gN-90;if gN<0 then gN=360+gN end;if gN>180 then gN=-180+gN-180 end;return-gN end;local function gO(eV)eV=vec3(eV)local gb=math.deg(m(eV.y,eV.x))-90;if gb<-180 then gb=360+gb end;return gb end;local function gP(fx,eV,eS,centerX,centerY)if eS>5 and not as or eS>R then local g7=circleRad;local gQ=20;local gR=20;local gS=vec3(eV)local gT=gM(gS)local gU=gO(gS)local gV=14;local gW=gV/2;local gX=-gU/gR*g7;local gY=gT/gQ*g7;local x=centerX+gX;local y=centerY+gY;local ak=z(gX^2+gY^2)local gZ=[[<circle
                            cx="]]..x..[["
                            cy="]]..y..[["
                            r="]]..gW/gV..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..x..[["
                            cy="]]..y..[["
                            r="]]..gW..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..x-gV..[[,]]..y..[[ h ]]..gW..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..x+gW..[[,]]..y..[[ h ]]..gW..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..x..[[,]]..y-gV..[[ v ]]..gW..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ak<g7 then fx[#fx+1]=gZ else local fZ=m(gY,gX)local g_=4;local h0=centerX+g7*math.cos(fZ)local h1=centerY+g7*math.sin(fZ)fx[#fx+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fZ*180/math.pi,h0,h1,h0-g_,h1-g_/2,g_*2,g_,h0+g_,h1-g_,g_,g_,-g_,g_)end;if not as then gT=gM(-gS)gU=gO(-gS)gX=-gU/gR*g7;gY=gT/gQ*g7;x=centerX+gX;y=centerY+gY;ak=z(gX^2+gY^2)if ak<g7 then local h2=[[<circle
                                    cx="]]..x..[["
                                    cy="]]..y..[["
                                    r="]]..gW..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..x..[[,]]..y-gV..[[ v ]]..gW..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..x..[[,]]..y..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..x..[[,]]..y..[[)" />
                                <path
                                    d="M ]]..x-gW..[[,]]..y..[[ h ]]..gV..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..x..[[,]]..y..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..x..[[,]]..y..[[)"/>]]fx[#fx+1]=h2 end end end end;local function h3(fx,fv,h4,h5)h4=d(h4+0.5)local fL=throtPosY+10;local fM=throtPosY+20;if l()==1 and not RemoteHud then fL=55;fM=65 end;local h6="CRUISE"local unit="km/h"local ch=h5;if fv=="TRAVEL"or fv=="AUTOPILOT"then h6="THROT"unit="%"ch=h4;local h7="dim"if h4<0 then h7="red"end;fx[#fx+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],h7,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h4),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fx[#fx+1]=cc(throtPosX+10,fL,h6,"pbright txtstart")fx[#fx+1]=cc(throtPosX+10,fM,e("%.0f %s",ch,unit),"pbright txtstart")if as and AtmoSpeedAssist and bL and N then h4=d(O*100+0.5)local h7="red"if h4<0 then h7="red"end;fx[#fx+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],h7,1-c(h4),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fx[#fx+1]=cc(throtPosX+10,fL+40,"LIMIT","pbright txtstart")fx[#fx+1]=cc(throtPosX+10,fM+40,h4 .."%","pbright txtstart")end;if as and AtmoSpeedAssist or Reentry then fx[#fx+1]=cc(throtPosX+10,fL-40,"LIMIT: "..bj.." km/h","dim txtstart")elseif not as and Autopilot then fx[#fx+1]=cc(throtPosX+10,fL-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function h8(fx,h9)local ha=throtPosY-10;local hb=throtPosX+10;fx[#fx+1]=cc(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then ha=75 end;fx[#fx+1]=cc(hb,ha,d(h9).." km/h","pbright txtbig txtstart")end;local function hc(fx)fx[#fx+1]=cc(fr(1900),fs(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fx[#fx+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fx[#fx+1]=cc(fr(960),fs(550),"Warning: Invalid Control Scheme Detected","warnings")fx[#fx+1]=cc(fr(960),fs(600),"Keyboard Scheme must be selected","warnings")fx[#fx+1]=cc(fr(960),fs(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local hd=fr(960)local he=fs(860)local hf=fs(880)local hg=fs(900)local hh=fs(960)local hi=fs(200)local hj=fs(250)local hk=fs(960)if l()==1 and not RemoteHud then he=fs(135)hf=fs(155)hg=fs(175)hi=fs(115)hj=fs(95)end;if BrakeIsOn then fx[#fx+1]=cc(hd,he,"Brake Engaged","warnings")elseif M>0 then fx[#fx+1]=cc(hd,he,"Auto-Brake Engaged","warnings","opacity:"..M)end;if as and be and aq==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bJ and not VertTakeOff and not AutoTakeoff then fx[#fx+1]=cc(hd,hi+50,"** STALL WARNING **","warnings")b_("stall","SW",2)end end;if bV then fx[#fx+1]=cc(hd,hi+90,"Flight Assist in Progress","warnings")end;if az then fx[#fx+1]=cc(hd,hk,"Gyro Enabled","warnings")end;if GearExtended then if T then fx[#fx+1]=cc(hd,hf,"Gear Extended","warn")else fx[#fx+1]=cc(hd,hf,"Landed (G: Takeoff)","warnings")end;local hl=cn(a:getTargetGroundAltitude())fx[#fx+1]=cc(hd,hg,"Hover Height: "..hl,"warn")end;if a8 then fx[#fx+1]=cc(hd,hh+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bJ and AntigravTargetAltitude~=nil then if c(au-antigrav.getBaseAltitude())<501 then fx[#fx+1]=cc(hd,hi+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fx[#fx+1]=cc(hd,hi+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fx[#fx+1]=cc(hd,hi+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fx[#fx+1]=cc(hd,hi+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif a1 then fx[#fx+1]=cc(hd,hi+20,"Follow Mode Engaged","warn")elseif Reentry then fx[#fx+1]=cc(hd,hi+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local hl=cn(HoldAltitude,2)if VertTakeOff then if bJ then hl=cn(antigrav.getBaseAltitude(),2).." AGG singularity height"end;fx[#fx+1]=cc(hd,hi,"VTO to "..hl,"warn")elseif AutoTakeoff and not IntoOrbit then if ao then fx[#fx+1]=cc(hd,hi,"Takeoff to "..AutopilotTargetName,"warn")else fx[#fx+1]=cc(hd,hi,"Takeoff to "..hl,"warn")end;if BrakeIsOn and not VertTakeOff then fx[#fx+1]=cc(hd,hi+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fx[#fx+1]=cc(hd,hi,"Altitude Hold: "..hl,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then fx[#fx+1]=cc(hd,hi+20,"Beginning ascent","warn")elseif at<0.09 and at>0.05 then fx[#fx+1]=cc(hd,hi+20,"Aligning trajectory","warn")elseif at<0.05 then fx[#fx+1]=cc(hd,hi+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if bl~=nil then fx[#fx+1]=cc(hd,hi,bl,"warn")end end;if IntruderAlertSystem and safeMass==-1 then fx[#fx+1]=cc(hd,hi+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bH.."kg DETECTED","warnings")b_("alarm","AL",2)end;if BrakeLanding then if StrongBrakes then fx[#fx+1]=cc(hd,hi,"Brake-Landing","warnings")else fx[#fx+1]=cc(hd,hi,"Coast-Landing","warnings")end end;if ProgradeIsOn then fx[#fx+1]=cc(hd,hi,"Prograde Alignment","crit")end;if RetrogradeIsOn then fx[#fx+1]=cc(hd,hi,"Retrograde Alignment","crit")end;if bY then local type;if string.find(bY,"COLLISION")then type="warnings"else type="crit"end;fx[#fx+1]=cc(hd,hj+20,bY,type)elseif at==0 then local hm,eb,ec=b3:getPlanetarySystem(0):castIntersections(bG,bC:normalize(),function(dX)if dX.noAtmosphericDensityAltitude>0 then return dX.radius+dX.noAtmosphericDensityAltitude else return dX.radius+dX.surfaceMaxAltitude*1.5 end end)local hn=eb;if ec~=nil and eb~=nil then hn=math.min(ec,eb)end;if hn~=nil then local hl=cn(hn)local travelTime=b4.computeTravelTime(bD,0,hn)local ho="Collision"if hm.noAtmosphericDensityAltitude>0 then ho="Atmosphere"end;fx[#fx+1]=cc(hd,hj+20,hm.name.." "..ho.." "..cP(travelTime).." In "..hl,"crit")end end;if VectorToTarget and not IntoOrbit then fx[#fx+1]=cc(hd,hi+35,VectorStatus,"warn")end;fx[#fx+1]="</g>"return fx end;local function hp(eS)return d(B(eS*3.6,0)+0.5).." km/h"end;local function hq(fx)local hr=OrbitMapX;local hs=OrbitMapY;local ht=OrbitMapSize;local hu=4;local hv=15;local x=0;local y=0;local hw,hx,hy,hz;local function hA(type)local hB,E,eS,hC;if type=="Periapsis"then hB=orbit.periapsis.altitude;E=orbit.timeToPeriapsis;eS=orbit.periapsis.speed;hC=35 else hB=orbit.apoapsis.altitude;E=orbit.timeToApoapsis;eS=orbit.apoapsis.speed;hC=-35 end;fx[#fx+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],x+hC,y-5,hr+ht/2-hw+hz,y-5)fx[#fx+1]=cc(x,y,type)y=y+hv;local hl=cn(hB)fx[#fx+1]=cc(x,y,hl)y=y+hv;fx[#fx+1]=cc(x,y,cP(E))y=y+hv;fx[#fx+1]=cc(x,y,hp(eS))end;if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then hs=hs+hu;x=hr+ht+hr/2+hu;y=hs+ht/2+5+hu;hw=ht/4;hz=0;fx[#fx+1]=[[<g class="pbright txtorb txtmid">]]fx[#fx+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ht+hr*2,ht+hs,hu,hu)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hy=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hw*2)hx=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hy*(1-orbit.eccentricity)hz=hw-orbit.periapsis.altitude/hy-planet.radius/hy;local hD=""if orbit.periapsis.altitude<=0 then hD='redout'end;fx[#fx+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hD,hr+ht/2+hz+hu,hs+ht/2+hu,hw,hx)fx[#fx+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hr+ht/2+hu,hs+ht/2+hu,planet.radius/hy)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hA("Apoapsis")end;y=hs+ht/2+5+hu;x=hr-hr/2+10+hu;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hA("Periapsis")end;fx[#fx+1]=cc(hr+ht/2+hu,planet.name,20+hu,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hE=orbit.timeToApoapsis/orbit.period*2*math.pi;local hF=hw*math.cos(hE)local hG=hx*math.sin(hE)fx[#fx+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hr+ht/2+hF+hz+hu,hs+ht/2+hG+hu)end;fx[#fx+1]=[[</g>]]return fx else return fx end end;local hH;local function hI()if radarPanelID~=nil and am==0 then s(radarPanelID)radarPanelID=nil;if hH~=nil then s(hH)hH=nil end else if am==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")hH=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;am=0 end end;local function hJ(fx)local x=30;local y=275;local hK={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hL={"","------------------IN ATMO-----------------","Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to LowOrbitHeight over atmosphere and orbit to target","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local hM={"","------------------NO ATMO-----------------","Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local hN={"","------------------ALWAYS--------------------","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and offset","Alt-8: Toggle ground stabilization (underwater flight)","Alt-9: Activate Gyroscope","","CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if as then c2(hK,hL)table.insert(hK,"--------------CONDITIONAL-----------------")if VertTakeOff then table.insert(hK,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if aq~=-1 then if antigrav then if bJ then table.insert(hK,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hK,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hK,"Alt-6: Begins Vertical Takeoff.")else table.insert(hK,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hK,"G: Begin BrakeLanding or Land")end else c2(hK,hM)end;if AltitudeHold then table.insert(hK,"Alt-Spacebar/Alt-C will raise/lower target height")end;c2(hK,hN)for i=1,#hK do y=y+12;fx[#fx+1]=cc(x,y,hK[i],"pdim txttick txtstart")end end;local function hO(hP,hQ)local hR;local hS=(hQ-hP):normalize()local eX=(bG-hP):dot(hS)/hS:dot(hS)if eX<=0.then return(bG-hP):len()elseif eX>=(hQ-hP):len()then return(bG-hQ):len()end;local hT=hP+eX*hS;hR=(hT-bG):len()return hR end;local function hU()local hR;local hV=nil;local hW=nil;local hX=nil;for cY,hY in pairs(aZ[0])do if hY.hasAtmosphere then local ak=hO(planet.center,hY.center)if hV==nil or ak<hV then hW=hY;hV=ak;hX=planet end;if ad and ad.hasAtmosphere and ad.name~=planet.name then local eh=hO(ad.center,hY.center)if eh<hV then hW=hY;hV=eh;hX=ad end end end end;local hZ=fr(1770)local h_=fs(330)if hV then local i0="txttick "local i1=500000;if hV<hW.radius+i1 or hV<hX.radius+i1 then if bS then i0="txttick red "else i0="txttick orange "end end;hR=cn(hV,2)bU=cc(hZ,h_,"Pipe ("..hX.name.."--"..hW.name.."): "..hR,i0 .."pbright txtmid")end end;local i2=fr(1770)local i3=fs(350)local i4=fs(15)local i5=fr(1370)local i6,i7;local i8={}local i9={XS=13,S=27,M=55,L=110,XL=221}local ia={}local ib={}function ib.HUDPrologue(fx)bS,fi,_,_=fj(bG)if not bS then I=PvPR;K=PvPG;J=PvPB else I=SafeR;K=SafeG;J=SafeB end;aB=[[rgb(]]..d(I+0.5)..","..d(K+0.5)..","..d(J+0.5)..[[)]]aC=[[rgb(]]..d(I*0.9+0.5)..","..d(K*0.9+0.5)..","..d(J*0.9+0.5)..[[)]]local ic=aB;local id=aC;local ie=aB;local ig=aC;if ft()and not brightHud then ic=[[rgb(]]..d(I*0.4+0.5)..","..d(K*0.4+0.5)..","..d(J*0.3+0.5)..[[)]]id=[[rgb(]]..d(I*0.3+0.5)..","..d(K*0.3+0.5)..","..d(J*0.2+0.5)..[[)]]end;fx[#fx+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],ic,ic,ie,ie,id,id,ig,ig,aJ,aK)return fx end;function ib.DrawVerticalSpeed(fx,dA)fY(fx,dA)end;function ib.UpdateHud(fx)local dA=au;local eV=core.getVelocity()local eS=vec3(eV):len()local gN=bM;local ih=bN;local g5=ih;local gk=bM;local h4=d(unit.getThrottle())local h9=eS*3.6;local h5=unit.getAxisCommandValue(0)local ii=fr(1770)local ij=fs(310)if AtmoSpeedAssist and bL then h5=L;h4=L*100 end;local fv=fu()local g6="ROLL"if h4==nil then h4=0 end;if not bX then if eS>5 then gN=gM(eV)ih=gO(eV)else gN=0;ih=0 end;g6="YAW"end;if fi>50000 and not as then local ik;if fi>200000 then ik=B(fi/200000,2).." su"else ik=B(fi/1000,1).." km"end;fx[#fx+1]=cc(ii,ij,"PvP Boundary: "..ik,"pbright txtbig txtmid")end;fx[#fx+1]=al;fx[#fx+1]=aG;fx[#fx+1]=bT;if bU~=""then fx[#fx+1]=bU end;if aY%aS==0 then aX=true end;if fuelX~=0 and fuelY~=0 then fw(fx,aX,fuelX,"Atmospheric ","ATMO",aL,aV,aW)fw(fx,aX,fuelX+120,"Space fuel t","SPACE",aM,aT,aU)fw(fx,aX,fuelX+240,"Rocket fuel ","ROCKET",aN,aQ,aR)end;if aX then aX=false;aY=0 end;aY=aY+1;fY(fx,dA)if l()==0 or RemoteHud then if not ft()or brightHud then if bX then g4(fx,centerX,centerY,g5,g6,bX)gj(fx,gk,g5,centerX,centerY,bX,d(gO(eV)),eS)else g4(fx,centerX,centerY,ih,g6,bX)gj(fx,gN,ih,centerX,centerY,bX,d(ih),eS)end;gq(fx,dA,bX)gP(fx,eV,eS,centerX,centerY)end end;h3(fx,fv,h4,h5)h8(fx,h9)hc(fx)hq(fx)if showHelp then hJ(fx)end;return fx end;function ib.HUDEpilogue(fx)fx[#fx+1]="</svg>"return fx end;function ib.ExtraData(fx)local il=fr(1240)local im=fs(55)local io=im+10;local ip;local iq=0;local fv=fu()if VertTakeOffEngine then fv=fv.."-VERTICAL"end;if TurnBurn then fv="TB-"..fv end;if not stablized then fv=fv.."-DeCoupled"end;local ir=vec3(core.getWorldAcceleration()):len()/9.80665;ip=core.g()fx[#fx+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then il=fr(1120)im=fs(55)io=im+10 elseif as then local is=fr(770)fx[#fx+1]=cc(is,im,"ATMOSPHERE","pdim txt txtend")fx[#fx+1]=cc(is,io,e("%.2f",at),"pdim txt txtend","")end;fx[#fx+1]=cc(il,im,"GRAVITY","pdim txt txtend")fx[#fx+1]=cc(il,io,e("%.2f",ip/9.80665),"pdim txt txtend")fx[#fx+1]=cc(il,im+20,"ACCEL","pdim txt txtend")fx[#fx+1]=cc(il,io+20,e("%.2f",ir),"pdim txt txtend")fx[#fx+1]=cc(fr(960),fs(180),fv,"txtbig txtmid")end;function ib.DrawOdometer(fx,ae,TotalDistanceTravelled,af)local ip;local it=0;local iu=0;local iq=0;if as then iq=LastMaxBrakeInAtmo else iq=LastMaxBrake end;maxThrust=a:maxForceForward()ip=core.g()if ip>0.1 then iu=ax*ip;it=maxThrust/ip end;fx[#fx+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],fr(660),fr(700),fs(35),fr(960),fs(55),fr(1240),fs(35),fr(1280))if l()==0 or RemoteHud then fx[#fx+1]=cc(fr(700),fs(20),e("Trip: %.2f km",ae),"txtstart")fx[#fx+1]=cc(fr(700),fs(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")fx[#fx+1]=cc(fr(830),fs(20),"Trip Time: "..cP(af),"txtstart")fx[#fx+1]=cc(fr(830),fs(30),"Total Time: "..cP(TotalFlightTime),"txtstart")fx[#fx+1]=cc(fr(970),fs(20),e("Mass: %.2f Tons",ax/1000),"txtstart")fx[#fx+1]=cc(fr(1240),fs(10),e("Max Brake: %.2f kN",iq/1000),"txtend")fx[#fx+1]=cc(fr(1240),fs(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if ip>0.1 then fx[#fx+1]=cc(fr(970),fs(30),e("Max Mass: %.2f Tons",it/1000),"txtstart")fx[#fx+1]=cc(fr(1240),fs(20),e("Req Thrust: %.2f kN",iu/1000),"txtend")else fx[#fx+1]=cc(fr(970),fs(30),"Max Mass: n/a","txtstart")fx[#fx+1]=cc(fr(1240),fs(20),"Req Thrust: n/a","txtend")end end;fx[#fx+1]="</g>"return fx end;function ib.DrawWarnings(fx)return hc(fx)end;function ib.DisplayOrbitScreen(fx)return hq(fx)end;function ib.DisplayMessage(fx,hl)if hl~="empty"then local y=310;for iv in string.gmatch(hl,"([^\n]+)")do y=y+35;fx[#fx+1]=cc("50%",y,iv,"msg")end end;if aj~=0 then unit.setTimer("msgTick",aj)aj=0 end end;function ib.DrawDeadZone(fx)fx[#fx+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ib.UpdatePipe()if as then bU=""return end;hU()end;function ib.UpdateRadarRoutine()local iw=E;local function ix(iy,iz,iA,iB,iC,iD,iE,iF)iz,iB,iD,iF=vec3(iz),vec3(iB),vec3(iD),vec3(iF)local iG,iH,iI=iy*iy,iA*iA,iC*iC;local eY=iB-iz;local iJ=eY:normalize()local iK=eY:len()local iL=iD-iz;local iM=(iL-iL:project_on(iJ)):normalize()local iN,iO=iL:dot(iJ),iL:dot(iM)local iP=iN*iN+iO*iO;local iQ=iJ:cross(iM)local x=(iG-iH+iK*iK)/(2*iK)local y=(iG-iI+iP-2*iN*x)/(2*iO)local da=iG-x^2-y^2;local iR=z(da)local iS=iz+iJ*x+iM*y+iQ*iR;local iT=iz+iJ*x+iM*y-iQ*iR;if c((iF-iS):len()-iE)<c((iF-iT):len()-iE)then return iS else return iT end end;local function iU()local function iV()local iW=core.getConstructWorldOrientationRight()local eY=core.getConstructWorldOrientationForward()local iL=core.getConstructWorldOrientationUp()local iX=library.systemResolution3(iW,eY,iL,{1,0,0})local iY=library.systemResolution3(iW,eY,iL,{0,1,0})local iZ=library.systemResolution3(iW,eY,iL,{0,0,1})return function(i_)return library.systemResolution3(iX,iY,iZ,i_)end end;local j0=iV()local j1=core.getConstructWorldPos()local eW=core.getElementPositionById(1)local j2={eW[1]-G,eW[2]-G,eW[3]-G}local j3=j0(j2)local j4={j1[1]-j3[1],j1[2]-j3[2],j1[3]-j3[3]}return j4 end;local function j5(j6,eZ,j7)local j8=j6.pts;local cx=#j8;local j9=j6.ref;if cx>3 then local ja,jb,jc,jd=j8[cx],j8[cx-1],j8[cx-2],j8[cx-3]j6.ref=j7;local eW=ix(ja[1],ja[2],jb[1],jb[2],jc[1],jc[2],jd[1],jd[2])local x,y,iR=eW.x,eW.y,eW.z;if x==x and y==y and iR==iR then x=x+j9[1]y=y+j9[2]iR=iR+j9[3]local je=vec3(x,y,iR)if not j6.lastPos then j6.center=je elseif(j6.lastPos-je):len()<2 then j6.center=je;j6.skipCalc=true end;j6.lastPos=je end;j6.pts={}else local jf={j7[1]-j9[1],j7[2]-j9[2],j7[3]-j9[3]}j8[cx+1]={eZ,jf}end end;if radar_1 then local jg=#radar_1.getEntries()local jh=radar_1.getData()local ji=jh:gmatch('{"constructId[^}]*}[^}]*}')local j7=iU()if jg>0 then local jj,jk,jl=0,0,0;for cZ in ji do local dI,ak,jm=cZ:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local jn=13;ak=A(ak)if radar_1.hasMatchingTransponder(dI)==1 then table.insert(i8,dI)end;if CollisionSystem then if ak>0 and radar_1.getConstructType(dI)=="static"or radar_1.getConstructType(dI)=="space"then jl=jl+1;local fN=radar_1.getConstructName(dI)local j6=bW[dI]if j6==nil then jn=i9[jm]jn=jn+H;bW[dI]={pts={},ref=j7,name=fN,i=0,radius=jn,skipCalc=false}j6=bW[dI]end;if not j6.skipCalc then j5(j6,ak,j7)jk=jk+1 end;if j6.center then table.insert(ia,j6)end end;jj=jj+1;if bX and jj>700 or jk>70 or(not bX and jj>300 or jk>30)then coroutine.yield()jj,jk=0,0 end end end;local jo=#ia;if jo>0 then local dX,jp,jq,jr;local js=0;local jt=b3:getPlanetarySystem(0)jr=bC:normalize()while js<jo do coroutine.yield()local ju={table.unpack(ia,js,math.min(js+75,jo))}dX,jp,jq=jt:castIntersections(bG,jr,nil,nil,ju,true)if dX and jq then bZ={dX,jp,jq}break end;js=js+75 end;if not dX then bZ=nil end else bZ=nil end;ia={}local jv=jh:find('identifiedConstructs":%[%]')if jv==nil and hH==nil then am=1;hI()end;if jv~=nil and hH~=nil then hI()end;if radarPanelID==nil then hI()end;if CollisionSystem then if bX then i7="Buildings"else i7="Stations"end;if jo>0 then i6=jo.."/"..jl.." "..i7 .." : "..jg-jl.." Ships"else i6="0/"..jl.." "..i7 .." : "..jg-jl.." Ships"end else i6="Radar Contacts: "..jg end;bT=cc(i2,i3,i6,"pbright txtbig txtmid")if#i8>0 then bT=bT..cc(x,y,"Friendlies In Range","pbright txtbig txtmid")for cY,cZ in pairs(i8)do i4=i4+20;bT=bT..cc(i5,i4,radar_1.getConstructName(cZ),"pdim txtmid")end;i8={}end else local jw;jw=jh:find('worksInEnvironment":false')if jw then bT=cc(i2,i3,"Radar: Jammed","pbright txtbig txtmid")else bT=cc(i2,i3,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then am=0;hI()end end end;if bW.time==nil then bW.time=0;bW.tcount=-1 end;if timeCount<250 then totalTime=totalTime+E-iw;timeCount=timeCount+1 elseif bW.tcount>-1 then local jx=totalTime*0.004;system.print("Avg of 250 URR: "..jx)bW.time=bW.time+jx;bW.tcount=bW.tcount+1;system.print("Overall Avg after "..bW.tcount.." runs: "..bW.time/bW.tcount)timeCount=0;totalTime=0 else bW.tcount=0;timeCount=0;totalTime=0 end end;function ib.UpdateRadar()local jy=coroutine.status(UpdateRadarCoroutine)if jy=="suspended"then local ch,jz=coroutine.resume(UpdateRadarCoroutine)if jz then system.print("ERROR UPDATE RADAR: "..jz)end elseif jy=="dead"then UpdateRadarCoroutine=coroutine.create(ib.UpdateRadarRoutine)local ch,jz=coroutine.resume(UpdateRadarCoroutine)end end;function ib.DrawSettings(fx)if#bP>0 then local x=fr(640)local y=fs(200)fx[#fx+1]=[[<g class="pbright txtvspd txtstart">]]for cY,cZ in pairs(bP)do fx[#fx+1]=cc(x,y,cZ..": ".._G[cZ])y=y+20;if cY%12==0 then x=x+fr(350)y=fs(200)end end;fx[#fx+1]=cc(fr(640),fs(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fx[#fx+1]="</g>"end;return fx end;UpdateRadarCoroutine=coroutine.create(ib.UpdateRadarRoutine)return ib end;local function jA()local function jB()local function jC(jD,jE)return jD.name<jE.name end;bR={}for cY,cZ in pairs(aZ[0])do bR[#bR+1]={name=cZ.name,index=cY}end;table.sort(bR,jC)end;local c_={}function c_.UpdateAtlasLocationsList()jB()end;function c_.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ad=nil;CustomTarget=nil;return true end;local jF=bR[AutopilotTargetIndex].index;local jG=aZ[0][jF]if jG.center then AutopilotTargetName=jG.name;ad=b3[0][jF]if CustomTarget~=nil then if at==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jG;for _,cZ in pairs(b3[0])do if cZ.name==CustomTarget.planetname then ad=cZ;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ad.center)else AutopilotTargetCoords=CustomTarget.position end;if ad.planetname~="Space"then if ad.hasAtmosphere then AutopilotTargetOrbit=d(ad.radius*(TargetOrbitRadius-1)+ad.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(ad.radius*(TargetOrbitRadius-1)+ad.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b6(ad):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function c_.adjustAutopilotTargetIndex(g1)if not Autopilot and not VectorToTarget and not ao and not IntoOrbit then if g1==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bR then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bR end end;if AutopilotTargetIndex==0 then b8.UpdateAutopilotTarget()else local jF=bR[AutopilotTargetIndex].index;local jG=aZ[0][jF]if jG.name=="Space"or iphCondition=="Custom Only"and jG.center or iphCondition=="No Moons"and string.find(jG.name,"Moon")~=nil then if g1==nil then b8.adjustAutopilotTargetIndex()else b8.adjustAutopilotTargetIndex(1)end else b8.UpdateAutopilotTarget()end end else a3="Disengage autopilot before changing Interplanetary Helper"b_("iph","AP")end end;function c_.findAtlasIndex(jH)for cY,cZ in pairs(jH)do if cZ.name and cZ.name==CustomTarget.name then return cY end end;return-1 end;for cY,cZ in pairs(SavedLocations)do table.insert(aZ[0],cZ)end;jB()c_.UpdateAutopilotTarget()return c_ end;local function jI()local jJ={}local function jK(eS)local jL=AutopilotEndSpeed;if not Autopilot then jL=0 end;if not as then return b4.computeDistanceAndTime(eS,jL,ax,0,0,LastMaxBrake-AutopilotPlanetGravity*ax)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b4.computeDistanceAndTime(eS,jL,ax,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*ax)else return 0,0 end end end;local function jM(eS)local jL=AutopilotEndSpeed;if not Autopilot then jL=0 end;return b4.computeDistanceAndTime(eS,jL,ax,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*ax)end;function jJ.GetAutopilotBrakeDistanceAndTime(eS)return jK(eS)end;function jJ.GetAutopilotTBBrakeDistanceAndTime(eS)return jM(eS)end;local function jN(jO,jP,jQ)jP=jP:project_on_plane(jO)jQ=jQ:project_on_plane(jO)return m(jP:cross(jQ):dot(jO),jP:dot(jQ))end;local function jR()local function jS()local jT=-1;local jU=-1;if vBooster then jT=vBooster.distance()end;if hover then jU=hover.distance()end;if jT~=-1 and jU~=-1 then if jT<jU then return jT else return jU end elseif jT~=-1 then return jT elseif jU~=-1 then return jU else return-1 end end;local jV=jS()local jW=-1;if telemeter_1 then jW=telemeter_1.getDistance()end;if jV~=-1 and jW~=-1 then if jV<jW then return jV else return jW end elseif jV~=-1 then return jV else return jW end end;local function jX(planet,ed,jY)local function jZ(j_,dt)local ej=vec3(dt)if j_.bodyId==0 then return setmetatable({latitude=ej.x,longitude=ej.y,altitude=ej.z,bodyId=0,systemId=j_.planetarySystemId},MapPosition)end;local ek=ej-j_.center;local ak=ek:len()local dA=ak-j_.radius;local dy=0;local dz=0;if not ck(ak,0)then local el=m(ek.y,ek.x)dz=el>=0 and el or 2*math.pi+el;dy=math.pi/2-math.acos(ek.z/ak)end;return setmetatable({latitude=math.deg(dy),longitude=math.deg(dz),altitude=dA,bodyId=j_.bodyId,systemId=j_.planetarySystemId},MapPosition)end;local k0=jZ(planet,ed)k0="::pos{"..k0.systemId..","..k0.bodyId..","..k0.latitude..","..k0.longitude..","..k0.altitude.."}"if jY then return k0 else system.setWaypoint(k0)return true end end;function jJ.showWayPoint(planet,ed,jY)return jX(planet,ed,jY)end;function jJ.APTick()local function k1()if bZ and not BrakeLanding then local dX=bZ[1]local jp,jq=bZ[2],bZ[3]local k2=math.min(jp,jq or jp)local k3=k2/bD;if(AltitudeHold or VectorToTarget or LockPitch)and not AutoTakeoff and(a9*1.5>k2 or k3<1)then BrakeIsOn=true;cg(0)if AltitudeHold then cs()end;if LockPitch then ToggleLockPitch()end;a3="Autopilot Cancelled due to possible collision"if VectorToTarget then ct()end;StrongBrakes=true;BrakeLanding=true;bc=true end;if k3<11 then bY=dX.name.." COLLISION "..cP(k3).." / "..cn(k2,2)else bY=dX.name.." collision "..cP(k3)end;if k3<6 then b_("alarm","AL",2)end else bY=false end end;as=j()>0;at=j()au=core.getAltitude()aq=jR()E=p()bf=E;bX=unit.getClosestPlanetInfluence()>0;if CollisionSystem then k1()end;if antigrav then bJ=antigrav.getState()==1 end;local k4=1;local k5=1;local k6=E-bf;local k7=-math.deg(jN(bz,bC,bA))local k8=math.deg(jN(bB,bC,bA))local g1=bE*-1;be=as and k7<-YawStallAngle or k7>YawStallAngle or k8<-PitchStallAngle or k8>PitchStallAngle;local k9=system.getMouseDeltaX()local ka=system.getMouseDeltaY()if InvertMouse and not a2 then ka=-ka end;W=0;a0=0;V=0;sys=b3[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b6(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bC)if au==0 then au=(bG-planet.center):len()-planet.radius end;local ip=planet:getGravity(core.getConstructWorldPos()):len()*ax;bg=0;b5=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and a2 then if not ba then ah=ah+k9;ai=ai+ka end else ah=0;ai=0 end else ah=ah+k9;ai=ai+ka;ak=z(ah*ah+ai*ai)if not a2 and l()==0 then if userControlScheme=="virtual joystick"then if ah>0 and ah>DeadZone then W=W-(ah-DeadZone)*MouseXSensitivity elseif ah<0 and ah<DeadZone*-1 then W=W-(ah+DeadZone)*MouseXSensitivity else W=0 end;if ai>0 and ai>DeadZone then V=V-(ai-DeadZone)*MouseYSensitivity elseif ai<0 and ai<DeadZone*-1 then V=V-(ai+DeadZone)*MouseYSensitivity else V=0 end else ah=0;ai=0;if userControlScheme=="mouse"then V=(-utils.smoothstep(ka,-100,100)+0.5)*2*k4;W=(-utils.smoothstep(k9,-100,100)+0.5)*2*k5 end end end end;local kb=bD>8334;if bD>SpaceSpeedLimit/3.6 and not as and not Autopilot and not kb then a3="Space Speed Engine Shutoff reached"cg(0)end;if not kb and LastIsWarping then if not BrakeIsOn then cA()end;if Autopilot then ct()end end;LastIsWarping=kb;if as and at>0.09 then if bD>bj/3.6 and not AtmoSpeedAssist and not aA then BrakeIsOn=true;aA=true elseif not AtmoSpeedAssist and aA then if bD<bj/3.6 then BrakeIsOn=false;aA=false end end end;if BrakeIsOn then Z=1 else Z=0 end;if ProgradeIsOn then if an then BrakeIsOn=false;local kc=false;if CustomTarget~=nil then kc=cB(CustomTarget.position-bG,0.1)else kc=cB(vec3(bC),0.01)end;bc=true;if kc then cj(d(bj))if(c(bN)<2 or c(bM)>85)and bD>=bj/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;S=true;an=false;ap=true;Autopilot=false;cN()end elseif as and AtmoSpeedAssist then cg(1)end elseif bD>R then cB(vec3(bC),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bD>R then cB(-vec3(bC))end end;if not ProgradeIsOn and an and not IntoOrbit then if at==0 then S=true;cN()an=false;ap=true else an=false;ct()end end;if ap and CustomTarget~=nil and(au<HoldAltitude+250 and au>HoldAltitude-250)and bD*3.6>bj-250 and c(bF)<25 and at>=0.1 and(CustomTarget.position-bG):len()>2000+au then ct()ap=false end;if VertTakeOff then bc=true;local kd=HoldAltitude;if bF<-30 then a3="Unable to achieve lift. Safety Landing."ag=0;bc=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bJ or HoldAltitude<planet.spaceEngineMinAltitude then if bJ then kd=antigrav.getBaseAltitude()end;if au<kd-100 then bk=0;ag=15;BrakeIsOn=false elseif bF>0 then BrakeIsOn=true;ag=0 elseif bF<-30 then BrakeIsOn=true;ag=15 elseif au>=kd then if bJ then if Autopilot or VectorToTarget then cq()else BrakeIsOn=true;VertTakeOff=false end;a3="Takeoff complete. Singularity engaged"b_("aggLk","AG")else BrakeIsOn=false;a3="VTO complete. Engaging Horizontal Flight"b_("vtoc","VT")cq()end;ag=0 end else if at>0.08 then bk=0;BrakeIsOn=false;ag=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bw then bk=0;ag=20 else ag=0;bk=36;cj(3500)end else bc=autoRollPreference;IntoOrbit=true;bu=false;CancelIntoOrbit=false;bo=false;bm=nil;bn=nil;if bt==nil then bt=planet end;bs=kd;br=true;VertTakeOff=false end end;if bk~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local ke=q(bk-bM,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(ke)local kf=q(vTpitchPID:get(),-1,1)V=kf end end;if IntoOrbit then local cK;local kg=false;local kh=cn(bs)if bt==nil then bt=planet;if VectorToTarget then bt=ad end end;if not br then bs=d(bt.radius+bt.surfaceMaxAltitude+LowOrbitHeight)if bt.hasAtmosphere then bs=d(bt.radius+bt.noAtmosphericDensityAltitude+LowOrbitHeight)end;br=true end;if bq.VectorToTarget then cK=CustomTarget.position-bG end;local ki,kj=b6(bt):escapeAndOrbitalSpeed((bG-bt.center):len()-bt.radius)local kk=bN;if not bo then local kl=false;local km=false;cg(0)bn=0;bl="Aligning to orbital path - OrbitHeight: "..kh;if bq.VectorToTarget then cB(cK:normalize():project_on_plane(bE))kg=bA:dot(cK:project_on_plane(bz):normalize())>0.95 else cB(bC)kg=k7<0.5;if bD<150 then kg=true end end;V=0;bm=0;if bM<=bm+1 and bM>=bm-1 then kl=true else kl=false end;if kk<=bn+1 and kk>=bn-1 then km=true else km=false end;if kl and km and kg then bm=nil;bn=nil;bo=true end else if bq.VectorToTarget then cB(cK:normalize():project_on_plane(bE))elseif bD>150 then cB(bC)end;V=0;if bq.VectorToTarget then local a9,_=b4.computeDistanceAndTime(bD,bj/3.6,ax,0,0,LastMaxBrake)if bu and cK:len()>15000+a9+au then bl="Orbiting to Target"if au-100<=bt.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bt.noAtmosphericDensityAltitude then bu=false end elseif bu or cK:len()<15000+a9+au then a3="Orbit complete, proceeding with reentry"b_("orCom","OB")AutopilotTargetCoords=CustomTarget.position;S=true;ap=true;bq.VectorToTarget,bq.AutopilotAlign=false,false;cr()cN()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bs*0.9 and au<bs*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bs*0.99 and orbit.apoapsis.altitude>=bs*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bu then if bu then BrakeIsOn=false;cg(0)bm=0;if not bq.VectorToTarget then a3="Orbit complete"b_("orCom","OB")cr()end else by=by+1;if by>=2 then bu=true end end else bl="Adjusting Orbit - OrbitHeight: "..kh;bp=true;cj(kj*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kn=bF;local ko=au-bs;local kp=c(ko)if bF<10 and c(bM)<10 and kp<100 then kn=bF*2 end;if kn<10 and c(bM)<10 and kp<100 then kn=kn*2 end;if kn<5 and c(bM)<5 and kp<100 then kn=kn*4 end;VSpdPID:inject(kn)bm=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(ko)bm=q(bm-q(OrbitAltPID:get(),-15,15),-90,90)end end else local kq=2.75;local kr=c(o(ki*kq))local ks=kr%50;if ks>0 then kr=kr-ks+50 end;BrakeIsOn=false;if au<bs*0.8 then bl="Escaping planet gravity - OrbitHeight: "..kh;bm=utils.map(bF,200,0,-15,80)elseif au>=bs*0.8 and au<bs*1.15 then bl="Approaching orbital corridor - OrbitHeight: "..kh;kr=kr*0.75;bm=utils.map(bF,100,-100,-15,65)elseif au>=bs*1.15 and au<bs*1.5 then bl="Approaching orbital corridor - OrbitHeight: "..kh;kr=kr*0.75;if bF<0 or bp then bm=utils.map(au,bs*1.5,bs*1.01,-30,0)else bm=utils.map(au,bs*0.99,bs*1.5,0,30)end elseif au>bs*1.5 then bl="Reentering orbital corridor - OrbitHeight: "..kh;bm=-65;local kt=utils.map(bF,-150,-400,1,0.55)kr=kr*kt end;cj(d(kr))end end;if bm~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local ku=bm-bM;OrbitPitchPID:inject(ku)local kv=q(OrbitPitchPID:get(),-0.5,0.5)V=kv end end;if Autopilot and at==0 and not an then local function kw(i6,orbit)system.print(i6)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cg(0)Q=false;a3=i6;b_("apCom","AP")if orbit or an then if orbit and AutopilotTargetOrbit~=nil and not an then if not au or au==0 then return end;bs=au;br=true end;cr()end end;local kx,ky=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kz=(CustomTarget.position-ad.center):normalize()local kA=kz:project_on_plane((ad.center-bG):normalize()):normalize()local kB=ad.center+kA*(ad.radius+AutopilotTargetOrbit)local kC=CustomTarget.position+(CustomTarget.position-ad.center):normalize()*(AutopilotTargetOrbit-ad:getAltitude(CustomTarget.position))if(bG-kB):len()<(bG-kC):len()then kx=kB else kx=kC;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kx;b9.showWayPoint(ad,AutopilotTargetCoords)ky=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ky=true;TargetSet=true;AutopilotRealigned=true;kx=CustomTarget.position+(bG-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kz=(bG+bC*100000-ad.center):normalize()local kA=kz:project_on_plane((ad.center-bG):normalize()):normalize()if kA:len()<1 then kz=(bG+bA*100000-ad.center):normalize()kA=kz:project_on_plane((ad.center-bG):normalize()):normalize()end;kx=ad.center+kA*(ad.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kx;TargetSet=true;ky=true;AutopilotRealigned=true;b9.showWayPoint(ad,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kx)-bG):len()local hm,eb,ec=b3:getPlanetarySystem(0):castIntersections(bG,bC:normalize(),function(dX)if dX.noAtmosphericDensityAltitude>0 then return dX.radius+dX.noAtmosphericDensityAltitude else return dX.radius+dX.surfaceMaxAltitude*1.5 end end)local hn=eb;if ec~=nil and eb~=nil then hn=math.min(ec,eb)end;if hn~=nil and hn<AutopilotDistance and hm.name==ad.name then AutopilotDistance=hn end;local kc=true;local kD=(ad.center-(bG+vec3(bC):normalize()*AutopilotDistance)):len()-ad.radius;local hl=cn(kD)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hl..'"}')local a9,aa;if not TurnBurn then a9,aa=jK(bD)else a9,aa=jM(bD)end;if bD>300 and AutopilotAccelerating then local cK=vec3(kx)-bG;local kE=q(math.deg(jN(bz,bC:normalize(),cK:normalize()))*bD/500,-90,90)local kF=q(math.deg(jN(bB,bC:normalize(),cK:normalize()))*bD/500,-90,90)if c(kE)<20 and c(kF)<20 then kE=kE*2;kF=kF*2 end;if c(kE)<2 and c(kF)<2 then kE=kE*2;kF=kF*2 end;local k7=-math.deg(jN(bz,bA,bC:normalize()))local k8=-math.deg(jN(bB,bA,bC:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kF-k8)local kG=q(apPitchPID:get(),-1,1)V=V+kG;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kE-k7)local kH=q(apYawPID:get(),-1,1)W=W+kH;ky=true;if c(kE)>2 or c(kF)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"b_("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end end end;if kD<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b6(ad):escapeAndOrbitalSpeed(kD)end end;if not AutopilotCruising and not AutopilotBraking and not ky then kc=cB((kx-bG):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kc=cB(-vec3(bC):normalize())end;if AutopilotAccelerating then if not Q then BrakeIsOn=false;cg(AutopilotInterplanetaryThrottle)L=B(AutopilotInterplanetaryThrottle,2)Q=true end;local kI=unit.getThrottle()if AtmoSpeedAssist then kI=L end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or kI==0 and Q then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then b_("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cg(0)end;if AutopilotDistance<=a9 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then b_("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cg(0)Q=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Z=1 end;if TurnBurn then cg(1,true)end;local _,kj=b6(ad):escapeAndOrbitalSpeed((bG-planet.center):len()-planet.radius)local cK;if CustomTarget~=nil then cK=CustomTarget.position-bG end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bD<50 then kw("Autopilot complete, arrived at space location")BrakeIsOn=true;Z=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bD<=kj and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kw("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;an=true;b9.showWayPoint(ad,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then b_("apCir","AP")AutopilotStatus="Circularizing"end;if bD<=kj then if CustomTarget~=nil then if bC:normalize():dot(cK:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then b_("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;b9.showWayPoint(ad,CustomTarget.position)WaypointSet=true end else kw("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;an=true;b9.showWayPoint(ad,CustomTarget.position)WaypointSet=false end else kw("Autopilot completed, setting orbit",true)Z=0 end end elseif AutopilotStatus=="Circularizing"then kw("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a9 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then b_("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kI=unit.getThrottle()if AtmoSpeedAssist then kI=L end;if kI>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end;AutopilotCruising=false end else if kc then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not an then AutopilotTargetCoords=vec3(ad.center)+(AutopilotTargetOrbit+ad.radius)*bB;AutopilotShipUp=bz;AutopilotShipRight=bB end;AutopilotRealigned=true elseif kc then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"b_("apAcc","AP")end;if not Q then cg(AutopilotInterplanetaryThrottle,true)L=B(AutopilotInterplanetaryThrottle,2)Q=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a3="Autopilot complete, proceeding with reentry"b_("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Z=0;cg(0)Q=false;ProgradeIsOn=true;an=true;b9.showWayPoint(ad,CustomTarget.position)end;if a1 then bc=true;local kF=0;local eW=bG+vec3(unit.getMasterPlayerRelativePosition())local kJ=eW-bG;local kK=vec3(kJ):project_on(bA):len()local kL=vec3(kJ):project_on(bB):len()local ak=z(kK*kK+kL*kL)cB(kJ:normalize())local kM=40;local kN=ak<kM;local kO=100;local kP=q((ak-kM)/2,10,kO)V=0;local kc=c(W)<0.1;if kc and bD<kP and not kN then BrakeIsOn=false;kF=-20 else BrakeIsOn=true;kF=0 end;local kQ=0;if c(kF-bM)>kQ then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kF-bM)local kG=pitchPID:get()V=kG end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local kR=LastMaxBrakeInAtmo;if kR then kR=kR*q(bD/100,0.1,1)*at else kR=LastMaxBrake end;if at<0.01 then kR=LastMaxBrake end;local kS=vec3(core.getWorldAirFrictionAcceleration())local kT=z(kS:len()-kS:project_on(g1):len())*ax;if bD>100 then a9,aa=b4.computeDistanceAndTime(bD,100,ax,0,0,kR+kT)local kU,kV=b4.computeDistanceAndTime(100,0,ax,0,0,kR/2)a9=a9+kU else a9,aa=b4.computeDistanceAndTime(bD,0,ax,0,0,kR/2)end;local kW=HoldAltitude-au;local kX=500+bD;local kY=1;if AutoTakeoff then kY=q(bD/100,0.1,1)end;local kF=(utils.smoothstep(kW,-kX,kX)-0.5)*2*MaxPitch*kY;if not Reentry and not an and not VectorToTarget and bA:dot(bC:normalize())<0.99 then kF=(utils.smoothstep(kW,-kX*q(20-19*at*10,1,20),kX*q(20-19*at*10,1,20))-0.5)*2*MaxPitch*q(2-at*10,1,2)*kY end;if not AltitudeHold then kF=0 end;if LockPitch~=nil then if bX and not IntoOrbit then kF=LockPitch else LockPitch=nil end end;bc=true;local kZ=V;if Reentry then local k_=d(bj)local l0,l1=b4.computeDistanceAndTime(bD,k_/3.6,ax,0,0,LastMaxBrake-planet.gravity*9.8*ax)local l2=au-(planet.noAtmosphericDensityAltitude+5000)if not bL and au>planet.noAtmosphericDensityAltitude+5000 and bD<=k_/3.6 and bD>k_/3.6-10 and c(bC:normalize():dot(bA))>0.9 then cg(0)elseif bL and bD>k_/3.6 and(l0>-1 and l2<=l0 or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cj(k_,true)if not S then kF=-80;if at>0.02 then a3="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kF=0;bc=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then bc=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then cj(k_)if not bL and r:getTargetSpeed(axisCommandId.longitudinal)==bj then S=false;Reentry=false;bc=true end end end;if bD>R and not ao and not VectorToTarget and not BrakeLanding and ForceAlignment then cB(vec3(bC))end;if bV or(VectorToTarget or ao)and AutopilotTargetIndex>0 and at>0.01 then local cK;if bV then if type(bV)=="table"then cK=bV elseif bV<3 and bV>0 then cK=-bE:cross(bC)*5000 elseif bV>=3 then cK=bE:cross(bC)*5000 elseif bV<0 then cK=bC*25000 end elseif CustomTarget~=nil then cK=CustomTarget.position-bG else cK=ad.center-bG end;local kE=math.deg(jN(bE:normalize(),bC,cK))*2;local l3=math.rad(c(bN))if bD>minRollVelocity and at>0.01 then local l4=q(90-kF*2,-90,90)bg=q(kE*2,-l4,l4)local l5=kE;kE=q(q(kE,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(l3)+4*(bM-kF)*math.sin(math.rad(bN)),-YawStallAngle*0.80,YawStallAngle*0.80)kF=q(q(kF*math.cos(l3),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(l5)*math.sin(l3),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bg=0;kE=q(kE,-YawStallAngle*0.80,YawStallAngle*0.80)end;local l6=k7-kE;if bV and c(l6)<=0.0001 and(type(bV)=="table"or type(bV)~="table"and bV<0 and c(bN)<1)then if bV==-2 then cs()end;bV=nil;b_("180Off","BR")return end;if not be and bD>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(l6)local kH=q(yawPID:get(),-1,1)W=W+kH elseif as and aq>-1 or bD<minRollVelocity then cB(cK)elseif be and at>0.01 then if(k7<-YawStallAngle or k7>YawStallAngle)and at>0.01 then cB(bC)end;if(k8<-PitchStallAngle or k8>PitchStallAngle)and at>0.01 then kF=q(bM-k8,bM-PitchStallAngle*0.80,bM+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not ao then local kd=planet:getAltitude(CustomTarget.position)local l2=z(cK:len()^2-(au-kd)^2)local l7=bC:len()-c(bF)StrongBrakes=true;if not ao and not Reentry and l2<=a9+bD*k6/2 and(bC:project_on_plane(bE):normalize():dot(cK:project_on_plane(bE):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cg(0)if AltitudeHold then cs()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(l7<0.1 or l2<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<l2)then if not bJ then b_("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bY=false end;LastDistanceToTarget=l2 end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ao or Reentry)then if CustomTarget~=nil and ad.name==planet.name then local cK=CustomTarget.position-bG;local kd=planet:getAltitude(CustomTarget.position)local l2=z(cK:len()^2-(au-kd)^2)local kR=LastMaxBrakeInAtmo;if kR then a9,aa=b4.computeDistanceAndTime(bD,0,ax,0,0,kR/2)StrongBrakes=true;if l2<=a9+bD*k6/2 and bC:project_on_plane(bE):normalize():dot(cK:project_on_plane(bE):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;S=true;an=false;ap=true;Autopilot=false;cN()end end;LastDistanceToTarget=l2 end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ao or IntoOrbit or Reentry)then if not bu and not IntoOrbit then bs=HoldAltitude;br=true;if VectorToTarget then bq.VectorToTarget=true end;cr()VectorToTarget=false;bo=true end end;if be and at>0.01 and aq==-1 and bD>minRollVelocity and VectorStatus~="Finalizing Approach"then cB(bC)kF=q(bM-k8,bM-PitchStallAngle*0.80,bM+PitchStallAngle*0.80)end;V=kZ;local jW=-1;if BrakeLanding then kF=0;local l8=false;local l9=30;if b5~=nil and b5>0 then local la=q(at,0.4,2)local kR=LastMaxBrakeInAtmo*q(bD/100,0.1,1)*la;local lb=b5*la+kR-ip;local lc=kR/2-ip;local ld=bD-z(c(lc/2)*20/(0.5*ax))*utils.sign(lc)if ld<0 then ld=0 end;local le;if bD>100 then local lf,_=b4.computeDistanceAndTime(bD,100,ax,0,0,kR)local lg,_=b4.computeDistanceAndTime(100,0,ax,0,0,z(kR))le=lf+lg else le=b4.computeDistanceAndTime(bD,0,ax,0,0,z(kR))end;if le<20 then BrakeIsOn=false else local lh=0;if ld>100 then local li,_=b4.computeDistanceAndTime(ld,100,ax,0,0,lb)local lj,_=b4.computeDistanceAndTime(100,0,ax,0,0,b5*la+z(kR)-ip)lh=li+lj else lh,_=b4.computeDistanceAndTime(ld,0,ax,0,0,b5*la+z(kR)-ip)end;lh=(lh+15+bD*k6)*1.1;local lk=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lk then local kd=planet:getAltitude(CustomTarget.position)local ll=au-kd-100;local cK=CustomTarget.position-bG;local lm=z(cK:len()^2-(au-kd)^2)if lm>100 then lk=false elseif ll<=lh or lh==-1 then BrakeIsOn=true;l8=true else BrakeIsOn=false;l8=true end end;if not lk and CalculateBrakeLandingSpeed then if lh>=l9 then BrakeIsOn=true else BrakeIsOn=false end;l8=true end end end;if not bL then cg(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)stablized=true;jW=aq;if jW>-1 then bc=autoRollPreference;if bD<1 or bC:normalize():dot(bE)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if T then a.control.extendLandingGears()b_("grOut","LG",1)end;r:setTargetGroundAltitude(LandingGearGroundHeight)ag=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bC:normalize():dot(-g1)<0.999 then BrakeIsOn=true elseif bF<-brakeLandingRate and not l8 then BrakeIsOn=true elseif not l8 then BrakeIsOn=false end end;if AutoTakeoff or ao then local hm,ec,eb;if AutopilotTargetCoords~=nil then hm,ec,eb=b3:getPlanetarySystem(0):castIntersections(bG,(AutopilotTargetCoords-bG):normalize(),function(dX)return dX.radius+dX.noAtmosphericDensityAltitude end)end;if bJ then if au>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cg(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kF)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not ao then if bL and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif ao and bD<R then Autopilot=true;ao=false;AltitudeHold=false;AutoTakeoff=false;cg(0)elseif ao then cg(0)BrakeIsOn=true end elseif ao and at==0 and ad~=nil and(hm==nil or hm.name==ad.name)then Autopilot=true;ao=false;AltitudeHold=false;AutoTakeoff=false;if not bL then cg(0)end;AutopilotAccelerating=true end end;local ln=aq>-1;local lo=bM;if(VectorToTarget or ao or bV)and not ln and bD>minRollVelocity and at>0.01 then local l3=math.rad(c(bN))lo=bM*c(math.cos(l3))+k8*math.sin(l3)end;local lp=q(kF-lo,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then lp=q(kF-lo,-85,MaxPitch)elseif at<0.01 then lp=q(kF-lo,-MaxPitch,MaxPitch)end;if c(bN)<5 or VectorToTarget or bV or BrakeLanding or ln or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lp)local kG=pitchPID:get()V=V+kG end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;aq=jR()return jJ end;function script.onStart()local lq={}local lr={}local ls=false;local function lt()local function lu(lv)local lw=dbHud_1.hasKey;for cY,cZ in pairs(lv)do if lw(cZ)then local cH=f(dbHud_1.getStringValue(cZ))if cH~=nil then _G[cZ]=cH;ls=true end end end end;if dbHud_1 then if not useTheseSettings then lu(c5())coroutine.yield()lu(b)else lu(b)a3="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"aj=5;ls=false end;coroutine.yield()if ls then a3="Loaded Saved Variables"aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bc=autoRollPreference;bj=AtmoSpeedLimit;aB=[[rgb(]]..d(I+0.5)..","..d(K+0.5)..","..d(J+0.5)..[[)]]aC=[[rgb(]]..d(I*0.9+0.5)..","..d(K*0.9+0.5)..","..d(J*0.9+0.5)..[[)]]elseif not useTheseSettings then a3="No Saved Variables Found - Exit HUD to save settings"end else a3="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a3="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"aj=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=ax end;VectorStatus="Proceeding to Waypoint"end;local function lx()local function ly(lz,lA)if lz>lA then lA=lz end;local lB,lC=0,0;if ContainerOptimization>0 then lB=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lC=FuelTankOptimization*0.05 end;lA=lA*(1-(lB+lC))return lA end;local lD=core.getElementNameById;local lE=fuelX~=0 and fuelY~=0;for cY in pairs(av)do local type=core.getElementTypeById(av[cY])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(av[cY])),'^.*vertical.*$')then bI=true end end;if n(type,'^.*Space Engine$')then bx=true;if n(tostring(core.getElementTagsById(av[cY])),'^.*vertical.*$')then local lF=core.getElementRotationById(av[cY])if lF[4]<0 then if o(-lF[4],0.1)==0.5 then bv=true end else if o(lF[4],0.1)==0.5 then bw=true end end end end;if type=="Landing Gear"then T=true end;if type=="Dynamic Core Unit"then local lG=h(av[cY])if lG>10000 then G=128;H=110 elseif lG>1000 then G=64;H=55 elseif lG>150 then G=32;H=27 end end;aO=aO+h(av[cY])if lE and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lG=h(av[cY])local lH=k(av[cY])local lz=0;local fU=p()if type=="Atmospheric Fuel Tank"then local lA=400;local lI=35.03;if lG>10000 then lA=51200;lI=5480 elseif lG>1300 then lA=6400;lI=988.67 elseif lG>150 then lA=1600;lI=182.67 end;lz=lH-lI;if fuelTankHandlingAtmo>0 then lA=lA+lA*fuelTankHandlingAtmo*0.2 end;lA=ly(lz,lA)aL[#aL+1]={av[cY],lD(av[cY]),lA,lI,lz,fU}end;if type=="Rocket Fuel Tank"then local lA=320;local lI=173.42;if lG>65000 then lA=40000;lI=25740 elseif lG>6000 then lA=5120;lI=4720 elseif lG>700 then lA=640;lI=886.72 end;lz=lH-lI;if fuelTankHandlingRocket>0 then lA=lA+lA*fuelTankHandlingRocket*0.1 end;lA=ly(lz,lA)aN[#aN+1]={av[cY],lD(av[cY]),lA,lI,lz,fU}end;if type=="Space Fuel Tank"then local lA=2400;local lI=182.67;if lG>10000 then lA=76800;lI=5480 elseif lG>1300 then lA=9600;lI=988.67 end;lz=lH-lI;if fuelTankHandlingSpace>0 then lA=lA+lA*fuelTankHandlingSpace*0.2 end;lA=ly(lz,lA)aM[#aM+1]={av[cY],lD(av[cY]),lA,lI,lz,fU}end end end;if not bI then VertTakeOff,VertTakeOffEngine=false,false end end;local function lJ()if gyro~=nil then az=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(as or not as and au<10000)then for _,cZ in pairs(door)do cZ.toggle()end end;if switch then for _,cZ in pairs(switch)do cZ.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,cZ in pairs(forcefield)do cZ.toggle()end end;if antigrav then bJ=antigrav.getState()==1;if bJ and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if T then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if aq~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;GearExtended=true;if T then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(bd)if as and aq~=-1 then b5=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function lK(lL,lM,lN,lO,x,y,lP,lQ,lR,lS)local lT={enableName=lL,disableName=lM,width=lN,height=lO,x=x,y=y,toggleVar=lP,toggleFunction=lQ,drawCondition=lR,hovered=false}if lS then table.insert(lr,lT)else table.insert(lq,lT)end;return lT end;local function lU(lV)if not bO then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif lV=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif lV=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif lV=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bP=c5(lV)showHud=false else bP={}showHud=true end end;local function lW()bO=not bO;if bO then aI=lr;a3="Hold SHIFT to see Settings"bQ=showHud else aI=lq;a3="Hold SHIFT to see Control Buttons"lU()showHud=bQ end end;local function lX(cZ)_G[cZ]=not _G[cZ]if _G[cZ]then a3=cZ.." set to true"else a3=cZ.." set to false"end;if cZ=="showHud"then bQ=_G[cZ]elseif cZ=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cZ=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function lY()local lZ=50;local l_=340;local x=500;local y=aK/2-400;local m0=0;for cY,cZ in pairs(c5("boolean"))do if type(_G[cZ])=="boolean"then lK(cZ,cZ,l_,lZ,x,y,function()return _G[cZ]end,function()lX(cZ)end,function()return true end,true)y=y+lZ+20;if m0==9 then x=x+l_+20;y=aK/2-400;m0=0 else m0=m0+1 end end end;lK("Control View","Control View",l_,lZ,10,aK/2-500,function()return true end,lW,function()return true end,true)lK("View Handling Settings",'Hide Handling Settings',l_,lZ,10,aK/2-(500-lZ),function()return showHandlingVariables end,function()lU("handling")end,function()return true end,true)lK("View Hud Settings",'Hide Hud Settings',l_,lZ,10,aK/2-(500-lZ*2),function()return showHudVariables end,function()lU("hud")end,function()return true end,true)lK("View Physics Settings",'Hide Physics Settings',l_,lZ,10,aK/2-(500-lZ*3),function()return showPhysicsVariables end,function()lU("physics")end,function()return true end,true)end;local function m1()local function m2()if dbHud_1 then local position=bG;local fN=planet.name..". "..#SavedLocations;if radar_1 then local dI,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dI~=nil and dI~=""then fN=fN.." "..radar_1.getConstructName(dI)end end;local cy={}cy={position=position,name=fN,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cy;table.insert(aZ[0],cy)b8.UpdateAtlasLocationsList()a3="Location saved as "..fN else a3="Databank must be installed to save locations"end end;local function m3()TurnBurn=not TurnBurn end;local function m4(m5)if m5==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a1=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function m6()m4(1)end;local function m7()local cx=-1;cx=b8.findAtlasIndex(aZ[0])if cx>-1 then table.remove(aZ[0],cx)end;cx=-1;cx=b8.findAtlasIndex(SavedLocations)if cx~=-1 then a3=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cx)end;b8.adjustAutopilotTargetIndex()b8.UpdateAtlasLocationsList()end;local function m8()local fN=AutopilotTargetName;if fN==nil then local hl=cn((bG-CustomTarget.position):len())fN=CustomTarget.name.." "..hl end;if fN==nil then fN="None"end;return"Engage Autopilot: "..fN end;local function m9()local fN=AutopilotTargetName;if fN==nil then fN=CustomTarget.name end;if fN==nil then fN="None"end;return"Disable Autopilot: "..fN end;local function ma()if safeMass>0 then a3="Safe Mass set to "..B(ax,2).." kg"else a3="Intruder Detection reset\nSafe Mass set to "..B(ax,2).." kg"aj=5;bH=0 end;safeMass=ax end;local function mb()if l()==1 then a1=not a1;if a1 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)b_("folOn","F")else b_("folOff","F")BrakeIsOn=true;bc=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else a3="Follow Mode only works with Remote controller"a1=false end end;local lZ=50;local l_=260;local mc=lK("Enable Brake Toggle","Disable Brake Toggle",l_,lZ,aJ/2-l_/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a3="Brakes in Toggle Mode"else a3="Brakes in Default Mode"end end)lK("Align Prograde","Disable Prograde",l_,lZ,aJ/2-l_/2-50-mc.width,aK/2-lZ+380,function()return ProgradeIsOn end,m6)lK("Align Retrograde","Disable Retrograde",l_,lZ,aJ/2-l_/2+mc.width+50,aK/2-lZ+380,function()return RetrogradeIsOn end,m4,function()return at==0 end)local md=lK(m8,m9,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,ct)lK("Save Position","Save Position",200,md.height,md.x+md.width+30,md.y,function()return false end,m2,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)lK("Update Position","Update Position",200,md.height,md.x+md.width+30,md.y,function()return false end,cv,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lK("Clear Position","Clear Position",200,md.height,md.x-200-30,md.y,function()return true end,m7,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lZ=60;l_=300;local x=10;local y=aK/2-500;lK("Show Help","Hide Help",l_,lZ,x,y,function()return showHelp end,function()showHelp=not showHelp end)y=y+lZ+20;lK("View Settings","View Settings",l_,lZ,x,y,function()return true end,lW)local y=aK/2-300;lK("Enable Turn and Burn","Disable Turn and Burn",l_,lZ,x,y,function()return TurnBurn end,m3)lK("Horizontal Takeoff Mode","Vertical Takeoff Mode",l_,lZ,x+l_+20,y,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a3="Vertical Takeoff Mode"else a3="Horizontal Takeoff Mode"end end,function()return bI end)y=y+lZ+20;lK("Show Orbit Display","Hide Orbit Display",l_,lZ,x,y,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a3="Orbit Display Enabled"else a3="Orbit Display Disabled"end end)lK("Engage Orbiting","Cancel Orbiting",l_,lZ,x+l_+20,y,function()return IntoOrbit end,cr,function()return at==0 and bX end)y=y+lZ+20;lK("Glide Re-Entry","Cancel Glide Re-Entry",l_,lZ,x,y,function()return Reentry end,function()an=true;m6()end,function()return planet.hasAtmosphere and not as end)lK("Parachute Re-Entry","Cancel Parachute Re-Entry",l_,lZ,x+l_+20,y,function()return Reentry end,cN,function()return planet.hasAtmosphere and not as end)y=y+lZ+20;lK("Engage Follow Mode","Disable Follow Mode",l_,lZ,x,y,function()return a1 end,mb,function()return l()==1 end)lK("Enable Repair Arrows","Disable Repair Arrows",l_,lZ,x+l_+20,y,function()return aP end,function()aP=not aP;if aP then a3="Repair Arrows Enabled"else a3="Repair Arrows Diabled"end end,function()return l()==1 end)y=y+lZ+20;if not ExternalAGG then lK("Enable AGG","Disable AGG",l_,lZ,x,y,function()return bJ end,cO,function()return antigrav~=nil end)end;lK("Reset Intruder Alert","Set Safe Mass",l_,lZ,x+l_+20,y,function()return safeMass>0 end,ma,function()return IntruderAlertSystem end)y=y+lZ+20;lK(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,l_*2,lZ,x,y,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a3="IPH Mode: "..iphCondition end)y=y+lZ+20;lK(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,l_*2,lZ,x,y,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a3="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lt()coroutine.yield()lx()coroutine.yield()b9=jI()lJ()lY()m1()aI=lq;coroutine.yield()aZ=c_()b2=d0()b3=b2(c_())b4=ep()b6=eU()b7=fh()b8=jA()b9=jI()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)b_("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,cZ in pairs(door)do cZ.toggle()end end;if switch then for _,cZ in pairs(switch)do cZ.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,cZ in pairs(forcefield)do cZ.toggle()end end;safeMass=ax;cU()if button then button.activate()end;if SetWaypointOnExit then b9.showWayPoint(planet,bG)end;b_("stop","SU")end;function script.onTick(me)local mf=nil;if me=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a3="Radar Contact"b_("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif me=="tenthSecond"then local function mg()local mh=system.createData;local mi=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mi(panelInterplanetary,"value")interplanetaryHeaderText=mh('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mi(panelInterplanetary,"value")widgetDistanceText=mh('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=mi(panelInterplanetary,"value")widgetTravelTimeText=mh('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mi(panelInterplanetary,"value")widgetMaxMassText=mh('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mi(panelInterplanetary,"value")widgetTargetOrbitText=mh('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mi(panelInterplanetary,"value")widgetCurBrakeDistanceText=mh('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mi(panelInterplanetary,"value")widgetCurBrakeTimeText=mh('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mi(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mh('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mi(panelInterplanetary,"value")widgetMaxBrakeTimeText=mh('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mi(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mh('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mj()s(panelInterplanetary)panelInterplanetary=nil end;local function mk()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ad.center-bG):len()else AutopilotDistance=(CustomTarget.position-bG):len()end end;local eS=bD;local kI=unit.getThrottle()/100;if AtmoSpeedAssist then kI=L end;local ml,mm=b4.computeDistanceAndTime(bD,MaxGameVelocity,ax,a:maxForceForward()*kI,warmup,0)local a9,aa;if not TurnBurn then a9,aa=b9.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a9,aa=b9.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mn;if not TurnBurn and eS>0 then _,mn=b9.GetAutopilotBrakeDistanceAndTime(eS)else _,mn=b9.GetAutopilotTBBrakeDistanceAndTime(eS)end;local mo=0;local mp=0;if AutopilotCruising or not Autopilot and eS>5 then mp=b4.computeTravelTime(eS,0,AutopilotDistance)elseif a9+ml<AutopilotDistance then mo=AutopilotDistance-(a9+ml)mp=b4.computeTravelTime(8333.0556,0,mo)else local mq=(AutopilotDistance-a9)/ml;ml=AutopilotDistance-a9;mm=mm*mq end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mp elseif AutopilotBraking then return mn elseif AutopilotCruising then return mp+mn else return mm+aa+mp end end;local function mr(ip,ms)if ip==nil then ip=core.g()end;ip=B(ip,5)if ms~=nil and ms or(mf==nil or mf~=ip)then local eV=core.getVelocity()local eS=vec3(eV):len()local mt=f(unit.getData()).maxBrake;if mt~=nil and mt>0 and as then mt=mt/q(eS/100,0.1,1)mt=mt/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mt)/2 else LastMaxBrakeInAtmo=mt end end end;if mt~=nil and mt>0 then LastMaxBrake=mt end;mf=ip end end;mr(nil,true)if at>0 and not WasInAtmo then if not bL and AtmoSpeedAssist and(AltitudeHold or Reentry)then cg(1)P=false end end;if bK~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bK then cj(bK,TRUE)else bK=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mg()end;if AutopilotTargetName~=nil then local mu=CustomTarget~=nil;local mv=LastMaxBrakeInAtmo/ad:getGravity(ad.center+vec3(0,0,1)*ad.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mk()if mu and not Autopilot then ak=(bG-CustomTarget.position):len()else ak=(AutopilotTargetCoords-bG):len()end;if not TurnBurn then a9,aa=b9.GetAutopilotBrakeDistanceAndTime(bD)ab,ac=b9.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a9,aa=b9.GetAutopilotTBBrakeDistanceAndTime(bD)ab,ac=b9.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hl=cn(ak)t(widgetDistanceText,'{"label": "distance", "value": "'..hl..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cP(travelTime)..'", "unit":""}')hl=cn(a9)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hl..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cP(aa)..'", "unit":""}')hl=cn(ab)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hl..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cP(ac)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",mv/1000)..'", "unit":" Tons"}')hl=cn(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..hl..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if at==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mj()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif me=="oneSecond"then local function mw(fx)local mx=0;aG=""local my=aO;local mz=0;local mA=0;local mB=0;local fW=0;local fX=""local mC=core.getElementHitPointsById;for cY in pairs(av)do local lG=0;local mD=0;mD=h(av[cY])lG=mC(av[cY])mz=mz+lG;if lG<mD then if lG==0 then mB=mB+1 else mA=mA+1 end;if aP and#aD==0 then position=vec3(core.getElementPositionById(av[cY]))local x=position.x-G;local y=position.y-G;local iR=position.z-G;table.insert(aD,core.spawnArrowSticker(x,y,iR+1,"down"))table.insert(aD,core.spawnArrowSticker(x,y,iR+1,"down"))core.rotateSticker(aD[2],0,0,90)table.insert(aD,core.spawnArrowSticker(x+1,y,iR,"north"))table.insert(aD,core.spawnArrowSticker(x+1,y,iR,"north"))core.rotateSticker(aD[4],90,90,0)table.insert(aD,core.spawnArrowSticker(x-1,y,iR,"south"))table.insert(aD,core.spawnArrowSticker(x-1,y,iR,"south"))core.rotateSticker(aD[6],90,-90,0)table.insert(aD,core.spawnArrowSticker(x,y-1,iR,"east"))table.insert(aD,core.spawnArrowSticker(x,y-1,iR,"east"))core.rotateSticker(aD[8],90,0,90)table.insert(aD,core.spawnArrowSticker(x,y+1,iR,"west"))table.insert(aD,core.spawnArrowSticker(x,y+1,iR,"west"))core.rotateSticker(aD[10],-90,0,90)table.insert(aD,av[cY])end elseif aP and#aD>0 and aD[11]==av[cY]then for fP in pairs(aD)do core.deleteSticker(aD[fP])end;aD={}end end;mx=d(mz/my*100)if mx<100 then fx[#fx+1]=cc(0,0,"","pbright txt")fW=d(mx*2.55)fX=e("rgb(%d,%d,%d)",255-fW,fW,0)if mx<100 then fx[#fx+1]=cc("50%",1035,"Elemental Integrity: "..mx.."%","txtbig txtmid","fill:"..fX)if mB>0 then fx[#fx+1]=cc("50%",1055,"Disabled Modules: "..mB.." Damaged Modules: "..mA,"txtbig txtmid","fill:"..fX)elseif mA>0 then fx[#fx+1]=cc("50%",1055,"Damaged Modules: "..mA,"txtbig txtmid","fill:"..fX)end end end end;local function mE()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function mF()local fU=p()local h9=bD;local mG=fU-aw;if h9>1.38889 then h9=h9/1000;local mH=h9*(fU-aw)TotalDistanceTravelled=TotalDistanceTravelled+mH;ae=ae+mH end;af=af+mG;TotalFlightTime=TotalFlightTime+mG;aw=fU end;local function mI()if safeMass>0 then if ax>safeMass+50 then bH=d(ax-safeMass)safeMass=-1 elseif ax<safeMass then safeMass=ax end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;if IntruderAlertSystem then mI()end;mF()b7.UpdatePipe()mE()local fx={}b7.ExtraData(fx)if ShowOdometer then fx=b7.DrawOdometer(fx,ae,TotalDistanceTravelled,af)end;if ShouldCheckDamage then mw(fx)end;al=table.concat(fx,"")collectgarbage("collect")elseif me=="fiveSecond"then if not UseSatNav then return end;ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local cH=f(dbHud_1.getStringValue("SavedLocations"))if cH~=nil then _G["SavedLocations"]=cH;local cx=-1;local cy;for cY,cZ in pairs(SavedLocations)do if cZ.name and cZ.name=="SatNav Location"then cx=cY;break end end;if cx~=-1 then cy=SavedLocations[cx]cx=-1;for cY,cZ in pairs(aZ[0])do if cZ.name and cZ.name=="SatNav Location"then cx=cY;break end end;if cx>-1 then aZ[0][cx]=cy end;b8.UpdateAtlasLocationsList()a3=cy.name.." position updated"end end;for i=1,#bR do if bR[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bR[i].name)b8.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif me=="msgTick"then local fx={}b7.DisplayMessage(fx,"empty")a3="empty"unit.stopTimer("msgTick")aj=3 elseif me=="animateTick"then bb=true;ba=false;ah=0;ai=0;unit.stopTimer("animateTick")elseif me=="hudTick"then local function mJ(fx)local mK=d(q(ak/(aJ/4)*255,0,255))fx[#fx+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ah,ai,d(I+0.5)+mK,d(K+0.5)-mK,d(J+0.5)-mK)end;local function mL()for _,cZ in pairs(aI)do if cZ.hovered then if not cZ.drawCondition or cZ.drawCondition()then cZ.toggleFunction()end;cZ.hovered=false end end end;local function mM()local function mN(mO,mP,x,y,lN,lO)if mO>x and mO<x+lN and mP>y and mP<y+lO then return true else return false end end;local x=ah+aJ/2;local y=ai+aK/2;for _,cZ in pairs(aI)do cZ.hovered=mN(x,y,cZ.x,cZ.y,cZ.width,cZ.height)end end;local function mQ(fx)local function mR(fx,mS,hover,x,y,eL,mT,mU,mV,mW,mX)if type(mW)=="function"then mW=mW()end;if type(mX)=="function"then mX=mX()end;fx[#fx+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",x,y,eL,mT)if mS then fx[#fx+1]=e("%s'",mU)else fx[#fx+1]=mV end;if hover then fx[#fx+1]=" style='stroke:white; stroke-width:2'"else fx[#fx+1]=" style='stroke:black; stroke-width:1'"end;fx[#fx+1]="></rect>"fx[#fx+1]=e("<text x='%f' y='%f' font-size='24' fill='",x+eL/2,y+mT/2+5)if mS then fx[#fx+1]="black"else fx[#fx+1]="white"end;fx[#fx+1]="' text-anchor='middle' font-family='Montserrat'>"if mS then fx[#fx+1]=e("%s</text>",mW)else fx[#fx+1]=e("%s</text>",mX)end end;local mY="rgb(50,50,50)'"local mZ="rgb(210,200,200)"local m_=mR;for _,cZ in pairs(aI)do local lM=cZ.disableName;local lL=cZ.enableName;if type(lM)=="function"then lM=lM()end;if type(lL)=="function"then lL=lL()end;if not cZ.drawCondition or cZ.drawCondition()then m_(fx,cZ.toggleVar(),cZ.hovered,cZ.x,cZ.y,cZ.width,cZ.height,mZ,mY,lM,lL)end end end;local n0=B(ResolutionX/2,0)local n1=B(ResolutionY/2,0)local fx={}b7.HUDPrologue(fx)if showHud then b7.UpdateHud(fx)else if AlwaysVSpd then b7.DrawVerticalSpeed(fx,au)end;b7.DisplayOrbitScreen(fx)b7.DrawWarnings(fx)end;if bO and bP~={}then b7.DrawSettings(fx)end;b7.HUDEpilogue(fx)fx[#fx+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if a3~="empty"then b7.DisplayMessage(fx,a3)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b7.DrawDeadZone(fx)end end;if w()==0 then if l()==1 and a2 then if not AltIsOn then mM()mQ(fx)end;if not ba and not bb then local n2=table.concat(fx,"")fx={}fx[#fx+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fx[#fx+1]=n2;fx[#fx+1]="</body>"ba=true;fx[#fx+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fx,"")system.setScreen(content)elseif bb then local n2=table.concat(fx,"")fx={}fx[#fx+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fx[#fx+1]=n2;fx[#fx+1]="</body>"end;if not ba then fx[#fx+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],n0,n1,ah,ai)end else mL()end else if not a2 and l()==0 then mL()if ak>DeadZone then if DisplayDeadZone then mJ(fx)end end elseif not AltIsOn or AltIsOn and a2 then mM()mQ(fx)end;fx[#fx+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],n0,n1,ah,ai)end;fx[#fx+1]=[[</svg></body>]]content=table.concat(fx,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif me=="apTick"then b9.APTick()b7.UpdateRadar()end end;function script.onFlush()local function n3(n4,kP)local n5=vec3()local n6=vec3()if n4==axisCommandId.longitudinal then n5=vec3(core.getConstructOrientationForward())n6=bA elseif n4==axisCommandId.vertical then n5=vec3(core.getConstructOrientationUp())n6=bz elseif n4==axisCommandId.lateral then n5=vec3(core.getConstructOrientationRight())n6=bB else return vec3()end;local n7=vec3(core.getWorldGravity())local n8=n7:dot(n6)local n9=vec3(core.getWorldAirFrictionAcceleration())local na=n9:dot(n6)local nb=vec3(core.getVelocity())local nc=nb:dot(n5)local nd=kP*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nd-nc)local ne=targetSpeedPID2:get()local nf=(ne-na-n8)*n6;return nf end;local function ng(n4,kP)local n5=vec3()local n6=vec3()if n4==axisCommandId.longitudinal then n5=vec3(core.getConstructOrientationForward())n6=bA elseif n4==axisCommandId.vertical then n5=vec3(core.getConstructOrientationUp())n6=bz elseif n4==axisCommandId.lateral then n5=vec3(core.getConstructOrientationRight())n6=bB else return vec3()end;local n7=vec3(core.getWorldGravity())local n8=n7:dot(n6)local n9=vec3(core.getWorldAirFrictionAcceleration())local na=n9:dot(n6)local nb=vec3(core.getVelocity())local nc=nb:dot(n5)local nd=kP*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nd-nc)local ne=targetSpeedPID:get()local nf=(ne-na-n8)*n6;return nf end;local function nh(ni,g0,jE)local nj=ni:cross(jE):normalize_inplace()local gN=math.acos(q(nj:dot(-g0),-1,1))*constants.rad2deg;if nj:cross(-g0):dot(jE)<0 then gN=-gN end;return gN end;if antigrav and not ExternalAGG then if not bJ and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bL=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bL and P then cg(0)P=false elseif not bL and not P then L=0;P=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local nk=q(U+V+system.getControlDeviceForwardInput(),-1,1)local nl=q(X+a0+system.getControlDeviceYawInput(),-1,1)local nm=q(Y+W-system.getControlDeviceLeftRightInput(),-1,1)local nn=Z;bE=vec3(core.getWorldVertical())if bE==nil or bE:len()==0 then bE=(planet.center-bG):normalize()end;bz=vec3(core.getConstructWorldOrientationUp())bA=vec3(core.getConstructWorldOrientationForward())bB=vec3(core.getConstructWorldOrientationRight())bC=vec3(core.getWorldVelocity())bG=vec3(core.getConstructWorldPos())ax=core.getConstructMass()bD=vec3(bC):len()bF=-bE:dot(bC)bN=getRoll(bE,bA,bB)local no=bN/180*math.pi;local np=math.cos(no)local nq=math.sin(no)bM=nh(bE,bA,bB*np+bz*nq)local nr=bC:normalize()local ns=c(bN)local nt=utils.sign(bN)local nu=vec3(core.getWorldAngularVelocity())local nw=nk*pitchSpeedFactor*bB+nl*rollSpeedFactor*bA+nm*yawSpeedFactor*bz;if bc==true and bE:len()>0.01 then local nx=c(bg-bN)if((ProgradeIsOn or Reentry or BrakeLanding or an or AltitudeHold or IntoOrbit)and nx>0 or at>0.0 and nx<autoRollRollThreshold and autoRollPreference)and nl==0 and c(bM)<85 then local ny=bg;local nz=autoRollFactor;if at==0 then nz=nz/4;bg=0;ny=0 end;if rollPID==nil then rollPID=pid.new(nz*0.01,0,nz*0.1)end;rollPID:inject(ny-bN)local nA=rollPID:get()nw=nw+nA*bA end end;if bE:len()>0.01 and at>0.0 then local nB=20.0;if turnAssist==true and ns>nB and nk==0 and nm==0 then local nC=turnAssistFactor*0.1;local nD=turnAssistFactor*0.025;local nE=(ns-nB)/(180-nB)*180;local nF=0;if nE<90 then nF=nE/90 elseif nE<180 then nF=(180-nE)/90 end;nF=nF*nF;local nG=-nt*nD*(1.0-nF)local nH=nC*nF;nw=nw+nH*bB+nG*bz end end;local nI=1;local nJ=0;local nK=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bj=q(bj+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif ay then local nL=L;L=B(q(L+speedChangeLarge/100,-1,1),2)if L>=0 and nL<0 then L=0;ay=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bj=q(bj-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif ay then local nL=L;L=B(q(L-speedChangeLarge/100,-1,1),2)if L<=0 and nL>0 then L=0;ay=false end end else ay=true end;M=0;if as and AtmoSpeedAssist and bL then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bj/3.6-bC:dot(bA))local nM=throttlePID:get()O=q(nM,-1,1)if O<L and at>0.005 then N=true;r:setThrottleCommand(axisCommandId.longitudinal,q(O,0.01,1))else N=false;r:setThrottleCommand(axisCommandId.longitudinal,L)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bC:len()-bj/3.6)local nN=q(brakePID:get(),0,1)if at>0 and bF<-80 or at>0.005 then M=nN end;if M>0 then if N and O==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else O=q(O,0.01,1)end;local nO=''local nP=vec3()local nQ=n3(axisCommandId.vertical,ag*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",nQ,nJ)local nR='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then nR=nR..ExtraLongitudeTags end;local nS=r:getAxisCommandType(axisCommandId.longitudinal)local nT=r:composeAxisAccelerationFromThrottle(nR,axisCommandId.longitudinal)local nU=ng(axisCommandId.lateral,LeftAmount*1000)nO=nO..' , '.."lateral airfoil , lateral ground "nP=nP+nU;if nP:len()>constants.epsilon then a:setEngineForceCommand(nO,nP,nJ,'','','',nK)end;a:setEngineForceCommand(nR,nT,nI)local nV='thrust analog vertical fueled 'local nW='thrust analog lateral fueled 'if ExtraLateralTags~="none"then nW=nW..ExtraLateralTags end;if ExtraVerticalTags~="none"then nV=nV..ExtraVerticalTags end;if ag~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(nV,nQ,nI)else a:setEngineForceCommand(nV,vec3(),nI)end;if LeftAmount~=0 then a:setEngineForceCommand(nW,nU,nI)else a:setEngineForceCommand(nW,vec3(),nI)end;if nn==0 then nn=M end;local nX=-nn*(brakeSpeedFactor*bC+brakeFlatFactor*nr)a:setEngineForceCommand('brake',nX)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,L)end;local kP=unit.getAxisCommandValue(0)if not bL then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bC:len()-kP/3.6)local nN=q(brakePID:get(),0,1)nn=q(nn+nN,0,1)end;local nX=-nn*(brakeSpeedFactor*bC+brakeFlatFactor*nr)a:setEngineForceCommand('brake',nX)local nO=''local nP=vec3()local nY=false;local nR='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then nR=nR..ExtraLongitudeTags end;local nS=r:getAxisCommandType(axisCommandId.longitudinal)if nS==axisCommandType.byThrottle then local nT=r:composeAxisAccelerationFromThrottle(nR,axisCommandId.longitudinal)a:setEngineForceCommand(nR,nT,nI)elseif nS==axisCommandType.byTargetSpeed then local nT=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nO=nO..' , '..nR;nP=nP+nT;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then nY=true end end;local nW='thrust analog lateral 'if ExtraLateralTags~="none"then nW=nW..ExtraLateralTags end;local nZ=r:getAxisCommandType(axisCommandId.lateral)if nZ==axisCommandType.byThrottle then local n_=r:composeAxisAccelerationFromThrottle(nW,axisCommandId.lateral)a:setEngineForceCommand(nW,n_,nI)elseif nZ==axisCommandType.byTargetSpeed then local nU=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nO=nO..' , '..nW;nP=nP+nU end;local nV='thrust analog vertical 'if ExtraVerticalTags~="none"then nV=nV..ExtraVerticalTags end;local o0=r:getAxisCommandType(axisCommandId.vertical)if o0==axisCommandType.byThrottle then local nQ=r:composeAxisAccelerationFromThrottle(nV,axisCommandId.vertical)if ag~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(nV,nQ,nI,'airfoil','ground','',nK)else a:setEngineForceCommand(nV,vec3(),nI)a:setEngineForceCommand('airfoil vertical',nQ,nI,'airfoil','','',nK)a:setEngineForceCommand('ground vertical',nQ,nI,'ground','','',nK)end elseif o0==axisCommandType.byTargetSpeed then if ag<0 then a:setEngineForceCommand('hover',vec3(),nI)end;local o1=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nO=nO..' , '..nV;nP=nP+o1 end;if nP:len()>constants.epsilon then if Z~=0 or nY or c(nr:dot(bA))<0.8 then nO=nO..', brake'end;a:setEngineForceCommand(nO,nP,nJ,'','','',nK)end end;local o2=torqueFactor*(nw-nu)local o3=vec3(core.getWorldAirFrictionAngularAcceleration())o2=o2-o3;a:setEngineTorqueCommand('torque',o2,nI,'airfoil','','',nK)a:setBoosterCommand('rocket_engine')if a8 and not VanillaRockets then local eS=vec3(core.getVelocity()):len()local o4=0.15;if not bL then local o5=r:getTargetSpeed(axisCommandId.longitudinal)if eS*3.6>o5*(1-o4)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS*3.6<o5*(1-o4)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kI=unit.getThrottle()if AtmoSpeedAssist then kI=L*100 end;local kP=kI/100;if j==0 then kP=kP*MaxGameVelocity;if eS>=kP*(1-o4)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS<kP*(1-o4)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local k_=d(bj)kP=kP*k_/3.6;if eS>=kP*(1-o4)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS<kP*(1-o4)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local jy=coroutine.status(beginSetup)if jy=="suspended"then local ch,jz=coroutine.resume(beginSetup)if jz then system.print("ERROR STARTUP: "..jz)end elseif jy=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not ba and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(o6)local D=1;local function o7(o8)local function o9(oa,o8)local ob={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-50,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oc=oa;for _,cZ in ipairs(ob)do if o8 and oc>cZ then oa=cZ elseif oa<cZ and not o8 then oa=cZ;break end end;return oa end;if o8 then D=-1 end;if not ExternalAGG and bJ then if a2 and o8 then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a5;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a2 then bs=o9(bs,o8)else bs=bs+D*a4 end;if bs<planet.noAtmosphericDensityAltitude then bs=planet.noAtmosphericDensityAltitude end else if a2 and as then HoldAltitude=o9(HoldAltitude,o8)else HoldAltitude=HoldAltitude+D*a4 end end else r:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function od(o8)if o8 then D=-1 end;if not a2 then if AtmoSpeedAssist and not AltIsOn then L=q(L+D*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if o8 then D=1 else D=nil end;b8.adjustAutopilotTargetIndex(D)end end;local function oe(of)if not as then a3="Flight Assist in Atmo only"return end;local d5=type(of)if bV==nil then if d5=="table"then if Autopilot or VectorToTarget then ct()end;b_("180On","BR")elseif of==1 then b_("bnkLft","BR")else b_("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cs()if d5~="table"then of=of+1 end end;bV=of else b_("180Off","BR")bV=nil end end;if o6=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cg(0)if vBooster or hover then if as and aq==-1 then b_("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bc=true;GearExtended=false else if T then b_("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if as then BrakeIsOn=true end end end;if T and not BrakeLanding and not(vBooster or hover)then b_("grOut","LG",1)a.control.extendLandingGears()end else if T then b_("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif o6=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif o6=="forward"then U=U-1 elseif o6=="backward"then if AltIsOn then oe(-bC*5000)else U=U+1 end elseif o6=="left"then if AltIsOn then oe(1)else X=X-1 end elseif o6=="right"then if AltIsOn then oe(3)else X=X+1 end elseif o6=="yawright"then Y=Y-1 elseif o6=="yawleft"then Y=Y+1 elseif o6=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif o6=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif o6=="up"then ag=ag+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif o6=="down"then ag=ag-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif o6=="groundaltitudeup"then o7()elseif o6=="groundaltitudedown"then o7(true)elseif o6=="option1"then b8.adjustAutopilotTargetIndex()toggleView=false elseif o6=="option2"then b8.adjustAutopilotTargetIndex(1)toggleView=false elseif o6=="option3"then local function og()aH=not aH;if not aH then b_("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else b_("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;og()toggleView=false elseif o6=="option4"then bV=nil;ct()toggleView=false elseif o6=="option5"then function ToggleLockPitch()if LockPitch==nil then b_("lkPOn","LP")if not a2 then LockPitch=bM else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else b_("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()toggleView=false elseif o6=="option6"then cs()toggleView=false elseif o6=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a3="Collision System Enabled"else a3="Collision System Secured"end;toggleView=false elseif o6=="option8"then stablized=not stablized;if not stablized then a3="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()b_("gsOff","GS")else a3="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)b_("gsOn","GS")end;toggleView=false elseif o6=="option9"then if gyro~=nil then gyro.toggle()az=gyro.getState()==1;if az then b_("gyOn","GA")else b_("gyOff","GA")end end;toggleView=false elseif o6=="lshift"then if AltIsOn then a2=true end;if w()==1 then a2=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then a2=true;bb=false;ba=false end elseif o6=="brake"then if BrakeToggleStatus then cA()elseif not BrakeIsOn then cA()else BrakeIsOn=true end elseif o6=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif o6=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a8 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a8=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a8=false end elseif o6=="stopengines"then local function oh()if E-F<1.5 then b_("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bV=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a1=false;Q=false;an=false;ao=false;S=false;bc=autoRollPreference;VectorToTarget=false;TurnBurn=false;az=false;LockPitch=nil;IntoOrbit=false end end;oh()F=E;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if L~=0 then r:resetCommand(axisCommandId.longitudinal)cg(0)else cg(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if as then cj(AtmoSpeedLimit)else cj(MaxGameVelocity*3.6)end end end elseif o6=="speedup"then od()elseif o6=="speeddown"then od(true)elseif o6=="antigravity"and not ExternalAGG then if antigrav~=nil then cO()end end end;function script.onActionStop(o6)local function oi()if not ExternalAGG and bJ then a7=a5 end;if AltitudeHold or VertTakeOff or IntoOrbit then a6=a4 end end;if o6=="forward"then U=0 elseif o6=="backward"then U=0 elseif o6=="left"then if bV then if bV==2 then bV=-2 else bV=-1 end end;X=0 elseif o6=="right"then if bV then if bV==4 then bV=-2 else bV=-1 end end;X=0 elseif o6=="yawright"then Y=0 elseif o6=="yawleft"then Y=0 elseif o6=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif o6=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif o6=="up"then ag=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif o6=="down"then ag=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif o6=="groundaltitudeup"then oi()toggleView=false elseif o6=="groundaltitudedown"then oi()toggleView=false elseif o6=="lshift"then if w()==1 then ah=0;ai=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then bb=false;ba=false end;a2=false elseif o6=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cA()else BrakeIsOn=false end end elseif o6=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(o6)local D=1;local function oj(o8)if o8 then D=-1 end;if not ExternalAGG and bJ then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a7;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a7=a7*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bs=bs+D*a6;if bs<planet.noAtmosphericDensityAltitude then bs=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a6 end;a6=a6*1.05 else r:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function ok(o8)if o8 then D=-1 end;if not a2 then if AtmoSpeedAssist and not AltIsOn then L=q(L+D*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if o6=="groundaltitudeup"then if not a2 then oj()end elseif o6=="groundaltitudedown"then if not a2 then oj(true)end elseif o6=="speedup"then ok()elseif o6=="speeddown"then ok(true)end end;function script.onInputText(cd)local function ol()for cY,cZ in pairs(c5())do dbHud_1.setStringValue(cZ,g(nil))end;for cY,cZ in pairs(b)do if cZ~="SavedLocations"then dbHud_1.setStringValue(cZ,g(nil))end end;a3="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"aj=5 end;local function om(fN,eW)local on=false;local dd='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dq,dr,dy,dz,dA=n(eW,dd)for _,cZ in pairs(b3[0])do if cZ.name==fN then dz=math.rad(dz)dy=math.rad(dy)local planet=aZ[A(dq)][A(dr)]local em=math.cos(dy)local oo=vec3(em*math.cos(dz),em*math.sin(dz),math.sin(dy))return planet.center+(planet.radius+dA)*oo end end;return fN.." not found"end;local function op(oq,planet,eW,gJ)local function os(eW)local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dq,dr,dy,dz,dA=n(eW,dd)if dq=="0"and dr=="0"then return vec3(A(dy),A(dz),A(dA))end;dz=math.rad(dz)dy=math.rad(dy)local planet=aZ[A(dq)][A(dr)]local em=math.cos(dy)local oo=vec3(em*math.cos(dz),em*math.sin(dz),math.sin(dy))return planet.center+(planet.radius+dA)*oo end;if dbHud_1 or gJ then local cy={}local position=os(eW)if planet.name=="Space"then cy={position=position,name=oq,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cy={position=position,name=oq,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;if not gJ then SavedLocations[#SavedLocations+1]=cy else for cY,cZ in pairs(aZ[0])do if cZ.name and oq==cZ.name then table.remove(aZ[0],cY)end end end;table.insert(aZ[0],cy)b8.UpdateAtlasLocationsList()else a3="Databank must be installed to save permanent locations"end end;local i;local ot,ou=nil,nil;local ov="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cd," ")ot=cd;if i~=nil then ot=string.sub(cd,0,i-1)ou=string.sub(cd,i+1)end;if ot=="/help"or ot=="/commands"then for iv in string.gmatch(ov,"([^\n]+)")do system.print(iv)end;return elseif ot=="/setname"then if ou==nil or ou==""then a3="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cv(ou)else a3="Select a saved target to rename first"end elseif ot=="/addlocation"or string.find(cd,"::pos")~=nil then local gJ=false;local oq="0-Temp"if ou==nil or ou==""then ou=ot;gJ=true end;i=string.find(ou,"::")if not gJ then oq=string.sub(ou,1,i-2)end;local eW=string.sub(ou,i)local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dq,dr,dy,dz,dA=n(eW,dd)local planet=aZ[A(dq)][A(dr)]if planet.name=="Space"then local je=vec3(A(dy),A(dz),A(dA))local dv=sys:closestBody(je)if(je-dv.center):len()<dv.radius+dv.noAtmosphericDensityAltitude then planet=dv end end;op(oq,planet,eW,gJ)a3="Added "..oq.." to saved locations,\nplanet "..planet.name.." at "..eW;aj=5 elseif ot=="/agg"then if ou==nil or ou==""then a3="Usage: /agg targetheight"return end;ou=A(ou)if ou<1000 then ou=1000 end;AntigravTargetAltitude=ou;a3="AGG Target Height set to "..ou elseif ot=="/G"then if ou==nil or ou==""then a3="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if ou=="dump"then for cY,cZ in pairs(c5())do if type(_G[cZ])=="boolean"then if _G[cZ]==true then system.print(cZ.." true")else system.print(cZ.." false")end elseif _G[cZ]==nil then system.print(cZ.." nil")else system.print(cZ.." ".._G[cZ])end end;return end;i=string.find(ou," ")local ow=string.sub(ou,0,i-1)local ox=string.sub(ou,i+1)for cY,cZ in pairs(c5())do if cZ==ow then a3="Variable "..ow.." changed to "..ox;local oy=type(_G[cZ])if oy=="number"then ox=A(ox)elseif oy=="boolean"then if string.lower(ox)=="true"then ox=true else ox=false end end;_G[cZ]=ox;return end end;a3="No such global variable: "..ow elseif ot=="/copydatabank"then if dbHud_2 then cU(true)else a3="Spare Databank required to copy databank"end elseif ot=="/iphWP"then if AutopilotTargetIndex>0 then system.print(b9.showWayPoint(ad,AutopilotTargetCoords,true))a3="::pos waypoint shown in lua chat"else a3="No target selected in IPH"end end end;function script.onEnter(dI)if radar_1 and not as and not bS then unit.setTimer("contact",0.1)end end;function script.onLeave(dI)if radar_1 and CollisionSystem then if#bW>650 then dI=tostring(dI)bW[dI]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
