name: ArchHud - Archaegeo v1.132 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.132;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=core.getConstructMass;local m=Nav.control.isRemoteControlled;local n=math.atan;local o=string.match;local tostring=tostring;local p=utils.round;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=Nav.axisCommandManager;local t=system.setWaypoint;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=false;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=false;local ar=""local as=j()>0;local at=j()local au=core.getAltitude()local av=core.getElementIdList()local aw=q()local ax=nil;local ay=false;local az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]local aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH=ResolutionX;local aI=ResolutionY;local aJ=false;local aK=false;local aL=0;local aM=nil;local aN={}local aO={}local aP={}local aQ=0;local aR=false;local aS={}local aT={}local aU=d(1/apTickRate)*2;local aV={}local aW={}local aX={}local aY={}local aZ=false;local a_=16;local b0=0;local b1=nil;local b2=""local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=q()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=q()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=vec3(core.getConstructWorldPos())local bL=false;local bM=false;local bN=nil;local bO=true;local function bP(bQ,bR)if bR==nil then bR=false end;if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not bR then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,bQ)I=r(z(bQ*100,0)/100,-1,1)end;local function bS(bQ,bR)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bR then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,bQ)bN=bQ end;local function bT(bU)if aH==1920 then return bU else return z(aH*bU/1920,0)end end;local function bV(bU)if aI==1080 then return bU else return z(aI*bU/1080,0)end end;local function bW(bX,bY)if bX==nil then bX=core.g()end;bX=z(bX,5)if bY~=nil and bY or(aM==nil or aM~=bX)then local bZ=core.getVelocity()local b_=vec3(bZ):len()local c0=f(unit.getData()).maxBrake;if c0~=nil and c0>0 and as then c0=c0/r(b_/100,0.1,1)c0=c0/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c0)/2 else LastMaxBrakeInAtmo=c0 end end end;if c0~=nil and c0>0 then LastMaxBrake=c0 end;aM=bX end end;local function c1()AtlasOrdered={}for c2,bU in pairs(b1[0])do table.insert(AtlasOrdered,{name=bU.name,index=c2})end;local function c3(c4,c5)return c4.name<c5.name end;table.sort(AtlasOrdered,c3)end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function c9(ca,cb)local cc=vec3(cb)if ca.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=ca.planetarySystemId},MapPosition)end;local cd=cc-ca.center;local ai=cd:len()local ce=ai-ca.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=math.deg(cf),longitude=math.deg(cg),altitude=ce,bodyId=ca.bodyId,systemId=ca.planetarySystemId},MapPosition)end;local function ci(ai,cj)local ck=ai>100000;local cl,cm=""if cj==nil then cj=1 end;if ck then cl,cm=z(ai/1000/200,cj),"SU"elseif ai<1000 then cl,cm=z(ai,cj),"M"else cl,cm=z(ai/1000,cj),"KM"end;return cl,cm end;local function cn(co)for c2,bU in pairs(co)do if bU.name and bU.name==CustomTarget.name then return c2 end end;return-1 end;local function cp()if radarPanelID~=nil and al==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if al==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function ct()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;be=true;ae=0;if as and ap==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bS(d(bn))end else VertTakeOff=true;AltitudeHold=false;by=false;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cu()if bD-bl<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bl=-1;if AltitudeHold or VertTakeOff then return end end else bl=bD end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;be=true;LockPitch=nil;by=false;if ap==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if not as then by=false;bv=true;bw=HoldAltitude;IntoOrbit=true;if not an and bO and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end;if VertTakeOff then ct()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bL then ct()end end;if an then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;if VertTakeOff then ct()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bs=false;bq=nil;br=nil;bC=0;if IntoOrbit then if by then CancelIntoOrbit=false else CancelIntoOrbit=true end;by=false;IntoOrbit=false;bx=nil elseif unit.getClosestPlanetInfluence()>0 and at==0 then IntoOrbit=true;by=false;CancelIntoOrbit=false;if bx==nil then bx=planet end;bw=HoldAltitude;bv=true else a2="Unable to engage orbiting, not near planet or in atmosphere"end end;local function cv()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function cw()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local cx=AtlasOrdered[AutopilotTargetIndex].index;local cy=b1[0][cx]if cy.center then AutopilotTargetName=cy.name;aa=b7[0][cx]if CustomTarget~=nil then if at==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cy;for _,bU in pairs(b7[0])do if bU.name==CustomTarget.planetname then aa=bU;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cz(cA)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if cA==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cw()else local cx=AtlasOrdered[AutopilotTargetIndex].index;local cy=b1[0][cx]if cy.name=="Space"then if cA==nil then cz()else cz(1)end else cw()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cB()local function cC(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cu()end end;VectorStatus="Proceeding to Waypoint"end;if bD-bm<1.5 and at>0 then if not bB then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an and not IntoOrbit then cw()local cD=c9(aa,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if at~=0 then an=true;cu()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then by=false;if not VectorToTarget then cC(SpaceTarget)end else if au>100000 or au==0 then by=false;Autopilot=true elseif not as then am=true;ProgradeIsOn=true;bw=planet.noAtmosphericDensityAltitude+1000;bv=true;if AltitudeHold then cu()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then an=true;cu()else Autopilot=true end end elseif at==0 then local cE=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(aa.name==planet.name and cE)then by=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else an=true;cu()end else an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then if not bu.VectorToTarget then IntoOrbit=false else bu.VectorToTarget=false end end end end;local function cF(cG)local cH=-1;local cI;cH=cn(SavedLocations)if cH~=-1 then local cJ;if cG~=nil then cI={position=SavedLocations[cH].position,name=cG,atmosphere=SavedLocations[cH].atmosphere,planetname=SavedLocations[cH].planetname,gravity=SavedLocations[cH].gravity}else cI={position=bK,name=SavedLocations[cH].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cH]=cI;cH=-1;cH=cn(b1[0])if cH>-1 then b1[0][cH]=cI end;c1()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cw()else a2="Name Not Found"end end;local function cK(cL,cM,c5)local cN=cL:cross(c5):normalize_inplace()local cO=math.acos(r(cN:dot(-cM),-1,1))*constants.rad2deg;if cN:cross(-cM):dot(c5)<0 then cO=-cO end;return cO end;local function cP(cQ,cR,cS)cR=cR:project_on_plane(cQ)cS=cS:project_on_plane(cQ)return n(cR:cross(cS):dot(cQ),cR:dot(cS))end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function cT()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then ct()end;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;be=autoRollPreference;am=false;ao=false;ae=0 end end;local function cU(cV,cW)cV=vec3(cV)cW=vec3(cW):normalize()local cl=cV*cW;return cl.x+cl.y+cl.z end;local function cX(cV,cY,cZ)local c_=0.001;local d0=1;if not as or not bi or ap~=-1 or bI<Q then local d1=cZ;if d1==nil then d1=DampingMultiplier end;if cY==nil then cY=c_ end;cV=vec3(cV):normalize()local d2=vec3()-cV;local d3=-cU(d2,core.getConstructWorldOrientationRight())*d0;local d4=-cU(d2,core.getConstructWorldOrientationUp())*d0;if aC==0 then aC=d3/2 end;if aD==0 then aD=d4/2 end;if c(d3)<0.1 then V=V-d3*2 else V=V-(d3+(d3-aC)*d1)end;if c(d4)<0.1 then U=U+d4*2 else U=U+d4+(d4-aD)*d1 end;aC=d3;aD=d4;if c(d3)<cY and c(d4)<cY then return true end;return false elseif bi and ap==-1 then cV=bH;local d1=cZ;if d1==nil then d1=DampingMultiplier end;if cY==nil then cY=c_ end;cV=vec3(cV):normalize()local d2=bF-cV;local d3=-cU(d2,core.getConstructWorldOrientationRight())*d0;local d4=-cU(d2,core.getConstructWorldOrientationUp())*d0;if aC==0 then aC=d3/2 end;if aD==0 then aD=d4/2 end;if c(d3)<0.1 then V=V-d3*5 else V=V-(d3+(d3-aC)*d1)end;if c(d4)<0.1 then U=U+d4*5 else U=U+d4+(d4-aD)*d1 end;aC=d3;aD=d4;if c(d3)<cY and c(d4)<cY then return true end;return false end end;local function d5()if Reentry then a2="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not R then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bn end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local d6,d7=ci(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..d6 ..d7;bS(d(bn))end;AutoTakeoff=false end;local function d8(b_)if not as then bW()return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;local function d9(b_)bW()return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;local function da()if antigrav and not ExternalAGG then if bM then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function db(dc)local dd=0;local de=0;local df=0;if dc<60 then dc=d(dc)elseif dc<3600 then dd=d(dc/60)dc=d(dc%60)elseif dc<86400 then de=d(dc/3600)dd=d(dc%3600/60)else df=d(dc/86400)de=d(dc%86400/3600)end;if df>0 then return df.."d "..de.."h "elseif de>0 then return de.."h "..dd.."m "elseif dd>0 then return dd.."m "..dc.."s"elseif dc>0 then return dc.."s"else return"0s"end end;local function dg()local dh=-1;local di=cq()if telemeter_1 then dh=telemeter_1.getDistance()end;if di~=-1 and dh~=-1 then if di<dh then return di else return dh end elseif di~=-1 then return di else return dh end end;local function dj(dk)local function dl(dm)for c2,bU in pairs(dm)do dbHud_1.setStringValue(bU,g(_G[bU]))if dk and dbHud_2 then dbHud_2.setStringValue(bU,g(_G[bU]))end end end;if dbHud_1 then if not ad then dl(b)dl(a)system.print("Saved Variables to Datacore")if dk and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function dn()local dp={}local function dq()return y()==0 and userControlScheme~="keyboard"and m()==0 end;local function dr()local ds=s:getAxisCommandType(0)local dt="TRAVEL"if ds==1 then dt="CRUISE"end;if Autopilot then dt="AUTOPILOT"end;return dt end;local function du(dv,aZ,dw,dx,dy,dz,dA,dB)local dC=1;local dD=2;local dE=3;local dF=4;local dG=5;local dH=6;local dI=""local dJ=0;local dK=fuelY;local dL=fuelY+10;if m()==1 and not RemoteHud then dK=dK-50;dL=dL-50 end;dv[#dv+1]=[[<g class="pdim txtfuel">]]if dy=="ATMO"then dI="atmofueltank"elseif dy=="SPACE"then dI="spacefueltank"else dI="rocketfueltank"end;dJ=_G[dI.."_size"]if#dz>0 then for i=1,#dz do local dM=string.sub(dz[i][dD],1,12)local dN=0;for dO=1,dJ do if dz[i][dD]==f(unit[dI.."_"..dO].getData()).name then dN=dO;break end end;if aZ or dA[i]==nil or dB[i]==nil then local dP=0;local dQ=0;local dR=0;local dS=0;local dT=q()if dN~=0 then dB[i]=f(unit[dI.."_"..dN].getData()).percentage;dA[i]=f(unit[dI.."_"..dN].getData()).timeLeft;if dA[i]=="n/a"then dA[i]=0 end else dR=k(dz[i][dC])-dz[i][dF]dP=dz[i][dE]dB[i]=d(0.5+dR*100/dP)dQ=dz[i][dG]dS=dz[i][dH]if dQ<=dR then dA[i]=0 else dA[i]=d(0.5+dR/((dQ-dR)/(dT-dS)))end;dz[i][dG]=dR;dz[i][dH]=dT end end;if dM==dx then dM=e("%s %d",dy,i)end;if dN==0 then dM=dM.." *"end;local dU;if dA[i]==0 then dU="n/a"else dU=db(dA[i])end;if dB[i]~=nil then local dV=d(dB[i]*2.55)local dW=e("rgb(%d,%d,%d)",255-dV,dV,0)local dX=""if dU~="n/a"and dA[i]<120 or dB[i]<5 then if aZ then dX=[[class="red"]]end end;dv[#dv+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dw,dK,dX,dM,dw,dL,dW,dB[i],dU)dK=dK+30;dL=dL+30 end end end;dv[#dv+1]="</g>"end;local function dY(dv,ce)if ce<200000 and not as or ce and as then local dZ=-bJ:dot(bH)local d_=0;if c(dZ)>1 then d_=45*math.log(c(dZ),10)if dZ<0 then d_=-d_ end end;dv[#dv+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(dZ),d(d_))end;return dv end;local function e0(cM)local cA=-bJ;cM=cM-cM:project_on(cA)local e1=vec3(0,0,1)e1=e1-e1:project_on(cA)local e2=e1:cross(cA)local d_=e1:angle_between(cM)*constants.rad2deg;if cM:dot(e2)<0 then d_=360-d_ end;return d_ end;local function e3(dv,centerX,centerY,e4,e5,cE)local e6=circleRad;local e7=20;e7=d(e7)local e8=d(e4)if cE then for i=-45,45,5 do local e9=i;dv[#dv+1]=e([[<g transform="rotate(%f,%d,%d)">]],e9,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dv[#dv+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e6+e7-len,centerX,centerY+e6+e7)end;dv[#dv+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+e6+e7-35,e5,centerX,centerY+e6+e7-25,e8)dv[#dv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e4,centerX,centerY)dv[#dv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e6+e7-20,centerX+5,centerY+e6+e7-20,centerX,centerY+e6+e7-15)dv[#dv+1]="</g>"end;local ea=e8;if cE then ea=e0(bF)end;local eb=20;local ec=d(ea)local ed=0;local ee=centerY+e6+e7+20;local ef=centerX;if e5~="YAW"then ee=bV(130)ef=bT(960)end;local eg=[[<path class="txttick line" d="]]for i=d(ec-(eb+10)-ec%5+0.5),d(ec+eb+10+ec%5+0.5),5 do local dw=ef+-i*5+ea*5;if i%10==0 then ed=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;dv[#dv+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],dw+5,ee-12,A)elseif i%5==0 then ed=5 end;if ed==10 then eg=e([[%s M %f %f v %d]],eg,dw,ee-5,ed)else eg=e([[%s M %f %f v %d]],eg,dw,ee-2.5,ed)end end;dv[#dv+1]=eg..[["/>]]dv[#dv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ef-5,ee+10,ef+5,ee+10,ef,ee+5)if cE then e5="HDG"end;dv[#dv+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],ef,ee+25,ec,ef,ee+35,e5)end;local function eh(dv,ei,e4,centerX,centerY,cE,ej,b_)local e6=circleRad;local ek=d(e6*3/5)if e6>0 then local el=d(ei)local len=0;local eg=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*e4,centerX,centerY)if not as then eg=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dv[#dv+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e6-1,centerX,centerY)dv[#dv+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(el-30-el%5+0.5),d(el+30+el%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local em=centerY+-i*5+ei*5;if len==30 then eg=e([[%s M %d %f h %d]],eg,centerX-ek-len,em,len)if as then dv[#dv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e4,centerX,centerY,centerX-ek+10,em,i)dv[#dv+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e4,centerX,centerY,centerX+ek-10,em,i)if i==0 or i==180 or i==-180 then dv[#dv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e4,centerX,centerY,centerX-ek+20,em,ek*2-40)end else dv[#dv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ek+10,em,i)dv[#dv+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ek-10,em,i)end;eg=e([[%s M %d %f h %d]],eg,centerX+ek,em,len)else eg=e([[%s M %d %f h %d]],eg,centerX-ek-len,em,len)eg=e([[%s M %d %f h %d]],eg,centerX+ek,em,len)end end;dv[#dv+1]=eg..[["/>]]local en="PITCH"if not cE then en="REL PITCH"end;if ei>90 and not as then ei=90-(ei-90)elseif ei<-90 and not as then ei=-90-(ei+90)end;if e6>200 then if as then if b_>Q then dv[#dv+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ej)end;dv[#dv+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e4,centerX,centerY)else dv[#dv+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dv[#dv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ek+25,centerY-5,centerX-ek+20,centerY,centerX-ek+25,centerY+5,centerX-ek+50,centerY+4,el)dv[#dv+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ek-25,centerY-5,centerX+ek-20,centerY,centerX+ek-25,centerY+5,centerX+ek-30,centerY+4,el)dv[#dv+1]="</g>"end;local eo=d(e6/3)dv[#dv+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eo,centerY,e6-eo)if not as and cE then dv[#dv+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e4,centerX,centerY,centerX-ek+10,centerY,ek*2-20)end;dv[#dv+1]="</g>"if e6<200 then if as and b_>Q then dv[#dv+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e6,en,centerX,centerY-e6+10,el,centerX,centerY-15,"Yaw",centerX,centerY+20,ej)else dv[#dv+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e6,en,centerX,centerY-e6+15,el)end end end end;local function ep(dv,ce,cE)local eq=altMeterX;local er=altMeterY;local es=78;local et=19;local eu=dg()if eu~=-1 then table.insert(dv,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],eq+es,er+et+20,eu))end;if cE and(ce<200000 and not as or ce and as)then table.insert(dv,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],eq-1,er-4,es+2,et+6,eq+1,er-1,es-4,et))local cH=0;local ev=1;local ew=0;local ex=ce<0;local ey=9;if ex then ey=0 end;local ce=c(ce)while cH<6 do local ez=11;local eA=16;local eB=9;local eC=14;local dX="altsm"if cH>2 then eA=eA+3;ez=ez+2;eC=eC+2;eB=eB-6;dX="altbig"end;if ex then dX=dX.." red"end;local eD=ce/ev%10;local eE=d(eD)local eF=d((eE+1)%10)local eG=ew;if cH==0 then eG=eD-eE;if ex then eG=1-eG end end;if ex and(cH==0 or ew~=0)then local eH=eF;eF=eE;eE=eH end;local eI=eA*(eG-1)local eJ=eI+eA;local dw=eq+eB+(6-cH)*ez;local em=er+eC;table.insert(dv,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dX,dw,em+eI,eF,dw,em+eJ,eE))cH=cH+1;ev=ev*10;if eE==ey then ew=eG else ew=0 end end;table.insert(dv,[[</g></g>]])end end;local function eK(bZ)bZ=vec3(bZ)local cO=-math.deg(n(bZ.y,bZ.z))+180;cO=cO-90;if cO<0 then cO=360+cO end;if cO>180 then cO=-180+cO-180 end;return-cO end;local function eL(bZ)bZ=vec3(bZ)local ea=math.deg(n(bZ.y,bZ.x))-90;if ea<-180 then ea=360+ea end;return ea end;local function eM(dv,bZ,b_,centerX,centerY)if b_>5 and not as or b_>Q then local e6=circleRad;local eN=20;local eO=20;local eP=vec3(bZ)local eQ=eK(eP)local eR=eL(eP)local eS=14;local eT=eS/2;local eU=-eR/eO*e6;local eV=eQ/eN*e6;local dw=centerX+eU;local em=centerY+eV;local ai=math.sqrt(eU^2+eV^2)local eW=[[<circle
                        cx="]]..dw..[["
                        cy="]]..em..[["
                        r="]]..eT/eS..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dw..[["
                        cy="]]..em..[["
                        r="]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dw-eS..[[,]]..em..[[ h ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dw+eT..[[,]]..em..[[ h ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dw..[[,]]..em-eS..[[ v ]]..eT..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<e6 then dv[#dv+1]=eW else local d_=n(eV,eU)local eX=4;local eY=centerX+e6*math.cos(d_)local eZ=centerY+e6*math.sin(d_)dv[#dv+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',d_*180/math.pi,eY,eZ,eY-eX,eZ-eX/2,eX*2,eX,eY+eX,eZ-eX,eX,eX,-eX,eX)end;if not as then eQ=eK(-eP)eR=eL(-eP)eU=-eR/eO*e6;eV=eQ/eN*e6;dw=centerX+eU;em=centerY+eV;ai=math.sqrt(eU^2+eV^2)if ai<e6 then local e_=[[<circle
                                cx="]]..dw..[["
                                cy="]]..em..[["
                                r="]]..eT..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dw..[[,]]..em-eS..[[ v ]]..eT..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dw..[[,]]..em..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dw..[[,]]..em..[[)" />
                            <path
                                d="M ]]..dw-eT..[[,]]..em..[[ h ]]..eS..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dw..[[,]]..em..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dw..[[,]]..em..[[)"/>]]dv[#dv+1]=e_ end end end end;local function f0(dv,dt,f1,f2)f1=d(f1+0.5)local dK=throtPosY+10;local dL=throtPosY+20;if m()==1 and not RemoteHud then dK=55;dL=65 end;local f3="CRUISE"local unit="km/h"local bQ=f2;if dt=="TRAVEL"or dt=="AUTOPILOT"then f3="THROT"unit="%"bQ=f1;local f4="dim"if f1<0 then f4="red"end;dv[#dv+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],f4,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(f1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dv[#dv+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dK,f3,throtPosX+10,dL,bQ,unit)if as and AtmoSpeedAssist and bO and K then f1=d(L*100+0.5)local f4="red"if f1<0 then f4="red"end;dv[#dv+1]=e([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],f4,1-c(f1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dv[#dv+1]=e([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dK+40,"LIMIT",throtPosX+10,dL+40,f1,"%")end;if as and AtmoSpeedAssist or Reentry then dv[#dv+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dK-40,"LIMIT: ",bn.." km/h")elseif not as and Autopilot then dv[#dv+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dK-40,"LIMIT: ",d(MaxGameVelocity*3.6+0.5).." km/h")end end;local function f5(dv,f6)local f7=throtPosY-10;local f8=throtPosX+10;dv[#dv+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then f7=75 end;dv[#dv+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],f8,f7,d(f6))end;local function f9(dv)dv[#dv+1]=e([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],bT(1900),bV(1070),VERSION_NUMBER)dv[#dv+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dv[#dv+1]=e([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bT(960),bV(550))dv[#dv+1]=e([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bT(960),bV(600))dv[#dv+1]=e([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bT(960),bV(650))end;local fa=bT(960)local fb=bV(860)local fc=bV(880)local fd=bV(900)local fe=bV(960)local ff=bV(200)local fg=bV(150)local fh=bV(960)if m()==1 and not RemoteHud then fb=bV(135)fc=bV(155)fd=bV(175)ff=bV(115)fg=bV(95)end;if BrakeIsOn then dv[#dv+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fa,fb)elseif J>0 then dv[#dv+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fa,fb,J)end;if as and bi and cq()==-1 then dv[#dv+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fa,ff+50)end;if ax then dv[#dv+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fa,fh)end;if GearExtended then if S then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fa,fc)else dv[#dv+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fa,fc)end;local fi,cm=ci(Nav:getTargetGroundAltitude())dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fa,fd,fi..cm)end;if a5 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fa,fe+20)end;if antigrav and not ExternalAGG and bM and AntigravTargetAltitude~=nil then if c(au-antigrav.getBaseAltitude())<501 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fa,ff+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else dv[#dv+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fa,ff+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fa,ff+20,AutopilotStatus)elseif LockPitch~=nil then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fa,ff+20,d(LockPitch))elseif a0 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fa,ff+20)elseif Reentry then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fa,ff+20)end;local fj,fk,fl=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fm)if fm.noAtmosphericDensityAltitude>0 then return fm.radius+fm.noAtmosphericDensityAltitude else return fm.radius+fm.surfaceMaxAltitude*1.5 end end)local fn=fk;if fl~=nil and fk~=nil then fn=math.min(fl,fk)end;if AltitudeHold or VertTakeOff then local fi,cm=ci(HoldAltitude,2)if VertTakeOff then if bM then fi,cm=ci(antigrav.getBaseAltitude(),2)end;dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],fa,ff,fi..cm)elseif AutoTakeoff and not IntoOrbit then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],fa,ff,fi..cm)if BrakeIsOn and not VertTakeOff then dv[#dv+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fa,ff+50)end else dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fa,ff,fi..cm)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fa,ff)elseif at<0.09 and at>0.05 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fa,ff)elseif at<0.05 then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fa,ff)end end;if IntoOrbit then if bp~=nil then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff,bp)end end;if BrakeLanding then if StrongBrakes then dv[#dv+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fa,ff)else dv[#dv+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fa,ff)end end;if ProgradeIsOn then dv[#dv+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fa,ff)end;if RetrogradeIsOn then dv[#dv+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fa,ff)end;if TurnBurn then dv[#dv+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fa,fg)elseif fn~=nil and at==0 then local fi,cm=ci(fn)local travelTime=b8.computeTravelTime(bI,0,fn)local fo="Collision"if fj.noAtmosphericDensityAltitude>0 then fo="Atmosphere"end;dv[#dv+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fa,fg,fj.name,fo,db(travelTime),fi..cm)end;if VectorToTarget and not IntoOrbit then dv[#dv+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff+30,VectorStatus)end;dv[#dv+1]="</g>"return dv end;local function fp(b_)return d(z(b_*3.6,0)+0.5).." km/h"end;local function fq(dv)if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fr=OrbitMapX;local fs=OrbitMapY;local ft=OrbitMapSize;local fu=4;fs=fs+fu;local fv=15;local dw=fr+ft+fr/2+fu;local em=fs+ft/2+5+fu;local fw,fx,fy,fz;fw=ft/4;fz=0;dv[#dv+1]=[[<g class="pbright txtorb txtmid">]]dv[#dv+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ft+fr*2,ft+fs,fu,fu)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fy=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fw*2)fx=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fy*(1-orbit.eccentricity)fz=fw-orbit.periapsis.altitude/fy-planet.radius/fy;local fA=""if orbit.periapsis.altitude<=0 then fA='redout'end;dv[#dv+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fA,fr+ft/2+fz+fu,fs+ft/2+fu,fw,fx)dv[#dv+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fr+ft/2+fu,fs+ft/2+fu,planet.radius/fy)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dv[#dv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dw-35,em-5,fr+ft/2+fw+fz,em-5)dv[#dv+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],dw,em)em=em+fv;local fi,cm=ci(orbit.apoapsis.altitude)dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,fi..cm)em=em+fv;dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,db(orbit.timeToApoapsis))em=em+fv;dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,fp(orbit.apoapsis.speed))end;em=fs+ft/2+5+fu;dw=fr-fr/2+10+fu;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dv[#dv+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dw+35,em-5,fr+ft/2-fw+fz,em-5)dv[#dv+1]=e([[<text x="%f" y="%f">Periapsis</text>]],dw,em)em=em+fv;local fi,cm=ci(orbit.periapsis.altitude)dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,fi..cm)em=em+fv;dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,db(orbit.timeToPeriapsis))em=em+fv;dv[#dv+1]=e([[<text x="%f" y="%f">%s</text>]],dw,em,fp(orbit.periapsis.speed))end;dv[#dv+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fr+ft/2+fu,20+fu,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fB=orbit.timeToApoapsis/orbit.period*2*math.pi;local fC=fw*math.cos(fB)local fD=fx*math.sin(fB)dv[#dv+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fr+ft/2+fC+fz+fu,fs+ft/2+fD+fu)end;dv[#dv+1]=[[</g>]]return dv else return dv end end;local function fE(dv)local function fF(fG,fH)for i=1,#fH do table.insert(fG,fH[i])end;return fG end;local dw=50;local em=525;local fI={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fJ={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fK={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fL={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if as then fF(fI,fJ)table.insert(fI,"---------------------------------------")if VertTakeOff then table.insert(fI,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif ap~=-1 then if antigrav then if bM then table.insert(fI,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fI,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fI,"Alt-6: Begins Vertical Takeoff.")else table.insert(fI,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fI,"G: Begin BrakeLanding or Land")end else fF(fI,fK)end;if AltitudeHold then table.insert(fI,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fI,"---------------------------------------")fF(fI,fL)dv[#dv+1]=[[<g class="pdim txt txtstart">]]for i=1,#fI do em=em+10;dv[#dv+1]=e([[<text x=%d y="%d">%s</text>]],dw,em,fI[i])end;dv[#dv+1]="</g>"end;function dp.HUDPrologue(dv)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local fM=az;local fN=aA;local fO=az;local fP=aA;if dq()and not brightHud then fM=[[rgb(]]..d(D*0.4+0.5)..","..d(F*0.4+0.5)..","..d(E*0.3+0.5)..[[)]]fN=[[rgb(]]..d(D*0.3+0.5)..","..d(F*0.3+0.5)..","..d(E*0.2+0.5)..[[)]]end;dv[#dv+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fM,fM,fO,fO,fN,fN,fP,fP,aH,aI)return dv end;function dp.UpdateHud(dv)local ce=au;local bZ=core.getVelocity()local b_=vec3(bZ):len()local fQ=getRoll(bJ,bF,bG)local fR=fQ/180*math.pi;local fS=math.cos(fR)local fT=math.sin(fR)local cO=cK(bJ,bF,bG*fS+bE*fT)local e4=fQ;local ei=cO;local f1=d(unit.getThrottle())local f6=b_*3.6;local f2=unit.getAxisCommandValue(0)local fU=bT(1770)local fV=bV(310)if AtmoSpeedAssist and bO then f2=I;f1=I*100 end;local dt=dr()local e5="ROLL"local cE=unit.getClosestPlanetInfluence()>0;if f1==nil then f1=0 end;if not cE then if b_>5 then cO=eK(bZ)fQ=eL(bZ)else cO=0;fQ=0 end;e5="YAW"end;if H>50000 and not as then local fW;if H>200000 then fW=z(H/200000,2).." su"else fW=z(H/1000,1).." km"end;dv[#dv+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fU,fV,fW)end;dv[#dv+1]=ak;dv[#dv+1]=aE;dv[#dv+1]=aj;if b0%aU==0 then aZ=true end;if fuelX~=0 and fuelY~=0 then du(dv,aZ,fuelX,"Atmospheric ","ATMO",aN,aX,aY)du(dv,aZ,fuelX+100,"Space fuel t","SPACE",aO,aV,aW)du(dv,aZ,fuelX+200,"Rocket fuel ","ROCKET",aP,aS,aT)end;if aZ then aZ=false;b0=0 end;b0=b0+1;dY(dv,ce)if m()==0 or RemoteHud then if not dq()or brightHud then if cE then e3(dv,centerX,centerY,e4,e5,cE)eh(dv,ei,e4,centerX,centerY,cE,d(eL(bZ)),b_)else e3(dv,centerX,centerY,fQ,e5,cE)eh(dv,cO,fQ,centerX,centerY,cE,d(fQ),b_)end;ep(dv,ce,cE)eM(dv,bZ,b_,centerX,centerY)end end;f0(dv,dt,f1,f2)f5(dv,f6)f9(dv)fq(dv)if showHelp then fE(dv)end;if screen_2 then local fX=bK;local dw=960+fX.x/b3;local em=450+fX.y/b4;screen_2.moveContent(b5,(dw-80)/19.2,(em-80)/10.8)end;return dv end;function dp.HUDEpilogue(dv)dv[#dv+1]="</svg>"return dv end;function dp.DrawOdometer(dv,ab,TotalDistanceTravelled,ac,fY)local fZ=bT(1240)local f_=bV(55)local g0=f_+10;local bX=core.g()local g1=0;local g2=0;local g3=0;local dt=dr()if VertTakeOffEngine then dt=dt.."-VERTICAL"end;bW(bX)if as then g3=LastMaxBrakeInAtmo else g3=LastMaxBrake end;maxThrust=Nav:maxForceForward()aL=l()if not ShowOdometer then return end;local g4=vec3(core.getWorldAcceleration()):len()/9.80665;bX=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bX>0.1 then g2=aL*bX;g1=maxThrust/bX end;dv[#dv+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then fZ=bT(1120)f_=bV(55)g0=f_+10 elseif as then local g5=bT(770)dv[#dv+1]=e([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],g5,f_,g5,g0,at)end;dv[#dv+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fZ,f_,fZ,g0,bX/9.80665,fZ,f_+20,fZ,g0+20,g4)dv[#dv+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bT(660),bT(700),bV(35),bT(960),bV(55),bT(1240),bV(35),bT(1280))if m()==0 or RemoteHud then dv[#dv+1]=e([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bT(700),bV(20),ab,bT(700),bV(30),TotalDistanceTravelled/1000,bT(830),bV(20),db(ac),bT(830),bV(30),db(TotalFlightTime),bT(970),bV(20),aL/1000,bT(1240),bV(10),g3/1000,bT(1240),bV(30),maxThrust/1000,bT(960),bV(180),dt)if bX>0.1 then dv[#dv+1]=e([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bT(970),bV(30),g1/1000,bT(1240),bV(20),g2/1000)else dv[#dv+1]=e([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bT(970),bV(30),bT(1240),bV(20))end else dv[#dv+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bT(960),bV(33),dt)end;dv[#dv+1]="</g>"return dv end;function dp.DrawWarnings(dv)return f9(dv)end;function dp.DisplayOrbitScreen(dv)return fq(dv)end;function dp.DisplayMessage(dv,fi)if fi~="empty"then dv[#dv+1]=[[<text class="msg" x="50%%" y="310" >]]for g6 in string.gmatch(fi,"([^\n]+)")do dv[#dv+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g6)end;dv[#dv+1]=[[</text>]]end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function dp.DrawDeadZone(dv)dv[#dv+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return dp end;local function g7()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function g8()local function g9(ga)return type(ga)=='number'end;local function gb(ga)return type(tonumber(ga))=='number'end;local function gc(gd)return type(gd)=='table'end;local function ge(gf)return type(gf)=='string'end;local function gg(bU)return gc(bU)and g9(bU.x and bU.y and bU.z)end;local function gh(gi)return gc(gi)and g9(gi.latitude and gi.longitude and gi.altitude and gi.bodyId and gi.systemId)end;local gj=math.pi/180;local gk=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gl='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gm=r;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function gn(ga)local cl=string.gsub(string.reverse(e('%.4f',ga)),'^0*%.?','')return cl==''and'0'or string.reverse(cl)end;local function go(gp)if gg(gp)then return e('{x=%.3f,y=%.3f,z=%.3f}',gp.x,gp.y,gp.z)end;if gc(gp)and not getmetatable(gp)then local gq={}local gr=next(gp)if type(gr)=='nil'or gr==1 then gq=gp else for c2,bU in pairs(gp)do local bQ=go(bU)if type(c2)=='number'then table.insert(gq,e('[%s]=%s',c2,bQ))else table.insert(gq,e('%s=%s',c2,bQ))end end end;return e('{%s}',table.concat(gq,','))end;if ge(gp)then return e("'%s'",gp:gsub("'",[[\']]))end;return tostring(gp)end;local gs={}gs.__index=gs;gs.__tostring=function(gp,gt)local gu={}for c2 in pairs(gp)do table.insert(gu,c2)end;table.sort(gu)local gq={}for _,c2 in ipairs(gu)do local bQ=go(gp[c2])if type(c2)=='number'then table.insert(gq,e('[%s]=%s',c2,bQ))else table.insert(gq,e('%s=%s',c2,bQ))end end;if gt then return e('%s%s',gt,table.concat(gq,',\n'..gt))end;return e('{%s}',table.concat(gq,','))end;gs.__eq=function(gv,gw)return gv.planetarySystemId==gw.planetarySystemId and gv.bodyId==gw.bodyId and c6(gv.radius,gw.radius)and c6(gv.center.x,gw.center.x)and c6(gv.center.y,gw.center.y)and c6(gv.center.z,gw.center.z)and c6(gv.GM,gw.GM)end;local function gx(gy,gz,gA,cb,gB)assert(gb(gy),'Argument 1 (planetarySystemId) must be a number:'..type(gy))assert(gb(gz),'Argument 2 (bodyId) must be a number:'..type(gz))assert(gb(gA),'Argument 3 (radius) must be a number:'..type(gA))assert(gc(cb),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cb))assert(gb(gB),'Argument 5 (GM) must be a number:'..type(gB))return setmetatable({planetarySystemId=tonumber(gy),bodyId=tonumber(gz),radius=tonumber(gA),center=vec3(cb),GM=tonumber(gB)},gs)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gC)return e('::pos{%d,%d,%s,%s,%s}',gC.systemId,gC.bodyId,gn(gC.latitude*gk),gn(gC.longitude*gk),gn(gC.altitude))end;MapPosition.__eq=function(gv,gw)return gv.bodyId==gw.bodyId and gv.systemId==gw.systemId and c6(gv.latitude,gw.latitude)and c6(gv.altitude,gw.altitude)and(c6(gv.longitude,gw.longitude)or c6(gv.latitude,math.pi/2)or c6(gv.latitude,-math.pi/2))end;local function gD(gE,gz,cf,cg,ce)local gy=gE;if ge(gE)and not cg and not ce and not gz and not cf then gy,gz,cf,cg,ce=o(gE,gl)assert(gy,'Argument 1 (position string) is malformed.')else assert(gb(gy),'Argument 1 (systemId) must be a number:'..type(gy))assert(gb(gz),'Argument 2 (bodyId) must be a number:'..type(gz))assert(gb(cf),'Argument 3 (latitude) must be in degrees:'..type(cf))assert(gb(cg),'Argument 4 (longitude) must be in degrees:'..type(cg))assert(gb(ce),'Argument 5 (altitude) must be in meters:'..type(ce))end;gy=tonumber(gy)gz=tonumber(gz)cf=tonumber(cf)cg=tonumber(cg)ce=tonumber(ce)if gz==0 then return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=gz,systemId=gy},MapPosition)end;return setmetatable({latitude=gj*gm(cf,-90,90),longitude=gj*(cg%360),altitude=ce,bodyId=gz,systemId=gy},MapPosition)end;local gF={}gF.__index=gF;gF.__tostring=function(gp,gt)local gG=gt and gt..'  'local gH={}local gu={}for c2 in pairs(gp)do table.insert(gu,c2)end;table.sort(gu)for _,gI in ipairs(gu)do bdy=gp[gI]local gJ=gs.__tostring(bdy,gG)if gt then table.insert(gH,e('[%s]={\n%s\n%s}',gI,gJ,gt))else table.insert(gH,e('  [%s]=%s',gI,gJ))end end;if gt then return e('\n%s%s%s',gt,table.concat(gH,',\n'..gt),gt)end;return e('{\n%s\n}',table.concat(gH,',\n'))end;local function gK(gL)local b1={}local pid;for _,bU in pairs(gL)do local gM=bU.planetarySystemId;if type(gM)~='number'then error('Invalid planetary system ID: '..tostring(gM))elseif pid and gM~=pid then error('Mistringmatch planetary system IDs: '..gM..' and '..pid)end;local gN=bU.bodyId;if type(gN)~='number'then error('Invalid body ID: '..tostring(gN))elseif b1[gN]then error('Duplicate body ID: '..tostring(gN))end;setmetatable(bU.center,getmetatable(vec3.unit_x))b1[gN]=setmetatable(bU,gs)pid=gM end;return setmetatable(b1,gF)end;b6={}local function gO(gL)return setmetatable({galaxyAtlas=gL or{}},b6)end;b6.__index=function(gd,i)if type(i)=='number'then local system=gd.galaxyAtlas[i]return gK(system)end;return rawget(b6,i)end;b6.__pairs=function(gp)return function(gd,c2)local gP,nv=next(gd,c2)return gP,nv and gK(nv)end,gp.galaxyAtlas,nil end;b6.__tostring=function(gp)local gQ={}for _,gR in pairs(gp or{})do local gS=gR:getPlanetarySystemId()local gT=gF.__tostring(gR,'    ')table.insert(gQ,e('  [%s]={%s\n  }',gS,gT))end;return e('{\n%s\n}\n',table.concat(gQ,',\n'))end;b6.BodyParameters=gx;b6.MapPosition=gD;b6.PlanetarySystem=gK;function b6.createBodyParameters(gU,gz,gV,gW,gX,gY,gZ)assert(gb(gU),'Argument 1 (planetarySystemId) must be a number:'..type(gU))assert(gb(gz),'Argument 2 (bodyId) must be a number:'..type(gz))assert(gb(gV),'Argument 3 (surfaceArea) must be a number:'..type(gV))assert(gc(gW),'Argument 4 (aPosition) must be an array or vec3:'..type(gW))assert(gc(gX),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gX))assert(gb(gY),'Argument 6 (altitude) must be in meters:'..type(gY))assert(gb(gZ),'Argument 7 (gravityAtPosition) must be number:'..type(gZ))local gA=math.sqrt(gV/4/math.pi)local ai=gA+gY;local g_=vec3(gW)+ai*vec3(gX)local gB=gZ*ai*ai;return gx(gU,gz,gA,g_,gB)end;b6.isMapPosition=gh;function b6:getPlanetarySystem(gE)if i==nil then i=0 end;if nv==nil then nv=0 end;local gU=gE;if gh(gE)then gU=gE.systemId end;if type(gU)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gF then system=gK(system)end;return system end end end;function gF:castIntersections(h0,cW,h1,h2)local h1=h1 or function(fm)return 1.05*fm.radius end;local h3={}if h2 then for _,i in ipairs(h2)do h3[i]=self[i]end else h2={}for c2,fm in pairs(self)do table.insert(h2,c2)h3[c2]=fm end end;local function h4(h5,h6)local h7=h3[h5].center-h0;local h8=h3[h6].center-h0;return h7:len()<h8:len()end;table.sort(h2,h4)local h9=cW:normalize()for i,gM in ipairs(h2)do local fm=h3[gM]local ha=fm.center-h0;local gA=h1(fm)local hb=ha:dot(h9)local hc=hb^2-(ha:len2()-gA^2)if hc>=0 then local hd=math.sqrt(hc)local fk=hb+hd;local fl=hb-hd;if fl>0 then return fm,fk,fl elseif fk>0 then return fm,fk,nil end end end;return nil,nil,nil end;function gF:closestBody(he)assert(type(he)=='table','Invalid coordinates.')local hf,fm;local hg=vec3(he)for _,hh in pairs(self)do local hi=(hh.center-hg):len2()if(not fm or hi<hf)and hh.name~="Space"then fm=hh;hf=hi end end;return fm end;function gF:convertToBodyIdAndWorldCoordinates(gE)local hj=gE;if ge(gE)then hj=gD(gE)end;if hj.bodyId==0 then return 0,vec3(hj.latitude,hj.longitude,hj.altitude)end;local hh=self:getBodyParameters(hj)if hh then return hj.bodyId,hh:convertToWorldCoordinates(hj)end end;function gF:getBodyParameters(gE)local gz=gE;if gh(gE)then gz=gE.bodyId end;assert(gb(gz),'Argument 1 (bodyId) must be a number:'..type(gz))return self[gz]end;function gF:getPlanetarySystemId()local _,bU=next(self)return bU and bU.planetarySystemId end;function gs:convertToMapPosition(cb)assert(gc(cb),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cb))local cc=vec3(cb)if self.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cd=cc-self.center;local ai=cd:len()local ce=ai-self.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gs:convertToWorldCoordinates(gE)local hj=ge(gE)and gD(gE)or gE;if hj.bodyId==0 then return vec3(hj.latitude,hj.longitude,hj.altitude)end;assert(gh(hj),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hj.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hj.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local hk=math.cos(hj.latitude)return self.center+(self.radius+hj.altitude)*vec3(hk*math.cos(hj.longitude),hk*math.sin(hj.longitude),math.sin(hj.latitude))end;function gs:getAltitude(cb)return(vec3(cb)-self.center):len()-self.radius end;function gs:getDistance(cb)return(vec3(cb)-self.center):len()end;function gs:getGravity(cb)local hl=self.center-vec3(cb)local hm=hl:len2()return self.GM/hm*hl/math.sqrt(hm)end;return setmetatable(b6,{__call=function(_,...)return gO(...)end})end;function script.onStart()local function hn()local function ho(hp)local hq=dbHud_1.hasKey;for c2,bU in pairs(hp)do if hq(bU)then local cl=f(dbHud_1.getStringValue(bU))if cl~=nil then _G[bU]=cl;aJ=true end end end end;if dbHud_1 then local hq=dbHud_1.hasKey;if not useTheseSettings then ho(a)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5 end;coroutine.yield()ho(b)if aJ then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bn=AtmoSpeedLimit;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hr()local function hs(ht,hu)if ht>hu then hu=ht end;if ContainerOptimization>0 then hu=hu-hu*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hu=hu-hu*FuelTankOptimization*0.05 end;return hu end;local hv=core.getElementNameById;local hw=fuelX~=0 and fuelY~=0;for c2 in pairs(av)do local type=core.getElementTypeById(av[c2])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(av[c2])),'^.*vertical.*$')then bL=true end end;if o(type,'^.*Space Engine$')then bB=true;if o(tostring(core.getElementTagsById(av[c2])),'^.*vertical.*$')then local hx=core.getElementRotationById(av[c2])if hx[4]<0 then if p(-hx[4],0.1)==0.5 then bz=true end else if p(hx[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hy=h(av[c2])if hy>10000 then a_=128 elseif hy>1000 then a_=64 elseif hy>150 then a_=32 end end;aQ=aQ+h(av[c2])if hw and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hy=h(av[c2])local hz=k(av[c2])local ht=0;local dT=q()if type=="Atmospheric Fuel Tank"then local hu=400;local hA=35.03;if hy>10000 then hu=51200;hA=5480 elseif hy>1300 then hu=6400;hA=988.67 elseif hy>150 then hu=1600;hA=182.67 end;ht=hz-hA;if fuelTankHandlingAtmo>0 then hu=hu+hu*fuelTankHandlingAtmo*0.2 end;hu=hs(ht,hu)aN[#aN+1]={av[c2],hv(av[c2]),hu,hA,ht,dT}end;if type=="Rocket Fuel Tank"then local hu=320;local hA=173.42;if hy>65000 then hu=40000;hA=25740 elseif hy>6000 then hu=5120;hA=4720 elseif hy>700 then hu=640;hA=886.72 end;ht=hz-hA;if fuelTankHandlingRocket>0 then hu=hu+hu*fuelTankHandlingRocket*0.1 end;hu=hs(ht,hu)aP[#aP+1]={av[c2],hv(av[c2]),hu,hA,ht,dT}end;if type=="Space Fuel Tank"then local hu=2400;local hA=182.67;if hy>10000 then hu=76800;hA=5480 elseif hy>1300 then hu=9600;hA=988.67 end;ht=hz-hA;if fuelTankHandlingSpace>0 then hu=hu+hu*fuelTankHandlingSpace*0.2 end;hu=hs(ht,hu)aO[#aO+1]={av[c2],hv(av[c2]),hu,hA,ht,dT}end end end;if not bL then VertTakeOff,VertTakeOffEngine=false,false end end;local function hB()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(as or not as and au<10000)then for _,bU in pairs(door)do bU.toggle()end end;if switch then for _,bU in pairs(switch)do bU.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,bU in pairs(forcefield)do bU.toggle()end end;if antigrav then bM=antigrav.getState()==1;if bM and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hC=dg()if hC~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then s:setTargetGroundAltitude(bf)if bf==0 and not S then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if as and hC~=-1 then b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function hD(hE,hF,hG,hH,dw,em,hI,hJ,hK)local hL={enableName=hE,disableName=hF,width=hG,height=hH,x=dw,y=em,toggleVar=hI,toggleFunction=hJ,drawCondition=hK,hovered=false}table.insert(aG,hL)return hL end;local function hM()local function hN()if dbHud_1 then local position=bK;local dM=planet.name..". "..#SavedLocations;if radar_1 then local gM,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gM~=nil and gM~=""then dM=dM.." "..radar_1.getConstructName(gM)end end;local cI={}cI={position=position,name=dM,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cI;table.insert(b1[0],cI)c1()a2="Location saved as "..dM else a2="Databank must be installed to save locations"end end;local function hO()TurnBurn=not TurnBurn end;local function hP(hQ)if hQ==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hR()hP(1)end;local function hS()local cH=-1;cH=cn(b1[0])if cH>-1 then table.remove(b1[0],cH)end;cH=-1;cH=cn(SavedLocations)if cH~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cH)end;cz()c1()end;local function hT()local dM=AutopilotTargetName;if dM==nil then local fi,cm=ci((bK-CustomTarget.position):len())dM=CustomTarget.name.." "..fi..cm end;if dM==nil then dM="None"end;return"Engage Autopilot: "..dM end;local function hU()local dM=AutopilotTargetName;if dM==nil then dM=CustomTarget.name end;if dM==nil then dM="None"end;return"Disable Autopilot: "..dM end;local hV=50;local hW=260;local hX=hD("Enable Brake Toggle","Disable Brake Toggle",hW,hV,aH/2-hW/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hD("Align Prograde","Disable Prograde",hW,hV,aH/2-hW/2-50-hX.width,aI/2-hV+380,function()return ProgradeIsOn end,hR)hD("Align Retrograde","Disable Retrograde",hW,hV,aH/2-hW/2+hX.width+50,aI/2-hV+380,function()return RetrogradeIsOn end,hP,function()return at==0 end)local hY=hD(hT,hU,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,cB)hD("Save Position","Save Position",200,hY.height,hY.x+hY.width+30,hY.y,function()return false end,hN,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hD("Update Position","Update Position",200,hY.height,hY.x+hY.width+30,hY.y,function()return false end,cF,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hD("Clear Position","Clear Position",200,hY.height,hY.x-200-30,hY.y,function()return true end,hS,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hV=60;hW=300;local dw=10;local em=aI/2-500;hD("Show Help","Hide Help",hW,hV,dw,em,function()return showHelp end,function()showHelp=not showHelp end)local em=aI/2-300;hD("Enable Turn and Burn","Disable Turn and Burn",hW,hV,dw,em,function()return TurnBurn end,hO)hD("Horizontal Takeoff Mode","Vertical Takeoff Mode",hW,hV,dw+hW+20,em,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bL end)em=em+hV+20;hD("Show Orbit Display","Hide Orbit Display",hW,hV,dw,em,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hD("Engage Orbiting","Cancel Orbiting",hW,hV,dw+hW+20,em,function()return IntoOrbit end,ToggleIntoOrbit,function()return at==0 and unit.getClosestPlanetInfluence()>0 end)em=em+hV+20;hD("Glide Re-Entry","Cancel Glide Re-Entry",hW,hV,dw,em,function()return Reentry end,function()am=true;hR()end,function()return planet.hasAtmosphere and not as end)hD("Parachute Re-Entry","Cancel Parachute Re-Entry",hW,hV,dw+hW+20,em,function()return Reentry end,d5,function()return planet.hasAtmosphere and not as end)em=em+hV+20;hD("Engage Follow Mode","Disable Follow Mode",hW,hV,dw,em,function()return a0 end,cv,function()return m()==1 end)hD("Enable Repair Arrows","Disable Repair Arrows",hW,hV,dw+hW+20,em,function()return aR end,function()aR=not aR;if aR then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)em=em+hV+20;if not ExternalAGG then hD("Enable AGG","Disable AGG",hW,hV,dw,em,function()return bM end,da,function()return antigrav~=nil end)end;em=em+hV+20;hD(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,hW*2,hV,dw,em,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hZ()local h_=nil;local i0=nil;local i1=nil;local i2=nil;b1=g7()for c2,bU in pairs(b1[0])do if h_==nil or bU.center.x<h_ then h_=bU.center.x end;if i0==nil or bU.center.x>i0 then i0=bU.center.x end;if i1==nil or bU.center.y<i1 then i1=bU.center.y end;if i2==nil or bU.center.y>i2 then i2=bU.center.y end end;b2=""local i3=1.1*(i0-h_)/1920;local i4=1.4*(i2-i1)/1080;for c2,bU in pairs(b1[0])do local dw=960+bU.center.x/i3;local em=540+bU.center.y/i4;b2=b2 ..'<circle cx="'..dw..'" cy="'..em..'" r="'..bU.radius/i3*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not o(bU.name,"Moon")and not o(bU.name,"Sanctuary")and not o(bU.name,"Space")then b2=b2 .."<text x='"..dw.."' y='"..em+bU.radius/i3*30+20 .."' font-size='28' fill="..az.." text-anchor='middle' font-family='Montserrat'>"..bU.name.."</text>"end end;local fX=bK;local dw=960+fX.x/i3;local em=540+fX.y/i4;b2=b2 ..'<circle cx="'..dw..'" cy="'..em..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='"..dw.."' y='"..em-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b2=b2 ..[[</svg>]]b3=i3;b4=i4;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b2)local fX=bK;local dw=960+fX.x/i3;local em=540+fX.y/i4;b2='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='80' y='105' font-size='18' fill="..az.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b5=screen_2.addContent((dw-80)/19.20,(em-80)/10.80,b2)end end;local function i5()for c2,bU in pairs(SavedLocations)do table.insert(b1[0],bU)end;c1()end;local function i6()local b8={}local i7=30000000/3600;local i8=i7*i7;local i9=100;local function ia(bU)return 1/math.sqrt(1-bU*bU/i8)end;function b8.computeAccelerationTime(ib,ic,id)local ie=i7*math.asin(ib/i7)return(i7*math.asin(id/i7)-ie)/ic end;function b8.computeDistanceAndTime(ib,id,ig,ih,ii,ij)ii=ii or 0;ij=ij or 0;local ik=ib<=id;local il=ih*(ik and 1 or-1)/ig;local im=-ij/ig;local io=il+im;if ik and io<=0 or not ik and io>=0 then return-1,-1 end;local ip,iq=0,0;if il~=0 and ii>0 then local ie=math.asin(ib/i7)local ir=math.pi*(il/2+im)local is=il*ii;local it=i7*math.pi;local bU=function(gd)local iu=(ir*gd-is*math.sin(math.pi*gd/2/ii)+it*ie)/it;local iv=math.tan(iu)return i7*iv/math.sqrt(iv*iv+1)end;local iw=ik and function(gf)return gf>=id end or function(gf)return gf<=id end;iq=2*ii;if iw(bU(iq))then local ix=0;while c(iq-ix)>0.5 do local gd=(iq+ix)/2;if iw(bU(gd))then iq=gd else ix=gd end end end;local iy=ib;local iz=iq/i9;for iA=1,i9 do local b_=bU(iA*iz)ip=ip+(b_+iy)*iz/2;iy=b_ end;if iq<2*ii then return ip,iq end;ib=iy end;local ie=i7*math.asin(ib/i7)local bD=(i7*math.asin(id/i7)-ie)/io;local iB=i8*math.cos(ie/i7)/io;local ai=iB-i8*math.cos((io*bD+ie)/i7)/io;return ai+ip,bD+iq end;function b8.computeTravelTime(ib,ic,ai)if ai==0 then return 0 end;if ic>0 then local ie=i7*math.asin(ib/i7)local iB=i8*math.cos(ie/i7)/ic;return(i7*math.acos(ic*(iB-ai)/i8)-ie)/ic end;if ib==0 then return-1 end;assert(ib>0,'Acceleration and initial speed are both zero.')return ai/ib end;function b8.lorentz(bU)return ia(bU)end;return b8 end;local function iC()local vec3=require('cpml.vec3')local g8=g8()local function ge(gf)return type(gf)=='string'end;local function gc(gd)return type(gd)=='table'end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ce)assert(self.body)local ai=ce+self.body.radius;if not c6(ai,0)then local orbit=math.sqrt(self.body.GM/ai)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gE,bZ)assert(self.body)assert(gc(gE)or ge(gE))assert(gc(bZ))local fX=(ge(gE)or g8.isMapPosition(gE))and self.body:convertToWorldCoordinates(gE)or vec3(gE)local bU=vec3(bZ)local iD=fX-self.body.center;local h8=bU:len2()local iE=iD:len()local iF=self.body.GM;local iG=((h8-iF/iE)*iD-iD:dot(bU)*bU)/iF;local c7=iF/(2*iF/iE-h8)local iH=iG:len()local h9=iG:normalize()local iI=c7*(1-iH)local iJ=c7*(1+iH)local iK=iI*h9+self.body.center;local iL=iH<=1 and-iJ*h9+self.body.center or nil;local iM=math.sqrt(c7*iF*(1-iH*iH))local iN=iL and 2*math.pi*math.sqrt(c7^3/iF)local iO=math.acos(iG:dot(iD)/(iH*iE))if iD:dot(bU)<0 then iO=-(iO-2*math.pi)end;local iP=math.acos((math.cos(iO)+iH)/(1+iH*math.cos(iO)))local iQ=iP;if iQ<0 then iQ=iQ+2*math.pi end;local iR=iQ-iH*math.sin(iQ)local iS=0;local iT=0;local iU=0;if iN~=nil then iS=iR/(2*math.pi/iN)iT=iN-iS;iU=iT+iN/2;if iO-math.pi>0 then iT=iS;iU=iT+iN/2 end;if iU>iN then iU=iU-iN end end;return{periapsis={position=iK,speed=iM/iI,circularOrbitSpeed=math.sqrt(iF/iI),altitude=iI-self.body.radius},apoapsis=iL and{position=iL,speed=iM/iJ,circularOrbitSpeed=math.sqrt(iF/iJ),altitude=iJ-self.body.radius},currentVelocity=bU,currentPosition=fX,eccentricity=iH,period=iN,eccentricAnomaly=iP,meanAnomaly=iR,timeToPeriapsis=iT,timeToApoapsis=iU}end;local function iV(iW)local hh=g8.BodyParameters(iW.planetarySystemId,iW.bodyId,iW.radius,iW.center,iW.GM)return setmetatable({body=hh},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iV(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hn()coroutine.yield()hr()coroutine.yield()hB()hM()coroutine.yield()hZ()b6=g8()b7=b6(g7())b8=i6()ba=iC()bb=dn()i5()c1()cw()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,bU in pairs(door)do bU.toggle()end end;if switch then for _,bU in pairs(switch)do bU.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,bU in pairs(forcefield)do bU.toggle()end end;dj()if button then button.activate()end;local cD=c9(planet,bK)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)end;function script.onTick(iX)local iY=system.createData;local iZ=system.createWidget;local function i_()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=iZ(panelInterplanetary,"value")interplanetaryHeaderText=iY('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=iZ(panelInterplanetary,"value")widgetDistanceText=iY('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=iZ(panelInterplanetary,"value")widgetTravelTimeText=iY('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=iZ(panelInterplanetary,"value")widgetMaxMassText=iY('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=iZ(panelInterplanetary,"value")widgetTargetOrbitText=iY('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=iZ(panelInterplanetary,"value")widgetCurBrakeDistanceText=iY('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=iZ(panelInterplanetary,"value")widgetCurBrakeTimeText=iY('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=iZ(panelInterplanetary,"value")widgetMaxBrakeDistanceText=iY('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=iZ(panelInterplanetary,"value")widgetMaxBrakeTimeText=iY('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=iZ(panelInterplanetary,"value")widgetTrajectoryAltitudeText=iY('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function j0()u(panelInterplanetary)panelInterplanetary=nil end;local function j1(j2)local gA=500000;local j3,j4,j5=math.huge;local j6=false;local j7=vec3({13771471,7435803,-128971})local j8=18000000;j3=vec3(j2):dist(j7)if j3<j8 then return true,c(j3-j8),"Safe Zone",0 end;j4=vec3(j2):dist(vec3(planet.center))if j4<gA then j6=true end;if c(j4-gA)<c(j3-j8)then return j6,c(j4-gA),planet.name,planet.bodyId else return j6,c(j3-j8),"Safe Zone",0 end end;local function j9(dv)local ja=0;aE=""local jb=aQ;local jc=0;local jd=0;local je=0;local dV=0;local dW=""local jf=core.getElementHitPointsById;for c2 in pairs(av)do local hy=0;local jg=0;jg=h(av[c2])hy=jf(av[c2])jc=jc+hy;if hy<jg then if hy==0 then je=je+1 else jd=jd+1 end;if aR and#aB==0 then position=vec3(core.getElementPositionById(av[c2]))local dw=position.x-a_;local em=position.y-a_;local jh=position.z-a_;table.insert(aB,core.spawnArrowSticker(dw,em,jh+1,"down"))table.insert(aB,core.spawnArrowSticker(dw,em,jh+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(dw+1,em,jh,"north"))table.insert(aB,core.spawnArrowSticker(dw+1,em,jh,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(dw-1,em,jh,"south"))table.insert(aB,core.spawnArrowSticker(dw-1,em,jh,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(dw,em-1,jh,"east"))table.insert(aB,core.spawnArrowSticker(dw,em-1,jh,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(dw,em+1,jh,"west"))table.insert(aB,core.spawnArrowSticker(dw,em+1,jh,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,av[c2])end elseif aR and#aB>0 and aB[11]==av[c2]then for dO in pairs(aB)do core.deleteSticker(aB[dO])end;aB={}end end;ja=d(jc/jb*100)if ja<100 then dv[#dv+1]=[[<g class="pbright txt">]]dV=d(ja*2.55)dW=e("rgb(%d,%d,%d)",255-dV,dV,0)if ja<100 then dv[#dv+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dW,ja)if je>0 then dv[#dv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dW,je,jd)elseif jd>0 then dv[#dv+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dW,jd)end end;dv[#dv+1]=[[<\g>]]end end;local function ji(dv)local jj=d(r(ai/(aH/4)*255,0,255))dv[#dv+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(D+0.5)+jj,d(F+0.5)-jj,d(E+0.5)-jj)end;local function jk()local jl=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()return jl end;local function jm()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local b_=bI;local jn=unit.getThrottle()/100;if AtmoSpeedAssist then jn=I end;local jo,jp=b8.computeDistanceAndTime(bI,MaxGameVelocity,l(),Nav:maxForceForward()*jn,warmup,0)local a6,a7;if not TurnBurn then a6,a7=d8(MaxGameVelocity)else a6,a7=d9(MaxGameVelocity)end;local _,jq;if not TurnBurn and b_>0 then _,jq=d8(b_)else _,jq=d9(b_)end;local jr=0;local js=0;if AutopilotCruising or not Autopilot and b_>5 then js=b8.computeTravelTime(b_,0,AutopilotDistance)elseif a6+jo<AutopilotDistance then jr=AutopilotDistance-(a6+jo)js=b8.computeTravelTime(8333.0556,0,jr)else local jt=(AutopilotDistance-a6)/jo;jo=AutopilotDistance-a6;jp=jp*jt end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return js elseif AutopilotBraking then return jq elseif AutopilotCruising then return js+jq else return jp+a7+js end end;local function ju()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jv()if radar_1 then local jw=radar_1.getEntries()local jx=radar_1.getData()local jy=bT(1770)local jz=bV(330)if#jw>0 then local jA=jx:find('identifiedConstructs":%[%]')if jA==nil and perisPanelID==nil then al=1;cp()end;if jA~=nil and perisPanelID~=nil then cp()end;if radarPanelID==nil then cp()end;aj=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jy,jz,#jw)local jB={}for c2,bU in pairs(jw)do if radar_1.hasMatchingTransponder(bU)==1 then table.insert(jB,bU)end end;if#jB>0 then local em=bV(15)local dw=bT(1370)aj=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aj,dw,em)for c2,bU in pairs(jB)do em=em+20;aj=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aj,dw,em,radar_1.getConstructName(bU))end end else local jC;jC=jx:find('worksInEnvironment":false')if jC then aj=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jy,jz)else aj=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jy,jz)end;if radarPanelID~=nil then al=0;cp()end end end end;local function jD()local dT=q()local f6=bI;local jE=dT-aw;if f6>1.38889 then f6=f6/1000;local jF=f6*(dT-aw)TotalDistanceTravelled=TotalDistanceTravelled+jF;ab=ab+jF end;ac=ac+jE;TotalFlightTime=TotalFlightTime+jE;aw=dT end;local function jG()for _,bU in pairs(aG)do if bU.hovered then if not bU.drawCondition or bU.drawCondition()then bU.toggleFunction()end;bU.hovered=false end end end;local function jH()local function jI(jJ,jK,dw,em,hG,hH)if jJ>dw and jJ<dw+hG and jK>em and jK<em+hH then return true else return false end end;local dw=af+aH/2;local em=ag+aI/2;for _,bU in pairs(aG)do bU.hovered=jI(dw,em,bU.x,bU.y,bU.width,bU.height)end end;local function jL(dv)local function jM(dv,jN,hover,dw,em,iu,jO,jP,jQ,jR,jS)if type(jR)=="function"then jR=jR()end;if type(jS)=="function"then jS=jS()end;dv[#dv+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",dw,em,iu,jO)if jN then dv[#dv+1]=e("%s'",jP)else dv[#dv+1]=jQ end;if hover then dv[#dv+1]=" style='stroke:white; stroke-width:2'"else dv[#dv+1]=" style='stroke:black; stroke-width:1'"end;dv[#dv+1]="></rect>"dv[#dv+1]=e("<text x='%f' y='%f' font-size='24' fill='",dw+iu/2,em+jO/2+5)if jN then dv[#dv+1]="black"else dv[#dv+1]="white"end;dv[#dv+1]="' text-anchor='middle' font-family='Montserrat'>"if jN then dv[#dv+1]=e("%s</text>",jR)else dv[#dv+1]=e("%s</text>",jS)end end;local jT="rgb(50,50,50)'"local jU="rgb(210,200,200)"local jV=jM;for _,bU in pairs(aG)do local hF=bU.disableName;local hE=bU.enableName;if type(hF)=="function"then hF=hF()end;if type(hE)=="function"then hE=hE()end;if not bU.drawCondition or bU.drawCondition()then jV(dv,bU.toggleVar(),bU.hovered,bU.x,bU.y,bU.width,bU.height,jU,jT,hF,hE)end end end;if iX=="tenthSecond"then if at>0 and not WasInAtmo then if not bO and AtmoSpeedAssist and(AltitudeHold or Reentry)then bP(1)M=false end end;if bN~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bN then bS(bN,TRUE)else bN=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then i_()end;if AutopilotTargetName~=nil then local jW=CustomTarget~=nil;planetMaxMass=jk()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=jm()if jW and not Autopilot then ai=(bK-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a6,a7=d8(bI)a8,a9=d8(MaxGameVelocity)else a6,a7=d9(bI)a8,a9=d9(MaxGameVelocity)end;local fi,cm=ci(ai)v(widgetDistanceText,'{"label": "distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..db(travelTime)..'", "unit":""}')fi,cm=ci(a6)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..db(a7)..'", "unit":""}')fi,cm=ci(a8)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..fi..'", "unit":"'..cm..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..db(a9)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')fi,cm=ci(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",fi)..'", "unit":"'..cm..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else j0()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iX=="oneSecond"then aq=false;bW(nil,true)jD()jv()ju()local dv={}dv=bb.DrawOdometer(dv,ab,TotalDistanceTravelled,ac)if ShouldCheckDamage then j9(dv)end;ak=table.concat(dv,"")collectgarbage("collect")elseif iX=="fiveSecond"then ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local cl=f(dbHud_1.getStringValue("SavedLocations"))if cl~=nil then _G["SavedLocations"]=cl;local cH=-1;local cI;for c2,bU in pairs(SavedLocations)do if bU.name and bU.name=="SatNav Location"then cH=c2;break end end;if cH~=-1 then cI=SavedLocations[cH]cH=-1;for c2,bU in pairs(b1[0])do if bU.name and bU.name=="SatNav Location"then cH=c2;break end end;if cH>-1 then b1[0][cH]=cI end;c1()a2=cI.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cw()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iX=="msgTick"then local dv={}bb.DisplayMessage(dv,"empty")a2="empty"unit.stopTimer("msgTick")ah=3 elseif iX=="animateTick"then bd=true;bc=false;af=0;ag=0;unit.stopTimer("animateTick")elseif iX=="hudTick"then local dv={}bb.HUDPrologue(dv)if showHud then bb.UpdateHud(dv)else bb.DisplayOrbitScreen(dv)bb.DrawWarnings(dv)end;bb.HUDEpilogue(dv)dv[#dv+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aH,aI)if a2~="empty"then bb.DisplayMessage(dv,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bb.DrawDeadZone(dv)end end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then jH()jL(dv)if screen_1.getMouseState()==1 then jG()end;dv[#dv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)elseif y()==0 then if m()==1 and a1 then jH()jL(dv)if not bc and not bd then local jX=table.concat(dv,"")dv={}dv[#dv+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dv[#dv+1]=b2;dv[#dv+1]=jX;dv[#dv+1]="</body>"bc=true;dv[#dv+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dv,"")system.setScreen(content)elseif bd then local jX=table.concat(dv,"")dv={}dv[#dv+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dv[#dv+1]=b2;dv[#dv+1]=jX;dv[#dv+1]="</body>"end;if not bc then dv[#dv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end else jG()end else if not a1 and m()==0 then jG()if ai>DeadZone then if DisplayDeadZone then ji(dv)end end else jH()jL(dv)end;dv[#dv+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end;dv[#dv+1]=[[</svg></body>]]content=table.concat(dv,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iX=="apTick"then as=j()>0;at=j()au=core.getAltitude()if antigrav then bM=antigrav.getState()==1 end;bD=q()local jY=bD-bj;bj=bD;local fQ=getRoll(bJ,bF,bG)local fR=fQ/180*math.pi;local fS=math.cos(fR)local fT=math.sin(fR)local jZ=cK(bJ,bF,bG*fS+bE*fT)local j_=-math.deg(cP(bE,bH,bF))local k0=math.deg(cP(bG,bH,bF))local k1=1;local k2=1;bi=as and j_<-YawStallAngle or j_>YawStallAngle or k0<-PitchStallAngle or k0>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not a1 then bh=-bh end;V=0;Z=0;U=0;sys=b7[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=ba(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)if au==0 then au=(bK-planet.center):len()-planet.radius end;ap=cq()local bX=planet:getGravity(core.getConstructWorldPos()):len()*l()bk=0;b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not as then G,H,_,_=j1(bK)else G=true end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then af=screen_1.getMouseX()*aH;ag=screen_1.getMouseY()*aI elseif y()==0 then if m()==1 and a1 then if not bc then af=af+bg;ag=ag+bh end else af=0;ag=0 end else af=af+bg;ag=ag+bh;ai=math.sqrt(af*af+ag*ag)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then V=V-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then V=V-(af+DeadZone)*MouseXSensitivity else V=0 end;if ag>0 and ag>DeadZone then U=U-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then U=U-(ag+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then af=0;ag=0;U=(-utils.smoothstep(bh,-100,100)+0.5)*2*k1;V=(-utils.smoothstep(bg,-100,100)+0.5)*2*k2 else af=0;ag=0 end end end;local k3=bI>8334;if bI>SpaceSpeedLimit/3.6 and not as and not Autopilot and not k3 then a2="Space Speed Engine Shutoff reached"bP(0)end;if not k3 and LastIsWarping then if not BrakeIsOn then cT()end;if Autopilot then cB()end end;LastIsWarping=k3;if as and at>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bI<bn/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local k4=false;if CustomTarget~=nil then k4=cX(CustomTarget.position-bK,0.01)else k4=cX(vec3(bH),0.01)end;be=true;if k4 and(c(fQ)<2 or c(jZ)>80)and bI>=bn/3.6-1 then if(vec3(targetCoords)-bK):len()>40000 then ProgradeIsOn=false;IntoOrbit=true else BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d5()end elseif as and AtmoSpeedAssist then bP(1)else bS(d(bn))end elseif bI>Q then cX(vec3(bH),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bI>Q then cX(-vec3(bH))end end;if not ProgradeIsOn and am and not IntoOrbit then if at==0 then R=true;d5()am=false;ao=true else am=false;cB()end end;local cA=bJ*-1;local dZ=bH.x*cA.x+bH.y*cA.y+bH.z*cA.z;if ao and CustomTarget~=nil and(au<HoldAltitude+200 and au>HoldAltitude-200)and bI*3.6>bn-100 and c(dZ)<20 and at>=0.1 and(CustomTarget.position-bK):len()>2000+au then cB()ao=false end;if VertTakeOff then be=true;local k5=HoldAltitude;if dZ<-30 then a2="Unable to achieve lift. Safety Landing."ae=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bM or HoldAltitude<planet.spaceEngineMinAltitude then if bM then k5=antigrav.getBaseAltitude()end;if au<k5-100 then bo=0;ae=15;BrakeIsOn=false elseif dZ>0 then BrakeIsOn=true;ae=0 elseif dZ<-30 then BrakeIsOn=true;ae=15 elseif au>=k5 then if bM then BrakeIsOn=true;a2="Takeoff complete. Singularity engaged"VertTakeOff=false else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"ct()end;ae=0 end else if at>0.08 then bo=0;BrakeIsOn=false;ae=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bA then bo=0;ae=20 else ae=0;bo=36;bS(3500)end else be=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;bw=k5;bv=true;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k6=r(bo-jZ,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k6)local k7=r(vTpitchPID:get(),-1,1)U=k7 end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=aa else bx=planet end end;local k8,k9=ci(bw,2)local ka=k8 ..k9;local kb,kc=ba(bx):escapeAndOrbitalSpeed((bK-bx.center):len()-bx.radius)local kd=fQ;local function ke(kf)local d2=CustomTarget.position-bK;local a6,_=b8.computeDistanceAndTime(bI,bn/3.6,l(),0,0,LastMaxBrake)if kf and d2:len()>25000+a6+au then return false elseif bH:normalize():dot(d2:normalize())>0.5 and d2:len()>25000+a6+au then return false end;AutopilotTargetCoords=CustomTarget.position;R=true;am=false;ao=true;d5()bu.VectorToTarget=false;return true end;local function kg()if not bu.VectorToTarget and not am then bp=nil;bt=false;bv=false;bx=nil;be=autoRollPreference;if not ao then a2="Orbit established"end;bu.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;by=false;bC=0 end end;if not bv then if bx.hasAtmosphere then bw=d(bx.radius*(TargetOrbitRadius-1)+bx.noAtmosphericDensityAltitude)else bw=d(bx.radius*(TargetOrbitRadius-1)+bx.surfaceMaxAltitude)end;bv=true end;if AltitudeHold or VectorToTarget then if not an then bw=z(HoldAltitude,1)bs=true;AltitudeHold=false end;if VectorToTarget then bu.VectorToTarget=VectorToTarget;VectorToTarget=false end end;if bu.VectorToTarget or am then if ke(true)then kg()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bw*0.9 and au<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;bP(0)by=true;bq=0;if bu.VectorToTarget or am then if not ke()then bp="Orbiting to Target"else a2="In Range, proceeding with reentry"end end;kg()else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..ka;bt=true;bS(kc*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kh=dZ;local ki=au-bw;local kj=c(ki)if dZ<10 and c(jZ)<10 and kj<100 then kh=dZ*2 end;if kh<10 and c(jZ)<10 and kj<100 then kh=kh*2 end;if kh<5 and c(jZ)<5 and kj<100 then kh=kh*4 end;VSpdPID:inject(kh)bq=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(ki)bq=r(bq-r(OrbitAltPID:get(),-15,15),-90,90)end end else local kk=2.75;local kl=c(p(kb*kk))local km=kl%50;if km>0 then kl=kl-km+50 end;BrakeIsOn=false;if not bs then local kn=false;local ko=false;if au<bw then bp="Aligning to orbital path - OrbitHeight: "..ka else bp="Aligning to orbital point - OrbitHeight: "..ka end;bq=0;br=0;if jZ<=bq+1 and jZ>=bq-1 then kn=true else kn=false end;if kd<=br+1 and kd>=br-1 then ko=true else ko=false end;if kn and ko then bq=nil;br=nil;bs=true end else if au<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..ka;bq=utils.map(dZ,200,0,-15,80)elseif au>=bw*0.8 and au<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..ka;kl=kl*0.75;bq=utils.map(dZ,100,-100,-15,65)elseif au>=bw*1.15 and au<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..ka;kl=kl*0.75;if dZ<0 or bt then bq=utils.map(au,bw*1.5,bw*1.01,-30,0)else bq=utils.map(au,bw*0.99,bw*1.5,0,30)end elseif au>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..ka;bq=utils.map(dZ,100,-100,-65,0)kl=kl*0.75 end end;bS(d(kl))end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local kp=bq-jZ;OrbitPitchPID:inject(kp)local kq=r(OrbitPitchPID:get(),-0.5,0.5)U=kq end;if br~=nil then if jZ<80 then local kr=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(kr*0.01,0,kr*0.1)end;local ks=br-kd;OrbitRollPID:inject(ks)local kt=r(OrbitRollPID:get(),-0.5,0.5)Z=kt end end elseif CancelIntoOrbit then bv=false;bx=nil;bP(0)CancelIntoOrbit=false end;if Autopilot and at==0 and not am then local targetCoords,ku=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kv=(CustomTarget.position-aa.center):normalize()local kw=kv:project_on_plane((aa.center-bK):normalize()):normalize()local kx=aa.center+kw*(aa.radius+AutopilotTargetOrbit)local ky=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bK-kx):len()<(bK-ky):len()then targetCoords=kx;AutopilotTargetCoords=targetCoords else targetCoords=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))AutopilotTargetCoords=targetCoords end;local cD=c9(aa,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)ku=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ku=true;TargetSet=true;AutopilotRealigned=true;targetCoords=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kv=(bK+bH*100000-aa.center):normalize()local kw=kv:project_on_plane((aa.center-bK):normalize()):normalize()if kw:len()<1 then kv=(bK+bF*100000-aa.center):normalize()kw=kv:project_on_plane((aa.center-bK):normalize()):normalize()end;targetCoords=aa.center+kw*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=targetCoords;TargetSet=true;ku=true;AutopilotRealigned=true;local cD=c9(aa,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)end end;AutopilotDistance=(vec3(targetCoords)-bK):len()local fj,fk,fl=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fm)if fm.noAtmosphericDensityAltitude>0 then return fm.radius+fm.noAtmosphericDensityAltitude else return fm.radius+fm.surfaceMaxAltitude*1.5 end end)local fn=fk;if fl~=nil and fk~=nil then fn=math.min(fl,fk)end;if fn~=nil and fn<AutopilotDistance and fj.name==aa.name then AutopilotDistance=fn end;local k4=true;local kz=(aa.center-(bK+vec3(bH):normalize()*AutopilotDistance)):len()-aa.radius;local fi,cm=ci(kz)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..fi..'", "unit":"'..cm..'"}')local a6,a7;if not TurnBurn then a6,a7=d8(bI)else a6,a7=d9(bI)end;if bI>300 and AutopilotAccelerating then local d2=vec3(targetCoords)-bK;local kA=r(math.deg(cP(bE,bH:normalize(),d2:normalize()))*bI/500,-90,90)local kB=r(math.deg(cP(bG,bH:normalize(),d2:normalize()))*bI/500,-90,90)if c(kA)<20 and c(kB)<20 then kA=kA*2;kB=kB*2 end;if c(kA)<2 and c(kB)<2 then kA=kA*2;kB=kB*2 end;local j_=-math.deg(cP(bE,bF,bH:normalize()))local k0=-math.deg(cP(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kB-k0)local kC=r(apPitchPID:get(),-1,1)U=U+kC;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kA-j_)local kD=r(apYawPID:get(),-1,1)V=V+kD;ku=true;if c(kA)>2 or c(kB)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kz<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(kz)end end;if not AutopilotCruising and not AutopilotBraking and not ku then k4=cX((targetCoords-bK):normalize())elseif TurnBurn then k4=cX(-vec3(bH):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bP(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local jn=unit.getThrottle()if AtmoSpeedAssist then jn=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jn==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bP(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bP(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bP(1,true)I=1 end;local _,kc=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local d2;if CustomTarget~=nil then d2=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=kc and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bP(0)P=false;ProgradeIsOn=true;am=true;local cD=c9(aa,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,kc=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bI<=kc then if CustomTarget~=nil then if bH:normalize():dot(d2:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cD=c9(aa,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bP(0)P=false;ProgradeIsOn=true;am=true;BrakeIsOn=false;local cD=c9(aa,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bP(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;am=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jn=unit.getThrottle()if AtmoSpeedAssist then jn=I end;if jn>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if k4 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif k4 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bP(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bP(0)P=false;ProgradeIsOn=true;am=true;local cD=c9(aa,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"t(cD)end;if a0 then be=true;local kB=0;local fX=bK+vec3(unit.getMasterPlayerRelativePosition())local kE=fX-bK;local kF=vec3(kE):project_on(bF):len()local kG=vec3(kE):project_on(bG):len()local ai=math.sqrt(kF*kF+kG*kG)cX(kE:normalize())local kH=40;local kI=ai<kH;local kJ=100;local kK=r((ai-kH)/2,10,kJ)U=0;local k4=c(V)<0.1;if k4 and bI<kK and not kI then BrakeIsOn=false;kB=-20 else BrakeIsOn=true;kB=0 end;local kL=0;if c(kB-jZ)>kL then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kB-jZ)local kC=pitchPID:get()U=kC end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cE=unit.getClosestPlanetInfluence()>0;local kM=HoldAltitude-au;local kN=500+bI;local kO=1;if AutoTakeoff then kO=r(bI/100,0.1,1)end;local kB=(utils.smoothstep(kM,-kN,kN)-0.5)*2*MaxPitch*kO;if not Reentry and not am and not VectorToTarget and bF:dot(bH:normalize())<0.99 then kB=(utils.smoothstep(kM,-kN*r(20-19*at*10,1,20),kN*r(20-19*at*10,1,20))-0.5)*2*MaxPitch*r(2-at*10,1,2)*kO end;if not AltitudeHold then kB=0 end;if LockPitch~=nil then if as and not IntoOrbit then kB=LockPitch else LockPitch=nil end end;be=true;local kP=U;if Reentry then local kQ=d(bn)local kR,kS=b8.computeDistanceAndTime(bI,kQ/3.6,l(),0,0,LastMaxBrake-planet.gravity*9.8*l())local kT=au-(planet.noAtmosphericDensityAltitude+5000)if not bO and au>planet.noAtmosphericDensityAltitude+5000 and bI<=kQ/3.6 and bI>kQ/3.6-10 and c(bH:normalize():dot(bF))>0.9 then bP(0)elseif bO and(kR>-1 and kT<=kR or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if not R then kB=-80;if at>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kB=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then be=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then bS(kQ)if not bO and s:getTargetSpeed(axisCommandId.longitudinal)==bn then R=false;Reentry=false;be=true end end end;if bI>Q and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cX(vec3(bH))end;if(VectorToTarget or an)and AutopilotTargetIndex>0 and at>0.01 then local d2;if CustomTarget~=nil then d2=CustomTarget.position-bK else d2=aa.center-bK end;local kA=math.deg(cP(bJ:normalize(),bH,d2))*2;local kU=math.rad(c(fQ))if bI>minRollVelocity and at>0.01 then local kV=r(90-kB*2,-90,90)bk=r(kA*2,-kV,kV)local kW=kA;kA=r(r(kA,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kU)+4*(jZ-kB)*math.sin(math.rad(fQ)),-YawStallAngle*0.80,YawStallAngle*0.80)kB=r(r(kB*math.cos(kU),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(r(c(kW)*math.sin(kU),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bk=0;kA=r(kA,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kX=j_-kA;if not bi and bI>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kX)local kD=r(yawPID:get(),-1,1)V=V+kD elseif as and ap>-1 or bI<minRollVelocity then cX(d2)elseif bi and at>0.01 then if(j_<-YawStallAngle or j_>YawStallAngle)and at>0.01 then cX(bH)end;if(k0<-PitchStallAngle or k0>PitchStallAngle)and at>0.01 then kB=r(jZ-k0,jZ-PitchStallAngle*0.80,jZ+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local k5=planet:getAltitude(CustomTarget.position)local kT=math.sqrt(d2:len()^2-(au-k5)^2)local kY=LastMaxBrakeInAtmo;if kY then kY=kY*r(bI/100,0.1,1)*at else kY=LastMaxBrake end;if at<0.01 then kY=LastMaxBrake end;local kZ=bH:len()-c(dZ)local k_=vec3(core.getWorldAirFrictionAcceleration())local l0=math.sqrt(k_:len()-k_:project_on(cA):len())*l()if bI>100 then a6,a7=b8.computeDistanceAndTime(bI,100,l(),0,0,kY+l0)local l1,l2=b8.computeDistanceAndTime(100,0,l(),0,0,kY/2)a6=a6+l1 else a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kY/2)end;StrongBrakes=true;if not an and not Reentry and kT<=a6+bI*jY/2 and(bH:project_on_plane(bJ):normalize():dot(d2:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bP(0)I=0;if AltitudeHold then cu()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kZ<0.1 or kT<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kT)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kT end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local d2=CustomTarget.position-bK;local k5=planet:getAltitude(CustomTarget.position)local kT=math.sqrt(d2:len()^2-(au-k5)^2)local kY=LastMaxBrakeInAtmo;if not by then bv=false;IntoOrbit=true else kY=LastMaxBrake;a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kY/2)StrongBrakes=true;if kT<=a6+bI*jY/2 and bH:project_on_plane(bJ):normalize():dot(d2:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d5()end end;LastDistanceToTarget=kT end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or VectorToTarget or IntoOrbit or Reentry)then if not by then IntoOrbit=true end end;if bi and at>0.01 and ap==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then cX(bH)kB=r(jZ-k0,jZ-PitchStallAngle*0.80,jZ+PitchStallAngle*0.80)end;U=kP;local dh=-1;if BrakeLanding then kB=0;local l3=false;local l4=30;if b9~=nil and b9>0 then local l0=0;local fY=r(at,0.4,2)local kY=LastMaxBrakeInAtmo*r(bI/100,0.1,1)*fY;local l5=b9*fY+kY+l0-bX;local l6=kY/2+l0-bX;local l7=bI-math.sqrt(c(l6/2)*20/(0.5*l()))*utils.sign(l6)if l7<0 then l7=0 end;local l8;if bI>100 then local l9,_=b8.computeDistanceAndTime(bI,100,l(),0,0,kY)local la,_=b8.computeDistanceAndTime(100,0,l(),0,0,math.sqrt(kY))l8=l9+la else l8=b8.computeDistanceAndTime(bI,0,l(),0,0,math.sqrt(kY))end;if l8<20 then BrakeIsOn=false else local lb=0;if l7>100 then local lc,_=b8.computeDistanceAndTime(l7,100,l(),0,0,l5)local ld,_=b8.computeDistanceAndTime(100,0,l(),0,0,b9*fY+math.sqrt(kY)+l0-bX)lb=lc+ld else lb,_=b8.computeDistanceAndTime(l7,0,l(),0,0,b9*fY+math.sqrt(kY)+l0-bX)end;lb=(lb+15+bI*jY)*1.1;local le=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if le then local k5=planet:getAltitude(CustomTarget.position)local lf=au-k5-100;local d2=CustomTarget.position-bK;local lg=math.sqrt(d2:len()^2-(au-k5)^2)if lg>100 then le=false elseif lf<=lb or lb==-1 then BrakeIsOn=true;l3=true else BrakeIsOn=false;l3=true end end;if not le and CalculateBrakeLandingSpeed then if lb>=l4 then BrakeIsOn=true else BrakeIsOn=false end;l3=true end end end;if not bO then bP(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)dh=ap;if dh>-1 then be=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-cA)<0.999 then BrakeIsOn=true elseif dZ<-brakeLandingRate and not l3 then BrakeIsOn=true elseif not l3 then BrakeIsOn=false end end;if AutoTakeoff or an then local fj,fl,fk;if AutopilotTargetCoords~=nil then fj,fl,fk=b7:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(fm)return fm.radius+fm.noAtmosphericDensityAltitude end)end;if bM then if au>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bP(0)I=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kB)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bO and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif an and bI<Q then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;bP(0)I=0 elseif an then bP(0)I=0;BrakeIsOn=true end elseif an and at==0 and aa~=nil and(fj==nil or fj.name==aa.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bO then bP(0)end;AutopilotAccelerating=true end end;local lh=cq()>-1;local li=jZ;if(VectorToTarget or an)and not lh and bI>minRollVelocity and at>0.01 then local kU=math.rad(c(fQ))li=jZ*c(math.cos(kU))+k0*math.sin(kU)end;local lj=r(kB-li,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then lj=r(kB-li,-85,MaxPitch)elseif at<0.01 then lj=r(kB-li,-MaxPitch,MaxPitch)end;if c(fQ)<5 or VectorToTarget or BrakeLanding or lh or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lj)local kC=pitchPID:get()U=U+kC end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function lk(ll,kK)local lm=vec3()local ln=vec3()if ll==axisCommandId.longitudinal then lm=vec3(core.getConstructOrientationForward())ln=bF elseif ll==axisCommandId.vertical then lm=vec3(core.getConstructOrientationUp())ln=bE elseif ll==axisCommandId.lateral then lm=vec3(core.getConstructOrientationRight())ln=bG else return vec3()end;local lo=vec3(core.getWorldGravity())local lp=lo:dot(ln)local lq=vec3(core.getWorldAirFrictionAcceleration())local lr=lq:dot(ln)local ls=vec3(core.getVelocity())local lt=ls:dot(lm)local lu=kK*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lu-lt)local lv=targetSpeedPID2:get()local lw=(lv-lr-lp)*ln;return lw end;local function lx(ll,kK)local lm=vec3()local ln=vec3()if ll==axisCommandId.longitudinal then lm=vec3(core.getConstructOrientationForward())ln=bF elseif ll==axisCommandId.vertical then lm=vec3(core.getConstructOrientationUp())ln=bE elseif ll==axisCommandId.lateral then lm=vec3(core.getConstructOrientationRight())ln=bG else return vec3()end;local lo=vec3(core.getWorldGravity())local lp=lo:dot(ln)local lq=vec3(core.getWorldAirFrictionAcceleration())local lr=lq:dot(ln)local ls=vec3(core.getVelocity())local lt=ls:dot(lm)local lu=kK*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lu-lt)local lv=targetSpeedPID:get()local lw=(lv-lr-lp)*ln;return lw end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bM and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bO=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bO and M then bP(0)M=false elseif not bO and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local ly=r(T+U+system.getControlDeviceForwardInput(),-1,1)local lz=r(W+Z+system.getControlDeviceYawInput(),-1,1)local lA=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local lB=Y;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()local lC=bH:normalize()local lD=getRoll(bJ,bF,bG)local lE=c(lD)local lF=utils.sign(lD)local lG=vec3(core.getWorldAngularVelocity())local lH=ly*pitchSpeedFactor*bG+lz*rollSpeedFactor*bF+lA*yawSpeedFactor*bE;if bJ:len()>0.01 and(at>0.0 or ProgradeIsOn or Reentry or am or AltitudeHold)then local fQ=getRoll(bJ,bF,bG)local fR=fQ/180*math.pi;local fS=math.cos(fR)local fT=math.sin(fR)local jZ=cK(bJ,bF,bG*fS+bE*fT)if be==true and c(bk-lD)>autoRollRollThreshold and lz==0 and c(jZ)<85 then local lI=bk;local kr=autoRollFactor;if at==0 then kr=kr/4;bk=0;lI=0 end;if rollPID==nil then rollPID=pid.new(kr*0.01,0,kr*0.1)end;rollPID:inject(lI-lD)local lJ=rollPID:get()lH=lH+lJ*bF end end;if bJ:len()>0.01 and at>0.0 then local lK=20.0;if turnAssist==true and lE>lK and ly==0 and lA==0 then local lL=turnAssistFactor*0.1;local lM=turnAssistFactor*0.025;local lN=(lE-lK)/(180-lK)*180;local lO=0;if lN<90 then lO=lN/90 elseif lN<180 then lO=(180-lN)/90 end;lO=lO*lO;local lP=-lF*lM*(1.0-lO)local lQ=lL*lO;lH=lH+lQ*bG+lP*bE end end;local lR=1;local lS=0;local lT=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bn=r(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bn=r(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I-speedChangeLarge/100,-1,1),2)end end;J=0;local dZ=-bJ:dot(bH)if as and AtmoSpeedAssist and bO then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local lU=throttlePID:get()L=r(lU,-1,1)if L<I and at>0.005 then K=true;s:setThrottleCommand(axisCommandId.longitudinal,r(L,0.01,1))else K=false;s:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local lV=r(brakePID:get(),0,1)if at>0 and dZ<-80 or at>0.005 then J=lV end;if J>0 then if K and L==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else L=r(L,0.01,1)end;local lW=''local lX=vec3()local lY=lk(axisCommandId.vertical,ae*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lY,lS)local lZ='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lZ=lZ..ExtraLongitudeTags end;local l_=s:getAxisCommandType(axisCommandId.longitudinal)local m0=s:composeAxisAccelerationFromThrottle(lZ,axisCommandId.longitudinal)local m1=lx(axisCommandId.lateral,LeftAmount*1000)lW=lW..' , '.."lateral airfoil , lateral ground "lX=lX+m1;if lX:len()>constants.epsilon then Nav:setEngineForceCommand(lW,lX,lS,'','','',lT)end;Nav:setEngineForceCommand(lZ,m0,lR)local m2='thrust analog vertical fueled 'local m3='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m3=m3 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m2=m2 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m2,lY,lR)else Nav:setEngineForceCommand(m2,vec3(),lR)end;if LeftAmount~=0 then Nav:setEngineForceCommand(m3,m1,lR)else Nav:setEngineForceCommand(m3,vec3(),lR)end;if lB==0 then lB=J end;local m4=-lB*(brakeSpeedFactor*bH+brakeFlatFactor*lC)Nav:setEngineForceCommand('brake',m4)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,I)end;local kK=unit.getAxisCommandValue(0)if not bO then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-kK/3.6)local lV=r(brakePID:get(),0,1)lB=r(lB+lV,0,1)end;local m4=-lB*(brakeSpeedFactor*bH+brakeFlatFactor*lC)Nav:setEngineForceCommand('brake',m4)local lW=''local lX=vec3()local m5=false;local lZ='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lZ=lZ..ExtraLongitudeTags end;local l_=s:getAxisCommandType(axisCommandId.longitudinal)if l_==axisCommandType.byThrottle then local m0=s:composeAxisAccelerationFromThrottle(lZ,axisCommandId.longitudinal)Nav:setEngineForceCommand(lZ,m0,lR)elseif l_==axisCommandType.byTargetSpeed then local m0=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lW=lW..' , '..lZ;lX=lX+m0;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m5=true end end;local m3='thrust analog lateral 'if ExtraLateralTags~="none"then m3=m3 ..ExtraLateralTags end;local m6=s:getAxisCommandType(axisCommandId.lateral)if m6==axisCommandType.byThrottle then local m7=s:composeAxisAccelerationFromThrottle(m3,axisCommandId.lateral)Nav:setEngineForceCommand(m3,m7,lR)elseif m6==axisCommandType.byTargetSpeed then local m1=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lW=lW..' , '..m3;lX=lX+m1 end;local m2='thrust analog vertical 'if ExtraVerticalTags~="none"then m2=m2 ..ExtraVerticalTags end;local m8=s:getAxisCommandType(axisCommandId.vertical)if m8==axisCommandType.byThrottle then local lY=s:composeAxisAccelerationFromThrottle(m2,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m2,lY,lR,'airfoil','ground','',lT)else Nav:setEngineForceCommand(m2,vec3(),lR)Nav:setEngineForceCommand('airfoil vertical',lY,lR,'airfoil','','',lT)Nav:setEngineForceCommand('ground vertical',lY,lR,'ground','','',lT)end elseif m8==axisCommandType.byTargetSpeed then if ae<0 then Nav:setEngineForceCommand('hover',vec3(),lR)end;local m9=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lW=lW..' , '..m2;lX=lX+m9 end;if lX:len()>constants.epsilon then if Y~=0 or m5 or c(lC:dot(bF))<0.8 then lW=lW..', brake'end;Nav:setEngineForceCommand(lW,lX,lS,'','','',lT)end end;local ma=torqueFactor*(lH-lG)local mb=vec3(core.getWorldAirFrictionAngularAcceleration())ma=ma-mb;Nav:setEngineTorqueCommand('torque',ma,lR,'airfoil','','',lT)Nav:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local b_=vec3(core.getVelocity()):len()local mc=0.15;if not bO then local md=s:getTargetSpeed(axisCommandId.longitudinal)if b_*3.6>md*(1-mc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_*3.6<md*(1-mc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jn=unit.getThrottle()if AtmoSpeedAssist then jn=I*100 end;local kK=jn/100;if j==0 then kK=kK*MaxGameVelocity;if b_>=kK*(1-mc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_<kK*(1-mc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kQ=d(bn)kK=kK*kQ/3.6;if b_>=kK*(1-mc)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_<kK*(1-mc)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cl=coroutine.resume(beginSetup)if cl then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(me)local function mf()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function mg()if LockPitch==nil and as then LockPitch=cK(bJ,bF,bG)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function mh()if aq then aq=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;am=false;an=false;R=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else aq=true end end;if me=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bP(0)if(vBooster or hover)and ap==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then Nav.control.extendLandingGears()end else if S then Nav.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif me=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif me=="forward"then T=T-1 elseif me=="backward"then T=T+1 elseif me=="left"then W=W-1 elseif me=="right"then W=W+1 elseif me=="yawright"then X=X-1 elseif me=="yawleft"then X=X+1 elseif me=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif me=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif me=="up"then ae=ae+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif me=="down"then ae=ae-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif me=="groundaltitudeup"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+a3 else s:updateTargetGroundAltitudeFromActionStart(1.0)end elseif me=="groundaltitudedown"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-a3 else s:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif me=="option1"then cz()toggleView=false elseif me=="option2"then cz(1)toggleView=false elseif me=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mf()toggleView=false elseif me=="option4"then cB()toggleView=false elseif me=="option5"then mg()toggleView=false elseif me=="option6"then cu()toggleView=false elseif me=="option7"then toggleView=false elseif me=="option8"then cv()toggleView=false elseif me=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif me=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;bd=false;bc=false end elseif me=="brake"then if BrakeToggleStatus then cT()elseif not BrakeIsOn then cT()else BrakeIsOn=true end elseif me=="lalt"then AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif me=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a5 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a5=false end elseif me=="stopengines"then s:resetCommand(axisCommandId.longitudinal)mh()I=0 elseif me=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cz()end elseif me=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cz(1)end elseif me=="antigravity"and not ExternalAGG then if antigrav~=nil then da()end end end;function script.onActionStop(me)if me=="forward"then T=0 elseif me=="backward"then T=0 elseif me=="left"then W=0 elseif me=="right"then W=0 elseif me=="yawright"then X=0 elseif me=="yawleft"then X=0 elseif me=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif me=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif me=="up"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif me=="down"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif me=="groundaltitudeup"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff then a3=OldButtonMod end elseif me=="groundaltitudedown"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff then a3=OldButtonMod end elseif me=="lshift"then if y()==1 then a1=false;af=0;ag=0;x(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a1=false;bd=false;bc=false end elseif me=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cT()else BrakeIsOn=false end end elseif me=="lalt"then if m()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(me)if me=="groundaltitudeup"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+a3;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif me=="groundaltitudedown"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-a3;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif me=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif me=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(d6)local function mi()for c2,bU in pairs(a)do dbHud_1.setStringValue(bU,g(nil))end;for c2,bU in pairs(b)do if bU~="SavedLocations"then dbHud_1.setStringValue(bU,g(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5;aJ=false;ad=true end;local function mj(mk,planet,fX)local function ml(fX)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gl='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gy,gz,cf,cg,ce=o(fX,gl)if gy=="0"and gz=="0"then return vec3(tonumber(cf),tonumber(cg),tonumber(ce))end;cg=math.rad(cg)cf=math.rad(cf)local planet=b1[tonumber(gy)][tonumber(gz)]local hk=math.cos(cf)local mm=vec3(hk*math.cos(cg),hk*math.sin(cg),math.sin(cf))return planet.center+(planet.radius+ce)*mm end;if dbHud_1 then local cI={}local position=ml(fX)if planet.name=="Space"then cI={position=position,name=mk,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cI={position=position,name=mk,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cI;table.insert(b1[0],cI)c1()else a2="Databank must be installed to save locations"end end;local i;local mn="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local mo,mp=nil,nil;local mq="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(d6," ")mo=d6;if i~=nil then mo=string.sub(d6,0,i-1)mp=string.sub(d6,i+1)elseif string.find(mn,mo)==-1 then for g6 in string.gmatch(mq,"([^\n]+)")do system.print(g6)end;return end;if mo=="ah-setname"then if mp==nil or mp==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cF(mp)else a2="Select a saved target to rename first"end elseif mo=="ah-addlocation"then if mp==nil or mp==""or string.find(mp,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mp,"::")local mk=string.sub(mp,1,i-2)local fX=string.sub(mp,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gl='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gy,gz,cf,cg,ce=o(fX,gl)local planet=b1[tonumber(gy)][tonumber(gz)]mj(mk,planet,fX)a2="Added "..mk.." to saved locations,\nplanet "..planet.name.." at "..fX;ah=5 elseif mo=="ah-agg"then if mp==nil or mp==""then a2="Usage: ah-agg targetheight"return end;mp=tonumber(mp)if mp<1000 then mp=1000 end;AntigravTargetAltitude=mp;a2="AGG Target Height set to "..mp elseif mo=="ah-G"then if mp==nil or mp==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mp=="dump"then for c2,bU in pairs(a)do if type(_G[bU])=="boolean"then if _G[bU]==true then system.print(bU.." true")else system.print(bU.." false")end elseif _G[bU]==nil then system.print(bU.." nil")else system.print(bU.." ".._G[bU])end end;return end;i=string.find(mp," ")local mr=string.sub(mp,0,i-1)local ms=string.sub(mp,i+1)for c2,bU in pairs(a)do if bU==mr then a2="Variable "..mr.." changed to "..ms;local mt=type(_G[bU])if mt=="number"then ms=tonumber(ms)elseif mt=="boolean"then if string.lower(ms)=="true"then ms=true else ms=false end end;_G[bU]=ms;return end end;a2="No such global variable: "..mr elseif mo=="ah-copydatabank"then if dbHud_2 then dj(true)else a2="Spare Databank required to copy databank"end elseif mo=="ah-wipedatabank"then if dbHud_1 then mi()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
