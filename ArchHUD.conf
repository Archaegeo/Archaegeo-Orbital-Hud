name: ArchHud - Archaegeo v1.5161 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        AutoShieldToggle = true --export:
        PreventPvP = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.2 --export:
        LowOrbitHeight = 2000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        WipeDamage = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 0 --export:
        OrbitMapY = 25 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)local b=require("atlas")script={}VERSION_NUMBER=1.5161;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"LastVersionUpdate=0.000;local c={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra","SelectedTab"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local y=math.sqrt;local z=tonumber;local core=core;local function A(B,C)local D=10^(C or 0)return e(B*D+0.5)/D end;local E=q()local F=q()local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8=0;local a9=0;local aa=0;local ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=k()>0;local ar=k()local as=core.getAltitude()local at=core.getElementIdList()local au=q()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]local az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=q()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=50000;local bJ=""local bK=nil;local bL={}local bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local bN=false;local bO=nil;local bP={}local bQ="Atmo"local bR=false;local bS=0;local bT={}local bU=nil;local bV=nil;function p(bW)system.print(E..": "..bW)end;local function bX(bY)local D=1;if bY then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn and aw then local bZ=K;K=A(r(K+D*speedChangeLarge/100,-1,1),2)if K>=0 and bZ<0 then K=0;aw=false end elseif AltIsOn then if ar>0 or Reentry then b7=r(b7+D*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+D*speedChangeLarge/3.6*100,0,8333.00)end else s:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if Autopilot or VectorToTarget or am or IntoOrbit then bS=bS+1*D*-1;if bS>#bG then bS=1 end;if bS<1 then bS=#bG end else if not bY then D=1 else D=nil end;aW.adjustAutopilotTargetIndex(D)end end end;local function b_(c0)local c1,c2,c3=aR:getPlanetarySystem(0):castIntersections(bv,c0,function(c4)if c4.noAtmosphericDensityAltitude>0 then return c4.radius+c4.noAtmosphericDensityAltitude else return c4.radius+c4.surfaceMaxAltitude*1.5 end end)local c5=c2;if c3~=nil and c2~=nil then c5=math.min(c3,c2)end;if c5~=nil then return c1,c5 else return nil,nil end end;local function c6(c7,c8,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)end end;local function c9(ca,cb)for i=1,#cb do ca[#ca+1]=cb[i]end;return ca end;local function cc(cd)local ce={}local cf={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","voices","alerts","CollisionSystem","AutoShieldToggle","PreventPvP"}local cg={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization","WipeDamage"}local ch={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local ci={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not cd then c9(ce,cf)c9(ce,cg)c9(ce,ch)c9(ce,ci)return ce elseif cd=="boolean"then return cf elseif cd=="handling"then return cg elseif cd=="hud"then return ch elseif cd=="physics"then return ci end end;local function cj(ck,cl,cm,cn,co)if cn==nil then cn=""end;if co==nil then co=""end;return f([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cn,ck,cl,co,cm)end;local function cp(cq,cr)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not cr then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,cq)K=r(A(cq*100,0)/100,-1,1)bz=nil end;local function cs(cq,cr)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cr then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,cq)bz=cq end;local function ct(cu,cv)if cu==0 then return d(cv)<1e-09 end;if cv==0 then return d(cu)<1e-09 end;return d(cu-cv)<math.max(d(cu),d(cv))*epsilon end;local function cw(aj,cx)local cy=aj>100000;if cx==nil then cx=1 end;if cy then return A(aj/1000/200,cx).."SU"elseif aj<1000 then return A(aj,cx).."M"else return A(aj/1000,cx).."KM"end end;local function cz()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cs(e(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cA()bi=false;ba=nil;bb=nil;bm=0;if ar==0 then if IntoOrbit then c6("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bM then c6("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cB()if E-b5<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;c6("11","EP")else if bM then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cA()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=E end;if bM and ar==0 then bg=as;bf=true;bc=true;cA()if IntoOrbit then b5=E else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b0=true;LockPitch=nil;bi=false;if ao~=-1 and bs<20 then c6("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then cz()end else c6("altOn","AH")AutoTakeoff=false;if b5>-1 then if bM then HoldAltitude=as end end;if VertTakeOff then cz()end end;if am then HoldAltitude=100000 end else c6("altOff","AH")if IntoOrbit then cA()end;if VertTakeOff then cz()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cC(cD)if cD then am=false;Autopilot=false;AutopilotRealigned=false;P=false;HoldAltitude=as;TargetSet=false end;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bK=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cz()end;if IntoOrbit then cA()end;b0=autoRollPreference;al=false;an=false;af=0 end;local function cE()local function cF(SpaceTarget)bN=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cB()end end;VectorStatus="Proceeding to Waypoint"end;if E-b6<1.5 and ar>0 then if not bl then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;c6("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then c6("apSpc","AP")if ar~=0 then am=true;cB()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then c6("vtt","AP")cF(SpaceTarget)end else c6("apOn","AP")if not(ac.name==planet.name and as<AutopilotTargetOrbit*1.5)then bi=false;Autopilot=true elseif not aq then if IntoOrbit then cA()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cA()end end end else c6("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cB()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bM)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cA()else c6("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else c6("apP","AP")am=true;cB()end else c6("apOff","AP")cC(1)end end;local function cG()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then c6("bkOn","B",1)cC()else c6("bkOff","B",1)end end;local function cH()if Reentry then a2="Re-Entry cancelled"c6("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;c6("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cm=cw(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..cm;c6("glide","RE")cs(e(b7))end;AutoTakeoff=false end;local function cI()if antigrav and not ExternalAGG then if by then c6("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;c6("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cJ(cK)local cL=0;local cM=0;local cN=0;if cK<60 then cK=e(cK)elseif cK<3600 then cL=e(cK/60)cK=e(cK%60)elseif cK<86400 then cM=e(cK/3600)cL=e(cK%3600/60)else cN=e(cK/86400)cM=e(cK%86400/3600)end;if cN>0 then return cN.."d "..cM.."h "elseif cM>0 then return cM.."h "..cL.."m "elseif cL>0 then return cL.."m "..cK.."s"elseif cK>0 then return cK.."s"else return"0s"end end;local function cO(cP)local function cQ(cR)for cS,cT in pairs(cR)do dbHud_1.setStringValue(cT,h(_G[cT]))if cP and dbHud_2 then dbHud_2.setStringValue(cT,h(_G[cT]))end end end;if dbHud_1 then cQ(c)cQ(cc())system.print("Saved Variables to Datacore")if cP and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cU(cT)if aG==1920 then return cT else return A(aG*cT/1920,0)end end;local function cV(cT)if aH==1080 then return cT else return A(aH*cT/1080,0)end end;local function cW()local function cX(cY)return type(cY)=='number'end;local function cZ(cY)return type(z(cY))=='number'end;local function c_(d0)return type(d0)=='table'end;local function d1(d2)return type(d2)=='string'end;local function d3(cT)return c_(cT)and cX(cT.x and cT.y and cT.z)end;local function d4(d5)return c_(d5)and cX(d5.latitude and d5.longitude and d5.altitude and d5.id and d5.systemId)end;local d6=math.pi/180;local d7=180/math.pi;local epsilon=1e-10;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8='::pos{'..B..','..B..','..B..','..B..','..B..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function d9(cY)local da=string.gsub(string.reverse(f('%.4f',cY)),'^0*%.?','')return da==''and'0'or string.reverse(da)end;local function db(dc)if d3(dc)then return f('{x=%.3f,y=%.3f,z=%.3f}',dc.x,dc.y,dc.z)end;if c_(dc)and not getmetatable(dc)then local dd={}local de=next(dc)if type(de)=='nil'or de==1 then dd=dc else for cS,cT in pairs(dc)do local cq=db(cT)if type(cS)=='number'then table.insert(dd,f('[%s]=%s',cS,cq))else table.insert(dd,f('%s=%s',cS,cq))end end end;return f('{%s}',table.concat(dd,','))end;if d1(dc)then return f("'%s'",dc:gsub("'",[[\']]))end;return tostring(dc)end;local df={}df.__index=df;df.__tostring=function(dc,dg)local dh={}for cS in pairs(dc)do table.insert(dh,cS)end;table.sort(dh)local dd={}for _,cS in ipairs(dh)do local cq=db(dc[cS])if type(cS)=='number'then table.insert(dd,f('[%s]=%s',cS,cq))else table.insert(dd,f('%s=%s',cS,cq))end end;if dg then return f('%s%s',dg,table.concat(dd,',\n'..dg))end;return f('{%s}',table.concat(dd,','))end;df.__eq=function(di,dj)return di.systemId==dj.systemId and di.id==dj.id and ct(di.radius,dj.radius)and ct(di.center.x,dj.center.x)and ct(di.center.y,dj.center.y)and ct(di.center.z,dj.center.z)and ct(di.GM,dj.GM)end;local function dk(dl,dm,dn,dp,dq)assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dn),'Argument 3 (radius) must be a number:'..type(dn))assert(c_(dp),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dp))assert(cZ(dq),'Argument 5 (GM) must be a number:'..type(dq))return setmetatable({systemId=z(dl),id=z(dm),radius=z(dn),center=vec3(dp),GM=z(dq)},df)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return f('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,d9(p.latitude*d7),d9(p.longitude*d7),d9(p.altitude))end;MapPosition.__eq=function(di,dj)return di.id==dj.id and di.systemId==dj.systemId and ct(di.latitude,dj.latitude)and ct(di.altitude,dj.altitude)and(ct(di.longitude,dj.longitude)or ct(di.latitude,math.pi/2)or ct(di.latitude,-math.pi/2))end;local function dr(ds,dm,dt,du,dv)local dl=ds;if d1(ds)and not du and not dv and not dm and not dt then dl,dm,dt,du,dv=o(ds,d8)assert(dl,'Argument 1 (position string) is malformed.')else assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dt),'Argument 3 (latitude) must be in degrees:'..type(dt))assert(cZ(du),'Argument 4 (longitude) must be in degrees:'..type(du))assert(cZ(dv),'Argument 5 (altitude) must be in meters:'..type(dv))end;dl=z(dl)dm=z(dm)dt=z(dt)du=z(du)dv=z(dv)if dm==0 then return setmetatable({latitude=dt,longitude=du,altitude=dv,id=dm,systemId=dl},MapPosition)end;return setmetatable({latitude=d6*r(dt,-90,90),longitude=d6*(du%360),altitude=dv,id=dm,systemId=dl},MapPosition)end;local dw={}dw.__index=dw;dw.__tostring=function(dc,dg)local dx=dg and dg..'  'local dy={}local dh={}for cS in pairs(dc)do table.insert(dh,cS)end;table.sort(dh)for _,dz in ipairs(dh)do bdy=dc[dz]local dA=df.__tostring(bdy,dx)if dg then table.insert(dy,f('[%s]={\n%s\n%s}',dz,dA,dg))else table.insert(dy,f('  [%s]=%s',dz,dA))end end;if dg then return f('\n%s%s%s',dg,table.concat(dy,',\n'..dg),dg)end;return f('{\n%s\n}',table.concat(dy,',\n'))end;local function dB(dC)local b={}local pid;for _,cT in pairs(dC)do local dm=cT.planetarySystemId;if type(dm)~='number'then error('Invalid planetary system ID: '..tostring(dm))elseif pid and dm~=pid then error('Mistringmatch planetary system IDs: '..dm..' and '..pid)end;local dD=cT.bodyId;if type(dD)~='number'then error('Invalid body ID: '..tostring(dD))elseif b[dD]then error('Duplicate body ID: '..tostring(dD))end;setmetatable(cT.center,getmetatable(vec3.unit_x))b[dD]=setmetatable(cT,df)pid=dm end;return setmetatable(b,dw)end;aQ={}local function dE(dC)return setmetatable({galaxyAtlas=dC or{}},aQ)end;aQ.__index=function(d0,i)if type(i)=='number'then local system=d0.galaxyAtlas[i]return dB(system)end;return rawget(aQ,i)end;aQ.__pairs=function(dc)return function(d0,cS)local dF,nv=next(d0,cS)return dF,nv and dB(nv)end,dc.galaxyAtlas,nil end;aQ.__tostring=function(dc)local dG={}for _,dH in pairs(dc or{})do local dI=dH:getPlanetarySystemId()local dJ=dw.__tostring(dH,'    ')table.insert(dG,f('  [%s]={%s\n  }',dI,dJ))end;return f('{\n%s\n}\n',table.concat(dG,',\n'))end;aQ.BodyParameters=dk;aQ.MapPosition=dr;aQ.PlanetarySystem=dB;function aQ.createBodyParameters(dl,dm,dK,dL,dM,dN,dO)assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dK),'Argument 3 (surfaceArea) must be a number:'..type(dK))assert(c_(dL),'Argument 4 (aPosition) must be an array or vec3:'..type(dL))assert(c_(dM),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dM))assert(cZ(dN),'Argument 6 (altitude) must be in meters:'..type(dN))assert(cZ(dO),'Argument 7 (gravityAtPosition) must be number:'..type(dO))local dn=y(dK/4/math.pi)local aj=dn+dN;local dP=vec3(dL)+aj*vec3(dM)local dq=dO*aj*aj;return dk(dl,dm,dn,dP,dq)end;aQ.isMapPosition=d4;function aQ:getPlanetarySystem(ds)if i==nil then i=0 end;if nv==nil then nv=0 end;local dl=ds;if d4(ds)then dl=ds.systemId end;if type(dl)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dw then system=dB(system)end;return system end end end;function dw:sizeCalculator(c4)return 1.05*c4.radius end;function dw:castIntersections(dQ,dR,dS,dT,dU,dV)local dW={}local dX=dU or self;for _,c4 in pairs(dX)do table.insert(dW,c4)end;if not dV then table.sort(dW,function(dY,dZ)return(dY.center-dQ):len()<(dZ.center-dQ):len()end)end;local d_=dR:normalize()for _,c4 in ipairs(dW)do local e0=c4.center-dQ;local dn=self:sizeCalculator(c4)local e1=e0:dot(d_)local e2=e1^2-(e0:len2()-dn^2)if e2>=0 then local e3=y(e2)local c2=e1+e3;local c3=e1-e3;if c3>0 then return c4,c2,c3 elseif c2>0 then return c4,c2,nil end end end;return nil,nil,nil end;function dw:closestBody(e4)assert(type(e4)=='table','Invalid coordinates.')local e5,c4;local e6=vec3(e4)for _,e7 in pairs(self)do local e8=(e7.center-e6):len2()if(not c4 or e8<e5)and e7.name~="Space"then c4=e7;e5=e8 end end;return c4 end;function dw:convertToBodyIdAndWorldCoordinates(ds)local e9=ds;if d1(ds)then e9=dr(ds)end;if e9.id==0 then return 0,vec3(e9.latitude,e9.longitude,e9.altitude)end;local e7=self:getBodyParameters(e9)if e7 then return e9.id,e7:convertToWorldCoordinates(e9)end end;function dw:getBodyParameters(ds)local dm=ds;if d4(ds)then dm=ds.id end;assert(cZ(dm),'Argument 1 (id) must be a number:'..type(dm))return self[dm]end;function dw:getPlanetarySystemId()local _,cT=next(self)return cT and cT.systemId end;function df:convertToMapPosition(dp)assert(c_(dp),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dp))local ea=vec3(dp)if self.id==0 then return setmetatable({latitude=ea.x,longitude=ea.y,altitude=ea.z,id=0,systemId=self.systemId},MapPosition)end;local eb=ea-self.center;local aj=eb:len()local dv=aj-self.radius;local dt=0;local du=0;if not ct(aj,0)then local ec=n(eb.y,eb.x)du=ec>=0 and ec or 2*math.pi+ec;dt=math.pi/2-math.acos(eb.z/aj)end;return setmetatable({latitude=dt,longitude=du,altitude=dv,id=self.id,systemId=self.systemId},MapPosition)end;function df:convertToWorldCoordinates(ds)local e9=d1(ds)and dr(ds)or ds;if e9.id==0 then return vec3(e9.latitude,e9.longitude,e9.altitude)end;assert(d4(e9),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e9.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e9.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local ed=math.cos(e9.latitude)return self.center+(self.radius+e9.altitude)*vec3(ed*math.cos(e9.longitude),ed*math.sin(e9.longitude),math.sin(e9.latitude))end;function df:getAltitude(dp)return(vec3(dp)-self.center):len()-self.radius end;function df:getDistance(dp)return(vec3(dp)-self.center):len()end;function df:getGravity(dp)local ee=self.center-vec3(dp)local ef=ee:len2()return self.GM/ef*ee/y(ef)end;return setmetatable(aQ,{__call=function(_,...)return dE(...)end})end;local function eg()local aS={}local eh=30000000/3600;local ei=eh*eh;local ej=100;function aS.computeAccelerationTime(ek,el,em)local en=eh*math.asin(ek/eh)return(eh*math.asin(em/eh)-en)/el end;function aS.computeDistanceAndTime(ek,em,eo,ep,eq,er)eq=eq or 0;er=er or 0;local es=ek<=em;local et=ep*(es and 1 or-1)/eo;local eu=-er/eo;local ev=et+eu;if es and ev<=0 or not es and ev>=0 then return-1,-1 end;local ew,ex=0,0;if et~=0 and eq>0 then local en=math.asin(ek/eh)local ey=math.pi*(et/2+eu)local ez=et*eq;local eA=eh*math.pi;local cT=function(d0)local eB=(ey*d0-ez*math.sin(math.pi*d0/2/eq)+eA*en)/eA;local eC=math.tan(eB)return eh*eC/y(eC*eC+1)end;local eD=es and function(d2)return d2>=em end or function(d2)return d2<=em end;ex=2*eq;if eD(cT(ex))then local eE=0;while d(ex-eE)>0.5 do local d0=(ex+eE)/2;if eD(cT(d0))then ex=d0 else eE=d0 end end end;local eF=ek;local eG=ex/ej;for eH=1,ej do local eI=cT(eH*eG)ew=ew+(eI+eF)*eG/2;eF=eI end;if ex<2*eq then return ew,ex end;ek=eF end;local en=eh*math.asin(ek/eh)local E=(eh*math.asin(em/eh)-en)/ev;local eJ=ei*math.cos(en/eh)/ev;local aj=eJ-ei*math.cos((ev*E+en)/eh)/ev;return aj+ew,E+ex end;function aS.computeTravelTime(ek,el,aj)if aj==0 then return 0 end;if el>0 then local en=eh*math.asin(ek/eh)local eJ=ei*math.cos(en/eh)/el;return(eh*math.acos(el*(eJ-aj)/ei)-en)/el end;if ek==0 then return-1 end;assert(ek>0,'Acceleration and initial speed are both zero.')return aj/ek end;return aS end;local function eK()local vec3=require('cpml.vec3')local cW=cW()local function d1(d2)return type(d2)=='string'end;local function c_(d0)return type(d0)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dv)assert(self.body)local aj=dv+self.body.radius;if not ct(aj,0)then local orbit=y(self.body.GM/aj)return y(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(ds,eL)assert(self.body)assert(c_(ds)or d1(ds))assert(c_(eL))local eM=(d1(ds)or cW.isMapPosition(ds))and self.body:convertToWorldCoordinates(ds)or vec3(ds)local cT=vec3(eL)local eN=eM-self.body.center;local eO=cT:len2()local eP=eN:len()local eQ=self.body.GM;local eR=((eO-eQ/eP)*eN-eN:dot(cT)*cT)/eQ;local cu=eQ/(2*eQ/eP-eO)local eS=eR:len()local d_=eR:normalize()local eT=cu*(1-eS)local eU=cu*(1+eS)local eV=eT*d_+self.body.center;local eW=eS<=1 and-eU*d_+self.body.center or nil;local eX=y(cu*eQ*(1-eS*eS))local eY=eW and 2*math.pi*y(cu^3/eQ)local eZ=math.acos(eR:dot(eN)/(eS*eP))if eN:dot(cT)<0 then eZ=-(eZ-2*math.pi)end;local e_=math.acos((math.cos(eZ)+eS)/(1+eS*math.cos(eZ)))local f0=e_;if f0<0 then f0=f0+2*math.pi end;local f1=f0-eS*math.sin(f0)local f2=0;local f3=0;local f4=0;if eY~=nil then f2=f1/(2*math.pi/eY)f3=eY-f2;f4=f3+eY/2;if eZ-math.pi>0 then f3=f2;f4=f3+eY/2 end;if f4>eY then f4=f4-eY end end;return{periapsis={position=eV,speed=eX/eT,circularOrbitSpeed=y(eQ/eT),altitude=eT-self.body.radius},apoapsis=eW and{position=eW,speed=eX/eU,circularOrbitSpeed=y(eQ/eU),altitude=eU-self.body.radius},currentVelocity=cT,currentPosition=eM,eccentricity=eS,period=eY,eccentricAnomaly=e_,meanAnomaly=f1,timeToPeriapsis=f3,timeToApoapsis=f4,trueAnomaly=eZ}end;local function f5(f6)local e7=cW.BodyParameters(f6.systemId,f6.id,f6.radius,f6.center,f6.GM)return setmetatable({body=e7},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return f5(...)end})end;local function f7()local f8={}local f9={}local fa={XS=13,S=27,M=55,L=110,XL=221}local fb={}local fc;local fd;local fe;local ff;local fg;local function fh()local function fi(fj,fk,fl,fm,fn,fo,fp,fq)fk,fm,fo,fq=vec3(fk),vec3(fm),vec3(fo),vec3(fq)local fr,fs,ft=fj*fj,fl*fl,fn*fn;local eO=fm-fk;local fu=eO:normalize()local fv=eO:len()local fw=fo-fk;local fx=(fw-fw:project_on(fu)):normalize()local fy,fz=fw:dot(fu),fw:dot(fx)local fA=fy*fy+fz*fz;local fB=fu:cross(fx)local ck=(fr-fs+fv*fv)/(2*fv)local cl=(fr-ft+fA-2*fy*ck)/(2*fz)local d5=fr-ck^2-cl^2;local fC=y(d5)local fD=fk+fu*ck+fx*cl+fB*fC;local fE=fk+fu*ck+fx*cl-fB*fC;if d((fq-fD):len()-fp)<d((fq-fE):len()-fp)then return fD else return fE end end;local function fF()local function fG()local fH=core.getConstructWorldOrientationRight()local eO=core.getConstructWorldOrientationForward()local fw=core.getConstructWorldOrientationUp()local fI=library.systemResolution3(fH,eO,fw,{1,0,0})local fJ=library.systemResolution3(fH,eO,fw,{0,1,0})local fK=library.systemResolution3(fH,eO,fw,{0,0,1})return function(fL)return library.systemResolution3(fI,fJ,fK,fL)end end;local fM=fG()local fN=core.getConstructWorldPos()local eM=core.getElementPositionById(1)local fO={eM[1],eM[2],eM[3]}local fP=fM(fO)local fQ={fN[1]-fP[1],fN[2]-fP[2],fN[3]-fP[3]}return fQ end;local function fR(fS,eP,fT)local fU=fS.pts;local fV=#fU;local fW=fS.ref;if fV>3 then local fX,fY,fZ,f_=fU[fV],fU[fV-1],fU[fV-2],fU[fV-3]fS.ref=fT;local eM=fi(fX[1],fX[2],fY[1],fY[2],fZ[1],fZ[2],f_[1],f_[2])local ck,cl,fC=eM.x,eM.y,eM.z;if ck==ck and cl==cl and fC==fC then ck=ck+fW[1]cl=cl+fW[2]fC=fC+fW[3]local g0=vec3(ck,cl,fC)if not fS.lastPos then fS.center=g0 elseif(fS.lastPos-g0):len()<2 then fS.center=g0;fS.skipCalc=true end;fS.lastPos=g0 end;fS.pts={}else local g1={fT[1]-fW[1],fT[2]-fW[2],fT[3]-fW[3]}fU[fV+1]={eP,g1}end end;if bP[1]then fc=#bP[1].getConstructIds()local g2=bP[1].getData()local g3=g2:gmatch('{"constructId[^}]*}[^}]*}')if fc>0 then local fT=fF()local g4,g5=0,0;fg,ff=0,0;for cT in g3 do local dm,aj,g6=cT:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local g7=fa[g6]aj=z(aj)if bP[1].hasMatchingTransponder(dm)==1 then table.insert(f9,dm)end;local g8=bP[1].getConstructType(dm)if CollisionSystem then if g7>27 or g8=="static"or g8=="space"then fg=fg+1;local g9=bP[1].getConstructName(dm)local fS=bL[dm]if fS==nil then g7=g7+G;bL[dm]={pts={},ref=fT,name=g9,i=0,radius=g7,skipCalc=false}fS=bL[dm]end;if not fS.skipCalc then fR(fS,aj,fT)g5=g5+1 end;if fS.center then table.insert(fb,fS)end end;g4=g4+1;if bM and g4>700 or g5>70 or(not bM and g4>300 or g5>30)then coroutine.yield()g4,g5=0,0 end end end;ff=#fb;if ff>0 and bs>20 then local c4,ga,gb,gc;local gd=0;local ge=aR:getPlanetarySystem(0)gc=br:normalize()while gd<ff do coroutine.yield()local gf={table.unpack(fb,gd,math.min(gd+75,ff))}c4,ga,gb=ge:castIntersections(bv,gc,nil,nil,gf,true)if c4 and gb then bO={c4,ga,gb}break end;gd=gd+75 end;if not c4 then bO=nil end else bO=nil end;fb={}fd=g2:find('identifiedConstructs":%[%]')else fe=g2:find('worksInEnvironment":false')end end end;local function gg()if bP[1]then bQ="Atmo"if bP[1].getData():find('worksInAtmosphere":false')then bQ="Space"end end end;function f8.pickType()gg()end;function f8.assignRadar()if radar_1 and bP[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then bP[1]=radar_2 end;if bP[1]==radar_2 then gg()end elseif radar_2 and bP[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then bP[1]=radar_1 end;if bP[1]==radar_1 then gg()end end end;function f8.UpdateRadar()local gh=coroutine.status(UpdateRadarCoroutine)if gh=="suspended"then local cq,gi=coroutine.resume(UpdateRadarCoroutine)if gi then system.print("ERROR UPDATE RADAR: "..gi)end elseif gh=="dead"then UpdateRadarCoroutine=coroutine.create(fh)local cq,gi=coroutine.resume(UpdateRadarCoroutine)end end;function f8.GetRadarHud()local gj=f9;f9={}return fd,fe,fc,ff,fg,gj end;UpdateRadarCoroutine=coroutine.create(fh)return f8 end;local function gk()local gl=9.80665;local gm={}local gn={}local go=vec3({13771471,7435803,-128971})local gp=18000000;local gq=500000;local gr,gs=math.huge;local gt;local function gu(gv)gr=vec3(gv):dist(go)if gr<gp then return true,d(gr-gp)end;gs=vec3(gv):dist(vec3(planet.center))if gs<gq then gt=true else gt=false end;if d(gs-gq)<d(gr-gp)then return gt,d(gs-gq)else return gt,d(gr-gp)end end;local function cU(cT)if aG==1920 then return cT else return A(aG*cT/1920,0)end end;local function cV(cT)if aH==1080 then return cT else return A(aH*cT/1080,0)end end;local function gw()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function gx()local gy="TRAVEL"if not bA then gy="CRUISE"end;if Autopilot then gy="AUTOPILOT"end;return gy end;local gz={Generic_Moon="assets.prod.novaquark.com/20368/f410e727-9d4d-4eab-98bf-22994b3fbdcf.png",Sun="assets.prod.novaquark.com/20368/0936494e-9b3d-4d60-9ea0-d93a3f3e29cd.png",Alioth="assets.prod.novaquark.com/20368/954f3adb-3369-4ea9-854d-a14606334152.png",Alioth_bis="assets.prod.novaquark.com/20368/b83225ed-fb96-404c-8c91-86ac15dfbbec.png",Sanctuary="assets.prod.novaquark.com/20368/1a70dbff-24bc-44cb-905c-6d375d9613b8.png",Feli="assets.prod.novaquark.com/20368/da91066c-b3fd-41f4-8c01-26131b0a7841.png",Ion="assets.prod.novaquark.com/20368/91d10712-dc51-4b73-9fc0-6f07d96605a6.png",Madis="assets.prod.novaquark.com/20368/46d57ef4-40ee-46ca-8cc5-5aee1504bbfe.png",Jago="assets.prod.novaquark.com/20368/7fca8389-6b70-4198-a9c3-4875d15edb38.png",Lacobus="assets.prod.novaquark.com/20368/cb67a6a4-933c-4688-a637-898c89eb5b94.png",Sicari="assets.prod.novaquark.com/20368/f6e2f801-075f-4ccd-ab94-46d060517e8f.png",Sinnen="assets.prod.novaquark.com/20368/54a99084-7c2b-461b-ab1f-ae4229b3b821.png",Symeon="assets.prod.novaquark.com/20368/97940324-f194-4e03-808d-d71733ad545a.png",Talemai="assets.prod.novaquark.com/20368/f68628d9-3245-4d76-968e-ad9c63a19c19.png",Teoma="assets.prod.novaquark.com/20368/5a01dd8c-3cf8-4151-99a2-83b22f1e7249.png",Thades="assets.prod.novaquark.com/20368/59f997a2-bcca-45cf-aa35-26e0e41ed5c1.png"}local gA=""local gB=""local gC=""local gD=1;local gE=2;local gF=3;local gG=4;local gH=5;local gI=6;local gJ=""local gK=0;local gL=e(1/apTickRate)*2*hudTickRate;local gM={}local gN={}local gO={}local gP={}local gQ={}local gR={}local function gS(ck,gT,gU,gV,gW,gX)local gY=tankY;local gZ=tankY+5;if not BarFuelDisplay then gZ=gZ+5 end;if m()==1 and not RemoteHud then gY=gY-50;gZ=gZ-50 end;if gU=="ATMO"then gJ="atmofueltank"elseif gU=="SPACE"then gJ="spacefueltank"else gJ="rocketfueltank"end;gK=_G[gJ.."_size"]if#gV>0 then for i=1,#gV do local g9=string.sub(gV[i][gE],1,12)local g_=0;for h0=1,gK do if gV[i][gE]==g(unit[gJ.."_"..h0].getData()).name then g_=h0;break end end;local h1=q()if gW[i]==nil or gX[i]==nil or h1-gV[i][gI]>gL then local h2;local h3=0;if g_~=0 then gX[i]=g(unit[gJ.."_"..g_].getData()).percentage;gW[i]=g(unit[gJ.."_"..g_].getData()).timeLeft;if gW[i]=="n/a"then gW[i]=0 end else h3=l(gV[i][gD])-gV[i][gG]gX[i]=e(0.5+h3*100/gV[i][gF])h2=gV[i][gH]if h2<=h3 then gW[i]=0 else gW[i]=e(0.5+h3/((h2-h3)/(h1-gV[i][gI])))end;gV[i][gH]=h3;gV[i][gI]=h1 end end;if g9==gT then g9=f("%s %d",gU,i)end;if g_==0 then g9=g9 .." *"end;local h4;if gW[i]==0 then h4=""else h4=cJ(gW[i])end;if gX[i]~=nil then local h5=e(gX[i]*2.55)local h6=f("rgb(%d,%d,%d)",255-h5,h5,0)local cn=""if h4~=""and gW[i]<120 or gX[i]<5 then cn="red "end;local h7=f("rgb(%d,%d,%d)",r(e((255-h5)/2.55),50,100),r(e(h5/2.55),0,50),50)local h8="rgb(196,0,255)"if gU=="ATMO"then h8="rgb(0,188,255)"elseif gU=="SPACE"then h8="rgb(239,255,0)"end;local h9=false;if previous~=h8 then h9=true end;previous=h8;if BarFuelDisplay then if h9 then gY=gY-5;gZ=gZ-5 end;gB=gB..f([[
                                            <g class="pdim">                        
                                            <rect fill=%s class="bar" stroke=%s x="%d" y="%d" width="170" height="20"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="20" x="%d" y="%d"></rect>
                                            <text class="txtstart" fill="white" x="%d" y="%d" style="font-family:Play;font-size:14px">%s %s%%&nbsp;&nbsp;&nbsp;&nbsp;%s</text>
                                            </g>]],h7,h8,ck,gZ,h6,e(gX[i]*1.7+0.5),ck,gZ,ck+5,gZ+14,g9,gX[i],h4)gY=gY-22;gZ=gZ-22 else gB=gB..cj(ck,gY,g9,cn.."pdim txtfuel")gB=gB..cj(ck,gZ,f("%d%% %s",gX[i],h4),"pdim txtfuel","fill:"..h6)gY=gY+30;gZ=gZ+30 end end end end;tankY=gY end;local function ha(hb,dv)if dv<200000 and not aq or dv and aq then local hc=0;if d(bu)>1 then hc=45*math.log(d(bu),10)if bu<0 then hc=-hc end end;hb[#hb+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(bu),e(hc))end;return hb end;local function hd(he)local hf=-bt;he=he-he:project_on(hf)local hg=vec3(0,0,1)hg=hg-hg:project_on(hf)local hh=hg:cross(hf)local hc=hg:angle_between(he)*constants.rad2deg;if he:dot(hh)<0 then hc=360-hc end;return hc end;local function hi(hb,centerX,centerY,hj,hk,bM)local hl=circleRad;local hm=20;local hn=e(hj)if bM then for i=-45,45,5 do local ho=i;hb[#hb+1]=f([[<g transform="rotate(%f,%d,%d)">]],ho,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;hb[#hb+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+hl+hm-len,centerX,centerY+hl+hm)end;hb[#hb+1]=cj(centerX,centerY+hl+hm-35,hk,"pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY+hl+hm-25,hn.." deg","pdim txt txtmid")hb[#hb+1]=f([[<g transform="rotate(%f,%d,%d)">]],-hj,centerX,centerY)hb[#hb+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+hl+hm-20,centerX+5,centerY+hl+hm-20,centerX,centerY+hl+hm-15)hb[#hb+1]="</g>"end;hb[#hb+1]=[[<g style="clip-path: url(#headingClip);">]]local hp=hn;if bM then hp=hd(bo)end;local hq=20;local hr=e(hp)local hs=0;local ht=centerY+hl+hm+20;local hu=centerX;if hk~="YAW"then ht=cV(130)hu=cU(960)end;local hv=[[<path class="txttick line" d="]]local hw=e(hr-(hq+10)-hr%5+0.5)for i=hw+70,hw,-5 do local ck=hu-(-i*5+hp*5)if i%10==0 then hs=10;local B=i;if B==360 then B=0 elseif B>360 then B=B-360 elseif B<0 then B=B+360 end;hb[#hb+1]=cj(ck,ht+15,B,"txtmid bright")elseif i%5==0 then hs=5 end;if hs==10 then hv=f([[%s M %f %f v %d]],hv,ck,ht-5,hs)else hv=f([[%s M %f %f v %d]],hv,ck,ht-2.5,hs)end end;hb[#hb+1]=hv..[["/>]]hb[#hb+1]=f([[<<polygon class="bright" points="%d,%d %d,%d %d,%d"/>]],hu-5,ht-20,hu+5,ht-20,hu,ht-10)if bM then hk="HDG"end;hb[#hb+1]=cj(cU(960),cV(100),hr.."°","dim txt txtmid size14","")hb[#hb+1]=cj(cU(960),cV(85),hk,"dim txt txtmid size20","")hb[#hb+1]=[[</g>]]end;local function hx(hb,hy,hj,centerX,centerY,bM,hz,eI)local hl=circleRad;local hA=e(hl*3/5)if hl>0 then local hB=e(hy)local len=0;local hv=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*hj,centerX,centerY)if not aq then hv=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;hb[#hb+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],hl-1,centerX,centerY)hb[#hb+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(hB-30-hB%5+0.5),e(hB+30+hB%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cl=centerY+-i*5+hy*5;if len==30 then hv=f([[%s M %d %f h %d]],hv,centerX-hA-len,cl,len)if aq then hb[#hb+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hj,centerX,centerY,centerX-hA+10,cl+4,i)hb[#hb+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hj,centerX,centerY,centerX+hA-10,cl+4,i)if i==0 or i==180 or i==-180 then hb[#hb+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hj,centerX,centerY,centerX-hA+20,cl,hA*2-40)end else hb[#hb+1]=cj(centerX-hA+10,cl,i,"pdim txt txtmid")hb[#hb+1]=cj(centerX+hA-10,cl,i,"pdim txt txtmid")end;hv=f([[%s M %d %f h %d]],hv,centerX+hA,cl,len)else hv=f([[%s M %d %f h %d]],hv,centerX-hA-len,cl,len)hv=f([[%s M %d %f h %d]],hv,centerX+hA,cl,len)end end;hb[#hb+1]=hv..[["/>]]local hC="PITCH"if not bM then hC="REL PITCH"end;if hy>90 and not aq then hy=90-(hy-90)elseif hy<-90 and not aq then hy=-90-(hy+90)end;if hl>200 then if aq then if eI>Q then hb[#hb+1]=cj(centerX,centerY-15,"Yaw","pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY+20,hz,"pdim txt txtmid")end;hb[#hb+1]=f([[<g transform="rotate(%f,%d,%d)">]],-hj,centerX,centerY)else hb[#hb+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;hb[#hb+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hA+25,centerY-5,centerX-hA+20,centerY,centerX-hA+25,centerY+5,centerX-hA+50,centerY+4,hB)hb[#hb+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hA-25,centerY-5,centerX+hA-20,centerY,centerX+hA-25,centerY+5,centerX+hA-30,centerY+4,hB)hb[#hb+1]="</g>"end;local hD=e(hl/3)hb[#hb+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hD,centerY,hl-hD)if not aq and bM then hb[#hb+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hj,centerX,centerY,centerX-hA+10,centerY,hA*2-20)end;hb[#hb+1]="</g>"if hl<200 then if aq and eI>Q then hb[#hb+1]=cj(centerX,centerY-hl,hC,"pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY-hl+10,hB,"pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY-15,"Yaw","pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY+20,hz,"pdim txt txtmid")else hb[#hb+1]=cj(centerX,centerY-hl,hC,"pdim txt txtmid")hb[#hb+1]=cj(centerX,centerY-hl+15,hB,"pdim txt txtmid")end end end end;local function hE(hb,dv,bM)local hF=altMeterX;local hG=altMeterY;local hH=78;local hI=19;local hJ=ao;if ao~=-1 then hb[#hb+1]=cj(hF+hH,hG+hI+20,f("AGL: %.1fm",ao),"pdim altsm txtend")end;if bM and(dv<200000 and not aq or dv and aq)then table.insert(hb,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hF-1,hG-4,hH+2,hI+6,hF+1,hG-1,hH-4,hI))local fV=0;local hK=1;local hL=0;local hM=dv<0;local hN=dv<planet.surfaceMaxAltitude;local hO=9;if hM then hO=0 end;local dv=d(dv)while fV<6 do local hP=11;local hQ=16;local hR=9;local hS=14;local cn="altsm"if fV>2 then hQ=hQ+3;hP=hP+2;hS=hS+2;hR=hR-6;cn="altbig"end;if hM then cn=cn.." red"elseif hN then cn=cn.." orange"end;local hT=dv/hK%10;local hU=e(hT)local hV=e((hU+1)%10)local hW=hL;if fV==0 then hW=hT-hU;if hM then hW=1-hW end end;if hM and(fV==0 or hL~=0)then local hX=hV;hV=hU;hU=hX end;local hY=hQ*(hW-1)local hZ=hY+hQ;local ck=hF+hR+(6-fV)*hP;local cl=hG+hS;hb[#hb+1]=cj(ck,cl+hY,hV,cn)hb[#hb+1]=cj(ck,cl+hZ,hU,cn)fV=fV+1;hK=hK*10;if hU==hO then hL=hW else hL=0 end end;table.insert(hb,[[</g></g>]])end end;local function h_(eL)local i0=-math.deg(n(eL.y,eL.z))+180;i0=i0-90;if i0<0 then i0=360+i0 end;if i0>180 then i0=-180+i0-180 end;return-i0 end;local function i1(eL)local hp=math.deg(n(eL.y,eL.x))-90;if hp<-180 then hp=360+hp end;return hp end;local function i2(hb,eL,eI,centerX,centerY)if eI>5 and not aq or eI>Q then local hl=circleRad;local i3=20;local i4=20;local i5=h_(eL)local i6=i1(eL)local i7=14;local i8=i7/2;local i9=-i6/i4*hl;local ia=i5/i3*hl;local ck=centerX+i9;local cl=centerY+ia;local aj=y(i9^2+ia^2)local ib=[[<circle
                            cx="]]..ck..[["
                            cy="]]..cl..[["
                            r="]]..i8/i7 ..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ck..[["
                            cy="]]..cl..[["
                            r="]]..i8 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ck-i7 ..[[,]]..cl..[[ h ]]..i8 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ck+i8 ..[[,]]..cl..[[ h ]]..i8 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ck..[[,]]..cl-i7 ..[[ v ]]..i8 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<hl then hb[#hb+1]=ib else local hc=n(ia,i9)local ic=4;local id=centerX+hl*math.cos(hc)local ie=centerY+hl*math.sin(hc)hb[#hb+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',hc*180/math.pi,id,ie,id-ic,ie-ic/2,ic*2,ic,id+ic,ie-ic,ic,ic,-ic,ic)end;if not aq then local ig=vec3(eL)i5=h_(-ig)i6=i1(-ig)i9=-i6/i4*hl;ia=i5/i3*hl;ck=centerX+i9;cl=centerY+ia;aj=y(i9^2+ia^2)if aj<hl then local ih=[[<circle
                                    cx="]]..ck..[["
                                    cy="]]..cl..[["
                                    r="]]..i8 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ck..[[,]]..cl-i7 ..[[ v ]]..i8 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ck..[[,]]..cl..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ck..[[,]]..cl..[[)" />
                                <path
                                    d="M ]]..ck-i8 ..[[,]]..cl..[[ h ]]..i7 ..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ck..[[,]]..cl..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ck..[[,]]..cl..[[)"/>]]hb[#hb+1]=ih end end end end;local function ii(hb,gy,ij,ik)ij=e(ij+0.5)local gY=throtPosY+10;local gZ=throtPosY+20;if m()==1 and not RemoteHud then gY=55;gZ=65 end;local il="CRUISE"local unit="km/h"local cq=ik;if gy=="TRAVEL"or gy=="AUTOPILOT"then il="THROT"unit="%"cq=ij;local im="dim"if ij<0 then im="red"end;hb[#hb+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],im,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(ij),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;hb[#hb+1]=cj(throtPosX+10,gY,il,"pbright txtstart")hb[#hb+1]=cj(throtPosX+10,gZ,f("%.0f %s",cq,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bA and M then ij=e(N*100+0.5)local im="red"if ij<0 then im="red"end;hb[#hb+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],im,1-d(ij),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)hb[#hb+1]=cj(throtPosX+10,gY+40,"LIMIT","pbright txtstart")hb[#hb+1]=cj(throtPosX+10,gZ+40,ij.."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then hb[#hb+1]=cj(throtPosX+10,gY-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not aq and Autopilot then hb[#hb+1]=cj(throtPosX+10,gY-40,"LIMIT: "..e(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function io(hb,ip)local iq=throtPosY-10;local ir=throtPosX+10;hb[#hb+1]=cj(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then iq=75 end;hb[#hb+1]=cj(ir,iq,e(ip).." km/h","pbright txtbig txtstart")end;local function is(hb)hb[#hb+1]=cj(cU(1900),cV(1070),f("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")hb[#hb+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then hb[#hb+1]=cj(cU(960),cV(550),"Warning: Invalid Control Scheme Detected","warnings")hb[#hb+1]=cj(cU(960),cV(600),"Keyboard Scheme must be selected","warnings")hb[#hb+1]=cj(cU(960),cV(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local it=cU(960)local iu=cV(860)local iv=cV(880)local iw=cV(900)local ix=cV(960)local iy=cV(200)local iz=cV(250)local iA=cV(960)if m()==1 and not RemoteHud then iu=cV(135)iv=cV(155)iw=cV(175)iy=cV(115)iz=cV(95)end;local iB="#222222"local iC="white"local iD="dimmer"local iE="pbright"local iF="#110000"local iG=iB;local iH=iD;if BrakeIsOn then hb[#hb+1]=cj(it,iu,"Brake Engaged","warnings")iF="#440000"iG=iC;iH=iE elseif L>0 then hb[#hb+1]=cj(it,iu,"Auto-Brake Engaged","warnings","opacity:"..L)end;local iI="#110000"local iJ=iB;local iK=iD;if aq and b2 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then hb[#hb+1]=cj(it,iy+50,"** STALL WARNING **","warnings")iI="#ff0000"iJ=iC;iK=iE;c6("stall","SW",2)end end;if bK then hb[#hb+1]=cj(it,iy+90,"Flight Assist in Progress","warnings")end;if ax then hb[#hb+1]=cj(it,iA,"Gyro Enabled","warnings")end;local iL="#111100"local iM=iB;local iN=iD;if GearExtended then iL="#775500"iM=iC;iN=iE;if S then hb[#hb+1]=cj(it,iv,"Gear Extended","warn")else hb[#hb+1]=cj(it,iv,"Landed (G: Takeoff)","warnings")end;local iO=cw(a:getTargetGroundAltitude())hb[#hb+1]=cj(it,iw,"Hover Height: "..iO,"warn")end;local iP="#000011"local iQ=iB;local iR=iD;if a7 then iP="#0000DD"iQ=iC;iR=iE;hb[#hb+1]=cj(it,ix+20,"ROCKET BOOST ENABLED","warn")end;local iS="#001100"local iT=iB;local iU=iD;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then iS="#00DD00"iT=iC;iU=iE;if d(as-antigrav.getBaseAltitude())<501 then hb[#hb+1]=cj(it,iy+15,f("Target Altitude: %d Singularity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warn")else hb[#hb+1]=cj(it,iy+15,f("Target Altitude: %d Singluarity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then hb[#hb+1]=cj(it,iy+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then hb[#hb+1]=cj(it,iy+20,f("LockedPitch: %d",e(LockPitch)),"warn")elseif a0 then hb[#hb+1]=cj(it,iy+20,"Follow Mode Engaged","warn")elseif Reentry or an then hb[#hb+1]=cj(it,iy+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local iO=cw(HoldAltitude,2)if VertTakeOff then if by then iO=cw(antigrav.getBaseAltitude(),2).." AGG singularity height"end;hb[#hb+1]=cj(it,iy,"VTO to "..iO,"warn")elseif AutoTakeoff and not IntoOrbit then if am then hb[#hb+1]=cj(it,iy,"Takeoff to "..AutopilotTargetName,"warn")else hb[#hb+1]=cj(it,iy,"Takeoff to "..iO,"warn")end;if BrakeIsOn and not VertTakeOff then hb[#hb+1]=cj(it,iy+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else hb[#hb+1]=cj(it,iy,"Altitude Hold: "..iO,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then hb[#hb+1]=cj(it,iy+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then hb[#hb+1]=cj(it,iy+20,"Aligning trajectory","warn")elseif ar<0.05 then hb[#hb+1]=cj(it,iy+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then hb[#hb+1]=cj(it,iy,b9,"warn")end end;if BrakeLanding then if StrongBrakes then hb[#hb+1]=cj(it,iy,"Brake-Landing","warnings")else hb[#hb+1]=cj(it,iy,"Coast-Landing","warnings")end end;if ProgradeIsOn then hb[#hb+1]=cj(it,iy,"Prograde Alignment","crit")end;if RetrogradeIsOn then hb[#hb+1]=cj(it,iy,"Retrograde Alignment","crit")end;local iV="#110000"local iW=iB;local iX=iD;if bN then iV="#FF0000"iW=iC;iX=iE;local type;if string.find(bN,"COLLISION")then type="warnings"else type="crit"end;hb[#hb+1]=cj(it,iz+20,bN,type)elseif ar==0 then local c1,c5=b_(br:normalize())if c5~=nil then iX=iE;iV="#FF0000"iW=iC;local iO=cw(c5)local travelTime=aS.computeTravelTime(bs,0,c5)local iY="Collision"if c1.noAtmosphericDensityAltitude>0 then iY="Atmosphere"end;hb[#hb+1]=cj(it,iz+20,c1.name.." "..iY.." "..cJ(travelTime).." In "..iO,"crit")end end;if VectorToTarget and not IntoOrbit then hb[#hb+1]=cj(it,iy+35,VectorStatus,"warn")end;local iZ="#111100"local i_=iB;local j0=iD;if bU and#bU>1 then iZ="#DDDD00"i_=iC;j0=iE end;local j1=cU;local j2=cV;local iD="topButton"local j3="topButtonActive"local j4=iD;if Autopilot or VectorToTarget or am or IntoOrbit then j4=j3 end;local j5=iD;if ProgradeIsOn then j5=j3 end;local j6=iD;if BrakeLanding or GearExtended then j6=j3 end;local j7=iD;if AltitudeHold or VectorToTarget then j7=j3 end;local j8=iD;if RetrogradeIsOn then j8=j3 end;local j9=iD;if IntoOrbit or bi and Autopilot then j9=j3 end;local ja=j2(30)hb[#hb+1]=f([[ 
                            <g class="pdim txt txtmid">
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],j4,j1(960),j2(54),j2(-53),j1(-120),j1(25),j2(50))hb[#hb+1]=cj(j1(910),ja,"AUTOPILOT")hb[#hb+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j5,j1(865),j2(51),j1(-25),j2(-50),j1(-110),j1(25),j2(46))hb[#hb+1]=cj(j1(800),ja,"PROGRADE")hb[#hb+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j6,j1(755),j2(47),j1(-25),j2(-46),j1(-98),j1(44),j2(44))hb[#hb+1]=cj(j1(700),ja,"LAND")hb[#hb+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],j7,j1(960),j2(54),j2(-53),j1(120),j1(-25),j2(50))hb[#hb+1]=cj(j1(1010),ja,"ALT HOLD")hb[#hb+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j8,j1(1055),j2(51),j1(25),j2(-50),j1(110),j1(-25),j2(46))hb[#hb+1]=cj(j1(1122),ja,"RETROGRADE")hb[#hb+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j9,j1(1165),j2(47),j1(25),j2(-46),j1(98),j1(-44),j2(44))hb[#hb+1]=cj(j1(1220),ja,"ORBIT")hb[#hb+1]=[[
                                </g>
                            </g>]]hb[#hb+1]="</g>"return hb end;local function jb(eI)return e(A(eI*3.6,0)+0.5).." km/h"end;local function jc(hb)local ck=OrbitMapX+10;local cl=OrbitMapY+20;local jd={}local je={"Alt-4: AutoTakeoff to Target"}local jf={"Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local jg={"Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local jh={"","------------------ALWAYS--------------------","Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view","Alt-4: Autopilot to IPH target","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and off","Alt-8: Toggle ground stabilization (underwater flight)","CTRL: Toggle Brakes on and off. Cancels active AP","LAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}table.insert(jd,"--------------DYNAMIC-----------------")if aq then if ao~=-1 then c9(jd,je)if ac and planet and ac.name==planet.name then table.insert(jd,"Alt-4-4: Low Orbit Autopilot to Target")end;if antigrav or VertTakeOffEngine then if antigrav then if by then table.insert(jd,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(jd,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(jd,"Alt-6: Begins Vertical AutoTakeoff.")end else table.insert(jd,"Alt-6: Autotakeoff to AutoTakeoffAltitude")table.insert(jd,"Alt-6-6: Autotakeoff to 11% atmosphere")end;if GearExtended then table.insert(jd,"G: Takeoff to hover height, raise gear")else table.insert(jd,"G: Lowergear and Land")end else c9(jd,jf)table.insert(jd,"G: Begin BrakeLanding or Land")end;if VertTakeOff then table.insert(jd,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end else c9(jd,jg)if shield_1 then table.insert(jd,"Alt-Shift-5: Toggle shield off and on")table.insert(jd,"Alt-Shift-6: Vent shields")end end;if gyro then table.insert(jd,"Alt-9: Activate Gyroscope")end;if ExtraLateralTags~="none"or ExtraLongitudeTags~="none"or ExtraVerticalTags~="none"then table.insert(jd,"Alt-Shift-9: Cycles engines with Extra tags")end;if AltitudeHold then table.insert(jd,"Alt-Spacebar/C will raise/lower target height")table.insert(jd,"Alt+Shift+Spacebar/C will raise/lower target to preset values")end;if AtmoSpeedAssist or not aq then table.insert(jd,"LALT+Mousewheel will lower/raise speed limit")end;c9(jd,jh)for i=1,#jd do cl=cl+12;hb[#hb+1]=cj(ck,cl,jd[i],"pdim txtbig txtstart")end end;local function ji(hb)local jj=cU(OrbitMapX)local jk=cV(OrbitMapY)local jl=OrbitMapSize;local jm=4;local jn=15;local ck=0;local cl=0;local jo,jp,jq,jr;local js;local function jt(type)local ju,E,eI,jv,cn,jw;if type=="Periapsis"then ju=js.periapsis.altitude;E=js.timeToPeriapsis;eI=js.periapsis.speed;cn="txtend"jv=12;jw=math.min(ck,jj+jl-planet.radius/jq-jm*2)else ju=js.apoapsis.altitude;E=js.timeToApoapsis;eI=js.apoapsis.speed;jv=-12;cn="txtstart"jw=ck end;if bs<1 then E=0 end;hb[#hb+1]=f([[<line class="pdim linethin" style="stroke:white" x1="%f" y1="%f" x2="%f" y2="%f"/>]],jw+jv,cl-5,ck,cl-5)hb[#hb+1]=f([[<line class="pdim linethin" x1="%f" y1="%f" x2="%f" y2="%f"/>]],jw-jv*4,cl+2,ck,cl+2)hb[#hb+1]=cj(jw,cl,type,cn)ck=jw-jv*2;cl=cl+jn;local iO=cw(ju)hb[#hb+1]=cj(ck,cl,iO,cn)cl=cl+jn;hb[#hb+1]=cj(ck,cl,cJ(E),cn)cl=cl+jn;hb[#hb+1]=cj(ck,cl,jb(eI),cn)end;local jx=jl*1.5;if SelectedTab=="INFO"then jx=25*7 end;if SelectedTab~="HIDE"then hb[#hb+1]=[[<g class="pbright txtorb txtmid">]]hb[#hb+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" class="dimfill brightstroke" style="stroke-width:3;fill-opacity:0.3;" />',jl*2,jx,jj,jk)hb[#hb+1]=f([[<clippath id="orbitRect">
                                                        <rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" class="dimfill brightstroke" style="stroke-width:3;fill-opacity:0.3;" />
                                                        </clippath>]],jl*2,jx,jj,jk)end;if SelectedTab=="ORBIT"then jk=jk+jm;jo=jl/2;jr=0;js={}js.periapsis={}js.apoapsis={}if orbit~=nil then if orbit.periapsis~=nil then js.periapsis.altitude=orbit.periapsis.altitude;js.periapsis.speed=orbit.periapsis.speed end;if orbit.apoapsis~=nil then js.apoapsis.altitude=orbit.apoapsis.altitude;js.apoapsis.speed=orbit.apoapsis.speed end;js.period=orbit.period;js.eccentricity=orbit.eccentricity;js.timeToApoapsis=orbit.timeToApoapsis;js.timeToPeriapsis=orbit.timeToPeriapsis;js.eccentricAnomaly=orbit.eccentricAnomaly;js.trueAnomaly=orbit.trueAnomaly end;if js.periapsis==nil then js.periapsis={}js.periapsis.altitude=-planet.radius;js.periapsis.speed=MaxGameVelocity end;if js.eccentricity==nil then js.eccentricity=1 end;if js.apoapsis==nil then js.apoapsis={}js.apoapsis.altitude=as;js.apoapsis.speed=0 end;if bs<1 then js.apoapsis.altitude=as;js.apoapsis.speed=0 end;if js.apoapsis.altitude then jq=(js.apoapsis.altitude+js.periapsis.altitude+planet.radius*2)/(jo*2)jp=(planet.radius+js.apoapsis.altitude)/jq*(1-js.eccentricity)jr=jo-js.periapsis.altitude/jq-planet.radius/jq;local jy=math.pi;if js.period~=nil and js.period>0 and js.timeToApoapsis~=nil then jy=js.eccentricAnomaly;if js.timeToPeriapsis<js.timeToApoapsis then jy=2*math.pi-jy end end;if bs<1 or jy~=jy then jy=math.pi end;local jz=-jo*math.cos(jy)+jj+jl+jm;local jA=jp*math.sin(jy)+jk+jl*1.5/2+jm;local jB=""hb[#hb+1]='<g clip-path="url(#orbitRect)">'hb[#hb+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],jB,jj+jl+jm,jk+jl*1.5/2+jm,jo,jp)if jp<1 then hb[#hb+1]=f([[<line x1="%f" y1="%f" x2="%f" y2="%f" stroke="red"/>]],jj+jl+jm-jr,jk+jl*1.5/2+jm,jz,jA)end;hb[#hb+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="1" fill="rgb(0,150,200)" opacity="0.5" />',jj+jl+jm-jr,jk+jl*1.5/2+jm,(planet.radius+planet.noAtmosphericDensityAltitude)/jq)hb[#hb+1]=f('<clipPath id="planetClip"><circle cx="%f" cy="%f" r="%f" /></clipPath>',jj+jl+jm-jr,jk+jl*1.5/2+jm,(planet.radius+planet.noAtmosphericDensityAltitude)/jq)hb[#hb+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f" clip-path="url(#planetClip)"/>]],"redout",jj+jl+jm,jk+jl*1.5/2+jm,jo,jp)hb[#hb+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="black" stroke-width="1" fill="rgb(0,100,150)" />',jj+jl+jm-jr,jk+jl*1.5/2+jm,planet.radius/jq)hb[#hb+1]='</g>'local jC=math.floor(planet.radius/jq+0.5)local jD=gz.Generic_Moon;if gz[planet.name]then jD=gz[planet.name]end;ck=jj+jl+jm*4+jo;cl=jk+jl*1.5/2+5+jm;if js.apoapsis~=nil and js.apoapsis.speed<MaxGameVelocity then jt("Apoapsis")end;cl=jk+jl*1.5/2+5+jm;ck=jj+jl-jm*2-jo;if js.periapsis~=nil and js.periapsis.speed<MaxGameVelocity and js.periapsis.altitude>0 then jt("Periapsis")end;hb[#hb+1]=cj(jj+jl+jm,jk+20+jm,planet.name,"txtorbbig")hb[#hb+1]=f('<circle cx="%f" cy="%f" r="2" stroke="black" stroke-width="1" fill="white" />',jz,jA)hb[#hb+1]=[[</g>]]return hb else hb[#hb+1]='<g clip-path="url(#orbitRect)">'local jE=""local jF=1.2*(maxAtlasX-minAtlasX)/(jl*2)local jG=1.4*(maxAtlasY-minAtlasY)/(jl*1.5)for cS,cT in pairs(b[0])do if cT.center then local ck=jj+jl+cT.center.x/jF;local cl=jk+jl*1.5/2+cT.center.y/jG;jE=jE..'<circle cx="'..ck..'" cy="'..cl..'" r="'..cT.radius/jF*30 ..'" stroke="white" stroke-width="1" fill="blue" />'if not string.match(cT.name,"Moon")and not string.match(cT.name,"Sanctuary")and not string.match(cT.name,"Space")then jE=jE.."<text x='"..ck.."' y='"..cl+cT.radius/jF*30+20 .."' font-size='12' fill="..ay.." text-anchor='middle' font-family='Montserrat'>"..cT.name.."</text>"end end end;local eM=vec3(core.getConstructWorldPos())local ck=jj+jl+eM.x/jF;local cl=jk+jl*1.5/2+eM.y/jG;jE=jE..'<circle cx="'..ck..'" cy="'..cl..'" r="2" stroke="white" stroke-width="1" fill="red"/>'jE=jE.."<text x='"..ck.."' y='"..cl-10 .."' font-size='14' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aN=jF;aO=jG;local jH=eM+br*1000000;local jI=jj+jl+jH.x/jF;local gZ=jk+jl*1.5/2+jH.y/jG;jE=jE..'<line x1="'..ck..'" y1="'..cl..'" x2="'..jI..'" y2="'..gZ..'" stroke="purple" stroke-width="1"/>'hb[#hb+1]=jE;hb[#hb+1]='</g>'end elseif SelectedTab=="INFO"then hb=aV.DrawOdometer(hb,ad,TotalDistanceTravelled,ae)elseif SelectedTab=="HELP"then hb=jc(hb)else return hb end end;local function jJ(jK,jL)local jM;local jN=(jL-jK):normalize()local eN=(bv-jK):dot(jN)/jN:dot(jN)if eN<=0.then return(bv-jK):len()elseif eN>=(jL-jK):len()then return(bv-jL):len()end;local jO=jK+eN*jN;jM=(jO-bv):len()return jM end;local function jP()local jM;local jQ=nil;local jR=nil;local jS=nil;for cS,jT in pairs(b[0])do if jT.hasAtmosphere then local aj=jJ(planet.center,jT.center)if jQ==nil or aj<jQ then jR=jT;jQ=aj;jS=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local e8=jJ(ac.center,jT.center)if e8<jQ then jR=jT;jQ=e8;jS=ac end end end end;local jU=cU(1770)local jV=cV(330)if jQ then local jW="txttick "local jX=500000;if jQ<jR.radius+jX or jQ<jS.radius+jX then if bH then jW="txttick red "else jW="txttick orange "end end;jM=cw(jQ,2)bJ=cj(jU,jV,"Pipe ("..jS.name.."--"..jR.name.."): "..jM,jW.."pbright txtmid")end end;local function jY(ck,cl,jZ,j_,il)local k0={x=ck,y=cl,width=jZ,height=j_,label=il}bT[il]=k0;return k0 end;local function k1(k2,k3,jZ,j_,ck,cl,k4,k5,k6,k7)local k0={enableName=k2,disableName=k3,width=jZ,height=j_,x=ck,y=cl,toggleVar=k4,toggleFunction=k5,drawCondition=k6,hovered=false}if k7 then table.insert(gn,k0)else table.insert(gm,k0)end;return k0 end;local function k8(k9)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif k9=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif k9=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif k9=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=cc(k9)showHud=false else bE={}showHud=true end end;local function ka()bD=not bD;if bD then aF=gn;a2="Hold SHIFT to see Settings"bF=showHud else aF=gm;a2="Hold SHIFT to see Control Buttons"k8()showHud=bF end end;local function kb()local function kc(cT)_G[cT]=not _G[cT]if _G[cT]then a2=cT.." set to true"else a2=cT.." set to false"end;if cT=="showHud"then bF=_G[cT]elseif cT=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local kd=50;local ke=340;local ck=500;local cl=aH/2-400;local kf=0;for cS,cT in pairs(cc("boolean"))do if type(_G[cT])=="boolean"then k1(cT,cT,ke,kd,ck,cl,function()return _G[cT]end,function()kc(cT)end,function()return true end,true)cl=cl+kd+20;if kf==9 then ck=ck+ke+20;cl=aH/2-400;kf=0 else kf=kf+1 end end end;k1("Control View","Control View",ke,kd,10,aH/2-500,function()return true end,ka,function()return true end,true)k1("View Handling Settings",'Hide Handling Settings',ke,kd,10,aH/2-(500-kd),function()return showHandlingVariables end,function()k8("handling")end,function()return true end,true)k1("View Hud Settings",'Hide Hud Settings',ke,kd,10,aH/2-(500-kd*2),function()return showHudVariables end,function()k8("hud")end,function()return true end,true)k1("View Physics Settings",'Hide Physics Settings',ke,kd,10,aH/2-(500-kd*3),function()return showPhysicsVariables end,function()k8("physics")end,function()return true end,true)end;local function kg()local function kh()local position=bv;local g9=planet.name..". "..#SavedLocations;if bP[1]then local dm,_=bP[1].getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dm~=nil and dm~=""then g9=g9 .." "..bP[1].getConstructName(dm)end end;return aW.AddNewLocation(g9,position,false,true)end;local function ki()TurnBurn=not TurnBurn end;local function kj(kk)if kk==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kl()aW.UpdatePosition()end;local function km()aW.ClearCurrentPosition()end;local function kn(fV)local g9=AutopilotTargetName;if fV~=nil and type(fV)=="number"then if fV==0 then return"None"end;g9=bG[fV].name end;if g9==nil then g9=CustomTarget.name end;if g9==nil then g9="None"end;return g9 end;local function ko(fV)return"Engage Autopilot: "..kn(fV)end;local function kp(fV)return"Disable Autopilot: "..kn(fV)end;local function kq()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)c6("folOn","F")else c6("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local kd=50;local ke=260;local kr=k1("Enable Brake Toggle","Disable Brake Toggle",ke,kd,aG/2-ke/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)k1("Align Prograde","Disable Prograde",ke,kd,aG/2-ke/2-50-kr.width,aH/2-kd+380,function()return ProgradeIsOn end,function()kj(1)end)k1("Align Retrograde","Disable Retrograde",ke,kd,aG/2-ke/2+kr.width+50,aH/2-kd+380,function()return RetrogradeIsOn end,kj,function()return ar==0 end)apbutton=k1(ko,kp,600,60,aG/2-600/2,aH/2-60/2-330,function()return Autopilot or VectorToTarget or am or IntoOrbit end,function()end)local i;local function ks(kt)local fV=bS+kt;if fV>#bG then fV=fV-#bG-1 end;if fV<0 then fV=#bG+fV end;return fV end;apExtraButtons={}for i=0,10 do local button=k1(function(cv)local fV=ks(cv.apExtraIndex)if Autopilot or VectorToTarget or am or IntoOrbit then return"Redirect: "..kn(fV)end;return ko(fV)end,function(cv)local fV=ks(cv.apExtraIndex)return kp(fV)end,600,60,aG/2-600/2,aH/2-60/2-330+60*i,function(cv)local fV=ks(cv.apExtraIndex)return fV==AutopilotTargetIndex and(Autopilot or VectorToTarget or am or IntoOrbit)end,function(cv)local fV=ks(cv.apExtraIndex)local ku=AutopilotTargetIndex==fV;AutopilotTargetIndex=fV;aW.UpdateAutopilotTarget()cE()if not ku and not(Autopilot or VectorToTarget or am or IntoOrbit)then cE()end end,function()return bR end)button.apExtraIndex=i;apExtraButtons[i]=button end;k1("Save Position","Save Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,kh,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)k1("Update Position","Update Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,kl,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)k1("Clear Position","Clear Position",200,apbutton.height,apbutton.x-200-30,apbutton.y,function()return true end,km,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kd=60;ke=300;local ck=0;local cl=aH/2-150;k1("View Settings","View Settings",ke,kd,ck,cl,function()return true end,ka)cl=cl+kd+20;k1("Enable Turn and Burn","Disable Turn and Burn",ke,kd,ck,cl,function()return TurnBurn end,ki)ck=10;cl=aH/2-300;k1("Horizontal Takeoff Mode","Vertical Takeoff Mode",ke,kd,ck+ke+20,cl,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bx end)cl=cl+kd+20;k1("Engage Orbiting","Cancel Orbiting",ke,kd,ck+ke+20,cl,function()return IntoOrbit end,cA,function()return ar==0 and bM end)cl=cl+kd+20;k1("Glide Re-Entry","Cancel Glide Re-Entry",ke,kd,ck,cl,function()return Reentry end,function()al=1;kj(1)end,function()return planet.hasAtmosphere and not aq end)k1("Parachute Re-Entry","Cancel Parachute Re-Entry",ke,kd,ck+ke+20,cl,function()return Reentry end,cH,function()return planet.hasAtmosphere and not aq end)cl=cl+kd+20;k1("Engage Follow Mode","Disable Follow Mode",ke,kd,ck,cl,function()return a0 end,kq,function()return m()==1 end)k1("Enable Repair Arrows","Disable Repair Arrows",ke,kd,ck+ke+20,cl,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)cl=cl+kd+20;if not ExternalAGG then k1("Enable AGG","Disable AGG",ke,kd,ck,cl,function()return by end,cI,function()return antigrav~=nil end)end;k1(function()return f("Switch IPH Mode - Current: %s",iphCondition)end,function()return f("IPH Mode: %s",iphCondition)end,ke*2,kd,ck,cl,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)cl=cl+kd+20;k1(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,ke*2,kd,ck,cl,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)local kv=cV(20)local button=jY(0,0,cU(70),kv,"INFO")button=jY(button.x+button.width,button.y,cU(80),kv,"ORBIT")button=jY(button.x+button.width,button.y,cU(70),kv,"HELP")jY(button.x+button.width,button.y,cU(70),kv,"HIDE")end;local kw={}local kx=nil;function kw.HUDPrologue(hb)bH,bI=gu(bv)if not bH then H=PvPR;J=PvPG;I=PvPB;if shield_1 and AutoShieldToggle and shield_1.getState()==0 then shield_1.toggle()end else H=SafeR;J=SafeG;I=SafeB;if shield_1 and AutoShieldToggle and shield_1.getState()==1 then shield_1.toggle()end end;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.8+0.5)..","..e(J*0.8+0.5)..","..e(I*0.8+0.5)..[[)]]local ky=ay;local kz=az;local kA=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.3+0.5)..[[)]]local kB=ay;local kC=az;if gw()and not brightHud then ky=[[rgb(]]..e(H*0.5+0.5)..","..e(J*0.5+0.5)..","..e(I*0.5+0.5)..[[)]]kz=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.2+0.5)..[[)]]end;local j1=cU;local j2=cV;hb[#hb+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none;stroke:%s}
                                .linethick {stroke-width:3px;fill:none}
                                .linethin {stroke-width:1px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank;}
                                .warn {fill:orange; font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                text.bright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pbright {fill:%s;stroke:%s}
                                text.pbright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dim {fill:%s;stroke:%s}
                                text.dim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pdim {fill:%s;stroke:%s}
                                text.pdim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .red {fill:red;stroke:red}
                                text.red {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .orange {fill:orange;stroke:orange}
                                text.orange {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                text { stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dimstroke {stroke:%s}
                                .brightstroke {stroke:%s}
                                .indicatorText {font-size:20px;fill:white}
                                .size14 {font-size:14px}
                                .size20 {font-size:20px}
                                .topButton {fill:%s;opacity:0.5;stroke-width:2;stroke:%s}
                                .topButtonActive {fill:url(#RadialGradientCenter);opacity:0.8;stroke-width:2;stroke:%s}
                                .topButton text {font-size:13px; fill: %s; opacity:1; stroke-width:20px}
                                .topButtonActive text {font-size:13px;fill:%s; stroke-width:0px; opacity:1}
                                .indicatorFont {font-size:20px;font-family:Bank}
                                .dimmer {stroke: %s;}
                                .dimfill {fill: %s;}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                                <defs>
                                    <radialGradient id="RadialGradientCenterTop" cx="0.5" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="100%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientRightTop" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinRightTopGradient" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientLeftTop" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinLeftTopGradient" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientCenter" cx="0.5" cy="0.5" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.8"/>
                                        <stop offset="100%%" stop-color="%s" stop-opacity="0.5"/>
                                    </radialGradient>
                                </defs>
                                <g class="pdim txt txtend">
                                
                            ]],ky,ky,ky,kB,kB,kz,kz,kC,kC,kz,ky,kA,kC,ky,ky,kA,kA,kA,aG,aH,kz,kz,kz,kz,kz,kB,kz)if not kx then kx=f([[<path class="linethick brightstroke" style="fill:url(#RadialGradientCenterTop);" d="M %f %f L %f %f L %f %f %f %f L %f %f"/>
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientRightTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientLeftTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <clipPath id="headingClip">
                            <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        </clipPath>
                        <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>]],j1(630),j2(0),j1(675),j2(45),j1(960),j2(55),j1(1245),j2(45),j1(1290),j2(0),j1(1000),j2(105),j1(1040),j2(59),j1(1250),j2(51),j1(1300),j2(0),j1(1920),j2(0),j1(1920),j2(20),j1(1400),j2(20),j1(1300),j2(105),j1(920),j2(105),j1(880),j2(59),j1(670),j2(51),j1(620),j2(0),j1(0),j2(0),j1(0),j2(20),j1(520),j2(20),j1(620),j2(105),j1(890),j2(59),j1(960),j2(62),j1(1030),j2(59),j1(985),j2(112),j1(1150),j2(112),j1(1100),j2(152),j1(820),j2(152),j1(780),j2(112),j1(935),j2(112),j1(890),j2(59),j1(960),j2(62),j1(1030),j2(59),j1(985),j2(112),j1(1150),j2(112),j1(1100),j2(152),j1(820),j2(152),j1(780),j2(112),j1(935),j2(112))end;hb[#hb+1]=kx;return hb end;function kw.DrawVerticalSpeed(hb,dv)ha(hb,dv)end;function kw.UpdateHud(hb)local i0=bB;local kD=bC;local hj=kD;local hy=i0;local ij=e(unit.getThrottle())local ip=bs*3.6;local ik=unit.getAxisCommandValue(0)local kE=cU(1770)local kF=cV(310)if AtmoSpeedAssist and bA then ik=K;ij=K*100 end;local gy=gx()local hk="ROLL"if ij==nil then ij=0 end;if not bM then if bs>5 then i0=h_(bq)kD=i1(bq)else i0=0;kD=0 end;hk="YAW"end;if bI>50000 and not aq then local kG;kG=cw(bI)hb[#hb+1]=cj(kE,kF,"PvP Boundary: "..kG,"pbright txtbig txtmid")end;hb[#hb+1]=ak;hb[#hb+1]=aD;hb[#hb+1]=gA;if bJ~=""then hb[#hb+1]=bJ end;if gB~=""then hb[#hb+1]=gB end;if gC~=""then hb[#hb+1]=gC end;ha(hb,as)if m()==0 or RemoteHud then if bM then hi(hb,centerX,centerY,hj,hk,bM)else hi(hb,centerX,centerY,kD,hk,bM)end;if not gw()or brightHud then if bM then hi(hb,centerX,centerY,hj,hk,bM)hx(hb,hy,hj,centerX,centerY,bM,e(i1(bq)),bs)else hi(hb,centerX,centerY,kD,hk,bM)hx(hb,i0,kD,centerX,centerY,bM,e(kD),bs)end;hE(hb,as,bM)i2(hb,bq,bs,centerX,centerY)end end;ii(hb,gy,ij,ik)io(hb,ip)is(hb)ji(hb)return hb end;function kw.HUDEpilogue(hb)hb[#hb+1]="</svg>"return hb end;function kw.ExtraData(hb)local kH=cU(1240)local kI=cV(55)local kJ=kI+10;local kK;local j1=cU;local j2=cV;local kL=0;local gy=gx()local kM=j2(99)local kN=j2(80)local kO=j2(85)local kP=j2(31)local kQ=0;local kR=0;local kS=av>1000000 and A(av/1000000,2).."kT"or A(av/1000,2).."T"if aq then kL=LastMaxBrakeInAtmo else kL=LastMaxBrake end;local kT,kU=aS.computeDistanceAndTime(bs,0,av,0,0,kL)if kT<0 then kT=0 end;kL=A(kL/(av*gl),2).."g"local kV=a:maxForceForward()kK=core.g()if kK>0.1 then kR=av*kK;kR=A(kR/(av*gl),2).."g"kQ=0.5*kV/kK;kQ=kQ>1000000 and A(kQ/1000000,2).."kT"or A(kQ/1000,2).."T"end;kV=A(kV/(av*gl),2).."g"local kW=vec3(core.getWorldAcceleration()):len()/9.80665;kK=core.g()hb[#hb+1]=[[<g class="dim txt txtend size14">]]if m()==1 and not RemoteHud then kH=cU(1120)kI=cV(55)kJ=kI+10 elseif aq then local kX=cU(770)hb[#hb+1]=cj(j1(895),kM,"ATMO","")hb[#hb+1]=f([[<path class="linethin dimstroke"  d="M %f %f l %f 0"/>]],j1(895),kO,j1(-80))hb[#hb+1]=cj(j1(815),kN,f("%.1f%%",ar*100),"txtstart size20")end;hb[#hb+1]=cj(j1(1025),kM,"GRAVITY","txtstart")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(1025),kO,j1(80))hb[#hb+1]=cj(j1(1105),kN,f("%.2fg",kK/9.80665),"size20")hb[#hb+1]=cj(j1(1125),kM,"ACCEL","txtstart")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(1125),kO,j1(80))hb[#hb+1]=cj(j1(1205),kN,f("%.2fg",kW),"size20")hb[#hb+1]=cj(j1(695),kM,"BRK TIME","")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(695),kO,j1(-80))hb[#hb+1]=cj(j1(615),kN,f("%s",cJ(kU)),"txtstart size20")hb[#hb+1]=cj(j1(635),j2(45),"TRIP","")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(635),j2(31),j1(-90))if travelTime then hb[#hb+1]=cj(j1(532),j2(23),f("%s",cJ(travelTime)),"txtstart size20")end;hb[#hb+1]=cj(j1(795),kM,"BRK DIST","")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(795),kO,j1(-80))hb[#hb+1]=cj(j1(715),kN,f("%s",cw(kT)),"txtstart size20")hb[#hb+1]=cj(j1(1285),j2(45),"MASS","txtstart")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(1285),j2(31),j1(90))hb[#hb+1]=cj(j1(1388),j2(23),f("%s",kS),"size20")hb[#hb+1]=cj(j1(1220),kM,"THRUST","txtstart")hb[#hb+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],j1(1220),kO,j1(80))hb[#hb+1]=cj(j1(1300),kN,f("%s",kV),"size20")hb[#hb+1]=cj(cU(960),cV(175),gy,"pbright txtbig txtmid size20")hb[#hb+1]="</g>"end;function kw.DrawOdometer(hb,ad,TotalDistanceTravelled,ae)if SelectedTab~="INFO"then return hb end;local kK;local kQ=0;local kR=0;local kL=0;local kS=av>1000000 and A(av/1000000,2).." kTons"or A(av/1000,2).." Tons"if aq then kL=LastMaxBrakeInAtmo else kL=LastMaxBrake end;local kT,kU=aS.computeDistanceAndTime(bs,0,av,0,0,kL)kL=A(kL/(av*gl),2).." g"local kV=a:maxForceForward()kK=core.g()if kK>0.1 then kR=av*kK;kR=A(kR/(av*gl),2).." g"kQ=0.5*kV/kK;kQ=kQ>1000000 and A(kQ/1000000,2).." kTons"or A(kQ/1000,2).." Tons"end;kV=A(kV/(av*gl),2).." g"if m()==0 or RemoteHud then local kY=cU(OrbitMapX+10)local kZ=cV(OrbitMapY+20)local k_=cU(OrbitMapX+10+OrbitMapSize/1.25)local j_=25;hb[#hb+1]="<g class='txtstart size14 bright'>"hb[#hb+1]=cj(kY,kZ,f("BrkTime: %s",cJ(kU)))hb[#hb+1]=cj(k_,kZ,f("Trip: %.2f km",ad))hb[#hb+1]=cj(kY,kZ+j_,f("Lifetime: %.2f kSU",TotalDistanceTravelled/200000))hb[#hb+1]=cj(k_,kZ+j_,f("BrkDist: %s",cw(kT)))hb[#hb+1]=cj(kY,kZ+j_*2,"Trip Time: "..cJ(ae))hb[#hb+1]=cj(k_,kZ+j_*2,"Total Time: "..cJ(TotalFlightTime))hb[#hb+1]=cj(kY,kZ+j_*3,f("Mass: %s",kS))hb[#hb+1]=cj(k_,kZ+j_*3,f("Max Brake: %s",kL))hb[#hb+1]=cj(kY,kZ+j_*4,f("Max Thrust: %s",kV))if kK>0.1 then hb[#hb+1]=cj(k_,kZ+j_*4,f("Max Thrust Mass: %s",kQ))hb[#hb+1]=cj(kY,kZ+j_*5,f("Req Thrust: %s",kR))else hb[#hb+1]=cj(k_,kZ+j_*5,"Max Mass: n/a")hb[#hb+1]=cj(kY,kZ+j_*6,"Req Thrust: n/a")end end;hb[#hb+1]="</g></g>"return hb end;function kw.DrawWarnings(hb)return is(hb)end;function kw.DisplayOrbitScreen(hb)return ji(hb)end;function kw.DisplayMessage(hb,iO)if iO~="empty"then local cl=310;for l0 in string.gmatch(iO,"([^\n]+)")do cl=cl+35;hb[#hb+1]=cj("50%",cl,l0,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function kw.DrawDeadZone(hb)hb[#hb+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function kw.UpdatePipe()if aq then bJ=""return end;jP()end;function kw.DrawSettings(hb)if#bE>0 then local ck=cU(640)local cl=cV(200)hb[#hb+1]=[[<g class="pbright txtvspd txtstart">]]for cS,cT in pairs(bE)do hb[#hb+1]=cj(ck,cl,cT..": ".._G[cT])cl=cl+20;if cS%12==0 then ck=ck+cU(350)cl=cV(200)end end;hb[#hb+1]=cj(cU(640),cV(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")hb[#hb+1]="</g>"end;return hb end;local l1;local l2=cU(1770)local l3=cV(350)local l4=cV(15)local l5=cU(1370)local bW,l6;local l7=0;function kw.DrawRadarInfo()local function l8()if radarPanelID~=nil and l7==0 then t(radarPanelID)radarPanelID=nil;if l1~=nil then t(l1)l1=nil end else if l7==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(bP,1,"Periscope","periscope")l1=_autoconf.panels[_autoconf.panels_size]end;if radarPanelID==nil then _autoconf.displayCategoryPanel(bP,1,"Radar","radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]end;l7=0 end end;local fd,fe,fc,ff,fg,f9=aY.GetRadarHud()local B=ff or 0;if fc>0 then if CollisionSystem then bW=B.."/"..fg.." Plotted : "..fc-fg.." Ignored"else bW="Radar Contacts: "..fc end;gA=cj(l2,l3,bW,"pbright txtbig txtmid")if#f9>0 then gA=gA..cj(l5,l4,"Friendlies In Range","pbright txtbig txtmid")for cS,cT in pairs(f9)do l4=l4+20;gA=gA..cj(l5,l4,bP[1].getConstructName(cT),"pdim txtmid")end end;if fd==nil and l1==nil then l7=1;l8()end;if fd~=nil and l1~=nil then l8()end;if radarPanelID==nil then l8()end else if fe then gA=cj(l2,l3,bQ.." Radar: Jammed","pbright txtbig txtmid")else gA=cj(l2,l3,"Radar: No "..bQ.." Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then l7=0;l8()end end end;function kw.DrawTanks()if fuelX~=0 and fuelY~=0 then gB=cj(fuelX,fuelY,"","txtstart pdim txtfuel")tankY=fuelY;gS(fuelX,"Atmospheric ","ATMO",aI,gQ,gR)gS(fuelX,"Space Fuel T","SPACE",aJ,gO,gP)gS(fuelX,"Rocket Fuel ","ROCKET",aK,gM,gN)end end;function kw.DrawShield()local l9=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local la=core.getPvPTimer()local lb=shield_1.getResistances()local lc="A: "..10+lb[1]*100 .."% / E: "..10+lb[2]*100 .."% / K:"..10+lb[3]*100 .."% / T: "..10+lb[4]*100 .."%"local ck,cl=shieldX-60,shieldY+30;local ld=e(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local h5=e(ld*2.55)local h6=f("rgb(%d,%d,%d)",255-h5,h5,0)local cn=""gC=cj(ck,cl,"","txtmid pdim txtfuel")if ld<10 and l9~="Shield Disabled"then cn="red "end;la=la>0 and"   PvPTime: "..cJ(la)or""gC=gC..f([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],ck,cl,h6,ld*2,ck,cl,ck+2,cl+10,ld,la)gC=gC..cj(ck,cl-5,l9,cn.."txtstart pbright txtbig")gC=gC..cj(ck,cl+30,lc,cn.."txtstart pbright txtsmall")end;function kw.hudtick()if not planet then return end;local function le(hb)local h8=e(r(aj/(aG/4)*255,0,255))hb[#hb+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,e(H+0.5)+h8,e(J+0.5)-h8,e(I+0.5)-h8)end;local function lf()for _,cT in pairs(aF)do if cT.hovered then if not cT.drawCondition or cT.drawCondition(cT)then cT.toggleFunction(cT)end;cT.hovered=false end end;for _,cT in pairs(bT)do if cT.hovered then SelectedTab=cT.label;cT.hovered=false end end end;local function lg()local function lh(li,lj,ck,cl,jZ,j_)if li>=ck and li<=ck+jZ and lj>=cl and lj<=cl+j_ then return true else return false end end;local ck=ag+aG/2;local cl=ah+aH/2;for _,cT in pairs(aF)do cT.hovered=lh(ck,cl,cT.x,cT.y,cT.width,cT.height)end;for _,cT in pairs(bT)do cT.hovered=lh(ck,cl,cT.x,cT.y,cT.width,cT.height)end;if bR then local lk=false;for _,cv in ipairs(apExtraButtons)do if cv.hovered then lk=true;break end end;if apbutton.hovered then lk=true end;bR=lk else bR=apbutton.hovered;if not bR then bS=AutopilotTargetIndex end end end;local function ll(hb)if not SelectedTab or SelectedTab==""then SelectedTab="HELP"end;for cS,cT in pairs(bT)do local cn="dim brightstroke"local lm=0.2;if SelectedTab==cS then cn="pbright dimstroke"lm=0.6 end;local ln=""if cT.hovered then lm=0.8;ln=";stroke:white"end;hb[#hb+1]=f([[<rect width="%f" height="%d" x="%d" y="%d" clip-path="url(#round-corner)" class="%s" style="stroke-width:1;fill-opacity:%f;%s" />]],cT.width,cT.height,cT.x,cT.y,cn,lm,ln)hb[#hb+1]=cj(cT.x+cT.width/2,cT.y+cT.height/2+5,cT.label,"txt txtmid pdim")end end;local function lo(hb)local function lp(hb,lq,hover,ck,cl,eB,lr,ls,lt,lu,lv,button)if type(lu)=="function"then lu=lu(button)end;if type(lv)=="function"then lv=lv(button)end;hb[#hb+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",ck,cl,eB,lr)if lq then hb[#hb+1]=f("%s'",ls)else hb[#hb+1]=lt end;if hover then hb[#hb+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:2'",SafeR,SafeG,SafeB)else hb[#hb+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:1'",A(SafeR*0.5,0),A(SafeG*0.5,0),A(SafeB*0.5,0))end;hb[#hb+1]=" rx='5'></rect>"hb[#hb+1]=f("<text x='%f' y='%f' font-size='24' fill='",ck+eB/2,cl+lr/2+5)if lq then hb[#hb+1]="black"else hb[#hb+1]="white"end;hb[#hb+1]="' text-anchor='middle' font-family='Play' style='stroke-width:0px;'>"if lq then hb[#hb+1]=f("%s</text>",lu)else hb[#hb+1]=f("%s</text>",lv)end end;local lw=f("rgb(%d,%d,%d)'",A(SafeR*0.1,0),A(SafeG*0.1,0),A(SafeB*0.1,0))local lx=f("rgb(%d,%d,%d)",A(SafeR*0.8,0),A(SafeG*0.8,0),A(SafeB*0.8,0))local ly=lp;for _,cT in pairs(aF)do local k3=cT.disableName;local k2=cT.enableName;if type(k3)=="function"then k3=k3(cT)end;if type(k2)=="function"then k2=k2(cT)end;if not cT.drawCondition or cT.drawCondition(cT)then ly(hb,cT.toggleVar(cT),cT.hovered,cT.x,cT.y,cT.width,cT.height,lx,lw,k3,k2,cT)end end end;local lz=A(ResolutionX/2,0)local lA=A(ResolutionY/2,0)local hb={}aV.HUDPrologue(hb)if showHud then aV.UpdateHud(hb)else if AlwaysVSpd then aV.DrawVerticalSpeed(hb,as)end;aV.DisplayOrbitScreen(hb)aV.DrawWarnings(hb)end;if bD and bE~={}then aV.DrawSettings(hb)end;if radar_1 or radar_2 then aY.assignRadar()end;if bP[1]then aV.DrawRadarInfo()end;aV.HUDEpilogue(hb)hb[#hb+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aV.DisplayMessage(hb,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(hb)end end;ll(hb)if x()==0 then if m()==1 and a1 then if not AltIsOn then lg()lo(hb)end;if not aZ and not a_ then local lB=table.concat(hb,"")hb={}hb[#hb+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)hb[#hb+1]=lB;hb[#hb+1]="</body>"aZ=true;hb[#hb+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(hb,"")system.setScreen(content)elseif a_ then local lB=table.concat(hb,"")hb={}hb[#hb+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)hb[#hb+1]=lB;hb[#hb+1]="</body>"end;if not aZ then hb[#hb+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],lz,lA,ag,ah)end else lf()end else if not a1 and m()==0 then lf()if aj>DeadZone then if DisplayDeadZone then le(hb)end end elseif a1 and(not AltIsOn or not freeLookToggle)then lg()lo(hb)end;hb[#hb+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],lz,lA,ag,ah)end;hb[#hb+1]=[[</svg></body>]]content=table.concat(hb,"")end;function kw.TenthTick()aV.DrawTanks()if shield_1 then aV.DrawShield()end end;function kw.OneSecond(hb)local function lC()local h1=q()local ip=bs;local lD=h1-au;if ip>1.38889 then ip=ip/1000;local lE=ip*(h1-au)TotalDistanceTravelled=TotalDistanceTravelled+lE;ad=ad+lE end;ae=ae+lD;TotalFlightTime=TotalFlightTime+lD;au=h1 end;lC()aV.UpdatePipe()aV.ExtraData(hb)end;function kw.ButtonSetup()kb()kg()aF=gm end;return kw end;local function lF()local function lG(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function lH()local function lI(lJ,lK)return lJ.name<lK.name end;bG={}for cS,cT in pairs(b[0])do bG[#bG+1]={name=cT.name,index=cS}end;table.sort(bG,lI)end;local function lL(lM)for cS,cT in pairs(lM)do if cT.name and cT.name==CustomTarget.name then return cS end end;return-1 end;local function lN()bS=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local lO=bG[AutopilotTargetIndex].index;local lP=b[0][lO]if lP.center then AutopilotTargetName=lP.name;ac=aR[0][lO]if CustomTarget~=nil then if ar==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=lP;for _,cT in pairs(aR[0])do if cT.name==CustomTarget.planetname then ac=cT;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function lQ(hf)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if hf==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then lN()else local lO=bG[AutopilotTargetIndex].index;local lP=b[0][lO]if lP~=nil and lP.name=="Space"or iphCondition=="Custom Only"and lP.center or iphCondition=="No Moons"and string.find(lP.name,"Moon")~=nil then if hf==nil then lQ()else lQ(1)end else lN()end end else a2="Disengage autopilot before changing Interplanetary Helper"c6("iph","AP")end end;local function km()local fV=-1;fV=lL(b[0])if fV>-1 then table.remove(b[0],fV)end;fV=-1;fV=lL(SavedLocations)if fV~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fV)end;lQ()lH()end;local function kh(g9,position,hX,lR)if dbHud_1 or hX then local p=lG(position)local kK=p.gravity;if lR then kK=unit.getClosestPlanetInfluence()end;local lS={position=position,name=g9,planetname=p.name,gravity=kK,safe=lR}if not hX then SavedLocations[#SavedLocations+1]=lS else for cS,cT in pairs(b[0])do if cT.name and g9==cT.name then table.remove(b[0],cS)end end end;table.insert(b[0],lS)lH()lN()a2="Location saved as "..g9 .."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local lT={}function lT.UpdateAtlasLocationsList()lH()end;function lT.UpdateAutopilotTarget()lN()end;function lT.adjustAutopilotTargetIndex(hf)lQ(hf)end;function lT.findAtlasIndex(lM)lL(lM)end;function lT.UpdatePosition(lU)local fV=lL(SavedLocations)if fV~=-1 then if lU~=nil then SavedLocations[fV].name=lU;AutopilotTargetIndex=AutopilotTargetIndex-1;lQ()else local lV=SavedLocations[fV]lV.gravity=unit.getClosestPlanetInfluence()lV.position=bv;lV.safe=true end;a2=SavedLocations[fV].name.." position updated ("..SavedLocations[fV].planetname..")"else a2="Name Not Found"end end;function lT.AddNewLocation(g9,position,hX,lR)kh(g9,position,hX,lR)end;function lT.ClearCurrentPosition()km()end;for cS,cT in pairs(SavedLocations)do table.insert(b[0],cT)end;lH()if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end;lT.UpdateAutopilotTarget()return lT end;local function lW()local cD={}local function lX(eI)local lY=AutopilotEndSpeed;if not Autopilot then lY=0 end;if not aq then return aS.computeDistanceAndTime(eI,lY,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(eI,lY,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function lZ(eI)local lY=AutopilotEndSpeed;if not Autopilot then lY=0 end;return aS.computeDistanceAndTime(eI,lY,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local l_=false;local m0=0;function cD.GetAutopilotBrakeDistanceAndTime(eI)return lX(eI)end;function cD.GetAutopilotTBBrakeDistanceAndTime(eI)return lZ(eI)end;local function m1(m2,m3,m4)m3=m3:project_on_plane(m2)m4=m4:project_on_plane(m2)return n(m3:cross(m4):dot(m2),m3:dot(m4))end;local function m5()local function m6()local m7=-1;local m8=-1;if vBooster then m7=vBooster.getDistance()end;if hover then m8=hover.getDistance()end;if m7~=-1 and m8~=-1 then if m7<m8 then return m7 else return m8 end elseif m7~=-1 then return m7 elseif m8~=-1 then return m8 else return-1 end end;local m9=m6()local ma=-1;if telemeter_1 then ma=telemeter_1.getDistance()end;if m9~=-1 and ma~=-1 then if m9<ma then return m9 else return ma end elseif m9~=-1 then return m9 else return ma end end;local function mb(planet,e4,mc)local function md(me,dp)local ea=vec3(dp)if me.id==0 then return setmetatable({latitude=ea.x,longitude=ea.y,altitude=ea.z,id=0,systemId=me.systemId},MapPosition)end;local eb=ea-me.center;local aj=eb:len()local dv=aj-me.radius;local dt=0;local du=0;if not ct(aj,0)then local ec=n(eb.y,eb.x)du=ec>=0 and ec or 2*math.pi+ec;dt=math.pi/2-math.acos(eb.z/aj)end;return setmetatable({latitude=math.deg(dt),longitude=math.deg(du),altitude=dv,id=me.id,systemId=me.systemId},MapPosition)end;local mf=md(planet,e4)mf="::pos{"..mf.systemId..","..mf.id..","..mf.latitude..","..mf.longitude..","..mf.altitude.."}"if mc then return mf else system.setWaypoint(mf)return true end end;local mg=false;function cD.showWayPoint(planet,e4,mc)return mb(planet,e4,mc)end;function cD.APTick()local function mh()if bO and not BrakeLanding then local c4=bO[1]local ga,gb=bO[2],bO[3]local mi=math.min(ga,gb or ga)local mj=mi/bs;local mk=AutoTakeoff and(bs<42 or ao~=-1)local ml=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if ml and not mk and(a8*1.5>mi or mj<1)then BrakeIsOn=true;cp(0)if AltitudeHold then cB()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cE()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if mj<11 then bN=c4.name.." COLLISION "..cJ(mj).." / "..cw(mi,2)else bN=c4.name.." collision "..cJ(mj)end;if mj<6 then c6("alarm","AL",2)end else bN=false end end;local function mm(c0,mn,mo)local function mp(c0,dR)c0=vec3(c0)dR=vec3(dR):normalize()local da=c0*dR;return da.x+da.y+da.z end;local mq=0.001;local mr=1;if not aq or not b2 or ao~=-1 or bs<Q then if mo==nil then mo=DampingMultiplier end;if mn==nil then mn=mq end;c0=vec3(c0):normalize()local ms=vec3()-c0;local mt=-mp(ms,core.getConstructWorldOrientationRight())*mr;local mu=-mp(ms,core.getConstructWorldOrientationUp())*mr;if aB==0 then aB=mt/2 end;if aC==0 then aC=mu/2 end;if d(mt)<0.1 then V=V-mt*2 else V=V-(mt+(mt-aB)*mo)end;if d(mu)<0.1 then U=U+mu*2 else U=U+mu+(mu-aC)*mo end;aB=mt;aC=mu;if d(mt)<mn and d(mu)<mn then return true end;return false elseif b2 and ao==-1 then c0=br;if mo==nil then mo=DampingMultiplier end;if mn==nil then mn=mq end;c0=vec3(c0):normalize()local ms=bo-c0;local mt=-mp(ms,core.getConstructWorldOrientationRight())*mr;local mu=-mp(ms,core.getConstructWorldOrientationUp())*mr;if aB==0 then aB=mt/2 end;if aC==0 then aC=mu/2 end;if d(mt)<0.1 then V=V-mt*5 else V=V-(mt+(mt-aB)*mo)end;if d(mu)<0.1 then U=U+mu*5 else U=U+mu+(mu-aC)*mo end;aB=mt;aC=mu;if d(mt)<mn and d(mu)<mn then return true end;return false end end;aq=k()>0;ar=k()as=core.getAltitude()ao=m5()E=q()b3=E;if CollisionSystem then mh()end;if antigrav then by=antigrav.getState()==1 end;local mv=1;local mw=1;local mx=E-b3;local my=-math.deg(m1(bn,br,bo))local mz=math.deg(m1(bp,br,bo))local hf=bt*-1;b2=aq and my<-YawStallAngle or my>YawStallAngle or mz<-PitchStallAngle or mz>PitchStallAngle;local mA=system.getMouseDeltaX()local mB=system.getMouseDeltaY()if InvertMouse and not a1 then mB=-mB end;V=0;Z=0;U=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if as==0 then as=(bv-planet.center):len()-planet.radius end;bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local kK=planet:getGravity(core.getConstructWorldPos()):len()*av;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and a1 then if not aZ then ag=r(ag+mA,-aG/2,aG/2)ah=r(ah+mB,-aH/2,aH/2)end else ag=0;ah=0 end else ag=r(ag+mA,-aG/2,aG/2)ah=r(ah+mB,-aH/2,aH/2)aj=y(ag*ag+ah*ah)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(mB,-100,100)+0.5)*2*mv;V=(-utils.smoothstep(mA,-100,100)+0.5)*2*mw end end end end;local mC=bs>8334;if bs>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not mC then a2="Space Speed Engine Shutoff reached"cp(0)end;if not mC and LastIsWarping then if not BrakeIsOn then cG()end;if Autopilot then cE()end end;LastIsWarping=mC;if aq and ar>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not l_ then BrakeIsOn=true;l_=true elseif not AtmoSpeedAssist and l_ then if bs<b7/3.6 then BrakeIsOn=false;l_=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local mD=false;if CustomTarget and al~=1 then mD=mm(CustomTarget.position-bv,0.1)else mD=mm(vec3(br),0.01)end;b0=true;if mD then cs(e(b7))if(d(bC)<2 or d(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cH()end elseif aq and AtmoSpeedAssist then cp(1)end elseif bs>Q then mm(vec3(br),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bs>Q then mm(-vec3(br))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cH()al=false;an=true else al=false;cE()end end;if an and CustomTarget and(as<HoldAltitude+250 and as>HoldAltitude-250)and bs*3.6>b7-250 and d(bu)<25 and ar>=0.1 and(CustomTarget.position-bv):len()>2000+as then cE()an=false end;if VertTakeOff then b0=true;local mE=HoldAltitude;if bu<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then mE=antigrav.getBaseAltitude()end;if as<mE-100 then b8=0;af=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;af=0 elseif bu<-30 then BrakeIsOn=true;af=15 elseif as>=mE then if by then if Autopilot or VectorToTarget then cz()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"c6("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"c6("vtoc","VT")cz()end;af=0 end else if ar>0.08 then b8=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bk then b8=0;af=20 else af=0;b8=36;cs(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=mE;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local mF=r(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(mF)local mG=r(vTpitchPID:get(),-1,1)U=mG end end;if IntoOrbit then local ms;local mH=false;local mI=cw(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ac end end;if not bf then bg=e(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=e(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget and CustomTarget then ms=CustomTarget.position-bv end;local mJ,mK=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local mL=bC;if not bc then local mM=false;local mN=false;cp(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..mI;if be.VectorToTarget then mm(ms:normalize():project_on_plane(bt))mH=bo:dot(ms:project_on_plane(bn):normalize())>0.95 else mm(br)mH=my<0.5;if bs<150 then mH=true end end;U=0;ba=0;if bB<=ba+1 and bB>=ba-1 then mM=true else mM=false end;if mL<=bb+1 and mL>=bb-1 then mN=true else mN=false end;if mM and mN and mH then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then mm(ms:normalize():project_on_plane(bt))elseif bs>150 then mm(br)end;U=0;if be.VectorToTarget and CustomTarget then local a8,_=aS.computeDistanceAndTime(bs,b7/3.6,av,0,0,LastMaxBrake)if bi and ms:len()>15000+a8+as then b9="Orbiting to Target"if as-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or ms:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"c6("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;be.VectorToTarget,be.AutopilotAlign=false,false;cA()cH()return end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bg*0.9 and as<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;cp(0)ba=0;if not be.VectorToTarget then a2="Orbit complete"c6("orCom","OB")cA()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..mI;bd=true;cs(mK*3.6+1)local mO=bg-as;if VSpdPID==nil then VSpdPID=pid.new(0.1,0,1*0.1)end;VSpdPID:inject(mO-bu*r(utils.smoothstep(2000-mO,-2000,2000)^6*10,1,10))ba=r(VSpdPID:get(),-60,60)end end else local mP=2.75;local mQ=d(A(mJ*mP))local mR=mQ%50;if mR>0 then mQ=mQ-mR+50 end;BrakeIsOn=false;if as<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..mI;ba=utils.map(bu,200,0,-15,80)elseif as>=bg*0.8 and as<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..mI;mQ=mQ*0.75;ba=utils.map(bu,100,-100,-15,65)elseif as>=bg*1.15 and as<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..mI;mQ=mQ*0.75;if bu<0 or bd then ba=utils.map(as,bg*1.5,bg*1.01,-30,0)else ba=utils.map(as,bg*0.99,bg*1.5,0,30)end elseif as>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..mI;ba=-65;local mS=utils.map(bu,-150,-400,1,0.55)mQ=mQ*mS end;cs(e(mQ))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local mT=ba-bB;OrbitPitchPID:inject(mT)local mU=r(OrbitPitchPID:get(),-0.5,0.5)U=mU end end;if Autopilot and ar==0 and not al then local function mV(bW,orbit)system.print(bW)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cp(0)P=false;a2=bW;c6("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bg=as;bf=true end;cA()end end;local mW,mX=AutopilotTargetCoords,false;if CustomTarget and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local mY=(CustomTarget.position-ac.center):normalize()local mZ=mY:project_on_plane((ac.center-bv):normalize()):normalize()local m_=ac.center+mZ*(ac.radius+AutopilotTargetOrbit)local n0=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bv-m_):len()<(bv-n0):len()then mW=m_ else mW=n0;AutopilotEndSpeed=0 end;AutopilotTargetCoords=mW;aX.showWayPoint(ac,AutopilotTargetCoords)mX=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget and CustomTarget.planetname=="Space"then if not TargetSet then AutopilotPlanetGravity=0;mX=true;AutopilotRealigned=true;TargetSet=true;mW=CustomTarget.position+(bv-CustomTarget.position):normalize()*AutopilotSpaceDistance;AutopilotTargetCoords=mW end elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local mY=(bv+br*100000-ac.center):normalize()local mZ=mY:project_on_plane((ac.center-bv):normalize()):normalize()if mZ:len()<1 then mY=(bv+bo*100000-ac.center):normalize()mZ=mY:project_on_plane((ac.center-bv):normalize()):normalize()end;mW=ac.center+mZ*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=mW;TargetSet=true;mX=true;AutopilotRealigned=true;aX.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(mW)-bv):len()local c1,c2,c3=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(c4)if c4.noAtmosphericDensityAltitude>0 then return c4.radius+c4.noAtmosphericDensityAltitude else return c4.radius+c4.surfaceMaxAltitude*1.5 end end)local c5=c2;if c3~=nil and c2~=nil then c5=math.min(c3,c2)end;if c5~=nil and c5<AutopilotDistance and c1.name==ac.name then AutopilotDistance=c5 end;local mD=true;local n1=(ac.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ac.radius;local iO=cw(n1)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..iO..'"}')local a8,a9;if not TurnBurn then a8,a9=lX(bs)else a8,a9=lZ(bs)end;if bs>50 and AutopilotAccelerating then local ms=vec3(mW)-bv;local n2=r(math.deg(m1(bn,br:normalize(),ms:normalize()))*bs/500,-90,90)local n3=r(math.deg(m1(bp,br:normalize(),ms:normalize()))*bs/500,-90,90)if d(n2)<20 and d(n3)<20 then n2=n2*2;n3=n3*2 end;if d(n2)<2 and d(n3)<2 then n2=n2*2;n3=n3*2 end;local my=-math.deg(m1(bn,bo,br:normalize()))local mz=-math.deg(m1(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(n3-mz)local n4=r(apPitchPID:get(),-1,1)U=U+n4;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(n2-my)local n5=r(apYawPID:get(),-1,1)V=V+n5;mX=true;if d(n2)>2 or d(n3)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"c6("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end end elseif AutopilotAccelerating and bs<=50 then mm((mW-bv):normalize())end;if n1<AutopilotTargetOrbit*1.5 then if CustomTarget and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(n1)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local c1,c5=b_((AutopilotTargetCoords-bv):normalize())if ac.name~=planet.name then if c1~=nil and ac.name~=c1.name and c5<AutopilotDistance then a2="Collision with "..c1.name.." in "..cw(c5).."\nClear LOS to continue."ai=5;mg=true else mg=false;a2=""end end end;if not mg then if not AutopilotCruising and not AutopilotBraking and not mX then mD=mm((mW-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then mD=mm(-vec3(br):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cp(AutopilotInterplanetaryThrottle)K=A(AutopilotInterplanetaryThrottle,2)P=true end;local n6=unit.getThrottle()if AtmoSpeedAssist then n6=K end;local n7=99999;local kW=-vec3(core.getWorldAcceleration()):dot(br:normalize())local n8=r(br:dot((mW-bv):normalize()),0,bs)if n8>0 or kW>0 then n7=aS.computeTravelTime(n8,kW,AutopilotDistance-a8)end;if bq:len()>=MaxGameVelocity or n6==0 and P or warmup/4>n7 then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then c6("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cp(0)end;local n9=AutopilotDistance;if n9<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<m0 and bI>2000 then cE()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;m0=bI else m0=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c6("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cp(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cp(1,true)end;local _,mK=aU(ac):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local ms;if CustomTarget then ms=CustomTarget.position-bv end;if CustomTarget and CustomTarget.planetname=="Space"and bs<50 then mV("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget and CustomTarget.planetname~="Space"and bs<=mK and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then mV("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,AutopilotTargetCoords)elseif(CustomTarget and CustomTarget.planetname~="Space"or CustomTarget==nil)and orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then c6("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=mK then if CustomTarget then if br:normalize():dot(ms:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then c6("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else mV("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else mV("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then mV("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local n9=AutopilotDistance;if n9<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<m0 and bI>2000 then cE()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;m0=bI else m0=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c6("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local n6=unit.getThrottle()if AtmoSpeedAssist then n6=K end;if n6>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end;AutopilotCruising=false end else if mD then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif mD and not mg then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end;if not P then cp(AutopilotInterplanetaryThrottle,true)K=A(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"c6("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cp(0)P=false;ProgradeIsOn=true;al=true;aX.showWayPoint(ac,CustomTarget.position)end;if a0 then b0=true;local n3=0;local eM=bv+vec3(unit.getMasterPlayerRelativePosition())local na=eM-bv;local nb=vec3(na):project_on(bo):len()local nc=vec3(na):project_on(bp):len()local aj=y(nb*nb+nc*nc)mm(na:normalize())local nd=40;local ne=aj<nd;local nf=100;local ng=r((aj-nd)/2,10,nf)U=0;local mD=d(V)<0.1;if mD and bs<ng and not ne then BrakeIsOn=false;n3=-20 else BrakeIsOn=true;n3=0 end;local nh=0;if d(n3-bB)>nh then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(n3-bB)local n4=pitchPID:get()U=n4 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local ni=LastMaxBrakeInAtmo;if ni then ni=ni*r(bs/100,0.1,1)*ar else ni=LastMaxBrake end;if ar<0.01 then ni=LastMaxBrake end;local nj=bo:project_on_plane(bt):normalize():dot(br)local nk=vec3(core.getWorldAirFrictionAcceleration())local nl=nk:len()*av;if nj>100 then a8,a9=aS.computeDistanceAndTime(nj,100,av,0,0,ni)local nm,nn=aS.computeDistanceAndTime(100,0,av,0,0,ni*0.55)a8=a8+nm else a8,a9=aS.computeDistanceAndTime(nj,0,av,0,0,ni*0.55)end;local mO=HoldAltitude-as-bu;local no=200+bs;if Reentry or al then minMax=2000+bs end;local np=1;if AutoTakeoff then np=r(bs/100,0.1,1)end;local n3=(utils.smoothstep(mO,-no,no)-0.5)*2*MaxPitch*np;if not Reentry and not al and not VectorToTarget and bo:dot(br:normalize())<0.99 then n3=(utils.smoothstep(mO,-no*r(20-19*ar*10,1,20),no*r(20-19*ar*10,1,20))-0.5)*2*MaxPitch*r(2-ar*10,1,2)*np end;if not AltitudeHold then n3=0 end;if LockPitch~=nil then if bM and not IntoOrbit then n3=LockPitch else LockPitch=nil end end;b0=true;local nq=U;if Reentry then local nr=e(b7)local ns,nt=aS.computeDistanceAndTime(bs,nr/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)ns=ns==-1 and 5000 or ns;local nu=as-(planet.noAtmosphericDensityAltitude+ns)local nw=as>planet.noAtmosphericDensityAltitude+ns*1.35;if nw then n3=ReEntryPitch;if bs<=nr/3.6 and bs>nr/3.6-10 and d(br:normalize():dot(bo))>0.9 and not bA then O=false;cp(1)end elseif bA and not nw and not aq then cs(nr,true)end;if bA then if bs>nr/3.6 and not nw then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not R then n3=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;n3=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and nw then b0=true elseif not nw then if not aq and(bA or s:getTargetSpeed(axisCommandId.longitudinal)~=nr)then cs(nr)end;if bs<nr/3.6+1 then BrakeIsOn=false;R=false;Reentry=false;b0=true end end end;if bs>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then mm(vec3(br))end;if bK or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local ms;if bK then if type(bK)=="table"then ms=bK elseif bK<3 and bK>0 then ms=-bt:cross(br)*5000 elseif bK>=3 then ms=bt:cross(br)*5000 elseif bK<0 then ms=br*25000 end elseif CustomTarget~=nil then ms=CustomTarget.position-bv else ms=ac.center-bv end;local n2=math.deg(m1(bt:normalize(),br,ms))*2;local nx=math.rad(d(bC))if bs>minRollVelocity and ar>0.01 then local ny=1000+bs;local nz=(utils.smoothstep(mO-bu*10,-ny,ny)-0.5)*2*MaxPitch;local nA=r(90-nz,0,180)b4=r(n2*2,-nA,nA)local nB=n2;n2=r(r(n2,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(nx)+4*(bB-n3)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)local nC=1;if b4~=0 then nC=d(nx/b4)end;nC=(90-r(d(b4-bC),0,90))/90;local nD=n3;if d(bC)>90 then nD=-nD end;n3=nC*r(r(nD*math.cos(nx),-PitchStallAngle*0.8,PitchStallAngle*0.8)+d(r(d(nB)*math.sin(nx),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;n2=r(n2,-YawStallAngle*0.80,YawStallAngle*0.80)end;local nE=my-n2;if bK and d(nE)<=0.0001 and(type(bK)=="table"or type(bK)~="table"and bK<0 and d(bC)<1)then if bK==-2 then cB()end;bK=nil;c6("180Off","BR")return end;if not b2 and bs>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(nE)local n5=r(yawPID:get(),-1,1)V=V+n5 elseif aq and ao>-1 or bs<minRollVelocity then mm(ms)elseif b2 and ar>0.01 then if(my<-YawStallAngle or my>YawStallAngle)and ar>0.01 then mm(br)end;if(mz<-PitchStallAngle or mz>PitchStallAngle)and ar>0.01 then n3=r(bB-mz,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local mE=planet:getAltitude(CustomTarget.position)local nu=ms:project_on_plane(bt):len()StrongBrakes=true;if not am and not Reentry and nu<=a8 and(br:project_on_plane(bt):normalize():dot(ms:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cp(0)if AltitudeHold then cB()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(nj<0.1 or nu<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<nu)then if not by then c6("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bN=false end;LastDistanceToTarget=nu end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local ms=CustomTarget.position-bv;local mE=planet:getAltitude(CustomTarget.position)local nu=y(ms:len()^2-(as-mE)^2)local ni=LastMaxBrakeInAtmo;if ni then a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,ni/2)StrongBrakes=true;if nu<=a8+bs*mx/2 and br:project_on_plane(bt):normalize():dot(ms:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cH()end end;LastDistanceToTarget=nu end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cA()VectorToTarget=false;bc=true end end;if b2 and ar>0.01 and ao==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then mm(br)n3=r(bB-mz,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;U=nq;local ma=-1;if BrakeLanding then n3=0;local nF=false;local nG=30;if aT~=nil and aT>0 then local nH=r(ar,0.4,2)local ni=LastMaxBrakeInAtmo*r(bs/100,0.1,1)*nH;local nI=aT*nH+ni-kK;local nJ=ni/2-kK;local nK=bs-y(d(nJ/2)*20/(0.5*av))*utils.sign(nJ)if nK<0 then nK=0 end;local nL;if bs>100 then local nM,_=aS.computeDistanceAndTime(bs,100,av,0,0,ni)local nN,_=aS.computeDistanceAndTime(100,0,av,0,0,y(ni))nL=nM+nN else nL=aS.computeDistanceAndTime(bs,0,av,0,0,y(ni))end;if nL<20 then BrakeIsOn=false else local nO=0;if nK>100 then local nP,_=aS.computeDistanceAndTime(nK,100,av,0,0,nI)local nQ,_=aS.computeDistanceAndTime(100,0,av,0,0,aT*nH+y(ni)-kK)nO=nP+nQ else nO,_=aS.computeDistanceAndTime(nK,0,av,0,0,aT*nH+y(ni)-kK)end;nO=(nO+15+bs*mx)*1.1;local nR=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if nR then local mE=planet:getAltitude(CustomTarget.position)local nS=as-mE-100;local ms=CustomTarget.position-bv;local nT=y(ms:len()^2-(as-mE)^2)if nT>100 then nR=false elseif nS<=nO or nO==-1 then BrakeIsOn=true;nF=true else BrakeIsOn=false;nF=true end end;if not nR and CalculateBrakeLandingSpeed then if nO>=nG then BrakeIsOn=true else BrakeIsOn=false end;nF=true end end end;if not bA then cp(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)stablized=true;ma=ao;if ma>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()c6("grOut","LG",1)end;s:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-hf)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not nF then BrakeIsOn=true elseif not nF then BrakeIsOn=false end end;if AutoTakeoff or am then local c1,c3,c2;if AutopilotTargetCoords~=nil then c1,c3,c2=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(c4)return c4.radius+c4.noAtmosphericDensityAltitude end)end;if by then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cp(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(n3)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bs<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cp(0)elseif am then cp(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(c1==nil or c1.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bA then cp(0)end;AutopilotAccelerating=true end end;local nU=ao>-1;local nV=bB;if(VectorToTarget or am or bK)and not nU and bs>minRollVelocity and ar>0.01 then local nx=math.rad(d(bC))nV=bB*d(math.cos(nx))+mz*math.sin(nx)end;local nW=r(n3-nV,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then nW=r(n3-nV,-85,MaxPitch)elseif ar<0.01 then nW=r(n3-nV,-MaxPitch,MaxPitch)end;if d(bC)<5 or VectorToTarget or bK or BrakeLanding or nU or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(nW)local n4=pitchPID:get()U=U+n4 end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=m5()return cD end;function script.onStart()local nX=false;local function nY()local function nZ(n_)local o0=dbHud_1.hasKey;for cS,cT in pairs(n_)do if o0(cT)then local da=g(dbHud_1.getStringValue(cT))if da~=nil then _G[cT]=da;nX=true end end end end;if dbHud_1 then if not useTheseSettings then nZ(cc())coroutine.yield()nZ(c)else nZ(c)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;nX=false end;coroutine.yield()if nX then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then a2="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function o1()local function o2(o3,o4)if o3>o4 then o4=o3 end;local o5,o6=0,0;if ContainerOptimization>0 then o5=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then o6=FuelTankOptimization*0.05 end;o4=o4*(1-(o5+o6))return o4 end;local o7=core.getElementNameById;local o8=fuelX~=0 and fuelY~=0;for cS in pairs(at)do local type=core.getElementTypeById(at[cS])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(at[cS])),'^.*vertical.*$')and core.getElementForwardById(at[cS])[3]>0 then bx=true end end;if o(type,'^.*Space Engine$')then bl=true;if o(tostring(core.getElementTagsById(at[cS])),'^.*vertical.*$')then local o9=core.getElementForwardById(at[cS])if o9[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local oa=j(at[cS])if oa>10000 then G=110 elseif oa>1000 then G=55 elseif oa>150 then G=27 end end;aL=aL+j(at[cS])if o8 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local oa=j(at[cS])local kS=l(at[cS])local o3=0;local h1=q()if type=="Atmospheric Fuel Tank"then local o4=400;local ob=35.03;if oa>10000 then o4=51200;ob=5480 elseif oa>1300 then o4=6400;ob=988.67 elseif oa>150 then o4=1600;ob=182.67 end;o3=kS-ob;if fuelTankHandlingAtmo>0 then o4=o4+o4*fuelTankHandlingAtmo*0.2 end;o4=o2(o3,o4)aI[#aI+1]={at[cS],o7(at[cS]),o4,ob,o3,h1}end;if type=="Rocket Fuel Tank"then local o4=320;local ob=173.42;if oa>65000 then o4=40000;ob=25740 elseif oa>6000 then o4=5120;ob=4720 elseif oa>700 then o4=640;ob=886.72 end;o3=kS-ob;if fuelTankHandlingRocket>0 then o4=o4+o4*fuelTankHandlingRocket*0.1 end;o4=o2(o3,o4)aK[#aK+1]={at[cS],o7(at[cS]),o4,ob,o3,h1}end;if type=="Space Fuel Tank"then local o4=600;local ob=35.03;if oa>10000 then o4=76800;ob=5480 elseif oa>1300 then o4=9600;ob=988.67 elseif oa>150 then o4=2400;ob=182.67 end;o3=kS-ob;if fuelTankHandlingSpace>0 then o4=o4+o4*fuelTankHandlingSpace*0.2 end;o4=o2(o3,o4)aJ[#aJ+1]={at[cS],o7(at[cS]),o4,ob,o3,h1}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function oc()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then s:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(aq or not aq and as<10000)then for _,cT in pairs(door)do cT.toggle()end end;if switch then for _,cT in pairs(switch)do cT.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cT in pairs(forcefield)do cT.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;s:setTargetGroundAltitude(b1)if aq and ao~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function od()local oe={}local function of()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local og={[1]=4480,[6]=4480,[7]=6270}for oh,oi in pairs(b)do b[oh][0]=of()b[oh][0].systemId=oh;oe[oh]={}for oj,planet in pairs(b[oh])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=og[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=oh;planet.bodyId=planet.id;oe[oh][oj]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end end end;aQ=cW()aR=aQ(oe)aS=eg()aU=eK()aW=lF()end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})nY()coroutine.yield()o1()coroutine.yield()aX=lW()oc()coroutine.yield()od()aY=f7()aV=gk()aV.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bP[1]=nil;if radar_1 then bP[1]=radar_1;aY.pickType()end;c6("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cT in pairs(door)do cT.toggle()end end;if switch then for _,cT in pairs(switch)do cT.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cT in pairs(forcefield)do cT.toggle()end end;cO()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;c6("stop","SU")end;function script.onTick(ok)local ol=nil;if ok=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a2="Radar Contact"c6("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif ok=="tenthSecond"then local function om()local on=system.createData;local oo=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=oo(panelInterplanetary,"value")interplanetaryHeaderText=on('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=oo(panelInterplanetary,"value")widgetDistanceText=on('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=oo(panelInterplanetary,"value")widgetTravelTimeText=on('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=oo(panelInterplanetary,"value")widgetMaxMassText=on('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=oo(panelInterplanetary,"value")widgetTargetOrbitText=on('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=oo(panelInterplanetary,"value")widgetCurBrakeDistanceText=on('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=oo(panelInterplanetary,"value")widgetCurBrakeTimeText=on('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=oo(panelInterplanetary,"value")widgetMaxBrakeDistanceText=on('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=oo(panelInterplanetary,"value")widgetMaxBrakeTimeText=on('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=oo(panelInterplanetary,"value")widgetTrajectoryAltitudeText=on('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function op()t(panelInterplanetary)panelInterplanetary=nil end;local function oq()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local eI=bs;local n6=unit.getThrottle()/100;if AtmoSpeedAssist then n6=K end;local os,ot=aS.computeDistanceAndTime(bs,MaxGameVelocity,av,a:maxForceForward()*n6,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ou;if not TurnBurn and eI>0 then _,ou=aX.GetAutopilotBrakeDistanceAndTime(eI)else _,ou=aX.GetAutopilotTBBrakeDistanceAndTime(eI)end;local ov=0;local ow=0;if AutopilotCruising or not Autopilot and eI>5 then ow=aS.computeTravelTime(eI,0,AutopilotDistance)elseif a8+os<AutopilotDistance then ov=AutopilotDistance-(a8+os)ow=aS.computeTravelTime(8333.0556,0,ov)else local ox=(AutopilotDistance-a8)/os;os=AutopilotDistance-a8;ot=ot*ox end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ow elseif AutopilotBraking then return ou elseif AutopilotCruising then return ow+ou else return ot+a9+ow end end;local function oy(kK,oz)if kK==nil then kK=core.g()end;kK=A(kK,5)if oz~=nil and oz or(ol==nil or ol~=kK)then local eI=bq:len()local oA=g(unit.getData()).maxBrake;if oA~=nil and oA>0 and aq then oA=oA/r(eI/100,0.1,1)oA=oA/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+oA)/2 else LastMaxBrakeInAtmo=oA end end end;if oA~=nil and oA>0 then LastMaxBrake=oA end;ol=kK end end;oy(nil,true)if bz~=nil then if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or s:getTargetSpeed(axisCommandId.longitudinal)~=bz then cs(bz)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then om()end;if AutopilotTargetName~=nil then local oB=CustomTarget~=nil;local oC=0.5*LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()oC=oC>1000000 and A(oC/1000000,2).." kTons"or A(oC/1000,2).." Tons"u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=oq()if oB and not Autopilot then aj=(bv-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local iO=cw(aj)u(widgetDistanceText,'{"label": "distance", "value": "'..iO..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cJ(travelTime)..'", "unit":""}')iO=cw(a8)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..iO..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cJ(a9)..'", "unit":""}')iO=cw(aa)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..iO..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cJ(ab)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..f("%s",oC)..'", "unit":""}')iO=cw(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..iO..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then cp(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else op()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.TenthTick()elseif ok=="oneSecond"then local function oD(hb)local oE=0;aD=""local oF=aL;local oG=0;local oH=0;local oI=0;local h5=0;local h6=""local oJ=core.getElementHitPointsById;for cS in pairs(at)do local oa=0;local oK=0;oK=j(at[cS])oa=oJ(at[cS])oG=oG+oa;if oa<oK then if oa==0 then oI=oI+1 else oH=oH+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cS]))local ck=position.x;local cl=position.y;local fC=position.z;table.insert(aA,core.spawnArrowSticker(ck,cl,fC+1,"down"))table.insert(aA,core.spawnArrowSticker(ck,cl,fC+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(ck+1,cl,fC,"north"))table.insert(aA,core.spawnArrowSticker(ck+1,cl,fC,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(ck-1,cl,fC,"south"))table.insert(aA,core.spawnArrowSticker(ck-1,cl,fC,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(ck,cl-1,fC,"east"))table.insert(aA,core.spawnArrowSticker(ck,cl-1,fC,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(ck,cl+1,fC,"west"))table.insert(aA,core.spawnArrowSticker(ck,cl+1,fC,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cS])end elseif aM and#aA>0 and aA[11]==at[cS]then for h0 in pairs(aA)do core.deleteSticker(aA[h0])end;aA={}end end;oE=e(oG/oF*100)if oE<100 then if oE>0 and oE<WipeDamage then SavedLocations={}aW.UpdateAtlasLocationsList()aW.UpdateAutopilotTarget()cO()end;hb[#hb+1]=cj(0,0,"","pbright txt")h5=e(oE*2.55)h6=f("rgb(%d,%d,%d)",255-h5,h5,0)if oE<100 then hb[#hb+1]=cj("50%",1035,"Elemental Integrity: "..oE.."%","txtbig txtmid","fill:"..h6)if oI>0 then hb[#hb+1]=cj("50%",1055,"Disabled Modules: "..oI.." Damaged Modules: "..oH,"txtbig txtmid","fill:"..h6)elseif oH>0 then hb[#hb+1]=cj("50%",1055,"Damaged Modules: "..oH,"txtbig txtmid","fill:"..h6)end end end end;local function oL()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;bU=core.getPlayersOnBoard()bV=core.getDockedConstructs()oL()local hb={}aV.OneSecond(hb)if ShouldCheckDamage then oD(hb)end;ak=table.concat(hb,"")collectgarbage("collect")elseif ok=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local da=g(dbHud_1.getStringValue("SavedLocations"))if da~=nil then _G["SavedLocations"]=da;local fV=-1;local lS;for cS,cT in pairs(SavedLocations)do if cT.name and cT.name=="SatNav Location"then fV=cS;break end end;if fV~=-1 then lS=SavedLocations[fV]fV=-1;for cS,cT in pairs(b[0])do if cT.name and cT.name=="SatNav Location"then fV=cS;break end end;if fV>-1 then b[0][fV]=lS end;aW.UpdateAtlasLocationsList()a2=lS.name.." position updated"end end;for i=1,#bG do if bG[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ok=="msgTick"then local hb={}aV.DisplayMessage(hb,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif ok=="animateTick"then a_=true;aZ=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif ok=="hudTick"then aV.hudtick()elseif ok=="apTick"then aX.APTick()elseif ok=="radarTick"then aY.UpdateRadar()elseif ok=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function oM(oN,ng)local oO=vec3()local oP=vec3()if oN==axisCommandId.longitudinal then oO=vec3(core.getConstructOrientationForward())oP=bo elseif oN==axisCommandId.vertical then oO=vec3(core.getConstructOrientationUp())oP=bn elseif oN==axisCommandId.lateral then oO=vec3(core.getConstructOrientationRight())oP=bp else return vec3()end;local oQ=vec3(core.getWorldGravity())local oR=oQ:dot(oP)local oS=vec3(core.getWorldAirFrictionAcceleration())local oT=oS:dot(oP)local oU=bq:dot(oO)local oV=ng*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(oV-oU)local oW=targetSpeedPID2:get()local oX=(oW-oT-oR)*oP;return oX end;local function oY(oN,ng)local oO=vec3()local oP=vec3()if oN==axisCommandId.longitudinal then oO=vec3(core.getConstructOrientationForward())oP=bo elseif oN==axisCommandId.vertical then oO=vec3(core.getConstructOrientationUp())oP=bn elseif oN==axisCommandId.lateral then oO=vec3(core.getConstructOrientationRight())oP=bp else return vec3()end;local oQ=vec3(core.getWorldGravity())local oR=oQ:dot(oP)local oS=vec3(core.getWorldAirFrictionAcceleration())local oT=oS:dot(oP)local oU=bq:dot(oO)local oV=ng*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(oV-oU)local oW=targetSpeedPID:get()local oX=(oW-oT-oR)*oP;return oX end;local function oZ(o_,he,lK)local p0=o_:cross(lK):normalize_inplace()local i0=math.acos(r(p0:dot(-he),-1,1))*constants.rad2deg;if p0:cross(-he):dot(lK)<0 then i0=-i0 end;return i0 end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and O then cp(0)O=false elseif not bA and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local p1=r(T+U+system.getControlDeviceForwardInput(),-1,1)local p2=r(W+Z+system.getControlDeviceYawInput(),-1,1)local p3=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local p4=Y;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())av=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local p5=bC/180*math.pi;local p6=math.cos(p5)local p7=math.sin(p5)bB=oZ(bt,bo,bp*p6+bn*p7)local p8=br:normalize()local p9=d(bC)local pa=utils.sign(bC)local pb=vec3(core.getWorldAngularVelocity())local pc=p1*pitchSpeedFactor*bp+p2*rollSpeedFactor*bo+p3*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local pd=d(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and pd>0 or ar>0.0 and pd<autoRollRollThreshold and autoRollPreference)and p2==0 and d(bB)<85 then local pe=b4;local pf=autoRollFactor;if ar==0 then pf=pf/4;b4=0;pe=0 end;if rollPID==nil then rollPID=pid.new(pf*0.01,0,pf*0.1)end;rollPID:inject(pe-bC)local pg=rollPID:get()pc=pc+pg*bo end end;local ph=1;local pi=0;local pj=1;local pk=system.getMouseWheel()if pk>0 then bX()elseif pk<0 then bX(true)else aw=true end;L=0;if aq and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local pl=throttlePID:get()N=r(pl,-1,1)if N<K and ar>0.005 then M=true;s:setThrottleCommand(axisCommandId.longitudinal,r(N,0.01,1))else M=false;s:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local pm=r(brakePID:get(),0,1)if ar>0 and bu<-80 or ar>0.005 then L=pm end;if L>0 then if M and N==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else N=r(N,0.01,1)end;local pn=''local po=vec3()local pp=oM(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",pp,pi)local pq='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pq=pq..ExtraLongitudeTags end;local pr=s:getAxisCommandType(axisCommandId.longitudinal)local ps=s:composeAxisAccelerationFromThrottle(pq,axisCommandId.longitudinal)local pt=oY(axisCommandId.lateral,LeftAmount*1000)pn=pn..' , '.."lateral airfoil , lateral ground "po=po+pt;if po:len()>constants.epsilon then a:setEngineForceCommand(pn,po,pi,'','','',pj)end;a:setEngineForceCommand(pq,ps,ph)local pu='thrust analog vertical fueled 'local pv='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then pv=pv..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then pu=pu..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(pu,pp,ph)else a:setEngineForceCommand(pu,vec3(),ph)end;if LeftAmount~=0 then a:setEngineForceCommand(pv,pt,ph)else a:setEngineForceCommand(pv,vec3(),ph)end;if p4==0 then p4=L end;local pw=-p4*(brakeSpeedFactor*br+brakeFlatFactor*p8)a:setEngineForceCommand('brake',pw)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,K)end;local ng=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-ng/3.6)local pm=r(brakePID:get(),0,1)p4=r(p4+pm,0,1)end;local pw=-p4*(brakeSpeedFactor*br+brakeFlatFactor*p8)a:setEngineForceCommand('brake',pw)local pn=''local po=vec3()local px=false;local pq='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pq=pq..ExtraLongitudeTags end;local pr=s:getAxisCommandType(axisCommandId.longitudinal)if pr==axisCommandType.byThrottle then local ps=s:composeAxisAccelerationFromThrottle(pq,axisCommandId.longitudinal)a:setEngineForceCommand(pq,ps,ph)elseif pr==axisCommandType.byTargetSpeed then local ps=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)pn=pn..' , '..pq;po=po+ps;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then px=true end end;local pv='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then pv=pv..ExtraLateralTags end;local py=s:getAxisCommandType(axisCommandId.lateral)if py==axisCommandType.byThrottle then local pz=s:composeAxisAccelerationFromThrottle(pv,axisCommandId.lateral)a:setEngineForceCommand(pv,pz,ph)elseif py==axisCommandType.byTargetSpeed then local pt=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)pn=pn..' , '..pv;po=po+pt end;local pu='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then pu=pu..ExtraVerticalTags end;local pA=s:getAxisCommandType(axisCommandId.vertical)if pA==axisCommandType.byThrottle then local pp=s:composeAxisAccelerationFromThrottle(pu,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(pu,pp,ph,'airfoil','ground','',pj)else a:setEngineForceCommand(pu,vec3(),ph)a:setEngineForceCommand('airfoil vertical',pp,ph,'airfoil','','',pj)a:setEngineForceCommand('ground vertical',pp,ph,'ground','','',pj)end elseif pA==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),ph)end;local pB=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)pn=pn..' , '..pu;po=po+pB end;if po:len()>constants.epsilon then if Y~=0 or px or d(p8:dot(bo))<0.5 then pn=pn..', brake'end;a:setEngineForceCommand(pn,po,pi,'','','',pj)end end;local pC=torqueFactor*(pc-pb)local pD=vec3(core.getWorldAirFrictionAngularAcceleration())pC=pC-pD;a:setEngineTorqueCommand('torque',pC,ph,'airfoil','','',pj)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local eI=bq:len()local pE=0.15;if not bA then local pF=s:getTargetSpeed(axisCommandId.longitudinal)if eI*3.6>pF*(1-pE)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI*3.6<pF*(1-pE)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local n6=unit.getThrottle()if AtmoSpeedAssist then n6=K*100 end;local ng=n6/100;if k==0 then ng=ng*MaxGameVelocity;if eI>=ng*(1-pE)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI<ng*(1-pE)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local nr=e(b7)ng=ng*nr/3.6;if eI>=ng*(1-pE)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI<ng*(1-pE)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local gh=coroutine.status(beginSetup)if gh=="suspended"then local cq,gi=coroutine.resume(beginSetup)if gi then system.print("ERROR STARTUP: "..gi)end elseif gh=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(pG)local function pH(bY)local D=1;local function pI(pJ,bY)local pK={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local pL=pJ;for _,cT in ipairs(pK)do if bY and pL>cT then pJ=cT elseif pJ<cT and not bY then pJ=cT;break end end;return pJ end;if bY then D=-1 end;if not ExternalAGG and by then if a1 and bY then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bg=pI(bg,bY)else bg=bg+D*a3 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=pI(HoldAltitude,bY)else HoldAltitude=HoldAltitude+D*a3 end end else s:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function pM(pN)if not aq then a2="Flight Assist in Atmo only"return end;local d0=type(pN)if bK==nil then if d0=="table"then if Autopilot or VectorToTarget then cE()end;c6("180On","BR")elseif pN==1 then c6("bnkLft","BR")else c6("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cB()if d0~="table"then pN=pN+1 end end;bK=pN else c6("180Off","BR")bK=nil end end;if pG=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cp(0)if vBooster or hover then if aq and ao==-1 then c6("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if S then c6("grOut","LG",1)a.control.extendLandingGears()end;s:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then c6("grOut","LG",1)a.control.extendLandingGears()end else if S then c6("grIn","LG",1)a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif pG=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif pG=="forward"then T=T-1 elseif pG=="backward"then if AltIsOn then pM(-br*5000)else T=T+1 end elseif pG=="left"then if AltIsOn then pM(1)else W=W-1 end elseif pG=="right"then if AltIsOn then pM(3)else W=W+1 end elseif pG=="yawright"then X=X-1 elseif pG=="yawleft"then X=X+1 elseif pG=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif pG=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif pG=="up"then af=af+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif pG=="down"then af=af-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif pG=="groundaltitudeup"then pH()elseif pG=="groundaltitudedown"then pH(true)elseif pG=="option1"then toggleView=false;if AltIsOn and a1 then local pO=""for i=1,#bU do pO=pO.."| Name: "..system.getPlayerName(bU[i]).." Mass: "..A(core.getBoardedPlayerMass(bU[i])/1000,1).."t "end;system.print("Onboard: "..pO)return end;aW.adjustAutopilotTargetIndex()elseif pG=="option2"then toggleView=false;if AltIsOn and a1 then for i=1,#bU do core.forceDeboard(bU[i])end;a2="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif pG=="option3"then local function pP()aE=not aE;if not aE then c6("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else c6("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then t(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then t(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a1 then local pO=""for i=1,#bV do pO=pO.."| ID: "..bV[i].." Mass: "..A(core.getDockedConstructMass(bV[i])/1000,1).."t "end;system.print("Docked Ships: "..pO)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;pP()toggleView=false elseif pG=="option4"then toggleView=false;if AltIsOn and a1 then for i=1,#bV do core.forceUndock(bV[i])end;a2="Undocked all ships"return end;bK=nil;cE()elseif pG=="option5"then toggleView=false;function ToggleLockPitch()if LockPitch==nil then c6("lkPOn","LP")if not a1 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else c6("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif pG=="option6"then toggleView=false;if AltIsOn and a1 then if shield_1 then local pQ=shield_1.getVentingCooldown()if pQ>0 then a2="Cannot vent again for "..pQ.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a2="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a2="Shields already at max hitpoints"end;return else a2="No shield found"return end end;cB()elseif pG=="option7"then toggleView=false;if AltIsOn and a1 then if shield_1 then shield_1.toggle()return else a2="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end elseif pG=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"s:deactivateGroundEngineAltitudeStabilization()c6("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)c6("gsOn","GS")end;toggleView=false elseif pG=="option9"then if AltIsOn and a1 then s:resetCommand(axisCommandId.longitudinal)s:resetCommand(axisCommandId.lateral)s:resetCommand(axisCommandId.vertical)cp(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then c6("gyOn","GA")else c6("gyOff","GA")end end;toggleView=false elseif pG=="lshift"then bR=false;if AltIsOn then a1=true end;if x()==1 then a1=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;a_=false;aZ=false end elseif pG=="brake"then if BrakeToggleStatus or AltIsOn then cG()elseif not BrakeIsOn then cG()else BrakeIsOn=true end elseif pG=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif pG=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif pG=="stopengines"then local function pR()if E-F<1.5 then c6("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bK=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;pR()F=E;if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then s:resetCommand(axisCommandId.longitudinal)cp(0)else cp(100)end else if s:getTargetSpeed(axisCommandId.longitudinal)~=0 then s:resetCommand(axisCommandId.longitudinal)else if aq then cs(AtmoSpeedLimit)else cs(MaxGameVelocity*3.6)end end end elseif pG=="speedup"then bX()elseif pG=="speeddown"then bX(true)elseif pG=="antigravity"and not ExternalAGG then if antigrav~=nil then cI()end end end;function script.onActionStop(pG)local function pS()if not ExternalAGG and by then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if pG=="forward"then T=0 elseif pG=="backward"then T=0 elseif pG=="left"then if bK then if bK==2 then bK=-2 else bK=-1 end end;W=0 elseif pG=="right"then if bK then if bK==4 then bK=-2 else bK=-1 end end;W=0 elseif pG=="yawright"then X=0 elseif pG=="yawleft"then X=0 elseif pG=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif pG=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif pG=="up"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pG=="down"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pG=="groundaltitudeup"then pS()toggleView=false elseif pG=="groundaltitudedown"then pS()toggleView=false elseif pG=="lshift"then if x()==1 then ag=0;ah=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a1=false elseif pG=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then cG()else BrakeIsOn=false end end elseif pG=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(pG)local function pT(bY)local D=1;if bY then D=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=r(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+D*a5;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a5 end;a5=r(a5*1.05,a3,50)else s:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function pU(bY)local D=1;if bY then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if pG=="groundaltitudeup"then if not a1 then pT()end elseif pG=="groundaltitudedown"then if not a1 then pT(true)end elseif pG=="speedup"then pU()elseif pG=="speeddown"then pU(true)end end;function script.onInputText(cm)local function pV(pW,eM,hX)local function pX(eM)local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8='::pos{'..B..','..B..','..B..','..B..','..B..'}'local dl,dm,dt,du,dv=o(eM,d8)if dl=="0"and dm=="0"then return vec3(z(dt),z(du),z(dv))end;du=math.rad(du)dt=math.rad(dt)local planet=b[z(dl)][z(dm)]local ed=math.cos(dt)local pY=vec3(ed*math.cos(du),ed*math.sin(du),math.sin(dt))return planet.center+(planet.radius+dv)*pY end;local position=pX(eM)return aW.AddNewLocation(pW,position,hX)end;local i;local pZ,p_=nil,nil;local q0="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(cm," ")pZ=cm;if i~=nil then pZ=string.sub(cm,0,i-1)p_=string.sub(cm,i+1)end;if pZ=="/help"or pZ=="/commands"then for l0 in string.gmatch(q0,"([^\n]+)")do system.print(l0)end;return elseif pZ=="/setname"then if p_==nil or p_==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(p_)else a2="Select a saved target to rename first"end elseif shield_1 and pZ=="/resist"then if p_==nil or shield_1.getResistancesCooldown()>0 then a2="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8=B..', '..B..', '..B..', '..B;local q1,q2,q3,q4=o(p_,d8)if q4==nil or q1+q2+q3+q4>0.6 then a2="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(q1,q2,q3,q4)==1 then a2="Shield Resistances set"else a2="Resistance setting failed."end elseif pZ=="/addlocation"or string.find(cm,"::pos")~=nil then local hX=false;local pW="0-Temp"if p_==nil or p_==""then p_=pZ;hX=true end;i=string.find(p_,"::")if not hX then pW=string.sub(p_,1,i-2)end;local eM=string.sub(p_,i)pV(pW,eM,hX)elseif pZ=="/agg"then if p_==nil or p_==""then a2="Usage: /agg targetheight"return end;p_=z(p_)if p_<1000 then p_=1000 end;AntigravTargetAltitude=p_;a2="AGG Target Height set to "..p_ elseif pZ=="/G"then if p_==nil or p_==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if p_=="dump"then for cS,cT in pairs(cc())do if type(_G[cT])=="boolean"then if _G[cT]==true then system.print(cT.." true")else system.print(cT.." false")end elseif _G[cT]==nil then system.print(cT.." nil")else system.print(cT.." ".._G[cT])end end;return end;i=string.find(p_," ")local q5=string.sub(p_,0,i-1)local q6=string.sub(p_,i+1)for cS,cT in pairs(cc())do if cT==q5 then a2="Variable "..q5 .." changed to "..q6;local q7=type(_G[cT])if q7=="number"then q6=z(q6)if cT=="AtmoSpeedLimit"then b7=q6 end elseif q7=="boolean"then if string.lower(q6)=="true"then q6=true else q6=false end end;_G[cT]=q6;return end end;a2="No such global variable: "..q5 elseif pZ=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then aW.ClearCurrentPosition()else a2="Select a custom wp to delete first in IPH"end elseif pZ=="/copydatabank"then if dbHud_2 then cO(true)else a2="Spare Databank required to copy databank"end elseif pZ=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dm)if bP[1]and not aq and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dm)if bP[1]and CollisionSystem then if#bL>650 then dm=tostring(dm)bL[dm]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
