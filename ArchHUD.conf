name: ArchHud - Archaegeo v1.413 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.413;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local vec3=vec3;local p=utils.clamp;local q=a.axisCommandManager;local r=system.destroyWidgetPanel;local s=system.updateData;local t=system.addDataToWidget;local u=system.lockView;local v=system.isViewLocked;local w=math.sqrt;local x=tonumber;local core=core;local function y(z,A)local B=10^(A or 0)return d(z*B+0.5)/B end;local C=o()local D=o()local E=16;local F=13;local G=SafeR;local H=SafeB;local I=SafeG;local J=0;local K=0;local L=false;local M=0;local N=false;local O=false;local P=55;local Q=false;local R=false;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=false;local a0=false;local a1="empty"local a2=5;local a3=5;local a4=a2;local a5=a3;local a6=false;local a7,a8=0;local a9,aa=0;local ab=nil;local ac=0;local ad=0;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=false;local al=false;local am=false;local an=-1;local ao=""local ap=j()>0;local aq=j()local ar=core.getAltitude()local as=core.getElementIdList()local at=o()local au=core.getConstructMass()local av=false;local aw=nil;local ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]local ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]local az={}local aA=0;local aB=0;local aC=""local aD=true;local aE={}local aF=ResolutionX;local aG=ResolutionY;local aH={}local aI={}local aJ={}local aK=0;local aL=false;local aM=nil;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=o()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=""local bJ=nil;local bK={}local bL=unit.getClosestPlanetInfluence()>0 or ar>0 and ar<200000;local bM=false;local bN=nil;local function bO(bP)local bQ,bR,bS=aR:getPlanetarySystem(0):castIntersections(bv,bP,function(bT)if bT.noAtmosphericDensityAltitude>0 then return bT.radius+bT.noAtmosphericDensityAltitude else return bT.radius+bT.surfaceMaxAltitude*1.5 end end)local bU=bR;if bS~=nil and bR~=nil then bU=math.min(bS,bR)end;if bU~=nil then return bQ,bU else return nil,nil end end;local function bV(bW,bX,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..bW.."|"..bX.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..bW.."|"..bX.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..bW.."|"..bX.."|"..soundVolume)end end;local function bY(bZ,b_)for i=1,#b_ do bZ[#bZ+1]=b_[i]end;return bZ end;local function c0(c1)local c2={}local c3={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","Cockpit","voices","alerts","CollisionSystem"}local c4={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c5={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local c6={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c1 then bY(c2,c3)bY(c2,c4)bY(c2,c5)bY(c2,c6)return c2 elseif c1=="boolean"then return c3 elseif c1=="handling"then return c4 elseif c1=="hud"then return c5 elseif c1=="physics"then return c6 end end;local function c7(c8,c9,ca,cb,cc)if cb==nil then cb=""end;if cc==nil then cc=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cb,c8,c9,cc,ca)end;local function cd(ce,cf)if q:getAxisCommandType(0)~=axisCommandType.byThrottle and not cf then a.control.cancelCurrentControlMasterMode()end;q:setThrottleCommand(axisCommandId.longitudinal,ce)J=p(y(ce*100,0)/100,-1,1)end;local function cg(ce,cf)if q:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cf then a.control.cancelCurrentControlMasterMode()end;q:setTargetSpeedCommand(axisCommandId.longitudinal,ce)bz=ce end;local function ch(ci,cj)if ci==0 then return c(cj)<1e-09 end;if cj==0 then return c(ci)<1e-09 end;return c(ci-cj)<math.max(c(ci),c(cj))*epsilon end;local function ck(ai,cl)local cm=ai>100000;if cl==nil then cl=1 end;if cm then return y(ai/1000/200,cl).."SU"elseif ai<1000 then return y(ai,cl).."M"else return y(ai/1000,cl).."KM"end end;local function cn()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;ae=0;if ap and an==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cg(d(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()q:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function co()bi=false;ba=nil;bb=nil;bm=0;if aq==0 then if IntoOrbit then bV("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bL then bV("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a1="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cp()if C-b5<1.5 then if planet.hasAtmosphere then if aq>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;bV("11","EP")else if bL then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then co()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=C end;if bL and aq==0 then bg=ar;bf=true;bc=true;co()if IntoOrbit then b5=C else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Z=false;b0=true;LockPitch=nil;bi=false;if an~=-1 and bs<20 then bV("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=ar+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;q:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then cn()end else bV("altOn","AH")AutoTakeoff=false;if b5>-1 then if bL then HoldAltitude=ar end end;if VertTakeOff then cn()end end;if al then HoldAltitude=100000 end else bV("altOff","AH")if IntoOrbit then co()end;if VertTakeOff then cn()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cq()local function cr(SpaceTarget)bM=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cp()end end;VectorStatus="Proceeding to Waypoint"end;if C-b6<1.5 and aq>0 then if not bl then a1="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if aq>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bV("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=C end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not al and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<au then a1="WARNING: Heavy Loads may affect autopilot performance."ah=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ab,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bV("apSpc","AP")if aq~=0 then al=true;cp()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if aq>0 then if not VectorToTarget then bV("vtt","AP")cr(SpaceTarget)end else bV("apOn","AP")if not(ab.name==planet.name and bL)then bi=false;Autopilot=true elseif not ap then if IntoOrbit then co()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then co()end end end else bV("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if aq~=0 then al=true;cp()else Autopilot=true end end elseif aq==0 then if CustomTarget==nil and(ab.name==planet.name and bL)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;co()else bV("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Z=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;O=false;LockPitch=nil;WaypointSet=false end else bV("apP","AP")al=true;cp()end else bV("apOff","AP")al=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;O=false;AutoTakeoff=false;AltitudeHold=false;HoldAltitude=ar;TargetSet=false;Reentry=false;if IntoOrbit then co()end end end;local function cs()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then bV("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bJ=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cn()end;if IntoOrbit then co()end;b0=autoRollPreference;ak=false;am=false;ae=0 else bV("bkOff","B",1)end end;local function ct()if Reentry then a1="Re-Entry cancelled"bV("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a1="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not Q then Reentry=true;if q:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a1="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;bV("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local ca=ck(HoldAltitude)a1="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..ca;bV("glide","RE")cg(d(b7))end;AutoTakeoff=false end;local function cu()if antigrav and not ExternalAGG then if by then bV("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ar end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bV("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cv(cw)local cx=0;local cy=0;local cz=0;if cw<60 then cw=d(cw)elseif cw<3600 then cx=d(cw/60)cw=d(cw%60)elseif cw<86400 then cy=d(cw/3600)cx=d(cw%3600/60)else cz=d(cw/86400)cy=d(cw%86400/3600)end;if cz>0 then return cz.."d "..cy.."h "elseif cy>0 then return cy.."h "..cx.."m "elseif cx>0 then return cx.."m "..cw.."s"elseif cw>0 then return cw.."s"else return"0s"end end;local function cA(cB)local function cC(cD)for cE,cF in pairs(cD)do dbHud_1.setStringValue(cF,g(_G[cF]))if cB and dbHud_2 then dbHud_2.setStringValue(cF,g(_G[cF]))end end end;if dbHud_1 then cC(b)cC(c0())system.print("Saved Variables to Datacore")if cB and dbHud_2 then a1="Databank copied.  Remove copy when ready."end end end;local function cG()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function cH()local function cI(cJ)return type(cJ)=='number'end;local function cK(cJ)return type(x(cJ))=='number'end;local function cL(cM)return type(cM)=='table'end;local function cN(cO)return type(cO)=='string'end;local function cP(cF)return cL(cF)and cI(cF.x and cF.y and cF.z)end;local function cQ(cR)return cL(cR)and cI(cR.latitude and cR.longitude and cR.altitude and cR.bodyId and cR.systemId)end;local cS=math.pi/180;local cT=180/math.pi;local epsilon=1e-10;local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU='::pos{'..z..','..z..','..z..','..z..','..z..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function cV(cJ)local cW=string.gsub(string.reverse(e('%.4f',cJ)),'^0*%.?','')return cW==''and'0'or string.reverse(cW)end;local function cX(cY)if cP(cY)then return e('{x=%.3f,y=%.3f,z=%.3f}',cY.x,cY.y,cY.z)end;if cL(cY)and not getmetatable(cY)then local cZ={}local c_=next(cY)if type(c_)=='nil'or c_==1 then cZ=cY else for cE,cF in pairs(cY)do local ce=cX(cF)if type(cE)=='number'then table.insert(cZ,e('[%s]=%s',cE,ce))else table.insert(cZ,e('%s=%s',cE,ce))end end end;return e('{%s}',table.concat(cZ,','))end;if cN(cY)then return e("'%s'",cY:gsub("'",[[\']]))end;return tostring(cY)end;local d0={}d0.__index=d0;d0.__tostring=function(cY,d1)local d2={}for cE in pairs(cY)do table.insert(d2,cE)end;table.sort(d2)local cZ={}for _,cE in ipairs(d2)do local ce=cX(cY[cE])if type(cE)=='number'then table.insert(cZ,e('[%s]=%s',cE,ce))else table.insert(cZ,e('%s=%s',cE,ce))end end;if d1 then return e('%s%s',d1,table.concat(cZ,',\n'..d1))end;return e('{%s}',table.concat(cZ,','))end;d0.__eq=function(d3,d4)return d3.planetarySystemId==d4.planetarySystemId and d3.bodyId==d4.bodyId and ch(d3.radius,d4.radius)and ch(d3.center.x,d4.center.x)and ch(d3.center.y,d4.center.y)and ch(d3.center.z,d4.center.z)and ch(d3.GM,d4.GM)end;local function d5(d6,d7,d8,d9,da)assert(cK(d6),'Argument 1 (planetarySystemId) must be a number:'..type(d6))assert(cK(d7),'Argument 2 (bodyId) must be a number:'..type(d7))assert(cK(d8),'Argument 3 (radius) must be a number:'..type(d8))assert(cL(d9),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(d9))assert(cK(da),'Argument 5 (GM) must be a number:'..type(da))return setmetatable({planetarySystemId=x(d6),bodyId=x(d7),radius=x(d8),center=vec3(d9),GM=x(da)},d0)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(db)return e('::pos{%d,%d,%s,%s,%s}',db.systemId,db.bodyId,cV(db.latitude*cT),cV(db.longitude*cT),cV(db.altitude))end;MapPosition.__eq=function(d3,d4)return d3.bodyId==d4.bodyId and d3.systemId==d4.systemId and ch(d3.latitude,d4.latitude)and ch(d3.altitude,d4.altitude)and(ch(d3.longitude,d4.longitude)or ch(d3.latitude,math.pi/2)or ch(d3.latitude,-math.pi/2))end;local function dc(dd,d7,de,df,dg)local d6=dd;if cN(dd)and not df and not dg and not d7 and not de then d6,d7,de,df,dg=n(dd,cU)assert(d6,'Argument 1 (position string) is malformed.')else assert(cK(d6),'Argument 1 (systemId) must be a number:'..type(d6))assert(cK(d7),'Argument 2 (bodyId) must be a number:'..type(d7))assert(cK(de),'Argument 3 (latitude) must be in degrees:'..type(de))assert(cK(df),'Argument 4 (longitude) must be in degrees:'..type(df))assert(cK(dg),'Argument 5 (altitude) must be in meters:'..type(dg))end;d6=x(d6)d7=x(d7)de=x(de)df=x(df)dg=x(dg)if d7==0 then return setmetatable({latitude=de,longitude=df,altitude=dg,bodyId=d7,systemId=d6},MapPosition)end;return setmetatable({latitude=cS*p(de,-90,90),longitude=cS*(df%360),altitude=dg,bodyId=d7,systemId=d6},MapPosition)end;local dh={}dh.__index=dh;dh.__tostring=function(cY,d1)local di=d1 and d1 ..'  'local dj={}local d2={}for cE in pairs(cY)do table.insert(d2,cE)end;table.sort(d2)for _,dk in ipairs(d2)do bdy=cY[dk]local dl=d0.__tostring(bdy,di)if d1 then table.insert(dj,e('[%s]={\n%s\n%s}',dk,dl,d1))else table.insert(dj,e('  [%s]=%s',dk,dl))end end;if d1 then return e('\n%s%s%s',d1,table.concat(dj,',\n'..d1),d1)end;return e('{\n%s\n}',table.concat(dj,',\n'))end;local function dm(dn)local aM={}local pid;for _,cF in pairs(dn)do local dp=cF.planetarySystemId;if type(dp)~='number'then error('Invalid planetary system ID: '..tostring(dp))elseif pid and dp~=pid then error('Mistringmatch planetary system IDs: '..dp..' and '..pid)end;local dq=cF.bodyId;if type(dq)~='number'then error('Invalid body ID: '..tostring(dq))elseif aM[dq]then error('Duplicate body ID: '..tostring(dq))end;setmetatable(cF.center,getmetatable(vec3.unit_x))aM[dq]=setmetatable(cF,d0)pid=dp end;return setmetatable(aM,dh)end;aQ={}local function dr(dn)return setmetatable({galaxyAtlas=dn or{}},aQ)end;aQ.__index=function(cM,i)if type(i)=='number'then local system=cM.galaxyAtlas[i]return dm(system)end;return rawget(aQ,i)end;aQ.__pairs=function(cY)return function(cM,cE)local ds,nv=next(cM,cE)return ds,nv and dm(nv)end,cY.galaxyAtlas,nil end;aQ.__tostring=function(cY)local dt={}for _,du in pairs(cY or{})do local dv=du:getPlanetarySystemId()local dw=dh.__tostring(du,'    ')table.insert(dt,e('  [%s]={%s\n  }',dv,dw))end;return e('{\n%s\n}\n',table.concat(dt,',\n'))end;aQ.BodyParameters=d5;aQ.MapPosition=dc;aQ.PlanetarySystem=dm;function aQ.createBodyParameters(dx,d7,dy,dz,dA,dB,dC)assert(cK(dx),'Argument 1 (planetarySystemId) must be a number:'..type(dx))assert(cK(d7),'Argument 2 (bodyId) must be a number:'..type(d7))assert(cK(dy),'Argument 3 (surfaceArea) must be a number:'..type(dy))assert(cL(dz),'Argument 4 (aPosition) must be an array or vec3:'..type(dz))assert(cL(dA),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dA))assert(cK(dB),'Argument 6 (altitude) must be in meters:'..type(dB))assert(cK(dC),'Argument 7 (gravityAtPosition) must be number:'..type(dC))local d8=w(dy/4/math.pi)local ai=d8+dB;local dD=vec3(dz)+ai*vec3(dA)local da=dC*ai*ai;return d5(dx,d7,d8,dD,da)end;aQ.isMapPosition=cQ;function aQ:getPlanetarySystem(dd)if i==nil then i=0 end;if nv==nil then nv=0 end;local dx=dd;if cQ(dd)then dx=dd.systemId end;if type(dx)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dh then system=dm(system)end;return system end end end;function dh:sizeCalculator(bT)return 1.05*bT.radius end;function dh:castIntersections(dE,dF,dG,dH,dI,dJ)local dK={}local dL=dI or self;for _,bT in pairs(dL)do table.insert(dK,bT)end;if not dJ then table.sort(dK,function(dM,dN)return(dM.center-dE):len()<(dN.center-dE):len()end)end;local dO=dF:normalize()for _,bT in ipairs(dK)do local dP=bT.center-dE;local d8=self:sizeCalculator(bT)local dQ=dP:dot(dO)local dR=dQ^2-(dP:len2()-d8^2)if dR>=0 then local dS=w(dR)local bR=dQ+dS;local bS=dQ-dS;if bS>0 then return bT,bR,bS elseif bR>0 then return bT,bR,nil end end end;return nil,nil,nil end;function dh:closestBody(dT)assert(type(dT)=='table','Invalid coordinates.')local dU,bT;local dV=vec3(dT)for _,dW in pairs(self)do local dX=(dW.center-dV):len2()if(not bT or dX<dU)and dW.name~="Space"then bT=dW;dU=dX end end;return bT end;function dh:convertToBodyIdAndWorldCoordinates(dd)local dY=dd;if cN(dd)then dY=dc(dd)end;if dY.bodyId==0 then return 0,vec3(dY.latitude,dY.longitude,dY.altitude)end;local dW=self:getBodyParameters(dY)if dW then return dY.bodyId,dW:convertToWorldCoordinates(dY)end end;function dh:getBodyParameters(dd)local d7=dd;if cQ(dd)then d7=dd.bodyId end;assert(cK(d7),'Argument 1 (bodyId) must be a number:'..type(d7))return self[d7]end;function dh:getPlanetarySystemId()local _,cF=next(self)return cF and cF.planetarySystemId end;function d0:convertToMapPosition(d9)assert(cL(d9),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(d9))local dZ=vec3(d9)if self.bodyId==0 then return setmetatable({latitude=dZ.x,longitude=dZ.y,altitude=dZ.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local d_=dZ-self.center;local ai=d_:len()local dg=ai-self.radius;local de=0;local df=0;if not ch(ai,0)then local e0=m(d_.y,d_.x)df=e0>=0 and e0 or 2*math.pi+e0;de=math.pi/2-math.acos(d_.z/ai)end;return setmetatable({latitude=de,longitude=df,altitude=dg,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function d0:convertToWorldCoordinates(dd)local dY=cN(dd)and dc(dd)or dd;if dY.bodyId==0 then return vec3(dY.latitude,dY.longitude,dY.altitude)end;assert(cQ(dY),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dY.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dY.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e1=math.cos(dY.latitude)return self.center+(self.radius+dY.altitude)*vec3(e1*math.cos(dY.longitude),e1*math.sin(dY.longitude),math.sin(dY.latitude))end;function d0:getAltitude(d9)return(vec3(d9)-self.center):len()-self.radius end;function d0:getDistance(d9)return(vec3(d9)-self.center):len()end;function d0:getGravity(d9)local e2=self.center-vec3(d9)local e3=e2:len2()return self.GM/e3*e2/w(e3)end;return setmetatable(aQ,{__call=function(_,...)return dr(...)end})end;local function e4()local aS={}local e5=30000000/3600;local e6=e5*e5;local e7=100;function aS.computeAccelerationTime(e8,e9,ea)local eb=e5*math.asin(e8/e5)return(e5*math.asin(ea/e5)-eb)/e9 end;function aS.computeDistanceAndTime(e8,ea,ec,ed,ee,ef)ee=ee or 0;ef=ef or 0;local eg=e8<=ea;local eh=ed*(eg and 1 or-1)/ec;local ei=-ef/ec;local ej=eh+ei;if eg and ej<=0 or not eg and ej>=0 then return-1,-1 end;local ek,el=0,0;if eh~=0 and ee>0 then local eb=math.asin(e8/e5)local em=math.pi*(eh/2+ei)local en=eh*ee;local eo=e5*math.pi;local cF=function(cM)local ep=(em*cM-en*math.sin(math.pi*cM/2/ee)+eo*eb)/eo;local eq=math.tan(ep)return e5*eq/w(eq*eq+1)end;local er=eg and function(cO)return cO>=ea end or function(cO)return cO<=ea end;el=2*ee;if er(cF(el))then local es=0;while c(el-es)>0.5 do local cM=(el+es)/2;if er(cF(cM))then el=cM else es=cM end end end;local et=e8;local eu=el/e7;for ev=1,e7 do local ew=cF(ev*eu)ek=ek+(ew+et)*eu/2;et=ew end;if el<2*ee then return ek,el end;e8=et end;local eb=e5*math.asin(e8/e5)local C=(e5*math.asin(ea/e5)-eb)/ej;local ex=e6*math.cos(eb/e5)/ej;local ai=ex-e6*math.cos((ej*C+eb)/e5)/ej;return ai+ek,C+el end;function aS.computeTravelTime(e8,e9,ai)if ai==0 then return 0 end;if e9>0 then local eb=e5*math.asin(e8/e5)local ex=e6*math.cos(eb/e5)/e9;return(e5*math.acos(e9*(ex-ai)/e6)-eb)/e9 end;if e8==0 then return-1 end;assert(e8>0,'Acceleration and initial speed are both zero.')return ai/e8 end;return aS end;local function ey()local vec3=require('cpml.vec3')local cH=cH()local function cN(cO)return type(cO)=='string'end;local function cL(cM)return type(cM)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dg)assert(self.body)local ai=dg+self.body.radius;if not ch(ai,0)then local orbit=w(self.body.GM/ai)return w(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dd,ez)assert(self.body)assert(cL(dd)or cN(dd))assert(cL(ez))local eA=(cN(dd)or cH.isMapPosition(dd))and self.body:convertToWorldCoordinates(dd)or vec3(dd)local cF=vec3(ez)local eB=eA-self.body.center;local eC=cF:len2()local eD=eB:len()local eE=self.body.GM;local eF=((eC-eE/eD)*eB-eB:dot(cF)*cF)/eE;local ci=eE/(2*eE/eD-eC)local eG=eF:len()local dO=eF:normalize()local eH=ci*(1-eG)local eI=ci*(1+eG)local eJ=eH*dO+self.body.center;local eK=eG<=1 and-eI*dO+self.body.center or nil;local eL=w(ci*eE*(1-eG*eG))local eM=eK and 2*math.pi*w(ci^3/eE)local eN=math.acos(eF:dot(eB)/(eG*eD))if eB:dot(cF)<0 then eN=-(eN-2*math.pi)end;local eO=math.acos((math.cos(eN)+eG)/(1+eG*math.cos(eN)))local eP=eO;if eP<0 then eP=eP+2*math.pi end;local eQ=eP-eG*math.sin(eP)local eR=0;local eS=0;local eT=0;if eM~=nil then eR=eQ/(2*math.pi/eM)eS=eM-eR;eT=eS+eM/2;if eN-math.pi>0 then eS=eR;eT=eS+eM/2 end;if eT>eM then eT=eT-eM end end;return{periapsis={position=eJ,speed=eL/eH,circularOrbitSpeed=w(eE/eH),altitude=eH-self.body.radius},apoapsis=eK and{position=eK,speed=eL/eI,circularOrbitSpeed=w(eE/eI),altitude=eI-self.body.radius},currentVelocity=cF,currentPosition=eA,eccentricity=eG,period=eM,eccentricAnomaly=eO,meanAnomaly=eQ,timeToPeriapsis=eS,timeToApoapsis=eT}end;local function eU(eV)local dW=cH.BodyParameters(eV.planetarySystemId,eV.bodyId,eV.radius,eV.center,eV.GM)return setmetatable({body=dW},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eU(...)end})end;local function eW()local eX={}local eY={}local eZ={XS=13,S=27,M=55,L=110,XL=221}local e_={}local f0;local f1;local f2;local f3;local f4;local function f5()local function f6(f7,f8,f9,fa,fb,fc,fd,fe)f8,fa,fc,fe=vec3(f8),vec3(fa),vec3(fc),vec3(fe)local ff,fg,fh=f7*f7,f9*f9,fb*fb;local eC=fa-f8;local fi=eC:normalize()local fj=eC:len()local fk=fc-f8;local fl=(fk-fk:project_on(fi)):normalize()local fm,fn=fk:dot(fi),fk:dot(fl)local fo=fm*fm+fn*fn;local fp=fi:cross(fl)local c8=(ff-fg+fj*fj)/(2*fj)local c9=(ff-fh+fo-2*fm*c8)/(2*fn)local cR=ff-c8^2-c9^2;local fq=w(cR)local fr=f8+fi*c8+fl*c9+fp*fq;local fs=f8+fi*c8+fl*c9-fp*fq;if c((fe-fr):len()-fd)<c((fe-fs):len()-fd)then return fr else return fs end end;local function ft()local function fu()local fv=core.getConstructWorldOrientationRight()local eC=core.getConstructWorldOrientationForward()local fk=core.getConstructWorldOrientationUp()local fw=library.systemResolution3(fv,eC,fk,{1,0,0})local fx=library.systemResolution3(fv,eC,fk,{0,1,0})local fy=library.systemResolution3(fv,eC,fk,{0,0,1})return function(fz)return library.systemResolution3(fw,fx,fy,fz)end end;local fA=fu()local fB=core.getConstructWorldPos()local eA=core.getElementPositionById(1)local fC={eA[1]-E,eA[2]-E,eA[3]-E}local fD=fA(fC)local fE={fB[1]-fD[1],fB[2]-fD[2],fB[3]-fD[3]}return fE end;local function fF(fG,eD,fH)local fI=fG.pts;local fJ=#fI;local fK=fG.ref;if fJ>3 then local fL,fM,fN,fO=fI[fJ],fI[fJ-1],fI[fJ-2],fI[fJ-3]fG.ref=fH;local eA=f6(fL[1],fL[2],fM[1],fM[2],fN[1],fN[2],fO[1],fO[2])local c8,c9,fq=eA.x,eA.y,eA.z;if c8==c8 and c9==c9 and fq==fq then c8=c8+fK[1]c9=c9+fK[2]fq=fq+fK[3]local fP=vec3(c8,c9,fq)if not fG.lastPos then fG.center=fP elseif(fG.lastPos-fP):len()<2 then fG.center=fP;fG.skipCalc=true end;fG.lastPos=fP end;fG.pts={}else local fQ={fH[1]-fK[1],fH[2]-fK[2],fH[3]-fK[3]}fI[fJ+1]={eD,fQ}end end;if radar_1 then f0=#radar_1.getEntries()local fR=radar_1.getData()local fS=fR:gmatch('{"constructId[^}]*}[^}]*}')if f0>0 then local fH=ft()local fT,fU=0,0;f4,f3=0,0;for cF in fS do local dp,ai,fV=cF:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local fW=eZ[fV]ai=x(ai)if radar_1.hasMatchingTransponder(dp)==1 then table.insert(eY,dp)end;local fX=radar_1.getConstructType(dp)if CollisionSystem then if fW>27 or fX=="static"or fX=="space"then f4=f4+1;local fY=radar_1.getConstructName(dp)local fG=bK[dp]if fG==nil then fW=fW+F;bK[dp]={pts={},ref=fH,name=fY,i=0,radius=fW,skipCalc=false}fG=bK[dp]end;if not fG.skipCalc then fF(fG,ai,fH)fU=fU+1 end;if fG.center then table.insert(e_,fG)end end;fT=fT+1;if bL and fT>700 or fU>70 or(not bL and fT>300 or fU>30)then coroutine.yield()fT,fU=0,0 end end end;f3=#e_;if f3>0 and bs>20 then local bT,fZ,f_,g0;local g1=0;local g2=aR:getPlanetarySystem(0)g0=br:normalize()while g1<f3 do coroutine.yield()local g3={table.unpack(e_,g1,math.min(g1+75,f3))}bT,fZ,f_=g2:castIntersections(bv,g0,nil,nil,g3,true)if bT and f_ then bN={bT,fZ,f_}break end;g1=g1+75 end;if not bT then bN=nil end else bN=nil end;e_={}f1=fR:find('identifiedConstructs":%[%]')else f2=fR:find('worksInEnvironment":false')end end end;function eX.UpdateRadar()local g4=coroutine.status(UpdateRadarCoroutine)if g4=="suspended"then local ce,g5=coroutine.resume(UpdateRadarCoroutine)if g5 then system.print("ERROR UPDATE RADAR: "..g5)end elseif g4=="dead"then UpdateRadarCoroutine=coroutine.create(f5)local ce,g5=coroutine.resume(UpdateRadarCoroutine)end end;function eX.GetRadarHud()local g6=eY;eY={}return f1,f2,f0,f3,f4,g6 end;UpdateRadarCoroutine=coroutine.create(f5)return eX end;local function g7()local g8=0;local g9=9.80665;local ga=vec3({13771471,7435803,-128971})local gb=18000000;local gc=500000;local gd,ge=math.huge;local gf;local function gg(gh)gd=vec3(gh):dist(ga)if gd<gb then return true,c(gd-gb)end;ge=vec3(gh):dist(vec3(planet.center))if ge<gc then gf=true else gf=false end;if c(ge-gc)<c(gd-gb)then return gf,c(ge-gc)else return gf,c(gd-gb)end end;local function gi(cF)if aF==1920 then return cF else return y(aF*cF/1920,0)end end;local function gj(cF)if aG==1080 then return cF else return y(aG*cF/1080,0)end end;local function gk()return v()==0 and userControlScheme~="keyboard"and l()==0 end;local function gl()local gm="TRAVEL"if not bA then gm="CRUISE"end;if Autopilot then gm="AUTOPILOT"end;return gm end;local gn=""local go=""local gp=""local gq=1;local gr=2;local gs=3;local gt=4;local gu=5;local gv=6;local gw=""local gx=0;local gy=d(1/apTickRate)*2*hudTickRate;local gz={}local gA={}local gB={}local gC={}local gD={}local gE={}local function gF(c8,gG,gH,gI,gJ,gK)local gL=fuelY;local gM=fuelY+5;if not BarFuelDisplay then gM=gM+5 end;if l()==1 and not RemoteHud then gL=gL-50;gM=gM-50 end;if gH=="ATMO"then gw="atmofueltank"elseif gH=="SPACE"then gw="spacefueltank"else gw="rocketfueltank"end;gx=_G[gw.."_size"]if#gI>0 then for i=1,#gI do local fY=string.sub(gI[i][gr],1,12)local gN=0;for gO=1,gx do if gI[i][gr]==f(unit[gw.."_"..gO].getData()).name then gN=gO;break end end;local gP=o()if gJ[i]==nil or gK[i]==nil or gP-gI[i][gv]>gy then local gQ;local gR=0;if gN~=0 then gK[i]=f(unit[gw.."_"..gN].getData()).percentage;gJ[i]=f(unit[gw.."_"..gN].getData()).timeLeft;if gJ[i]=="n/a"then gJ[i]=0 end else gR=k(gI[i][gq])-gI[i][gt]gK[i]=d(0.5+gR*100/gI[i][gs])gQ=gI[i][gu]if gQ<=gR then gJ[i]=0 else gJ[i]=d(0.5+gR/((gQ-gR)/(gP-gI[i][gv])))end;gI[i][gu]=gR;gI[i][gv]=gP end end;if fY==gG then fY=e("%s %d",gH,i)end;if gN==0 then fY=fY.." *"end;local gS;if gJ[i]==0 then gS=""else gS=cv(gJ[i])end;if gK[i]~=nil then local gT=d(gK[i]*2.55)local gU=e("rgb(%d,%d,%d)",255-gT,gT,0)local cb=""if gS~=""and gJ[i]<120 or gK[i]<5 then cb="red "end;if BarFuelDisplay then go=go..e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],c8,gM,gU,gK[i],c8,gM,c8+2,gM+10,gK[i],gS)go=go..c7(c8,gL,fY,cb.."txtstart pdim txtfuel")gL=gL-30;gM=gM-30 else go=go..c7(c8,gL,fY,cb.."pdim txtfuel")go=go..c7(c8,gM,e("%d%% %s",gK[i],gS),"pdim txtfuel","fill:"..gU)gL=gL+30;gM=gM+30 end end end end end;local function gV(gW,dg)if dg<200000 and not ap or dg and ap then local gX=0;if c(bu)>1 then gX=45*math.log(c(bu),10)if bu<0 then gX=-gX end end;gW[#gW+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bu),d(gX))end;return gW end;local function gY(gZ)local g_=-bt;gZ=gZ-gZ:project_on(g_)local h0=vec3(0,0,1)h0=h0-h0:project_on(g_)local h1=h0:cross(g_)local gX=h0:angle_between(gZ)*constants.rad2deg;if gZ:dot(h1)<0 then gX=360-gX end;return gX end;local function h2(gW,centerX,centerY,h3,h4,bL)local h5=circleRad;local h6=20;local h7=d(h3)if bL then for i=-45,45,5 do local h8=i;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],h8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;gW[#gW+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+h5+h6-len,centerX,centerY+h5+h6)end;gW[#gW+1]=c7(centerX,centerY+h5+h6-35,h4,"pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY+h5+h6-25,h7 .." deg","pdim txt txtmid")gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+h5+h6-20,centerX+5,centerY+h5+h6-20,centerX,centerY+h5+h6-15)gW[#gW+1]="</g>"end;local h9=h7;if bL then h9=gY(bo)end;local ha=20;local hb=d(h9)local hc=0;local hd=centerY+h5+h6+20;local he=centerX;if h4~="YAW"then hd=gj(130)he=gi(960)end;local hf=[[<path class="txttick line" d="]]local hg=d(hb-(ha+10)-hb%5+0.5)for i=hg+60,hg,-5 do local c8=he-(-i*5+h9*5)if i%10==0 then hc=10;local z=i;if z==360 then z=0 elseif z>360 then z=z-360 elseif z<0 then z=z+360 end;gW[#gW+1]=c7(c8+5,hd-12,z)elseif i%5==0 then hc=5 end;if hc==10 then hf=e([[%s M %f %f v %d]],hf,c8,hd-5,hc)else hf=e([[%s M %f %f v %d]],hf,c8,hd-2.5,hc)end end;gW[#gW+1]=hf..[["/>]]gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],he-5,hd+10,he+5,hd+10,he,hd+5)if bL then h4="HDG"end;gW[#gW+1]=c7(he,hd+25,hb.."deg","pdim txt txtmid","")gW[#gW+1]=c7(he,hd+35,h4,"pdim txt txtmid","")end;local function hh(gW,hi,h3,centerX,centerY,bL,hj,ew)local h5=circleRad;local hk=d(h5*3/5)if h5>0 then local hl=d(hi)local len=0;local hf=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*h3,centerX,centerY)if not ap then hf=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;gW[#gW+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],h5-1,centerX,centerY)gW[#gW+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(hl-30-hl%5+0.5),d(hl+30+hl%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c9=centerY+-i*5+hi*5;if len==30 then hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,c9,len)if ap then gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX-hk+10,c9,i)gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX+hk-10,c9,i)if i==0 or i==180 or i==-180 then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+20,c9,hk*2-40)end else gW[#gW+1]=c7(centerX-hk+10,c9,i,"pdim txt txtmid")gW[#gW+1]=c7(centerX+hk-10,c9,i,"pdim txt txtmid")end;hf=e([[%s M %d %f h %d]],hf,centerX+hk,c9,len)else hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,c9,len)hf=e([[%s M %d %f h %d]],hf,centerX+hk,c9,len)end end;gW[#gW+1]=hf..[["/>]]local hm="PITCH"if not bL then hm="REL PITCH"end;if hi>90 and not ap then hi=90-(hi-90)elseif hi<-90 and not ap then hi=-90-(hi+90)end;if h5>200 then if ap then if ew>P then gW[#gW+1]=c7(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY+20,hj,"pdim txt txtmid")end;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)else gW[#gW+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hk+25,centerY-5,centerX-hk+20,centerY,centerX-hk+25,centerY+5,centerX-hk+50,centerY+4,hl)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hk-25,centerY-5,centerX+hk-20,centerY,centerX+hk-25,centerY+5,centerX+hk-30,centerY+4,hl)gW[#gW+1]="</g>"end;local hn=d(h5/3)gW[#gW+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hn,centerY,h5-hn)if not ap and bL then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+10,centerY,hk*2-20)end;gW[#gW+1]="</g>"if h5<200 then if ap and ew>P then gW[#gW+1]=c7(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY-h5+10,hl,"pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY+20,hj,"pdim txt txtmid")else gW[#gW+1]=c7(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=c7(centerX,centerY-h5+15,hl,"pdim txt txtmid")end end end end;local function ho(gW,dg,bL)local hp=altMeterX;local hq=altMeterY;local hr=78;local hs=19;local ht=an;if an~=-1 then gW[#gW+1]=c7(hp+hr,hq+hs+20,e("AGL: %.1fm",an),"pdim altsm txtend")end;if bL and(dg<200000 and not ap or dg and ap)then table.insert(gW,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hp-1,hq-4,hr+2,hs+6,hp+1,hq-1,hr-4,hs))local fJ=0;local hu=1;local hv=0;local hw=dg<0;local hx=dg<planet.surfaceMaxAltitude;local hy=9;if hw then hy=0 end;local dg=c(dg)while fJ<6 do local hz=11;local hA=16;local hB=9;local hC=14;local cb="altsm"if fJ>2 then hA=hA+3;hz=hz+2;hC=hC+2;hB=hB-6;cb="altbig"end;if hw then cb=cb.." red"elseif hx then cb=cb.." orange"end;local hD=dg/hu%10;local hE=d(hD)local hF=d((hE+1)%10)local hG=hv;if fJ==0 then hG=hD-hE;if hw then hG=1-hG end end;if hw and(fJ==0 or hv~=0)then local hH=hF;hF=hE;hE=hH end;local hI=hA*(hG-1)local hJ=hI+hA;local c8=hp+hB+(6-fJ)*hz;local c9=hq+hC;gW[#gW+1]=c7(c8,c9+hI,hF,cb)gW[#gW+1]=c7(c8,c9+hJ,hE,cb)fJ=fJ+1;hu=hu*10;if hE==hy then hv=hG else hv=0 end end;table.insert(gW,[[</g></g>]])end end;local function hK(ez)local hL=-math.deg(m(ez.y,ez.z))+180;hL=hL-90;if hL<0 then hL=360+hL end;if hL>180 then hL=-180+hL-180 end;return-hL end;local function hM(ez)local h9=math.deg(m(ez.y,ez.x))-90;if h9<-180 then h9=360+h9 end;return h9 end;local function hN(gW,ez,ew,centerX,centerY)if ew>5 and not ap or ew>P then local h5=circleRad;local hO=20;local hP=20;local hQ=hK(ez)local hR=hM(ez)local hS=14;local hT=hS/2;local hU=-hR/hP*h5;local hV=hQ/hO*h5;local c8=centerX+hU;local c9=centerY+hV;local ai=w(hU^2+hV^2)local hW=[[<circle
                            cx="]]..c8 ..[["
                            cy="]]..c9 ..[["
                            r="]]..hT/hS..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c8 ..[["
                            cy="]]..c9 ..[["
                            r="]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c8-hS..[[,]]..c9 ..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c8+hT..[[,]]..c9 ..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c8 ..[[,]]..c9-hS..[[ v ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<h5 then gW[#gW+1]=hW else local gX=m(hV,hU)local hX=4;local hY=centerX+h5*math.cos(gX)local hZ=centerY+h5*math.sin(gX)gW[#gW+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',gX*180/math.pi,hY,hZ,hY-hX,hZ-hX/2,hX*2,hX,hY+hX,hZ-hX,hX,hX,-hX,hX)end;if not ap then local h_=vec3(ez)hQ=hK(-h_)hR=hM(-h_)hU=-hR/hP*h5;hV=hQ/hO*h5;c8=centerX+hU;c9=centerY+hV;ai=w(hU^2+hV^2)if ai<h5 then local i0=[[<circle
                                    cx="]]..c8 ..[["
                                    cy="]]..c9 ..[["
                                    r="]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c8 ..[[,]]..c9-hS..[[ v ]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c8 ..[[,]]..c9 ..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c8 ..[[,]]..c9 ..[[)" />
                                <path
                                    d="M ]]..c8-hT..[[,]]..c9 ..[[ h ]]..hS..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c8 ..[[,]]..c9 ..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c8 ..[[,]]..c9 ..[[)"/>]]gW[#gW+1]=i0 end end end end;local function i1(gW,gm,i2,i3)i2=d(i2+0.5)local gL=throtPosY+10;local gM=throtPosY+20;if l()==1 and not RemoteHud then gL=55;gM=65 end;local i4="CRUISE"local unit="km/h"local ce=i3;if gm=="TRAVEL"or gm=="AUTOPILOT"then i4="THROT"unit="%"ce=i2;local i5="dim"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],i5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;gW[#gW+1]=c7(throtPosX+10,gL,i4,"pbright txtstart")gW[#gW+1]=c7(throtPosX+10,gM,e("%.0f %s",ce,unit),"pbright txtstart")if ap and AtmoSpeedAssist and bA and L then i2=d(M*100+0.5)local i5="red"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],i5,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)gW[#gW+1]=c7(throtPosX+10,gL+40,"LIMIT","pbright txtstart")gW[#gW+1]=c7(throtPosX+10,gM+40,i2 .."%","pbright txtstart")end;if ap and AtmoSpeedAssist or Reentry then gW[#gW+1]=c7(throtPosX+10,gL-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not ap and Autopilot then gW[#gW+1]=c7(throtPosX+10,gL-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function i6(gW,i7)local i8=throtPosY-10;local i9=throtPosX+10;gW[#gW+1]=c7(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then i8=75 end;gW[#gW+1]=c7(i9,i8,d(i7).." km/h","pbright txtbig txtstart")end;local function ia(gW)gW[#gW+1]=c7(gi(1900),gj(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")gW[#gW+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then gW[#gW+1]=c7(gi(960),gj(550),"Warning: Invalid Control Scheme Detected","warnings")gW[#gW+1]=c7(gi(960),gj(600),"Keyboard Scheme must be selected","warnings")gW[#gW+1]=c7(gi(960),gj(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ib=gi(960)local ic=gj(860)local id=gj(880)local ie=gj(900)local ig=gj(960)local ih=gj(200)local ii=gj(250)local ij=gj(960)if l()==1 and not RemoteHud then ic=gj(135)id=gj(155)ie=gj(175)ih=gj(115)ii=gj(95)end;if BrakeIsOn then gW[#gW+1]=c7(ib,ic,"Brake Engaged","warnings")elseif K>0 then gW[#gW+1]=c7(ib,ic,"Auto-Brake Engaged","warnings","opacity:"..K)end;if ap and b2 and an==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then gW[#gW+1]=c7(ib,ih+50,"** STALL WARNING **","warnings")bV("stall","SW",2)end end;if bJ then gW[#gW+1]=c7(ib,ih+90,"Flight Assist in Progress","warnings")end;if aw then gW[#gW+1]=c7(ib,ij,"Gyro Enabled","warnings")end;if GearExtended then if R then gW[#gW+1]=c7(ib,id,"Gear Extended","warn")else gW[#gW+1]=c7(ib,id,"Landed (G: Takeoff)","warnings")end;local ik=ck(a:getTargetGroundAltitude())gW[#gW+1]=c7(ib,ie,"Hover Height: "..ik,"warn")end;if a6 then gW[#gW+1]=c7(ib,ig+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then if c(ar-antigrav.getBaseAltitude())<501 then gW[#gW+1]=c7(ib,ih+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else gW[#gW+1]=c7(ib,ih+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then gW[#gW+1]=c7(ib,ih+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then gW[#gW+1]=c7(ib,ih+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif Z then gW[#gW+1]=c7(ib,ih+20,"Follow Mode Engaged","warn")elseif Reentry or am then gW[#gW+1]=c7(ib,ih+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local ik=ck(HoldAltitude,2)if VertTakeOff then if by then ik=ck(antigrav.getBaseAltitude(),2).." AGG singularity height"end;gW[#gW+1]=c7(ib,ih,"VTO to "..ik,"warn")elseif AutoTakeoff and not IntoOrbit then if al then gW[#gW+1]=c7(ib,ih,"Takeoff to "..AutopilotTargetName,"warn")else gW[#gW+1]=c7(ib,ih,"Takeoff to "..ik,"warn")end;if BrakeIsOn and not VertTakeOff then gW[#gW+1]=c7(ib,ih+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else gW[#gW+1]=c7(ib,ih,"Altitude Hold: "..ik,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if aq>0.1 then gW[#gW+1]=c7(ib,ih+20,"Beginning ascent","warn")elseif aq<0.09 and aq>0.05 then gW[#gW+1]=c7(ib,ih+20,"Aligning trajectory","warn")elseif aq<0.05 then gW[#gW+1]=c7(ib,ih+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then gW[#gW+1]=c7(ib,ih,b9,"warn")end end;if BrakeLanding then if StrongBrakes then gW[#gW+1]=c7(ib,ih,"Brake-Landing","warnings")else gW[#gW+1]=c7(ib,ih,"Coast-Landing","warnings")end end;if ProgradeIsOn then gW[#gW+1]=c7(ib,ih,"Prograde Alignment","crit")end;if RetrogradeIsOn then gW[#gW+1]=c7(ib,ih,"Retrograde Alignment","crit")end;if bM then local type;if string.find(bM,"COLLISION")then type="warnings"else type="crit"end;gW[#gW+1]=c7(ib,ii+20,bM,type)elseif aq==0 then local bQ,bU=bO(br:normalize())if bU~=nil then local ik=ck(bU)local travelTime=aS.computeTravelTime(bs,0,bU)local il="Collision"if bQ.noAtmosphericDensityAltitude>0 then il="Atmosphere"end;gW[#gW+1]=c7(ib,ii+20,bQ.name.." "..il.." "..cv(travelTime).." In "..ik,"crit")end end;if VectorToTarget and not IntoOrbit then gW[#gW+1]=c7(ib,ih+35,VectorStatus,"warn")end;gW[#gW+1]="</g>"return gW end;local function im(ew)return d(y(ew*3.6,0)+0.5).." km/h"end;local function io(gW)local ip=OrbitMapX;local iq=OrbitMapY;local ir=OrbitMapSize;local is=4;local it=15;local c8=0;local c9=0;local iu,iv,iw,ix;local function iy(type)local iz,C,ew,iA;if type=="Periapsis"then iz=orbit.periapsis.altitude;C=orbit.timeToPeriapsis;ew=orbit.periapsis.speed;iA=35 else iz=orbit.apoapsis.altitude;C=orbit.timeToApoapsis;ew=orbit.apoapsis.speed;iA=-35 end;gW[#gW+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c8+iA,c9-5,ip+ir/2-iu+ix,c9-5)gW[#gW+1]=c7(c8,c9,type)c9=c9+it;local ik=ck(iz)gW[#gW+1]=c7(c8,c9,ik)c9=c9+it;gW[#gW+1]=c7(c8,c9,cv(C))c9=c9+it;gW[#gW+1]=c7(c8,c9,im(ew))end;if orbit~=nil and aq<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then iq=iq+is;c8=ip+ir+ip/2+is;c9=iq+ir/2+5+is;iu=ir/4;ix=0;gW[#gW+1]=[[<g class="pbright txtorb txtmid">]]gW[#gW+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ir+ip*2,ir+iq,is,is)if orbit.periapsis~=nil and orbit.apoapsis~=nil then iw=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(iu*2)iv=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/iw*(1-orbit.eccentricity)ix=iu-orbit.periapsis.altitude/iw-planet.radius/iw;local iB=""if orbit.periapsis.altitude<=0 then iB='redout'end;gW[#gW+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iB,ip+ir/2+ix+is,iq+ir/2+is,iu,iv)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ip+ir/2+is,iq+ir/2+is,planet.radius/iw)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then iy("Apoapsis")end;c9=iq+ir/2+5+is;c8=ip-ip/2+10+is;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then iy("Periapsis")end;gW[#gW+1]=c7(ip+ir/2+is,planet.name,20+is,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iC=orbit.timeToApoapsis/orbit.period*2*math.pi;local iD=iu*math.cos(iC)local iE=iv*math.sin(iC)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ip+ir/2+iD+ix+is,iq+ir/2+iE+is)end;gW[#gW+1]=[[</g>]]return gW else return gW end end;local function iF(iG,iH)local iI;local iJ=(iH-iG):normalize()local eB=(bv-iG):dot(iJ)/iJ:dot(iJ)if eB<=0.then return(bv-iG):len()elseif eB>=(iH-iG):len()then return(bv-iH):len()end;local iK=iG+eB*iJ;iI=(iK-bv):len()return iI end;local function iL()local iI;local iM=nil;local iN=nil;local iO=nil;for cE,iP in pairs(aM[0])do if iP.hasAtmosphere then local ai=iF(planet.center,iP.center)if iM==nil or ai<iM then iN=iP;iM=ai;iO=planet end;if ab and ab.hasAtmosphere and ab.name~=planet.name then local dX=iF(ab.center,iP.center)if dX<iM then iN=iP;iM=dX;iO=ab end end end end;local iQ=gi(1770)local iR=gj(330)if iM then local iS="txttick "local iT=500000;if iM<iN.radius+iT or iM<iO.radius+iT then if bH then iS="txttick red "else iS="txttick orange "end end;iI=ck(iM,2)bI=c7(iQ,iR,"Pipe ("..iO.name.."--"..iN.name.."): "..iI,iS.."pbright txtmid")end end;local iU={}function iU.HUDPrologue(gW)bH,g8=gg(bv)if not bH then G=PvPR;I=PvPG;H=PvPB else G=SafeR;I=SafeG;H=SafeB end;ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]local iV=ax;local iW=ay;local iX=ax;local iY=ay;if gk()and not brightHud then iV=[[rgb(]]..d(G*0.4+0.5)..","..d(I*0.4+0.5)..","..d(H*0.3+0.5)..[[)]]iW=[[rgb(]]..d(G*0.3+0.5)..","..d(I*0.3+0.5)..","..d(H*0.2+0.5)..[[)]]end;gW[#gW+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],iV,iV,iX,iX,iW,iW,iY,iY,aF,aG)return gW end;function iU.DrawVerticalSpeed(gW,dg)gV(gW,dg)end;function iU.UpdateHud(gW)local hL=bB;local iZ=bC;local h3=iZ;local hi=hL;local i2=d(unit.getThrottle())local i7=bs*3.6;local i3=unit.getAxisCommandValue(0)local i_=gi(1770)local j0=gj(310)if AtmoSpeedAssist and bA then i3=J;i2=J*100 end;local gm=gl()local h4="ROLL"if i2==nil then i2=0 end;if not bL then if bs>5 then hL=hK(bq)iZ=hM(bq)else hL=0;iZ=0 end;h4="YAW"end;if g8>50000 and not ap then local j1;j1=ck(g8)gW[#gW+1]=c7(i_,j0,"PvP Boundary: "..j1,"pbright txtbig txtmid")end;gW[#gW+1]=aj;gW[#gW+1]=aC;gW[#gW+1]=gn;if bI~=""then gW[#gW+1]=bI end;if go~=""then gW[#gW+1]=go end;if gp~=""then gW[#gW+1]=gp end;gV(gW,ar)if l()==0 or RemoteHud then if not gk()or brightHud then if bL then h2(gW,centerX,centerY,h3,h4,bL)hh(gW,hi,h3,centerX,centerY,bL,d(hM(bq)),bs)else h2(gW,centerX,centerY,iZ,h4,bL)hh(gW,hL,iZ,centerX,centerY,bL,d(iZ),bs)end;ho(gW,ar,bL)hN(gW,bq,bs,centerX,centerY)end end;i1(gW,gm,i2,i3)i6(gW,i7)ia(gW)io(gW)return gW end;function iU.HUDEpilogue(gW)gW[#gW+1]="</svg>"return gW end;function iU.ExtraData(gW)local j2=gi(1240)local j3=gj(55)local j4=j3+10;local j5;local j6=0;local gm=gl()if VertTakeOffEngine then gm=gm.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bs>20 then gm=gm.."-COLLISION ON"end;if UseExtra~="Off"then gm="("..UseExtra..")-"..gm end;if TurnBurn then gm="TB-"..gm end;if not stablized then gm=gm.."-DeCoupled"end;local j7=vec3(core.getWorldAcceleration()):len()/9.80665;j5=core.g()gW[#gW+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then j2=gi(1120)j3=gj(55)j4=j3+10 elseif ap then local j8=gi(770)gW[#gW+1]=c7(j8,j3,"ATMOSPHERE","pdim txt txtend")gW[#gW+1]=c7(j8,j4,e("%.2f",aq),"pdim txt txtend","")end;gW[#gW+1]=c7(j2,j3,"GRAVITY","pdim txt txtend")gW[#gW+1]=c7(j2,j4,e("%.2f",j5/9.80665),"pdim txt txtend")gW[#gW+1]=c7(j2,j3+20,"ACCEL","pdim txt txtend")gW[#gW+1]=c7(j2,j4+20,e("%.2f",j7),"pdim txt txtend")gW[#gW+1]=c7(gi(960),gj(180),gm,"txtbig txtmid")end;function iU.DrawOdometer(gW,ac,TotalDistanceTravelled,ad)local j5;local j9=0;local ja=0;local j6=0;local jb=au>1000000 and y(au/1000000,2).." kTons"or y(au/1000,2).." Tons"if ap then j6=LastMaxBrakeInAtmo else j6=LastMaxBrake end;local jc,jd=aS.computeDistanceAndTime(bs,0,au,0,0,j6)j6=y(j6/(au*g9),2).." g"local je=a:maxForceForward()j5=core.g()if j5>0.1 then ja=au*j5;ja=y(ja/(au*g9),2).." g"j9=0.5*je/j5;j9=j9>1000000 and y(j9/1000000,2).." kTons"or y(j9/1000,2).." Tons"end;je=y(je/(au*g9),2).." g"gW[#gW+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gi(660),gi(700),gj(35),gi(960),gj(55),gi(1240),gj(35),gi(1280))if l()==0 or RemoteHud then gW[#gW+1]=c7(gi(700),gj(10),e("BrkTime: %s",cv(jd)),"txtstart")gW[#gW+1]=c7(gi(700),gj(20),e("Trip: %.2f km",ac),"txtstart")gW[#gW+1]=c7(gi(700),gj(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")gW[#gW+1]=c7(gi(830),gj(10),e("BrkDist: %s",ck(jc)),"txtstart")gW[#gW+1]=c7(gi(830),gj(20),"Trip Time: "..cv(ad),"txtstart")gW[#gW+1]=c7(gi(830),gj(30),"Total Time: "..cv(TotalFlightTime),"txtstart")gW[#gW+1]=c7(gi(970),gj(20),e("Mass: %s",jb),"txtstart")gW[#gW+1]=c7(gi(1240),gj(10),e("Max Brake: %s",j6),"txtend")gW[#gW+1]=c7(gi(1240),gj(30),e("Max Thrust: %s",je),"txtend")if j5>0.1 then gW[#gW+1]=c7(gi(970),gj(30),e("Max Thrust Mass: %s",j9),"txtstart")gW[#gW+1]=c7(gi(1240),gj(20),e("Req Thrust: %s",ja),"txtend")else gW[#gW+1]=c7(gi(970),gj(30),"Max Mass: n/a","txtstart")gW[#gW+1]=c7(gi(1240),gj(20),"Req Thrust: n/a","txtend")end end;gW[#gW+1]="</g>"return gW end;function iU.DrawWarnings(gW)return ia(gW)end;function iU.DisplayOrbitScreen(gW)return io(gW)end;function iU.DisplayMessage(gW,ik)if ik~="empty"then local c9=310;for jf in string.gmatch(ik,"([^\n]+)")do c9=c9+35;gW[#gW+1]=c7("50%",c9,jf,"msg")end end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function iU.DrawDeadZone(gW)gW[#gW+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function iU.UpdatePipe()if ap then bI=""return end;iL()end;function iU.DrawSettings(gW)if#bE>0 then local c8=gi(640)local c9=gj(200)gW[#gW+1]=[[<g class="pbright txtvspd txtstart">]]for cE,cF in pairs(bE)do gW[#gW+1]=c7(c8,c9,cF..": ".._G[cF])c9=c9+20;if cE%12==0 then c8=c8+gi(350)c9=gj(200)end end;gW[#gW+1]=c7(gi(640),gj(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")gW[#gW+1]="</g>"end;return gW end;local jg;local jh=gi(1770)local ji=gj(350)local jj=gj(15)local jk=gi(1370)local jl,jm;local jn=0;function iU.DrawRadarInfo()local function jo()if radarPanelID~=nil and jn==0 then r(radarPanelID)radarPanelID=nil;if jg~=nil then r(jg)jg=nil end else if jn==1 then r(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jg=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;jn=0 end end;local f1,f2,f0,f3,f4,eY=aY.GetRadarHud()local z=f3 or 0;if f0>0 then if CollisionSystem then jl=z.."/"..f4 .." Plotted : "..f0-f4 .." Ignored"else jl="Radar Contacts: "..f0 end;gn=c7(jh,ji,jl,"pbright txtbig txtmid")if#eY>0 then gn=gn..c7(jk,jj,"Friendlies In Range","pbright txtbig txtmid")for cE,cF in pairs(eY)do jj=jj+20;gn=gn..c7(jk,jj,radar_1.getConstructName(cF),"pdim txtmid")end end;if f1==nil and jg==nil then jn=1;jo()end;if f1~=nil and jg~=nil then jo()end;if radarPanelID==nil then jo()end else if f2 then gn=c7(jh,ji,"Radar: Jammed","pbright txtbig txtmid")else gn=c7(jh,ji,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jn=0;jo()end end end;function iU.DrawTanks()if fuelX~=0 and fuelY~=0 then go=c7(fuelX,fuelY,"","txtstart pdim txtfuel")gF(fuelX,"Atmospheric ","ATMO",aH,gD,gE)gF(fuelX+120,"Space fuel t","SPACE",aI,gB,gC)gF(fuelX+240,"Rocket fuel ","ROCKET",aJ,gz,gA)end end;function iU.DrawShield()local jp=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local jq=core.getPvPTimer()local jr=shield_1.getResistances()local js="A: "..10+jr[1]*100 .."% / E: "..10+jr[2]*100 .."% / K:"..10+jr[3]*100 .."% / T: "..10+jr[4]*100 .."%"local c8,c9=shieldX-60,shieldY+30;local jt=d(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local gT=d(jt*2.55)local gU=e("rgb(%d,%d,%d)",255-gT,gT,0)local cb=""gp=c7(c8,c9,"","txtmid pdim txtfuel")if jt<10 and jp~="Shield Disabled"then cb="red "end;jq=jq>0 and"   PvPTime: "..cv(jq)or""gp=gp..e([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],c8,c9,gU,jt*2,c8,c9,c8+2,c9+10,jt,jq)gp=gp..c7(c8,c9-5,jp,cb.."txtstart pbright txtbig")gp=gp..c7(c8,c9+30,js,cb.."txtstart pbright txtsmall")end;return iU end;local function ju()local function jv(position)local db=sys:closestBody(position)if(position-db.center):len()>db.radius+db.noAtmosphericDensityAltitude then db=aM[0][0]end;return db end;local function jw()local function jx(jy,jz)return jy.name<jz.name end;bG={}for cE,cF in pairs(aM[0])do bG[#bG+1]={name=cF.name,index=cE}end;table.sort(bG,jx)end;local function jA(jB)for cE,cF in pairs(jB)do if cF.name and cF.name==CustomTarget.name then return cE end end;return-1 end;local function jC()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ab=nil;CustomTarget=nil;return true end;local jD=bG[AutopilotTargetIndex].index;local jE=aM[0][jD]if jE.center then AutopilotTargetName=jE.name;ab=aR[0][jD]if CustomTarget~=nil then if aq==0 then if s(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if s(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if s(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then t(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if s(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if s(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if s(widgetMaxMassText,widgetMaxMass)~=1 then t(widgetMaxMassText,widgetMaxMass)end;if s(widgetTravelTimeText,widgetTravelTime)~=1 then t(widgetTravelTimeText,widgetTravelTime)end;if s(widgetTargetOrbitText,widgetTargetOrbit)~=1 then t(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jE;for _,cF in pairs(aR[0])do if cF.name==CustomTarget.planetname then ab=cF;AutopilotTargetName=CustomTarget.name;break end end;if s(widgetMaxMassText,widgetMaxMass)~=1 then t(widgetMaxMassText,widgetMaxMass)end;if s(widgetTravelTimeText,widgetTravelTime)~=1 then t(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ab.center)else AutopilotTargetCoords=CustomTarget.position end;if ab.planetname~="Space"then if ab.hasAtmosphere then AutopilotTargetOrbit=d(ab.radius*(TargetOrbitRadius-1)+ab.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(ab.radius*(TargetOrbitRadius-1)+ab.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ab):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jF(g_)if not Autopilot and not VectorToTarget and not al and not IntoOrbit then if g_==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then jC()else local jD=bG[AutopilotTargetIndex].index;local jE=aM[0][jD]if jE~=nil and jE.name=="Space"or iphCondition=="Custom Only"and jE.center or iphCondition=="No Moons"and string.find(jE.name,"Moon")~=nil then if g_==nil then jF()else jF(1)end else jC()end end else a1="Disengage autopilot before changing Interplanetary Helper"bV("iph","AP")end end;local function jG()local fJ=-1;fJ=jA(aM[0])if fJ>-1 then table.remove(aM[0],fJ)end;fJ=-1;fJ=jA(SavedLocations)if fJ~=-1 then a1=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fJ)end;jF()jw()end;local function jH(fY,position,hH,jI)if dbHud_1 or hH then local db=jv(position)local j5=db.gravity;local jJ=db.atmosphericDensityAboveSurface;if jI then jJ=aq;j5=unit.getClosestPlanetInfluence()end;local jK={position=position,name=fY,atmosphere=jJ,planetname=db.name,gravity=j5,safe=jI}if not hH then SavedLocations[#SavedLocations+1]=jK else for cE,cF in pairs(aM[0])do if cF.name and fY==cF.name then table.remove(aM[0],cE)end end end;table.insert(aM[0],jK)jw()jC()a1="Location saved as "..fY.."("..db.name..")"else a1="Databank must be installed to save permanent locations"end end;local cG={}function cG.UpdateAtlasLocationsList()jw()end;function cG.UpdateAutopilotTarget()jC()end;function cG.adjustAutopilotTargetIndex(g_)jF(g_)end;function cG.findAtlasIndex(jB)jA(jB)end;function cG.UpdatePosition(jL)local fJ=jA(SavedLocations)if fJ~=-1 then if jL~=nil then SavedLocations[fJ].name=jL;AutopilotTargetIndex=AutopilotTargetIndex-1;jF()else local jM=SavedLocations[fJ]jM.atmosphere=aq;jM.gravity=unit.getClosestPlanetInfluence()jM.position=bv;jM.safe=true end;a1=SavedLocations[fJ].name.." position updated ("..SavedLocations[fJ].planetname..")"else a1="Name Not Found"end end;function cG.AddNewLocation(fY,position,hH,jI)jH(fY,position,hH,jI)end;function cG.ClearCurrentPosition()jG()end;for cE,cF in pairs(SavedLocations)do table.insert(aM[0],cF)end;jw()cG.UpdateAutopilotTarget()return cG end;local function jN()local jO={}local function jP(ew)local jQ=AutopilotEndSpeed;if not Autopilot then jQ=0 end;if not ap then return aS.computeDistanceAndTime(ew,jQ,au,0,0,LastMaxBrake-AutopilotPlanetGravity*au)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(ew,jQ,au,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*au)else return 0,0 end end end;local function jR(ew)local jQ=AutopilotEndSpeed;if not Autopilot then jQ=0 end;return aS.computeDistanceAndTime(ew,jQ,au,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*au)end;local jS=false;function jO.GetAutopilotBrakeDistanceAndTime(ew)return jP(ew)end;function jO.GetAutopilotTBBrakeDistanceAndTime(ew)return jR(ew)end;local function jT(jU,jV,jW)jV=jV:project_on_plane(jU)jW=jW:project_on_plane(jU)return m(jV:cross(jW):dot(jU),jV:dot(jW))end;local function jX()local function jY()local jZ=-1;local j_=-1;if vBooster then jZ=vBooster.distance()end;if hover then j_=hover.distance()end;if jZ~=-1 and j_~=-1 then if jZ<j_ then return jZ else return j_ end elseif jZ~=-1 then return jZ elseif j_~=-1 then return j_ else return-1 end end;local k0=jY()local k1=-1;if telemeter_1 then k1=telemeter_1.getDistance()end;if k0~=-1 and k1~=-1 then if k0<k1 then return k0 else return k1 end elseif k0~=-1 then return k0 else return k1 end end;local function k2(planet,dT,k3)local function k4(k5,d9)local dZ=vec3(d9)if k5.bodyId==0 then return setmetatable({latitude=dZ.x,longitude=dZ.y,altitude=dZ.z,bodyId=0,systemId=k5.planetarySystemId},MapPosition)end;local d_=dZ-k5.center;local ai=d_:len()local dg=ai-k5.radius;local de=0;local df=0;if not ch(ai,0)then local e0=m(d_.y,d_.x)df=e0>=0 and e0 or 2*math.pi+e0;de=math.pi/2-math.acos(d_.z/ai)end;return setmetatable({latitude=math.deg(de),longitude=math.deg(df),altitude=dg,bodyId=k5.bodyId,systemId=k5.planetarySystemId},MapPosition)end;local k6=k4(planet,dT)k6="::pos{"..k6.systemId..","..k6.bodyId..","..k6.latitude..","..k6.longitude..","..k6.altitude.."}"if k3 then return k6 else system.setWaypoint(k6)return true end end;local k7=false;function jO.showWayPoint(planet,dT,k3)return k2(planet,dT,k3)end;function jO.APTick()local function k8()if bN and not BrakeLanding then local bT=bN[1]local fZ,f_=bN[2],bN[3]local k9=math.min(fZ,f_ or fZ)local ka=k9/bs;local kb=AutoTakeoff and(bs<42 or an~=-1)local kc=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if kc and not kb and(a7*1.5>k9 or ka<1)then BrakeIsOn=true;cd(0)if AltitudeHold then cp()end;if LockPitch then ToggleLockPitch()end;a1="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cq()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if ka<11 then bM=bT.name.." COLLISION "..cv(ka).." / "..ck(k9,2)else bM=bT.name.." collision "..cv(ka)end;if ka<6 then bV("alarm","AL",2)end else bM=false end end;local function kd(bP,ke,kf)local function kg(bP,dF)bP=vec3(bP)dF=vec3(dF):normalize()local cW=bP*dF;return cW.x+cW.y+cW.z end;local kh=0.001;local ki=1;if not ap or not b2 or an~=-1 or bs<P then if kf==nil then kf=DampingMultiplier end;if ke==nil then ke=kh end;bP=vec3(bP):normalize()local kj=vec3()-bP;local kk=-kg(kj,core.getConstructWorldOrientationRight())*ki;local kl=-kg(kj,core.getConstructWorldOrientationUp())*ki;if aA==0 then aA=kk/2 end;if aB==0 then aB=kl/2 end;if c(kk)<0.1 then U=U-kk*2 else U=U-(kk+(kk-aA)*kf)end;if c(kl)<0.1 then T=T+kl*2 else T=T+kl+(kl-aB)*kf end;aA=kk;aB=kl;if c(kk)<ke and c(kl)<ke then return true end;return false elseif b2 and an==-1 then bP=br;if kf==nil then kf=DampingMultiplier end;if ke==nil then ke=kh end;bP=vec3(bP):normalize()local kj=bo-bP;local kk=-kg(kj,core.getConstructWorldOrientationRight())*ki;local kl=-kg(kj,core.getConstructWorldOrientationUp())*ki;if aA==0 then aA=kk/2 end;if aB==0 then aB=kl/2 end;if c(kk)<0.1 then U=U-kk*5 else U=U-(kk+(kk-aA)*kf)end;if c(kl)<0.1 then T=T+kl*5 else T=T+kl+(kl-aB)*kf end;aA=kk;aB=kl;if c(kk)<ke and c(kl)<ke then return true end;return false end end;ap=j()>0;aq=j()ar=core.getAltitude()an=jX()C=o()b3=C;if CollisionSystem then k8()end;if antigrav then by=antigrav.getState()==1 end;local km=1;local kn=1;local ko=C-b3;local kp=-math.deg(jT(bn,br,bo))local kq=math.deg(jT(bp,br,bo))local g_=bt*-1;b2=ap and kp<-YawStallAngle or kp>YawStallAngle or kq<-PitchStallAngle or kq>PitchStallAngle;local kr=system.getMouseDeltaX()local ks=system.getMouseDeltaY()if InvertMouse and not a0 then ks=-ks end;U=0;Y=0;T=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if ar==0 then ar=(bv-planet.center):len()-planet.radius end;bL=unit.getClosestPlanetInfluence()>0 or ar>0 and ar<200000;local j5=planet:getGravity(core.getConstructWorldPos()):len()*au;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if v()==0 then if l()==1 and a0 then if not aZ then af=af+kr;ag=ag+ks end else af=0;ag=0 end else af=af+kr;ag=ag+ks;ai=w(af*af+ag*ag)if not a0 and l()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then U=U-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then U=U-(af+DeadZone)*MouseXSensitivity else U=0 end;if ag>0 and ag>DeadZone then T=T-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then T=T-(ag+DeadZone)*MouseYSensitivity else T=0 end else af=0;ag=0;if userControlScheme=="mouse"then T=(-utils.smoothstep(ks,-100,100)+0.5)*2*km;U=(-utils.smoothstep(kr,-100,100)+0.5)*2*kn end end end end;local kt=bs>8334;if bs>SpaceSpeedLimit/3.6 and not ap and not Autopilot and not kt then a1="Space Speed Engine Shutoff reached"cd(0)end;if not kt and LastIsWarping then if not BrakeIsOn then cs()end;if Autopilot then cq()end end;LastIsWarping=kt;if ap and aq>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not jS then BrakeIsOn=true;jS=true elseif not AtmoSpeedAssist and jS then if bs<b7/3.6 then BrakeIsOn=false;jS=false end end end;if BrakeIsOn then X=1 else X=0 end;if ProgradeIsOn then if ak then BrakeIsOn=false;local ku=false;if CustomTarget~=nil and ak~=1 then ku=kd(CustomTarget.position-bv,0.1)else ku=kd(vec3(br),0.01)end;b0=true;if ku then cg(d(b7))if(c(bC)<2 or c(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;Q=true;if ak~=1 then am=true end;ak=false;Autopilot=false;ct()end elseif ap and AtmoSpeedAssist then cd(1)end elseif bs>P then kd(vec3(br),0.01)end end;if RetrogradeIsOn then if ap then RetrogradeIsOn=false elseif bs>P then kd(-vec3(br))end end;if not ProgradeIsOn and ak and not IntoOrbit then if aq==0 then Q=true;ct()ak=false;am=true else ak=false;cq()end end;if am and CustomTarget~=nil and(ar<HoldAltitude+250 and ar>HoldAltitude-250)and bs*3.6>b7-250 and c(bu)<25 and aq>=0.1 and(CustomTarget.position-bv):len()>2000+ar then cq()am=false end;if VertTakeOff then b0=true;local kv=HoldAltitude;if bu<-30 then a1="Unable to achieve lift. Safety Landing."ae=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then kv=antigrav.getBaseAltitude()end;if ar<kv-100 then b8=0;ae=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;ae=0 elseif bu<-30 then BrakeIsOn=true;ae=15 elseif ar>=kv then if by then if Autopilot or VectorToTarget then cn()else BrakeIsOn=true;VertTakeOff=false end;a1="Takeoff complete. Singularity engaged"bV("aggLk","AG")else BrakeIsOn=false;a1="VTO complete. Engaging Horizontal Flight"bV("vtoc","VT")cn()end;ae=0 end else if aq>0.08 then b8=0;BrakeIsOn=false;ae=20 elseif aq<0.08 and aq>0 then BrakeIsOn=false;if bk then b8=0;ae=20 else ae=0;b8=36;cg(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=kv;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local kw=p(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(kw)local kx=p(vTpitchPID:get(),-1,1)T=kx end end;if IntoOrbit then local kj;local ky=false;local kz=ck(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ab end end;if not bf then bg=d(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=d(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget then kj=CustomTarget.position-bv end;local kA,kB=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local kC=bC;if not bc then local kD=false;local kE=false;cd(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..kz;if be.VectorToTarget then kd(kj:normalize():project_on_plane(bt))ky=bo:dot(kj:project_on_plane(bn):normalize())>0.95 else kd(br)ky=kp<0.5;if bs<150 then ky=true end end;T=0;ba=0;if bB<=ba+1 and bB>=ba-1 then kD=true else kD=false end;if kC<=bb+1 and kC>=bb-1 then kE=true else kE=false end;if kD and kE and ky then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then kd(kj:normalize():project_on_plane(bt))elseif bs>150 then kd(br)end;T=0;if be.VectorToTarget then local a7,_=aS.computeDistanceAndTime(bs,b7/3.6,au,0,0,LastMaxBrake)if bi and kj:len()>15000+a7+ar then b9="Orbiting to Target"if ar-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or kj:len()<15000+a7+ar then a1="Orbit complete, proceeding with reentry"bV("orCom","OB")AutopilotTargetCoords=CustomTarget.position;Q=true;am=true;be.VectorToTarget,be.AutopilotAlign=false,false;co()ct()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ar>bg*0.9 and ar<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;cd(0)ba=0;if not be.VectorToTarget then a1="Orbit complete"bV("orCom","OB")co()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..kz;bd=true;cg(kB*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kF=bu;local kG=ar-bg;local kH=c(kG)if bu<10 and c(bB)<10 and kH<100 then kF=bu*2 end;if kF<10 and c(bB)<10 and kH<100 then kF=kF*2 end;if kF<5 and c(bB)<5 and kH<100 then kF=kF*4 end;VSpdPID:inject(kF)ba=p(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kG)ba=p(ba-p(OrbitAltPID:get(),-15,15),-90,90)end end else local kI=2.75;local kJ=c(y(kA*kI))local kK=kJ%50;if kK>0 then kJ=kJ-kK+50 end;BrakeIsOn=false;if ar<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..kz;ba=utils.map(bu,200,0,-15,80)elseif ar>=bg*0.8 and ar<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..kz;kJ=kJ*0.75;ba=utils.map(bu,100,-100,-15,65)elseif ar>=bg*1.15 and ar<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..kz;kJ=kJ*0.75;if bu<0 or bd then ba=utils.map(ar,bg*1.5,bg*1.01,-30,0)else ba=utils.map(ar,bg*0.99,bg*1.5,0,30)end elseif ar>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..kz;ba=-65;local kL=utils.map(bu,-150,-400,1,0.55)kJ=kJ*kL end;cg(d(kJ))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kM=ba-bB;OrbitPitchPID:inject(kM)local kN=p(OrbitPitchPID:get(),-0.5,0.5)T=kN end end;if Autopilot and aq==0 and not ak then local function kO(jl,orbit)system.print(jl)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cd(0)O=false;a1=jl;bV("apCom","AP")if orbit or ak then if orbit and AutopilotTargetOrbit~=nil and not ak then if not ar or ar==0 then return end;bg=ar;bf=true end;co()end end;local kP,kQ=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kR=(CustomTarget.position-ab.center):normalize()local kS=kR:project_on_plane((ab.center-bv):normalize()):normalize()local kT=ab.center+kS*(ab.radius+AutopilotTargetOrbit)local kU=CustomTarget.position+(CustomTarget.position-ab.center):normalize()*(AutopilotTargetOrbit-ab:getAltitude(CustomTarget.position))if(bv-kT):len()<(bv-kU):len()then kP=kT else kP=kU;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kP;aX.showWayPoint(ab,AutopilotTargetCoords)kQ=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kQ=true;TargetSet=true;AutopilotRealigned=true;kP=CustomTarget.position+(bv-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kR=(bv+br*100000-ab.center):normalize()local kS=kR:project_on_plane((ab.center-bv):normalize()):normalize()if kS:len()<1 then kR=(bv+bo*100000-ab.center):normalize()kS=kR:project_on_plane((ab.center-bv):normalize()):normalize()end;kP=ab.center+kS*(ab.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kP;TargetSet=true;kQ=true;AutopilotRealigned=true;aX.showWayPoint(ab,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kP)-bv):len()local bQ,bR,bS=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(bT)if bT.noAtmosphericDensityAltitude>0 then return bT.radius+bT.noAtmosphericDensityAltitude else return bT.radius+bT.surfaceMaxAltitude*1.5 end end)local bU=bR;if bS~=nil and bR~=nil then bU=math.min(bS,bR)end;if bU~=nil and bU<AutopilotDistance and bQ.name==ab.name then AutopilotDistance=bU end;local ku=true;local kV=(ab.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ab.radius;local ik=ck(kV)s(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ik..'"}')local a7,a8;if not TurnBurn then a7,a8=jP(bs)else a7,a8=jR(bs)end;if bs>300 and AutopilotAccelerating then local kj=vec3(kP)-bv;local kW=p(math.deg(jT(bn,br:normalize(),kj:normalize()))*bs/500,-90,90)local kX=p(math.deg(jT(bp,br:normalize(),kj:normalize()))*bs/500,-90,90)if c(kW)<20 and c(kX)<20 then kW=kW*2;kX=kX*2 end;if c(kW)<2 and c(kX)<2 then kW=kW*2;kX=kX*2 end;local kp=-math.deg(jT(bn,bo,br:normalize()))local kq=-math.deg(jT(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kX-kq)local kY=p(apPitchPID:get(),-1,1)T=T+kY;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kW-kp)local kZ=p(apYawPID:get(),-1,1)U=U+kZ;kQ=true;if c(kW)>2 or c(kX)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"bV("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bV("apAcc","AP")end end end;if kV<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ab):escapeAndOrbitalSpeed(kV)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bQ,bU=bO((AutopilotTargetCoords-bv):normalize())if ab.name~=planet.name then if bQ~=nil and ab.name~=bQ.name then a1="Collision with "..bQ.name.." in "..ck(bU).."\nClear LOS to continue."ah=5;k7=true else k7=false;a1=""end end end;if not k7 then if not AutopilotCruising and not AutopilotBraking and not kQ then ku=kd((kP-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then ku=kd(-vec3(br):normalize())end end;if AutopilotAccelerating then if not O then BrakeIsOn=false;cd(AutopilotInterplanetaryThrottle)J=y(AutopilotInterplanetaryThrottle,2)O=true end;local k_=unit.getThrottle()if AtmoSpeedAssist then k_=J end;if bq:len()>=MaxGameVelocity or k_==0 and O then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then bV("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cd(0)end;local l0=AutopilotDistance;if ab.name=="Space"then l0=l0-AutopilotSpaceDistance end;if l0<=a7 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bV("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cd(0)O=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;X=1 end;if TurnBurn then cd(1,true)end;local _,kB=aU(ab):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local kj;if CustomTarget~=nil then kj=CustomTarget.position-bv end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bs<50 then kO("Autopilot complete, arrived at space location")BrakeIsOn=true;X=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bs<=kB and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kO("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;ak=true;aX.showWayPoint(ab,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then bV("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=kB then if CustomTarget~=nil then if br:normalize():dot(kj:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then bV("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ab,CustomTarget.position)WaypointSet=true end else kO("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;ak=true;aX.showWayPoint(ab,CustomTarget.position)WaypointSet=false end else kO("Autopilot completed, setting orbit",true)X=0 end end elseif AutopilotStatus=="Circularizing"then kO("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local l0=AutopilotDistance;if ab.name=="Space"then l0=l0-AutopilotSpaceDistance end;if l0<=a7 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bV("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local k_=unit.getThrottle()if AtmoSpeedAssist then k_=J end;if k_>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bV("apAcc","AP")end;AutopilotCruising=false end else if ku then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ak then AutopilotTargetCoords=vec3(ab.center)+(AutopilotTargetOrbit+ab.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif ku and not k7 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bV("apAcc","AP")end;if not O then cd(AutopilotInterplanetaryThrottle,true)J=y(AutopilotInterplanetaryThrottle,2)O=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and aq>0)then a1="Autopilot complete, starting reentry"bV("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X=0;cd(0)O=false;ProgradeIsOn=true;ak=true;aX.showWayPoint(ab,CustomTarget.position)end;if Z then b0=true;local kX=0;local eA=bv+vec3(unit.getMasterPlayerRelativePosition())local l1=eA-bv;local l2=vec3(l1):project_on(bo):len()local l3=vec3(l1):project_on(bp):len()local ai=w(l2*l2+l3*l3)kd(l1:normalize())local l4=40;local l5=ai<l4;local l6=100;local l7=p((ai-l4)/2,10,l6)T=0;local ku=c(U)<0.1;if ku and bs<l7 and not l5 then BrakeIsOn=false;kX=-20 else BrakeIsOn=true;kX=0 end;local l8=0;if c(kX-bB)>l8 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kX-bB)local kY=pitchPID:get()T=kY end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local l9=LastMaxBrakeInAtmo;if l9 then l9=l9*p(bs/100,0.1,1)*aq else l9=LastMaxBrake end;if aq<0.01 then l9=LastMaxBrake end;local la=vec3(core.getWorldAirFrictionAcceleration())local lb=w(la:len()-la:project_on(g_):len())*au;if bs>100 then a7,a8=aS.computeDistanceAndTime(bs,100,au,0,0,l9+lb)local lc,ld=aS.computeDistanceAndTime(100,0,au,0,0,l9/2)a7=a7+lc else a7,a8=aS.computeDistanceAndTime(bs,0,au,0,0,l9/2)end;local le=HoldAltitude-ar;local lf=500+bs;local lg=1;if AutoTakeoff then lg=p(bs/100,0.1,1)end;local kX=(utils.smoothstep(le,-lf,lf)-0.5)*2*MaxPitch*lg;if not Reentry and not ak and not VectorToTarget and bo:dot(br:normalize())<0.99 then kX=(utils.smoothstep(le,-lf*p(20-19*aq*10,1,20),lf*p(20-19*aq*10,1,20))-0.5)*2*MaxPitch*p(2-aq*10,1,2)*lg end;if not AltitudeHold then kX=0 end;if LockPitch~=nil then if bL and not IntoOrbit then kX=LockPitch else LockPitch=nil end end;b0=true;local lh=T;if Reentry then local li=d(b7)local lj,lk=aS.computeDistanceAndTime(bs,li/3.6,au,0,0,LastMaxBrake-planet.gravity*9.8*au)lj=lj==-1 and 5000 or lj;local ll=ar-(planet.noAtmosphericDensityAltitude+lj)local lm=ar>planet.noAtmosphericDensityAltitude+lj*1.35;if lm then kX=ReEntryPitch;if bs<=li/3.6 and bs>li/3.6-10 and c(br:normalize():dot(bo))>0.9 and not bA then N=false;cd(1)end elseif bA and not lm and not ap then cg(li,true)end;if bA then if bs>li/3.6 and not lm then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not Q then kX=-80;if aq>0.02 then a1="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kX=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and lm then b0=true elseif not lm then if not ap and(bA or q:getTargetSpeed(axisCommandId.longitudinal)~=li)then cg(li)end;if bs<li/3.6+1 then BrakeIsOn=false;Q=false;Reentry=false;b0=true end end end;if bs>P and not al and not VectorToTarget and not BrakeLanding and ForceAlignment then kd(vec3(br))end;if bJ or(VectorToTarget or al)and AutopilotTargetIndex>0 and aq>0.01 then local kj;if bJ then if type(bJ)=="table"then kj=bJ elseif bJ<3 and bJ>0 then kj=-bt:cross(br)*5000 elseif bJ>=3 then kj=bt:cross(br)*5000 elseif bJ<0 then kj=br*25000 end elseif CustomTarget~=nil then kj=CustomTarget.position-bv else kj=ab.center-bv end;local kW=math.deg(jT(bt:normalize(),br,kj))*2;local ln=math.rad(c(bC))if bs>minRollVelocity and aq>0.01 then local lo=p(90-kX*2,-90,90)b4=p(kW*2,-lo,lo)local lp=kW;kW=p(p(kW,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(ln)+4*(bB-kX)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)kX=p(p(kX*math.cos(ln),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(p(c(lp)*math.sin(ln),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;kW=p(kW,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lq=kp-kW;if bJ and c(lq)<=0.0001 and(type(bJ)=="table"or type(bJ)~="table"and bJ<0 and c(bC)<1)then if bJ==-2 then cp()end;bJ=nil;bV("180Off","BR")return end;if not b2 and bs>minRollVelocity and aq>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lq)local kZ=p(yawPID:get(),-1,1)U=U+kZ elseif ap and an>-1 or bs<minRollVelocity then kd(kj)elseif b2 and aq>0.01 then if(kp<-YawStallAngle or kp>YawStallAngle)and aq>0.01 then kd(br)end;if(kq<-PitchStallAngle or kq>PitchStallAngle)and aq>0.01 then kX=p(bB-kq,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not al then local kv=planet:getAltitude(CustomTarget.position)local ll=w(kj:len()^2-(ar-kv)^2)local lr=br:len()-c(bu)StrongBrakes=true;if not al and not Reentry and ll<=a7+bs*ko/2 and(br:project_on_plane(bt):normalize():dot(kj:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cd(0)if AltitudeHold then cp()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(lr<0.1 or ll<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<ll)then if not by then bV("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bM=false end;LastDistanceToTarget=ll end elseif VectorToTarget and aq==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(al or Reentry)then if CustomTarget~=nil and ab.name==planet.name then local kj=CustomTarget.position-bv;local kv=planet:getAltitude(CustomTarget.position)local ll=w(kj:len()^2-(ar-kv)^2)local l9=LastMaxBrakeInAtmo;if l9 then a7,a8=aS.computeDistanceAndTime(bs,0,au,0,0,l9/2)StrongBrakes=true;if ll<=a7+bs*ko/2 and br:project_on_plane(bt):normalize():dot(kj:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;Q=true;ak=false;am=true;Autopilot=false;ct()end end;LastDistanceToTarget=ll end end end;if aq==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(al or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;co()VectorToTarget=false;bc=true end end;if b2 and aq>0.01 and an==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then kd(br)kX=p(bB-kq,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;T=lh;local k1=-1;if BrakeLanding then kX=0;local ls=false;local lt=30;if aT~=nil and aT>0 then local lu=p(aq,0.4,2)local l9=LastMaxBrakeInAtmo*p(bs/100,0.1,1)*lu;local lv=aT*lu+l9-j5;local lw=l9/2-j5;local lx=bs-w(c(lw/2)*20/(0.5*au))*utils.sign(lw)if lx<0 then lx=0 end;local ly;if bs>100 then local lz,_=aS.computeDistanceAndTime(bs,100,au,0,0,l9)local lA,_=aS.computeDistanceAndTime(100,0,au,0,0,w(l9))ly=lz+lA else ly=aS.computeDistanceAndTime(bs,0,au,0,0,w(l9))end;if ly<20 then BrakeIsOn=false else local lB=0;if lx>100 then local lC,_=aS.computeDistanceAndTime(lx,100,au,0,0,lv)local lD,_=aS.computeDistanceAndTime(100,0,au,0,0,aT*lu+w(l9)-j5)lB=lC+lD else lB,_=aS.computeDistanceAndTime(lx,0,au,0,0,aT*lu+w(l9)-j5)end;lB=(lB+15+bs*ko)*1.1;local lE=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lE then local kv=planet:getAltitude(CustomTarget.position)local lF=ar-kv-100;local kj=CustomTarget.position-bv;local lG=w(kj:len()^2-(ar-kv)^2)if lG>100 then lE=false elseif lF<=lB or lB==-1 then BrakeIsOn=true;ls=true else BrakeIsOn=false;ls=true end end;if not lE and CalculateBrakeLandingSpeed then if lB>=lt then BrakeIsOn=true else BrakeIsOn=false end;ls=true end end end;if not bA then cd(0)end;q:setTargetGroundAltitude(500)q:activateGroundEngineAltitudeStabilization(500)stablized=true;k1=an;if k1>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if R then a.control.extendLandingGears()bV("grOut","LG",1)end;q:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-g_)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not ls then BrakeIsOn=true elseif not ls then BrakeIsOn=false end end;if AutoTakeoff or al then local bQ,bS,bR;if AutopilotTargetCoords~=nil then bQ,bS,bR=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(bT)return bT.radius+bT.noAtmosphericDensityAltitude end)end;if by then if ar>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cd(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kX)<15 and ar/HoldAltitude>0.75 then AutoTakeoff=false;if not al then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif al and bs<P then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;cd(0)elseif al then cd(0)BrakeIsOn=true end elseif al and aq==0 and ab~=nil and(bQ==nil or bQ.name==ab.name)then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;if not bA then cd(0)end;AutopilotAccelerating=true end end;local lH=an>-1;local lI=bB;if(VectorToTarget or al or bJ)and not lH and bs>minRollVelocity and aq>0.01 then local ln=math.rad(c(bC))lI=bB*c(math.cos(ln))+kq*math.sin(ln)end;local lJ=p(kX-lI,-PitchStallAngle*0.80,PitchStallAngle*0.80)if aq<0.01 and VectorToTarget then lJ=p(kX-lI,-85,MaxPitch)elseif aq<0.01 then lJ=p(kX-lI,-MaxPitch,MaxPitch)end;if c(bC)<5 or VectorToTarget or bJ or BrakeLanding or lH or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lJ)local kY=pitchPID:get()T=T+kY end end;if antigrav~=nil and(antigrav and not ExternalAGG and ar<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;an=jX()return jO end;function script.onStart()local lK={}local lL={}local lM=false;local function lN()local function lO(lP)local lQ=dbHud_1.hasKey;for cE,cF in pairs(lP)do if lQ(cF)then local cW=f(dbHud_1.getStringValue(cF))if cW~=nil then _G[cF]=cW;lM=true end end end end;if dbHud_1 then if not useTheseSettings then lO(c0())coroutine.yield()lO(b)else lO(b)a1="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5;lM=false end;coroutine.yield()if lM then a1="Loaded Saved Variables"aF=ResolutionX;aG=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]elseif not useTheseSettings then a1="No Saved Variables Found - Exit HUD to save settings"end else a1="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<C then LastMaxBrakeInAtmo=0 end;LastStartTime=C;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a1="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ar end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function lR()local function lS(lT,lU)if lT>lU then lU=lT end;local lV,lW=0,0;if ContainerOptimization>0 then lV=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lW=FuelTankOptimization*0.05 end;lU=lU*(1-(lV+lW))return lU end;local lX=core.getElementNameById;local lY=fuelX~=0 and fuelY~=0;for cE in pairs(as)do local type=core.getElementTypeById(as[cE])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(as[cE])),'^.*vertical.*$')then bx=true end end;if n(type,'^.*Space Engine$')then bl=true;if n(tostring(core.getElementTagsById(as[cE])),'^.*vertical.*$')then local lZ=core.getElementRotationById(as[cE])if lZ[4]<0 then if y(-lZ[4],0.1)==0.5 then bj=true end else if y(lZ[4],0.1)==0.5 then bk=true end end end end;if type=="Landing Gear"then R=true end;if type=="Dynamic Core Unit"then local l_=h(as[cE])if l_>10000 then E=128;F=110 elseif l_>1000 then E=64;F=55 elseif l_>150 then E=32;F=27 end end;aK=aK+h(as[cE])if lY and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local l_=h(as[cE])local jb=k(as[cE])local lT=0;local gP=o()if type=="Atmospheric Fuel Tank"then local lU=400;local m0=35.03;if l_>10000 then lU=51200;m0=5480 elseif l_>1300 then lU=6400;m0=988.67 elseif l_>150 then lU=1600;m0=182.67 end;lT=jb-m0;if fuelTankHandlingAtmo>0 then lU=lU+lU*fuelTankHandlingAtmo*0.2 end;lU=lS(lT,lU)aH[#aH+1]={as[cE],lX(as[cE]),lU,m0,lT,gP}end;if type=="Rocket Fuel Tank"then local lU=320;local m0=173.42;if l_>65000 then lU=40000;m0=25740 elseif l_>6000 then lU=5120;m0=4720 elseif l_>700 then lU=640;m0=886.72 end;lT=jb-m0;if fuelTankHandlingRocket>0 then lU=lU+lU*fuelTankHandlingRocket*0.1 end;lU=lS(lT,lU)aJ[#aJ+1]={as[cE],lX(as[cE]),lU,m0,lT,gP}end;if type=="Space Fuel Tank"then local lU=2400;local m0=182.67;if l_>10000 then lU=76800;m0=5480 elseif l_>1300 then lU=9600;m0=988.67 end;lT=jb-m0;if fuelTankHandlingSpace>0 then lU=lU+lU*fuelTankHandlingSpace*0.2 end;lU=lS(lT,lU)aI[#aI+1]={as[cE],lX(as[cE]),lU,m0,lT,gP}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function m1()if gyro~=nil then aw=gyro.getState()==1 end;if not stablized then q:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then u(1)else u(0)end;if door and(ap or not ap and ar<10000)then for _,cF in pairs(door)do cF.toggle()end end;if switch then for _,cF in pairs(switch)do cF.toggle()end end;if forcefield and(ap or not ap==0 and ar<10000)then for _,cF in pairs(forcefield)do cF.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if R then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if an~=-1 or not ap and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if R then a.control.extendLandingGears()end else BrakeIsOn=false end;q:setTargetGroundAltitude(b1)if ap and an~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ap end;local function m2(m3,m4,m5,m6,c8,c9,m7,m8,m9,ma)local mb={enableName=m3,disableName=m4,width=m5,height=m6,x=c8,y=c9,toggleVar=m7,toggleFunction=m8,drawCondition=m9,hovered=false}if ma then table.insert(lL,mb)else table.insert(lK,mb)end;return mb end;local function mc(md)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif md=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif md=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif md=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=c0(md)showHud=false else bE={}showHud=true end end;local function me()bD=not bD;if bD then aE=lL;a1="Hold SHIFT to see Settings"bF=showHud else aE=lK;a1="Hold SHIFT to see Control Buttons"mc()showHud=bF end end;local function mf(cF)_G[cF]=not _G[cF]if _G[cF]then a1=cF.." set to true"else a1=cF.." set to false"end;if cF=="showHud"then bF=_G[cF]elseif cF=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cF=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function mg()local mh=50;local mi=340;local c8=500;local c9=aG/2-400;local mj=0;for cE,cF in pairs(c0("boolean"))do if type(_G[cF])=="boolean"then m2(cF,cF,mi,mh,c8,c9,function()return _G[cF]end,function()mf(cF)end,function()return true end,true)c9=c9+mh+20;if mj==9 then c8=c8+mi+20;c9=aG/2-400;mj=0 else mj=mj+1 end end end;m2("Control View","Control View",mi,mh,10,aG/2-500,function()return true end,me,function()return true end,true)m2("View Handling Settings",'Hide Handling Settings',mi,mh,10,aG/2-(500-mh),function()return showHandlingVariables end,function()mc("handling")end,function()return true end,true)m2("View Hud Settings",'Hide Hud Settings',mi,mh,10,aG/2-(500-mh*2),function()return showHudVariables end,function()mc("hud")end,function()return true end,true)m2("View Physics Settings",'Hide Physics Settings',mi,mh,10,aG/2-(500-mh*3),function()return showPhysicsVariables end,function()mc("physics")end,function()return true end,true)end;local function mk()local function jH()local position=bv;local fY=planet.name..". "..#SavedLocations;if radar_1 then local dp,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dp~=nil and dp~=""then fY=fY.." "..radar_1.getConstructName(dp)end end;return aW.AddNewLocation(fY,position,false,true)end;local function ml()TurnBurn=not TurnBurn end;local function mm(mn)if mn==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function mo()aW.UpdatePosition()end;local function jG()aW.ClearCurrentPosition()end;local function mp()local fY=AutopilotTargetName;if fY==nil then local ik=ck((bv-CustomTarget.position):len())fY=CustomTarget.name.." "..ik end;if fY==nil then fY="None"end;return"Engage Autopilot: "..fY end;local function mq()local fY=AutopilotTargetName;if fY==nil then fY=CustomTarget.name end;if fY==nil then fY="None"end;return"Disable Autopilot: "..fY end;local function mr()if l()==1 then Z=not Z;if Z then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()q:setTargetGroundAltitude(TargetHoverHeight)bV("folOn","F")else bV("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()q:setTargetGroundAltitude(LandingGearGroundHeight)end end else a1="Follow Mode only works with Remote controller"Z=false end end;local mh=50;local mi=260;local ms=m2("Enable Brake Toggle","Disable Brake Toggle",mi,mh,aF/2-mi/2,aG/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a1="Brakes in Toggle Mode"else a1="Brakes in Default Mode"end end)m2("Align Prograde","Disable Prograde",mi,mh,aF/2-mi/2-50-ms.width,aG/2-mh+380,function()return ProgradeIsOn end,function()mm(1)end)m2("Align Retrograde","Disable Retrograde",mi,mh,aF/2-mi/2+ms.width+50,aG/2-mh+380,function()return RetrogradeIsOn end,mm,function()return aq==0 end)local mt=m2(mp,mq,600,60,aF/2-600/2,aG/2-60/2-400,function()return Autopilot end,cq)m2("Save Position","Save Position",200,mt.height,mt.x+mt.width+30,mt.y,function()return false end,jH,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)m2("Update Position","Update Position",200,mt.height,mt.x+mt.width+30,mt.y,function()return false end,mo,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)m2("Clear Position","Clear Position",200,mt.height,mt.x-200-30,mt.y,function()return true end,jG,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)mh=60;mi=300;local c8=10;local c9=aG/2-500;c9=c9+mh+20;m2("View Settings","View Settings",mi,mh,c8,c9,function()return true end,me)local c9=aG/2-300;m2("Enable Turn and Burn","Disable Turn and Burn",mi,mh,c8,c9,function()return TurnBurn end,ml)m2("Horizontal Takeoff Mode","Vertical Takeoff Mode",mi,mh,c8+mi+20,c9,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a1="Vertical Takeoff Mode"else a1="Horizontal Takeoff Mode"end end,function()return bx end)c9=c9+mh+20;m2("Show Orbit Display","Hide Orbit Display",mi,mh,c8,c9,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a1="Orbit Display Enabled"else a1="Orbit Display Disabled"end end)m2("Engage Orbiting","Cancel Orbiting",mi,mh,c8+mi+20,c9,function()return IntoOrbit end,co,function()return aq==0 and bL end)c9=c9+mh+20;m2("Glide Re-Entry","Cancel Glide Re-Entry",mi,mh,c8,c9,function()return Reentry end,function()ak=1;mm(1)end,function()return planet.hasAtmosphere and not ap end)m2("Parachute Re-Entry","Cancel Parachute Re-Entry",mi,mh,c8+mi+20,c9,function()return Reentry end,ct,function()return planet.hasAtmosphere and not ap end)c9=c9+mh+20;m2("Engage Follow Mode","Disable Follow Mode",mi,mh,c8,c9,function()return Z end,mr,function()return l()==1 end)m2("Enable Repair Arrows","Disable Repair Arrows",mi,mh,c8+mi+20,c9,function()return aL end,function()aL=not aL;if aL then a1="Repair Arrows Enabled"else a1="Repair Arrows Diabled"end end,function()return l()==1 end)c9=c9+mh+20;if not ExternalAGG then m2("Enable AGG","Disable AGG",mi,mh,c8,c9,function()return by end,cu,function()return antigrav~=nil end)end;m2(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,mi*2,mh,c8,c9,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a1="IPH Mode: "..iphCondition end)c9=c9+mh+20;m2(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,mi*2,mh,c8,c9,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a1="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()q:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lN()coroutine.yield()lR()coroutine.yield()aX=jN()m1()mg()mk()aE=lK;coroutine.yield()aM=cG()aQ=cH()aR=aQ(cG())aS=e4()aU=ey()aY=eW()aV=g7()aW=ju()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bV("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(aq>0 or aq==0 and ar<10000)then for _,cF in pairs(door)do cF.toggle()end end;if switch then for _,cF in pairs(switch)do cF.toggle()end end;if forcefield and(aq>0 or aq==0 and ar<10000)then for _,cF in pairs(forcefield)do cF.toggle()end end;cA()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;bV("stop","SU")end;function script.onTick(mu)local mv=nil;if mu=="contact"then if not contactTimer then contactTimer=0 end;if C>contactTimer+10 then a1="Radar Contact"bV("rdrCon","RC")contactTimer=C end;unit.stopTimer("contact")elseif mu=="tenthSecond"then local function mw()local mx=system.createData;local my=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=my(panelInterplanetary,"value")interplanetaryHeaderText=mx('{"label": "Target Planet", "value": "N/A", "unit":""}')t(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=my(panelInterplanetary,"value")widgetDistanceText=mx('{"label": "distance", "value": "N/A", "unit":""}')t(widgetDistanceText,widgetDistance)widgetTravelTime=my(panelInterplanetary,"value")widgetTravelTimeText=mx('{"label": "Travel Time", "value": "N/A", "unit":""}')t(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=my(panelInterplanetary,"value")widgetMaxMassText=mx('{"label": "Maximum Mass", "value": "N/A", "unit":""}')t(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=my(panelInterplanetary,"value")widgetTargetOrbitText=mx('{"label": "Target Altitude", "value": "N/A", "unit":""}')t(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=my(panelInterplanetary,"value")widgetCurBrakeDistanceText=mx('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=my(panelInterplanetary,"value")widgetCurBrakeTimeText=mx('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=my(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mx('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=my(panelInterplanetary,"value")widgetMaxBrakeTimeText=mx('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=my(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mx('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ap then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)t(widgetCurBrakeTimeText,widgetCurBrakeTime)t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mz()r(panelInterplanetary)panelInterplanetary=nil end;local function mA()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ab.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local ew=bs;local k_=unit.getThrottle()/100;if AtmoSpeedAssist then k_=J end;local mB,mC=aS.computeDistanceAndTime(bs,MaxGameVelocity,au,a:maxForceForward()*k_,warmup,0)local a7,a8;if not TurnBurn then a7,a8=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a7,a8=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mD;if not TurnBurn and ew>0 then _,mD=aX.GetAutopilotBrakeDistanceAndTime(ew)else _,mD=aX.GetAutopilotTBBrakeDistanceAndTime(ew)end;local mE=0;local mF=0;if AutopilotCruising or not Autopilot and ew>5 then mF=aS.computeTravelTime(ew,0,AutopilotDistance)elseif a7+mB<AutopilotDistance then mE=AutopilotDistance-(a7+mB)mF=aS.computeTravelTime(8333.0556,0,mE)else local mG=(AutopilotDistance-a7)/mB;mB=AutopilotDistance-a7;mC=mC*mG end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mF elseif AutopilotBraking then return mD elseif AutopilotCruising then return mF+mD else return mC+a8+mF end end;local function mH(j5,mI)if j5==nil then j5=core.g()end;j5=y(j5,5)if mI~=nil and mI or(mv==nil or mv~=j5)then local ew=bq:len()local mJ=f(unit.getData()).maxBrake;if mJ~=nil and mJ>0 and ap then mJ=mJ/p(ew/100,0.1,1)mJ=mJ/aq;if aq>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mJ)/2 else LastMaxBrakeInAtmo=mJ end end end;if mJ~=nil and mJ>0 then LastMaxBrake=mJ end;mv=j5 end end;mH(nil,true)if bz~=nil then if q:getTargetSpeed(axisCommandId.longitudinal)~=bz then cg(bz,TRUE)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mw()end;if AutopilotTargetName~=nil then local mK=CustomTarget~=nil;local mL=0.5*LastMaxBrakeInAtmo/ab:getGravity(ab.center+vec3(0,0,1)*ab.radius):len()mL=mL>1000000 and y(mL/1000000,2).." kTons"or y(mL/1000,2).." Tons"s(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mA()if mK and not Autopilot then ai=(bv-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a7,a8=aX.GetAutopilotBrakeDistanceAndTime(bs)a9,aa=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a7,a8=aX.GetAutopilotTBBrakeDistanceAndTime(bs)a9,aa=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ik=ck(ai)s(widgetDistanceText,'{"label": "distance", "value": "'..ik..'"}')s(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cv(travelTime)..'", "unit":""}')ik=ck(a7)s(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ik..'"}')s(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cv(a8)..'", "unit":""}')ik=ck(a9)s(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ik..'"}')s(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cv(aa)..'", "unit":""}')s(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",mL)..'", "unit":""}')ik=ck(AutopilotTargetOrbit)s(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..ik..'"}')if aq>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or am)then cd(1)BrakeIsOn=false;N=false end end;if aq==0 and WasInAtmo then if s(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if s(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if s(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then t(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if s(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if s(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mz()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.DrawTanks()if shield_1 then aV.DrawShield()end elseif mu=="oneSecond"then local function mM(gW)local mN=0;aC=""local mO=aK;local mP=0;local mQ=0;local mR=0;local gT=0;local gU=""local mS=core.getElementHitPointsById;for cE in pairs(as)do local l_=0;local mT=0;mT=h(as[cE])l_=mS(as[cE])mP=mP+l_;if l_<mT then if l_==0 then mR=mR+1 else mQ=mQ+1 end;if aL and#az==0 then position=vec3(core.getElementPositionById(as[cE]))local c8=position.x-E;local c9=position.y-E;local fq=position.z-E;table.insert(az,core.spawnArrowSticker(c8,c9,fq+1,"down"))table.insert(az,core.spawnArrowSticker(c8,c9,fq+1,"down"))core.rotateSticker(az[2],0,0,90)table.insert(az,core.spawnArrowSticker(c8+1,c9,fq,"north"))table.insert(az,core.spawnArrowSticker(c8+1,c9,fq,"north"))core.rotateSticker(az[4],90,90,0)table.insert(az,core.spawnArrowSticker(c8-1,c9,fq,"south"))table.insert(az,core.spawnArrowSticker(c8-1,c9,fq,"south"))core.rotateSticker(az[6],90,-90,0)table.insert(az,core.spawnArrowSticker(c8,c9-1,fq,"east"))table.insert(az,core.spawnArrowSticker(c8,c9-1,fq,"east"))core.rotateSticker(az[8],90,0,90)table.insert(az,core.spawnArrowSticker(c8,c9+1,fq,"west"))table.insert(az,core.spawnArrowSticker(c8,c9+1,fq,"west"))core.rotateSticker(az[10],-90,0,90)table.insert(az,as[cE])end elseif aL and#az>0 and az[11]==as[cE]then for gO in pairs(az)do core.deleteSticker(az[gO])end;az={}end end;mN=d(mP/mO*100)if mN<100 then gW[#gW+1]=c7(0,0,"","pbright txt")gT=d(mN*2.55)gU=e("rgb(%d,%d,%d)",255-gT,gT,0)if mN<100 then gW[#gW+1]=c7("50%",1035,"Elemental Integrity: "..mN.."%","txtbig txtmid","fill:"..gU)if mR>0 then gW[#gW+1]=c7("50%",1055,"Disabled Modules: "..mR.." Damaged Modules: "..mQ,"txtbig txtmid","fill:"..gU)elseif mQ>0 then gW[#gW+1]=c7("50%",1055,"Damaged Modules: "..mQ,"txtbig txtmid","fill:"..gU)end end end end;local function mU()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then r(WeaponPanelID)WeaponPanelID=nil end end end;local function mV()local gP=o()local i7=bs;local mW=gP-at;if i7>1.38889 then i7=i7/1000;local mX=i7*(gP-at)TotalDistanceTravelled=TotalDistanceTravelled+mX;ac=ac+mX end;ad=ad+mW;TotalFlightTime=TotalFlightTime+mW;at=gP end;mV()aV.UpdatePipe()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()mU()local gW={}aV.ExtraData(gW)if ShowOdometer then gW=aV.DrawOdometer(gW,ac,TotalDistanceTravelled,ad)end;if ShouldCheckDamage then mM(gW)end;aj=table.concat(gW,"")collectgarbage("collect")elseif mu=="fiveSecond"then if not UseSatNav then return end;ao=dbHud_1.getStringValue("SPBAutopilotTargetName")if ao~=nil and ao~=""and ao~="SatNavNotChanged"then local cW=f(dbHud_1.getStringValue("SavedLocations"))if cW~=nil then _G["SavedLocations"]=cW;local fJ=-1;local jK;for cE,cF in pairs(SavedLocations)do if cF.name and cF.name=="SatNav Location"then fJ=cE;break end end;if fJ~=-1 then jK=SavedLocations[fJ]fJ=-1;for cE,cF in pairs(aM[0])do if cF.name and cF.name=="SatNav Location"then fJ=cE;break end end;if fJ>-1 then aM[0][fJ]=jK end;aW.UpdateAtlasLocationsList()a1=jK.name.." position updated"end end;for i=1,#bG do if bG[i].name==ao then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mu=="msgTick"then local gW={}aV.DisplayMessage(gW,"empty")a1="empty"unit.stopTimer("msgTick")ah=3 elseif mu=="animateTick"then a_=true;aZ=false;af=0;ag=0;unit.stopTimer("animateTick")elseif mu=="hudTick"then local function mY(gW)local mZ=d(p(ai/(aF/4)*255,0,255))gW[#gW+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(G+0.5)+mZ,d(I+0.5)-mZ,d(H+0.5)-mZ)end;local function m_()for _,cF in pairs(aE)do if cF.hovered then if not cF.drawCondition or cF.drawCondition()then cF.toggleFunction()end;cF.hovered=false end end end;local function n0()local function n1(n2,n3,c8,c9,m5,m6)if n2>c8 and n2<c8+m5 and n3>c9 and n3<c9+m6 then return true else return false end end;local c8=af+aF/2;local c9=ag+aG/2;for _,cF in pairs(aE)do cF.hovered=n1(c8,c9,cF.x,cF.y,cF.width,cF.height)end end;local function n4(gW)local function n5(gW,n6,hover,c8,c9,ep,n7,n8,n9,na,nb)if type(na)=="function"then na=na()end;if type(nb)=="function"then nb=nb()end;gW[#gW+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c8,c9,ep,n7)if n6 then gW[#gW+1]=e("%s'",n8)else gW[#gW+1]=n9 end;if hover then gW[#gW+1]=" style='stroke:white; stroke-width:2'"else gW[#gW+1]=" style='stroke:black; stroke-width:1'"end;gW[#gW+1]="></rect>"gW[#gW+1]=e("<text x='%f' y='%f' font-size='24' fill='",c8+ep/2,c9+n7/2+5)if n6 then gW[#gW+1]="black"else gW[#gW+1]="white"end;gW[#gW+1]="' text-anchor='middle' font-family='Montserrat'>"if n6 then gW[#gW+1]=e("%s</text>",na)else gW[#gW+1]=e("%s</text>",nb)end end;local nc="rgb(50,50,50)'"local nd="rgb(210,200,200)"local ne=n5;for _,cF in pairs(aE)do local m4=cF.disableName;local m3=cF.enableName;if type(m4)=="function"then m4=m4()end;if type(m3)=="function"then m3=m3()end;if not cF.drawCondition or cF.drawCondition()then ne(gW,cF.toggleVar(),cF.hovered,cF.x,cF.y,cF.width,cF.height,nd,nc,m4,m3)end end end;local nf=y(ResolutionX/2,0)local ng=y(ResolutionY/2,0)local gW={}aV.HUDPrologue(gW)if showHud then aV.UpdateHud(gW)else if AlwaysVSpd then aV.DrawVerticalSpeed(gW,ar)end;aV.DisplayOrbitScreen(gW)aV.DrawWarnings(gW)end;if bD and bE~={}then aV.DrawSettings(gW)end;if radar_1 then aV.DrawRadarInfo()end;aV.HUDEpilogue(gW)gW[#gW+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aF,aG)if a1~="empty"then aV.DisplayMessage(gW,a1)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(gW)end end;if v()==0 then if l()==1 and a0 then if not AltIsOn then n0()n4(gW)end;if not aZ and not a_ then local nh=table.concat(gW,"")gW={}gW[#gW+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aF,aG)gW[#gW+1]=nh;gW[#gW+1]="</body>"aZ=true;gW[#gW+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(gW,"")system.setScreen(content)elseif a_ then local nh=table.concat(gW,"")gW={}gW[#gW+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aF,aG)gW[#gW+1]=nh;gW[#gW+1]="</body>"end;if not aZ then gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nf,ng,af,ag)end else m_()end else if not a0 and l()==0 then m_()if ai>DeadZone then if DisplayDeadZone then mY(gW)end end elseif not AltIsOn or AltIsOn and a0 then n0()n4(gW)end;gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nf,ng,af,ag)end;gW[#gW+1]=[[</svg></body>]]content=table.concat(gW,"")elseif mu=="apTick"then aX.APTick()elseif mu=="radarTick"then aY.UpdateRadar()elseif mu=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a1="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function ni(nj,l7)local nk=vec3()local nl=vec3()if nj==axisCommandId.longitudinal then nk=vec3(core.getConstructOrientationForward())nl=bo elseif nj==axisCommandId.vertical then nk=vec3(core.getConstructOrientationUp())nl=bn elseif nj==axisCommandId.lateral then nk=vec3(core.getConstructOrientationRight())nl=bp else return vec3()end;local nm=vec3(core.getWorldGravity())local nn=nm:dot(nl)local no=vec3(core.getWorldAirFrictionAcceleration())local np=no:dot(nl)local nq=bq:dot(nk)local nr=l7*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nr-nq)local ns=targetSpeedPID2:get()local nt=(ns-np-nn)*nl;return nt end;local function nu(nj,l7)local nk=vec3()local nl=vec3()if nj==axisCommandId.longitudinal then nk=vec3(core.getConstructOrientationForward())nl=bo elseif nj==axisCommandId.vertical then nk=vec3(core.getConstructOrientationUp())nl=bn elseif nj==axisCommandId.lateral then nk=vec3(core.getConstructOrientationRight())nl=bp else return vec3()end;local nm=vec3(core.getWorldGravity())local nn=nm:dot(nl)local no=vec3(core.getWorldAirFrictionAcceleration())local np=no:dot(nl)local nq=bq:dot(nk)local nr=l7*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nr-nq)local ns=targetSpeedPID:get()local nt=(ns-np-nn)*nl;return nt end;local function nw(nx,gZ,jz)local ny=nx:cross(jz):normalize_inplace()local hL=math.acos(p(ny:dot(-gZ),-1,1))*constants.rad2deg;if ny:cross(-gZ):dot(jz)<0 then hL=-hL end;return hL end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=q:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and N then cd(0)N=false elseif not bA and not N then J=0;N=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local nz=p(S+T+system.getControlDeviceForwardInput(),-1,1)local nA=p(V+Y+system.getControlDeviceYawInput(),-1,1)local nB=p(W+U-system.getControlDeviceLeftRightInput(),-1,1)local nC=X;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())au=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local nD=bC/180*math.pi;local nE=math.cos(nD)local nF=math.sin(nD)bB=nw(bt,bo,bp*nE+bn*nF)local nG=br:normalize()local nH=c(bC)local nI=utils.sign(bC)local nJ=vec3(core.getWorldAngularVelocity())local nK=nz*pitchSpeedFactor*bp+nA*rollSpeedFactor*bo+nB*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local nL=c(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or ak or AltitudeHold or IntoOrbit)and nL>0 or aq>0.0 and nL<autoRollRollThreshold and autoRollPreference)and nA==0 and c(bB)<85 then local nM=b4;local nN=autoRollFactor;if aq==0 then nN=nN/4;b4=0;nM=0 end;if rollPID==nil then rollPID=pid.new(nN*0.01,0,nN*0.1)end;rollPID:inject(nM-bC)local nO=rollPID:get()nK=nK+nO*bo end end;local nP=1;local nQ=0;local nR=1;if system.getMouseWheel()>0 then if AltIsOn then if aq>0 or Reentry then b7=p(b7+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=p(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif av then local nS=J;J=y(p(J+speedChangeLarge/100,-1,1),2)if J>=0 and nS<0 then J=0;av=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if aq>0 or Reentry then b7=p(b7-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=p(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif av then local nS=J;J=y(p(J-speedChangeLarge/100,-1,1),2)if J<=0 and nS>0 then J=0;av=false end end else av=true end;K=0;if ap and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local nT=throttlePID:get()M=p(nT,-1,1)if M<J and aq>0.005 then L=true;q:setThrottleCommand(axisCommandId.longitudinal,p(M,0.01,1))else L=false;q:setThrottleCommand(axisCommandId.longitudinal,J)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local nU=p(brakePID:get(),0,1)if aq>0 and bu<-80 or aq>0.005 then K=nU end;if K>0 then if L and M==0.01 then q:setThrottleCommand(axisCommandId.longitudinal,0)end else M=p(M,0.01,1)end;local nV=''local nW=vec3()local nX=ni(axisCommandId.vertical,ae*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",nX,nQ)local nY='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nY=nY..ExtraLongitudeTags end;local nZ=q:getAxisCommandType(axisCommandId.longitudinal)local n_=q:composeAxisAccelerationFromThrottle(nY,axisCommandId.longitudinal)local o0=nu(axisCommandId.lateral,LeftAmount*1000)nV=nV..' , '.."lateral airfoil , lateral ground "nW=nW+o0;if nW:len()>constants.epsilon then a:setEngineForceCommand(nV,nW,nQ,'','','',nR)end;a:setEngineForceCommand(nY,n_,nP)local o1='thrust analog vertical fueled 'local o2='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then o2=o2 ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then o1=o1 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(o1,nX,nP)else a:setEngineForceCommand(o1,vec3(),nP)end;if LeftAmount~=0 then a:setEngineForceCommand(o2,o0,nP)else a:setEngineForceCommand(o2,vec3(),nP)end;if nC==0 then nC=K end;local o3=-nC*(brakeSpeedFactor*br+brakeFlatFactor*nG)a:setEngineForceCommand('brake',o3)else if AtmoSpeedAssist then q:setThrottleCommand(axisCommandId.longitudinal,J)end;local l7=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-l7/3.6)local nU=p(brakePID:get(),0,1)nC=p(nC+nU,0,1)end;local o3=-nC*(brakeSpeedFactor*br+brakeFlatFactor*nG)a:setEngineForceCommand('brake',o3)local nV=''local nW=vec3()local o4=false;local nY='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nY=nY..ExtraLongitudeTags end;local nZ=q:getAxisCommandType(axisCommandId.longitudinal)if nZ==axisCommandType.byThrottle then local n_=q:composeAxisAccelerationFromThrottle(nY,axisCommandId.longitudinal)a:setEngineForceCommand(nY,n_,nP)elseif nZ==axisCommandType.byTargetSpeed then local n_=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nV=nV..' , '..nY;nW=nW+n_;if q:getTargetSpeed(axisCommandId.longitudinal)==0 or q:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-q:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then o4=true end end;local o2='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then o2=o2 ..ExtraLateralTags end;local o5=q:getAxisCommandType(axisCommandId.lateral)if o5==axisCommandType.byThrottle then local o6=q:composeAxisAccelerationFromThrottle(o2,axisCommandId.lateral)a:setEngineForceCommand(o2,o6,nP)elseif o5==axisCommandType.byTargetSpeed then local o0=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nV=nV..' , '..o2;nW=nW+o0 end;local o1='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then o1=o1 ..ExtraVerticalTags end;local o7=q:getAxisCommandType(axisCommandId.vertical)if o7==axisCommandType.byThrottle then local nX=q:composeAxisAccelerationFromThrottle(o1,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(o1,nX,nP,'airfoil','ground','',nR)else a:setEngineForceCommand(o1,vec3(),nP)a:setEngineForceCommand('airfoil vertical',nX,nP,'airfoil','','',nR)a:setEngineForceCommand('ground vertical',nX,nP,'ground','','',nR)end elseif o7==axisCommandType.byTargetSpeed then if ae<0 then a:setEngineForceCommand('hover',vec3(),nP)end;local o8=q:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nV=nV..' , '..o1;nW=nW+o8 end;if nW:len()>constants.epsilon then if X~=0 or o4 or c(nG:dot(bo))<0.8 then nV=nV..', brake'end;a:setEngineForceCommand(nV,nW,nQ,'','','',nR)end end;local o9=torqueFactor*(nK-nJ)local oa=vec3(core.getWorldAirFrictionAngularAcceleration())o9=o9-oa;a:setEngineTorqueCommand('torque',o9,nP,'airfoil','','',nR)a:setBoosterCommand('rocket_engine')if a6 and not VanillaRockets then local ew=bq:len()local ob=0.15;if not bA then local oc=q:getTargetSpeed(axisCommandId.longitudinal)if ew*3.6>oc*(1-ob)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew*3.6<oc*(1-ob)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local k_=unit.getThrottle()if AtmoSpeedAssist then k_=J*100 end;local l7=k_/100;if j==0 then l7=l7*MaxGameVelocity;if ew>=l7*(1-ob)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew<l7*(1-ob)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local li=d(b7)l7=l7*li/3.6;if ew>=l7*(1-ob)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew<l7*(1-ob)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local g4=coroutine.status(beginSetup)if g4=="suspended"then local ce,g5=coroutine.resume(beginSetup)if g5 then system.print("ERROR STARTUP: "..g5)end elseif g4=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(od)local function oe(of)local B=1;local function og(oh,of)local oi={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oj=oh;for _,cF in ipairs(oi)do if of and oj>cF then oh=cF elseif oh<cF and not of then oh=cF;break end end;return oh end;if of then B=-1 end;if not ExternalAGG and by then if a0 and of then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+B*a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+B*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a0 then bg=og(bg,of)else bg=bg+B*a2 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a0 and ap then HoldAltitude=og(HoldAltitude,of)else HoldAltitude=HoldAltitude+B*a2 end end else q:updateTargetGroundAltitudeFromActionStart(B*1.0)end end;local function ok(of)local B=1;if of then B=-1 end;if not a0 then if AtmoSpeedAssist and not AltIsOn then J=p(J+B*speedChangeLarge/100,-1,1)else q:updateCommandFromActionStart(axisCommandId.longitudinal,B*speedChangeLarge)end else if of then B=1 else B=nil end;aW.adjustAutopilotTargetIndex(B)end end;local function ol(om)if not ap then a1="Flight Assist in Atmo only"return end;local cM=type(om)if bJ==nil then if cM=="table"then if Autopilot or VectorToTarget then cq()end;bV("180On","BR")elseif om==1 then bV("bnkLft","BR")else bV("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cp()if cM~="table"then om=om+1 end end;bJ=om else bV("180Off","BR")bJ=nil end end;if od=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cd(0)if vBooster or hover then if ap and an==-1 then bV("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if R then bV("grOut","LG",1)a.control.extendLandingGears()end;q:setTargetGroundAltitude(LandingGearGroundHeight)if ap then BrakeIsOn=true end end end;if R and not BrakeLanding and not(vBooster or hover)then bV("grOut","LG",1)a.control.extendLandingGears()end else if R then bV("grIn","LG",1)a.control.retractLandingGears()end;q:setTargetGroundAltitude(TargetHoverHeight)end elseif od=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif od=="forward"then S=S-1 elseif od=="backward"then if AltIsOn then ol(-br*5000)else S=S+1 end elseif od=="left"then if AltIsOn then ol(1)else V=V-1 end elseif od=="right"then if AltIsOn then ol(3)else V=V+1 end elseif od=="yawright"then W=W-1 elseif od=="yawleft"then W=W+1 elseif od=="straferight"then q:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif od=="strafeleft"then q:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif od=="up"then ae=ae+1;q:deactivateGroundEngineAltitudeStabilization()q:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif od=="down"then ae=ae-1;q:deactivateGroundEngineAltitudeStabilization()q:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif od=="groundaltitudeup"then oe()elseif od=="groundaltitudedown"then oe(true)elseif od=="option1"then toggleView=false;if AltIsOn and a0 then local on=""for i=1,#passengers do on=on.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..y(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..on)return end;aW.adjustAutopilotTargetIndex()elseif od=="option2"then toggleView=false;if AltIsOn and a0 then for i=1,#passengers do core.forceDeboard(passengers[i])end;a1="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif od=="option3"then local function oo()aD=not aD;if not aD then bV("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else bV("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then r(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then r(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then r(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then r(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then r(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a0 then local on=""for i=1,#ships do on=on.."| ID: "..ships[i].." Mass: "..y(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..on)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;oo()toggleView=false elseif od=="option4"then toggleView=false;if AltIsOn and a0 then for i=1,#ships do core.forceUndock(ships[i])end;a1="Undocked all ships"return end;bJ=nil;cq()elseif od=="option5"then toggleView=false;if AltIsOn and a0 then if shield_1 then shield_1.toggle()return else a1="No shield found"return end end;function ToggleLockPitch()if LockPitch==nil then bV("lkPOn","LP")if not a0 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bV("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif od=="option6"then toggleView=false;if AltIsOn and a0 then if shield_1 then local op=shield_1.getVentingCooldown()if op>0 then a1="Cannot vent again for "..op.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a1="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a1="Shields already at max hitpoints"end;return else a1="No shield found"return end end;cp()elseif od=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a1="Collision System Enabled"else a1="Collision System Secured"end;toggleView=false elseif od=="option8"then stablized=not stablized;if not stablized then a1="DeCoupled Mode - Ground Stabilization off"q:deactivateGroundEngineAltitudeStabilization()bV("gsOff","GS")else a1="Coupled Mode - Ground Stabilization on"q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bV("gsOn","GS")end;toggleView=false elseif od=="option9"then if AltIsOn and a0 then q:resetCommand(axisCommandId.longitudinal)q:resetCommand(axisCommandId.lateral)q:resetCommand(axisCommandId.vertical)cd(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()aw=gyro.getState()==1;if aw then bV("gyOn","GA")else bV("gyOff","GA")end end;toggleView=false elseif od=="lshift"then if AltIsOn then a0=true end;if v()==1 then a0=true;PrevViewLock=v()u(1)elseif l()==1 and ShiftShowsRemoteButtons then a0=true;a_=false;aZ=false end elseif od=="brake"then if BrakeToggleStatus then cs()elseif not BrakeIsOn then cs()else BrakeIsOn=true end elseif od=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then u(1)end elseif od=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a6 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a6=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a6=false end elseif od=="stopengines"then local function oq()if C-D<1.5 then bV("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bJ=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Z=false;O=false;ak=false;al=false;Q=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;aw=false;LockPitch=nil;IntoOrbit=false end end;oq()D=C;if q:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if J~=0 then q:resetCommand(axisCommandId.longitudinal)cd(0)else cd(100)end else if q:getTargetSpeed(axisCommandId.longitudinal)~=0 then q:resetCommand(axisCommandId.longitudinal)else if ap then cg(AtmoSpeedLimit)else cg(MaxGameVelocity*3.6)end end end elseif od=="speedup"then ok()elseif od=="speeddown"then ok(true)elseif od=="antigravity"and not ExternalAGG then if antigrav~=nil then cu()end end end;function script.onActionStop(od)local function os()if not ExternalAGG and by then a5=a3 end;if AltitudeHold or VertTakeOff or IntoOrbit then a4=a2 end end;if od=="forward"then S=0 elseif od=="backward"then S=0 elseif od=="left"then if bJ then if bJ==2 then bJ=-2 else bJ=-1 end end;V=0 elseif od=="right"then if bJ then if bJ==4 then bJ=-2 else bJ=-1 end end;V=0 elseif od=="yawright"then W=0 elseif od=="yawleft"then W=0 elseif od=="straferight"then q:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif od=="strafeleft"then q:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif od=="up"then ae=0;q:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif od=="down"then ae=0;q:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then q:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif od=="groundaltitudeup"then os()toggleView=false elseif od=="groundaltitudedown"then os()toggleView=false elseif od=="lshift"then if v()==1 then af=0;ag=0;u(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a0=false elseif od=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cs()else BrakeIsOn=false end end elseif od=="lalt"then if l()==0 and freeLookToggle then if toggleView then if v()==1 then u(0)else u(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then u(0)end;AltIsOn=false end end;function script.onActionLoop(od)local function ot(of)local B=1;if of then B=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+B*a5;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a5=p(a5*1.05,a3,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+B*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+B*a4;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+B*a4 end;a4=p(a4*1.05,a2,50)else q:updateTargetGroundAltitudeFromActionLoop(B*1.0)end end;local function ou(of)local B=1;if of then B=-1 end;if not a0 then if AtmoSpeedAssist and not AltIsOn then J=p(J+B*speedChangeSmall/100,-1,1)else q:updateCommandFromActionLoop(axisCommandId.longitudinal,B*speedChangeSmall)end end end;if od=="groundaltitudeup"then if not a0 then ot()end elseif od=="groundaltitudedown"then if not a0 then ot(true)end elseif od=="speedup"then ou()elseif od=="speeddown"then ou(true)end end;function script.onInputText(ca)local function ov()for cE,cF in pairs(c0())do dbHud_1.setStringValue(cF,g(nil))end;for cE,cF in pairs(b)do if cF~="SavedLocations"then dbHud_1.setStringValue(cF,g(nil))end end;a1="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5 end;local function ow(ox,eA,hH)local function oy(eA)local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU='::pos{'..z..','..z..','..z..','..z..','..z..'}'local d6,d7,de,df,dg=n(eA,cU)if d6=="0"and d7=="0"then return vec3(x(de),x(df),x(dg))end;df=math.rad(df)de=math.rad(de)local planet=aM[x(d6)][x(d7)]local e1=math.cos(de)local oz=vec3(e1*math.cos(df),e1*math.sin(df),math.sin(de))return planet.center+(planet.radius+dg)*oz end;local position=oy(eA)return aW.AddNewLocation(ox,position,hH)end;local i;local oA,oB=nil,nil;local oC="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute"i=string.find(ca," ")oA=ca;if i~=nil then oA=string.sub(ca,0,i-1)oB=string.sub(ca,i+1)end;if oA=="/help"or oA=="/commands"then for jf in string.gmatch(oC,"([^\n]+)")do system.print(jf)end;return elseif oA=="/setname"then if oB==nil or oB==""then a1="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(oB)else a1="Select a saved target to rename first"end elseif shield_1 and oA=="/resist"then if oB==nil or shield_1.getResistancesCooldown()>0 then a1="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU=z..', '..z..', '..z..', '..z;local oD,oE,oF,oG=n(oB,cU)if oG==nil or oD+oE+oF+oG>0.6 then a1="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(oD,oE,oF,oG)==1 then a1="Shield Resistances set"else a1="Resistance setting failed."end elseif oA=="/addlocation"or string.find(ca,"::pos")~=nil then local hH=false;local ox="0-Temp"if oB==nil or oB==""then oB=oA;hH=true end;i=string.find(oB,"::")if not hH then ox=string.sub(oB,1,i-2)end;local eA=string.sub(oB,i)ow(ox,eA,hH)elseif oA=="/agg"then if oB==nil or oB==""then a1="Usage: /agg targetheight"return end;oB=x(oB)if oB<1000 then oB=1000 end;AntigravTargetAltitude=oB;a1="AGG Target Height set to "..oB elseif oA=="/G"then if oB==nil or oB==""then a1="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if oB=="dump"then for cE,cF in pairs(c0())do if type(_G[cF])=="boolean"then if _G[cF]==true then system.print(cF.." true")else system.print(cF.." false")end elseif _G[cF]==nil then system.print(cF.." nil")else system.print(cF.." ".._G[cF])end end;return end;i=string.find(oB," ")local oH=string.sub(oB,0,i-1)local oI=string.sub(oB,i+1)for cE,cF in pairs(c0())do if cF==oH then a1="Variable "..oH.." changed to "..oI;local oJ=type(_G[cF])if oJ=="number"then oI=x(oI)elseif oJ=="boolean"then if string.lower(oI)=="true"then oI=true else oI=false end end;_G[cF]=oI;return end end;a1="No such global variable: "..oH elseif oA=="/copydatabank"then if dbHud_2 then cA(true)else a1="Spare Databank required to copy databank"end elseif oA=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ab,AutopilotTargetCoords,true))a1="::pos waypoint shown in lua chat"else a1="No target selected in IPH"end end end;function script.onEnter(dp)if radar_1 and not ap and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dp)if radar_1 and CollisionSystem then if#bK>650 then dp=tostring(dp)bK[dp]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
