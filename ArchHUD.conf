name: ArchHud - Archaegeo v1.159 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = true --export: (Default: true)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        LowOrbitHeight = 1000 --export: (Default: 1000)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        minRollVelocity = 150 --export: (Default: 150)    
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.159;SetWaypointOnExit=true;IntruderAlertSystem=false;AlwaysVSpd=false;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;safeMass=0;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local tostring=tostring;local o=utils.round;local p=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local function x(y,z)local A=10^(z or 0)return d(y*A+0.5)/A end;local B=16;local C=SafeR;local D=SafeB;local E=SafeG;local F=0;local G=0;local H=false;local I=0;local J=false;local K=x(ResolutionX/2,0)local L=x(ResolutionY/2,0)local M=false;local N=55;local O=false;local P=false;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=0;local W=0;local X=false;local Y=false;local Z="empty"local a0=5;local a1=5;local a2=a0;local a3=a1;local a4=false;local a5,a6=0;local a7,a8=0;local a9=nil;local aa=0;local ab=0;local ac=0;local ad=0;local ae=0;local af=3;local ag=0;local ah=""local ai=""local aj=0;local ak=false;local al=false;local am=false;local an=-1;local ao=false;local ap=""local aq=j()>0;local ar=j()local as=core.getAltitude()local at=core.getElementIdList()local au=p()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=false;local az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]local aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH={}local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=0;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=LandingGearGroundHeight;local bh=false;local bi=p()local bj=0;local bk=0;local bl=0;local bm=AtmoSpeedLimit;local bn=0;local bo=nil;local bp=0;local bq=0;local br=false;local bs=false;local bt={VectorToTarget=false}local bu=false;local bv=0;local bw=nil;local bx=false;local by=false;local bz=false;local bA=false;local bB=0;local bC=p()local bD=vec3(core.getConstructWorldOrientationUp())local bE=vec3(core.getConstructWorldOrientationForward())local bF=vec3(core.getConstructWorldOrientationRight())local bG=vec3(core.getWorldVelocity())local bH=vec3(bG):len()local bI=vec3(core.getWorldVertical())local bJ=-bI:dot(bG)local bK=vec3(core.getConstructWorldPos())local bL=nil;local bM=0;local bN=false;local bO=false;local bP=nil;local bQ=true;local bR=0;local bS=0;local bT=false;local bU={}local bV=showHud;local bW={}local bX=false;local bY=nil;local function bZ(b_,c0)for i=1,#c0 do b_[#b_+1]=c0[i]end;return b_ end;local function c1(c2)local c3={}local c4={"userControlScheme","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd"}local c5={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c6={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY"}local c7={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c2 then bZ(c3,c4)bZ(c3,c5)bZ(c3,c6)bZ(c3,c7)return c3 elseif c2=="boolean"then return c4 elseif c2=="handling"then return c5 elseif c2=="hud"then return c6 elseif c2=="physics"then return c7 end end;local function c8(c9,ca,cb,cc,cd)if cc==nil then cc=""end;if cd==nil then cd=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cc,c9,ca,cd,cb)end;local function ce(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not cg then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cf)F=q(x(cf*100,0)/100,-1,1)end;local function ch(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cg then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cf)bP=cf end;local function ci(cj,ck)if cj==0 then return c(ck)<1e-09 end;if ck==0 then return c(cj)<1e-09 end;return c(cj-ck)<math.max(c(cj),c(ck))*epsilon end;local function cl(ag,cm)local cn=ag>100000;local co,cp=""if cm==nil then cm=1 end;if cn then co,cp=x(ag/1000/200,cm),"SU"elseif ag<1000 then co,cp=x(ag,cm),"M"else co,cp=x(ag/1000,cm),"KM"end;return co,cp end;local function cq()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;bf=true;ac=0;if aq and an==-1 then BrakeLanding=false;AltitudeHold=true;ac=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ch(d(bm))end else VertTakeOff=true;AltitudeHold=false;bx=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cr()bx=false;bp=nil;bq=nil;bB=0;if ar==0 then if IntoOrbit then IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bf=true;if bw==nil then bw=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else Z="Unable to engage orbiting, not near planet"end else IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false end end;local function cs()if bC-bk<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bv=HoldAltitude;bu=true;if not IntoOrbit then cr()end;br=true end end;bk=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bk=bC end;if unit.getClosestPlanetInfluence()>0 and ar==0 then bv=as;bu=true;br=true;cr()if IntoOrbit then bk=bC else bk=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;X=false;bf=true;LockPitch=nil;bx=false;if an==-1 then AutoTakeoff=false;if bk>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if VertTakeOff then cq()end else AutoTakeoff=true;if bk>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bN then cq()end end;if al then HoldAltitude=100000 end else if IntoOrbit then cr()end;if VertTakeOff then cq()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bk=0 end end;local function ct()if l()==1 then X=not X;if X then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else Z="Follow Mode only works with Remote controller"X=false end end;local function cu()local function cv(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cs()end end;VectorStatus="Proceeding to Waypoint"end;if bC-bl<1.5 and ar>0 then if not bA then Z="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight end;bl=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else bl=bC end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not al and not IntoOrbit then bb.UpdateAutopilotTarget()bc.showWayPoint(a9,AutopilotTargetCoords)local cw=unit.getClosestPlanetInfluence()>0;if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ar~=0 then al=true;cs()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then cv(SpaceTarget)end else if not(a9.name==planet.name and cw)then bx=false;Autopilot=true elseif not aq then if IntoOrbit then cr()end;bv=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bu=true;bt.AutopilotAlign=true;bt.VectorToTarget=true;br=false;if not IntoOrbit then cr()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then al=true;cs()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(a9.name==planet.name and cw)and not IntoOrbit then WaypointSet=false;bx=false;br=false;cr()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;X=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;M=false;LockPitch=nil;WaypointSet=false end else al=true;cs()end else al=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;M=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=as;TargetSet=false;Reentry=false;if IntoOrbit then cr()end end end;local function cx(cy)local cz=-1;local cA;cz=bb.findAtlasIndex(SavedLocations)if cz~=-1 then local cB;if cy~=nil then cA={position=SavedLocations[cz].position,name=cy,atmosphere=SavedLocations[cz].atmosphere,planetname=SavedLocations[cz].planetname,gravity=SavedLocations[cz].gravity}else cA={position=bK,name=SavedLocations[cz].name,atmosphere=ar,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cz]=cA;cz=-1;cz=bb.findAtlasIndex(b1[0])if cz>-1 then b1[0][cz]=cA end;bb.UpdateAtlasLocationsList()Z=CustomTarget.name.." position updated"bb.UpdateAutopilotTarget()else Z="Name Not Found"end end;local function cC()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;if not bO then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cq()end;if IntoOrbit then cr()end;bf=autoRollPreference;ak=false;am=false;ac=0 end end;local function cD(cE,cF,cG)local function cH(cE,cI)cE=vec3(cE)cI=vec3(cI):normalize()local co=cE*cI;return co.x+co.y+co.z end;local cJ=0.001;local cK=1;if not aq or not bh or an~=-1 or bH<N then if cG==nil then cG=DampingMultiplier end;if cF==nil then cF=cJ end;cE=vec3(cE):normalize()local cL=vec3()-cE;local cM=-cH(cL,core.getConstructWorldOrientationRight())*cK;local cN=-cH(cL,core.getConstructWorldOrientationUp())*cK;if aC==0 then aC=cM/2 end;if aD==0 then aD=cN/2 end;if c(cM)<0.1 then S=S-cM*2 else S=S-(cM+(cM-aC)*cG)end;if c(cN)<0.1 then R=R+cN*2 else R=R+cN+(cN-aD)*cG end;aC=cM;aD=cN;if c(cM)<cF and c(cN)<cF then return true end;return false elseif bh and an==-1 then cE=bG;if cG==nil then cG=DampingMultiplier end;if cF==nil then cF=cJ end;cE=vec3(cE):normalize()local cL=bE-cE;local cM=-cH(cL,core.getConstructWorldOrientationRight())*cK;local cN=-cH(cL,core.getConstructWorldOrientationUp())*cK;if aC==0 then aC=cM/2 end;if aD==0 then aD=cN/2 end;if c(cM)<0.1 then S=S-cM*5 else S=S-(cM+(cM-aC)*cG)end;if c(cN)<0.1 then R=R+cN*5 else R=R+cN+(cN-aD)*cG end;aC=cM;aD=cN;if c(cM)<cF and c(cN)<cF then return true end;return false end end;local function cO()if Reentry then Z="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then Z="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"af=5 elseif not O then StrongBrakes=planet.gravity*9.80665*av<LastMaxBrakeInAtmo;if not StrongBrakes then Z="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;Z="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bm end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cb,cP=cl(HoldAltitude)Z="Beginning Re-entry.  Target speed: "..bm.." Target Altitude: "..cb..cP;ch(d(bm))end;AutoTakeoff=false end;local function cQ()if antigrav and not ExternalAGG then if bO then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cR(cS)local cT=0;local cU=0;local cV=0;if cS<60 then cS=d(cS)elseif cS<3600 then cT=d(cS/60)cS=d(cS%60)elseif cS<86400 then cU=d(cS/3600)cT=d(cS%3600/60)else cV=d(cS/86400)cU=d(cS%86400/3600)end;if cV>0 then return cV.."d "..cU.."h "elseif cU>0 then return cU.."h "..cT.."m "elseif cT>0 then return cT.."m "..cS.."s"elseif cS>0 then return cS.."s"else return"0s"end end;local function cW(cX)local function cY(cZ)for c_,d0 in pairs(cZ)do dbHud_1.setStringValue(d0,g(_G[d0]))if cX and dbHud_2 then dbHud_2.setStringValue(d0,g(_G[d0]))end end end;if dbHud_1 then cY(b)cY(c1())system.print("Saved Variables to Datacore")if cX and dbHud_2 then Z="Databank copied.  Remove copy when ready."end end end;local function d1()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function d2()local function d3(d4)return type(d4)=='number'end;local function d5(d4)return type(tonumber(d4))=='number'end;local function d6(d7)return type(d7)=='table'end;local function d8(d9)return type(d9)=='string'end;local function da(d0)return d6(d0)and d3(d0.x and d0.y and d0.z)end;local function db(dc)return d6(dc)and d3(dc.latitude and dc.longitude and dc.altitude and dc.bodyId and dc.systemId)end;local dd=math.pi/180;local de=180/math.pi;local epsilon=1e-10;local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local df='::pos{'..y..','..y..','..y..','..y..','..y..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dg=q;local function ci(cj,ck)if cj==0 then return c(ck)<1e-09 end;if ck==0 then return c(cj)<1e-09 end;return c(cj-ck)<math.max(c(cj),c(ck))*epsilon end;local function dh(d4)local co=string.gsub(string.reverse(e('%.4f',d4)),'^0*%.?','')return co==''and'0'or string.reverse(co)end;local function di(dj)if da(dj)then return e('{x=%.3f,y=%.3f,z=%.3f}',dj.x,dj.y,dj.z)end;if d6(dj)and not getmetatable(dj)then local dk={}local dl=next(dj)if type(dl)=='nil'or dl==1 then dk=dj else for c_,d0 in pairs(dj)do local cf=di(d0)if type(c_)=='number'then table.insert(dk,e('[%s]=%s',c_,cf))else table.insert(dk,e('%s=%s',c_,cf))end end end;return e('{%s}',table.concat(dk,','))end;if d8(dj)then return e("'%s'",dj:gsub("'",[[\']]))end;return tostring(dj)end;local dm={}dm.__index=dm;dm.__tostring=function(dj,dn)local dp={}for c_ in pairs(dj)do table.insert(dp,c_)end;table.sort(dp)local dk={}for _,c_ in ipairs(dp)do local cf=di(dj[c_])if type(c_)=='number'then table.insert(dk,e('[%s]=%s',c_,cf))else table.insert(dk,e('%s=%s',c_,cf))end end;if dn then return e('%s%s',dn,table.concat(dk,',\n'..dn))end;return e('{%s}',table.concat(dk,','))end;dm.__eq=function(dq,dr)return dq.planetarySystemId==dr.planetarySystemId and dq.bodyId==dr.bodyId and ci(dq.radius,dr.radius)and ci(dq.center.x,dr.center.x)and ci(dq.center.y,dr.center.y)and ci(dq.center.z,dr.center.z)and ci(dq.GM,dr.GM)end;local function ds(dt,du,dv,dw,dx)assert(d5(dt),'Argument 1 (planetarySystemId) must be a number:'..type(dt))assert(d5(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d5(dv),'Argument 3 (radius) must be a number:'..type(dv))assert(d6(dw),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dw))assert(d5(dx),'Argument 5 (GM) must be a number:'..type(dx))return setmetatable({planetarySystemId=tonumber(dt),bodyId=tonumber(du),radius=tonumber(dv),center=vec3(dw),GM=tonumber(dx)},dm)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dy)return e('::pos{%d,%d,%s,%s,%s}',dy.systemId,dy.bodyId,dh(dy.latitude*de),dh(dy.longitude*de),dh(dy.altitude))end;MapPosition.__eq=function(dq,dr)return dq.bodyId==dr.bodyId and dq.systemId==dr.systemId and ci(dq.latitude,dr.latitude)and ci(dq.altitude,dr.altitude)and(ci(dq.longitude,dr.longitude)or ci(dq.latitude,math.pi/2)or ci(dq.latitude,-math.pi/2))end;local function dz(dA,du,dB,dC,dD)local dt=dA;if d8(dA)and not dC and not dD and not du and not dB then dt,du,dB,dC,dD=n(dA,df)assert(dt,'Argument 1 (position string) is malformed.')else assert(d5(dt),'Argument 1 (systemId) must be a number:'..type(dt))assert(d5(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d5(dB),'Argument 3 (latitude) must be in degrees:'..type(dB))assert(d5(dC),'Argument 4 (longitude) must be in degrees:'..type(dC))assert(d5(dD),'Argument 5 (altitude) must be in meters:'..type(dD))end;dt=tonumber(dt)du=tonumber(du)dB=tonumber(dB)dC=tonumber(dC)dD=tonumber(dD)if du==0 then return setmetatable({latitude=dB,longitude=dC,altitude=dD,bodyId=du,systemId=dt},MapPosition)end;return setmetatable({latitude=dd*dg(dB,-90,90),longitude=dd*(dC%360),altitude=dD,bodyId=du,systemId=dt},MapPosition)end;local dE={}dE.__index=dE;dE.__tostring=function(dj,dn)local dF=dn and dn..'  'local dG={}local dp={}for c_ in pairs(dj)do table.insert(dp,c_)end;table.sort(dp)for _,dH in ipairs(dp)do bdy=dj[dH]local dI=dm.__tostring(bdy,dF)if dn then table.insert(dG,e('[%s]={\n%s\n%s}',dH,dI,dn))else table.insert(dG,e('  [%s]=%s',dH,dI))end end;if dn then return e('\n%s%s%s',dn,table.concat(dG,',\n'..dn),dn)end;return e('{\n%s\n}',table.concat(dG,',\n'))end;local function dJ(dK)local b1={}local pid;for _,d0 in pairs(dK)do local dL=d0.planetarySystemId;if type(dL)~='number'then error('Invalid planetary system ID: '..tostring(dL))elseif pid and dL~=pid then error('Mistringmatch planetary system IDs: '..dL..' and '..pid)end;local dM=d0.bodyId;if type(dM)~='number'then error('Invalid body ID: '..tostring(dM))elseif b1[dM]then error('Duplicate body ID: '..tostring(dM))end;setmetatable(d0.center,getmetatable(vec3.unit_x))b1[dM]=setmetatable(d0,dm)pid=dL end;return setmetatable(b1,dE)end;b5={}local function dN(dK)return setmetatable({galaxyAtlas=dK or{}},b5)end;b5.__index=function(d7,i)if type(i)=='number'then local system=d7.galaxyAtlas[i]return dJ(system)end;return rawget(b5,i)end;b5.__pairs=function(dj)return function(d7,c_)local dO,nv=next(d7,c_)return dO,nv and dJ(nv)end,dj.galaxyAtlas,nil end;b5.__tostring=function(dj)local dP={}for _,dQ in pairs(dj or{})do local dR=dQ:getPlanetarySystemId()local dS=dE.__tostring(dQ,'    ')table.insert(dP,e('  [%s]={%s\n  }',dR,dS))end;return e('{\n%s\n}\n',table.concat(dP,',\n'))end;b5.BodyParameters=ds;b5.MapPosition=dz;b5.PlanetarySystem=dJ;function b5.createBodyParameters(dT,du,dU,dV,dW,dX,dY)assert(d5(dT),'Argument 1 (planetarySystemId) must be a number:'..type(dT))assert(d5(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d5(dU),'Argument 3 (surfaceArea) must be a number:'..type(dU))assert(d6(dV),'Argument 4 (aPosition) must be an array or vec3:'..type(dV))assert(d6(dW),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dW))assert(d5(dX),'Argument 6 (altitude) must be in meters:'..type(dX))assert(d5(dY),'Argument 7 (gravityAtPosition) must be number:'..type(dY))local dv=math.sqrt(dU/4/math.pi)local ag=dv+dX;local dZ=vec3(dV)+ag*vec3(dW)local dx=dY*ag*ag;return ds(dT,du,dv,dZ,dx)end;b5.isMapPosition=db;function b5:getPlanetarySystem(dA)if i==nil then i=0 end;if nv==nil then nv=0 end;local dT=dA;if db(dA)then dT=dA.systemId end;if type(dT)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dE then system=dJ(system)end;return system end end end;function dE:castIntersections(d_,cI,e0,e1)local e0=e0 or function(e2)return 1.05*e2.radius end;local e3={}if e1 then for _,i in ipairs(e1)do e3[i]=self[i]end else e1={}for c_,e2 in pairs(self)do table.insert(e1,c_)e3[c_]=e2 end end;local function e4(e5,e6)local e7=e3[e5].center-d_;local e8=e3[e6].center-d_;return e7:len()<e8:len()end;table.sort(e1,e4)local e9=cI:normalize()for i,dL in ipairs(e1)do local e2=e3[dL]local ea=e2.center-d_;local dv=e0(e2)local eb=ea:dot(e9)local ec=eb^2-(ea:len2()-dv^2)if ec>=0 then local ed=math.sqrt(ec)local ee=eb+ed;local ef=eb-ed;if ef>0 then return e2,ee,ef elseif ee>0 then return e2,ee,nil end end end;return nil,nil,nil end;function dE:closestBody(eg)assert(type(eg)=='table','Invalid coordinates.')local eh,e2;local ei=vec3(eg)for _,ej in pairs(self)do local ek=(ej.center-ei):len2()if(not e2 or ek<eh)and ej.name~="Space"then e2=ej;eh=ek end end;return e2 end;function dE:convertToBodyIdAndWorldCoordinates(dA)local el=dA;if d8(dA)then el=dz(dA)end;if el.bodyId==0 then return 0,vec3(el.latitude,el.longitude,el.altitude)end;local ej=self:getBodyParameters(el)if ej then return el.bodyId,ej:convertToWorldCoordinates(el)end end;function dE:getBodyParameters(dA)local du=dA;if db(dA)then du=dA.bodyId end;assert(d5(du),'Argument 1 (bodyId) must be a number:'..type(du))return self[du]end;function dE:getPlanetarySystemId()local _,d0=next(self)return d0 and d0.planetarySystemId end;function dm:convertToMapPosition(dw)assert(d6(dw),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dw))local em=vec3(dw)if self.bodyId==0 then return setmetatable({latitude=em.x,longitude=em.y,altitude=em.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local en=em-self.center;local ag=en:len()local dD=ag-self.radius;local dB=0;local dC=0;if not ci(ag,0)then local eo=m(en.y,en.x)dC=eo>=0 and eo or 2*math.pi+eo;dB=math.pi/2-math.acos(en.z/ag)end;return setmetatable({latitude=dB,longitude=dC,altitude=dD,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dm:convertToWorldCoordinates(dA)local el=d8(dA)and dz(dA)or dA;if el.bodyId==0 then return vec3(el.latitude,el.longitude,el.altitude)end;assert(db(el),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(el.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(el.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ep=math.cos(el.latitude)return self.center+(self.radius+el.altitude)*vec3(ep*math.cos(el.longitude),ep*math.sin(el.longitude),math.sin(el.latitude))end;function dm:getAltitude(dw)return(vec3(dw)-self.center):len()-self.radius end;function dm:getDistance(dw)return(vec3(dw)-self.center):len()end;function dm:getGravity(dw)local eq=self.center-vec3(dw)local er=eq:len2()return self.GM/er*eq/math.sqrt(er)end;return setmetatable(b5,{__call=function(_,...)return dN(...)end})end;local function es()local b7={}local et=30000000/3600;local eu=et*et;local ev=100;local function ew(d0)return 1/math.sqrt(1-d0*d0/eu)end;function b7.computeAccelerationTime(ex,ey,ez)local eA=et*math.asin(ex/et)return(et*math.asin(ez/et)-eA)/ey end;function b7.computeDistanceAndTime(ex,ez,eB,eC,eD,eE)eD=eD or 0;eE=eE or 0;local eF=ex<=ez;local eG=eC*(eF and 1 or-1)/eB;local eH=-eE/eB;local eI=eG+eH;if eF and eI<=0 or not eF and eI>=0 then return-1,-1 end;local eJ,eK=0,0;if eG~=0 and eD>0 then local eA=math.asin(ex/et)local eL=math.pi*(eG/2+eH)local eM=eG*eD;local eN=et*math.pi;local d0=function(d7)local eO=(eL*d7-eM*math.sin(math.pi*d7/2/eD)+eN*eA)/eN;local eP=math.tan(eO)return et*eP/math.sqrt(eP*eP+1)end;local eQ=eF and function(d9)return d9>=ez end or function(d9)return d9<=ez end;eK=2*eD;if eQ(d0(eK))then local eR=0;while c(eK-eR)>0.5 do local d7=(eK+eR)/2;if eQ(d0(d7))then eK=d7 else eR=d7 end end end;local eS=ex;local eT=eK/ev;for eU=1,ev do local eV=d0(eU*eT)eJ=eJ+(eV+eS)*eT/2;eS=eV end;if eK<2*eD then return eJ,eK end;ex=eS end;local eA=et*math.asin(ex/et)local bC=(et*math.asin(ez/et)-eA)/eI;local eW=eu*math.cos(eA/et)/eI;local ag=eW-eu*math.cos((eI*bC+eA)/et)/eI;return ag+eJ,bC+eK end;function b7.computeTravelTime(ex,ey,ag)if ag==0 then return 0 end;if ey>0 then local eA=et*math.asin(ex/et)local eW=eu*math.cos(eA/et)/ey;return(et*math.acos(ey*(eW-ag)/eu)-eA)/ey end;if ex==0 then return-1 end;assert(ex>0,'Acceleration and initial speed are both zero.')return ag/ex end;function b7.lorentz(d0)return ew(d0)end;return b7 end;local function eX()local vec3=require('cpml.vec3')local d2=d2()local function d8(d9)return type(d9)=='string'end;local function d6(d7)return type(d7)=='table'end;local function ci(cj,ck)if cj==0 then return c(ck)<1e-09 end;if ck==0 then return c(cj)<1e-09 end;return c(cj-ck)<math.max(c(cj),c(ck))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dD)assert(self.body)local ag=dD+self.body.radius;if not ci(ag,0)then local orbit=math.sqrt(self.body.GM/ag)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dA,eY)assert(self.body)assert(d6(dA)or d8(dA))assert(d6(eY))local eZ=(d8(dA)or d2.isMapPosition(dA))and self.body:convertToWorldCoordinates(dA)or vec3(dA)local d0=vec3(eY)local e_=eZ-self.body.center;local e8=d0:len2()local f0=e_:len()local f1=self.body.GM;local f2=((e8-f1/f0)*e_-e_:dot(d0)*d0)/f1;local cj=f1/(2*f1/f0-e8)local f3=f2:len()local e9=f2:normalize()local f4=cj*(1-f3)local f5=cj*(1+f3)local f6=f4*e9+self.body.center;local f7=f3<=1 and-f5*e9+self.body.center or nil;local f8=math.sqrt(cj*f1*(1-f3*f3))local f9=f7 and 2*math.pi*math.sqrt(cj^3/f1)local fa=math.acos(f2:dot(e_)/(f3*f0))if e_:dot(d0)<0 then fa=-(fa-2*math.pi)end;local fb=math.acos((math.cos(fa)+f3)/(1+f3*math.cos(fa)))local fc=fb;if fc<0 then fc=fc+2*math.pi end;local fd=fc-f3*math.sin(fc)local fe=0;local ff=0;local fg=0;if f9~=nil then fe=fd/(2*math.pi/f9)ff=f9-fe;fg=ff+f9/2;if fa-math.pi>0 then ff=fe;fg=ff+f9/2 end;if fg>f9 then fg=fg-f9 end end;return{periapsis={position=f6,speed=f8/f4,circularOrbitSpeed=math.sqrt(f1/f4),altitude=f4-self.body.radius},apoapsis=f7 and{position=f7,speed=f8/f5,circularOrbitSpeed=math.sqrt(f1/f5),altitude=f5-self.body.radius},currentVelocity=d0,currentPosition=eZ,eccentricity=f3,period=f9,eccentricAnomaly=fb,meanAnomaly=fd,timeToPeriapsis=ff,timeToApoapsis=fg}end;local function fh(fi)local ej=d2.BodyParameters(fi.planetarySystemId,fi.bodyId,fi.radius,fi.center,fi.GM)return setmetatable({body=ej},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fh(...)end})end;local function fj()local fk=0;local function fl(fm)local dv=500000;local fn,fo,fp=math.huge;local fq=false;local fr=vec3({13771471,7435803,-128971})local fs=18000000;fn=vec3(fm):dist(fr)if fn<fs then return true,c(fn-fs),"Safe Zone",0 end;fo=vec3(fm):dist(vec3(planet.center))if fo<dv then fq=true end;if c(fo-dv)<c(fn-fs)then return fq,c(fo-dv),planet.name,planet.bodyId else return fq,c(fn-fs),"Safe Zone",0 end end;local function ft(d0)if aJ==1920 then return d0 else return x(aJ*d0/1920,0)end end;local function fu(d0)if aK==1080 then return d0 else return x(aK*d0/1080,0)end end;local function fv()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function fw()local fx="TRAVEL"if not bQ then fx="CRUISE"end;if Autopilot then fx="AUTOPILOT"end;return fx end;local function fy(fz,a_,c9,fA,fB,fC,fD,fE)local fF=1;local fG=2;local fH=3;local fI=4;local fJ=5;local fK=6;local fL=""local fM=0;local fN=fuelY;local fO=fuelY+10;if l()==1 and not RemoteHud then fN=fN-50;fO=fO-50 end;if fB=="ATMO"then fL="atmofueltank"elseif fB=="SPACE"then fL="spacefueltank"else fL="rocketfueltank"end;fM=_G[fL.."_size"]if#fC>0 then for i=1,#fC do local fP=string.sub(fC[i][fG],1,12)local fQ=0;for fR=1,fM do if fC[i][fG]==f(unit[fL.."_"..fR].getData()).name then fQ=fR;break end end;if a_ or fD[i]==nil or fE[i]==nil then local fS=0;local fT=0;local fU=0;local fV=0;local fW=p()if fQ~=0 then fE[i]=f(unit[fL.."_"..fQ].getData()).percentage;fD[i]=f(unit[fL.."_"..fQ].getData()).timeLeft;if fD[i]=="n/a"then fD[i]=0 end else fU=k(fC[i][fF])-fC[i][fI]fS=fC[i][fH]fE[i]=d(0.5+fU*100/fS)fT=fC[i][fJ]fV=fC[i][fK]if fT<=fU then fD[i]=0 else fD[i]=d(0.5+fU/((fT-fU)/(fW-fV)))end;fC[i][fJ]=fU;fC[i][fK]=fW end end;if fP==fA then fP=e("%s %d",fB,i)end;if fQ==0 then fP=fP.." *"end;local fX;if fD[i]==0 then fX="n/a"else fX=cR(fD[i])end;if fE[i]~=nil then local fY=d(fE[i]*2.55)local fZ=e("rgb(%d,%d,%d)",255-fY,fY,0)local cc=""if fX~="n/a"and fD[i]<120 or fE[i]<5 then if a_ then cc=[[class="red"]]end end;fz[#fz+1]=c8(c9,fN,fP,cc.." pdim txtfuel")fz[#fz+1]=c8(c9,fO,e("%d%% %s",fE[i],fX),"pdim txtfuel","fill:"..fZ)fN=fN+30;fO=fO+30 end end end end;local function f_(fz,dD)if dD<200000 and not aq or dD and aq then local g0=0;if c(bJ)>1 then g0=45*math.log(c(bJ),10)if bJ<0 then g0=-g0 end end;fz[#fz+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bJ),d(g0))end;return fz end;local function g1(g2)local g3=-bI;g2=g2-g2:project_on(g3)local g4=vec3(0,0,1)g4=g4-g4:project_on(g3)local g5=g4:cross(g3)local g0=g4:angle_between(g2)*constants.rad2deg;if g2:dot(g5)<0 then g0=360-g0 end;return g0 end;local function g6(fz,centerX,centerY,g7,g8,cw)local g9=circleRad;local ga=20;local gb=d(g7)if cw then for i=-45,45,5 do local gc=i;fz[#fz+1]=e([[<g transform="rotate(%f,%d,%d)">]],gc,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fz[#fz+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+g9+ga-len,centerX,centerY+g9+ga)end;fz[#fz+1]=c8(centerX,centerY+g9+ga-35,g8,"pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY+g9+ga-25,gb.." deg","pdim txt txtmid")fz[#fz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g7,centerX,centerY)fz[#fz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+g9+ga-20,centerX+5,centerY+g9+ga-20,centerX,centerY+g9+ga-15)fz[#fz+1]="</g>"end;local gd=gb;if cw then gd=g1(bE)end;local ge=20;local gf=d(gd)local gg=0;local gh=centerY+g9+ga+20;local gi=centerX;if g8~="YAW"then gh=fu(130)gi=ft(960)end;local gj=[[<path class="txttick line" d="]]local gk=d(gf-(ge+10)-gf%5+0.5)for i=gk+60,gk,-5 do local c9=gi-(-i*5+gd*5)if i%10==0 then gg=10;local y=i;if y==360 then y=0 elseif y>360 then y=y-360 elseif y<0 then y=y+360 end;fz[#fz+1]=c8(c9+5,gh-12,y)elseif i%5==0 then gg=5 end;if gg==10 then gj=e([[%s M %f %f v %d]],gj,c9,gh-5,gg)else gj=e([[%s M %f %f v %d]],gj,c9,gh-2.5,gg)end end;fz[#fz+1]=gj..[["/>]]fz[#fz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gi-5,gh+10,gi+5,gh+10,gi,gh+5)if cw then g8="HDG"end;fz[#fz+1]=c8(gi,gh+25,gf.."deg","pdim txt txtmid","")fz[#fz+1]=c8(gi,gh+35,g8,"pdim txt txtmid","")end;local function gl(fz,gm,g7,centerX,centerY,cw,gn,eV)local g9=circleRad;local go=d(g9*3/5)if g9>0 then local gp=d(gm)local len=0;local gj=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*g7,centerX,centerY)if not aq then gj=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fz[#fz+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],g9-1,centerX,centerY)fz[#fz+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gp-30-gp%5+0.5),d(gp+30+gp%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ca=centerY+-i*5+gm*5;if len==30 then gj=e([[%s M %d %f h %d]],gj,centerX-go-len,ca,len)if aq then fz[#fz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g7,centerX,centerY,centerX-go+10,ca,i)fz[#fz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g7,centerX,centerY,centerX+go-10,ca,i)if i==0 or i==180 or i==-180 then fz[#fz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g7,centerX,centerY,centerX-go+20,ca,go*2-40)end else fz[#fz+1]=c8(centerX-go+10,ca,i,"pdim txt txtmid")fz[#fz+1]=c8(centerX+go-10,ca,i,"pdim txt txtmid")end;gj=e([[%s M %d %f h %d]],gj,centerX+go,ca,len)else gj=e([[%s M %d %f h %d]],gj,centerX-go-len,ca,len)gj=e([[%s M %d %f h %d]],gj,centerX+go,ca,len)end end;fz[#fz+1]=gj..[["/>]]local gq="PITCH"if not cw then gq="REL PITCH"end;if gm>90 and not aq then gm=90-(gm-90)elseif gm<-90 and not aq then gm=-90-(gm+90)end;if g9>200 then if aq then if eV>N then fz[#fz+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY+20,gn,"pdim txt txtmid")end;fz[#fz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g7,centerX,centerY)else fz[#fz+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fz[#fz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-go+25,centerY-5,centerX-go+20,centerY,centerX-go+25,centerY+5,centerX-go+50,centerY+4,gp)fz[#fz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+go-25,centerY-5,centerX+go-20,centerY,centerX+go-25,centerY+5,centerX+go-30,centerY+4,gp)fz[#fz+1]="</g>"end;local gr=d(g9/3)fz[#fz+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-gr,centerY,g9-gr)if not aq and cw then fz[#fz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g7,centerX,centerY,centerX-go+10,centerY,go*2-20)end;fz[#fz+1]="</g>"if g9<200 then if aq and eV>N then fz[#fz+1]=c8(centerX,centerY-g9,gq,"pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY-g9+10,gp,"pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY+20,gn,"pdim txt txtmid")else fz[#fz+1]=c8(centerX,centerY-g9,gq,"pdim txt txtmid")fz[#fz+1]=c8(centerX,centerY-g9+15,gp,"pdim txt txtmid")end end end end;local function gs(fz,dD,cw)local gt=altMeterX;local gu=altMeterY;local gv=78;local gw=19;local gx=an;if an~=-1 then fz[#fz+1]=c8(gt+gv,gu+gw+20,e("AGL: %.1fm",an),"pdim altsm txtend")end;if cw and(dD<200000 and not aq or dD and aq)then table.insert(fz,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gt-1,gu-4,gv+2,gw+6,gt+1,gu-1,gv-4,gw))local cz=0;local gy=1;local gz=0;local gA=dD<0;local gB=9;if gA then gB=0 end;local dD=c(dD)while cz<6 do local gC=11;local gD=16;local gE=9;local gF=14;local cc="altsm"if cz>2 then gD=gD+3;gC=gC+2;gF=gF+2;gE=gE-6;cc="altbig"end;if gA then cc=cc.." red"end;local gG=dD/gy%10;local gH=d(gG)local gI=d((gH+1)%10)local gJ=gz;if cz==0 then gJ=gG-gH;if gA then gJ=1-gJ end end;if gA and(cz==0 or gz~=0)then local gK=gI;gI=gH;gH=gK end;local gL=gD*(gJ-1)local gM=gL+gD;local c9=gt+gE+(6-cz)*gC;local ca=gu+gF;fz[#fz+1]=c8(c9,ca+gL,gI,cc)fz[#fz+1]=c8(c9,ca+gM,gH,cc)cz=cz+1;gy=gy*10;if gH==gB then gz=gJ else gz=0 end end;table.insert(fz,[[</g></g>]])end end;local function gN(eY)eY=vec3(eY)local gO=-math.deg(m(eY.y,eY.z))+180;gO=gO-90;if gO<0 then gO=360+gO end;if gO>180 then gO=-180+gO-180 end;return-gO end;local function gP(eY)eY=vec3(eY)local gd=math.deg(m(eY.y,eY.x))-90;if gd<-180 then gd=360+gd end;return gd end;local function gQ(fz,eY,eV,centerX,centerY)if eV>5 and not aq or eV>N then local g9=circleRad;local gR=20;local gS=20;local gT=vec3(eY)local gU=gN(gT)local gV=gP(gT)local gW=14;local gX=gW/2;local gY=-gV/gS*g9;local gZ=gU/gR*g9;local c9=centerX+gY;local ca=centerY+gZ;local ag=math.sqrt(gY^2+gZ^2)local g_=[[<circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..gX/gW..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..gX..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c9-gW..[[,]]..ca..[[ h ]]..gX..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9+gX..[[,]]..ca..[[ h ]]..gX..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9 ..[[,]]..ca-gW..[[ v ]]..gX..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ag<g9 then fz[#fz+1]=g_ else local g0=m(gZ,gY)local h0=4;local h1=centerX+g9*math.cos(g0)local h2=centerY+g9*math.sin(g0)fz[#fz+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',g0*180/math.pi,h1,h2,h1-h0,h2-h0/2,h0*2,h0,h1+h0,h2-h0,h0,h0,-h0,h0)end;if not aq then gU=gN(-gT)gV=gP(-gT)gY=-gV/gS*g9;gZ=gU/gR*g9;c9=centerX+gY;ca=centerY+gZ;ag=math.sqrt(gY^2+gZ^2)if ag<g9 then local h3=[[<circle
                                    cx="]]..c9 ..[["
                                    cy="]]..ca..[["
                                    r="]]..gX..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c9 ..[[,]]..ca-gW..[[ v ]]..gX..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c9 ..[[,]]..ca..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c9 ..[[,]]..ca..[[)" />
                                <path
                                    d="M ]]..c9-gX..[[,]]..ca..[[ h ]]..gW..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c9 ..[[,]]..ca..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c9 ..[[,]]..ca..[[)"/>]]fz[#fz+1]=h3 end end end end;local function h4(fz,fx,h5,h6)h5=d(h5+0.5)local fN=throtPosY+10;local fO=throtPosY+20;if l()==1 and not RemoteHud then fN=55;fO=65 end;local h7="CRUISE"local unit="km/h"local cf=h6;if fx=="TRAVEL"or fx=="AUTOPILOT"then h7="THROT"unit="%"cf=h5;local h8="dim"if h5<0 then h8="red"end;fz[#fz+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],h8,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h5),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fz[#fz+1]=c8(throtPosX+10,fN,h7,"pbright txtstart")fz[#fz+1]=c8(throtPosX+10,fO,e("%.0f %s",cf,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bQ and H then h5=d(I*100+0.5)local h8="red"if h5<0 then h8="red"end;fz[#fz+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],h8,1-c(h5),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fz[#fz+1]=c8(throtPosX+10,fN+40,"LIMIT","pbright txtstart")fz[#fz+1]=c8(throtPosX+10,fO+40,h5 .."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then fz[#fz+1]=c8(throtPosX+10,fN-40,"LIMIT: "..bm.." km/h","dim txtstart")elseif not aq and Autopilot then fz[#fz+1]=c8(throtPosX+10,fN-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function h9(fz,ha)local hb=throtPosY-10;local hc=throtPosX+10;fz[#fz+1]=c8(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then hb=75 end;fz[#fz+1]=c8(hc,hb,d(ha).." km/h","pbright txtbig txtstart")end;local function hd(fz)fz[#fz+1]=c8(ft(1900),fu(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fz[#fz+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fz[#fz+1]=c8(ft(960),fu(550),"Warning: Invalid Control Scheme Detected","warnings")fz[#fz+1]=c8(ft(960),fu(600),"Keyboard Scheme must be selected","warnings")fz[#fz+1]=c8(ft(960),fu(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local he=ft(960)local hf=fu(860)local hg=fu(880)local hh=fu(900)local hi=fu(960)local hj=fu(200)local hk=fu(250)local hl=fu(960)if l()==1 and not RemoteHud then hf=fu(135)hg=fu(155)hh=fu(175)hj=fu(115)hk=fu(95)end;if BrakeIsOn then fz[#fz+1]=c8(he,hf,"Brake Engaged","warnings")elseif G>0 then fz[#fz+1]=c8(he,hf,"Auto-Brake Engaged","warnings","opacity:"..G)end;if aq and bh and an==-1 then fz[#fz+1]=c8(he,hj+50,"** STALL WARNING **","warnings")end;if bY~=nil and not aq then fz[#fz+1]=c8(he,hj+50,"* DEATH BLOSSOM ENGAGED *","warnings")end;if ax then fz[#fz+1]=c8(he,hl,"Gyro Enabled","warnings")end;if GearExtended then if P then fz[#fz+1]=c8(he,hg,"Gear Extended","warn")else fz[#fz+1]=c8(he,hg,"Landed (G: Takeoff)","warnings")end;local hm,cp=cl(a:getTargetGroundAltitude())fz[#fz+1]=c8(he,hh,"Hover Height: "..hm..cp,"warn")end;if a4 then fz[#fz+1]=c8(he,hi+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bO and AntigravTargetAltitude~=nil then if c(as-antigrav.getBaseAltitude())<501 then fz[#fz+1]=c8(he,hj+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fz[#fz+1]=c8(he,hj+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fz[#fz+1]=c8(he,hj+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fz[#fz+1]=c8(he,hj+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif X then fz[#fz+1]=c8(he,hj+20,"Follow Mode Engaged","warn")elseif Reentry then fz[#fz+1]=c8(he,hj+20,"Re-entry in Progress","warn")end;local hn,ee,ef=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(e2)if e2.noAtmosphericDensityAltitude>0 then return e2.radius+e2.noAtmosphericDensityAltitude else return e2.radius+e2.surfaceMaxAltitude*1.5 end end)local ho=ee;if ef~=nil and ee~=nil then ho=math.min(ef,ee)end;if AltitudeHold or VertTakeOff then local hm,cp=cl(HoldAltitude,2)if VertTakeOff then if bO then hm,cp=cl(antigrav.getBaseAltitude(),2)end;fz[#fz+1]=c8(he,hj,"AGG VTO to "..hm..cp,"warn")elseif AutoTakeoff and not IntoOrbit then if al then fz[#fz+1]=c8(he,hj,"Takeoff to "..AutopilotTargetName,"warn")else fz[#fz+1]=c8(he,hj,"Takeoff to "..hm..cp,"warn")end;if BrakeIsOn and not VertTakeOff then fz[#fz+1]=c8(he,hj+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fz[#fz+1]=c8(he,hj,"Altitude Hold: "..hm..cp,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then fz[#fz+1]=c8(he,hj+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then fz[#fz+1]=c8(he,hj+20,"Aligning trajectory","warn")elseif ar<0.05 then fz[#fz+1]=c8(he,hj+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if bo~=nil then fz[#fz+1]=c8(he,hj,bo,"warn")end end;if IntruderAlertSystem and safeMass==-1 then fz[#fz+1]=c8(he,hj+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bM.."kg DETECTED","warnings")end;if BrakeLanding then if StrongBrakes then fz[#fz+1]=c8(he,hj,"Brake-Landing","warnings")else fz[#fz+1]=c8(he,hj,"Coast-Landing","warnings")end end;if ProgradeIsOn then fz[#fz+1]=c8(he,hj,"Prograde Alignment","crit")end;if RetrogradeIsOn then fz[#fz+1]=c8(he,hj,"Retrograde Alignment","crit")end;if ho~=nil and ar==0 then local hm,cp=cl(ho)local travelTime=b7.computeTravelTime(bH,0,ho)local hp="Collision"if hn.noAtmosphericDensityAltitude>0 then hp="Atmosphere"end;fz[#fz+1]=c8(he,hk+20,hn.name.." "..hp.." "..cR(travelTime).." In "..hm..cp,"crit")end;if VectorToTarget and not IntoOrbit then fz[#fz+1]=c8(he,hj+35,VectorStatus,"warn")end;fz[#fz+1]="</g>"return fz end;local function hq(eV)return d(x(eV*3.6,0)+0.5).." km/h"end;local function hr(fz)local hs=OrbitMapX;local ht=OrbitMapY;local hu=OrbitMapSize;local hv=4;local hw=15;local c9=0;local ca=0;local hx,hy,hz,hA;local function hB(type)local hC,bC,eV,hD;if type=="Periapsis"then hC=orbit.periapsis.altitude;bC=orbit.timeToPeriapsis;eV=orbit.periapsis.speed;hD=35 else hC=orbit.apoapsis.altitude;bC=orbit.timeToApoapsis;eV=orbit.apoapsis.speed;hD=-35 end;fz[#fz+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9+hD,ca-5,hs+hu/2-hx+hA,ca-5)fz[#fz+1]=c8(c9,ca,type)ca=ca+hw;local hm,cp=cl(hC)fz[#fz+1]=c8(c9,ca,hm..cp)ca=ca+hw;fz[#fz+1]=c8(c9,ca,cR(bC))ca=ca+hw;fz[#fz+1]=c8(c9,ca,hq(eV))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then ht=ht+hv;c9=hs+hu+hs/2+hv;ca=ht+hu/2+5+hv;hx=hu/4;hA=0;fz[#fz+1]=[[<g class="pbright txtorb txtmid">]]fz[#fz+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',hu+hs*2,hu+ht,hv,hv)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hz=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hx*2)hy=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hz*(1-orbit.eccentricity)hA=hx-orbit.periapsis.altitude/hz-planet.radius/hz;local hE=""if orbit.periapsis.altitude<=0 then hE='redout'end;fz[#fz+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hE,hs+hu/2+hA+hv,ht+hu/2+hv,hx,hy)fz[#fz+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hs+hu/2+hv,ht+hu/2+hv,planet.radius/hz)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hB("Apoapsis")end;ca=ht+hu/2+5+hv;c9=hs-hs/2+10+hv;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hB("Periapsis")end;fz[#fz+1]=c8(hs+hu/2+hv,planet.name,20+hv,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hF=orbit.timeToApoapsis/orbit.period*2*math.pi;local hG=hx*math.cos(hF)local hH=hy*math.sin(hF)fz[#fz+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hs+hu/2+hG+hA+hv,ht+hu/2+hH+hv)end;fz[#fz+1]=[[</g>]]return fz else return fz end end;local function hI()if radarPanelID~=nil and aj==0 then s(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then s(perisPanelID)perisPanelID=nil end else if aj==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;aj=0 end end;local function hJ(fz)local c9=50;local ca=525;local hK={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hL={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local hM={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local hN={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if aq then bZ(hK,hL)table.insert(hK,"---------------------------------------")if VertTakeOff then table.insert(hK,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if an~=-1 then if antigrav then if bO then table.insert(hK,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hK,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hK,"Alt-6: Begins Vertical Takeoff.")else table.insert(hK,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hK,"G: Begin BrakeLanding or Land")end else bZ(hK,hM)end;if AltitudeHold then table.insert(hK,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(hK,"---------------------------------------")bZ(hK,hN)for i=1,#hK do ca=ca+12;fz[#fz+1]=c8(c9,ca,hK[i],"pdim txttick txtstart")end end;local hO={}function hO.HUDPrologue(fz)bX,fk,_,_=fl(bK)if not bX then C=PvPR;E=PvPG;D=PvPB else C=SafeR;E=SafeG;D=SafeB end;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local hP=az;local hQ=aA;local hR=az;local hS=aA;if fv()and not brightHud then hP=[[rgb(]]..d(C*0.4+0.5)..","..d(E*0.4+0.5)..","..d(D*0.3+0.5)..[[)]]hQ=[[rgb(]]..d(C*0.3+0.5)..","..d(E*0.3+0.5)..","..d(D*0.2+0.5)..[[)]]end;fz[#fz+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],hP,hP,hR,hR,hQ,hQ,hS,hS,aJ,aK)return fz end;function hO.DrawVerticalSpeed(fz,dD)f_(fz,dD)end;function hO.UpdateHud(fz)local dD=as;local eY=core.getVelocity()local eV=vec3(eY):len()local gO=bR;local hT=bS;local g7=hT;local gm=bR;local h5=d(unit.getThrottle())local ha=eV*3.6;local h6=unit.getAxisCommandValue(0)local hU=ft(1770)local hV=fu(310)if AtmoSpeedAssist and bQ then h6=F;h5=F*100 end;local fx=fw()local g8="ROLL"local cw=unit.getClosestPlanetInfluence()>0;if h5==nil then h5=0 end;if not cw then if eV>5 then gO=gN(eY)hT=gP(eY)else gO=0;hT=0 end;g8="YAW"end;if fk>50000 and not aq then local hW;if fk>200000 then hW=x(fk/200000,2).." su"else hW=x(fk/1000,1).." km"end;fz[#fz+1]=c8(hU,hV,"PvP Boundary: "..hW,"pbright txtbig txtmid")end;fz[#fz+1]=ai;fz[#fz+1]=aE;fz[#fz+1]=ah;if b0%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then fy(fz,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)fy(fz,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)fy(fz,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b0=0 end;b0=b0+1;f_(fz,dD)if l()==0 or RemoteHud then if not fv()or brightHud then if cw then g6(fz,centerX,centerY,g7,g8,cw)gl(fz,gm,g7,centerX,centerY,cw,d(gP(eY)),eV)else g6(fz,centerX,centerY,hT,g8,cw)gl(fz,gO,hT,centerX,centerY,cw,d(hT),eV)end;gs(fz,dD,cw)gQ(fz,eY,eV,centerX,centerY)end end;h4(fz,fx,h5,h6)h9(fz,ha)hd(fz)hr(fz)if showHelp then hJ(fz)end;return fz end;function hO.HUDEpilogue(fz)fz[#fz+1]="</svg>"return fz end;function hO.ExtraData(fz)local hX=ft(1240)local hY=fu(55)local hZ=hY+10;local h_;local i0=0;local fx=fw()if VertTakeOffEngine then fx=fx.."-VERTICAL"end;if TurnBurn then fx="TB-"..fx end;local i1=vec3(core.getWorldAcceleration()):len()/9.80665;h_=core.g()fz[#fz+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then hX=ft(1120)hY=fu(55)hZ=hY+10 elseif aq then local i2=ft(770)fz[#fz+1]=c8(i2,hY,"ATMOSPHERE","pdim txt txtend")fz[#fz+1]=c8(i2,hZ,e("%.2f",ar),"pdim txt txtend","")end;fz[#fz+1]=c8(hX,hY,"GRAVITY","pdim txt txtend")fz[#fz+1]=c8(hX,hZ,e("%.2f",h_/9.80665),"pdim txt txtend")fz[#fz+1]=c8(hX,hY+20,"ACCEL","pdim txt txtend")fz[#fz+1]=c8(hX,hZ+20,e("%.2f",i1),"pdim txt txtend")fz[#fz+1]=c8(ft(960),fu(180),fx,"txtbig txtmid")end;function hO.DrawOdometer(fz,aa,TotalDistanceTravelled,ab)local h_;local i3=0;local i4=0;local i0=0;if aq then i0=LastMaxBrakeInAtmo else i0=LastMaxBrake end;maxThrust=a:maxForceForward()h_=core.g()if h_>0.1 then i4=av*h_;i3=maxThrust/h_ end;fz[#fz+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ft(660),ft(700),fu(35),ft(960),fu(55),ft(1240),fu(35),ft(1280))if l()==0 or RemoteHud then fz[#fz+1]=c8(ft(700),fu(20),e("Trip: %.2f km",aa),"txtstart")fz[#fz+1]=c8(ft(700),fu(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")fz[#fz+1]=c8(ft(830),fu(20),"Trip Time: "..cR(ab),"txtstart")fz[#fz+1]=c8(ft(830),fu(30),"Total Time: "..cR(TotalFlightTime),"txtstart")fz[#fz+1]=c8(ft(970),fu(20),e("Mass: %.2f Tons",av/1000),"txtstart")fz[#fz+1]=c8(ft(1240),fu(10),e("Max Brake: %.2f kN",i0/1000),"txtend")fz[#fz+1]=c8(ft(1240),fu(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if h_>0.1 then fz[#fz+1]=c8(ft(970),fu(30),e("Max Mass: %.2f Tons",i3/1000),"txtstart")fz[#fz+1]=c8(ft(1240),fu(20),e("Req Thrust: %.2f kN",i4/1000),"txtend")else fz[#fz+1]=c8(ft(970),fu(30),"Max Mass: n/a","txtstart")fz[#fz+1]=c8(ft(1240),fu(20),"Req Thrust: n/a","txtend")end end;fz[#fz+1]="</g>"return fz end;function hO.DrawWarnings(fz)return hd(fz)end;function hO.DisplayOrbitScreen(fz)return hr(fz)end;function hO.DisplayMessage(fz,hm)if hm~="empty"then local ca=310;for i5 in string.gmatch(hm,"([^\n]+)")do ca=ca+35;fz[#fz+1]=c8("50%",ca,i5,"msg")end end;if af~=0 then unit.setTimer("msgTick",af)af=0 end end;function hO.DrawDeadZone(fz)fz[#fz+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function hO.UpdateRadar()if radar_1 then local i6=radar_1.getEntries()local i7=radar_1.getData()local i8=ft(1770)local i9=fu(330)if#i6>0 then local ia=i7:find('identifiedConstructs":%[%]')if ia==nil and perisPanelID==nil then aj=1;hI()end;if ia~=nil and perisPanelID~=nil then hI()end;if radarPanelID==nil then hI()end;ah=c8(i8,i9,"Radar: "..#i6 .." contacts","pbright txtbig txtmid")local ib={}for c_,d0 in pairs(i6)do if radar_1.hasMatchingTransponder(d0)==1 then table.insert(ib,d0)end end;if#ib>0 then local ca=fu(15)local c9=ft(1370)ah=ah..c8(c9,ca,"Friendlies In Range","pbright txtbig txtmid")for c_,d0 in pairs(ib)do ca=ca+20;ah=ah..c8(c9,ca,radar_1.getConstructName(d0),"pdim txtmid")end end else local ic;ic=i7:find('worksInEnvironment":false')if ic then ah=c8(i8,i9,"Radar: Jammed","pbright txtbig txtmid")else ah=c8(i8,i9,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then aj=0;hI()end end end end;function hO.DrawSettings(fz)if#bU>0 then local c9=ft(640)local ca=fu(200)fz[#fz+1]=[[<g class="pbright txtvspd txtstart">]]for c_,d0 in pairs(bU)do fz[#fz+1]=c8(c9,ca,d0 ..": ".._G[d0])ca=ca+20;if c_%12==0 then c9=c9+ft(350)ca=fu(200)end end;fz[#fz+1]=c8(ft(640),fu(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fz[#fz+1]="</g>"end;return fz end;return hO end;local function id()local function ie()local function ig(ih,ii)return ih.name<ii.name end;bW={}for c_,d0 in pairs(b1[0])do bW[#bW+1]={name=d0.name,index=c_}end;table.sort(bW,ig)end;local d1={}function d1.UpdateAtlasLocationsList()ie()end;function d1.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a9=nil;CustomTarget=nil;return true end;local ij=bW[AutopilotTargetIndex].index;local ik=b1[0][ij]if ik.center then AutopilotTargetName=ik.name;a9=b6[0][ij]if CustomTarget~=nil then if ar==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ik;for _,d0 in pairs(b6[0])do if d0.name==CustomTarget.planetname then a9=d0;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a9.center)else AutopilotTargetCoords=CustomTarget.position end;if a9.planetname~="Space"then if a9.hasAtmosphere then AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function d1.adjustAutopilotTargetIndex(g3)if not Autopilot and not VectorToTarget and not al and not IntoOrbit then if g3==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bW then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bW end end;if AutopilotTargetIndex==0 then bb.UpdateAutopilotTarget()else local ij=bW[AutopilotTargetIndex].index;local ik=b1[0][ij]if ik.name=="Space"then if g3==nil then bb.adjustAutopilotTargetIndex()else bb.adjustAutopilotTargetIndex(1)end else bb.UpdateAutopilotTarget()end end else Z="Disengage autopilot before changing Interplanetary Helper"end end;function d1.findAtlasIndex(il)for c_,d0 in pairs(il)do if d0.name and d0.name==CustomTarget.name then return c_ end end;return-1 end;for c_,d0 in pairs(SavedLocations)do table.insert(b1[0],d0)end;ie()d1.UpdateAutopilotTarget()return d1 end;local function im()local io={}local ip={vec3(bG),-vec3(bG),vec3(bD),-vec3(bD),vec3(bF),-vec3(bF)}local function iq(eV)local ir=AutopilotEndSpeed;if not Autopilot then ir=0 end;if not aq then return b7.computeDistanceAndTime(eV,ir,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(eV,ir,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function is(eV)local ir=AutopilotEndSpeed;if not Autopilot then ir=0 end;return b7.computeDistanceAndTime(eV,ir,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;function io.GetAutopilotBrakeDistanceAndTime(eV)return iq(eV)end;function io.GetAutopilotTBBrakeDistanceAndTime(eV)return is(eV)end;local function it(iu,iv,iw)iv=iv:project_on_plane(iu)iw=iw:project_on_plane(iu)return m(iv:cross(iw):dot(iu),iv:dot(iw))end;local function ix()local function iy()local iz=-1;local iA=-1;if vBooster then iz=vBooster.distance()end;if hover then iA=hover.distance()end;if iz~=-1 and iA~=-1 then if iz<iA then return iz else return iA end elseif iz~=-1 then return iz elseif iA~=-1 then return iA else return-1 end end;local iB=iy()local iC=-1;if telemeter_1 then iC=telemeter_1.getDistance()end;if iB~=-1 and iC~=-1 then if iB<iC then return iB else return iC end elseif iB~=-1 then return iB else return iC end end;local function iD(planet,eg,iE)local function iF(iG,dw)local em=vec3(dw)if iG.bodyId==0 then return setmetatable({latitude=em.x,longitude=em.y,altitude=em.z,bodyId=0,systemId=iG.planetarySystemId},MapPosition)end;local en=em-iG.center;local ag=en:len()local dD=ag-iG.radius;local dB=0;local dC=0;if not ci(ag,0)then local eo=m(en.y,en.x)dC=eo>=0 and eo or 2*math.pi+eo;dB=math.pi/2-math.acos(en.z/ag)end;return setmetatable({latitude=math.deg(dB),longitude=math.deg(dC),altitude=dD,bodyId=iG.bodyId,systemId=iG.planetarySystemId},MapPosition)end;local iH=iF(planet,eg)iH="::pos{"..iH.systemId..","..iH.bodyId..","..iH.latitude..","..iH.longitude..","..iH.altitude.."}"if bM==0 and not iE then bL=iH end;if iE then return iH else system.setWaypoint(iH)return true end end;function io.showWayPoint(planet,eg,iE)return iD(planet,eg,iE)end;function io.APTick()aq=j()>0;ar=j()as=core.getAltitude()an=ix()bC=p()bi=bC;if antigrav then bO=antigrav.getState()==1 end;local iI=1;local iJ=1;local iK=bC-bi;local iL=-math.deg(it(bD,bG,bE))local iM=math.deg(it(bF,bG,bE))local g3=bI*-1;bh=aq and iL<-YawStallAngle or iL>YawStallAngle or iM<-PitchStallAngle or iM>PitchStallAngle;local iN=system.getMouseDeltaX()local iO=system.getMouseDeltaY()if InvertMouse and not Y then iO=-iO end;S=0;W=0;R=0;sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bG)if as==0 then as=(bK-planet.center):len()-planet.radius end;local h_=planet:getGravity(core.getConstructWorldPos()):len()*av;bj=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and Y then if not bd then ad=ad+iN;ae=ae+iO end else ad=0;ae=0 end else ad=ad+iN;ae=ae+iO;ag=math.sqrt(ad*ad+ae*ae)if not Y and l()==0 then if userControlScheme=="virtual joystick"then if ad>0 and ad>DeadZone then S=S-(ad-DeadZone)*MouseXSensitivity elseif ad<0 and ad<DeadZone*-1 then S=S-(ad+DeadZone)*MouseXSensitivity else S=0 end;if ae>0 and ae>DeadZone then R=R-(ae-DeadZone)*MouseYSensitivity elseif ae<0 and ae<DeadZone*-1 then R=R-(ae+DeadZone)*MouseYSensitivity else R=0 end else ad=0;ae=0;if userControlScheme=="mouse"then R=(-utils.smoothstep(iO,-100,100)+0.5)*2*iI;S=(-utils.smoothstep(iN,-100,100)+0.5)*2*iJ end end end end;local iP=bH>8334;if bH>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not iP then Z="Space Speed Engine Shutoff reached"ce(0)end;if not iP and LastIsWarping then if not BrakeIsOn then cC()end;if Autopilot then cu()end end;LastIsWarping=iP;if aq and ar>0.09 then if bH>bm/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bH<bm/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then V=1 else V=0 end;if ProgradeIsOn then if ak then BrakeIsOn=false;local iQ=false;if CustomTarget~=nil then iQ=cD(CustomTarget.position-bK,0.01)else iQ=cD(vec3(bG),0.01)end;bf=true;if iQ and(c(bS)<2 or c(bR)>85)and bH>=bm/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cO()elseif aq and AtmoSpeedAssist then ce(1)else ch(d(bm))end elseif bH>N then cD(vec3(bG),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bH>N then cD(-vec3(bG))end end;if not ProgradeIsOn and ak and not IntoOrbit then if ar==0 then O=true;cO()ak=false;am=true else ak=false;cu()end end;if bY and not bX and(not Autopilot or AutopilotCruising)then if cD(bY,0.1)then bY=ip[math.random(6)]end end;if am and CustomTarget~=nil and(as<HoldAltitude+200 and as>HoldAltitude-200)and bH*3.6>bm-100 and c(bJ)<20 and ar>=0.1 and(CustomTarget.position-bK):len()>2000+as then cu()am=false end;if VertTakeOff then bf=true;local iR=HoldAltitude;if bJ<-30 then Z="Unable to achieve lift. Safety Landing."ac=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bO or HoldAltitude<planet.spaceEngineMinAltitude then if bO then iR=antigrav.getBaseAltitude()end;if as<iR-100 then bn=0;ac=15;BrakeIsOn=false elseif bJ>0 then BrakeIsOn=true;ac=0 elseif bJ<-30 then BrakeIsOn=true;ac=15 elseif as>=iR then if bO then if Autopilot or VectorToTarget then cq()else BrakeIsOn=true;VertTakeOff=false end;Z="Takeoff complete. Singularity engaged"else BrakeIsOn=false;Z="VTO complete. Engaging Horizontal Flight"cq()end;ac=0 end else if ar>0.08 then bn=0;BrakeIsOn=false;ac=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bz then bn=0;ac=20 else ac=0;bn=36;ch(3500)end else bf=autoRollPreference;IntoOrbit=true;bx=false;CancelIntoOrbit=false;br=false;bp=nil;bq=nil;if bw==nil then bw=planet end;bv=iR;bu=true;VertTakeOff=false end end;if bn~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iS=q(bn-bR,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(iS)local iT=q(vTpitchPID:get(),-1,1)R=iT end end;if IntoOrbit then local cL;local iU=false;local iV,iW=cl(bv)local iX=iV..iW;if bw==nil then bw=planet;if VectorToTarget then bw=a9 end end;if not bu then bv=math.floor(bw.radius+bw.surfaceMaxAltitude+LowOrbitHeight)if bw.hasAtmosphere then bv=math.floor(bw.radius+bw.noAtmosphericDensityAltitude+LowOrbitHeight)end;bu=true end;if bt.VectorToTarget then cL=CustomTarget.position-bK end;local iY,iZ=b9(bw):escapeAndOrbitalSpeed((bK-bw.center):len()-bw.radius)local i_=bS;if not br then local j0=false;local j1=false;ce(0)bq=0;bo="Aligning to orbital path - OrbitHeight: "..iX;if bt.VectorToTarget then cD(cL:normalize():project_on_plane(bI))iU=bE:dot(cL:project_on_plane(bD):normalize())>0.95 else cD(bG)iU=iL<0.5;if bH<150 then iU=true end end;R=0;bp=0;if bR<=bp+1 and bR>=bp-1 then j0=true else j0=false end;if i_<=bq+1 and i_>=bq-1 then j1=true else j1=false end;if j0 and j1 and iU then bp=nil;bq=nil;br=true end else if bt.VectorToTarget then cD(cL:normalize():project_on_plane(bI))elseif bH>150 then cD(bG)end;R=0;if bt.VectorToTarget then local a5,_=b7.computeDistanceAndTime(bH,bm/3.6,av,0,0,LastMaxBrake)if bx and cL:len()>15000+a5+as then bo="Orbiting to Target"if as-100<=bw.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bw.noAtmosphericDensityAltitude then bx=false end elseif bx or cL:len()<15000+a5+as then Z="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;O=true;am=true;bt.VectorToTarget,bt.AutopilotAlign=false,false;cr()cO()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bv*0.9 and as<bv*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bv*0.99 and orbit.apoapsis.altitude>=bv*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bx then if bx then BrakeIsOn=false;ce(0)bp=0;if not bt.VectorToTarget then Z="Orbit complete"cr()end else bB=bB+1;if bB>=2 then bx=true end end else bo="Adjusting Orbit - OrbitHeight: "..iX;bs=true;ch(iZ*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local j2=bJ;local j3=as-bv;local j4=c(j3)if bJ<10 and c(bR)<10 and j4<100 then j2=bJ*2 end;if j2<10 and c(bR)<10 and j4<100 then j2=j2*2 end;if j2<5 and c(bR)<5 and j4<100 then j2=j2*4 end;VSpdPID:inject(j2)bp=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(j3)bp=q(bp-q(OrbitAltPID:get(),-15,15),-90,90)end end else local j5=2.75;local j6=c(o(iY*j5))local j7=j6%50;if j7>0 then j6=j6-j7+50 end;BrakeIsOn=false;if as<bv*0.8 then bo="Escaping planet gravity - OrbitHeight: "..iX;bp=utils.map(bJ,200,0,-15,80)elseif as>=bv*0.8 and as<bv*1.15 then bo="Approaching orbital corridor - OrbitHeight: "..iX;j6=j6*0.75;bp=utils.map(bJ,100,-100,-15,65)elseif as>=bv*1.15 and as<bv*1.5 then bo="Approaching orbital corridor - OrbitHeight: "..iX;j6=j6*0.75;if bJ<0 or bs then bp=utils.map(as,bv*1.5,bv*1.01,-30,0)else bp=utils.map(as,bv*0.99,bv*1.5,0,30)end elseif as>bv*1.5 then bo="Reentering orbital corridor - OrbitHeight: "..iX;bp=-65;local j8=utils.map(bJ,-150,-400,1,0.55)j6=j6*j8 end;ch(d(j6))end end;if bp~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local j9=bp-bR;OrbitPitchPID:inject(j9)local ja=q(OrbitPitchPID:get(),-0.5,0.5)R=ja end end;if Autopilot and ar==0 and not ak then local jb,jc=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jd=(CustomTarget.position-a9.center):normalize()local je=jd:project_on_plane((a9.center-bK):normalize()):normalize()local jf=a9.center+je*(a9.radius+AutopilotTargetOrbit)local jg=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))if(bK-jf):len()<(bK-jg):len()then jb=jf else jb=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))AutopilotEndSpeed=0 end;AutopilotTargetCoords=jb;bc.showWayPoint(a9,AutopilotTargetCoords)jc=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jc=true;TargetSet=true;AutopilotRealigned=true;jb=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jd=(bK+bG*100000-a9.center):normalize()local je=jd:project_on_plane((a9.center-bK):normalize()):normalize()if je:len()<1 then jd=(bK+bE*100000-a9.center):normalize()je=jd:project_on_plane((a9.center-bK):normalize()):normalize()end;jb=a9.center+je*(a9.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jb;TargetSet=true;jc=true;AutopilotRealigned=true;bc.showWayPoint(a9,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(jb)-bK):len()local hn,ee,ef=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(e2)if e2.noAtmosphericDensityAltitude>0 then return e2.radius+e2.noAtmosphericDensityAltitude else return e2.radius+e2.surfaceMaxAltitude*1.5 end end)local ho=ee;if ef~=nil and ee~=nil then ho=math.min(ef,ee)end;if ho~=nil and ho<AutopilotDistance and hn.name==a9.name then AutopilotDistance=ho end;local iQ=true;local jh=(a9.center-(bK+vec3(bG):normalize()*AutopilotDistance)):len()-a9.radius;local hm,cp=cl(jh)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hm..'", "unit":"'..cp..'"}')local a5,a6;if not TurnBurn then a5,a6=iq(bH)else a5,a6=is(bH)end;if bH>300 and AutopilotAccelerating then local cL=vec3(jb)-bK;local ji=q(math.deg(it(bD,bG:normalize(),cL:normalize()))*bH/500,-90,90)local jj=q(math.deg(it(bF,bG:normalize(),cL:normalize()))*bH/500,-90,90)if c(ji)<20 and c(jj)<20 then ji=ji*2;jj=jj*2 end;if c(ji)<2 and c(jj)<2 then ji=ji*2;jj=jj*2 end;local iL=-math.deg(it(bD,bE,bG:normalize()))local iM=-math.deg(it(bF,bE,bG:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jj-iM)local jk=q(apPitchPID:get(),-1,1)R=R+jk;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ji-iL)local jl=q(apYawPID:get(),-1,1)S=S+jl;jc=true;if c(ji)>2 or c(jj)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jh<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(jh)end end;if not AutopilotCruising and not AutopilotBraking and not jc then iQ=cD((jb-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then iQ=cD(-vec3(bG):normalize())end;if AutopilotAccelerating then if not M then BrakeIsOn=false;ce(AutopilotInterplanetaryThrottle)F=x(AutopilotInterplanetaryThrottle,2)M=true end;local jm=unit.getThrottle()if AtmoSpeedAssist then jm=F end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jm==0 and M then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;ce(0)end;if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;ce(0)M=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;V=1 end;if TurnBurn then ce(1,true)end;local _,iZ=b9(a9):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local cL;if CustomTarget~=nil then cL=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bH<50 then Z="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bH<=iZ and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then Z="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ce(0)M=false;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iZ=b9(a9):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bH<=iZ then if CustomTarget~=nil then if bG:normalize():dot(cL:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=true end else Z="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ce(0)M=false;ProgradeIsOn=true;ak=true;BrakeIsOn=false;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Z="Autopilot completed, orbit established"V=0;ce(0)M=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ak=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jm=unit.getThrottle()if AtmoSpeedAssist then jm=F end;if jm>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iQ then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ak then AutopilotTargetCoords=vec3(a9.center)+(AutopilotTargetOrbit+a9.radius)*bF;AutopilotShipUp=bD;AutopilotShipRight=bF end;AutopilotRealigned=true elseif iQ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not M then ce(AutopilotInterplanetaryThrottle,true)F=x(AutopilotInterplanetaryThrottle,2)M=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then Z="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V=0;ce(0)M=false;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,CustomTarget.position)end;if X then bf=true;local jj=0;local eZ=bK+vec3(unit.getMasterPlayerRelativePosition())local jn=eZ-bK;local jo=vec3(jn):project_on(bE):len()local jp=vec3(jn):project_on(bF):len()local ag=math.sqrt(jo*jo+jp*jp)cD(jn:normalize())local jq=40;local jr=ag<jq;local js=100;local jt=q((ag-jq)/2,10,js)R=0;local iQ=c(S)<0.1;if iQ and bH<jt and not jr then BrakeIsOn=false;jj=-20 else BrakeIsOn=true;jj=0 end;local ju=0;if c(jj-bR)>ju then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jj-bR)local jk=pitchPID:get()R=jk end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cw=unit.getClosestPlanetInfluence()>0;local jv=HoldAltitude-as;local jw=500+bH;local jx=1;if AutoTakeoff then jx=q(bH/100,0.1,1)end;local jj=(utils.smoothstep(jv,-jw,jw)-0.5)*2*MaxPitch*jx;if not Reentry and not ak and not VectorToTarget and bE:dot(bG:normalize())<0.99 then jj=(utils.smoothstep(jv,-jw*q(20-19*ar*10,1,20),jw*q(20-19*ar*10,1,20))-0.5)*2*MaxPitch*q(2-ar*10,1,2)*jx end;if not AltitudeHold then jj=0 end;if LockPitch~=nil then if cw and not IntoOrbit then jj=LockPitch else LockPitch=nil end end;bf=true;local jy=R;if Reentry then local jz=d(bm)local jA,jB=b7.computeDistanceAndTime(bH,jz/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)local jC=as-(planet.noAtmosphericDensityAltitude+5000)if not bQ and as>planet.noAtmosphericDensityAltitude+5000 and bH<=jz/3.6 and bH>jz/3.6-10 and c(bG:normalize():dot(bE))>0.9 then ce(0)elseif bQ and bH>jz/3.6 and(jA>-1 and jC<=jA or as<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;ch(jz,true)if not O then jj=-80;if ar>0.02 then Z="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jj=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and as>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then ch(jz)if not bQ and r:getTargetSpeed(axisCommandId.longitudinal)==bm then O=false;Reentry=false;bf=true end end end;if bH>N and not al and not VectorToTarget and not BrakeLanding and ForceAlignment then cD(vec3(bG))end;if(VectorToTarget or al)and AutopilotTargetIndex>0 and ar>0.01 then local cL;if CustomTarget~=nil then cL=CustomTarget.position-bK else cL=a9.center-bK end;local ji=math.deg(it(bI:normalize(),bG,cL))*2;local jD=math.rad(c(bS))if bH>minRollVelocity and ar>0.01 then local jE=q(90-jj*2,-90,90)bj=q(ji*2,-jE,jE)local jF=ji;ji=q(q(ji,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(jD)+4*(bR-jj)*math.sin(math.rad(bS)),-YawStallAngle*0.80,YawStallAngle*0.80)jj=q(q(jj*math.cos(jD),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(jF)*math.sin(jD),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bj=0;ji=q(ji,-YawStallAngle*0.80,YawStallAngle*0.80)end;local jG=iL-ji;if not bh and bH>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jG)local jl=q(yawPID:get(),-1,1)S=S+jl elseif aq and an>-1 or bH<minRollVelocity then cD(cL)elseif bh and ar>0.01 then if(iL<-YawStallAngle or iL>YawStallAngle)and ar>0.01 then cD(bG)end;if(iM<-PitchStallAngle or iM>PitchStallAngle)and ar>0.01 then jj=q(bR-iM,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not al then local iR=planet:getAltitude(CustomTarget.position)local jC=math.sqrt(cL:len()^2-(as-iR)^2)local jH=LastMaxBrakeInAtmo;if jH then jH=jH*q(bH/100,0.1,1)*ar else jH=LastMaxBrake end;if ar<0.01 then jH=LastMaxBrake end;local jI=bG:len()-c(bJ)local jJ=vec3(core.getWorldAirFrictionAcceleration())local jK=math.sqrt(jJ:len()-jJ:project_on(g3):len())*av;if bH>100 then a5,a6=b7.computeDistanceAndTime(bH,100,av,0,0,jH+jK)local jL,jM=b7.computeDistanceAndTime(100,0,av,0,0,jH/2)a5=a5+jL else a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jH/2)end;StrongBrakes=true;if not al and not Reentry and jC<=a5+bH*iK/2 and(bG:project_on_plane(bI):normalize():dot(cL:project_on_plane(bI):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"ce(0)if AltitudeHold then cs()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jI<0.1 or jC<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jC)then if not bO then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jC end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(al or Reentry)then if CustomTarget~=nil and a9.name==planet.name then local cL=CustomTarget.position-bK;local iR=planet:getAltitude(CustomTarget.position)local jC=math.sqrt(cL:len()^2-(as-iR)^2)local jH=LastMaxBrakeInAtmo;if jH then a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jH/2)StrongBrakes=true;if jC<=a5+bH*iK/2 and bG:project_on_plane(bI):normalize():dot(cL:project_on_plane(bI):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cO()end end;LastDistanceToTarget=jC end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(al or IntoOrbit or Reentry)then if not bx and not IntoOrbit then bv=HoldAltitude;bu=true;if VectorToTarget then bt.VectorToTarget=true end;cr()VectorToTarget=false;br=true end end;if bh and ar>0.01 and an==-1 and bH>minRollVelocity and VectorStatus~="Finalizing Approach"then cD(bG)jj=q(bR-iM,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end;R=jy;local iC=-1;if BrakeLanding then jj=0;local jN=false;local jO=30;if b8~=nil and b8>0 then local jK=0;local jP=q(ar,0.4,2)local jH=LastMaxBrakeInAtmo*q(bH/100,0.1,1)*jP;local jQ=b8*jP+jH+jK-h_;local jR=jH/2+jK-h_;local jS=bH-math.sqrt(c(jR/2)*20/(0.5*av))*utils.sign(jR)if jS<0 then jS=0 end;local jT;if bH>100 then local jU,_=b7.computeDistanceAndTime(bH,100,av,0,0,jH)local jV,_=b7.computeDistanceAndTime(100,0,av,0,0,math.sqrt(jH))jT=jU+jV else jT=b7.computeDistanceAndTime(bH,0,av,0,0,math.sqrt(jH))end;if jT<20 then BrakeIsOn=false else local jW=0;if jS>100 then local jX,_=b7.computeDistanceAndTime(jS,100,av,0,0,jQ)local jY,_=b7.computeDistanceAndTime(100,0,av,0,0,b8*jP+math.sqrt(jH)+jK-h_)jW=jX+jY else jW,_=b7.computeDistanceAndTime(jS,0,av,0,0,b8*jP+math.sqrt(jH)+jK-h_)end;jW=(jW+15+bH*iK)*1.1;local jZ=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jZ then local iR=planet:getAltitude(CustomTarget.position)local j_=as-iR-100;local cL=CustomTarget.position-bK;local k0=math.sqrt(cL:len()^2-(as-iR)^2)if k0>100 then jZ=false elseif j_<=jW or jW==-1 then BrakeIsOn=true;jN=true else BrakeIsOn=false;jN=true end end;if not jZ and CalculateBrakeLandingSpeed then if jW>=jO then BrakeIsOn=true else BrakeIsOn=false end;jN=true end end end;if not bQ then ce(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)iC=an;if iC>-1 then bf=autoRollPreference;if bH<1 or bG:normalize():dot(bI)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)ac=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bG:normalize():dot(-g3)<0.999 then BrakeIsOn=true elseif bJ<-brakeLandingRate and not jN then BrakeIsOn=true elseif not jN then BrakeIsOn=false end end;if AutoTakeoff or al then local hn,ef,ee;if AutopilotTargetCoords~=nil then hn,ef,ee=b6:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(e2)return e2.radius+e2.noAtmosphericDensityAltitude end)end;if bO then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;ce(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(jj)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not al then if bQ and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif al and bH<N then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;ce(0)elseif al then ce(0)BrakeIsOn=true end elseif al and ar==0 and a9~=nil and(hn==nil or hn.name==a9.name)then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;if not bQ then ce(0)end;AutopilotAccelerating=true end end;local k1=an>-1;local k2=bR;if(VectorToTarget or al)and not k1 and bH>minRollVelocity and ar>0.01 then local jD=math.rad(c(bS))k2=bR*c(math.cos(jD))+iM*math.sin(jD)end;local k3=q(jj-k2,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then k3=q(jj-k2,-85,MaxPitch)elseif ar<0.01 then k3=q(jj-k2,-MaxPitch,MaxPitch)end;if c(bS)<5 or VectorToTarget or BrakeLanding or k1 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(k3)local jk=pitchPID:get()R=R+jk end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;an=ix()return io end;function script.onStart()local function k4()local function k5(k6)local k7=dbHud_1.hasKey;for c_,d0 in pairs(k6)do if k7(d0)then local co=f(dbHud_1.getStringValue(d0))if co~=nil then _G[d0]=co;aL=true end end end end;if dbHud_1 then local k7=dbHud_1.hasKey;if not useTheseSettings then k5(c1())coroutine.yield()k5(b)else k5(b)Z="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"af=5;aL=false end;coroutine.yield()if aL then Z="Loaded Saved Variables"K=x(ResolutionX/2,0)L=x(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bm=AtmoSpeedLimit;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]elseif not useTheseSettings then Z="No Saved Variables Found - Exit HUD to save settings"end else Z="No databank found. Attach one to control unit and rerun the autoconfigure to save preferences and locations"end;if LastStartTime+180<bC then LastMaxBrakeInAtmo=0 end;LastStartTime=bC;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then Z="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"af=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=av end end;local function k8()local function k9(ka,kb)if ka>kb then kb=ka end;if ContainerOptimization>0 then kb=kb-kb*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then kb=kb-kb*FuelTankOptimization*0.05 end;return kb end;local kc=core.getElementNameById;local kd=fuelX~=0 and fuelY~=0;for c_ in pairs(at)do local type=core.getElementTypeById(at[c_])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(at[c_])),'^.*vertical.*$')then bN=true end end;if n(type,'^.*Space Engine$')then bA=true;if n(tostring(core.getElementTagsById(at[c_])),'^.*vertical.*$')then local ke=core.getElementRotationById(at[c_])if ke[4]<0 then if o(-ke[4],0.1)==0.5 then by=true end else if o(ke[4],0.1)==0.5 then bz=true end end end end;if type=="Landing Gear"then P=true end;if type=="Dynamic Core Unit"then local kf=h(at[c_])if kf>10000 then B=128 elseif kf>1000 then B=64 elseif kf>150 then B=32 end end;aR=aR+h(at[c_])if kd and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local kf=h(at[c_])local kg=k(at[c_])local ka=0;local fW=p()if type=="Atmospheric Fuel Tank"then local kb=400;local kh=35.03;if kf>10000 then kb=51200;kh=5480 elseif kf>1300 then kb=6400;kh=988.67 elseif kf>150 then kb=1600;kh=182.67 end;ka=kg-kh;if fuelTankHandlingAtmo>0 then kb=kb+kb*fuelTankHandlingAtmo*0.2 end;kb=k9(ka,kb)aO[#aO+1]={at[c_],kc(at[c_]),kb,kh,ka,fW}end;if type=="Rocket Fuel Tank"then local kb=320;local kh=173.42;if kf>65000 then kb=40000;kh=25740 elseif kf>6000 then kb=5120;kh=4720 elseif kf>700 then kb=640;kh=886.72 end;ka=kg-kh;if fuelTankHandlingRocket>0 then kb=kb+kb*fuelTankHandlingRocket*0.1 end;kb=k9(ka,kb)aQ[#aQ+1]={at[c_],kc(at[c_]),kb,kh,ka,fW}end;if type=="Space Fuel Tank"then local kb=2400;local kh=182.67;if kf>10000 then kb=76800;kh=5480 elseif kf>1300 then kb=9600;kh=988.67 end;ka=kg-kh;if fuelTankHandlingSpace>0 then kb=kb+kb*fuelTankHandlingSpace*0.2 end;kb=k9(ka,kb)aP[#aP+1]={at[c_],kc(at[c_]),kb,kh,ka,fW}end end end;if not bN then VertTakeOff,VertTakeOffEngine=false,false end end;local function ki()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(aq or not aq and as<10000)then for _,d0 in pairs(door)do d0.toggle()end end;if switch then for _,d0 in pairs(switch)do d0.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,d0 in pairs(forcefield)do d0.toggle()end end;if antigrav then bO=antigrav.getState()==1;if bO and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if P then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if an~=-1 or not aq and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not P then GearExtended=true end else BrakeIsOn=false end;if bg~=nil then r:setTargetGroundAltitude(bg)if bg==0 and not P then GearExtended=true;BrakeIsOn=true end else bg=a:getTargetGroundAltitude()if GearExtended then r:setTargetGroundAltitude(LandingGearGroundHeight)else r:setTargetGroundAltitude(TargetHoverHeight)end end;if aq and an~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function kj(kk,kl,km,kn,c9,ca,ko,kp,kq,kr)local ks={enableName=kk,disableName=kl,width=km,height=kn,x=c9,y=ca,toggleVar=ko,toggleFunction=kp,drawCondition=kq,hovered=false}if kr then table.insert(aI,ks)else table.insert(aH,ks)end;return ks end;local function kt(ku)if not bT then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif ku=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif ku=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif ku=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bU=c1(ku)showHud=false else bU={}showHud=true end end;local function kv()bT=not bT;if bT then aG=aI;Z="Hold SHIFT to see Settings"bV=showHud else aG=aH;Z="Hold SHIFT to see Control Buttons"kt()showHud=bV end end;local function kw(d0)_G[d0]=not _G[d0]if _G[d0]then Z=d0 .." set to true"else Z=d0 .." set to false"end;if d0=="showHud"then bV=_G[d0]elseif d0=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local function kx()local ky=50;local kz=340;local c9=500;local ca=aK/2-400;local kA=0;for c_,d0 in pairs(c1("boolean"))do if type(_G[d0])=="boolean"then kj(d0,d0,kz,ky,c9,ca,function()return _G[d0]end,function()kw(d0)end,function()return true end,true)ca=ca+ky+20;if kA==7 then c9=c9+kz+20;ca=aK/2-400;kA=0 else kA=kA+1 end end end;kj("Control View","Control View",kz,ky,10,aK/2-500,function()return true end,kv,function()return true end,true)kj("View Handling Settings",'Hide Handling Settings',kz,ky,10,aK/2-(500-ky),function()return showHandlingVariables end,function()kt("handling")end,function()return true end,true)kj("View Hud Settings",'Hide Hud Settings',kz,ky,10,aK/2-(500-ky*2),function()return showHudVariables end,function()kt("hud")end,function()return true end,true)kj("View Physics Settings",'Hide Physics Settings',kz,ky,10,aK/2-(500-ky*3),function()return showPhysicsVariables end,function()kt("physics")end,function()return true end,true)end;local function kB()local function kC()if dbHud_1 then local position=bK;local fP=planet.name..". "..#SavedLocations;if radar_1 then local dL,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dL~=nil and dL~=""then fP=fP.." "..radar_1.getConstructName(dL)end end;local cA={}cA={position=position,name=fP,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cA;table.insert(b1[0],cA)bb.UpdateAtlasLocationsList()Z="Location saved as "..fP else Z="Databank must be installed to save locations"end end;local function kD()TurnBurn=not TurnBurn end;local function kE(kF)if kF==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;X=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kG()kE(1)end;local function kH()local cz=-1;cz=bb.findAtlasIndex(b1[0])if cz>-1 then table.remove(b1[0],cz)end;cz=-1;cz=bb.findAtlasIndex(SavedLocations)if cz~=-1 then Z=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cz)end;bb.adjustAutopilotTargetIndex()bb.UpdateAtlasLocationsList()end;local function kI()local fP=AutopilotTargetName;if fP==nil then local hm,cp=cl((bK-CustomTarget.position):len())fP=CustomTarget.name.." "..hm..cp end;if fP==nil then fP="None"end;return"Engage Autopilot: "..fP end;local function kJ()local fP=AutopilotTargetName;if fP==nil then fP=CustomTarget.name end;if fP==nil then fP="None"end;return"Disable Autopilot: "..fP end;local function kK()if safeMass>0 then Z="Safe Mass set to "..x(av,2).." kg"else Z="Intruder Detection reset\nSafe Mass set to "..x(av,2).." kg"af=5;bM=0;if bL then system.setWaypoint(bL)end end;safeMass=av end;local ky=50;local kz=260;local kL=kj("Enable Brake Toggle","Disable Brake Toggle",kz,ky,aJ/2-kz/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then Z="Brakes in Toggle Mode"else Z="Brakes in Default Mode"end end)kj("Align Prograde","Disable Prograde",kz,ky,aJ/2-kz/2-50-kL.width,aK/2-ky+380,function()return ProgradeIsOn end,kG)kj("Align Retrograde","Disable Retrograde",kz,ky,aJ/2-kz/2+kL.width+50,aK/2-ky+380,function()return RetrogradeIsOn end,kE,function()return ar==0 end)local kM=kj(kI,kJ,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,cu)kj("Save Position","Save Position",200,kM.height,kM.x+kM.width+30,kM.y,function()return false end,kC,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)kj("Update Position","Update Position",200,kM.height,kM.x+kM.width+30,kM.y,function()return false end,cx,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kj("Clear Position","Clear Position",200,kM.height,kM.x-200-30,kM.y,function()return true end,kH,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ky=60;kz=300;local c9=10;local ca=aK/2-500;kj("Show Help","Hide Help",kz,ky,c9,ca,function()return showHelp end,function()showHelp=not showHelp end)ca=ca+ky+20;kj("View Settings","View Settings",kz,ky,c9,ca,function()return true end,kv)local ca=aK/2-300;kj("Enable Turn and Burn","Disable Turn and Burn",kz,ky,c9,ca,function()return TurnBurn end,kD)kj("Horizontal Takeoff Mode","Vertical Takeoff Mode",kz,ky,c9+kz+20,ca,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then Z="Vertical Takeoff Mode"else Z="Horizontal Takeoff Mode"end end,function()return bN end)ca=ca+ky+20;kj("Show Orbit Display","Hide Orbit Display",kz,ky,c9,ca,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then Z="Orbit Display Enabled"else Z="Orbit Display Disabled"end end)kj("Engage Orbiting","Cancel Orbiting",kz,ky,c9+kz+20,ca,function()return IntoOrbit end,cr,function()return ar==0 and unit.getClosestPlanetInfluence()>0 end)ca=ca+ky+20;kj("Glide Re-Entry","Cancel Glide Re-Entry",kz,ky,c9,ca,function()return Reentry end,function()ak=true;kG()end,function()return planet.hasAtmosphere and not aq end)kj("Parachute Re-Entry","Cancel Parachute Re-Entry",kz,ky,c9+kz+20,ca,function()return Reentry end,cO,function()return planet.hasAtmosphere and not aq end)ca=ca+ky+20;kj("Engage Follow Mode","Disable Follow Mode",kz,ky,c9,ca,function()return X end,ct,function()return l()==1 end)kj("Enable Repair Arrows","Disable Repair Arrows",kz,ky,c9+kz+20,ca,function()return aS end,function()aS=not aS;if aS then Z="Repair Arrows Enabled"else Z="Repair Arrows Diabled"end end,function()return l()==1 end)ca=ca+ky+20;if not ExternalAGG then kj("Enable AGG","Disable AGG",kz,ky,c9,ca,function()return bO end,cQ,function()return antigrav~=nil end)end;kj("Reset Intruder Alert","Set Safe Mass",kz,ky,c9+kz+20,ca,function()return safeMass>0 end,kK,function()return IntruderAlertSystem end)ca=ca+ky+20;kj(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,kz*2,ky,c9,ca,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})k4()coroutine.yield()k8()coroutine.yield()bc=im()ki()kx()kB()aG=aH;coroutine.yield()b1=d1()b5=d2()b6=b5(d1())b7=es()b9=eX()ba=fj()bb=id()bc=im()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,d0 in pairs(door)do d0.toggle()end end;if switch then for _,d0 in pairs(switch)do d0.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,d0 in pairs(forcefield)do d0.toggle()end end;safeMass=av;cW()if button then button.activate()end;if SetWaypointOnExit then bc.showWayPoint(planet,bK)end end;function script.onTick(kN)if kN=="tenthSecond"then local function kO()local kP=system.createData;local kQ=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=kQ(panelInterplanetary,"value")interplanetaryHeaderText=kP('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=kQ(panelInterplanetary,"value")widgetDistanceText=kP('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=kQ(panelInterplanetary,"value")widgetTravelTimeText=kP('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=kQ(panelInterplanetary,"value")widgetMaxMassText=kP('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=kQ(panelInterplanetary,"value")widgetTargetOrbitText=kP('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=kQ(panelInterplanetary,"value")widgetCurBrakeDistanceText=kP('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=kQ(panelInterplanetary,"value")widgetCurBrakeTimeText=kP('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=kQ(panelInterplanetary,"value")widgetMaxBrakeDistanceText=kP('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=kQ(panelInterplanetary,"value")widgetMaxBrakeTimeText=kP('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=kQ(panelInterplanetary,"value")widgetTrajectoryAltitudeText=kP('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function kR()s(panelInterplanetary)panelInterplanetary=nil end;local function kS()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a9.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local eV=bH;local jm=unit.getThrottle()/100;if AtmoSpeedAssist then jm=F end;local kT,kU=b7.computeDistanceAndTime(bH,MaxGameVelocity,av,a:maxForceForward()*jm,warmup,0)local a5,a6;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,kV;if not TurnBurn and eV>0 then _,kV=bc.GetAutopilotBrakeDistanceAndTime(eV)else _,kV=bc.GetAutopilotTBBrakeDistanceAndTime(eV)end;local kW=0;local kX=0;if AutopilotCruising or not Autopilot and eV>5 then kX=b7.computeTravelTime(eV,0,AutopilotDistance)elseif a5+kT<AutopilotDistance then kW=AutopilotDistance-(a5+kT)kX=b7.computeTravelTime(8333.0556,0,kW)else local kY=(AutopilotDistance-a5)/kT;kT=AutopilotDistance-a5;kU=kU*kY end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return kX elseif AutopilotBraking then return kV elseif AutopilotCruising then return kX+kV else return kU+a6+kX end end;if ar>0 and not WasInAtmo then if not bQ and AtmoSpeedAssist and(AltitudeHold or Reentry)then ce(1)J=false end end;if bP~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bP then ch(bP,TRUE)else bP=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then kO()end;if AutopilotTargetName~=nil then local kZ=CustomTarget~=nil;planetMaxMass=LastMaxBrakeInAtmo/a9:getGravity(a9.center+vec3(0,0,1)*a9.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=kS()if kZ and not Autopilot then ag=(bK-CustomTarget.position):len()else ag=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hm,cp=cl(ag)t(widgetDistanceText,'{"label": "distance", "value": "'..hm..'", "unit":"'..cp..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cR(travelTime)..'", "unit":""}')hm,cp=cl(a5)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hm..'", "unit":"'..cp..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cR(a6)..'", "unit":""}')hm,cp=cl(a7)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hm..'", "unit":"'..cp..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cR(a8)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')hm,cp=cl(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",hm)..'", "unit":"'..cp..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if ar==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else kR()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;if bM>0 then system.setWaypoint(system.getWaypointFromPlayerPos())end elseif kN=="oneSecond"then local function k_(h_,l0)if h_==nil then h_=core.g()end;h_=x(h_,5)if l0~=nil and l0 or(aN==nil or aN~=h_)then local eY=core.getVelocity()local eV=vec3(eY):len()local l1=f(unit.getData()).maxBrake;if l1~=nil and l1>0 and aq then l1=l1/q(eV/100,0.1,1)l1=l1/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+l1)/2 else LastMaxBrakeInAtmo=l1 end end end;if l1~=nil and l1>0 then LastMaxBrake=l1 end;aN=h_ end end;local function l2(fz)local l3=0;aE=""local l4=aR;local l5=0;local l6=0;local l7=0;local fY=0;local fZ=""local l8=core.getElementHitPointsById;for c_ in pairs(at)do local kf=0;local l9=0;l9=h(at[c_])kf=l8(at[c_])l5=l5+kf;if kf<l9 then if kf==0 then l7=l7+1 else l6=l6+1 end;if aS and#aB==0 then position=vec3(core.getElementPositionById(at[c_]))local c9=position.x-B;local ca=position.y-B;local la=position.z-B;table.insert(aB,core.spawnArrowSticker(c9,ca,la+1,"down"))table.insert(aB,core.spawnArrowSticker(c9,ca,la+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(c9+1,ca,la,"north"))table.insert(aB,core.spawnArrowSticker(c9+1,ca,la,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(c9-1,ca,la,"south"))table.insert(aB,core.spawnArrowSticker(c9-1,ca,la,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(c9,ca-1,la,"east"))table.insert(aB,core.spawnArrowSticker(c9,ca-1,la,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(c9,ca+1,la,"west"))table.insert(aB,core.spawnArrowSticker(c9,ca+1,la,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,at[c_])end elseif aS and#aB>0 and aB[11]==at[c_]then for fR in pairs(aB)do core.deleteSticker(aB[fR])end;aB={}end end;l3=d(l5/l4*100)if l3<100 then fz[#fz+1]=c8(0,0,"","pbright txt")fY=d(l3*2.55)fZ=e("rgb(%d,%d,%d)",255-fY,fY,0)if l3<100 then fz[#fz+1]=c8("50%",1035,"Elemental Integrity: "..l3 .."%","txtbig txtmid","fill:"..fZ)if l7>0 then fz[#fz+1]=c8("50%",1055,"Disabled Modules: "..l7 .." Damaged Modules: "..l6,"txtbig txtmid","fill:"..fZ)elseif l6>0 then fz[#fz+1]=c8("50%",1055,"Damaged Modules: "..l6,"txtbig txtmid","fill:"..fZ)end end end end;local function lb()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function lc()local fW=p()local ha=bH;local ld=fW-au;if ha>1.38889 then ha=ha/1000;local le=ha*(fW-au)TotalDistanceTravelled=TotalDistanceTravelled+le;aa=aa+le end;ab=ab+ld;TotalFlightTime=TotalFlightTime+ld;au=fW end;local function lf()if safeMass>0 then if av>safeMass+50 then bM=d(av-safeMass)safeMass=-1 elseif av<safeMass then safeMass=av end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;ao=false;k_(nil,true)if IntruderAlertSystem then lf()end;lc()ba.UpdateRadar()lb()local fz={}ba.ExtraData(fz)if ShowOdometer then fz=ba.DrawOdometer(fz,aa,TotalDistanceTravelled,ab)end;if ShouldCheckDamage then l2(fz)end;ai=table.concat(fz,"")collectgarbage("collect")elseif kN=="fiveSecond"then ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local co=f(dbHud_1.getStringValue("SavedLocations"))if co~=nil then _G["SavedLocations"]=co;local cz=-1;local cA;for c_,d0 in pairs(SavedLocations)do if d0.name and d0.name=="SatNav Location"then cz=c_;break end end;if cz~=-1 then cA=SavedLocations[cz]cz=-1;for c_,d0 in pairs(b1[0])do if d0.name and d0.name=="SatNav Location"then cz=c_;break end end;if cz>-1 then b1[0][cz]=cA end;bb.UpdateAtlasLocationsList()Z=cA.name.." position updated"end end;for i=1,#bW do if bW[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bW[i].name)bb.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif kN=="msgTick"then local fz={}ba.DisplayMessage(fz,"empty")Z="empty"unit.stopTimer("msgTick")af=3 elseif kN=="animateTick"then be=true;bd=false;ad=0;ae=0;unit.stopTimer("animateTick")elseif kN=="hudTick"then local function lg(fz)local lh=d(q(ag/(aJ/4)*255,0,255))fz[#fz+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ad,ae,d(C+0.5)+lh,d(E+0.5)-lh,d(D+0.5)-lh)end;local function li()for _,d0 in pairs(aG)do if d0.hovered then if not d0.drawCondition or d0.drawCondition()then d0.toggleFunction()end;d0.hovered=false end end end;local function lj()local function lk(ll,lm,c9,ca,km,kn)if ll>c9 and ll<c9+km and lm>ca and lm<ca+kn then return true else return false end end;local c9=ad+aJ/2;local ca=ae+aK/2;for _,d0 in pairs(aG)do d0.hovered=lk(c9,ca,d0.x,d0.y,d0.width,d0.height)end end;local function ln(fz)local function lo(fz,lp,hover,c9,ca,eO,lq,lr,ls,lt,lu)if type(lt)=="function"then lt=lt()end;if type(lu)=="function"then lu=lu()end;fz[#fz+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c9,ca,eO,lq)if lp then fz[#fz+1]=e("%s'",lr)else fz[#fz+1]=ls end;if hover then fz[#fz+1]=" style='stroke:white; stroke-width:2'"else fz[#fz+1]=" style='stroke:black; stroke-width:1'"end;fz[#fz+1]="></rect>"fz[#fz+1]=e("<text x='%f' y='%f' font-size='24' fill='",c9+eO/2,ca+lq/2+5)if lp then fz[#fz+1]="black"else fz[#fz+1]="white"end;fz[#fz+1]="' text-anchor='middle' font-family='Montserrat'>"if lp then fz[#fz+1]=e("%s</text>",lt)else fz[#fz+1]=e("%s</text>",lu)end end;local lv="rgb(50,50,50)'"local lw="rgb(210,200,200)"local lx=lo;for _,d0 in pairs(aG)do local kl=d0.disableName;local kk=d0.enableName;if type(kl)=="function"then kl=kl()end;if type(kk)=="function"then kk=kk()end;if not d0.drawCondition or d0.drawCondition()then lx(fz,d0.toggleVar(),d0.hovered,d0.x,d0.y,d0.width,d0.height,lw,lv,kl,kk)end end end;local fz={}ba.HUDPrologue(fz)if showHud then ba.UpdateHud(fz)else if AlwaysVSpd then ba.DrawVerticalSpeed(fz,as)end;ba.DisplayOrbitScreen(fz)ba.DrawWarnings(fz)end;if bT and bU~={}then ba.DrawSettings(fz)end;ba.HUDEpilogue(fz)fz[#fz+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if Z~="empty"then ba.DisplayMessage(fz,Z)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then ba.DrawDeadZone(fz)end end;if w()==0 then if l()==1 and Y then lj()ln(fz)if not bd and not be then local ly=table.concat(fz,"")fz={}fz[#fz+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fz[#fz+1]=ly;fz[#fz+1]="</body>"bd=true;fz[#fz+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fz,"")system.setScreen(content)elseif be then local ly=table.concat(fz,"")fz={}fz[#fz+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fz[#fz+1]=ly;fz[#fz+1]="</body>"end;if not bd then fz[#fz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end else li()end else if not Y and l()==0 then li()if ag>DeadZone then if DisplayDeadZone then lg(fz)end end else lj()ln(fz)end;fz[#fz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end;fz[#fz+1]=[[</svg></body>]]content=table.concat(fz,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif kN=="apTick"then bc.APTick()end end;function script.onFlush()local function lz(lA,jt)local lB=vec3()local lC=vec3()if lA==axisCommandId.longitudinal then lB=vec3(core.getConstructOrientationForward())lC=bE elseif lA==axisCommandId.vertical then lB=vec3(core.getConstructOrientationUp())lC=bD elseif lA==axisCommandId.lateral then lB=vec3(core.getConstructOrientationRight())lC=bF else return vec3()end;local lD=vec3(core.getWorldGravity())local lE=lD:dot(lC)local lF=vec3(core.getWorldAirFrictionAcceleration())local lG=lF:dot(lC)local lH=vec3(core.getVelocity())local lI=lH:dot(lB)local lJ=jt*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lJ-lI)local lK=targetSpeedPID2:get()local lL=(lK-lG-lE)*lC;return lL end;local function lM(lA,jt)local lB=vec3()local lC=vec3()if lA==axisCommandId.longitudinal then lB=vec3(core.getConstructOrientationForward())lC=bE elseif lA==axisCommandId.vertical then lB=vec3(core.getConstructOrientationUp())lC=bD elseif lA==axisCommandId.lateral then lB=vec3(core.getConstructOrientationRight())lC=bF else return vec3()end;local lD=vec3(core.getWorldGravity())local lE=lD:dot(lC)local lF=vec3(core.getWorldAirFrictionAcceleration())local lG=lF:dot(lC)local lH=vec3(core.getVelocity())local lI=lH:dot(lB)local lJ=jt*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lJ-lI)local lK=targetSpeedPID:get()local lL=(lK-lG-lE)*lC;return lL end;local function lN(lO,g2,ii)local lP=lO:cross(ii):normalize_inplace()local gO=math.acos(q(lP:dot(-g2),-1,1))*constants.rad2deg;if lP:cross(-g2):dot(ii)<0 then gO=-gO end;return gO end;if antigrav and not ExternalAGG then if not bO and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bQ=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bQ and J then ce(0)J=false elseif not bQ and not J then F=0;J=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lQ=q(Q+R+system.getControlDeviceForwardInput(),-1,1)local lR=q(T+W+system.getControlDeviceYawInput(),-1,1)local lS=q(U+S-system.getControlDeviceLeftRightInput(),-1,1)local lT=V;bI=vec3(core.getWorldVertical())if bI==nil or bI:len()==0 then bI=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bD=vec3(core.getConstructWorldOrientationUp())bE=vec3(core.getConstructWorldOrientationForward())bF=vec3(core.getConstructWorldOrientationRight())bG=vec3(core.getWorldVelocity())av=core.getConstructMass()bH=vec3(bG):len()bJ=-bI:dot(bG)bS=getRoll(bI,bE,bF)local lU=bS/180*math.pi;local lV=math.cos(lU)local lW=math.sin(lU)bR=lN(bI,bE,bF*lV+bD*lW)local lX=bG:normalize()local lY=c(bS)local lZ=utils.sign(bS)local l_=vec3(core.getWorldAngularVelocity())local m0=lQ*pitchSpeedFactor*bF+lR*rollSpeedFactor*bE+lS*yawSpeedFactor*bD;if bI:len()>0.01 and(ar>0.0 or ProgradeIsOn or Reentry or ak or AltitudeHold or IntoOrbit)then if bf==true and c(bj-bS)>autoRollRollThreshold and lR==0 and c(bR)<85 then local m1=bj;local m2=autoRollFactor;if ar==0 then m2=m2/4;bj=0;m1=0 end;if rollPID==nil then rollPID=pid.new(m2*0.01,0,m2*0.1)end;rollPID:inject(m1-bS)local m3=rollPID:get()m0=m0+m3*bE end end;if bI:len()>0.01 and ar>0.0 then local m4=20.0;if turnAssist==true and lY>m4 and lQ==0 and lS==0 then local m5=turnAssistFactor*0.1;local m6=turnAssistFactor*0.025;local m7=(lY-m4)/(180-m4)*180;local m8=0;if m7<90 then m8=m7/90 elseif m7<180 then m8=(180-m7)/90 end;m8=m8*m8;local m9=-lZ*m6*(1.0-m8)local ma=m5*m8;m0=m0+ma*bF+m9*bD end end;local mb=1;local mc=0;local md=1;if system.getMouseWheel()>0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local me=F;F=x(q(F+speedChangeLarge/100,-1,1),2)if F>=0 and me<0 then F=0;aw=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local me=F;F=x(q(F-speedChangeLarge/100,-1,1),2)if F<=0 and me>0 then F=0;aw=false end end else aw=true end;G=0;if aq and AtmoSpeedAssist and bQ then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bm/3.6-bG:dot(bE))local mf=throttlePID:get()I=q(mf,-1,1)if I<F and ar>0.005 then H=true;r:setThrottleCommand(axisCommandId.longitudinal,q(I,0.01,1))else H=false;r:setThrottleCommand(axisCommandId.longitudinal,F)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-bm/3.6)local mg=q(brakePID:get(),0,1)if ar>0 and bJ<-80 or ar>0.005 then G=mg end;if G>0 then if H and I==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else I=q(I,0.01,1)end;local mh=''local mi=vec3()local mj=lz(axisCommandId.vertical,ac*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",mj,mc)local mk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mk=mk..ExtraLongitudeTags end;local ml=r:getAxisCommandType(axisCommandId.longitudinal)local mm=r:composeAxisAccelerationFromThrottle(mk,axisCommandId.longitudinal)local mn=lM(axisCommandId.lateral,LeftAmount*1000)mh=mh..' , '.."lateral airfoil , lateral ground "mi=mi+mn;if mi:len()>constants.epsilon then a:setEngineForceCommand(mh,mi,mc,'','','',md)end;a:setEngineForceCommand(mk,mm,mb)local mo='thrust analog vertical fueled 'local mp='thrust analog lateral fueled 'if ExtraLateralTags~="none"then mp=mp..ExtraLateralTags end;if ExtraVerticalTags~="none"then mo=mo..ExtraVerticalTags end;if ac~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mo,mj,mb)else a:setEngineForceCommand(mo,vec3(),mb)end;if LeftAmount~=0 then a:setEngineForceCommand(mp,mn,mb)else a:setEngineForceCommand(mp,vec3(),mb)end;if lT==0 then lT=G end;local mq=-lT*(brakeSpeedFactor*bG+brakeFlatFactor*lX)a:setEngineForceCommand('brake',mq)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,F)end;local jt=unit.getAxisCommandValue(0)if not bQ then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-jt/3.6)local mg=q(brakePID:get(),0,1)lT=q(lT+mg,0,1)end;local mq=-lT*(brakeSpeedFactor*bG+brakeFlatFactor*lX)a:setEngineForceCommand('brake',mq)local mh=''local mi=vec3()local mr=false;local mk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mk=mk..ExtraLongitudeTags end;local ml=r:getAxisCommandType(axisCommandId.longitudinal)if ml==axisCommandType.byThrottle then local mm=r:composeAxisAccelerationFromThrottle(mk,axisCommandId.longitudinal)a:setEngineForceCommand(mk,mm,mb)elseif ml==axisCommandType.byTargetSpeed then local mm=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)mh=mh..' , '..mk;mi=mi+mm;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then mr=true end end;local mp='thrust analog lateral 'if ExtraLateralTags~="none"then mp=mp..ExtraLateralTags end;local ms=r:getAxisCommandType(axisCommandId.lateral)if ms==axisCommandType.byThrottle then local mt=r:composeAxisAccelerationFromThrottle(mp,axisCommandId.lateral)a:setEngineForceCommand(mp,mt,mb)elseif ms==axisCommandType.byTargetSpeed then local mn=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)mh=mh..' , '..mp;mi=mi+mn end;local mo='thrust analog vertical 'if ExtraVerticalTags~="none"then mo=mo..ExtraVerticalTags end;local mu=r:getAxisCommandType(axisCommandId.vertical)if mu==axisCommandType.byThrottle then local mj=r:composeAxisAccelerationFromThrottle(mo,axisCommandId.vertical)if ac~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mo,mj,mb,'airfoil','ground','',md)else a:setEngineForceCommand(mo,vec3(),mb)a:setEngineForceCommand('airfoil vertical',mj,mb,'airfoil','','',md)a:setEngineForceCommand('ground vertical',mj,mb,'ground','','',md)end elseif mu==axisCommandType.byTargetSpeed then if ac<0 then a:setEngineForceCommand('hover',vec3(),mb)end;local mv=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)mh=mh..' , '..mo;mi=mi+mv end;if mi:len()>constants.epsilon then if V~=0 or mr or c(lX:dot(bE))<0.8 then mh=mh..', brake'end;a:setEngineForceCommand(mh,mi,mc,'','','',md)end end;local mw=torqueFactor*(m0-l_)local mx=vec3(core.getWorldAirFrictionAngularAcceleration())mw=mw-mx;a:setEngineTorqueCommand('torque',mw,mb,'airfoil','','',md)a:setBoosterCommand('rocket_engine')if a4 and not VanillaRockets then local eV=vec3(core.getVelocity()):len()local my=0.15;if not bQ then local mz=r:getTargetSpeed(axisCommandId.longitudinal)if eV*3.6>mz*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eV*3.6<mz*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jm=unit.getThrottle()if AtmoSpeedAssist then jm=F*100 end;local jt=jm/100;if j==0 then jt=jt*MaxGameVelocity;if eV>=jt*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eV<jt*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jz=d(bm)jt=jt*jz/3.6;if eV>=jt*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eV<jt*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,co=coroutine.resume(beginSetup)if co then SetupComplete=true end else a:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(mA)local A=1;local function mB(mC)if mC then A=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a1;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+A*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a0;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a0 end else r:updateTargetGroundAltitudeFromActionStart(A*1.0)end end;local function mD(mC)if mC then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,A*speedChangeLarge)end else if mC then A=1 else A=nil end;bb.adjustAutopilotTargetIndex(A)end end;if mA=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;ce(0)if vBooster or hover then if aq and an==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false elseif aq then BrakeIsOn=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)else a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end;if P and not BrakeLanding then a.control.extendLandingGears()end else if P then a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif mA=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mA=="forward"then Q=Q-1 elseif mA=="backward"then Q=Q+1 elseif mA=="left"then T=T-1 elseif mA=="right"then T=T+1 elseif mA=="yawright"then U=U-1 elseif mA=="yawleft"then U=U+1 elseif mA=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mA=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mA=="up"then ac=ac+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mA=="down"then ac=ac-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mA=="groundaltitudeup"then mB()elseif mA=="groundaltitudedown"then mB(true)elseif mA=="option1"then bb.adjustAutopilotTargetIndex()toggleView=false elseif mA=="option2"then bb.adjustAutopilotTargetIndex(1)toggleView=false elseif mA=="option3"then local function mE()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mE()toggleView=false elseif mA=="option4"then cu()toggleView=false elseif mA=="option5"then local function mF()if LockPitch==nil then LockPitch=bR;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mF()toggleView=false elseif mA=="option6"then cs()toggleView=false elseif mA=="option7"then if bY==nil then bY=vec3(bG)else bY=nil end;toggleView=false elseif mA=="option8"then ct()toggleView=false elseif mA=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif mA=="lshift"then if w()==1 then Y=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then Y=true;be=false;bd=false end elseif mA=="brake"then if BrakeToggleStatus then cC()elseif not BrakeIsOn then cC()else BrakeIsOn=true end elseif mA=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif mA=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a4 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a4=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a4=false end elseif mA=="stopengines"then local function mG()if ao then ao=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;X=false;M=false;ak=false;al=false;O=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else ao=true end end;r:resetCommand(axisCommandId.longitudinal)mG()F=0 elseif mA=="speedup"then mD()elseif mA=="speeddown"then mD(true)elseif mA=="antigravity"and not ExternalAGG then if antigrav~=nil then cQ()end end end;function script.onActionStop(mA)local function mH()if not ExternalAGG and bO then a3=a1 end;if AltitudeHold or VertTakeOff or IntoOrbit then a2=a0 end end;if mA=="forward"then Q=0 elseif mA=="backward"then Q=0 elseif mA=="left"then T=0 elseif mA=="right"then T=0 elseif mA=="yawright"then U=0 elseif mA=="yawleft"then U=0 elseif mA=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mA=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mA=="up"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mA=="down"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mA=="groundaltitudeup"then mH()toggleView=false elseif mA=="groundaltitudedown"then mH()toggleView=false elseif mA=="lshift"then if w()==1 then Y=false;ad=0;ae=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then Y=false;be=false;bd=false end elseif mA=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cC()else BrakeIsOn=false end end elseif mA=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(mA)local A=1;local function mI(mC)if mC then A=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+A*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a2;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a2 end;a2=a2*1.05 else r:updateTargetGroundAltitudeFromActionLoop(A*1.0)end end;local function mJ(mC)if mC then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,A*speedChangeSmall)end end end;if mA=="groundaltitudeup"then mI()elseif mA=="groundaltitudedown"then mI(true)elseif mA=="speedup"then mJ()elseif mA=="speeddown"then mJ(true)end end;function script.onInputText(cb)local function mK()for c_,d0 in pairs(c1())do dbHud_1.setStringValue(d0,g(nil))end;for c_,d0 in pairs(b)do if d0~="SavedLocations"then dbHud_1.setStringValue(d0,g(nil))end end;Z="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"af=5;aL=false end;local function mL(mM,planet,eZ)local function mN(eZ)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local df='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dt,du,dB,dC,dD=n(eZ,df)if dt=="0"and du=="0"then return vec3(tonumber(dB),tonumber(dC),tonumber(dD))end;dC=math.rad(dC)dB=math.rad(dB)local planet=b1[tonumber(dt)][tonumber(du)]local ep=math.cos(dB)local mO=vec3(ep*math.cos(dC),ep*math.sin(dC),math.sin(dB))return planet.center+(planet.radius+dD)*mO end;if dbHud_1 then local cA={}local position=mN(eZ)if planet.name=="Space"then cA={position=position,name=mM,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cA={position=position,name=mM,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cA;table.insert(b1[0],cA)bb.UpdateAtlasLocationsList()else Z="Databank must be installed to save locations"end end;local i;local mP="/commands /setname /G /agg /addlocation /copydatabank /posWP"local mQ,mR=nil,nil;local mS="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cb," ")mQ=cb;if i~=nil then mQ=string.sub(cb,0,i-1)mR=string.sub(cb,i+1)end;if mQ=="/help"or mQ=="/commands"then for i5 in string.gmatch(mS,"([^\n]+)")do system.print(i5)end;return elseif mQ=="/setname"then if mR==nil or mR==""then Z="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cx(mR)else Z="Select a saved target to rename first"end elseif mQ=="/addlocation"then if mR==nil or mR==""or string.find(mR,"::")==nil then Z="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mR,"::")local mM=string.sub(mR,1,i-2)local eZ=string.sub(mR,i)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local df='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dt,du,dB,dC,dD=n(eZ,df)local planet=b1[tonumber(dt)][tonumber(du)]mL(mM,planet,eZ)Z="Added "..mM.." to saved locations,\nplanet "..planet.name.." at "..eZ;af=5 elseif mQ=="/agg"then if mR==nil or mR==""then Z="Usage: ah-agg targetheight"return end;mR=tonumber(mR)if mR<1000 then mR=1000 end;AntigravTargetAltitude=mR;Z="AGG Target Height set to "..mR elseif mQ=="/G"then if mR==nil or mR==""then Z="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if mR=="dump"then for c_,d0 in pairs(c1())do if type(_G[d0])=="boolean"then if _G[d0]==true then system.print(d0 .." true")else system.print(d0 .." false")end elseif _G[d0]==nil then system.print(d0 .." nil")else system.print(d0 .." ".._G[d0])end end;return end;i=string.find(mR," ")local mT=string.sub(mR,0,i-1)local mU=string.sub(mR,i+1)for c_,d0 in pairs(c1())do if d0==mT then Z="Variable "..mT.." changed to "..mU;local mV=type(_G[d0])if mV=="number"then mU=tonumber(mU)elseif mV=="boolean"then if string.lower(mU)=="true"then mU=true else mU=false end end;_G[d0]=mU;return end end;Z="No such global variable: "..mT elseif mQ=="/copydatabank"then if dbHud_2 then cW(true)else Z="Spare Databank required to copy databank"end elseif mQ=="/iphWP"then if AutopilotTargetIndex>0 then system.print(bc.showWayPoint(a9,AutopilotTargetCoords,true))Z="::pos waypoint shown in lua chat"else Z="No target selected in IPH"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
