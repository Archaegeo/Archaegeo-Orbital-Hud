name: ArchHud - Archaegeo v1.014 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        VertTakeOffEngine = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.014;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;local m=math.atan;local n=string.match;local tostring=tostring;local o=utils.round;local p=system.getTime;local function q(r,s)local t=10^(s or 0)return c(r*t+0.5)/t end;local u=SafeR;local v=SafeB;local w=SafeG;local x=false;local y=0;local z=0;local A=0;local B=false;local C=0;local D=false;local E=q(ResolutionX/2,0)local F=q(ResolutionY/2,0)local G=false;local H=55;local I=false;local J=false;local K=0;local L=0;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=false;local S=false;local T="empty"local U=5;local V=5;local W=false;local X,Y=0;local Z,a0=0;local a1=nil;local a2=0;local a3=0;local a4=false;local a5=0;local a6=0;local a7=0;local a8=3;local a9=0;local aa=""local ab=""local ac=0;local ad=false;local ae=false;local af=false;local ag=-1;local ah=false;local ai=""local aj=h()>0;local ak=h()local al=core.getAltitude()local am=core.getElementIdList()local an=p()local ao=nil;local ap=false;local aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]local ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local as={}local at=0;local au=0;local av=""local aw=true;local ax={}local ay=ResolutionX;local az=ResolutionY;local aA=false;local aB=false;local aC=0;local aD=nil;local aE={}local aF={}local aG={}local aH=0;local aI=false;local aJ={}local aK={}local aL=c(1/apTickRate)*2;local aM={}local aN={}local aO={}local aP={}local aQ=false;local aR=16;local aS=0;local aT=nil;local aU=""local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=false;local b4=false;local b5=autoRollPreference;local b6=LandingGearGroundHeight;local b7=system.getMouseDeltaX()local b8=system.getMouseDeltaY()local b9=false;local ba=p()local bb=0;local bc=0;local bd=0;local be=AtmoSpeedLimit;local bf=0;local bg=nil;local bh=0;local bi=0;local bj=false;local bk=false;local bl={VectorToTarget=false}local bm=false;local bn=0;local bo=nil;local bp=false;local bq=false;local br=false;local bs=false;local bt=0;local bu=p()local bv=vec3(core.getConstructWorldOrientationUp())local bw=vec3(core.getConstructWorldOrientationForward())local bx=vec3(core.getConstructWorldOrientationRight())local by=vec3(core.getWorldVelocity())local bz=vec3(by):len()local bA=vec3(core.getWorldVertical())local bB=vec3(core.getConstructWorldPos())local function bC(bD,bE)if bE==nil then bE=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not bE then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bD)z=q(bD*100,0)end;local function bF(bD,bE)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bE then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bD)end;local function bG(bH)if ay==1920 then return bH else return q(ay*bH/1920,0)end end;local function bI(bH)if az==1080 then return bH else return q(az*bH/1080,0)end end;local function bJ(bK,bL)if bK==nil then bK=core.g()end;bK=q(bK,5)if bL~=nil and bL or(aD==nil or aD~=bK)then local bM=core.getVelocity()local bN=vec3(bM):len()local bO=e(unit.getData()).maxBrake;if bO~=nil and bO>0 and aj then bO=bO/utils.clamp(bN/100,0.1,1)bO=bO/ak;if ak>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bO)/2 else LastMaxBrakeInAtmo=bO end end end;if bO~=nil and bO>0 then LastMaxBrake=bO end;aD=bK end end;local function bP()AtlasOrdered={}for bQ,bH in pairs(aT[0])do table.insert(AtlasOrdered,{name=bH.name,index=bQ})end;local function bR(bS,bT)return bS.name<bT.name end;table.sort(AtlasOrdered,bR)end;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*epsilon end;local function bX(bY,bZ)local b_=vec3(bZ)if bY.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=bY.planetarySystemId},MapPosition)end;local c0=b_-bY.center;local a9=c0:len()local c1=a9-bY.radius;local c2=0;local c3=0;if not bU(a9,0)then local c4=m(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a9)end;return setmetatable({latitude=math.deg(c2),longitude=math.deg(c3),altitude=c1,bodyId=bY.bodyId,systemId=bY.planetarySystemId},MapPosition)end;local function c5(a9,c6)local c7=a9>100000;local c8,c9=""if c6==nil then c6=1 end;if c7 then c8,c9=q(a9/1000/200,c6),"SU"elseif a9<1000 then c8,c9=q(a9,c6),"M"else c8,c9=q(a9/1000,c6),"KM"end;return c8,c9 end;local function ca(cb)for bQ,bH in pairs(cb)do if bH.name and bH.name==CustomTarget.name then return bQ end end;return-1 end;local function cc()if radarPanelID~=nil and ac==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ac==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ac=0 end end;local function cd()local ce=-1;local cf=-1;if vBooster then ce=vBooster.distance()end;if hover then cf=hover.distance()end;if ce~=-1 and cf~=-1 then if ce<cf then return ce else return cf end elseif ce~=-1 then return ce elseif cf~=-1 then return cf else return-1 end end;local function cg()if bu-bc<1.5 then if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bc=-1;if AltitudeHold then return end end else bc=bu end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;R=false;b5=true;LockPitch=nil;bp=false;if cd()==-1 then AutoTakeoff=false;if bc>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=al end end;if not aj then bp=false;bm=true;IntoOrbit=true;if not ae and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bc>-1 then HoldAltitude=al+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ae then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;b5=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bj=false;bh=nil;bi=nil;bt=0;if IntoOrbit then if bp then CancelIntoOrbit=false else CancelIntoOrbit=true end;bp=false;IntoOrbit=false;bo=nil elseif unit.getClosestPlanetInfluence()>0 and ak==0 then IntoOrbit=true;bp=false;CancelIntoOrbit=false;if bo==nil then bo=planet end else T="Unable to engage orbiting, not near planet or in atmosphere"end end;local function ch()if l()==1 then R=not R;if R then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b5=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else T="Follow Mode only works with Remote controller"R=false end end;local function ci()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a1=nil;CustomTarget=nil;return true end;local cj=AtlasOrdered[AutopilotTargetIndex].index;local ck=aT[0][cj]if ck.center then AutopilotTargetName=ck.name;a1=aZ[0][cj]if CustomTarget~=nil then if ak==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ck;for _,bH in pairs(aZ[0])do if bH.name==CustomTarget.planetname then a1=bH;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a1.center)else AutopilotTargetCoords=CustomTarget.position end;if a1.planetname~="Space"then if a1.hasAtmosphere then AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cl(cm)if not Autopilot and not VectorToTarget and not ae and not IntoOrbit then if cm==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then ci()else local cj=AtlasOrdered[AutopilotTargetIndex].index;local ck=aT[0][cj]if ck.name=="Space"then if cm==nil then cl()else cl(1)end else ci()end end else T="Disengage autopilot before changing Interplanetary Helper"end end;local function cn()local function co(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cg()end end;VectorStatus="Proceeding to Waypoint"end;if bu-bd<1.5 and ak>0 then if not bs then T="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bd=-1;if Autopilot or VectorToTarget then return end end else bd=bu end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ae and not IntoOrbit then ci()local cp=bX(a1,AutopilotTargetCoords)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ak~=0 then ae=true;cg()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ak>0 then bp=false;if not VectorToTarget then co(SpaceTarget)end else if al>100000 or al==0 then bp=false;Autopilot=true else ad=true;ProgradeIsOn=true;if AltitudeHold then cg()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ak~=0 then ae=true;cg()else Autopilot=true end end elseif ak==0 then local cq=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a1.name==planet.name and cq)then bp=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;R=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ae=true;cg()end else ae=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=al;TargetSet=false;Reentry=false;if IntoOrbit then if not bl.VectorToTarget then IntoOrbit=false else bl.VectorToTarget=false end end end end;local function cr(cs)local ct=-1;local cu;ct=ca(SavedLocations)if ct~=-1 then local cv;if cs~=nil then cu={position=SavedLocations[ct].position,name=cs,atmosphere=SavedLocations[ct].atmosphere,planetname=SavedLocations[ct].planetname,gravity=SavedLocations[ct].gravity}else cu={position=bB,name=SavedLocations[ct].name,atmosphere=ak,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[ct]=cu;ct=-1;ct=ca(aT[0])if ct>-1 then aT[0][ct]=cu end;bP()T=CustomTarget.name.." position updated"AutopilotTargetIndex=0;ci()else T="Name Not Found"end end;local function cw(cx,cy,bT)local cz=cx:cross(bT):normalize_inplace()local cA=math.acos(utils.clamp(cz:dot(-cy),-1,1))*constants.rad2deg;if cz:cross(-cy):dot(bT)<0 then cA=-cA end;return cA end;local function cB(cC,cD,cE)cD=cD:project_on_plane(cC)cE=cE:project_on_plane(cC)return m(cD:cross(cE):dot(cC),cD:dot(cE))end;local function cd()local ce=-1;local cf=-1;if vBooster then ce=vBooster.distance()end;if hover then cf=hover.distance()end;if ce~=-1 and cf~=-1 then if ce<cf then return ce else return cf end elseif ce~=-1 then return ce elseif cf~=-1 then return cf else return-1 end end;local function cF()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b5=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;b5=autoRollPreference;ad=false;af=false;a5=0 end end;local function cG(cH,cI)cH=vec3(cH)cI=vec3(cI):normalize()local c8=cH*cI;return c8.x+c8.y+c8.z end;local function cJ(cH,cK,cL)local cM=0.001;local cN=1;if not aj or not b9 or ag~=-1 or bz<H then local cO=cL;if cO==nil then cO=DampingMultiplier end;if cK==nil then cK=cM end;cH=vec3(cH):normalize()local cP=vec3()-cH;local cQ=-cG(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cG(cP,core.getConstructWorldOrientationUp())*cN;if at==0 then at=cQ/2 end;if au==0 then au=cR/2 end;if math.abs(cQ)<0.1 then M=M-cQ*2 else M=M-(cQ+(cQ-at)*cO)end;if math.abs(cR)<0.1 then L=L+cR*2 else L=L+cR+(cR-au)*cO end;at=cQ;au=cR;if math.abs(cQ)<cK and math.abs(cR)<cK then return true end;return false elseif b9 and ag==-1 then cH=by;local cO=cL;if cO==nil then cO=DampingMultiplier end;if cK==nil then cK=cM end;cH=vec3(cH):normalize()local cP=bw-cH;local cQ=-cG(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cG(cP,core.getConstructWorldOrientationUp())*cN;if at==0 then at=cQ/2 end;if au==0 then au=cR/2 end;if math.abs(cQ)<0.1 then M=M-cQ*5 else M=M-(cQ+(cQ-at)*cO)end;if math.abs(cR)<0.1 then L=L+cR*5 else L=L+cR+(cR-au)*cO end;at=cQ;au=cR;if math.abs(cQ)<cK and math.abs(cR)<cK then return true end;return false end end;local function cS()if Reentry then T="Re-Entry cancelled"Reentry=false;b5=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then T="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a8=5 elseif not I then StrongBrakes=planet.gravity*9.80665*k()<LastMaxBrakeInAtmo;if not StrongBrakes then T="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b5=true;BrakeIsOn=false;T="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;b5=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cT,cU=c5(HoldAltitude)T="Beginning Re-entry.  Target speed: "..be.." Target Altitude: "..cT..cU;bF(c(be))end;AutoTakeoff=false end;local function cV(bN)if not aj then bJ()return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*k())else return 0,0 end end end;local function cW(bN)bJ()return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;local function cX()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cY(cZ)local c_=0;local d0=0;local d1=0;if cZ<60 then cZ=c(cZ)elseif cZ<3600 then c_=c(cZ/60)cZ=c(cZ%60)elseif cZ<86400 then d0=c(cZ/3600)c_=c(cZ%3600/60)else d1=c(cZ/86400)d0=c(cZ%86400/3600)end;if d1>0 then return d1 .."d "..d0 .."h "elseif d0>0 then return d0 .."h "..c_.."m "elseif c_>0 then return c_.."m "..cZ.."s"elseif cZ>0 then return cZ.."s"else return"0s"end end;local function d2()local d3=-1;local d4=cd()if telemeter_1 then d3=telemeter_1.getDistance()end;if d4~=-1 and d3~=-1 then if d4<d3 then return d4 else return d3 end elseif d4~=-1 then return d4 else return d3 end end;local function d5()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function d6()local function d7(d8)return type(d8)=='number'end;local function d9(d8)return type(tonumber(d8))=='number'end;local function da(db)return type(db)=='table'end;local function dc(dd)return type(dd)=='string'end;local function de(bH)return da(bH)and d7(bH.x and bH.y and bH.z)end;local function df(dg)return da(dg)and d7(dg.latitude and dg.longitude and dg.altitude and dg.bodyId and dg.systemId)end;local dh=math.pi/180;local di=180/math.pi;local epsilon=1e-10;local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dj='::pos{'..r..','..r..','..r..','..r..','..r..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dk=utils.clamp;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*epsilon end;local function dl(d8)local c8=string.gsub(string.reverse(d('%.4f',d8)),'^0*%.?','')return c8==''and'0'or string.reverse(c8)end;local function dm(dn)if de(dn)then return d('{x=%.3f,y=%.3f,z=%.3f}',dn.x,dn.y,dn.z)end;if da(dn)and not getmetatable(dn)then local dp={}local dq=next(dn)if type(dq)=='nil'or dq==1 then dp=dn else for bQ,bH in pairs(dn)do local bD=dm(bH)if type(bQ)=='number'then table.insert(dp,d('[%s]=%s',bQ,bD))else table.insert(dp,d('%s=%s',bQ,bD))end end end;return d('{%s}',table.concat(dp,','))end;if dc(dn)then return d("'%s'",dn:gsub("'",[[\']]))end;return tostring(dn)end;local dr={}dr.__index=dr;dr.__tostring=function(dn,ds)local dt={}for bQ in pairs(dn)do table.insert(dt,bQ)end;table.sort(dt)local dp={}for _,bQ in ipairs(dt)do local bD=dm(dn[bQ])if type(bQ)=='number'then table.insert(dp,d('[%s]=%s',bQ,bD))else table.insert(dp,d('%s=%s',bQ,bD))end end;if ds then return d('%s%s',ds,table.concat(dp,',\n'..ds))end;return d('{%s}',table.concat(dp,','))end;dr.__eq=function(du,dv)return du.planetarySystemId==dv.planetarySystemId and du.bodyId==dv.bodyId and bU(du.radius,dv.radius)and bU(du.center.x,dv.center.x)and bU(du.center.y,dv.center.y)and bU(du.center.z,dv.center.z)and bU(du.GM,dv.GM)end;local function dw(dx,dy,dz,bZ,dA)assert(d9(dx),'Argument 1 (planetarySystemId) must be a number:'..type(dx))assert(d9(dy),'Argument 2 (bodyId) must be a number:'..type(dy))assert(d9(dz),'Argument 3 (radius) must be a number:'..type(dz))assert(da(bZ),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bZ))assert(d9(dA),'Argument 5 (GM) must be a number:'..type(dA))return setmetatable({planetarySystemId=tonumber(dx),bodyId=tonumber(dy),radius=tonumber(dz),center=vec3(bZ),GM=tonumber(dA)},dr)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dB)return d('::pos{%d,%d,%s,%s,%s}',dB.systemId,dB.bodyId,dl(dB.latitude*di),dl(dB.longitude*di),dl(dB.altitude))end;MapPosition.__eq=function(du,dv)return du.bodyId==dv.bodyId and du.systemId==dv.systemId and bU(du.latitude,dv.latitude)and bU(du.altitude,dv.altitude)and(bU(du.longitude,dv.longitude)or bU(du.latitude,math.pi/2)or bU(du.latitude,-math.pi/2))end;local function dC(dD,dy,c2,c3,c1)local dx=dD;if dc(dD)and not c3 and not c1 and not dy and not c2 then dx,dy,c2,c3,c1=n(dD,dj)assert(dx,'Argument 1 (position string) is malformed.')else assert(d9(dx),'Argument 1 (systemId) must be a number:'..type(dx))assert(d9(dy),'Argument 2 (bodyId) must be a number:'..type(dy))assert(d9(c2),'Argument 3 (latitude) must be in degrees:'..type(c2))assert(d9(c3),'Argument 4 (longitude) must be in degrees:'..type(c3))assert(d9(c1),'Argument 5 (altitude) must be in meters:'..type(c1))end;dx=tonumber(dx)dy=tonumber(dy)c2=tonumber(c2)c3=tonumber(c3)c1=tonumber(c1)if dy==0 then return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=dy,systemId=dx},MapPosition)end;return setmetatable({latitude=dh*dk(c2,-90,90),longitude=dh*(c3%360),altitude=c1,bodyId=dy,systemId=dx},MapPosition)end;local dE={}dE.__index=dE;dE.__tostring=function(dn,ds)local dF=ds and ds..'  'local dG={}local dt={}for bQ in pairs(dn)do table.insert(dt,bQ)end;table.sort(dt)for _,dH in ipairs(dt)do bdy=dn[dH]local dI=dr.__tostring(bdy,dF)if ds then table.insert(dG,d('[%s]={\n%s\n%s}',dH,dI,ds))else table.insert(dG,d('  [%s]=%s',dH,dI))end end;if ds then return d('\n%s%s%s',ds,table.concat(dG,',\n'..ds),ds)end;return d('{\n%s\n}',table.concat(dG,',\n'))end;local function dJ(dK)local aT={}local pid;for _,bH in pairs(dK)do local dL=bH.planetarySystemId;if type(dL)~='number'then error('Invalid planetary system ID: '..tostring(dL))elseif pid and dL~=pid then error('Mistringmatch planetary system IDs: '..dL..' and '..pid)end;local dM=bH.bodyId;if type(dM)~='number'then error('Invalid body ID: '..tostring(dM))elseif aT[dM]then error('Duplicate body ID: '..tostring(dM))end;setmetatable(bH.center,getmetatable(vec3.unit_x))aT[dM]=setmetatable(bH,dr)pid=dL end;return setmetatable(aT,dE)end;aY={}local function dN(dK)return setmetatable({galaxyAtlas=dK or{}},aY)end;aY.__index=function(db,i)if type(i)=='number'then local system=db.galaxyAtlas[i]return dJ(system)end;return rawget(aY,i)end;aY.__pairs=function(dn)return function(db,bQ)local dO,nv=next(db,bQ)return dO,nv and dJ(nv)end,dn.galaxyAtlas,nil end;aY.__tostring=function(dn)local dP={}for _,dQ in pairs(dn or{})do local dR=dQ:getPlanetarySystemId()local dS=dE.__tostring(dQ,'    ')table.insert(dP,d('  [%s]={%s\n  }',dR,dS))end;return d('{\n%s\n}\n',table.concat(dP,',\n'))end;aY.BodyParameters=dw;aY.MapPosition=dC;aY.PlanetarySystem=dJ;function aY.createBodyParameters(dT,dy,dU,dV,dW,dX,dY)assert(d9(dT),'Argument 1 (planetarySystemId) must be a number:'..type(dT))assert(d9(dy),'Argument 2 (bodyId) must be a number:'..type(dy))assert(d9(dU),'Argument 3 (surfaceArea) must be a number:'..type(dU))assert(da(dV),'Argument 4 (aPosition) must be an array or vec3:'..type(dV))assert(da(dW),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dW))assert(d9(dX),'Argument 6 (altitude) must be in meters:'..type(dX))assert(d9(dY),'Argument 7 (gravityAtPosition) must be number:'..type(dY))local dz=math.sqrt(dU/4/math.pi)local a9=dz+dX;local dZ=vec3(dV)+a9*vec3(dW)local dA=dY*a9*a9;return dw(dT,dy,dz,dZ,dA)end;aY.isMapPosition=df;function aY:getPlanetarySystem(dD)if i==nil then i=0 end;if nv==nil then nv=0 end;local dT=dD;if df(dD)then dT=dD.systemId end;if type(dT)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dE then system=dJ(system)end;return system end end end;function dE:castIntersections(d_,cI,e0,e1)local e0=e0 or function(e2)return 1.05*e2.radius end;local e3={}if e1 then for _,i in ipairs(e1)do e3[i]=self[i]end else e1={}for bQ,e2 in pairs(self)do table.insert(e1,bQ)e3[bQ]=e2 end end;local function e4(e5,e6)local e7=e3[e5].center-d_;local e8=e3[e6].center-d_;return e7:len()<e8:len()end;table.sort(e1,e4)local e9=cI:normalize()for i,dL in ipairs(e1)do local e2=e3[dL]local ea=e2.center-d_;local dz=e0(e2)local eb=ea:dot(e9)local ec=eb^2-(ea:len2()-dz^2)if ec>=0 then local ed=math.sqrt(ec)local ee=eb+ed;local ef=eb-ed;if ef>0 then return e2,ee,ef elseif ee>0 then return e2,ee,nil end end end;return nil,nil,nil end;function dE:closestBody(eg)assert(type(eg)=='table','Invalid coordinates.')local eh,e2;local ei=vec3(eg)for _,ej in pairs(self)do local ek=(ej.center-ei):len2()if(not e2 or ek<eh)and ej.name~="Space"then e2=ej;eh=ek end end;return e2 end;function dE:convertToBodyIdAndWorldCoordinates(dD)local el=dD;if dc(dD)then el=dC(dD)end;if el.bodyId==0 then return 0,vec3(el.latitude,el.longitude,el.altitude)end;local ej=self:getBodyParameters(el)if ej then return el.bodyId,ej:convertToWorldCoordinates(el)end end;function dE:getBodyParameters(dD)local dy=dD;if df(dD)then dy=dD.bodyId end;assert(d9(dy),'Argument 1 (bodyId) must be a number:'..type(dy))return self[dy]end;function dE:getPlanetarySystemId()local _,bH=next(self)return bH and bH.planetarySystemId end;function dr:convertToMapPosition(bZ)assert(da(bZ),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bZ))local b_=vec3(bZ)if self.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c0=b_-self.center;local a9=c0:len()local c1=a9-self.radius;local c2=0;local c3=0;if not bU(a9,0)then local c4=m(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a9)end;return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dr:convertToWorldCoordinates(dD)local el=dc(dD)and dC(dD)or dD;if el.bodyId==0 then return vec3(el.latitude,el.longitude,el.altitude)end;assert(df(el),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(el.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(el.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local em=math.cos(el.latitude)return self.center+(self.radius+el.altitude)*vec3(em*math.cos(el.longitude),em*math.sin(el.longitude),math.sin(el.latitude))end;function dr:getAltitude(bZ)return(vec3(bZ)-self.center):len()-self.radius end;function dr:getDistance(bZ)return(vec3(bZ)-self.center):len()end;function dr:getGravity(bZ)local en=self.center-vec3(bZ)local eo=en:len2()return self.GM/eo*en/math.sqrt(eo)end;return setmetatable(aY,{__call=function(_,...)return dN(...)end})end;local function ep(eq)if dbHud_1 then if not a4 then for bQ,bH in pairs(b)do dbHud_1.setStringValue(bH,f(_G[bH]))if eq and dbHud_2 then dbHud_2.setStringValue(bH,f(_G[bH]))end end;for bQ,bH in pairs(a)do dbHud_1.setStringValue(bH,f(_G[bH]))if eq and dbHud_2 then dbHud_2.setStringValue(bH,f(_G[bH]))end end;system.print("Saved Variables to Datacore")if eq and dbHud_2 then T="Databank copied.  Remove copy when ready."end end end end;local function er()local es={}local function et()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;local function eu()local ev=Nav.axisCommandManager:getAxisCommandType(0)local ew="TRAVEL"if ev==1 then ew="CRUISE"end;if Autopilot then ew="AUTOPILOT"end;return ew end;local function ex(ey,aQ,ez,eA,eB,eC,eD,eE)local eF=1;local eG=2;local eH=3;local eI=4;local eJ=5;local eK=6;local eL=""local eM=0;local eN=fuelY;local eO=fuelY+10;if l()==1 and not RemoteHud then eN=eN-50;eO=eO-50 end;ey[#ey+1]=[[<g class="pdim txtfuel">]]if eB=="ATMO"then eL="atmofueltank"elseif eB=="SPACE"then eL="spacefueltank"else eL="rocketfueltank"end;eM=_G[eL.."_size"]if#eC>0 then for i=1,#eC do local eP=string.sub(eC[i][eG],1,12)local eQ=0;for eR=1,eM do if eC[i][eG]==e(unit[eL.."_"..eR].getData()).name then eQ=eR;break end end;if aQ or eD[i]==nil or eE[i]==nil then local eS=0;local eT=0;local eU=0;local eV=0;local eW=p()if eQ~=0 then eE[i]=e(unit[eL.."_"..eQ].getData()).percentage;eD[i]=e(unit[eL.."_"..eQ].getData()).timeLeft;if eD[i]=="n/a"then eD[i]=0 end else eU=j(eC[i][eF])-eC[i][eI]eS=eC[i][eH]eE[i]=c(0.5+eU*100/eS)eT=eC[i][eJ]eV=eC[i][eK]if eT<=eU then eD[i]=0 else eD[i]=c(0.5+eU/((eT-eU)/(eW-eV)))end;eC[i][eJ]=eU;eC[i][eK]=eW end end;if eP==eA then eP=d("%s %d",eB,i)end;if eQ==0 then eP=eP.." *"end;local eX;if eD[i]==0 then eX="n/a"else eX=cY(eD[i])end;if eE[i]~=nil then local eY=c(eE[i]*2.55)local eZ=d("rgb(%d,%d,%d)",255-eY,eY,0)local e_=""if eX~="n/a"and eD[i]<120 or eE[i]<5 then if aQ then e_=[[class="red"]]end end;ey[#ey+1]=d([[
                                <text x=%d y="%d" %s>%s</text>
                                <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                            ]],ez,eN,e_,eP,ez,eO,eZ,eE[i],eX)eN=eN+30;eO=eO+30 end end end;ey[#ey+1]="</g>"end;local function f0(ey,c1)if c1<200000 and not aj or c1 and aj then local f1=-bA:dot(by)local f2=0;if math.abs(f1)>1 then f2=45*math.log(math.abs(f1),10)if f1<0 then f2=-f2 end end;ey[#ey+1]=d([[
                        <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                <text x="31" y="-41">1000</text>
                                <text x="-10" y="-65">100</text>
                                <text x="-54" y="-45">10</text>
                                <text x="-73" y="3">O</text>
                                <text x="-56" y="52">-10</text>
                                <text x="-14" y="72">-100</text>
                                <text x="29" y="50">-1000</text>
                                <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                            <g class="linethick">
                                <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                <circle r="90" />
                            </g>
                            <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                        </g>
                    ]],vSpdMeterX,vSpdMeterY,c(f1),c(f2))end;return ey end;local function f3(cy)local cm=-bA;cy=cy-cy:project_on(cm)local f4=vec3(0,0,1)f4=f4-f4:project_on(cm)local f5=f4:cross(cm)local f2=f4:angle_between(cy)*constants.rad2deg;if cy:dot(f5)<0 then f2=360-f2 end;return f2 end;local function f6(ey,centerX,centerY,f7,f8,cq)local f9=circleRad;local fa=20;fa=c(fa)local fb=c(f7)if cq then for i=-45,45,5 do local fc=i;ey[#ey+1]=d([[<g transform="rotate(%f,%d,%d)">]],fc,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ey[#ey+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+f9+fa-len,centerX,centerY+f9+fa)end;ey[#ey+1]=d([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY+f9+fa-35,f8,centerX,centerY+f9+fa-25,fb)ey[#ey+1]=d([[<g transform="rotate(%f,%d,%d)">]],-f7,centerX,centerY)ey[#ey+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+f9+fa-20,centerX+5,centerY+f9+fa-20,centerX,centerY+f9+fa-15)ey[#ey+1]="</g>"end;local fd=fb;if cq then fd=f3(bw)end;local fe=20;local ff=c(fd)local fg=0;local fh=centerY+f9+fa+20;local fi=centerX;if f8~="YAW"then fh=bI(130)fi=bG(960)end;local fj=[[<path class="txttick line" d="]]for i=c(ff-(fe+10)-ff%5+0.5),c(ff+fe+10+ff%5+0.5),5 do local ez=fi+-i*5+fd*5;if i%10==0 then fg=10;local r=i;if r==360 then r=0 elseif r>360 then r=r-360 elseif r<0 then r=r+360 end;ey[#ey+1]=d([[
                                <text x="%f" y="%f">%d</text>]],ez+5,fh-12,r)elseif i%5==0 then fg=5 end;if fg==10 then fj=d([[%s M %f %f v %d]],fj,ez,fh-5,fg)else fj=d([[%s M %f %f v %d]],fj,ez,fh-2.5,fg)end end;ey[#ey+1]=fj..[["/>]]ey[#ey+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fi-5,fh+10,fi+5,fh+10,fi,fh+5)if cq then f8="HDG"end;ey[#ey+1]=d([["
                    <g class="pdim txt txtmid">
                    <text x="%d" y="%d">%d deg</text>
                    <text x="%d" y="%d">%s</text>
                    </g>
                    ]],fi,fh+25,ff,fi,fh+35,f8)end;local function fk(ey,fl,f7,centerX,centerY,cq,fm,bN)local f9=circleRad;local fn=c(f9*3/5)if f9>0 then local fo=c(fl)local len=0;local fj=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*f7,centerX,centerY)if not aj then fj=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ey[#ey+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],f9-1,centerX,centerY)ey[#ey+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(fo-30-fo%5+0.5),c(fo+30+fo%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local fp=centerY+-i*5+fl*5;if len==30 then fj=d([[%s M %d %f h %d]],fj,centerX-fn-len,fp,len)if aj then ey[#ey+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*f7,centerX,centerY,centerX-fn+10,fp,i)ey[#ey+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*f7,centerX,centerY,centerX+fn-10,fp,i)if i==0 or i==180 or i==-180 then ey[#ey+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*f7,centerX,centerY,centerX-fn+20,fp,fn*2-40)end else ey[#ey+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-fn+10,fp,i)ey[#ey+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+fn-10,fp,i)end;fj=d([[%s M %d %f h %d]],fj,centerX+fn,fp,len)else fj=d([[%s M %d %f h %d]],fj,centerX-fn-len,fp,len)fj=d([[%s M %d %f h %d]],fj,centerX+fn,fp,len)end end;ey[#ey+1]=fj..[["/>]]local fq="PITCH"if not cq then fq="REL PITCH"end;if fl>90 and not aj then fl=90-(fl-90)elseif fl<-90 and not aj then fl=-90-(fl+90)end;if f9>200 then if aj then if bN>H then ey[#ey+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-15,"Yaw",centerX,centerY+20,fm)end;ey[#ey+1]=d([[<g transform="rotate(%f,%d,%d)">]],-f7,centerX,centerY)else ey[#ey+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ey[#ey+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-fn+25,centerY-5,centerX-fn+20,centerY,centerX-fn+25,centerY+5,centerX-fn+50,centerY+4,fo)ey[#ey+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+fn-25,centerY-5,centerX+fn-20,centerY,centerX+fn-25,centerY+5,centerX+fn-30,centerY+4,fo)ey[#ey+1]="</g>"end;local fr=c(f9/3)ey[#ey+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fr,centerY,f9-fr)if not aj and cq then ey[#ey+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*f7,centerX,centerY,centerX-fn+10,centerY,fn*2-20)end;ey[#ey+1]="</g>"if f9<200 then if aj and bN>H then ey[#ey+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-f9,fq,centerX,centerY-f9+10,fo,centerX,centerY-15,"Yaw",centerX,centerY+20,fm)else ey[#ey+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-f9,fq,centerX,centerY-f9+15,fo)end end end end;local function fs(ey,c1,cq)local ft=altMeterX;local fu=altMeterY;local fv=78;local fw=19;local fx=d2()if fx~=-1 then table.insert(ey,d([[
                    <g class="pdim altsm txtend">
                    <text x="%d" y="%d">AGL: %.1fm</text>
                    </g>
                    ]],ft+fv,fu+fw+20,fx))end;if cq and(c1<200000 and not aj or c1 and aj)then table.insert(ey,d([[
                        <g class="pdim">                        
                            <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                            <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                            <g clip-path="url(#alt)">]],ft-1,fu-4,fv+2,fw+6,ft+1,fu-1,fv-4,fw))local ct=0;local fy=1;local fz=0;local fA=c1<0;local fB=9;if fA then fB=0 end;local c1=math.abs(c1)while ct<6 do local fC=11;local fD=16;local fE=9;local fF=14;local e_="altsm"if ct>2 then fD=fD+3;fC=fC+2;fF=fF+2;fE=fE-6;e_="altbig"end;if fA then e_=e_.." red"end;local fG=c1/fy%10;local fH=c(fG)local fI=c((fH+1)%10)local fJ=fz;if ct==0 then fJ=fG-fH;if fA then fJ=1-fJ end end;if fA and(ct==0 or fz~=0)then local fK=fI;fI=fH;fH=fK end;local fL=fD*(fJ-1)local fM=fL+fD;local ez=ft+fE+(6-ct)*fC;local fp=fu+fF;table.insert(ey,d([[
                            <g class="%s">
                            <text x="%d" y="%f">%d</text>
                            <text x="%d" y="%f">%d</text>
                            </g>
                        ]],e_,ez,fp+fL,fI,ez,fp+fM,fH))ct=ct+1;fy=fy*10;if fH==fB then fz=fJ else fz=0 end end;table.insert(ey,[[</g></g>]])end end;local function fN(bM)bM=vec3(bM)local cA=-math.deg(m(bM.y,bM.z))+180;cA=cA-90;if cA<0 then cA=360+cA end;if cA>180 then cA=-180+cA-180 end;return-cA end;local function fO(bM)bM=vec3(bM)local fd=math.deg(m(bM.y,bM.x))-90;if fd<-180 then fd=360+fd end;return fd end;local function fP(ey,bM,bN,centerX,centerY)if bN>5 and not aj or bN>H then local f9=circleRad;local fQ=20;local fR=20;local fS=vec3(bM)local fT=fN(fS)local fU=fO(fS)local fV=14;local fW=fV/2;local fX=-fU/fR*f9;local fY=fT/fQ*f9;local ez=centerX+fX;local fp=centerY+fY;local a9=math.sqrt(fX^2+fY^2)local fZ=[[<circle
                    cx="]]..ez..[["
                    cy="]]..fp..[["
                    r="]]..fW/fV..[["
                    style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                 <circle
                    cx="]]..ez..[["
                    cy="]]..fp..[["
                    r="]]..fW..[["
                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                 <path
                    d="M ]]..ez-fV..[[,]]..fp..[[ h ]]..fW..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..ez+fW..[[,]]..fp..[[ h ]]..fW..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..ez..[[,]]..fp-fV..[[ v ]]..fW..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />]]if a9<f9 then ey[#ey+1]=fZ else local f2=m(fY,fX)local f_=4;local g0=centerX+f9*math.cos(f2)local g1=centerY+f9*math.sin(f2)ey[#ey+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',f2*180/math.pi,g0,g1,g0-f_,g1-f_/2,f_*2,f_,g0+f_,g1-f_,f_,f_,-f_,f_)end;if not aj then fT=fN(-fS)fU=fO(-fS)fX=-fU/fR*f9;fY=fT/fQ*f9;ez=centerX+fX;fp=centerY+fY;a9=math.sqrt(fX^2+fY^2)if a9<f9 then local g2=[[<circle
                            cx="]]..ez..[["
                            cy="]]..fp..[["
                            r="]]..fW..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                         <path
                            d="M ]]..ez..[[,]]..fp-fV..[[ v ]]..fW..[["
                            style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                         <use
                            xlink:href="#l"
                            transform="rotate(120,]]..ez..[[,]]..fp..[[)" />
                         <use
                            xlink:href="#l"
                            transform="rotate(-120,]]..ez..[[,]]..fp..[[)" />
                         <path
                            d="M ]]..ez-fW..[[,]]..fp..[[ h ]]..fV..[["
                            style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                            transform="rotate(-45,]]..ez..[[,]]..fp..[[)" id="c"/>
                        <use
                            xlink:href="#c"
                            transform="rotate(-90,]]..ez..[[,]]..fp..[[)"/>]]ey[#ey+1]=g2 end end end end;local function g3(ey,ew,g4,g5)g4=c(g4+0.5)local eN=throtPosY+10;local eO=throtPosY+20;if l()==1 and not RemoteHud then eN=55;eO=65 end;local g6="CRUISE"local unit="km/h"local bD=g5;if ew=="TRAVEL"or ew=="AUTOPILOT"then g6="THROT"unit="%"bD=g4;local g7="dim"if g4<0 then g7="red"end;ey[#ey+1]=d([[<g class="%s">
                        <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                        <g transform="translate(0 %.0f)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g>]],g7,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(g4),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ey[#ey+1]=d([[
                    <g class="pbright txtstart">
                            <text x="%s" y="%s">%s</text>
                            <text x="%s" y="%s">%.0f %s</text>
                    </g>
                </g>]],throtPosX+10,eN,g6,throtPosX+10,eO,bD,unit)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then g4=c(C*100+0.5)local g7="red"if g4<0 then g7="red"end;ey[#ey+1]=d([[<g class="%s">
                        <g transform="translate(0 %d)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g></g>]],g7,1-math.abs(g4),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)ey[#ey+1]=d([[
                            <g class="pbright txtstart">
                                    <text x="%s" y="%s">%s</text>
                                    <text x="%s" y="%s">%d %s</text>
                            </g>]],throtPosX+10,eN+40,"LIMIT",throtPosX+10,eO+40,g4,"%")end;if aj and AtmoSpeedAssist or Reentry then ey[#ey+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,eN-40,"LIMIT: ",be.." km/h")elseif not aj and Autopilot then ey[#ey+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,eN-40,"LIMIT: ",c(MaxGameVelocity*3.6+0.5).." km/h")end end;local function g8(ey,g9)local ga=throtPosY-10;local gb=throtPosX+10;ey[#ey+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then ga=75 end;ey[#ey+1]=d([[
                    <g class="pbright txtstart">
                        <text class="txtbig" x="%d" y="%d">%d km/h</text>
                    </g>
                </g>]],gb,ga,c(g9))end;local function gc(ey)ey[#ey+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],bG(1900),bI(1070),VERSION_NUMBER)ey[#ey+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ey[#ey+1]=d([[
                        <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bG(960),bI(550))ey[#ey+1]=d([[
                        <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bG(960),bI(600))ey[#ey+1]=d([[
                        <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bG(960),bI(650))end;local gd=bG(960)local ge=bI(860)local gf=bI(880)local gg=bI(900)local gh=bI(960)local gi=bI(200)local gj=bI(150)local gk=bI(960)if l()==1 and not RemoteHud then ge=bI(135)gf=bI(155)gg=bI(175)gi=bI(115)gj=bI(95)end;if BrakeIsOn then ey[#ey+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],gd,ge)elseif A>0 then ey[#ey+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],gd,ge,A)end;if aj and b9 and cd()==-1 then ey[#ey+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],gd,gi+50)end;if ao then ey[#ey+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],gd,gk)end;if GearExtended then if J then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],gd,gf)else ey[#ey+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],gd,gf)end;local gl,c9=c5(Nav:getTargetGroundAltitude())ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],gd,gg,gl..c9)end;if W then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],gd,gh+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(al-antigrav.getBaseAltitude())<501 then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],gd,gi+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else ey[#ey+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],gd,gi+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],gd,gi+20,AutopilotStatus)elseif LockPitch~=nil then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],gd,gi+20,c(LockPitch))elseif R then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],gd,gi+20)elseif Reentry then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],gd,gi+20)end;local gm,ee,ef=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(e2)if e2.noAtmosphericDensityAltitude>0 then return e2.radius+e2.noAtmosphericDensityAltitude else return e2.radius+e2.surfaceMaxAltitude*1.5 end end)local gn=ee;if ef~=nil and ee~=nil then gn=math.min(ef,ee)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local gl,c9=c5(HoldAltitude,2)ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],gd,gi,gl..c9)if BrakeIsOn then ey[#ey+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],gd,gi+50)end else local gl,c9=c5(HoldAltitude,2)ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],gd,gi,gl..c9)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ak>0.1 then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],gd,gi)elseif ak<0.09 and ak>0.05 then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],gd,gi)elseif ak<0.05 then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],gd,gi)end end;if IntoOrbit then if bg~=nil then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],gd,gi,bg)end end;if BrakeLanding then if StrongBrakes then ey[#ey+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],gd,gi)else ey[#ey+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],gd,gi)end end;if ProgradeIsOn then ey[#ey+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],gd,gi)end;if RetrogradeIsOn then ey[#ey+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],gd,gi)end;if TurnBurn then ey[#ey+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],gd,gj)elseif gn~=nil and ak==0 then local gl,c9=c5(gn)local travelTime=a_.computeTravelTime(bz,0,gn)local go="Collision"if gm.noAtmosphericDensityAltitude>0 then go="Atmosphere"end;ey[#ey+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],gd,gj,gm.name,go,cY(travelTime),gl..c9)end;if VectorToTarget and not IntoOrbit then ey[#ey+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],gd,gi+30,VectorStatus)end;ey[#ey+1]="</g>"return ey end;local function gp(bN)return c(q(bN*3.6,0)+0.5).." km/h"end;local function gq(ey)if orbit~=nil and ak<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local gr=OrbitMapX;local gs=OrbitMapY;local gt=OrbitMapSize;local gu=4;gs=gs+gu;local gv=15;local ez=gr+gt+gr/2+gu;local fp=gs+gt/2+5+gu;local gw,gx,gy,gz;gw=gt/4;gz=0;ey[#ey+1]=[[<g class="pbright txtorb txtmid">]]ey[#ey+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',gt+gr*2,gt+gs,gu,gu)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gy=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(gw*2)gx=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gy*(1-orbit.eccentricity)gz=gw-orbit.periapsis.altitude/gy-planet.radius/gy;local gA=""if orbit.periapsis.altitude<=0 then gA='redout'end;ey[#ey+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],gA,gr+gt/2+gz+gu,gs+gt/2+gu,gw,gx)ey[#ey+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',gr+gt/2+gu,gs+gt/2+gu,planet.radius/gy)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ey[#ey+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ez-35,fp-5,gr+gt/2+gw+gz,fp-5)ey[#ey+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],ez,fp)fp=fp+gv;local gl,c9=c5(orbit.apoapsis.altitude)ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,gl..c9)fp=fp+gv;ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,cY(orbit.timeToApoapsis))fp=fp+gv;ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,gp(orbit.apoapsis.speed))end;fp=gs+gt/2+5+gu;ez=gr-gr/2+10+gu;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ey[#ey+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ez+35,fp-5,gr+gt/2-gw+gz,fp-5)ey[#ey+1]=d([[<text x="%f" y="%f">Periapsis</text>]],ez,fp)fp=fp+gv;local gl,c9=c5(orbit.periapsis.altitude)ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,gl..c9)fp=fp+gv;ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,cY(orbit.timeToPeriapsis))fp=fp+gv;ey[#ey+1]=d([[<text x="%f" y="%f">%s</text>]],ez,fp,gp(orbit.periapsis.speed))end;ey[#ey+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],gr+gt/2+gu,20+gu,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gB=orbit.timeToApoapsis/orbit.period*2*math.pi;local gC=gw*math.cos(gB)local gD=gx*math.sin(gB)ey[#ey+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',gr+gt/2+gC+gz+gu,gs+gt/2+gD+gu)end;ey[#ey+1]=[[</g>]]return ey else return ey end end;function es.HUDPrologue(ey)if not x then u=PvPR;w=PvPG;v=PvPB else u=SafeR;w=SafeG;v=SafeB end;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local gE=aq;local gF=ar;local gG=aq;local gH=ar;if et()and not brightHud then gE=[[rgb(]]..c(u*0.4+0.5)..","..c(w*0.4+0.5)..","..c(v*0.3+0.5)..[[)]]gF=[[rgb(]]..c(u*0.3+0.5)..","..c(w*0.3+0.5)..","..c(v*0.2+0.5)..[[)]]end;ey[#ey+1]=d([[
                    <head>
                        <style>
                            body {margin: 0}
                            svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                            .txt {font-size:10px;font-weight:bold;}
                            .txttick {font-size:12px;font-weight:bold;}
                            .txtbig {font-size:14px;font-weight:bold;}
                            .altsm {font-size:16px;font-weight:normal;}
                            .altbig {font-size:21px;font-weight:normal;}
                            .line {stroke-width:2px;fill:none}
                            .linethick {stroke-width:3px;fill:none}
                            .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                            .warn {fill:orange;font-size:24px}
                            .crit {fill:darkred;font-size:28px}
                            .bright {fill:%s;stroke:%s}
                            .pbright {fill:%s;stroke:%s}
                            .dim {fill:%s;stroke:%s}
                            .pdim {fill:%s;stroke:%s}
                            .red {fill:red;stroke:red}
                            .redout {fill:none;stroke:red}
                            .op30 {opacity:0.3}
                            .op10 {opacity:0.1}
                            .txtstart {text-anchor:start}
                            .txtend {text-anchor:end}
                            .txtmid {text-anchor:middle}
                            .txtvspd {font-family:sans-serif;font-weight:normal}
                            .txtvspdval {font-size:20px}
                            .txtfuel {font-size:11px;font-weight:bold}
                            .txtorb {font-size:12px}
                            .txtorbbig {font-size:18px}
                            .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                            .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                            .cursor {stroke:white}
                        </style>
                    </head>
                    <body>
                        <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                        ]],gE,gE,gG,gG,gF,gF,gH,gH,ay,az)return ey end;function es.UpdateHud(ey)local c1=al;local bM=core.getVelocity()local bN=vec3(bM):len()local gI=getRoll(bA,bw,bx)local gJ=gI/180*math.pi;local gK=math.cos(gJ)local gL=math.sin(gJ)local cA=cw(bA,bw,bx*gK+bv*gL)local f7=gI;local fl=cA;local g4=c(unit.getThrottle())local g9=bN*3.6;local g5=unit.getAxisCommandValue(0)local gM=bG(1770)local gN=bI(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then g5=z;g4=z*100 end;local ew=eu()local f8="ROLL"local cq=unit.getClosestPlanetInfluence()>0;if g4==nil then g4=0 end;if not cq then if bN>5 then cA=fN(bM)gI=fO(bM)else cA=0;gI=0 end;f8="YAW"end;if y>50000 and not aj then local gO;if y>200000 then gO=q(y/200000,2).." su"else gO=q(y/1000,1).." km"end;ey[#ey+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],gM,gN,gO)end;ey[#ey+1]=ab;ey[#ey+1]=av;ey[#ey+1]=aa;if aS%aL==0 then aQ=true end;if fuelX~=0 and fuelY~=0 then ex(ey,aQ,fuelX,"Atmospheric ","ATMO",aE,aO,aP)ex(ey,aQ,fuelX+100,"Space fuel t","SPACE",aF,aM,aN)ex(ey,aQ,fuelX+200,"Rocket fuel ","ROCKET",aG,aJ,aK)end;if aQ then aQ=false;aS=0 end;aS=aS+1;f0(ey,c1)if l()==0 or RemoteHud then if not et()or brightHud then if cq then f6(ey,centerX,centerY,f7,f8,cq)fk(ey,fl,f7,centerX,centerY,cq,c(fO(bM)),bN)else f6(ey,centerX,centerY,gI,f8,cq)fk(ey,cA,gI,centerX,centerY,cq,c(gI),bN)end;fs(ey,c1,cq)fP(ey,bM,bN,centerX,centerY)end end;g3(ey,ew,g4,g5)g8(ey,g9)gc(ey)gq(ey)if screen_2 then local gP=bB;local ez=960+gP.x/aV;local fp=450+gP.y/aW;screen_2.moveContent(aX,(ez-80)/19.2,(fp-80)/10.8)end;return ey end;function es.HUDEpilogue(ey)ey[#ey+1]="</svg>"return ey end;function es.DrawOdometer(ey,a2,TotalDistanceTravelled,a3,gQ)local gR=bG(1240)local gS=bI(55)local gT=gS+10;local bK=core.g()local gU=0;local gV=0;local gW=0;local ew=eu()bJ(bK)if aj then gW=LastMaxBrakeInAtmo else gW=LastMaxBrake end;maxThrust=Nav:maxForceForward()aC=k()if not ShowOdometer then return end;local gX=vec3(core.getWorldAcceleration()):len()/9.80665;bK=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bK>0.1 then gV=aC*bK;gU=maxThrust/bK end;ey[#ey+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then gR=bG(1120)gS=bI(55)gT=gS+10 elseif aj then local gY=bG(770)ey[#ey+1]=d([[
                        <text x="%d" y="%d">ATMOSPHERE</text>
                        <text x="%d" y="%d">%.2f</text>
                    ]],gY,gS,gY,gT,ak)end;ey[#ey+1]=d([[
                    <g class="pbright txtend">
                    </g>
                    <text x="%d" y="%d">GRAVITY</text>
                    <text x="%d" y="%d">%.2f g</text>
                    <text x="%d" y="%d">ACCEL</text>
                    <text x="%d" y="%d">%.2f g</text>
                    ]],gR,gS,gR,gT,bK/9.80665,gR,gS+20,gR,gT+20,gX)ey[#ey+1]=d([[
                    <g class="pbright txt">
                    <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bG(660),bG(700),bI(35),bG(960),bI(55),bG(1240),bI(35),bG(1280))if l()==0 or RemoteHud then ey[#ey+1]=d([[
                        <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                        <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                        <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                        <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                        <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                        <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bG(700),bI(20),a2,bG(700),bI(30),TotalDistanceTravelled/1000,bG(830),bI(20),cY(a3),bG(830),bI(30),cY(TotalFlightTime),bG(970),bI(20),aC/1000,bG(1240),bI(10),gW/1000,bG(1240),bI(30),maxThrust/1000,bG(960),bI(180),ew)if bK>0.1 then ey[#ey+1]=d([[
                                <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                        ]],bG(970),bI(30),gU/1000,bG(1240),bI(20),gV/1000)else ey[#ey+1]=d([[
                            <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                            <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                        ]],bG(970),bI(30),bG(1240),bI(20))end else ey[#ey+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bG(960),bI(33),ew)end;ey[#ey+1]="</g>"return ey end;function es.DrawWarnings(ey)return gc(ey)end;function es.DisplayOrbitScreen(ey)return gq(ey)end;function es.DisplayMessage(ey,gl)if gl~="empty"then ey[#ey+1]=[[<text class="msg" x="50%%" y="310" >]]for gZ in string.gmatch(gl,"([^\n]+)")do ey[#ey+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],gZ)end;ey[#ey+1]=[[</text>]]end;if a8~=0 then unit.setTimer("msgTick",a8)a8=0 end end;function es.DrawDeadZone(ey)ey[#ey+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return es end;function script.onStart()local function g_()local function h0(h1)local h2=dbHud_1.hasKey;for bQ,bH in pairs(h1)do if h2(bH)then local c8=e(dbHud_1.getStringValue(bH))if c8~=nil then _G[bH]=c8;aA=true end end end end;if dbHud_1 then local h2=dbHud_1.hasKey;if not useTheseSettings then h0(a)else T="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a8=5 end;coroutine.yield()h0(b)if aA then T="Loaded Saved Variables (see Lua Chat Tab for list)"E=q(ResolutionX/2,0)F=q(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b5=autoRollPreference;be=AtmoSpeedLimit;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]else T="No Saved Variables Found - Stand up / leave remote to save settings"end else T="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bu then LastMaxBrakeInAtmo=0 end;LastStartTime=bu;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then T="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a8=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function h3()local function h4(h5,h6)if h5>h6 then h6=h5 end;if ContainerOptimization>0 then h6=h6-h6*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then h6=h6-h6*FuelTankOptimization*0.05 end;return h6 end;local h7=core.getElementNameById;local h8=fuelX~=0 and fuelY~=0;for bQ in pairs(am)do local type=core.getElementTypeById(am[bQ])if n(type,'^.*Space Engine$')then bs=true;if n(tostring(core.getElementTagsById(am[bQ])),'^.*vertical.*$')then local h9=core.getElementRotationById(am[bQ])if h9[4]<0 then if o(-h9[4],0.1)==0.5 then bq=true end else if o(h9[4],0.1)==0.5 then br=true end end end end;if type=="Landing Gear"then J=true end;if type=="Dynamic Core Unit"then local ha=g(am[bQ])if ha>10000 then aR=128 elseif ha>1000 then aR=64 elseif ha>150 then aR=32 end end;aH=aH+g(am[bQ])if h8 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local ha=g(am[bQ])local hb=j(am[bQ])local h5=0;local eW=p()if type=="Atmospheric Fuel Tank"then local h6=400;local hc=35.03;if ha>10000 then h6=51200;hc=5480 elseif ha>1300 then h6=6400;hc=988.67 elseif ha>150 then h6=1600;hc=182.67 end;h5=hb-hc;if fuelTankHandlingAtmo>0 then h6=h6+h6*fuelTankHandlingAtmo*0.2 end;h6=h4(h5,h6)aE[#aE+1]={am[bQ],h7(am[bQ]),h6,hc,h5,eW}end;if type=="Rocket Fuel Tank"then local h6=320;local hc=173.42;if ha>65000 then h6=40000;hc=25740 elseif ha>6000 then h6=5120;hc=4720 elseif ha>700 then h6=640;hc=886.72 end;h5=hb-hc;if fuelTankHandlingRocket>0 then h6=h6+h6*fuelTankHandlingRocket*0.1 end;h6=h4(h5,h6)aG[#aG+1]={am[bQ],h7(am[bQ]),h6,hc,h5,eW}end;if type=="Space Fuel Tank"then local h6=2400;local hc=182.67;if ha>10000 then h6=76800;hc=5480 elseif ha>1300 then h6=9600;hc=988.67 end;h5=hb-hc;if fuelTankHandlingSpace>0 then h6=h6+h6*fuelTankHandlingSpace*0.2 end;h6=h4(h5,h6)aF[#aF+1]={am[bQ],h7(am[bQ]),h6,hc,h5,eW}end end end end;local function hd()if gyro~=nil then ao=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(aj or not aj and al<10000)then for _,bH in pairs(door)do bH.toggle()end end;if switch then for _,bH in pairs(switch)do bH.toggle()end end;if forcefield and(aj or not aj==0 and al<10000)then for _,bH in pairs(forcefield)do bH.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if J then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local he=d2()if he~=-1 or not aj and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not J then GearExtended=true end else BrakeIsOn=false end;if b6~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b6)if b6==0 and not J then GearExtended=true;BrakeIsOn=true end else b6=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if aj and he~=-1 then b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aj end;local function hf(hg,hh,hi,hj,ez,fp,hk,hl,hm)local hn={enableName=hg,disableName=hh,width=hi,height=hj,x=ez,y=fp,toggleVar=hk,toggleFunction=hl,drawCondition=hm,hovered=false}table.insert(ax,hn)return hn end;local function ho()local function hp()if dbHud_1 then local position=bB;local eP=planet.name..". "..#SavedLocations;if radar_1 then local dL,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dL~=nil and dL~=""then eP=eP.." "..radar_1.getConstructName(dL)end end;local cu={}local hq=false;if planet.hasAtmosphere then hq=true end;cu={position=position,name=eP,atmosphere=hq,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cu;table.insert(aT[0],cu)bP()T="Location saved as "..eP else T="Databank must be installed to save locations"end end;local function hr()TurnBurn=not TurnBurn end;local function hs(ht)if ht==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;R=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hu()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*k()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;local function hv()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then cg()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then cg()end;AutoTakeoff=true;HoldAltitude=al+AutoTakeoffAltitude end;bp=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function hw()hs(1)end;local function hx()local ct=-1;ct=ca(aT[0])if ct>-1 then table.remove(aT[0],ct)end;ct=-1;ct=ca(SavedLocations)if ct~=-1 then T=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,ct)end;cl()bP()end;local function hy()local eP=AutopilotTargetName;if eP==nil then local gl,c9=c5((bB-CustomTarget.position):len())eP=CustomTarget.name.." "..gl..c9 end;if eP==nil then eP="None"end;return"Engage Autopilot: "..eP end;local function hz()local eP=AutopilotTargetName;if eP==nil then eP=CustomTarget.name end;if eP==nil then eP="None"end;return"Disable Autopilot: "..eP end;local hA=50;local hB=260;local hC=hf("Enable Brake Toggle","Disable Brake Toggle",hB,hA,ay/2-hB/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then T="Brakes in Toggle Mode"else T="Brakes in Default Mode"end end)hf("Align Prograde","Disable Prograde",hB,hA,ay/2-hB/2-50-hC.width,az/2-hA+380,function()return ProgradeIsOn end,hw)hf("Align Retrograde","Disable Retrograde",hB,hA,ay/2-hB/2+hC.width+50,az/2-hA+380,function()return RetrogradeIsOn end,hs,function()return ak==0 end)local hD=hf(hy,hz,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,cn)hf("Save Position","Save Position",200,hD.height,hD.x+hD.width+30,hD.y,function()return false end,hp,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hf("Update Position","Update Position",200,hD.height,hD.x+hD.width+30,hD.y,function()return false end,cr,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hf("Clear Position","Clear Position",200,hD.height,hD.x-200-30,hD.y,function()return true end,hx,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hA=60;hB=300;local ez=10;local fp=az/2-300;hf("Enable Turn and Burn","Disable Turn and Burn",hB,hA,ez,fp,function()return TurnBurn end,hr)hf("Engage Altitude Hold","Disable Altitude Hold",hB,hA,ez+hB+20,fp,function()return AltitudeHold end,cg)fp=fp+hA+20;hf("Engage Autoland","Disable Autoland",hB,hA,ez,fp,function()return AutoLanding end,hu)local hE,hF,hG;if VertTakeOffEngine then hE="Engage Vertical Takeoff"hF="Disable Vertical Takeoff"hG=VertTakeOff else hE="Engage Auto Takeoff"hF="Disable Auto Takeoff"hG=AutoTakeoff end;hf(hE,hF,hB,hA,ez+hB+20,fp,function()return hG end,hv)fp=fp+hA+20;hf("Show Orbit Display","Hide Orbit Display",hB,hA,ez,fp,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then T="Orbit Display Enabled"else T="Orbit Display Disabled"end end)hf("Engage Orbiting","Cancel Orbiting",hB,hA,ez+hB+20,fp,function()return IntoOrbit end,ToggleIntoOrbit,function()return ak==0 and unit.getClosestPlanetInfluence()>0 end)fp=fp+hA+20;hf("Glide Re-Entry","Cancel Glide Re-Entry",hB,hA,ez,fp,function()return Reentry end,function()ad=true;hw()end,function()return al>ReentryAltitude end)hf("Parachute Re-Entry","Cancel Parachute Re-Entry",hB,hA,ez+hB+20,fp,function()return Reentry end,cS,function()return al>ReentryAltitude end)fp=fp+hA+20;hf("Engage Follow Mode","Disable Follow Mode",hB,hA,ez,fp,function()return R end,ch,function()return l()==1 end)hf("Enable Repair Arrows","Disable Repair Arrows",hB,hA,ez+hB+20,fp,function()return aI end,function()aI=not aI;if aI then T="Repair Arrows Enabled"else T="Repair Arrows Diabled"end end,function()return l()==1 end)fp=fp+hA+20;if not ExternalAGG then hf("Enable AGG","Disable AGG",hB,hA,ez,fp,function()return antigrav.getState()==1 end,cX,function()return antigrav~=nil end)end;fp=fp+hA+20;hf(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,hB*2,hA,ez,fp,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hH()local hI=nil;local hJ=nil;local hK=nil;local hL=nil;aT=d5()for bQ,bH in pairs(aT[0])do if hI==nil or bH.center.x<hI then hI=bH.center.x end;if hJ==nil or bH.center.x>hJ then hJ=bH.center.x end;if hK==nil or bH.center.y<hK then hK=bH.center.y end;if hL==nil or bH.center.y>hL then hL=bH.center.y end end;aU=""local hM=1.1*(hJ-hI)/1920;local hN=1.4*(hL-hK)/1080;for bQ,bH in pairs(aT[0])do local ez=960+bH.center.x/hM;local fp=540+bH.center.y/hN;aU=aU..'<circle cx="'..ez..'" cy="'..fp..'" r="'..bH.radius/hM*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not n(bH.name,"Moon")and not n(bH.name,"Sanctuary")and not n(bH.name,"Space")then aU=aU.."<text x='"..ez.."' y='"..fp+bH.radius/hM*30+20 .."' font-size='28' fill="..aq.." text-anchor='middle' font-family='Montserrat'>"..bH.name.."</text>"end end;local gP=bB;local ez=960+gP.x/hM;local fp=540+gP.y/hN;aU=aU..'<circle cx="'..ez..'" cy="'..fp..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='"..ez.."' y='"..fp-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aU=aU..[[</svg>]]aV=hM;aW=hN;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aU)local gP=bB;local ez=960+gP.x/hM;local fp=540+gP.y/hN;aU='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='80' y='105' font-size='18' fill="..aq.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aX=screen_2.addContent((ez-80)/19.20,(fp-80)/10.80,aU)end end;local function hO()for bQ,bH in pairs(SavedLocations)do table.insert(aT[0],bH)end;bP()end;local function hP()local a_={}local hQ=30000000/3600;local hR=hQ*hQ;local hS=100;local function hT(bH)return 1/math.sqrt(1-bH*bH/hR)end;function a_.computeAccelerationTime(hU,hV,hW)local hX=hQ*math.asin(hU/hQ)return(hQ*math.asin(hW/hQ)-hX)/hV end;function a_.computeDistanceAndTime(hU,hW,hY,hZ,h_,i0)h_=h_ or 0;i0=i0 or 0;local i1=hU<=hW;local i2=hZ*(i1 and 1 or-1)/hY;local i3=-i0/hY;local i4=i2+i3;if i1 and i4<=0 or not i1 and i4>=0 then return-1,-1 end;local i5,i6=0,0;if i2~=0 and h_>0 then local hX=math.asin(hU/hQ)local i7=math.pi*(i2/2+i3)local i8=i2*h_;local i9=hQ*math.pi;local bH=function(db)local ia=(i7*db-i8*math.sin(math.pi*db/2/h_)+i9*hX)/i9;local ib=math.tan(ia)return hQ*ib/math.sqrt(ib*ib+1)end;local ic=i1 and function(dd)return dd>=hW end or function(dd)return dd<=hW end;i6=2*h_;if ic(bH(i6))then local id=0;while math.abs(i6-id)>0.5 do local db=(i6+id)/2;if ic(bH(db))then i6=db else id=db end end end;local ie=hU;local ig=i6/hS;for ih=1,hS do local bN=bH(ih*ig)i5=i5+(bN+ie)*ig/2;ie=bN end;if i6<2*h_ then return i5,i6 end;hU=ie end;local hX=hQ*math.asin(hU/hQ)local bu=(hQ*math.asin(hW/hQ)-hX)/i4;local ii=hR*math.cos(hX/hQ)/i4;local a9=ii-hR*math.cos((i4*bu+hX)/hQ)/i4;return a9+i5,bu+i6 end;function a_.computeTravelTime(hU,hV,a9)if a9==0 then return 0 end;if hV>0 then local hX=hQ*math.asin(hU/hQ)local ii=hR*math.cos(hX/hQ)/hV;return(hQ*math.acos(hV*(ii-a9)/hR)-hX)/hV end;if hU==0 then return-1 end;assert(hU>0,'Acceleration and initial speed are both zero.')return a9/hU end;function a_.lorentz(bH)return hT(bH)end;return a_ end;local function ij()local vec3=require('cpml.vec3')local d6=d6()local function dc(dd)return type(dd)=='string'end;local function da(db)return type(db)=='table'end;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c1)assert(self.body)local a9=c1+self.body.radius;if not bU(a9,0)then local orbit=math.sqrt(self.body.GM/a9)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dD,bM)assert(self.body)assert(da(dD)or dc(dD))assert(da(bM))local gP=(dc(dD)or d6.isMapPosition(dD))and self.body:convertToWorldCoordinates(dD)or vec3(dD)local bH=vec3(bM)local ik=gP-self.body.center;local e8=bH:len2()local il=ik:len()local im=self.body.GM;local io=((e8-im/il)*ik-ik:dot(bH)*bH)/im;local bV=im/(2*im/il-e8)local ip=io:len()local e9=io:normalize()local iq=bV*(1-ip)local ir=bV*(1+ip)local is=iq*e9+self.body.center;local it=ip<=1 and-ir*e9+self.body.center or nil;local iu=math.sqrt(bV*im*(1-ip*ip))local iv=it and 2*math.pi*math.sqrt(bV^3/im)local iw=math.acos(io:dot(ik)/(ip*il))if ik:dot(bH)<0 then iw=-(iw-2*math.pi)end;local ix=math.acos((math.cos(iw)+ip)/(1+ip*math.cos(iw)))local iy=ix;if iy<0 then iy=iy+2*math.pi end;local iz=iy-ip*math.sin(iy)local iA=0;local iB=0;local iC=0;if iv~=nil then iA=iz/(2*math.pi/iv)iB=iv-iA;iC=iB+iv/2;if iw-math.pi>0 then iB=iA;iC=iB+iv/2 end;if iC>iv then iC=iC-iv end end;return{periapsis={position=is,speed=iu/iq,circularOrbitSpeed=math.sqrt(im/iq),altitude=iq-self.body.radius},apoapsis=it and{position=it,speed=iu/ir,circularOrbitSpeed=math.sqrt(im/ir),altitude=ir-self.body.radius},currentVelocity=bH,currentPosition=gP,eccentricity=ip,period=iv,eccentricAnomaly=ix,meanAnomaly=iz,timeToPeriapsis=iB,timeToApoapsis=iC}end;local function iD(iE)local ej=d6.BodyParameters(iE.planetarySystemId,iE.bodyId,iE.radius,iE.center,iE.GM)return setmetatable({body=ej},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iD(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})g_()coroutine.yield()h3()coroutine.yield()hd()ho()coroutine.yield()hH()aY=d6()aZ=aY(d5())a_=hP()b1=ij()b2=er()hO()bP()ci()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ak>0 or ak==0 and al<10000)then for _,bH in pairs(door)do bH.toggle()end end;if switch then for _,bH in pairs(switch)do bH.toggle()end end;if forcefield and(ak>0 or ak==0 and al<10000)then for _,bH in pairs(forcefield)do bH.toggle()end end;ep()if button then button.activate()end end;function script.onTick(iF)local function iG()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aj then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iH()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iI(iJ)local dz=500000;local iK,iL,iM=math.huge;local iN=false;local iO=vec3({13771471,7435803,-128971})local iP=18000000;iK=vec3(iJ):dist(iO)if iK<iP then return true,math.abs(iK-iP),"Safe Zone",0 end;iL=vec3(iJ):dist(vec3(planet.center))if iL<dz then iN=true end;if math.abs(iL-dz)<math.abs(iK-iP)then return iN,math.abs(iL-dz),planet.name,planet.bodyId else return iN,math.abs(iK-iP),"Safe Zone",0 end end;local function iQ(ey)local iR=0;av=""local iS=aH;local iT=0;local iU=0;local iV=0;local eY=0;local eZ=""local iW=core.getElementHitPointsById;for bQ in pairs(am)do local ha=0;local iX=0;iX=g(am[bQ])ha=iW(am[bQ])iT=iT+ha;if ha<iX then if ha==0 then iV=iV+1 else iU=iU+1 end;if aI and#as==0 then position=vec3(core.getElementPositionById(am[bQ]))local ez=position.x-aR;local fp=position.y-aR;local iY=position.z-aR;table.insert(as,core.spawnArrowSticker(ez,fp,iY+1,"down"))table.insert(as,core.spawnArrowSticker(ez,fp,iY+1,"down"))core.rotateSticker(as[2],0,0,90)table.insert(as,core.spawnArrowSticker(ez+1,fp,iY,"north"))table.insert(as,core.spawnArrowSticker(ez+1,fp,iY,"north"))core.rotateSticker(as[4],90,90,0)table.insert(as,core.spawnArrowSticker(ez-1,fp,iY,"south"))table.insert(as,core.spawnArrowSticker(ez-1,fp,iY,"south"))core.rotateSticker(as[6],90,-90,0)table.insert(as,core.spawnArrowSticker(ez,fp-1,iY,"east"))table.insert(as,core.spawnArrowSticker(ez,fp-1,iY,"east"))core.rotateSticker(as[8],90,0,90)table.insert(as,core.spawnArrowSticker(ez,fp+1,iY,"west"))table.insert(as,core.spawnArrowSticker(ez,fp+1,iY,"west"))core.rotateSticker(as[10],-90,0,90)table.insert(as,am[bQ])end elseif aI and#as>0 and as[11]==am[bQ]then for eR in pairs(as)do core.deleteSticker(as[eR])end;as={}end end;iR=c(iT/iS*100)if iR<100 then ey[#ey+1]=[[<g class="pbright txt">]]eY=c(iR*2.55)eZ=d("rgb(%d,%d,%d)",255-eY,eY,0)if iR<100 then ey[#ey+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],eZ,iR)if iV>0 then ey[#ey+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],eZ,iV,iU)elseif iU>0 then ey[#ey+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],eZ,iU)end end;ey[#ey+1]=[[<\g>]]end end;local function iZ(ey)local i_=c(utils.clamp(a9/(ay/4)*255,0,255))ey[#ey+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a6,a7,c(u+0.5)+i_,c(w+0.5)-i_,c(v+0.5)-i_)end;local function j0()local j1=LastMaxBrakeInAtmo/a1:getGravity(a1.center+vec3(0,0,1)*a1.radius):len()return j1 end;local function j2()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a1.center-bB):len()else AutopilotDistance=(CustomTarget.position-bB):len()end end;local bN=bz;local j3=unit.getThrottle()/100;if AtmoSpeedAssist then j3=z end;local j4,j5=a_.computeDistanceAndTime(bz,MaxGameVelocity,k(),Nav:maxForceForward()*j3,warmup,0)local X,Y;if not TurnBurn then X,Y=cV(MaxGameVelocity)else X,Y=cW(MaxGameVelocity)end;local _,j6;if not TurnBurn and bN>0 then _,j6=cV(bN)else _,j6=cW(bN)end;local j7=0;local j8=0;if AutopilotCruising or not Autopilot and bN>5 then j8=a_.computeTravelTime(bN,0,AutopilotDistance)elseif X+j4<AutopilotDistance then j7=AutopilotDistance-(X+j4)j8=a_.computeTravelTime(8333.0556,0,j7)else local j9=(AutopilotDistance-X)/j4;j4=AutopilotDistance-X;j5=j5*j9 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return j8 elseif AutopilotBraking then return j6 elseif AutopilotCruising then return j8+j6 else return j5+Y+j8 end end;local function ja()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function jb()if radar_1 then local jc=radar_1.getEntries()local jd=radar_1.getData()local je=bG(1770)local jf=bI(330)if#jc>0 then local jg=jd:find('identifiedConstructs":%[%]')if jg==nil and perisPanelID==nil then ac=1;cc()end;if jg~=nil and perisPanelID~=nil then cc()end;if radarPanelID==nil then cc()end;aa=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],je,jf,#jc)local jh={}for bQ,bH in pairs(jc)do if radar_1.hasMatchingTransponder(bH)==1 then table.insert(jh,bH)end end;if#jh>0 then local fp=bI(15)local ez=bG(1370)aa=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aa,ez,fp)for bQ,bH in pairs(jh)do fp=fp+20;aa=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aa,ez,fp,radar_1.getConstructName(bH))end end else local ji;ji=jd:find('worksInEnvironment":false')if ji then aa=d([[
                                <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],je,jf)else aa=d([[
                                <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],je,jf)end;if radarPanelID~=nil then ac=0;cc()end end end end;local function jj()local eW=p()local g9=bz;local jk=eW-an;if g9>1.38889 then g9=g9/1000;local jl=g9*(eW-an)TotalDistanceTravelled=TotalDistanceTravelled+jl;a2=a2+jl end;a3=a3+jk;TotalFlightTime=TotalFlightTime+jk;an=eW end;local function jm()for _,bH in pairs(ax)do if bH.hovered then if not bH.drawCondition or bH.drawCondition()then bH.toggleFunction()end;bH.hovered=false end end end;local function jn()local function jo(jp,jq,ez,fp,hi,hj)if jp>ez and jp<ez+hi and jq>fp and jq<fp+hj then return true else return false end end;local ez=a6+ay/2;local fp=a7+az/2;for _,bH in pairs(ax)do bH.hovered=jo(ez,fp,bH.x,bH.y,bH.width,bH.height)end end;local function jr(ey)local function js(ey,jt,hover,ez,fp,ia,ju,jv,jw,jx,jy)if type(jx)=="function"then jx=jx()end;if type(jy)=="function"then jy=jy()end;ey[#ey+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",ez,fp,ia,ju)if jt then ey[#ey+1]=d("%s'",jv)else ey[#ey+1]=jw end;if hover then ey[#ey+1]=" style='stroke:white; stroke-width:2'"else ey[#ey+1]=" style='stroke:black; stroke-width:1'"end;ey[#ey+1]="></rect>"ey[#ey+1]=d("<text x='%f' y='%f' font-size='24' fill='",ez+ia/2,fp+ju/2+5)if jt then ey[#ey+1]="black"else ey[#ey+1]="white"end;ey[#ey+1]="' text-anchor='middle' font-family='Montserrat'>"if jt then ey[#ey+1]=d("%s</text>",jx)else ey[#ey+1]=d("%s</text>",jy)end end;local jz="rgb(50,50,50)'"local jA="rgb(210,200,200)"local jB=js;for _,bH in pairs(ax)do local hh=bH.disableName;local hg=bH.enableName;if type(hh)=="function"then hh=hh()end;if type(hg)=="function"then hg=hg()end;if not bH.drawCondition or bH.drawCondition()then jB(ey,bH.toggleVar(),bH.hovered,bH.x,bH.y,bH.width,bH.height,jA,jz,hh,hg)end end end;if iF=="tenthSecond"then if ak>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iG()end;if AutopilotTargetName~=nil then local jC=CustomTarget~=nil;planetMaxMass=j0()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=j2()if jC and not Autopilot then a9=(bB-CustomTarget.position):len()else a9=(AutopilotTargetCoords-bB):len()end;if not TurnBurn then X,Y=cV(bz)Z,a0=cV(MaxGameVelocity)else X,Y=cW(bz)Z,a0=cW(MaxGameVelocity)end;local gl,c9=c5(a9)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..gl..'", "unit":"'..c9 ..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cY(travelTime)..'", "unit":""}')gl,c9=c5(X)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..gl..'", "unit":"'..c9 ..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cY(Y)..'", "unit":""}')gl,c9=c5(Z)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..gl..'", "unit":"'..c9 ..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cY(a0)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')gl,c9=c5(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",gl)..'", "unit":"'..c9 ..'"}')if ak>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iH()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iF=="oneSecond"then ah=false;bJ(nil,true)jj()jb()ja()local ey={}ey=b2.DrawOdometer(ey,a2,TotalDistanceTravelled,a3)if ShouldCheckDamage then iQ(ey)end;ab=table.concat(ey,"")collectgarbage("collect")elseif iF=="fiveSecond"then ai=dbHud_1.getStringValue("SPBAutopilotTargetName")if ai~=nil and ai~=""and ai~="SatNavNotChanged"then local c8=e(dbHud_1.getStringValue("SavedLocations"))if c8~=nil then _G["SavedLocations"]=c8;local ct=-1;local cu;for bQ,bH in pairs(SavedLocations)do if bH.name and bH.name=="SatNav Location"then ct=bQ;break end end;if ct~=-1 then cu=SavedLocations[ct]ct=-1;for bQ,bH in pairs(aT[0])do if bH.name and bH.name=="SatNav Location"then ct=bQ;break end end;if ct>-1 then aT[0][ct]=cu end;bP()T=cu.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ai then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ci()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iF=="msgTick"then local ey={}b2.DisplayMessage(ey,"empty")T="empty"unit.stopTimer("msgTick")a8=3 elseif iF=="animateTick"then b4=true;b3=false;a6=0;a7=0;unit.stopTimer("animateTick")elseif iF=="hudTick"then local ey={}b2.HUDPrologue(ey)if showHud then b2.UpdateHud(ey)else b2.DisplayOrbitScreen(ey)b2.DrawWarnings(ey)end;b2.HUDEpilogue(ey)ey[#ey+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ay,az)if T~="empty"then b2.DisplayMessage(ey,T)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b2.DrawDeadZone(ey)end end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then jn()jr(ey)if screen_1.getMouseState()==1 then jm()end;ey[#ey+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)elseif system.isViewLocked()==0 then if l()==1 and S then jn()jr(ey)if not b3 and not b4 then local jD=table.concat(ey,"")ey={}ey[#ey+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)ey[#ey+1]=aU;ey[#ey+1]=jD;ey[#ey+1]="</body>"b3=true;ey[#ey+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ey,"")system.setScreen(content)elseif b4 then local jD=table.concat(ey,"")ey={}ey[#ey+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)ey[#ey+1]=aU;ey[#ey+1]=jD;ey[#ey+1]="</body>"end;if not b3 then ey[#ey+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end else jm()end else if not S and l()==0 then jm()if a9>DeadZone then if DisplayDeadZone then iZ(ey)end end else jn()jr(ey)end;ey[#ey+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end;ey[#ey+1]=[[</svg></body>]]content=table.concat(ey,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iF=="apTick"then aj=h()>0;ak=h()al=core.getAltitude()bu=p()local jE=bu-ba;ba=bu;local gI=getRoll(bA,bw,bx)local gJ=gI/180*math.pi;local gK=math.cos(gJ)local gL=math.sin(gJ)local cA=cw(bA,bw,bx)local jF=cw(bA,bw,bx*gK+bv*gL)local jG=-math.deg(cB(bv,by,bw))local jH=math.deg(cB(bx,by,bw))local jI=1;local jJ=1;b9=aj and jG<-YawStallAngle or jG>YawStallAngle or jH<-PitchStallAngle or jH>PitchStallAngle;b7=system.getMouseDeltaX()b8=system.getMouseDeltaY()if InvertMouse and not S then b8=-b8 end;M=0;Q=0;L=0;sys=aZ[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b1(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),by)if al==0 then al=(bB-planet.center):len()-planet.radius end;ag=cd()local bK=planet:getGravity(core.getConstructWorldPos()):len()*k()bb=0;b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not aj then x,y,_,_=iI(bB)else x=true end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then a6=screen_1.getMouseX()*ay;a7=screen_1.getMouseY()*az elseif system.isViewLocked()==0 then if l()==1 and S then if not b3 then a6=a6+b7;a7=a7+b8 end else a6=0;a7=0 end else a6=a6+b7;a7=a7+b8;a9=math.sqrt(a6*a6+a7*a7)if not S and l()==0 then if userControlScheme=="virtual joystick"then if a6>0 and a6>DeadZone then M=M-(a6-DeadZone)*MouseXSensitivity elseif a6<0 and a6<DeadZone*-1 then M=M-(a6+DeadZone)*MouseXSensitivity else M=0 end;if a7>0 and a7>DeadZone then L=L-(a7-DeadZone)*MouseYSensitivity elseif a7<0 and a7<DeadZone*-1 then L=L-(a7+DeadZone)*MouseYSensitivity else L=0 end elseif userControlScheme=="mouse"then a6=0;a7=0;L=(-utils.smoothstep(b8,-100,100)+0.5)*2*jI;M=(-utils.smoothstep(b7,-100,100)+0.5)*2*jJ else a6=0;a7=0 end end end;local jK=bz>8334;if bz>SpaceSpeedLimit/3.6 and not aj and not Autopilot and not jK then T="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not jK and LastIsWarping then if not BrakeIsOn then cF()end;if Autopilot then cn()end end;LastIsWarping=jK;if aj and ak>0.09 then if bz>be/3.6 and not AtmoSpeedAssist and not ap then BrakeIsOn=true;ap=true elseif not AtmoSpeedAssist and ap then if bz<be/3.6 then BrakeIsOn=false;ap=false end end end;if BrakeIsOn then P=1 else P=0 end;if ProgradeIsOn then if ad then BrakeIsOn=false;local jL=false;if CustomTarget~=nil then jL=cJ(CustomTarget.position-bB,0.01)else jL=cJ(vec3(by),0.01)end;b5=true;if jL and(math.abs(gI)<2 or math.abs(jF)>85)and bz>=be/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cS()elseif aj and AtmoSpeedAssist then bC(1)else bF(c(be))z=0 end elseif bz>H then cJ(vec3(by),0.01)end end;if RetrogradeIsOn then if aj then RetrogradeIsOn=false elseif bz>H then cJ(-vec3(by))end end;if not ProgradeIsOn and ad then if ak==0 then I=true;cS()ad=false;af=true else ad=false;cn()end end;local cm=bA*-1;local f1=by.x*cm.x+by.y*cm.y+by.z*cm.z;if af and CustomTarget~=nil and(al<HoldAltitude+200 and al>HoldAltitude-200)and bz*3.6>be-100 and math.abs(f1)<20 and ak>=0.1 and(CustomTarget.position-bB):len()>2000+al then cn()af=false end;if VertTakeOff then b5=true;if f1<-30 then T="Unable to achieve lift. Safety Landing."a5=0;b5=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if al<antigrav.getBaseAltitude()-100 then bf=0;a5=15;BrakeIsOn=false elseif f1>0 then BrakeIsOn=true;a5=0 elseif f1<-30 then BrakeIsOn=true;a5=15 elseif al>=antigrav.getBaseAltitude()then BrakeIsOn=true;a5=0;VertTakeOff=false;T="Takeoff complete. Singularity engaged"end else if ak>0.08 then bf=0;BrakeIsOn=false;a5=20 elseif ak<0.08 and ak>0 then BrakeIsOn=false;if br then bf=0;a5=20 else a5=0;bf=36;bF(3500)end else b5=autoRollPreference;IntoOrbit=true;bp=false;CancelIntoOrbit=false;bj=false;bh=nil;bi=nil;if bo==nil then bo=planet end;VertTakeOff=false end end;if bf~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jM=utils.clamp(bf-jF,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jM)local jN=utils.clamp(vTpitchPID:get(),-1,1)L=jN end end;if IntoOrbit then if bo==nil then if VectorToTarget then bo=a1 else bo=planet end end;if not bm then if bo.hasAtmosphere then bn=c(bo.radius*(TargetOrbitRadius-1)+bo.noAtmosphericDensityAltitude)else bn=c(bo.radius*(TargetOrbitRadius-1)+bo.surfaceMaxAltitude)end;bm=true end;if AltitudeHold or VectorToTarget then if not ae then bn=q(HoldAltitude,1)bj=true;AltitudeHold=false end;if VectorToTarget then bl.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jO,jP=c5(bn,2)local jQ=jO..jP;local jR,jS=b1(bo):escapeAndOrbitalSpeed((bB-bo.center):len()-bo.radius)local jT=gI;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and al>bn*0.9 and al<bn*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bn*0.99 and orbit.apoapsis.altitude>=bn*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bp then if bp then BrakeIsOn=false;z=0;bC(0)bp=true;bh=0;if bl.VectorToTarget then local cP=CustomTarget.position-bB;local X,_=a_.computeDistanceAndTime(bz,be/3.6,k(),0,0,LastMaxBrake)if by:normalize():dot(cP:normalize())>0.5 and cP:len()>15000+X+al then bg="Orbiting to Target"else T="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;I=true;af=true;cS()bl.VectorToTarget=false end end;if not bl.VectorToTarget then bg=nil;bk=false;bm=false;bo=nil;b5=autoRollPreference;if not af then T="Orbit established"end;bl.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bj=false;bh=nil;bi=nil;bo=nil;bp=false;bt=0 end else bt=bt+1;if bt>=2 then bp=true end end else bg="Adjusting Orbit - OrbitHeight: "..jQ;bk=true;bF(jS*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jU=f1;local jV=al-bn;local jW=math.abs(jV)if f1<10 and math.abs(jF)<10 and jW<100 then jU=f1*2 end;if jU<10 and math.abs(jF)<10 and jW<100 then jU=jU*2 end;if jU<5 and math.abs(jF)<5 and jW<100 then jU=jU*4 end;VSpdPID:inject(jU)bh=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jV)bh=utils.clamp(bh-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jX=2.75;local jY=math.abs(o(jR*jX))local jZ=jY%50;if jZ>0 then jY=jY-jZ+50 end;BrakeIsOn=false;if not bj then local j_=false;local k0=false;if al<bn then bg="Aligning to orbital path - OrbitHeight: "..jQ else bg="Aligning to orbital point - OrbitHeight: "..jQ end;bh=0;bi=0;if jF<=bh+1 and jF>=bh-1 then j_=true else j_=false end;if jT<=bi+1 and jT>=bi-1 then k0=true else k0=false end;if j_ and k0 then bh=nil;bi=nil;bj=true end else if al<bn*0.8 then bg="Escaping planet gravity - OrbitHeight: "..jQ;bh=utils.map(f1,200,0,-15,80)elseif al>=bn*0.8 and al<bn*1.15 then bg="Approaching orbital corridor - OrbitHeight: "..jQ;jY=jY*0.75;bh=utils.map(f1,100,-100,-15,65)elseif al>=bn*1.15 and al<bn*1.5 then bg="Approaching orbital corridor - OrbitHeight: "..jQ;jY=jY*0.75;if f1<0 or bk then bh=utils.map(al,bn*1.5,bn*1.01,-30,0)else bh=utils.map(al,bn*0.99,bn*1.5,0,30)end elseif al>bn*1.5 then bg="Reentering orbital corridor - OrbitHeight: "..jQ;bh=utils.map(f1,100,-100,-65,0)jY=jY*0.75 end end;bF(c(jY))end;if bh~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local k1=bh-jF;OrbitPitchPID:inject(k1)local k2=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)L=k2 end;if bi~=nil then if jF<85 then local k3=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(k3*0.01,0,k3*0.1)end;local k4=bi-jT;OrbitRollPID:inject(k4)local k5=utils.clamp(OrbitRollPID:get(),-0.5,0.5)Q=k5 end end elseif CancelIntoOrbit then bm=false;bo=nil;bC(0)CancelIntoOrbit=false end;if Autopilot and ak==0 and not ad then local k6,k7=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local k8=(CustomTarget.position-a1.center):normalize()local k9=k8:project_on_plane((a1.center-bB):normalize()):normalize()local ka=a1.center+k9*(a1.radius+AutopilotTargetOrbit)local kb=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))if(bB-ka):len()<(bB-kb):len()then k6=ka;AutopilotTargetCoords=k6 else k6=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))AutopilotTargetCoords=k6 end;local cp=bX(a1,AutopilotTargetCoords)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)k7=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;k7=true;TargetSet=true;AutopilotRealigned=true;k6=CustomTarget.position+(bB-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local k8=(bB+by*100000-a1.center):normalize()local k9=k8:project_on_plane((a1.center-bB):normalize()):normalize()if k9:len()<1 then k8=(bB+bw*100000-a1.center):normalize()k9=k8:project_on_plane((a1.center-bB):normalize()):normalize()end;k6=a1.center+k9*(a1.radius+AutopilotTargetOrbit)AutopilotTargetCoords=k6;TargetSet=true;k7=true;AutopilotRealigned=true;local cp=bX(a1,AutopilotTargetCoords)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)end end;AutopilotDistance=(vec3(k6)-bB):len()local gm,ee,ef=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(e2)if e2.noAtmosphericDensityAltitude>0 then return e2.radius+e2.noAtmosphericDensityAltitude else return e2.radius+e2.surfaceMaxAltitude*1.5 end end)local gn=ee;if ef~=nil and ee~=nil then gn=math.min(ef,ee)end;if gn~=nil and gn<AutopilotDistance and gm.name==a1.name then AutopilotDistance=gn end;local jL=true;local kc=(a1.center-(bB+vec3(by):normalize()*AutopilotDistance)):len()-a1.radius;local gl,c9=c5(kc)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..gl..'", "unit":"'..c9 ..'"}')local X,Y;if not TurnBurn then X,Y=cV(bz)else X,Y=cW(bz)end;if bz>300 and AutopilotAccelerating then local cP=vec3(k6)-bB;local kd=utils.clamp(math.deg(cB(bv,by:normalize(),cP:normalize()))*bz/500,-90,90)local ke=utils.clamp(math.deg(cB(bx,by:normalize(),cP:normalize()))*bz/500,-90,90)if math.abs(kd)<20 and math.abs(ke)<20 then kd=kd*2;ke=ke*2 end;if math.abs(kd)<2 and math.abs(ke)<2 then kd=kd*2;ke=ke*2 end;local jG=-math.deg(cB(bv,bw,by:normalize()))local jH=-math.deg(cB(bx,bw,by:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ke-jH)local kf=utils.clamp(apPitchPID:get(),-1,1)L=L+kf;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kd-jG)local kg=utils.clamp(apYawPID:get(),-1,1)M=M+kg;k7=true;if math.abs(kd)>2 or math.abs(ke)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kc<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(kc)end end;if not AutopilotCruising and not AutopilotBraking and not k7 then jL=cJ((k6-bB):normalize())elseif TurnBurn then jL=cJ(-vec3(by):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;bC(AutopilotInterplanetaryThrottle)z=q(AutopilotInterplanetaryThrottle,2)G=true end;local j3=unit.getThrottle()if AtmoSpeedAssist then j3=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or j3==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bC(0)z=0 end;if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bC(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;P=1 end;if TurnBurn then bC(100,true)z=1 end;local _,jS=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)local cP;if CustomTarget~=nil then cP=CustomTarget.position-bB end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bz<50 then T="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bz<=jS and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cp=bX(a1,AutopilotTargetCoords)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jS=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)if bz<=jS then if CustomTarget~=nil then if by:normalize():dot(cP:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cp=bX(a1,CustomTarget.position)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)WaypointSet=true end else T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;BrakeIsOn=false;local cp=bX(a1,CustomTarget.position)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T="Autopilot completed, orbit established"P=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ad=true end end end end elseif AutopilotCruising then if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local j3=unit.getThrottle()if AtmoSpeedAssist then j3=z end;if j3>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jL then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ad then AutopilotTargetCoords=vec3(a1.center)+(AutopilotTargetOrbit+a1.radius)*bx;AutopilotShipUp=bv;AutopilotShipRight=bx end;AutopilotRealigned=true elseif jL then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then bC(AutopilotInterplanetaryThrottle,true)z=q(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ak>0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"P=0;bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cp=bX(a1,CustomTarget.position)cp="::pos{"..cp.systemId..","..cp.bodyId..","..cp.latitude..","..cp.longitude..","..cp.altitude.."}"system.setWaypoint(cp)end;if R then b5=true;local ke=0;local gP=bB+vec3(unit.getMasterPlayerRelativePosition())local kh=gP-bB;local ki=vec3(kh):project_on(bw):len()local kj=vec3(kh):project_on(bx):len()local a9=math.sqrt(ki*ki+kj*kj)cJ(kh:normalize())local kk=40;local kl=a9<kk;local km=100;local kn=utils.clamp((a9-kk)/2,10,km)L=0;local jL=math.abs(M)<0.1;if jL and bz<kn and not kl then BrakeIsOn=false;ke=-20 else BrakeIsOn=true;ke=0 end;local ko=0;if math.abs(ke-cA)>ko then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ke-cA)local kf=pitchPID:get()L=kf end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cq=unit.getClosestPlanetInfluence()>0;local kp=HoldAltitude-al;local kq=500+bz;local kr=1;if AutoTakeoff then kr=utils.clamp(bz/100,0.1,1)end;local ke=(utils.smoothstep(kp,-kq,kq)-0.5)*2*MaxPitch*kr;if not Reentry and not ad and not VectorToTarget and bw:dot(by:normalize())<0.99 then ke=(utils.smoothstep(kp,-kq*utils.clamp(20-19*ak*10,1,20),kq*utils.clamp(20-19*ak*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ak*10,1,2)*kr end;if not AltitudeHold then ke=0 end;if LockPitch~=nil then if cq and not IntoOrbit then ke=LockPitch else LockPitch=nil end end;b5=true;local ks=L;if Reentry then local ReentrySpeed=c(be)local kt,ku=a_.computeDistanceAndTime(bz,ReentrySpeed/3.6,k(),0,0,LastMaxBrake-planet.gravity*9.8*k())local kv=al-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and al>planet.noAtmosphericDensityAltitude+5000 and bz<=ReentrySpeed/3.6 and bz>ReentrySpeed/3.6-10 and math.abs(by:normalize():dot(bw))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(kt>-1 and kv<=kt or al<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bF(ReentrySpeed,true)if not I then ke=-80;if ak>0.02 then T="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ke=0;b5=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and al>planet.noAtmosphericDensityAltitude+5000 then b5=true elseif al<=planet.noAtmosphericDensityAltitude+5000 then bF(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==be then I=false;Reentry=false;b5=true end end end;if bz>H and not ae and not VectorToTarget and not BrakeLanding and ForceAlignment then cJ(vec3(by))end;if(VectorToTarget or ae)and AutopilotTargetIndex>0 and ak>0.01 then local cP;if CustomTarget~=nil then cP=CustomTarget.position-bB else cP=a1.center-bB end;local kd=math.deg(cB(bA:normalize(),by,cP))*2;local kw=math.rad(math.abs(gI))if bz>minRollVelocity and ak>0.01 then local kx=utils.clamp(90-ke*2,-90,90)bb=utils.clamp(kd*2,-kx,kx)local ky=kd;kd=utils.clamp(utils.clamp(kd,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kw)+4*(jF-ke)*math.sin(math.rad(gI)),-YawStallAngle*0.85,YawStallAngle*0.85)ke=utils.clamp(utils.clamp(ke*math.cos(kw),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(ky)*math.sin(kw),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bb=0;kd=utils.clamp(kd,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kz=jG-kd;if not b9 and bz>minRollVelocity and ak>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kz)local kg=utils.clamp(yawPID:get(),-1,1)M=M+kg elseif aj and ag>-1 or bz<minRollVelocity then cJ(cP)elseif b9 and ak>0.01 then if(jG<-YawStallAngle or jG>YawStallAngle)and ak>0.01 then cJ(by)end;if(jH<-PitchStallAngle or jH>PitchStallAngle)and ak>0.01 then ke=utils.clamp(jF-jH,jF-PitchStallAngle*0.85,jF+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ae then local kA=planet:getAltitude(CustomTarget.position)local kv=math.sqrt(cP:len()^2-(al-kA)^2)local kB=LastMaxBrakeInAtmo;if kB then kB=kB*utils.clamp(bz/100,0.1,1)*ak else kB=LastMaxBrake end;if ak<0.01 then kB=LastMaxBrake end;local kC=by:len()-math.abs(f1)local kD=vec3(core.getWorldAirFrictionAcceleration())local kE=math.sqrt(kD:len()-kD:project_on(cm):len())*k()if bz>100 then X,Y=a_.computeDistanceAndTime(bz,100,k(),0,0,kB+kE)local kF,kG=a_.computeDistanceAndTime(100,0,k(),0,0,kB/2)X=X+kF else X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,kB/2)end;StrongBrakes=true;if not ae and not Reentry and kv<=X+bz*jE/2 and(by:project_on_plane(bA):normalize():dot(cP:project_on_plane(bA):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bC(0)z=0;if AltitudeHold then cg()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kC<0.1 or kv<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kv)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kv end elseif VectorToTarget and ak==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ae or Reentry)then if CustomTarget~=nil and a1.name==planet.name then local cP=CustomTarget.position-bB;local kA=planet:getAltitude(CustomTarget.position)local kv=math.sqrt(cP:len()^2-(al-kA)^2)local kB=LastMaxBrakeInAtmo;if not bp then bm=false;IntoOrbit=true else kB=LastMaxBrake;X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,kB/2)StrongBrakes=true;if kv<=X+bz*jE/2 and by:project_on_plane(bA):normalize():dot(cP:project_on_plane(bA):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cS()end end;LastDistanceToTarget=kv end end end;if ak==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ae or VectorToTarget or IntoOrbit or Reentry)then if not bp then IntoOrbit=true end end;if b9 and ak>0.01 and ag==-1 and bz>minRollVelocity and VectorStatus~="Finalizing Approach"then cJ(by)ke=utils.clamp(jF-jH,jF-PitchStallAngle*0.85,jF+PitchStallAngle*0.85)end;L=ks;local d3=-1;if BrakeLanding then ke=0;local kH=false;local kI=30;if b0~=nil and b0>0 then local kE=0;local gQ=utils.clamp(ak,0.4,2)local kB=LastMaxBrakeInAtmo*utils.clamp(bz/100,0.1,1)*gQ;local kJ=b0*gQ+kB+kE-bK;local kK=kB/2+kE-bK;local kL=bz-math.sqrt(math.abs(kK/2)*20/(0.5*k()))*utils.sign(kK)if kL<0 then kL=0 end;local kM;if bz>100 then local kN,_=a_.computeDistanceAndTime(bz,100,k(),0,0,kB)local kO,_=a_.computeDistanceAndTime(100,0,k(),0,0,math.sqrt(kB))kM=kN+kO else kM=a_.computeDistanceAndTime(bz,0,k(),0,0,math.sqrt(kB))end;if kM<20 then BrakeIsOn=false else local kP=0;if kL>100 then local kQ,_=a_.computeDistanceAndTime(kL,100,k(),0,0,kJ)local kR,_=a_.computeDistanceAndTime(100,0,k(),0,0,b0*gQ+math.sqrt(kB)+kE-bK)kP=kQ+kR else kP,_=a_.computeDistanceAndTime(kL,0,k(),0,0,b0*gQ+math.sqrt(kB)+kE-bK)end;kP=(kP+15+bz*jE)*1.1;local kS=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kS then local kA=planet:getAltitude(CustomTarget.position)local kT=al-kA-100;local cP=CustomTarget.position-bB;local kU=math.sqrt(cP:len()^2-(al-kA)^2)if kU>100 then kS=false elseif kT<=kP or kP==-1 then BrakeIsOn=true;kH=true else BrakeIsOn=false;kH=true end end;if not kS and CalculateBrakeLandingSpeed then if kP>=kI then BrakeIsOn=true else BrakeIsOn=false end;kH=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)d3=ag;if d3>-1 then b5=autoRollPreference;if bz<1 or by:normalize():dot(bA)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a5=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and by:normalize():dot(-cm)<0.999 then BrakeIsOn=true elseif f1<-brakeLandingRate and not kH then BrakeIsOn=true elseif not kH then BrakeIsOn=false end end;if AutoTakeoff or ae then local gm,ef,ee;if AutopilotTargetCoords~=nil then gm,ef,ee=aZ:getPlanetarySystem(0):castIntersections(bB,(AutopilotTargetCoords-bB):normalize(),function(e2)return e2.radius+e2.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if al>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bC(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(ke)<15 and al/HoldAltitude>0.75 then AutoTakeoff=false;if not ae then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ae and bz<H then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;bC(0)z=0 elseif ae then bC(0)z=0;BrakeIsOn=true end elseif ae and ak==0 and a1~=nil and(gm==nil or gm.name==a1.name)then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kV=cd()>-1;local kW=cA;if(VectorToTarget or ae)and not kV and bz>minRollVelocity and ak>0.01 then local kw=math.rad(math.abs(gI))kW=cA*math.abs(math.cos(kw))+jH*math.sin(kw)end;local kX=utils.clamp(ke-kW,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ak<0.01 and VectorToTarget then kX=utils.clamp(ke-kW,-85,MaxPitch)elseif ak<0.01 then kX=utils.clamp(ke-kW,-MaxPitch,MaxPitch)end;if math.abs(gI)<5 or VectorToTarget or BrakeLanding or kV or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kX)local kf=pitchPID:get()L=L+kf end end;if antigrav~=nil and(antigrav and not ExternalAGG and al<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function kY(kZ,kn)local k_=vec3()local l0=vec3()if kZ==axisCommandId.longitudinal then k_=vec3(core.getConstructOrientationForward())l0=bw elseif kZ==axisCommandId.vertical then k_=vec3(core.getConstructOrientationUp())l0=bv elseif kZ==axisCommandId.lateral then k_=vec3(core.getConstructOrientationRight())l0=bx else return vec3()end;local l1=vec3(core.getWorldGravity())local l2=l1:dot(l0)local l3=vec3(core.getWorldAirFrictionAcceleration())local l4=l3:dot(l0)local l5=vec3(core.getVelocity())local l6=l5:dot(k_)local l7=kn*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(l7-l6)local l8=targetSpeedPID2:get()local l9=(l8-l4-l2)*l0;return l9 end;local function la(kZ,kn)local k_=vec3()local l0=vec3()if kZ==axisCommandId.longitudinal then k_=vec3(core.getConstructOrientationForward())l0=bw elseif kZ==axisCommandId.vertical then k_=vec3(core.getConstructOrientationUp())l0=bv elseif kZ==axisCommandId.lateral then k_=vec3(core.getConstructOrientationRight())l0=bx else return vec3()end;local l1=vec3(core.getWorldGravity())local l2=l1:dot(l0)local l3=vec3(core.getWorldAirFrictionAcceleration())local l4=l3:dot(l0)local l5=vec3(core.getVelocity())local l6=l5:dot(k_)local l7=kn*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(l7-l6)local l8=targetSpeedPID:get()local l9=(l8-l4-l2)*l0;return l9 end;if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lb=utils.clamp(K+L+system.getControlDeviceForwardInput(),-1,1)local lc=utils.clamp(N+Q+system.getControlDeviceYawInput(),-1,1)local ld=utils.clamp(O+M-system.getControlDeviceLeftRightInput(),-1,1)local le=P;bA=vec3(core.getWorldVertical())if bA==nil or bA:len()==0 then bA=(planet.center-bB):normalize()end;bB=vec3(core.getConstructWorldPos())bv=vec3(core.getConstructWorldOrientationUp())bw=vec3(core.getConstructWorldOrientationForward())bx=vec3(core.getConstructWorldOrientationRight())by=vec3(core.getWorldVelocity())bz=vec3(by):len()local lf=by:normalize()local lg=getRoll(bA,bw,bx)local lh=math.abs(lg)local li=utils.sign(lg)local lj=vec3(core.getWorldAngularVelocity())local lk=lb*pitchSpeedFactor*bx+lc*rollSpeedFactor*bw+ld*yawSpeedFactor*bv;if bA:len()>0.01 and(ak>0.0 or ProgradeIsOn or Reentry or ad or AltitudeHold)then local gI=getRoll(bA,bw,bx)local gJ=gI/180*math.pi;local gK=math.cos(gJ)local gL=math.sin(gJ)local jF=cw(bA,bw,bx*gK+bv*gL)if b5==true and math.abs(bb-lg)>autoRollRollThreshold and lc==0 and math.abs(jF)<85 then local ll=bb;local k3=autoRollFactor;if ak==0 then k3=k3/4;bb=0;ll=0 end;if rollPID==nil then rollPID=pid.new(k3*0.01,0,k3*0.1)end;rollPID:inject(ll-lg)local lm=rollPID:get()lk=lk+lm*bw end end;if bA:len()>0.01 and ak>0.0 then local ln=20.0;if turnAssist==true and lh>ln and lb==0 and ld==0 then local lo=turnAssistFactor*0.1;local lp=turnAssistFactor*0.025;local lq=(lh-ln)/(180-ln)*180;local lr=0;if lq<90 then lr=lq/90 elseif lq<180 then lr=(180-lq)/90 end;lr=lr*lr;local ls=-li*lp*(1.0-lr)local lt=lo*lr;lk=lk+lt*bx+ls*bv end end;local lu=1;local lv=0;local lw=1;if system.getMouseWheel()>0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local f1=-bA:dot(by)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(be/3.6-by:dot(bw))local lx=throttlePID:get()C=utils.clamp(lx,-1,1)if C<z and ak>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-be/3.6)local ly=utils.clamp(brakePID:get(),0,1)if ak>0 and f1<-80 or ak>0.005 then A=ly end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local lz=''local lA=vec3()local lB=kY(axisCommandId.vertical,a5*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lB,lv)local lC='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lC=lC..ExtraLongitudeTags end;local lD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local lE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lC,axisCommandId.longitudinal)local lF=la(axisCommandId.lateral,LeftAmount*1000)lz=lz..' , '.."lateral airfoil , lateral ground "lA=lA+lF;if lA:len()>constants.epsilon then Nav:setEngineForceCommand(lz,lA,lv,'','','',lw)end;Nav:setEngineForceCommand(lC,lE,lu)local lG='thrust analog vertical fueled 'local lH='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lH=lH..ExtraLateralTags end;if ExtraVerticalTags~="none"then lG=lG..ExtraVerticalTags end;if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lG,lB,lu)else Nav:setEngineForceCommand(lG,vec3(),lu)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lH,lF,lu)else Nav:setEngineForceCommand(lH,vec3(),lu)end;if le==0 then le=A end;local lI=-le*(brakeSpeedFactor*by+brakeFlatFactor*lf)Nav:setEngineForceCommand('brake',lI)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kn=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-kn/3.6)local ly=utils.clamp(brakePID:get(),0,1)le=utils.clamp(le+ly,0,1)end;local lI=-le*(brakeSpeedFactor*by+brakeFlatFactor*lf)Nav:setEngineForceCommand('brake',lI)local lz=''local lA=vec3()local lJ=false;local lC='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lC=lC..ExtraLongitudeTags end;local lD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if lD==axisCommandType.byThrottle then local lE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lC,axisCommandId.longitudinal)Nav:setEngineForceCommand(lC,lE,lu)elseif lD==axisCommandType.byTargetSpeed then local lE=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lz=lz..' , '..lC;lA=lA+lE;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lJ=true end end;local lH='thrust analog lateral 'if ExtraLateralTags~="none"then lH=lH..ExtraLateralTags end;local lK=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if lK==axisCommandType.byThrottle then local lL=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lH,axisCommandId.lateral)Nav:setEngineForceCommand(lH,lL,lu)elseif lK==axisCommandType.byTargetSpeed then local lF=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lz=lz..' , '..lH;lA=lA+lF end;local lG='thrust analog vertical 'if ExtraVerticalTags~="none"then lG=lG..ExtraVerticalTags end;local lM=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lM==axisCommandType.byThrottle then local lB=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lG,axisCommandId.vertical)if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lG,lB,lu,'airfoil','ground','',lw)else Nav:setEngineForceCommand(lG,vec3(),lu)Nav:setEngineForceCommand('airfoil vertical',lB,lu,'airfoil','','',lw)Nav:setEngineForceCommand('ground vertical',lB,lu,'ground','','',lw)end elseif lM==axisCommandType.byTargetSpeed then if a5<0 then Nav:setEngineForceCommand('hover',vec3(),lu)end;local lN=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lz=lz..' , '..lG;lA=lA+lN end;if lA:len()>constants.epsilon then if P~=0 or lJ or math.abs(lf:dot(bw))<0.8 then lz=lz..', brake'end;Nav:setEngineForceCommand(lz,lA,lv,'','','',lw)end end;local lO=torqueFactor*(lk-lj)local lP=vec3(core.getWorldAirFrictionAngularAcceleration())lO=lO-lP;Nav:setEngineTorqueCommand('torque',lO,lu,'airfoil','','',lw)Nav:setBoosterCommand('rocket_engine')if W and not VanillaRockets then local bN=vec3(core.getVelocity()):len()local lQ=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lR=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bN*3.6>lR*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN*3.6<lR*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local j3=unit.getThrottle()if AtmoSpeedAssist then j3=z*100 end;local kn=j3/100;if h==0 then kn=kn*MaxGameVelocity;if bN>=kn*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<kn*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else kn=kn*ReentrySpeed/3.6;if bN>=kn*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<kn*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c8=coroutine.resume(beginSetup)if c8 then SetupComplete=true end else Nav:update()if not b3 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lS)local function lT()aw=not aw;if not aw then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function lU()if LockPitch==nil then local cA=cw(bA,bw,bx)LockPitch=cA;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function lV()if ah then ah=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;R=false;G=false;ad=false;ae=false;I=false;b5=autoRollPreference;VectorToTarget=false;TurnBurn=false;ao=false;LockPitch=nil;IntoOrbit=false else ah=true end end;if lS=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and ag==-1 and(ak>0 or al<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b5=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if J and not BrakeLanding then Nav.control.extendLandingGears()end else if J then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lS=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lS=="forward"then K=K-1 elseif lS=="backward"then K=K+1 elseif lS=="left"then N=N-1 elseif lS=="right"then N=N+1 elseif lS=="yawright"then O=O-1 elseif lS=="yawleft"then O=O+1 elseif lS=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lS=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lS=="up"then a5=a5+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lS=="down"then a5=a5-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lS=="groundaltitudeup"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lS=="groundaltitudedown"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lS=="option1"then cl()elseif lS=="option2"then cl(1)elseif lS=="option3"then if l()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif lS=="option4"then cn()elseif lS=="option5"then lU()elseif lS=="option6"then cg()elseif lS=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;lT()elseif lS=="option8"then ch()elseif lS=="option9"then if gyro~=nil then gyro.toggle()ao=gyro.getState()==1 end elseif lS=="lshift"then if system.isViewLocked()==1 then S=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif l()==1 and ShiftShowsRemoteButtons then S=true;b4=false;b3=false end elseif lS=="brake"then if BrakeToggleStatus then cF()elseif not BrakeIsOn then cF()else BrakeIsOn=true end elseif lS=="lalt"then AltIsOn=true elseif lS=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not W then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;W=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;W=false end elseif lS=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)lV()z=0 elseif lS=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cl()end elseif lS=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cl(1)end elseif lS=="antigravity"and not ExternalAGG then if antigrav~=nil then cX()end end end;function script.onActionStop(lS)if lS=="forward"then K=0 elseif lS=="backward"then K=0 elseif lS=="left"then N=0 elseif lS=="right"then N=0 elseif lS=="yawright"then O=0 elseif lS=="yawleft"then O=0 elseif lS=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lS=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lS=="up"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lS=="down"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lS=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lS=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lS=="lshift"then if system.isViewLocked()==1 then S=false;a6=0;a7=0;system.lockView(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then S=false;b4=false;b3=false end elseif lS=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cF()else BrakeIsOn=false end end elseif lS=="lalt"then AltIsOn=false end end;function script.onActionLoop(lS)if lS=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lS=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lS=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lS=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(cT)local function lW()for bQ,bH in pairs(a)do dbHud_1.setStringValue(bH,f(nil))end;for bQ,bH in pairs(b)do if bH~="SavedLocations"then dbHud_1.setStringValue(bH,f(nil))end end;T="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"a8=5;aA=false;a4=true end;local function lX(lY,planet,gP)local function lZ(gP)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dj='::pos{'..r..','..r..','..r..','..r..','..r..'}'local dx,dy,c2,c3,c1=n(gP,dj)if dx=="0"and dy=="0"then return vec3(tonumber(c2),tonumber(c3),tonumber(c1))end;c3=math.rad(c3)c2=math.rad(c2)local planet=aT[tonumber(dx)][tonumber(dy)]local em=math.cos(c2)local l_=vec3(em*math.cos(c3),em*math.sin(c3),math.sin(c2))return planet.center+(planet.radius+c1)*l_ end;if dbHud_1 then local cu={}local position=lZ(gP)if planet.name=="Space"then cu={position=position,name=lY,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hq=false;if planet.hasAtmosphere then hq=true else hq=false end;cu={position=position,name=lY,atmosphere=hq,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cu;table.insert(aT[0],cu)bP()else T="Databank must be installed to save locations"end end;local i;local m0="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local m1,m2=nil,nil;local m3="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cT," ")m1=cT;if i~=nil then m1=string.sub(cT,0,i-1)m2=string.sub(cT,i+1)elseif not string.find(m0,m1)then for gZ in string.gmatch(m3,"([^\n]+)")do system.print(gZ)end;return end;if m1=="ah-setname"then if m2==nil or m2==""then T="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cr(m2)else T="Select a saved target to rename first"end elseif m1=="ah-addlocation"then if m2==nil or m2==""or string.find(m2,"::")==nil then T="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(m2,"::")local lY=string.sub(m2,1,i-2)local gP=string.sub(m2,i)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dj='::pos{'..r..','..r..','..r..','..r..','..r..'}'local dx,dy,c2,c3,c1=n(gP,dj)local planet=aT[tonumber(dx)][tonumber(dy)]lX(lY,planet,gP)T="Added "..lY.." to saved locations,\nplanet "..planet.name.." at "..gP;a8=5 elseif m1=="ah-agg"then if m2==nil or m2==""then T="Usage: ah-agg targetheight"return end;m2=tonumber(m2)if m2<1000 then m2=1000 end;AntigravTargetAltitude=m2;T="AGG Target Height set to "..m2 elseif m1=="ah-G"then if m2==nil or m2==""then T="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if m2=="dump"then for bQ,bH in pairs(a)do if type(_G[bH])=="boolean"then if _G[bH]==true then system.print(bH.." true")else system.print(bH.." false")end elseif _G[bH]==nil then system.print(bH.." nil")else system.print(bH.." ".._G[bH])end end;return end;i=string.find(m2," ")local m4=string.sub(m2,0,i-1)local m5=string.sub(m2,i+1)for bQ,bH in pairs(a)do if bH==m4 then T="Variable "..m4 .." changed to "..m5;local m6=type(_G[bH])if m6=="number"then m5=tonumber(m5)elseif m6=="boolean"then if string.lower(m5)=="true"then m5=true else m5=false end end;_G[bH]=m5;return end end;T="No such global variable: "..m4 elseif m1=="ah-copydatabank"then if dbHud_2 then ep(true)else T="Spare Databank required to copy databank"end elseif m1=="ah-wipedatabank"then if dbHud_1 then lW()else T="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
