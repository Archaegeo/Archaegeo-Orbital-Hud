name: ArchHud - Archaegeo v1.406 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        showHelp = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        LockPitchTarget = 0 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.406;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local core=core;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;local D=o()local E=o()local F=16;local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8,a9=0;local aa,ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=j()>0;local ar=j()local as=core.getAltitude()local at=core.getElementIdList()local au=o()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]local az=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=false;local b0=false;local b1=autoRollPreference;local b2=LandingGearGroundHeight;local b3=false;local b4=o()local b5=0;local b6=0;local b7=0;local b8=AtmoSpeedLimit;local b9=0;local ba=nil;local bb=0;local bc=0;local bd=false;local be=false;local bf={VectorToTarget=false}local bg=false;local bh=0;local bi=nil;local bj=false;local bk=false;local bl=false;local bm=false;local bn=0;local bo=vec3(core.getConstructWorldOrientationUp())local bp=vec3(core.getConstructWorldOrientationForward())local bq=vec3(core.getConstructWorldOrientationRight())local br=vec3(core.getVelocity())local bs=vec3(core.getWorldVelocity())local bt=vec3(bs):len()local bu=vec3(core.getWorldVertical())local bv=-bu:dot(bs)local bw=vec3(core.getConstructWorldPos())local bx=0;local by=false;local bz=false;local bA=nil;local bB=true;local bC=0;local bD=0;local bE=false;local bF={}local bG=showHud;local bH={}local bI=false;local bJ=""local bK=nil;local bL={}local bM=unit.getClosestPlanetInfluence()>0;local bN=false;local bO=nil;function p(bP)system.print(D..": "..bP)end;local function bQ(bR)local bS,bT,bU=aS:getPlanetarySystem(0):castIntersections(bw,bR,function(bV)if bV.noAtmosphericDensityAltitude>0 then return bV.radius+bV.noAtmosphericDensityAltitude else return bV.radius+bV.surfaceMaxAltitude*1.5 end end)local bW=bT;if bU~=nil and bT~=nil then bW=math.min(bU,bT)end;if bW~=nil then return bS,bW else return nil,nil end end;local function bX(bY,bZ,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..bY.."|"..bZ.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..bY.."|"..bZ.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..bY.."|"..bZ.."|"..soundVolume)end end;local function b_(c0,c1)for i=1,#c1 do c0[#c0+1]=c1[i]end;return c0 end;local function c2(c3)local c4={}local c5={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","showHelp","Cockpit","voices","alerts","CollisionSystem"}local c6={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","LockPitchTarget","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c7={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local c8={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c3 then b_(c4,c5)b_(c4,c6)b_(c4,c7)b_(c4,c8)return c4 elseif c3=="boolean"then return c5 elseif c3=="handling"then return c6 elseif c3=="hud"then return c7 elseif c3=="physics"then return c8 end end;local function c9(ca,cb,cc,cd,ce)if cd==nil then cd=""end;if ce==nil then ce=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cd,ca,cb,ce,cc)end;local function cf(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not ch then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cg)K=q(z(cg*100,0)/100,-1,1)end;local function ci(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not ch then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cg)bA=cg end;local function cj(ck,cl)if ck==0 then return c(cl)<1e-09 end;if cl==0 then return c(ck)<1e-09 end;return c(ck-cl)<math.max(c(ck),c(cl))*epsilon end;local function cm(aj,cn)local co=aj>100000;if cn==nil then cn=1 end;if co then return z(aj/1000/200,cn).."SU"elseif aj<1000 then return z(aj,cn).."M"else return z(aj/1000,cn).."KM"end end;local function cp()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b1=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ci(d(b8))end else bj=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cq()bj=false;bb=nil;bc=nil;bn=0;if ar==0 then if IntoOrbit then bX("orOff","AP")IntoOrbit=false;bd=false;bi=nil;b1=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bf.VectorToTarget=false;bf.AutopilotAlign=false;bg=false elseif bM then bX("orOn","AP")IntoOrbit=true;b1=true;if bi==nil then bi=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bd=false;bi=nil;b1=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bf.VectorToTarget=false;bf.AutopilotAlign=false;bg=false end end;local function cr()if D-b6<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;bX("11","EP")else if bM then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bh=HoldAltitude;bg=true;if not IntoOrbit then cq()end;bd=true end end;b6=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b6=D end;if bM and ar==0 then bh=as;bg=true;bd=true;cq()if IntoOrbit then b6=D else b6=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b1=true;LockPitch=nil;bj=false;if ao~=-1 and bt<20 then bX("lfs","LS")AutoTakeoff=true;if b6>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and by then cp()end else bX("altOn","AH")AutoTakeoff=false;if b6>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if VertTakeOff then cp()end end;if am then HoldAltitude=100000 end else bX("altOff","AH")if IntoOrbit then cq()end;if VertTakeOff then cp()end;b1=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b6=0 end end;local function cs()local function ct(SpaceTarget)bN=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cr()end end;VectorStatus="Proceeding to Waypoint"end;if D-b7<1.5 and ar>0 then if not bm then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bX("orH","OH")end;b7=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b7=D end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aX.UpdateAutopilotTarget()aY.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bX("apSpc","AP")if ar~=0 then am=true;cr()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then bX("vtt","AP")ct(SpaceTarget)end else bX("apOn","AP")if not(ac.name==planet.name and bM)then bj=false;Autopilot=true elseif not aq then if IntoOrbit then cq()end;bh=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=true;bf.AutopilotAlign=true;bf.VectorToTarget=true;bd=false;if not IntoOrbit then cq()end end end else bX("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cr()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bM)and not IntoOrbit then WaypointSet=false;bj=false;bd=false;cq()else bX("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else bX("apP","AP")am=true;cr()end else bX("apOff","AP")am=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;HoldAltitude=as;TargetSet=false;Reentry=false;if IntoOrbit then cq()end end end;local function cu()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b1=autoRollPreference end;if BrakeIsOn then bX("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bK=nil;if not bz then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cp()end;if IntoOrbit then cq()end;b1=autoRollPreference;al=false;an=false;af=0 else bX("bkOff","B",1)end end;local function cv()if Reentry then a2="Re-Entry cancelled"bX("reOff","RE")Reentry=false;b1=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b1=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b8;bX("par","RE")else Reentry=true;AltitudeHold=true;b1=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cc=cm(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b8 .." Target Altitude: "..cc;bX("glide","RE")ci(d(b8))end;AutoTakeoff=false end;local function cw()if antigrav and not ExternalAGG then if bz then bX("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bX("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cx(cy)local cz=0;local cA=0;local cB=0;if cy<60 then cy=d(cy)elseif cy<3600 then cz=d(cy/60)cy=d(cy%60)elseif cy<86400 then cA=d(cy/3600)cz=d(cy%3600/60)else cB=d(cy/86400)cA=d(cy%86400/3600)end;if cB>0 then return cB.."d "..cA.."h "elseif cA>0 then return cA.."h "..cz.."m "elseif cz>0 then return cz.."m "..cy.."s"elseif cy>0 then return cy.."s"else return"0s"end end;local function cC(cD)local function cE(cF)for cG,cH in pairs(cF)do dbHud_1.setStringValue(cH,g(_G[cH]))if cD and dbHud_2 then dbHud_2.setStringValue(cH,g(_G[cH]))end end end;if dbHud_1 then cE(b)cE(c2())system.print("Saved Variables to Datacore")if cD and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cI()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function cJ()local function cK(cL)return type(cL)=='number'end;local function cM(cL)return type(y(cL))=='number'end;local function cN(cO)return type(cO)=='table'end;local function cP(cQ)return type(cQ)=='string'end;local function cR(cH)return cN(cH)and cK(cH.x and cH.y and cH.z)end;local function cS(cT)return cN(cT)and cK(cT.latitude and cT.longitude and cT.altitude and cT.bodyId and cT.systemId)end;local cU=math.pi/180;local cV=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cW='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function cX(cL)local cY=string.gsub(string.reverse(e('%.4f',cL)),'^0*%.?','')return cY==''and'0'or string.reverse(cY)end;local function cZ(c_)if cR(c_)then return e('{x=%.3f,y=%.3f,z=%.3f}',c_.x,c_.y,c_.z)end;if cN(c_)and not getmetatable(c_)then local d0={}local d1=next(c_)if type(d1)=='nil'or d1==1 then d0=c_ else for cG,cH in pairs(c_)do local cg=cZ(cH)if type(cG)=='number'then table.insert(d0,e('[%s]=%s',cG,cg))else table.insert(d0,e('%s=%s',cG,cg))end end end;return e('{%s}',table.concat(d0,','))end;if cP(c_)then return e("'%s'",c_:gsub("'",[[\']]))end;return tostring(c_)end;local d2={}d2.__index=d2;d2.__tostring=function(c_,d3)local d4={}for cG in pairs(c_)do table.insert(d4,cG)end;table.sort(d4)local d0={}for _,cG in ipairs(d4)do local cg=cZ(c_[cG])if type(cG)=='number'then table.insert(d0,e('[%s]=%s',cG,cg))else table.insert(d0,e('%s=%s',cG,cg))end end;if d3 then return e('%s%s',d3,table.concat(d0,',\n'..d3))end;return e('{%s}',table.concat(d0,','))end;d2.__eq=function(d5,d6)return d5.planetarySystemId==d6.planetarySystemId and d5.bodyId==d6.bodyId and cj(d5.radius,d6.radius)and cj(d5.center.x,d6.center.x)and cj(d5.center.y,d6.center.y)and cj(d5.center.z,d6.center.z)and cj(d5.GM,d6.GM)end;local function d7(d8,d9,da,db,dc)assert(cM(d8),'Argument 1 (planetarySystemId) must be a number:'..type(d8))assert(cM(d9),'Argument 2 (bodyId) must be a number:'..type(d9))assert(cM(da),'Argument 3 (radius) must be a number:'..type(da))assert(cN(db),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(db))assert(cM(dc),'Argument 5 (GM) must be a number:'..type(dc))return setmetatable({planetarySystemId=y(d8),bodyId=y(d9),radius=y(da),center=vec3(db),GM=y(dc)},d2)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.bodyId,cX(p.latitude*cV),cX(p.longitude*cV),cX(p.altitude))end;MapPosition.__eq=function(d5,d6)return d5.bodyId==d6.bodyId and d5.systemId==d6.systemId and cj(d5.latitude,d6.latitude)and cj(d5.altitude,d6.altitude)and(cj(d5.longitude,d6.longitude)or cj(d5.latitude,math.pi/2)or cj(d5.latitude,-math.pi/2))end;local function dd(de,d9,df,dg,dh)local d8=de;if cP(de)and not dg and not dh and not d9 and not df then d8,d9,df,dg,dh=n(de,cW)assert(d8,'Argument 1 (position string) is malformed.')else assert(cM(d8),'Argument 1 (systemId) must be a number:'..type(d8))assert(cM(d9),'Argument 2 (bodyId) must be a number:'..type(d9))assert(cM(df),'Argument 3 (latitude) must be in degrees:'..type(df))assert(cM(dg),'Argument 4 (longitude) must be in degrees:'..type(dg))assert(cM(dh),'Argument 5 (altitude) must be in meters:'..type(dh))end;d8=y(d8)d9=y(d9)df=y(df)dg=y(dg)dh=y(dh)if d9==0 then return setmetatable({latitude=df,longitude=dg,altitude=dh,bodyId=d9,systemId=d8},MapPosition)end;return setmetatable({latitude=cU*q(df,-90,90),longitude=cU*(dg%360),altitude=dh,bodyId=d9,systemId=d8},MapPosition)end;local di={}di.__index=di;di.__tostring=function(c_,d3)local dj=d3 and d3 ..'  'local dk={}local d4={}for cG in pairs(c_)do table.insert(d4,cG)end;table.sort(d4)for _,dl in ipairs(d4)do bdy=c_[dl]local dm=d2.__tostring(bdy,dj)if d3 then table.insert(dk,e('[%s]={\n%s\n%s}',dl,dm,d3))else table.insert(dk,e('  [%s]=%s',dl,dm))end end;if d3 then return e('\n%s%s%s',d3,table.concat(dk,',\n'..d3),d3)end;return e('{\n%s\n}',table.concat(dk,',\n'))end;local function dn(dp)local aN={}local pid;for _,cH in pairs(dp)do local dq=cH.planetarySystemId;if type(dq)~='number'then error('Invalid planetary system ID: '..tostring(dq))elseif pid and dq~=pid then error('Mistringmatch planetary system IDs: '..dq..' and '..pid)end;local dr=cH.bodyId;if type(dr)~='number'then error('Invalid body ID: '..tostring(dr))elseif aN[dr]then error('Duplicate body ID: '..tostring(dr))end;setmetatable(cH.center,getmetatable(vec3.unit_x))aN[dr]=setmetatable(cH,d2)pid=dq end;return setmetatable(aN,di)end;aR={}local function ds(dp)return setmetatable({galaxyAtlas=dp or{}},aR)end;aR.__index=function(cO,i)if type(i)=='number'then local system=cO.galaxyAtlas[i]return dn(system)end;return rawget(aR,i)end;aR.__pairs=function(c_)return function(cO,cG)local dt,nv=next(cO,cG)return dt,nv and dn(nv)end,c_.galaxyAtlas,nil end;aR.__tostring=function(c_)local du={}for _,dv in pairs(c_ or{})do local dw=dv:getPlanetarySystemId()local dx=di.__tostring(dv,'    ')table.insert(du,e('  [%s]={%s\n  }',dw,dx))end;return e('{\n%s\n}\n',table.concat(du,',\n'))end;aR.BodyParameters=d7;aR.MapPosition=dd;aR.PlanetarySystem=dn;function aR.createBodyParameters(dy,d9,dz,dA,dB,dC,dD)assert(cM(dy),'Argument 1 (planetarySystemId) must be a number:'..type(dy))assert(cM(d9),'Argument 2 (bodyId) must be a number:'..type(d9))assert(cM(dz),'Argument 3 (surfaceArea) must be a number:'..type(dz))assert(cN(dA),'Argument 4 (aPosition) must be an array or vec3:'..type(dA))assert(cN(dB),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dB))assert(cM(dC),'Argument 6 (altitude) must be in meters:'..type(dC))assert(cM(dD),'Argument 7 (gravityAtPosition) must be number:'..type(dD))local da=x(dz/4/math.pi)local aj=da+dC;local dE=vec3(dA)+aj*vec3(dB)local dc=dD*aj*aj;return d7(dy,d9,da,dE,dc)end;aR.isMapPosition=cS;function aR:getPlanetarySystem(de)if i==nil then i=0 end;if nv==nil then nv=0 end;local dy=de;if cS(de)then dy=de.systemId end;if type(dy)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=di then system=dn(system)end;return system end end end;function di:sizeCalculator(bV)return 1.05*bV.radius end;function di:castIntersections(dF,dG,dH,dI,dJ,dK)local dL={}local dM=dJ or self;for _,bV in pairs(dM)do table.insert(dL,bV)end;if not dK then table.sort(dL,function(dN,dO)return(dN.center-dF):len()<(dO.center-dF):len()end)end;local dP=dG:normalize()for _,bV in ipairs(dL)do local dQ=bV.center-dF;local da=self:sizeCalculator(bV)local dR=dQ:dot(dP)local dS=dR^2-(dQ:len2()-da^2)if dS>=0 then local dT=x(dS)local bT=dR+dT;local bU=dR-dT;if bU>0 then return bV,bT,bU elseif bT>0 then return bV,bT,nil end end end;return nil,nil,nil end;function di:closestBody(dU)assert(type(dU)=='table','Invalid coordinates.')local dV,bV;local dW=vec3(dU)for _,dX in pairs(self)do local dY=(dX.center-dW):len2()if(not bV or dY<dV)and dX.name~="Space"then bV=dX;dV=dY end end;return bV end;function di:convertToBodyIdAndWorldCoordinates(de)local dZ=de;if cP(de)then dZ=dd(de)end;if dZ.bodyId==0 then return 0,vec3(dZ.latitude,dZ.longitude,dZ.altitude)end;local dX=self:getBodyParameters(dZ)if dX then return dZ.bodyId,dX:convertToWorldCoordinates(dZ)end end;function di:getBodyParameters(de)local d9=de;if cS(de)then d9=de.bodyId end;assert(cM(d9),'Argument 1 (bodyId) must be a number:'..type(d9))return self[d9]end;function di:getPlanetarySystemId()local _,cH=next(self)return cH and cH.planetarySystemId end;function d2:convertToMapPosition(db)assert(cN(db),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(db))local d_=vec3(db)if self.bodyId==0 then return setmetatable({latitude=d_.x,longitude=d_.y,altitude=d_.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local e0=d_-self.center;local aj=e0:len()local dh=aj-self.radius;local df=0;local dg=0;if not cj(aj,0)then local e1=m(e0.y,e0.x)dg=e1>=0 and e1 or 2*math.pi+e1;df=math.pi/2-math.acos(e0.z/aj)end;return setmetatable({latitude=df,longitude=dg,altitude=dh,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function d2:convertToWorldCoordinates(de)local dZ=cP(de)and dd(de)or de;if dZ.bodyId==0 then return vec3(dZ.latitude,dZ.longitude,dZ.altitude)end;assert(cS(dZ),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dZ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dZ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e2=math.cos(dZ.latitude)return self.center+(self.radius+dZ.altitude)*vec3(e2*math.cos(dZ.longitude),e2*math.sin(dZ.longitude),math.sin(dZ.latitude))end;function d2:getAltitude(db)return(vec3(db)-self.center):len()-self.radius end;function d2:getDistance(db)return(vec3(db)-self.center):len()end;function d2:getGravity(db)local e3=self.center-vec3(db)local e4=e3:len2()return self.GM/e4*e3/x(e4)end;return setmetatable(aR,{__call=function(_,...)return ds(...)end})end;local function e5()local aT={}local e6=30000000/3600;local e7=e6*e6;local e8=100;function aT.computeAccelerationTime(e9,ea,eb)local ec=e6*math.asin(e9/e6)return(e6*math.asin(eb/e6)-ec)/ea end;function aT.computeDistanceAndTime(e9,eb,ed,ee,ef,eg)ef=ef or 0;eg=eg or 0;local eh=e9<=eb;local ei=ee*(eh and 1 or-1)/ed;local ej=-eg/ed;local ek=ei+ej;if eh and ek<=0 or not eh and ek>=0 then return-1,-1 end;local el,em=0,0;if ei~=0 and ef>0 then local ec=math.asin(e9/e6)local en=math.pi*(ei/2+ej)local eo=ei*ef;local ep=e6*math.pi;local cH=function(cO)local eq=(en*cO-eo*math.sin(math.pi*cO/2/ef)+ep*ec)/ep;local er=math.tan(eq)return e6*er/x(er*er+1)end;local es=eh and function(cQ)return cQ>=eb end or function(cQ)return cQ<=eb end;em=2*ef;if es(cH(em))then local et=0;while c(em-et)>0.5 do local cO=(em+et)/2;if es(cH(cO))then em=cO else et=cO end end end;local eu=e9;local ev=em/e8;for ew=1,e8 do local ex=cH(ew*ev)el=el+(ex+eu)*ev/2;eu=ex end;if em<2*ef then return el,em end;e9=eu end;local ec=e6*math.asin(e9/e6)local D=(e6*math.asin(eb/e6)-ec)/ek;local ey=e7*math.cos(ec/e6)/ek;local aj=ey-e7*math.cos((ek*D+ec)/e6)/ek;return aj+el,D+em end;function aT.computeTravelTime(e9,ea,aj)if aj==0 then return 0 end;if ea>0 then local ec=e6*math.asin(e9/e6)local ey=e7*math.cos(ec/e6)/ea;return(e6*math.acos(ea*(ey-aj)/e7)-ec)/ea end;if e9==0 then return-1 end;assert(e9>0,'Acceleration and initial speed are both zero.')return aj/e9 end;return aT end;local function ez()local vec3=require('cpml.vec3')local cJ=cJ()local function cP(cQ)return type(cQ)=='string'end;local function cN(cO)return type(cO)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dh)assert(self.body)local aj=dh+self.body.radius;if not cj(aj,0)then local orbit=x(self.body.GM/aj)return x(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(de,eA)assert(self.body)assert(cN(de)or cP(de))assert(cN(eA))local eB=(cP(de)or cJ.isMapPosition(de))and self.body:convertToWorldCoordinates(de)or vec3(de)local cH=vec3(eA)local eC=eB-self.body.center;local eD=cH:len2()local eE=eC:len()local eF=self.body.GM;local eG=((eD-eF/eE)*eC-eC:dot(cH)*cH)/eF;local ck=eF/(2*eF/eE-eD)local eH=eG:len()local dP=eG:normalize()local eI=ck*(1-eH)local eJ=ck*(1+eH)local eK=eI*dP+self.body.center;local eL=eH<=1 and-eJ*dP+self.body.center or nil;local eM=x(ck*eF*(1-eH*eH))local eN=eL and 2*math.pi*x(ck^3/eF)local eO=math.acos(eG:dot(eC)/(eH*eE))if eC:dot(cH)<0 then eO=-(eO-2*math.pi)end;local eP=math.acos((math.cos(eO)+eH)/(1+eH*math.cos(eO)))local eQ=eP;if eQ<0 then eQ=eQ+2*math.pi end;local eR=eQ-eH*math.sin(eQ)local eS=0;local eT=0;local eU=0;if eN~=nil then eS=eR/(2*math.pi/eN)eT=eN-eS;eU=eT+eN/2;if eO-math.pi>0 then eT=eS;eU=eT+eN/2 end;if eU>eN then eU=eU-eN end end;return{periapsis={position=eK,speed=eM/eI,circularOrbitSpeed=x(eF/eI),altitude=eI-self.body.radius},apoapsis=eL and{position=eL,speed=eM/eJ,circularOrbitSpeed=x(eF/eJ),altitude=eJ-self.body.radius},currentVelocity=cH,currentPosition=eB,eccentricity=eH,period=eN,eccentricAnomaly=eP,meanAnomaly=eR,timeToPeriapsis=eT,timeToApoapsis=eU}end;local function eV(eW)local dX=cJ.BodyParameters(eW.planetarySystemId,eW.bodyId,eW.radius,eW.center,eW.GM)return setmetatable({body=dX},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eV(...)end})end;local function eX()local eY={}local eZ={}local e_={XS=13,S=27,M=55,L=110,XL=221}local f0={}local f1;local f2;local f3;local f4;local f5;local function f6()local function f7(f8,f9,fa,fb,fc,fd,fe,ff)f9,fb,fd,ff=vec3(f9),vec3(fb),vec3(fd),vec3(ff)local fg,fh,fi=f8*f8,fa*fa,fc*fc;local eD=fb-f9;local fj=eD:normalize()local fk=eD:len()local fl=fd-f9;local fm=(fl-fl:project_on(fj)):normalize()local fn,fo=fl:dot(fj),fl:dot(fm)local fp=fn*fn+fo*fo;local fq=fj:cross(fm)local ca=(fg-fh+fk*fk)/(2*fk)local cb=(fg-fi+fp-2*fn*ca)/(2*fo)local cT=fg-ca^2-cb^2;local fr=x(cT)local fs=f9+fj*ca+fm*cb+fq*fr;local ft=f9+fj*ca+fm*cb-fq*fr;if c((ff-fs):len()-fe)<c((ff-ft):len()-fe)then return fs else return ft end end;local function fu()local function fv()local fw=core.getConstructWorldOrientationRight()local eD=core.getConstructWorldOrientationForward()local fl=core.getConstructWorldOrientationUp()local fx=library.systemResolution3(fw,eD,fl,{1,0,0})local fy=library.systemResolution3(fw,eD,fl,{0,1,0})local fz=library.systemResolution3(fw,eD,fl,{0,0,1})return function(fA)return library.systemResolution3(fx,fy,fz,fA)end end;local fB=fv()local fC=core.getConstructWorldPos()local eB=core.getElementPositionById(1)local fD={eB[1]-F,eB[2]-F,eB[3]-F}local fE=fB(fD)local fF={fC[1]-fE[1],fC[2]-fE[2],fC[3]-fE[3]}return fF end;local function fG(fH,eE,fI)local fJ=fH.pts;local fK=#fJ;local fL=fH.ref;if fK>3 then local fM,fN,fO,fP=fJ[fK],fJ[fK-1],fJ[fK-2],fJ[fK-3]fH.ref=fI;local eB=f7(fM[1],fM[2],fN[1],fN[2],fO[1],fO[2],fP[1],fP[2])local ca,cb,fr=eB.x,eB.y,eB.z;if ca==ca and cb==cb and fr==fr then ca=ca+fL[1]cb=cb+fL[2]fr=fr+fL[3]local fQ=vec3(ca,cb,fr)if not fH.lastPos then fH.center=fQ elseif(fH.lastPos-fQ):len()<2 then fH.center=fQ;fH.skipCalc=true end;fH.lastPos=fQ end;fH.pts={}else local fR={fI[1]-fL[1],fI[2]-fL[2],fI[3]-fL[3]}fJ[fK+1]={eE,fR}end end;if radar_1 then f1=#radar_1.getEntries()local fS=radar_1.getData()local fT=fS:gmatch('{"constructId[^}]*}[^}]*}')if f1>0 then local fI=fu()local fU,fV=0,0;f5,f4=0,0;for cH in fT do local dq,aj,fW=cH:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local fX=e_[fW]aj=y(aj)if radar_1.hasMatchingTransponder(dq)==1 then table.insert(eZ,dq)end;local fY=radar_1.getConstructType(dq)if CollisionSystem then if fX>27 or fY=="static"or fY=="space"then f5=f5+1;local fZ=radar_1.getConstructName(dq)local fH=bL[dq]if fH==nil then fX=fX+G;bL[dq]={pts={},ref=fI,name=fZ,i=0,radius=fX,skipCalc=false}fH=bL[dq]end;if not fH.skipCalc then fG(fH,aj,fI)fV=fV+1 end;if fH.center then table.insert(f0,fH)end end;fU=fU+1;if bM and fU>700 or fV>70 or(not bM and fU>300 or fV>30)then coroutine.yield()fU,fV=0,0 end end end;f4=#f0;if f4>0 and bt>20 then local bV,f_,g0,g1;local g2=0;local g3=aS:getPlanetarySystem(0)g1=bs:normalize()while g2<f4 do coroutine.yield()local g4={table.unpack(f0,g2,math.min(g2+75,f4))}bV,f_,g0=g3:castIntersections(bw,g1,nil,nil,g4,true)if bV and g0 then bO={bV,f_,g0}break end;g2=g2+75 end;if not bV then bO=nil end else bO=nil end;f0={}f2=fS:find('identifiedConstructs":%[%]')else f3=fS:find('worksInEnvironment":false')end end end;function eY.UpdateRadar()local g5=coroutine.status(UpdateRadarCoroutine)if g5=="suspended"then local cg,g6=coroutine.resume(UpdateRadarCoroutine)if g6 then system.print("ERROR UPDATE RADAR: "..g6)end elseif g5=="dead"then UpdateRadarCoroutine=coroutine.create(f6)local cg,g6=coroutine.resume(UpdateRadarCoroutine)end end;function eY.GetRadarHud()return f2,f3,f1,f4,f5,eZ end;UpdateRadarCoroutine=coroutine.create(f6)return eY end;local function g7()local g8=0;local g9=vec3({13771471,7435803,-128971})local ga=18000000;local gb=500000;local gc,gd=math.huge;local ge;local function gf(gg)gc=vec3(gg):dist(g9)if gc<ga then return true,c(gc-ga)end;gd=vec3(gg):dist(vec3(planet.center))if gd<gb then ge=true else ge=false end;if c(gd-gb)<c(gc-ga)then return ge,c(gd-gb)else return ge,c(gc-ga)end end;local function gh(cH)if aG==1920 then return cH else return z(aG*cH/1920,0)end end;local function gi(cH)if aH==1080 then return cH else return z(aH*cH/1080,0)end end;local function gj()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function gk()local gl="TRAVEL"if not bB then gl="CRUISE"end;if Autopilot then gl="AUTOPILOT"end;return gl end;local gm=""local gn=""local go=""local gp=1;local gq=2;local gr=3;local gs=4;local gt=5;local gu=6;local gv=""local gw=0;local gx=d(1/apTickRate)*2*hudTickRate;local gy={}local gz={}local gA={}local gB={}local gC={}local gD={}local function gE(ca,gF,gG,gH,gI,gJ)local gK=fuelY;local gL=fuelY+5;if not BarFuelDisplay then gL=gL+5 end;if l()==1 and not RemoteHud then gK=gK-50;gL=gL-50 end;if gG=="ATMO"then gv="atmofueltank"elseif gG=="SPACE"then gv="spacefueltank"else gv="rocketfueltank"end;gw=_G[gv.."_size"]if#gH>0 then for i=1,#gH do local fZ=string.sub(gH[i][gq],1,12)local gM=0;for gN=1,gw do if gH[i][gq]==f(unit[gv.."_"..gN].getData()).name then gM=gN;break end end;local gO=o()if gI[i]==nil or gJ[i]==nil or gO-gH[i][gu]>gx then local gP;local gQ=0;if gM~=0 then gJ[i]=f(unit[gv.."_"..gM].getData()).percentage;gI[i]=f(unit[gv.."_"..gM].getData()).timeLeft;if gI[i]=="n/a"then gI[i]=0 end else gQ=k(gH[i][gp])-gH[i][gs]gJ[i]=d(0.5+gQ*100/gH[i][gr])gP=gH[i][gt]if gP<=gQ then gI[i]=0 else gI[i]=d(0.5+gQ/((gP-gQ)/(gO-gH[i][gu])))end;gH[i][gt]=gQ;gH[i][gu]=gO end end;if fZ==gF then fZ=e("%s %d",gG,i)end;if gM==0 then fZ=fZ.." *"end;local gR;if gI[i]==0 then gR=""else gR=cx(gI[i])end;if gJ[i]~=nil then local gS=d(gJ[i]*2.55)local gT=e("rgb(%d,%d,%d)",255-gS,gS,0)local cd=""if gR~=""and gI[i]<120 or gJ[i]<5 then cd="red "end;if BarFuelDisplay then gn=gn..e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],ca,gL,gT,gJ[i],ca,gL,ca+2,gL+10,gJ[i],gR)gn=gn..c9(ca,gK,fZ,cd.."txtstart pdim txtfuel")gK=gK-30;gL=gL-30 else gn=gn..c9(ca,gK,fZ,cd.."pdim txtfuel")gn=gn..c9(ca,gL,e("%d%% %s",gJ[i],gR),"pdim txtfuel","fill:"..gT)gK=gK+30;gL=gL+30 end end end end end;local function gU(gV,dh)if dh<200000 and not aq or dh and aq then local gW=0;if c(bv)>1 then gW=45*math.log(c(bv),10)if bv<0 then gW=-gW end end;gV[#gV+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bv),d(gW))end;return gV end;local function gX(gY)local gZ=-bu;gY=gY-gY:project_on(gZ)local g_=vec3(0,0,1)g_=g_-g_:project_on(gZ)local h0=g_:cross(gZ)local gW=g_:angle_between(gY)*constants.rad2deg;if gY:dot(h0)<0 then gW=360-gW end;return gW end;local function h1(gV,centerX,centerY,h2,h3,bM)local h4=circleRad;local h5=20;local h6=d(h2)if bM then for i=-45,45,5 do local h7=i;gV[#gV+1]=e([[<g transform="rotate(%f,%d,%d)">]],h7,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;gV[#gV+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+h4+h5-len,centerX,centerY+h4+h5)end;gV[#gV+1]=c9(centerX,centerY+h4+h5-35,h3,"pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY+h4+h5-25,h6 .." deg","pdim txt txtmid")gV[#gV+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h2,centerX,centerY)gV[#gV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+h4+h5-20,centerX+5,centerY+h4+h5-20,centerX,centerY+h4+h5-15)gV[#gV+1]="</g>"end;local h8=h6;if bM then h8=gX(bp)end;local h9=20;local ha=d(h8)local hb=0;local hc=centerY+h4+h5+20;local hd=centerX;if h3~="YAW"then hc=gi(130)hd=gh(960)end;local he=[[<path class="txttick line" d="]]local hf=d(ha-(h9+10)-ha%5+0.5)for i=hf+60,hf,-5 do local ca=hd-(-i*5+h8*5)if i%10==0 then hb=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;gV[#gV+1]=c9(ca+5,hc-12,A)elseif i%5==0 then hb=5 end;if hb==10 then he=e([[%s M %f %f v %d]],he,ca,hc-5,hb)else he=e([[%s M %f %f v %d]],he,ca,hc-2.5,hb)end end;gV[#gV+1]=he..[["/>]]gV[#gV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],hd-5,hc+10,hd+5,hc+10,hd,hc+5)if bM then h3="HDG"end;gV[#gV+1]=c9(hd,hc+25,ha.."deg","pdim txt txtmid","")gV[#gV+1]=c9(hd,hc+35,h3,"pdim txt txtmid","")end;local function hg(gV,hh,h2,centerX,centerY,bM,hi,ex)local h4=circleRad;local hj=d(h4*3/5)if h4>0 then local hk=d(hh)local len=0;local he=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*h2,centerX,centerY)if not aq then he=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;gV[#gV+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],h4-1,centerX,centerY)gV[#gV+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(hk-30-hk%5+0.5),d(hk+30+hk%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cb=centerY+-i*5+hh*5;if len==30 then he=e([[%s M %d %f h %d]],he,centerX-hj-len,cb,len)if aq then gV[#gV+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h2,centerX,centerY,centerX-hj+10,cb,i)gV[#gV+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h2,centerX,centerY,centerX+hj-10,cb,i)if i==0 or i==180 or i==-180 then gV[#gV+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h2,centerX,centerY,centerX-hj+20,cb,hj*2-40)end else gV[#gV+1]=c9(centerX-hj+10,cb,i,"pdim txt txtmid")gV[#gV+1]=c9(centerX+hj-10,cb,i,"pdim txt txtmid")end;he=e([[%s M %d %f h %d]],he,centerX+hj,cb,len)else he=e([[%s M %d %f h %d]],he,centerX-hj-len,cb,len)he=e([[%s M %d %f h %d]],he,centerX+hj,cb,len)end end;gV[#gV+1]=he..[["/>]]local hl="PITCH"if not bM then hl="REL PITCH"end;if hh>90 and not aq then hh=90-(hh-90)elseif hh<-90 and not aq then hh=-90-(hh+90)end;if h4>200 then if aq then if ex>Q then gV[#gV+1]=c9(centerX,centerY-15,"Yaw","pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY+20,hi,"pdim txt txtmid")end;gV[#gV+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h2,centerX,centerY)else gV[#gV+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;gV[#gV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hj+25,centerY-5,centerX-hj+20,centerY,centerX-hj+25,centerY+5,centerX-hj+50,centerY+4,hk)gV[#gV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hj-25,centerY-5,centerX+hj-20,centerY,centerX+hj-25,centerY+5,centerX+hj-30,centerY+4,hk)gV[#gV+1]="</g>"end;local hm=d(h4/3)gV[#gV+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hm,centerY,h4-hm)if not aq and bM then gV[#gV+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h2,centerX,centerY,centerX-hj+10,centerY,hj*2-20)end;gV[#gV+1]="</g>"if h4<200 then if aq and ex>Q then gV[#gV+1]=c9(centerX,centerY-h4,hl,"pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY-h4+10,hk,"pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY-15,"Yaw","pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY+20,hi,"pdim txt txtmid")else gV[#gV+1]=c9(centerX,centerY-h4,hl,"pdim txt txtmid")gV[#gV+1]=c9(centerX,centerY-h4+15,hk,"pdim txt txtmid")end end end end;local function hn(gV,dh,bM)local ho=altMeterX;local hp=altMeterY;local hq=78;local hr=19;local hs=ao;if ao~=-1 then gV[#gV+1]=c9(ho+hq,hp+hr+20,e("AGL: %.1fm",ao),"pdim altsm txtend")end;if bM and(dh<200000 and not aq or dh and aq)then table.insert(gV,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],ho-1,hp-4,hq+2,hr+6,ho+1,hp-1,hq-4,hr))local fK=0;local ht=1;local hu=0;local hv=dh<0;local hw=dh<planet.surfaceMaxAltitude;local hx=9;if hv then hx=0 end;local dh=c(dh)while fK<6 do local hy=11;local hz=16;local hA=9;local hB=14;local cd="altsm"if fK>2 then hz=hz+3;hy=hy+2;hB=hB+2;hA=hA-6;cd="altbig"end;if hv then cd=cd.." red"elseif hw then cd=cd.." orange"end;local hC=dh/ht%10;local hD=d(hC)local hE=d((hD+1)%10)local hF=hu;if fK==0 then hF=hC-hD;if hv then hF=1-hF end end;if hv and(fK==0 or hu~=0)then local hG=hE;hE=hD;hD=hG end;local hH=hz*(hF-1)local hI=hH+hz;local ca=ho+hA+(6-fK)*hy;local cb=hp+hB;gV[#gV+1]=c9(ca,cb+hH,hE,cd)gV[#gV+1]=c9(ca,cb+hI,hD,cd)fK=fK+1;ht=ht*10;if hD==hx then hu=hF else hu=0 end end;table.insert(gV,[[</g></g>]])end end;local function hJ(eA)local hK=-math.deg(m(eA.y,eA.z))+180;hK=hK-90;if hK<0 then hK=360+hK end;if hK>180 then hK=-180+hK-180 end;return-hK end;local function hL(eA)local h8=math.deg(m(eA.y,eA.x))-90;if h8<-180 then h8=360+h8 end;return h8 end;local function hM(gV,eA,ex,centerX,centerY)if ex>5 and not aq or ex>Q then local h4=circleRad;local hN=20;local hO=20;local hP=hJ(eA)local hQ=hL(eA)local hR=14;local hS=hR/2;local hT=-hQ/hO*h4;local hU=hP/hN*h4;local ca=centerX+hT;local cb=centerY+hU;local aj=x(hT^2+hU^2)local hV=[[<circle
                            cx="]]..ca..[["
                            cy="]]..cb..[["
                            r="]]..hS/hR..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ca..[["
                            cy="]]..cb..[["
                            r="]]..hS..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ca-hR..[[,]]..cb..[[ h ]]..hS..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ca+hS..[[,]]..cb..[[ h ]]..hS..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ca..[[,]]..cb-hR..[[ v ]]..hS..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<h4 then gV[#gV+1]=hV else local gW=m(hU,hT)local hW=4;local hX=centerX+h4*math.cos(gW)local hY=centerY+h4*math.sin(gW)gV[#gV+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',gW*180/math.pi,hX,hY,hX-hW,hY-hW/2,hW*2,hW,hX+hW,hY-hW,hW,hW,-hW,hW)end;if not aq then local hZ=vec3(eA)hP=hJ(-hZ)hQ=hL(-hZ)hT=-hQ/hO*h4;hU=hP/hN*h4;ca=centerX+hT;cb=centerY+hU;aj=x(hT^2+hU^2)if aj<h4 then local h_=[[<circle
                                    cx="]]..ca..[["
                                    cy="]]..cb..[["
                                    r="]]..hS..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ca..[[,]]..cb-hR..[[ v ]]..hS..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ca..[[,]]..cb..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ca..[[,]]..cb..[[)" />
                                <path
                                    d="M ]]..ca-hS..[[,]]..cb..[[ h ]]..hR..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ca..[[,]]..cb..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ca..[[,]]..cb..[[)"/>]]gV[#gV+1]=h_ end end end end;local function i0(gV,gl,i1,i2)i1=d(i1+0.5)local gK=throtPosY+10;local gL=throtPosY+20;if l()==1 and not RemoteHud then gK=55;gL=65 end;local i3="CRUISE"local unit="km/h"local cg=i2;if gl=="TRAVEL"or gl=="AUTOPILOT"then i3="THROT"unit="%"cg=i1;local i4="dim"if i1<0 then i4="red"end;gV[#gV+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],i4,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(i1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;gV[#gV+1]=c9(throtPosX+10,gK,i3,"pbright txtstart")gV[#gV+1]=c9(throtPosX+10,gL,e("%.0f %s",cg,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bB and M then i1=d(N*100+0.5)local i4="red"if i1<0 then i4="red"end;gV[#gV+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],i4,1-c(i1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)gV[#gV+1]=c9(throtPosX+10,gK+40,"LIMIT","pbright txtstart")gV[#gV+1]=c9(throtPosX+10,gL+40,i1 .."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then gV[#gV+1]=c9(throtPosX+10,gK-40,"LIMIT: "..b8 .." km/h","dim txtstart")elseif not aq and Autopilot then gV[#gV+1]=c9(throtPosX+10,gK-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function i5(gV,i6)local i7=throtPosY-10;local i8=throtPosX+10;gV[#gV+1]=c9(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then i7=75 end;gV[#gV+1]=c9(i8,i7,d(i6).." km/h","pbright txtbig txtstart")end;local function i9(gV)gV[#gV+1]=c9(gh(1900),gi(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")gV[#gV+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then gV[#gV+1]=c9(gh(960),gi(550),"Warning: Invalid Control Scheme Detected","warnings")gV[#gV+1]=c9(gh(960),gi(600),"Keyboard Scheme must be selected","warnings")gV[#gV+1]=c9(gh(960),gi(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ia=gh(960)local ib=gi(860)local ic=gi(880)local id=gi(900)local ie=gi(960)local ig=gi(200)local ih=gi(250)local ii=gi(960)if l()==1 and not RemoteHud then ib=gi(135)ic=gi(155)id=gi(175)ig=gi(115)ih=gi(95)end;if BrakeIsOn then gV[#gV+1]=c9(ia,ib,"Brake Engaged","warnings")elseif L>0 then gV[#gV+1]=c9(ia,ib,"Auto-Brake Engaged","warnings","opacity:"..L)end;if aq and b3 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bz and not VertTakeOff and not AutoTakeoff then gV[#gV+1]=c9(ia,ig+50,"** STALL WARNING **","warnings")bX("stall","SW",2)end end;if bK then gV[#gV+1]=c9(ia,ig+90,"Flight Assist in Progress","warnings")end;if ax then gV[#gV+1]=c9(ia,ii,"Gyro Enabled","warnings")end;if GearExtended then if S then gV[#gV+1]=c9(ia,ic,"Gear Extended","warn")else gV[#gV+1]=c9(ia,ic,"Landed (G: Takeoff)","warnings")end;local ij=cm(a:getTargetGroundAltitude())gV[#gV+1]=c9(ia,id,"Hover Height: "..ij,"warn")end;if a7 then gV[#gV+1]=c9(ia,ie+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bz and AntigravTargetAltitude~=nil then if c(as-antigrav.getBaseAltitude())<501 then gV[#gV+1]=c9(ia,ig+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else gV[#gV+1]=c9(ia,ig+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then gV[#gV+1]=c9(ia,ig+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then gV[#gV+1]=c9(ia,ig+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif a0 then gV[#gV+1]=c9(ia,ig+20,"Follow Mode Engaged","warn")elseif Reentry or an then gV[#gV+1]=c9(ia,ig+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local ij=cm(HoldAltitude,2)if VertTakeOff then if bz then ij=cm(antigrav.getBaseAltitude(),2).." AGG singularity height"end;gV[#gV+1]=c9(ia,ig,"VTO to "..ij,"warn")elseif AutoTakeoff and not IntoOrbit then if am then gV[#gV+1]=c9(ia,ig,"Takeoff to "..AutopilotTargetName,"warn")else gV[#gV+1]=c9(ia,ig,"Takeoff to "..ij,"warn")end;if BrakeIsOn and not VertTakeOff then gV[#gV+1]=c9(ia,ig+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else gV[#gV+1]=c9(ia,ig,"Altitude Hold: "..ij,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then gV[#gV+1]=c9(ia,ig+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then gV[#gV+1]=c9(ia,ig+20,"Aligning trajectory","warn")elseif ar<0.05 then gV[#gV+1]=c9(ia,ig+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if ba~=nil then gV[#gV+1]=c9(ia,ig,ba,"warn")end end;if BrakeLanding then if StrongBrakes then gV[#gV+1]=c9(ia,ig,"Brake-Landing","warnings")else gV[#gV+1]=c9(ia,ig,"Coast-Landing","warnings")end end;if ProgradeIsOn then gV[#gV+1]=c9(ia,ig,"Prograde Alignment","crit")end;if RetrogradeIsOn then gV[#gV+1]=c9(ia,ig,"Retrograde Alignment","crit")end;if bN then local type;if string.find(bN,"COLLISION")then type="warnings"else type="crit"end;gV[#gV+1]=c9(ia,ih+20,bN,type)elseif ar==0 then local bS,bW=bQ(bs:normalize())if bW~=nil then local ij=cm(bW)local travelTime=aT.computeTravelTime(bt,0,bW)local ik="Collision"if bS.noAtmosphericDensityAltitude>0 then ik="Atmosphere"end;gV[#gV+1]=c9(ia,ih+20,bS.name.." "..ik.." "..cx(travelTime).." In "..ij,"crit")end end;if VectorToTarget and not IntoOrbit then gV[#gV+1]=c9(ia,ig+35,VectorStatus,"warn")end;gV[#gV+1]="</g>"return gV end;local function il(ex)return d(z(ex*3.6,0)+0.5).." km/h"end;local function im(gV)local io=OrbitMapX;local ip=OrbitMapY;local iq=OrbitMapSize;local ir=4;local is=15;local ca=0;local cb=0;local it,iu,iv,iw;local function ix(type)local iy,D,ex,iz;if type=="Periapsis"then iy=orbit.periapsis.altitude;D=orbit.timeToPeriapsis;ex=orbit.periapsis.speed;iz=35 else iy=orbit.apoapsis.altitude;D=orbit.timeToApoapsis;ex=orbit.apoapsis.speed;iz=-35 end;gV[#gV+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ca+iz,cb-5,io+iq/2-it+iw,cb-5)gV[#gV+1]=c9(ca,cb,type)cb=cb+is;local ij=cm(iy)gV[#gV+1]=c9(ca,cb,ij)cb=cb+is;gV[#gV+1]=c9(ca,cb,cx(D))cb=cb+is;gV[#gV+1]=c9(ca,cb,il(ex))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then ip=ip+ir;ca=io+iq+io/2+ir;cb=ip+iq/2+5+ir;it=iq/4;iw=0;gV[#gV+1]=[[<g class="pbright txtorb txtmid">]]gV[#gV+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',iq+io*2,iq+ip,ir,ir)if orbit.periapsis~=nil and orbit.apoapsis~=nil then iv=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(it*2)iu=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/iv*(1-orbit.eccentricity)iw=it-orbit.periapsis.altitude/iv-planet.radius/iv;local iA=""if orbit.periapsis.altitude<=0 then iA='redout'end;gV[#gV+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iA,io+iq/2+iw+ir,ip+iq/2+ir,it,iu)gV[#gV+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',io+iq/2+ir,ip+iq/2+ir,planet.radius/iv)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ix("Apoapsis")end;cb=ip+iq/2+5+ir;ca=io-io/2+10+ir;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ix("Periapsis")end;gV[#gV+1]=c9(io+iq/2+ir,planet.name,20+ir,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iB=orbit.timeToApoapsis/orbit.period*2*math.pi;local iC=it*math.cos(iB)local iD=iu*math.sin(iB)gV[#gV+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',io+iq/2+iC+iw+ir,ip+iq/2+iD+ir)end;gV[#gV+1]=[[</g>]]return gV else return gV end end;local function iE(gV)local ca=30;local cb=275;local iF={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local iG={"","------------------IN ATMO-----------------","Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to LowOrbitHeight over atmosphere and orbit to target","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local iH={"","------------------NO ATMO-----------------","Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local iI={"","------------------ALWAYS--------------------","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and offset","Alt-8: Toggle ground stabilization (underwater flight)","Alt-9: Activate Gyroscope","","CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if aq then b_(iF,iG)table.insert(iF,"--------------CONDITIONAL-----------------")if VertTakeOff then table.insert(iF,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if ao~=-1 then if antigrav then if bz then table.insert(iF,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(iF,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(iF,"Alt-6: Begins Vertical Takeoff.")else table.insert(iF,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(iF,"G: Begin BrakeLanding or Land")end else b_(iF,iH)end;if AltitudeHold then table.insert(iF,"Alt-Spacebar/Alt-C will raise/lower target height")end;b_(iF,iI)for i=1,#iF do cb=cb+12;gV[#gV+1]=c9(ca,cb,iF[i],"pdim txttick txtstart")end end;local function iJ(iK,iL)local iM;local iN=(iL-iK):normalize()local eC=(bw-iK):dot(iN)/iN:dot(iN)if eC<=0.then return(bw-iK):len()elseif eC>=(iL-iK):len()then return(bw-iL):len()end;local iO=iK+eC*iN;iM=(iO-bw):len()return iM end;local function iP()local iM;local iQ=nil;local iR=nil;local iS=nil;for cG,iT in pairs(aN[0])do if iT.hasAtmosphere then local aj=iJ(planet.center,iT.center)if iQ==nil or aj<iQ then iR=iT;iQ=aj;iS=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local dY=iJ(ac.center,iT.center)if dY<iQ then iR=iT;iQ=dY;iS=ac end end end end;local iU=gh(1770)local iV=gi(330)if iQ then local iW="txttick "local iX=500000;if iQ<iR.radius+iX or iQ<iS.radius+iX then if bI then iW="txttick red "else iW="txttick orange "end end;iM=cm(iQ,2)bJ=c9(iU,iV,"Pipe ("..iS.name.."--"..iR.name.."): "..iM,iW.."pbright txtmid")end end;local iY={}function iY.HUDPrologue(gV)bI,g8=gf(bw)if not bI then H=PvPR;J=PvPG;I=PvPB else H=SafeR;J=SafeG;I=SafeB end;ay=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]az=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]local iZ=ay;local i_=az;local j0=ay;local j1=az;if gj()and not brightHud then iZ=[[rgb(]]..d(H*0.4+0.5)..","..d(J*0.4+0.5)..","..d(I*0.3+0.5)..[[)]]i_=[[rgb(]]..d(H*0.3+0.5)..","..d(J*0.3+0.5)..","..d(I*0.2+0.5)..[[)]]end;gV[#gV+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],iZ,iZ,j0,j0,i_,i_,j1,j1,aG,aH)return gV end;function iY.DrawVerticalSpeed(gV,dh)gU(gV,dh)end;function iY.UpdateHud(gV)local hK=bC;local j2=bD;local h2=j2;local hh=hK;local i1=d(unit.getThrottle())local i6=bt*3.6;local i2=unit.getAxisCommandValue(0)local j3=gh(1770)local j4=gi(310)if AtmoSpeedAssist and bB then i2=K;i1=K*100 end;local gl=gk()local h3="ROLL"if i1==nil then i1=0 end;if not bM then if bt>5 then hK=hJ(br)j2=hL(br)else hK=0;j2=0 end;h3="YAW"end;if g8>50000 and not aq then local j5;j5=cm(g8)gV[#gV+1]=c9(j3,j4,"PvP Boundary: "..j5,"pbright txtbig txtmid")end;gV[#gV+1]=ak;gV[#gV+1]=aD;gV[#gV+1]=gm;if bJ~=""then gV[#gV+1]=bJ end;if gn~=""then gV[#gV+1]=gn end;if go~=""then gV[#gV+1]=go end;gU(gV,as)if l()==0 or RemoteHud then if not gj()or brightHud then if bM then h1(gV,centerX,centerY,h2,h3,bM)hg(gV,hh,h2,centerX,centerY,bM,d(hL(br)),bt)else h1(gV,centerX,centerY,j2,h3,bM)hg(gV,hK,j2,centerX,centerY,bM,d(j2),bt)end;hn(gV,as,bM)hM(gV,br,bt,centerX,centerY)end end;i0(gV,gl,i1,i2)i5(gV,i6)i9(gV)im(gV)if showHelp then iE(gV)end;return gV end;function iY.HUDEpilogue(gV)gV[#gV+1]="</svg>"return gV end;function iY.ExtraData(gV)local j6=gh(1240)local j7=gi(55)local j8=j7+10;local j9;local ja=0;local gl=gk()if VertTakeOffEngine then gl=gl.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bt>20 then gl=gl.."-COLLISION ON"end;if UseExtra~="Off"then gl="("..UseExtra..")-"..gl end;if TurnBurn then gl="TB-"..gl end;if not stablized then gl=gl.."-DeCoupled"end;local jb=vec3(core.getWorldAcceleration()):len()/9.80665;j9=core.g()gV[#gV+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then j6=gh(1120)j7=gi(55)j8=j7+10 elseif aq then local jc=gh(770)gV[#gV+1]=c9(jc,j7,"ATMOSPHERE","pdim txt txtend")gV[#gV+1]=c9(jc,j8,e("%.2f",ar),"pdim txt txtend","")end;gV[#gV+1]=c9(j6,j7,"GRAVITY","pdim txt txtend")gV[#gV+1]=c9(j6,j8,e("%.2f",j9/9.80665),"pdim txt txtend")gV[#gV+1]=c9(j6,j7+20,"ACCEL","pdim txt txtend")gV[#gV+1]=c9(j6,j8+20,e("%.2f",jb),"pdim txt txtend")gV[#gV+1]=c9(gh(960),gi(180),gl,"txtbig txtmid")end;function iY.DrawOdometer(gV,ad,TotalDistanceTravelled,ae)local j9;local jd=0;local je=0;local ja=0;if aq then ja=LastMaxBrakeInAtmo else ja=LastMaxBrake end;local jf=a:maxForceForward()j9=core.g()if j9>0.1 then je=av*j9;jd=jf/j9 end;gV[#gV+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gh(660),gh(700),gi(35),gh(960),gi(55),gh(1240),gi(35),gh(1280))if l()==0 or RemoteHud then gV[#gV+1]=c9(gh(700),gi(20),e("Trip: %.2f km",ad),"txtstart")gV[#gV+1]=c9(gh(700),gi(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")gV[#gV+1]=c9(gh(830),gi(20),"Trip Time: "..cx(ae),"txtstart")gV[#gV+1]=c9(gh(830),gi(30),"Total Time: "..cx(TotalFlightTime),"txtstart")gV[#gV+1]=c9(gh(970),gi(20),e("Mass: %.2f Tons",av/1000),"txtstart")gV[#gV+1]=c9(gh(1240),gi(10),e("Max Brake: %.2f kN",ja/1000),"txtend")gV[#gV+1]=c9(gh(1240),gi(30),e("Max Thrust: %.2f kN",jf/1000),"txtend")if j9>0.1 then gV[#gV+1]=c9(gh(970),gi(30),e("Max Mass: %.2f Tons",jd*0.5/1000),"txtstart")gV[#gV+1]=c9(gh(1240),gi(20),e("Req Thrust: %.2f kN",je/1000),"txtend")else gV[#gV+1]=c9(gh(970),gi(30),"Max Mass: n/a","txtstart")gV[#gV+1]=c9(gh(1240),gi(20),"Req Thrust: n/a","txtend")end end;gV[#gV+1]="</g>"return gV end;function iY.DrawWarnings(gV)return i9(gV)end;function iY.DisplayOrbitScreen(gV)return im(gV)end;function iY.DisplayMessage(gV,ij)if ij~="empty"then local cb=310;for jg in string.gmatch(ij,"([^\n]+)")do cb=cb+35;gV[#gV+1]=c9("50%",cb,jg,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function iY.DrawDeadZone(gV)gV[#gV+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function iY.UpdatePipe()if aq then bJ=""return end;iP()end;function iY.DrawSettings(gV)if#bF>0 then local ca=gh(640)local cb=gi(200)gV[#gV+1]=[[<g class="pbright txtvspd txtstart">]]for cG,cH in pairs(bF)do gV[#gV+1]=c9(ca,cb,cH..": ".._G[cH])cb=cb+20;if cG%12==0 then ca=ca+gh(350)cb=gi(200)end end;gV[#gV+1]=c9(gh(640),gi(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")gV[#gV+1]="</g>"end;return gV end;local jh;local ji=gh(1770)local jj=gi(350)local jk=gi(15)local jl=gh(1370)local bP,jm;local jn=0;function iY.DrawRadarInfo()local function jo()if radarPanelID~=nil and jn==0 then s(radarPanelID)radarPanelID=nil;if jh~=nil then s(jh)jh=nil end else if jn==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jh=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;jn=0 end end;local f2,f3,f1,f4,f5,eZ=aZ.GetRadarHud()local A=f4 or 0;if f1>0 then if CollisionSystem then bP=A.."/"..f5 .." Plotted : "..f1-f5 .." Ignored"else bP="Radar Contacts: "..f1 end;gm=c9(ji,jj,bP,"pbright txtbig txtmid")if#eZ>0 then gm=gm..c9(jl,jk,"Friendlies In Range","pbright txtbig txtmid")for cG,cH in pairs(eZ)do jk=jk+20;gm=gm..c9(jl,jk,radar_1.getConstructName(cH),"pdim txtmid")end;eZ={}end;if f2==nil and jh==nil then jn=1;jo()end;if f2~=nil and jh~=nil then jo()end;if radarPanelID==nil then jo()end else if f3 then gm=c9(ji,jj,"Radar: Jammed","pbright txtbig txtmid")else gm=c9(ji,jj,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jn=0;jo()end end end;function iY.DrawTanks()if fuelX~=0 and fuelY~=0 then gn=c9(fuelX,fuelY,"","txtstart pdim txtfuel")gE(fuelX,"Atmospheric ","ATMO",aI,gC,gD)gE(fuelX+120,"Space fuel t","SPACE",aJ,gA,gB)gE(fuelX+240,"Rocket fuel ","ROCKET",aK,gy,gz)end end;function iY.DrawShield()local jp=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local ca,cb=shieldX-60,shieldY+30;local jq=d(0.5+shield_1.getShieldHitPoints()*100/shield_1.getMaxShieldHitPoints())local gS=d(jq*2.55)local gT=e("rgb(%d,%d,%d)",255-gS,gS,0)local cd=""go=c9(ca,cb,"","txtmid pdim txtfuel")if jq<10 and jp~="Shield Disabled"then cd="red "end;go=go..e([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%</text>
                        </g>]],ca,cb,gT,jq,ca,cb,ca+2,cb+10,jq)go=go..c9(ca,cb-5,jp,cd.."txtstart pbright txtbig")end;return iY end;local function jr()local function js(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=aN[0][0]end;return p end;local function jt()local function ju(jv,jw)return jv.name<jw.name end;bH={}for cG,cH in pairs(aN[0])do bH[#bH+1]={name=cH.name,index=cG}end;table.sort(bH,ju)end;local function jx(jy)for cG,cH in pairs(jy)do if cH.name and cH.name==CustomTarget.name then return cG end end;return-1 end;local function jz()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local jA=bH[AutopilotTargetIndex].index;local jB=aN[0][jA]if jB.center then AutopilotTargetName=jB.name;ac=aS[0][jA]if CustomTarget~=nil then if ar==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jB;for _,cH in pairs(aS[0])do if cH.name==CustomTarget.planetname then ac=cH;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=d(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aV(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jC(gZ)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if gZ==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bH then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bH end end;if AutopilotTargetIndex==0 then jz()else local jA=bH[AutopilotTargetIndex].index;local jB=aN[0][jA]if jB~=nil and jB.name=="Space"or iphCondition=="Custom Only"and jB.center or iphCondition=="No Moons"and string.find(jB.name,"Moon")~=nil then if gZ==nil then jC()else jC(1)end else jz()end end else a2="Disengage autopilot before changing Interplanetary Helper"bX("iph","AP")end end;local function jD()local fK=-1;fK=jx(aN[0])if fK>-1 then table.remove(aN[0],fK)end;fK=-1;fK=jx(SavedLocations)if fK~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fK)end;jC()jt()end;local function jE(fZ,position,hG,jF)if dbHud_1 or hG then local p=js(position)local j9=p.gravity;local jG=p.atmosphericDensityAboveSurface;if jF then jG=ar;j9=unit.getClosestPlanetInfluence()end;local jH={position=position,name=fZ,atmosphere=jG,planetname=p.name,gravity=j9,safe=jF}if not hG then SavedLocations[#SavedLocations+1]=jH else for cG,cH in pairs(aN[0])do if cH.name and fZ==cH.name then table.remove(aN[0],cG)end end end;table.insert(aN[0],jH)jt()jz()a2="Location saved as "..fZ.."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local cI={}function cI.UpdateAtlasLocationsList()jt()end;function cI.UpdateAutopilotTarget()jz()end;function cI.adjustAutopilotTargetIndex(gZ)jC(gZ)end;function cI.findAtlasIndex(jy)jx(jy)end;function cI.UpdatePosition(jI)local fK=jx(SavedLocations)if fK~=-1 then if jI~=nil then SavedLocations[fK].name=jI;AutopilotTargetIndex=AutopilotTargetIndex-1;jC()else local jJ=SavedLocations[fK]jJ.atmosphere=ar;jJ.gravity=unit.getClosestPlanetInfluence()jJ.position=bw;jJ.safe=true end;a2=SavedLocations[fK].name.." position updated ("..SavedLocations[fK].planetname..")"else a2="Name Not Found"end end;function cI.AddNewLocation(fZ,position,hG,jF)jE(fZ,position,hG,jF)end;function cI.ClearCurrentPosition()jD()end;for cG,cH in pairs(SavedLocations)do table.insert(aN[0],cH)end;jt()cI.UpdateAutopilotTarget()return cI end;local function jK()local jL={}local function jM(ex)local jN=AutopilotEndSpeed;if not Autopilot then jN=0 end;if not aq then return aT.computeDistanceAndTime(ex,jN,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aT.computeDistanceAndTime(ex,jN,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function jO(ex)local jN=AutopilotEndSpeed;if not Autopilot then jN=0 end;return aT.computeDistanceAndTime(ex,jN,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local jP=false;function jL.GetAutopilotBrakeDistanceAndTime(ex)return jM(ex)end;function jL.GetAutopilotTBBrakeDistanceAndTime(ex)return jO(ex)end;local function jQ(jR,jS,jT)jS=jS:project_on_plane(jR)jT=jT:project_on_plane(jR)return m(jS:cross(jT):dot(jR),jS:dot(jT))end;local function jU()local function jV()local jW=-1;local jX=-1;if vBooster then jW=vBooster.distance()end;if hover then jX=hover.distance()end;if jW~=-1 and jX~=-1 then if jW<jX then return jW else return jX end elseif jW~=-1 then return jW elseif jX~=-1 then return jX else return-1 end end;local jY=jV()local jZ=-1;if telemeter_1 then jZ=telemeter_1.getDistance()end;if jY~=-1 and jZ~=-1 then if jY<jZ then return jY else return jZ end elseif jY~=-1 then return jY else return jZ end end;local function j_(planet,dU,k0)local function k1(k2,db)local d_=vec3(db)if k2.bodyId==0 then return setmetatable({latitude=d_.x,longitude=d_.y,altitude=d_.z,bodyId=0,systemId=k2.planetarySystemId},MapPosition)end;local e0=d_-k2.center;local aj=e0:len()local dh=aj-k2.radius;local df=0;local dg=0;if not cj(aj,0)then local e1=m(e0.y,e0.x)dg=e1>=0 and e1 or 2*math.pi+e1;df=math.pi/2-math.acos(e0.z/aj)end;return setmetatable({latitude=math.deg(df),longitude=math.deg(dg),altitude=dh,bodyId=k2.bodyId,systemId=k2.planetarySystemId},MapPosition)end;local k3=k1(planet,dU)k3="::pos{"..k3.systemId..","..k3.bodyId..","..k3.latitude..","..k3.longitude..","..k3.altitude.."}"if k0 then return k3 else system.setWaypoint(k3)return true end end;local k4=false;function jL.showWayPoint(planet,dU,k0)return j_(planet,dU,k0)end;function jL.APTick()local function k5()if bO and not BrakeLanding then local bV=bO[1]local f_,g0=bO[2],bO[3]local k6=math.min(f_,g0 or f_)local k7=k6/bt;local k8=AutoTakeoff and(bt<42 or ao~=-1)local k9=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if k9 and not k8 and(a8*1.5>k6 or k7<1)then BrakeIsOn=true;cf(0)if AltitudeHold then cr()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cs()end;StrongBrakes=true;BrakeLanding=true;b1=true end;if k7<11 then bN=bV.name.." COLLISION "..cx(k7).." / "..cm(k6,2)else bN=bV.name.." collision "..cx(k7)end;if k7<6 then bX("alarm","AL",2)end else bN=false end end;local function ka(bR,kb,kc)local function kd(bR,dG)bR=vec3(bR)dG=vec3(dG):normalize()local cY=bR*dG;return cY.x+cY.y+cY.z end;local ke=0.001;local kf=1;if not aq or not b3 or ao~=-1 or bt<Q then if kc==nil then kc=DampingMultiplier end;if kb==nil then kb=ke end;bR=vec3(bR):normalize()local kg=vec3()-bR;local kh=-kd(kg,core.getConstructWorldOrientationRight())*kf;local ki=-kd(kg,core.getConstructWorldOrientationUp())*kf;if aB==0 then aB=kh/2 end;if aC==0 then aC=ki/2 end;if c(kh)<0.1 then V=V-kh*2 else V=V-(kh+(kh-aB)*kc)end;if c(ki)<0.1 then U=U+ki*2 else U=U+ki+(ki-aC)*kc end;aB=kh;aC=ki;if c(kh)<kb and c(ki)<kb then return true end;return false elseif b3 and ao==-1 then bR=bs;if kc==nil then kc=DampingMultiplier end;if kb==nil then kb=ke end;bR=vec3(bR):normalize()local kg=bp-bR;local kh=-kd(kg,core.getConstructWorldOrientationRight())*kf;local ki=-kd(kg,core.getConstructWorldOrientationUp())*kf;if aB==0 then aB=kh/2 end;if aC==0 then aC=ki/2 end;if c(kh)<0.1 then V=V-kh*5 else V=V-(kh+(kh-aB)*kc)end;if c(ki)<0.1 then U=U+ki*5 else U=U+ki+(ki-aC)*kc end;aB=kh;aC=ki;if c(kh)<kb and c(ki)<kb then return true end;return false end end;aq=j()>0;ar=j()as=core.getAltitude()ao=jU()D=o()b4=D;bM=unit.getClosestPlanetInfluence()>0;if CollisionSystem then k5()end;if antigrav then bz=antigrav.getState()==1 end;local kj=1;local kk=1;local kl=D-b4;local km=-math.deg(jQ(bo,bs,bp))local kn=math.deg(jQ(bq,bs,bp))local gZ=bu*-1;b3=aq and km<-YawStallAngle or km>YawStallAngle or kn<-PitchStallAngle or kn>PitchStallAngle;local ko=system.getMouseDeltaX()local kp=system.getMouseDeltaY()if InvertMouse and not a1 then kp=-kp end;V=0;Z=0;U=0;sys=aS[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aV(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bs)if as==0 then as=(bw-planet.center):len()-planet.radius end;local j9=planet:getGravity(core.getConstructWorldPos()):len()*av;b5=0;aU=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and a1 then if not a_ then ag=ag+ko;ah=ah+kp end else ag=0;ah=0 end else ag=ag+ko;ah=ah+kp;aj=x(ag*ag+ah*ah)if not a1 and l()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(kp,-100,100)+0.5)*2*kj;V=(-utils.smoothstep(ko,-100,100)+0.5)*2*kk end end end end;local kq=bt>8334;if bt>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not kq then a2="Space Speed Engine Shutoff reached"cf(0)end;if not kq and LastIsWarping then if not BrakeIsOn then cu()end;if Autopilot then cs()end end;LastIsWarping=kq;if aq and ar>0.09 then if bt>b8/3.6 and not AtmoSpeedAssist and not jP then BrakeIsOn=true;jP=true elseif not AtmoSpeedAssist and jP then if bt<b8/3.6 then BrakeIsOn=false;jP=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local kr=false;if CustomTarget~=nil and al~=1 then kr=ka(CustomTarget.position-bw,0.1)else kr=ka(vec3(bs),0.01)end;b1=true;if kr then ci(d(b8))if(c(bD)<2 or c(bC)>85)and bt>=b8/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cv()end elseif aq and AtmoSpeedAssist then cf(1)end elseif bt>Q then ka(vec3(bs),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bt>Q then ka(-vec3(bs))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cv()al=false;an=true else al=false;cs()end end;if an and CustomTarget~=nil and(as<HoldAltitude+250 and as>HoldAltitude-250)and bt*3.6>b8-250 and c(bv)<25 and ar>=0.1 and(CustomTarget.position-bw):len()>2000+as then cs()an=false end;if VertTakeOff then b1=true;local ks=HoldAltitude;if bv<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b1=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bz or HoldAltitude<planet.spaceEngineMinAltitude then if bz then ks=antigrav.getBaseAltitude()end;if as<ks-100 then b9=0;af=15;BrakeIsOn=false elseif bv>0 then BrakeIsOn=true;af=0 elseif bv<-30 then BrakeIsOn=true;af=15 elseif as>=ks then if bz then if Autopilot or VectorToTarget then cp()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"bX("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"bX("vtoc","VT")cp()end;af=0 end else if ar>0.08 then b9=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bl then b9=0;af=20 else af=0;b9=36;ci(3500)end else b1=autoRollPreference;IntoOrbit=true;bj=false;CancelIntoOrbit=false;bd=false;bb=nil;bc=nil;if bi==nil then bi=planet end;bh=ks;bg=true;VertTakeOff=false end end;if b9~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local kt=q(b9-bC,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(kt)local ku=q(vTpitchPID:get(),-1,1)U=ku end end;if IntoOrbit then local kg;local kv=false;local kw=cm(bh)if bi==nil then bi=planet;if VectorToTarget then bi=ac end end;if not bg then bh=d(bi.radius+bi.surfaceMaxAltitude+LowOrbitHeight)if bi.hasAtmosphere then bh=d(bi.radius+bi.noAtmosphericDensityAltitude+LowOrbitHeight)end;bg=true end;if bf.VectorToTarget then kg=CustomTarget.position-bw end;local kx,ky=aV(bi):escapeAndOrbitalSpeed((bw-bi.center):len()-bi.radius)local kz=bD;if not bd then local kA=false;local kB=false;cf(0)bc=0;ba="Aligning to orbital path - OrbitHeight: "..kw;if bf.VectorToTarget then ka(kg:normalize():project_on_plane(bu))kv=bp:dot(kg:project_on_plane(bo):normalize())>0.95 else ka(bs)kv=km<0.5;if bt<150 then kv=true end end;U=0;bb=0;if bC<=bb+1 and bC>=bb-1 then kA=true else kA=false end;if kz<=bc+1 and kz>=bc-1 then kB=true else kB=false end;if kA and kB and kv then bb=nil;bc=nil;bd=true end else if bf.VectorToTarget then ka(kg:normalize():project_on_plane(bu))elseif bt>150 then ka(bs)end;U=0;if bf.VectorToTarget then local a8,_=aT.computeDistanceAndTime(bt,b8/3.6,av,0,0,LastMaxBrake)if bj and kg:len()>15000+a8+as then ba="Orbiting to Target"if as-100<=bi.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bi.noAtmosphericDensityAltitude then bj=false end elseif bj or kg:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"bX("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;bf.VectorToTarget,bf.AutopilotAlign=false,false;cq()cv()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bh*0.9 and as<bh*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bh*0.99 and orbit.apoapsis.altitude>=bh*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bj then if bj then BrakeIsOn=false;cf(0)bb=0;if not bf.VectorToTarget then a2="Orbit complete"bX("orCom","OB")cq()end else bn=bn+1;if bn>=2 then bj=true end end else ba="Adjusting Orbit - OrbitHeight: "..kw;be=true;ci(ky*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kC=bv;local kD=as-bh;local kE=c(kD)if bv<10 and c(bC)<10 and kE<100 then kC=bv*2 end;if kC<10 and c(bC)<10 and kE<100 then kC=kC*2 end;if kC<5 and c(bC)<5 and kE<100 then kC=kC*4 end;VSpdPID:inject(kC)bb=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kD)bb=q(bb-q(OrbitAltPID:get(),-15,15),-90,90)end end else local kF=2.75;local kG=c(z(kx*kF))local kH=kG%50;if kH>0 then kG=kG-kH+50 end;BrakeIsOn=false;if as<bh*0.8 then ba="Escaping planet gravity - OrbitHeight: "..kw;bb=utils.map(bv,200,0,-15,80)elseif as>=bh*0.8 and as<bh*1.15 then ba="Approaching orbital corridor - OrbitHeight: "..kw;kG=kG*0.75;bb=utils.map(bv,100,-100,-15,65)elseif as>=bh*1.15 and as<bh*1.5 then ba="Approaching orbital corridor - OrbitHeight: "..kw;kG=kG*0.75;if bv<0 or be then bb=utils.map(as,bh*1.5,bh*1.01,-30,0)else bb=utils.map(as,bh*0.99,bh*1.5,0,30)end elseif as>bh*1.5 then ba="Reentering orbital corridor - OrbitHeight: "..kw;bb=-65;local kI=utils.map(bv,-150,-400,1,0.55)kG=kG*kI end;ci(d(kG))end end;if bb~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kJ=bb-bC;OrbitPitchPID:inject(kJ)local kK=q(OrbitPitchPID:get(),-0.5,0.5)U=kK end end;if Autopilot and ar==0 and not al then local function kL(bP,orbit)system.print(bP)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cf(0)P=false;a2=bP;bX("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bh=as;bg=true end;cq()end end;local kM,kN=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kO=(CustomTarget.position-ac.center):normalize()local kP=kO:project_on_plane((ac.center-bw):normalize()):normalize()local kQ=ac.center+kP*(ac.radius+AutopilotTargetOrbit)local kR=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bw-kQ):len()<(bw-kR):len()then kM=kQ else kM=kR;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kM;aY.showWayPoint(ac,AutopilotTargetCoords)kN=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kN=true;TargetSet=true;AutopilotRealigned=true;kM=CustomTarget.position+(bw-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kO=(bw+bs*100000-ac.center):normalize()local kP=kO:project_on_plane((ac.center-bw):normalize()):normalize()if kP:len()<1 then kO=(bw+bp*100000-ac.center):normalize()kP=kO:project_on_plane((ac.center-bw):normalize()):normalize()end;kM=ac.center+kP*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kM;TargetSet=true;kN=true;AutopilotRealigned=true;aY.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kM)-bw):len()local bS,bT,bU=aS:getPlanetarySystem(0):castIntersections(bw,bs:normalize(),function(bV)if bV.noAtmosphericDensityAltitude>0 then return bV.radius+bV.noAtmosphericDensityAltitude else return bV.radius+bV.surfaceMaxAltitude*1.5 end end)local bW=bT;if bU~=nil and bT~=nil then bW=math.min(bU,bT)end;if bW~=nil and bW<AutopilotDistance and bS.name==ac.name then AutopilotDistance=bW end;local kr=true;local kS=(ac.center-(bw+vec3(bs):normalize()*AutopilotDistance)):len()-ac.radius;local ij=cm(kS)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ij..'"}')local a8,a9;if not TurnBurn then a8,a9=jM(bt)else a8,a9=jO(bt)end;if bt>300 and AutopilotAccelerating then local kg=vec3(kM)-bw;local kT=q(math.deg(jQ(bo,bs:normalize(),kg:normalize()))*bt/500,-90,90)local kU=q(math.deg(jQ(bq,bs:normalize(),kg:normalize()))*bt/500,-90,90)if c(kT)<20 and c(kU)<20 then kT=kT*2;kU=kU*2 end;if c(kT)<2 and c(kU)<2 then kT=kT*2;kU=kU*2 end;local km=-math.deg(jQ(bo,bp,bs:normalize()))local kn=-math.deg(jQ(bq,bp,bs:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kU-kn)local kV=q(apPitchPID:get(),-1,1)U=U+kV;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kT-km)local kW=q(apYawPID:get(),-1,1)V=V+kW;kN=true;if c(kT)>2 or c(kU)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"bX("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bX("apAcc","AP")end end end;if kS<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aV(ac):escapeAndOrbitalSpeed(kS)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bS,bW=bQ((AutopilotTargetCoords-bw):normalize())if ac.name~=planet.name then if bS~=nil then a2="Collision with "..bS.name.." in "..cm(bW).."\nClear LOS to continue."ai=5;k4=true else k4=false;a2=""end end end;if not k4 then if not AutopilotCruising and not AutopilotBraking and not kN then kr=ka((kM-bw):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kr=ka(-vec3(bs):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cf(AutopilotInterplanetaryThrottle)K=z(AutopilotInterplanetaryThrottle,2)P=true end;local kX=unit.getThrottle()if AtmoSpeedAssist then kX=K end;if br:len()>=MaxGameVelocity or kX==0 and P then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then bX("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cf(0)end;if AutopilotDistance<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bX("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cf(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cf(1,true)end;local _,ky=aV(ac):escapeAndOrbitalSpeed((bw-planet.center):len()-planet.radius)local kg;if CustomTarget~=nil then kg=CustomTarget.position-bw end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bt<50 then kL("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bt<=ky and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kL("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aY.showWayPoint(ac,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then bX("apCir","AP")AutopilotStatus="Circularizing"end;if bt<=ky then if CustomTarget~=nil then if bs:normalize():dot(kg:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then bX("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aY.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else kL("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aY.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else kL("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then kL("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bX("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kX=unit.getThrottle()if AtmoSpeedAssist then kX=K end;if kX>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bX("apAcc","AP")end;AutopilotCruising=false end else if kr then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bq;AutopilotShipUp=bo;AutopilotShipRight=bq end;AutopilotRealigned=true elseif kr and not k4 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bX("apAcc","AP")end;if not P then cf(AutopilotInterplanetaryThrottle,true)K=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"bX("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cf(0)P=false;ProgradeIsOn=true;al=true;aY.showWayPoint(ac,CustomTarget.position)end;if a0 then b1=true;local kU=0;local eB=bw+vec3(unit.getMasterPlayerRelativePosition())local kY=eB-bw;local kZ=vec3(kY):project_on(bp):len()local k_=vec3(kY):project_on(bq):len()local aj=x(kZ*kZ+k_*k_)ka(kY:normalize())local l0=40;local l1=aj<l0;local l2=100;local l3=q((aj-l0)/2,10,l2)U=0;local kr=c(V)<0.1;if kr and bt<l3 and not l1 then BrakeIsOn=false;kU=-20 else BrakeIsOn=true;kU=0 end;local l4=0;if c(kU-bC)>l4 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kU-bC)local kV=pitchPID:get()U=kV end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local l5=LastMaxBrakeInAtmo;if l5 then l5=l5*q(bt/100,0.1,1)*ar else l5=LastMaxBrake end;if ar<0.01 then l5=LastMaxBrake end;local l6=vec3(core.getWorldAirFrictionAcceleration())local l7=x(l6:len()-l6:project_on(gZ):len())*av;if bt>100 then a8,a9=aT.computeDistanceAndTime(bt,100,av,0,0,l5+l7)local l8,l9=aT.computeDistanceAndTime(100,0,av,0,0,l5/2)a8=a8+l8 else a8,a9=aT.computeDistanceAndTime(bt,0,av,0,0,l5/2)end;local la=HoldAltitude-as;local lb=500+bt;local lc=1;if AutoTakeoff then lc=q(bt/100,0.1,1)end;local kU=(utils.smoothstep(la,-lb,lb)-0.5)*2*MaxPitch*lc;if not Reentry and not al and not VectorToTarget and bp:dot(bs:normalize())<0.99 then kU=(utils.smoothstep(la,-lb*q(20-19*ar*10,1,20),lb*q(20-19*ar*10,1,20))-0.5)*2*MaxPitch*q(2-ar*10,1,2)*lc end;if not AltitudeHold then kU=0 end;if LockPitch~=nil then if bM and not IntoOrbit then kU=LockPitch else LockPitch=nil end end;b1=true;local ld=U;if Reentry then local le=d(b8)local lf,lg=aT.computeDistanceAndTime(bt,le/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)local lh=as-(planet.noAtmosphericDensityAltitude+5000)local li=as>planet.noAtmosphericDensityAltitude+5000;if li and bt<=le/3.6 and bt>le/3.6-10 and c(bs:normalize():dot(bp))>0.9 then if not bB then cf(0)end elseif bB and not li and not aq then ci(le,true)end;if bB then if bt>le/3.6 and(lf>-1 and lh<=lf or not li)then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if not R then kU=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kU=0;b1=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and li then b1=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then BrakeIsOn=false;if not aq and(bB or r:getTargetSpeed(axisCommandId.longitudinal)~=le)then ci(le)end;if bt<le/3.6+1 then R=false;Reentry=false;b1=true end end end;if bt>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then ka(vec3(bs))end;if bK or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local kg;if bK then if type(bK)=="table"then kg=bK elseif bK<3 and bK>0 then kg=-bu:cross(bs)*5000 elseif bK>=3 then kg=bu:cross(bs)*5000 elseif bK<0 then kg=bs*25000 end elseif CustomTarget~=nil then kg=CustomTarget.position-bw else kg=ac.center-bw end;local kT=math.deg(jQ(bu:normalize(),bs,kg))*2;local lj=math.rad(c(bD))if bt>minRollVelocity and ar>0.01 then local lk=q(90-kU*2,-90,90)b5=q(kT*2,-lk,lk)local ll=kT;kT=q(q(kT,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(lj)+4*(bC-kU)*math.sin(math.rad(bD)),-YawStallAngle*0.80,YawStallAngle*0.80)kU=q(q(kU*math.cos(lj),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(ll)*math.sin(lj),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b5=0;kT=q(kT,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lm=km-kT;if bK and c(lm)<=0.0001 and(type(bK)=="table"or type(bK)~="table"and bK<0 and c(bD)<1)then if bK==-2 then cr()end;bK=nil;bX("180Off","BR")return end;if not b3 and bt>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lm)local kW=q(yawPID:get(),-1,1)V=V+kW elseif aq and ao>-1 or bt<minRollVelocity then ka(kg)elseif b3 and ar>0.01 then if(km<-YawStallAngle or km>YawStallAngle)and ar>0.01 then ka(bs)end;if(kn<-PitchStallAngle or kn>PitchStallAngle)and ar>0.01 then kU=q(bC-kn,bC-PitchStallAngle*0.80,bC+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local ks=planet:getAltitude(CustomTarget.position)local lh=x(kg:len()^2-(as-ks)^2)local ln=bs:len()-c(bv)StrongBrakes=true;if not am and not Reentry and lh<=a8+bt*kl/2 and(bs:project_on_plane(bu):normalize():dot(kg:project_on_plane(bu):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cf(0)if AltitudeHold then cr()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ln<0.1 or lh<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<lh)then if not bz then bX("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bN=false end;LastDistanceToTarget=lh end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local kg=CustomTarget.position-bw;local ks=planet:getAltitude(CustomTarget.position)local lh=x(kg:len()^2-(as-ks)^2)local l5=LastMaxBrakeInAtmo;if l5 then a8,a9=aT.computeDistanceAndTime(bt,0,av,0,0,l5/2)StrongBrakes=true;if lh<=a8+bt*kl/2 and bs:project_on_plane(bu):normalize():dot(kg:project_on_plane(bu):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cv()end end;LastDistanceToTarget=lh end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bj and not IntoOrbit then bh=HoldAltitude;bg=true;if VectorToTarget then bf.VectorToTarget=true end;cq()VectorToTarget=false;bd=true end end;if b3 and ar>0.01 and ao==-1 and bt>minRollVelocity and VectorStatus~="Finalizing Approach"then ka(bs)kU=q(bC-kn,bC-PitchStallAngle*0.80,bC+PitchStallAngle*0.80)end;U=ld;local jZ=-1;if BrakeLanding then kU=0;local lo=false;local lp=30;if aU~=nil and aU>0 then local lq=q(ar,0.4,2)local l5=LastMaxBrakeInAtmo*q(bt/100,0.1,1)*lq;local lr=aU*lq+l5-j9;local ls=l5/2-j9;local lt=bt-x(c(ls/2)*20/(0.5*av))*utils.sign(ls)if lt<0 then lt=0 end;local lu;if bt>100 then local lv,_=aT.computeDistanceAndTime(bt,100,av,0,0,l5)local lw,_=aT.computeDistanceAndTime(100,0,av,0,0,x(l5))lu=lv+lw else lu=aT.computeDistanceAndTime(bt,0,av,0,0,x(l5))end;if lu<20 then BrakeIsOn=false else local lx=0;if lt>100 then local ly,_=aT.computeDistanceAndTime(lt,100,av,0,0,lr)local lz,_=aT.computeDistanceAndTime(100,0,av,0,0,aU*lq+x(l5)-j9)lx=ly+lz else lx,_=aT.computeDistanceAndTime(lt,0,av,0,0,aU*lq+x(l5)-j9)end;lx=(lx+15+bt*kl)*1.1;local lA=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lA then local ks=planet:getAltitude(CustomTarget.position)local lB=as-ks-100;local kg=CustomTarget.position-bw;local lC=x(kg:len()^2-(as-ks)^2)if lC>100 then lA=false elseif lB<=lx or lx==-1 then BrakeIsOn=true;lo=true else BrakeIsOn=false;lo=true end end;if not lA and CalculateBrakeLandingSpeed then if lx>=lp then BrakeIsOn=true else BrakeIsOn=false end;lo=true end end end;if not bB then cf(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)stablized=true;jZ=ao;if jZ>-1 then b1=autoRollPreference;if bt<1 or bs:normalize():dot(bu)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()bX("grOut","LG",1)end;r:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bs:normalize():dot(-gZ)<0.999 then BrakeIsOn=true elseif bv<-brakeLandingRate and not lo then BrakeIsOn=true elseif not lo then BrakeIsOn=false end end;if AutoTakeoff or am then local bS,bU,bT;if AutopilotTargetCoords~=nil then bS,bU,bT=aS:getPlanetarySystem(0):castIntersections(bw,(AutopilotTargetCoords-bw):normalize(),function(bV)return bV.radius+bV.noAtmosphericDensityAltitude end)end;if bz then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cf(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kU)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bB and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bt<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cf(0)elseif am then cf(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(bS==nil or bS.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bB then cf(0)end;AutopilotAccelerating=true end end;local lD=ao>-1;local lE=bC;if(VectorToTarget or am or bK)and not lD and bt>minRollVelocity and ar>0.01 then local lj=math.rad(c(bD))lE=bC*c(math.cos(lj))+kn*math.sin(lj)end;local lF=q(kU-lE,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then lF=q(kU-lE,-85,MaxPitch)elseif ar<0.01 then lF=q(kU-lE,-MaxPitch,MaxPitch)end;if c(bD)<5 or VectorToTarget or bK or BrakeLanding or lD or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lF)local kV=pitchPID:get()U=U+kV end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=jU()return jL end;function script.onStart()local lG={}local lH={}local lI=false;local function lJ()local function lK(lL)local lM=dbHud_1.hasKey;for cG,cH in pairs(lL)do if lM(cH)then local cY=f(dbHud_1.getStringValue(cH))if cY~=nil then _G[cH]=cY;lI=true end end end end;if dbHud_1 then if not useTheseSettings then lK(c2())coroutine.yield()lK(b)else lK(b)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;lI=false end;coroutine.yield()if lI then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b1=autoRollPreference;b8=AtmoSpeedLimit;ay=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]az=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<D then LastMaxBrakeInAtmo=0 end;LastStartTime=D;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function lN()local function lO(lP,lQ)if lP>lQ then lQ=lP end;local lR,lS=0,0;if ContainerOptimization>0 then lR=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lS=FuelTankOptimization*0.05 end;lQ=lQ*(1-(lR+lS))return lQ end;local lT=core.getElementNameById;local lU=fuelX~=0 and fuelY~=0;for cG in pairs(at)do local type=core.getElementTypeById(at[cG])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(at[cG])),'^.*vertical.*$')then by=true end end;if n(type,'^.*Space Engine$')then bm=true;if n(tostring(core.getElementTagsById(at[cG])),'^.*vertical.*$')then local lV=core.getElementRotationById(at[cG])if lV[4]<0 then if z(-lV[4],0.1)==0.5 then bk=true end else if z(lV[4],0.1)==0.5 then bl=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local lW=h(at[cG])if lW>10000 then F=128;G=110 elseif lW>1000 then F=64;G=55 elseif lW>150 then F=32;G=27 end end;aL=aL+h(at[cG])if lU and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lW=h(at[cG])local lX=k(at[cG])local lP=0;local gO=o()if type=="Atmospheric Fuel Tank"then local lQ=400;local lY=35.03;if lW>10000 then lQ=51200;lY=5480 elseif lW>1300 then lQ=6400;lY=988.67 elseif lW>150 then lQ=1600;lY=182.67 end;lP=lX-lY;if fuelTankHandlingAtmo>0 then lQ=lQ+lQ*fuelTankHandlingAtmo*0.2 end;lQ=lO(lP,lQ)aI[#aI+1]={at[cG],lT(at[cG]),lQ,lY,lP,gO}end;if type=="Rocket Fuel Tank"then local lQ=320;local lY=173.42;if lW>65000 then lQ=40000;lY=25740 elseif lW>6000 then lQ=5120;lY=4720 elseif lW>700 then lQ=640;lY=886.72 end;lP=lX-lY;if fuelTankHandlingRocket>0 then lQ=lQ+lQ*fuelTankHandlingRocket*0.1 end;lQ=lO(lP,lQ)aK[#aK+1]={at[cG],lT(at[cG]),lQ,lY,lP,gO}end;if type=="Space Fuel Tank"then local lQ=2400;local lY=182.67;if lW>10000 then lQ=76800;lY=5480 elseif lW>1300 then lQ=9600;lY=988.67 end;lP=lX-lY;if fuelTankHandlingSpace>0 then lQ=lQ+lQ*fuelTankHandlingSpace*0.2 end;lQ=lO(lP,lQ)aJ[#aJ+1]={at[cG],lT(at[cG]),lQ,lY,lP,gO}end end end;if not by then VertTakeOff,VertTakeOffEngine=false,false end end;local function lZ()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(aq or not aq and as<10000)then for _,cH in pairs(door)do cH.toggle()end end;if switch then for _,cH in pairs(switch)do cH.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cH in pairs(forcefield)do cH.toggle()end end;if antigrav then bz=antigrav.getState()==1;if bz and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and br:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(b2)if aq and ao~=-1 then aU=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function l_(m0,m1,m2,m3,ca,cb,m4,m5,m6,m7)local m8={enableName=m0,disableName=m1,width=m2,height=m3,x=ca,y=cb,toggleVar=m4,toggleFunction=m5,drawCondition=m6,hovered=false}if m7 then table.insert(lH,m8)else table.insert(lG,m8)end;return m8 end;local function m9(ma)if not bE then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif ma=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif ma=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif ma=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bF=c2(ma)showHud=false else bF={}showHud=true end end;local function mb()bE=not bE;if bE then aF=lH;a2="Hold SHIFT to see Settings"bG=showHud else aF=lG;a2="Hold SHIFT to see Control Buttons"m9()showHud=bG end end;local function mc(cH)_G[cH]=not _G[cH]if _G[cH]then a2=cH.." set to true"else a2=cH.." set to false"end;if cH=="showHud"then bG=_G[cH]elseif cH=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cH=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function md()local me=50;local mf=340;local ca=500;local cb=aH/2-400;local mg=0;for cG,cH in pairs(c2("boolean"))do if type(_G[cH])=="boolean"then l_(cH,cH,mf,me,ca,cb,function()return _G[cH]end,function()mc(cH)end,function()return true end,true)cb=cb+me+20;if mg==9 then ca=ca+mf+20;cb=aH/2-400;mg=0 else mg=mg+1 end end end;l_("Control View","Control View",mf,me,10,aH/2-500,function()return true end,mb,function()return true end,true)l_("View Handling Settings",'Hide Handling Settings',mf,me,10,aH/2-(500-me),function()return showHandlingVariables end,function()m9("handling")end,function()return true end,true)l_("View Hud Settings",'Hide Hud Settings',mf,me,10,aH/2-(500-me*2),function()return showHudVariables end,function()m9("hud")end,function()return true end,true)l_("View Physics Settings",'Hide Physics Settings',mf,me,10,aH/2-(500-me*3),function()return showPhysicsVariables end,function()m9("physics")end,function()return true end,true)end;local function mh()local function jE()local position=bw;local fZ=planet.name..". "..#SavedLocations;if radar_1 then local dq,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dq~=nil and dq~=""then fZ=fZ.." "..radar_1.getConstructName(dq)end end;return aX.AddNewLocation(fZ,position,false,true)end;local function mi()TurnBurn=not TurnBurn end;local function mj(mk)if mk==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function ml()aX.UpdatePosition()end;local function jD()aX.ClearCurrentPosition()end;local function mm()local fZ=AutopilotTargetName;if fZ==nil then local ij=cm((bw-CustomTarget.position):len())fZ=CustomTarget.name.." "..ij end;if fZ==nil then fZ="None"end;return"Engage Autopilot: "..fZ end;local function mn()local fZ=AutopilotTargetName;if fZ==nil then fZ=CustomTarget.name end;if fZ==nil then fZ="None"end;return"Disable Autopilot: "..fZ end;local function mo()if l()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)bX("folOn","F")else bX("folOff","F")BrakeIsOn=true;b1=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local me=50;local mf=260;local mp=l_("Enable Brake Toggle","Disable Brake Toggle",mf,me,aG/2-mf/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)l_("Align Prograde","Disable Prograde",mf,me,aG/2-mf/2-50-mp.width,aH/2-me+380,function()return ProgradeIsOn end,function()mj(1)end)l_("Align Retrograde","Disable Retrograde",mf,me,aG/2-mf/2+mp.width+50,aH/2-me+380,function()return RetrogradeIsOn end,mj,function()return ar==0 end)local mq=l_(mm,mn,600,60,aG/2-600/2,aH/2-60/2-400,function()return Autopilot end,cs)l_("Save Position","Save Position",200,mq.height,mq.x+mq.width+30,mq.y,function()return false end,jE,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)l_("Update Position","Update Position",200,mq.height,mq.x+mq.width+30,mq.y,function()return false end,ml,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)l_("Clear Position","Clear Position",200,mq.height,mq.x-200-30,mq.y,function()return true end,jD,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)me=60;mf=300;local ca=10;local cb=aH/2-500;l_("Show Help","Hide Help",mf,me,ca,cb,function()return showHelp end,function()showHelp=not showHelp end)cb=cb+me+20;l_("View Settings","View Settings",mf,me,ca,cb,function()return true end,mb)local cb=aH/2-300;l_("Enable Turn and Burn","Disable Turn and Burn",mf,me,ca,cb,function()return TurnBurn end,mi)l_("Horizontal Takeoff Mode","Vertical Takeoff Mode",mf,me,ca+mf+20,cb,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return by end)cb=cb+me+20;l_("Show Orbit Display","Hide Orbit Display",mf,me,ca,cb,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)l_("Engage Orbiting","Cancel Orbiting",mf,me,ca+mf+20,cb,function()return IntoOrbit end,cq,function()return ar==0 and bM end)cb=cb+me+20;l_("Glide Re-Entry","Cancel Glide Re-Entry",mf,me,ca,cb,function()return Reentry end,function()al=1;mj(1)end,function()return planet.hasAtmosphere and not aq end)l_("Parachute Re-Entry","Cancel Parachute Re-Entry",mf,me,ca+mf+20,cb,function()return Reentry end,cv,function()return planet.hasAtmosphere and not aq end)cb=cb+me+20;l_("Engage Follow Mode","Disable Follow Mode",mf,me,ca,cb,function()return a0 end,mo,function()return l()==1 end)l_("Enable Repair Arrows","Disable Repair Arrows",mf,me,ca+mf+20,cb,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return l()==1 end)cb=cb+me+20;if not ExternalAGG then l_("Enable AGG","Disable AGG",mf,me,ca,cb,function()return bz end,cw,function()return antigrav~=nil end)end;l_(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,mf*2,me,ca,cb,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)cb=cb+me+20;l_(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,mf*2,me,ca,cb,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lJ()coroutine.yield()lN()coroutine.yield()aY=jK()lZ()md()mh()aF=lG;coroutine.yield()aN=cI()aR=cJ()aS=aR(cI())aT=e5()aV=ez()aZ=eX()aW=g7()aX=jr()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bX("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cH in pairs(door)do cH.toggle()end end;if switch then for _,cH in pairs(switch)do cH.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cH in pairs(forcefield)do cH.toggle()end end;cC()if button then button.activate()end;if SetWaypointOnExit then aY.showWayPoint(planet,bw)end;bX("stop","SU")end;function script.onTick(mr)local ms=nil;if mr=="contact"then if not contactTimer then contactTimer=0 end;if D>contactTimer+10 then a2="Radar Contact"bX("rdrCon","RC")contactTimer=D end;unit.stopTimer("contact")elseif mr=="tenthSecond"then local function mt()local mu=system.createData;local mv=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mv(panelInterplanetary,"value")interplanetaryHeaderText=mu('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mv(panelInterplanetary,"value")widgetDistanceText=mu('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=mv(panelInterplanetary,"value")widgetTravelTimeText=mu('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mv(panelInterplanetary,"value")widgetMaxMassText=mu('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mv(panelInterplanetary,"value")widgetTargetOrbitText=mu('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mv(panelInterplanetary,"value")widgetCurBrakeDistanceText=mu('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mv(panelInterplanetary,"value")widgetCurBrakeTimeText=mu('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mv(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mu('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mv(panelInterplanetary,"value")widgetMaxBrakeTimeText=mu('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mv(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mu('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mw()s(panelInterplanetary)panelInterplanetary=nil end;local function mx()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bw):len()else AutopilotDistance=(CustomTarget.position-bw):len()end end;local ex=bt;local kX=unit.getThrottle()/100;if AtmoSpeedAssist then kX=K end;local my,mz=aT.computeDistanceAndTime(bt,MaxGameVelocity,av,a:maxForceForward()*kX,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aY.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aY.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mA;if not TurnBurn and ex>0 then _,mA=aY.GetAutopilotBrakeDistanceAndTime(ex)else _,mA=aY.GetAutopilotTBBrakeDistanceAndTime(ex)end;local mB=0;local mC=0;if AutopilotCruising or not Autopilot and ex>5 then mC=aT.computeTravelTime(ex,0,AutopilotDistance)elseif a8+my<AutopilotDistance then mB=AutopilotDistance-(a8+my)mC=aT.computeTravelTime(8333.0556,0,mB)else local mD=(AutopilotDistance-a8)/my;my=AutopilotDistance-a8;mz=mz*mD end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mC elseif AutopilotBraking then return mA elseif AutopilotCruising then return mC+mA else return mz+a9+mC end end;local function mE(j9,mF)if j9==nil then j9=core.g()end;j9=z(j9,5)if mF~=nil and mF or(ms==nil or ms~=j9)then local ex=br:len()local mG=f(unit.getData()).maxBrake;if mG~=nil and mG>0 and aq then mG=mG/q(ex/100,0.1,1)mG=mG/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mG)/2 else LastMaxBrakeInAtmo=mG end end end;if mG~=nil and mG>0 then LastMaxBrake=mG end;ms=j9 end end;mE(nil,true)if bA~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bA then ci(bA,TRUE)else bA=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mt()end;if AutopilotTargetName~=nil then local mH=CustomTarget~=nil;local mI=LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mx()if mH and not Autopilot then aj=(bw-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bw):len()end;if not TurnBurn then a8,a9=aY.GetAutopilotBrakeDistanceAndTime(bt)aa,ab=aY.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aY.GetAutopilotTBBrakeDistanceAndTime(bt)aa,ab=aY.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ij=cm(aj)t(widgetDistanceText,'{"label": "distance", "value": "'..ij..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cx(travelTime)..'", "unit":""}')ij=cm(a8)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ij..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cx(a9)..'", "unit":""}')ij=cm(aa)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ij..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cx(ab)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",mI*0.5/1000)..'", "unit":" Tons"}')ij=cm(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..ij..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bB and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then cf(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mw()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aW.DrawTanks()if shield_1 then aW.DrawShield()end elseif mr=="oneSecond"then local function mJ(gV)local mK=0;aD=""local mL=aL;local mM=0;local mN=0;local mO=0;local gS=0;local gT=""local mP=core.getElementHitPointsById;for cG in pairs(at)do local lW=0;local mQ=0;mQ=h(at[cG])lW=mP(at[cG])mM=mM+lW;if lW<mQ then if lW==0 then mO=mO+1 else mN=mN+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cG]))local ca=position.x-F;local cb=position.y-F;local fr=position.z-F;table.insert(aA,core.spawnArrowSticker(ca,cb,fr+1,"down"))table.insert(aA,core.spawnArrowSticker(ca,cb,fr+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(ca+1,cb,fr,"north"))table.insert(aA,core.spawnArrowSticker(ca+1,cb,fr,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(ca-1,cb,fr,"south"))table.insert(aA,core.spawnArrowSticker(ca-1,cb,fr,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(ca,cb-1,fr,"east"))table.insert(aA,core.spawnArrowSticker(ca,cb-1,fr,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(ca,cb+1,fr,"west"))table.insert(aA,core.spawnArrowSticker(ca,cb+1,fr,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cG])end elseif aM and#aA>0 and aA[11]==at[cG]then for gN in pairs(aA)do core.deleteSticker(aA[gN])end;aA={}end end;mK=d(mM/mL*100)if mK<100 then gV[#gV+1]=c9(0,0,"","pbright txt")gS=d(mK*2.55)gT=e("rgb(%d,%d,%d)",255-gS,gS,0)if mK<100 then gV[#gV+1]=c9("50%",1035,"Elemental Integrity: "..mK.."%","txtbig txtmid","fill:"..gT)if mO>0 then gV[#gV+1]=c9("50%",1055,"Disabled Modules: "..mO.." Damaged Modules: "..mN,"txtbig txtmid","fill:"..gT)elseif mN>0 then gV[#gV+1]=c9("50%",1055,"Damaged Modules: "..mN,"txtbig txtmid","fill:"..gT)end end end end;local function mR()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function mS()local gO=o()local i6=bt;local mT=gO-au;if i6>1.38889 then i6=i6/1000;local mU=i6*(gO-au)TotalDistanceTravelled=TotalDistanceTravelled+mU;ad=ad+mU end;ae=ae+mT;TotalFlightTime=TotalFlightTime+mT;au=gO end;mS()aW.UpdatePipe()mR()local gV={}aW.ExtraData(gV)if ShowOdometer then gV=aW.DrawOdometer(gV,ad,TotalDistanceTravelled,ae)end;if ShouldCheckDamage then mJ(gV)end;ak=table.concat(gV,"")collectgarbage("collect")elseif mr=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local cY=f(dbHud_1.getStringValue("SavedLocations"))if cY~=nil then _G["SavedLocations"]=cY;local fK=-1;local jH;for cG,cH in pairs(SavedLocations)do if cH.name and cH.name=="SatNav Location"then fK=cG;break end end;if fK~=-1 then jH=SavedLocations[fK]fK=-1;for cG,cH in pairs(aN[0])do if cH.name and cH.name=="SatNav Location"then fK=cG;break end end;if fK>-1 then aN[0][fK]=jH end;aX.UpdateAtlasLocationsList()a2=jH.name.." position updated"end end;for i=1,#bH do if bH[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bH[i].name)aX.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mr=="msgTick"then local gV={}aW.DisplayMessage(gV,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif mr=="animateTick"then b0=true;a_=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif mr=="hudTick"then local function mV(gV)local mW=d(q(aj/(aG/4)*255,0,255))gV[#gV+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,d(H+0.5)+mW,d(J+0.5)-mW,d(I+0.5)-mW)end;local function mX()for _,cH in pairs(aF)do if cH.hovered then if not cH.drawCondition or cH.drawCondition()then cH.toggleFunction()end;cH.hovered=false end end end;local function mY()local function mZ(m_,n0,ca,cb,m2,m3)if m_>ca and m_<ca+m2 and n0>cb and n0<cb+m3 then return true else return false end end;local ca=ag+aG/2;local cb=ah+aH/2;for _,cH in pairs(aF)do cH.hovered=mZ(ca,cb,cH.x,cH.y,cH.width,cH.height)end end;local function n1(gV)local function n2(gV,n3,hover,ca,cb,eq,n4,n5,n6,n7,n8)if type(n7)=="function"then n7=n7()end;if type(n8)=="function"then n8=n8()end;gV[#gV+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",ca,cb,eq,n4)if n3 then gV[#gV+1]=e("%s'",n5)else gV[#gV+1]=n6 end;if hover then gV[#gV+1]=" style='stroke:white; stroke-width:2'"else gV[#gV+1]=" style='stroke:black; stroke-width:1'"end;gV[#gV+1]="></rect>"gV[#gV+1]=e("<text x='%f' y='%f' font-size='24' fill='",ca+eq/2,cb+n4/2+5)if n3 then gV[#gV+1]="black"else gV[#gV+1]="white"end;gV[#gV+1]="' text-anchor='middle' font-family='Montserrat'>"if n3 then gV[#gV+1]=e("%s</text>",n7)else gV[#gV+1]=e("%s</text>",n8)end end;local n9="rgb(50,50,50)'"local na="rgb(210,200,200)"local nb=n2;for _,cH in pairs(aF)do local m1=cH.disableName;local m0=cH.enableName;if type(m1)=="function"then m1=m1()end;if type(m0)=="function"then m0=m0()end;if not cH.drawCondition or cH.drawCondition()then nb(gV,cH.toggleVar(),cH.hovered,cH.x,cH.y,cH.width,cH.height,na,n9,m1,m0)end end end;local nc=z(ResolutionX/2,0)local nd=z(ResolutionY/2,0)local gV={}aW.HUDPrologue(gV)if showHud then aW.UpdateHud(gV)else if AlwaysVSpd then aW.DrawVerticalSpeed(gV,as)end;aW.DisplayOrbitScreen(gV)aW.DrawWarnings(gV)end;if bE and bF~={}then aW.DrawSettings(gV)end;if radar_1 then aW.DrawRadarInfo()end;aW.HUDEpilogue(gV)gV[#gV+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aW.DisplayMessage(gV,a2)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aW.DrawDeadZone(gV)end end;if w()==0 then if l()==1 and a1 then if not AltIsOn then mY()n1(gV)end;if not a_ and not b0 then local ne=table.concat(gV,"")gV={}gV[#gV+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)gV[#gV+1]=ne;gV[#gV+1]="</body>"a_=true;gV[#gV+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(gV,"")system.setScreen(content)elseif b0 then local ne=table.concat(gV,"")gV={}gV[#gV+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)gV[#gV+1]=ne;gV[#gV+1]="</body>"end;if not a_ then gV[#gV+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nc,nd,ag,ah)end else mX()end else if not a1 and l()==0 then mX()if aj>DeadZone then if DisplayDeadZone then mV(gV)end end elseif not AltIsOn or AltIsOn and a1 then mY()n1(gV)end;gV[#gV+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nc,nd,ag,ah)end;gV[#gV+1]=[[</svg></body>]]content=table.concat(gV,"")elseif mr=="apTick"then aY.APTick()elseif mr=="radarTick"then aZ.UpdateRadar()elseif mr=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function nf(ng,l3)local nh=vec3()local ni=vec3()if ng==axisCommandId.longitudinal then nh=vec3(core.getConstructOrientationForward())ni=bp elseif ng==axisCommandId.vertical then nh=vec3(core.getConstructOrientationUp())ni=bo elseif ng==axisCommandId.lateral then nh=vec3(core.getConstructOrientationRight())ni=bq else return vec3()end;local nj=vec3(core.getWorldGravity())local nk=nj:dot(ni)local nl=vec3(core.getWorldAirFrictionAcceleration())local nm=nl:dot(ni)local nn=br:dot(nh)local no=l3*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(no-nn)local np=targetSpeedPID2:get()local nq=(np-nm-nk)*ni;return nq end;local function nr(ng,l3)local nh=vec3()local ni=vec3()if ng==axisCommandId.longitudinal then nh=vec3(core.getConstructOrientationForward())ni=bp elseif ng==axisCommandId.vertical then nh=vec3(core.getConstructOrientationUp())ni=bo elseif ng==axisCommandId.lateral then nh=vec3(core.getConstructOrientationRight())ni=bq else return vec3()end;local nj=vec3(core.getWorldGravity())local nk=nj:dot(ni)local nl=vec3(core.getWorldAirFrictionAcceleration())local nm=nl:dot(ni)local nn=br:dot(nh)local no=l3*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(no-nn)local np=targetSpeedPID:get()local nq=(np-nm-nk)*ni;return nq end;local function ns(nt,gY,jw)local nu=nt:cross(jw):normalize_inplace()local hK=math.acos(q(nu:dot(-gY),-1,1))*constants.rad2deg;if nu:cross(-gY):dot(jw)<0 then hK=-hK end;return hK end;if antigrav and not ExternalAGG then if not bz and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bB=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bB and O then cf(0)O=false elseif not bB and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local nw=q(T+U+system.getControlDeviceForwardInput(),-1,1)local nx=q(W+Z+system.getControlDeviceYawInput(),-1,1)local ny=q(X+V-system.getControlDeviceLeftRightInput(),-1,1)local nz=Y;bu=vec3(core.getWorldVertical())if bu==nil or bu:len()==0 then bu=(planet.center-bw):normalize()end;bo=vec3(core.getConstructWorldOrientationUp())bp=vec3(core.getConstructWorldOrientationForward())bq=vec3(core.getConstructWorldOrientationRight())bs=vec3(core.getWorldVelocity())br=vec3(core.getVelocity())bw=vec3(core.getConstructWorldPos())av=core.getConstructMass()bt=vec3(bs):len()bv=-bu:dot(bs)bD=getRoll(bu,bp,bq)local nA=bD/180*math.pi;local nB=math.cos(nA)local nC=math.sin(nA)bC=ns(bu,bp,bq*nB+bo*nC)local nD=bs:normalize()local nE=c(bD)local nF=utils.sign(bD)local nG=vec3(core.getWorldAngularVelocity())local nH=nw*pitchSpeedFactor*bq+nx*rollSpeedFactor*bp+ny*yawSpeedFactor*bo;if b1==true and bu:len()>0.01 then local nI=c(b5-bD)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and nI>0 or ar>0.0 and nI<autoRollRollThreshold and autoRollPreference)and nx==0 and c(bC)<85 then local nJ=b5;local nK=autoRollFactor;if ar==0 then nK=nK/4;b5=0;nJ=0 end;if rollPID==nil then rollPID=pid.new(nK*0.01,0,nK*0.1)end;rollPID:inject(nJ-bD)local nL=rollPID:get()nH=nH+nL*bp end end;local nM=1;local nN=0;local nO=1;if system.getMouseWheel()>0 then if AltIsOn then if ar>0 or Reentry then b8=q(b8+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local nP=K;K=z(q(K+speedChangeLarge/100,-1,1),2)if K>=0 and nP<0 then K=0;aw=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ar>0 or Reentry then b8=q(b8-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local nP=K;K=z(q(K-speedChangeLarge/100,-1,1),2)if K<=0 and nP>0 then K=0;aw=false end end else aw=true end;L=0;if aq and AtmoSpeedAssist and bB then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b8/3.6-bs:dot(bp))local nQ=throttlePID:get()N=q(nQ,-1,1)if N<K and ar>0.005 then M=true;r:setThrottleCommand(axisCommandId.longitudinal,q(N,0.01,1))else M=false;r:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bs:len()-b8/3.6)local nR=q(brakePID:get(),0,1)if ar>0 and bv<-80 or ar>0.005 then L=nR end;if L>0 then if M and N==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else N=q(N,0.01,1)end;local nS=''local nT=vec3()local nU=nf(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",nU,nN)local nV='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nV=nV..ExtraLongitudeTags end;local nW=r:getAxisCommandType(axisCommandId.longitudinal)local nX=r:composeAxisAccelerationFromThrottle(nV,axisCommandId.longitudinal)local nY=nr(axisCommandId.lateral,LeftAmount*1000)nS=nS..' , '.."lateral airfoil , lateral ground "nT=nT+nY;if nT:len()>constants.epsilon then a:setEngineForceCommand(nS,nT,nN,'','','',nO)end;a:setEngineForceCommand(nV,nX,nM)local nZ='thrust analog vertical fueled 'local n_='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then n_=n_..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then nZ=nZ..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(nZ,nU,nM)else a:setEngineForceCommand(nZ,vec3(),nM)end;if LeftAmount~=0 then a:setEngineForceCommand(n_,nY,nM)else a:setEngineForceCommand(n_,vec3(),nM)end;if nz==0 then nz=L end;local o0=-nz*(brakeSpeedFactor*bs+brakeFlatFactor*nD)a:setEngineForceCommand('brake',o0)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,K)end;local l3=unit.getAxisCommandValue(0)if not bB then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bs:len()-l3/3.6)local nR=q(brakePID:get(),0,1)nz=q(nz+nR,0,1)end;local o0=-nz*(brakeSpeedFactor*bs+brakeFlatFactor*nD)a:setEngineForceCommand('brake',o0)local nS=''local nT=vec3()local o1=false;local nV='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nV=nV..ExtraLongitudeTags end;local nW=r:getAxisCommandType(axisCommandId.longitudinal)if nW==axisCommandType.byThrottle then local nX=r:composeAxisAccelerationFromThrottle(nV,axisCommandId.longitudinal)a:setEngineForceCommand(nV,nX,nM)elseif nW==axisCommandType.byTargetSpeed then local nX=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nS=nS..' , '..nV;nT=nT+nX;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then o1=true end end;local n_='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then n_=n_..ExtraLateralTags end;local o2=r:getAxisCommandType(axisCommandId.lateral)if o2==axisCommandType.byThrottle then local o3=r:composeAxisAccelerationFromThrottle(n_,axisCommandId.lateral)a:setEngineForceCommand(n_,o3,nM)elseif o2==axisCommandType.byTargetSpeed then local nY=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nS=nS..' , '..n_;nT=nT+nY end;local nZ='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then nZ=nZ..ExtraVerticalTags end;local o4=r:getAxisCommandType(axisCommandId.vertical)if o4==axisCommandType.byThrottle then local nU=r:composeAxisAccelerationFromThrottle(nZ,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(nZ,nU,nM,'airfoil','ground','',nO)else a:setEngineForceCommand(nZ,vec3(),nM)a:setEngineForceCommand('airfoil vertical',nU,nM,'airfoil','','',nO)a:setEngineForceCommand('ground vertical',nU,nM,'ground','','',nO)end elseif o4==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),nM)end;local o5=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nS=nS..' , '..nZ;nT=nT+o5 end;if nT:len()>constants.epsilon then if Y~=0 or o1 or c(nD:dot(bp))<0.8 then nS=nS..', brake'end;a:setEngineForceCommand(nS,nT,nN,'','','',nO)end end;local o6=torqueFactor*(nH-nG)local o7=vec3(core.getWorldAirFrictionAngularAcceleration())o6=o6-o7;a:setEngineTorqueCommand('torque',o6,nM,'airfoil','','',nO)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local ex=br:len()local o8=0.15;if not bB then local o9=r:getTargetSpeed(axisCommandId.longitudinal)if ex*3.6>o9*(1-o8)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ex*3.6<o9*(1-o8)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kX=unit.getThrottle()if AtmoSpeedAssist then kX=K*100 end;local l3=kX/100;if j==0 then l3=l3*MaxGameVelocity;if ex>=l3*(1-o8)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ex<l3*(1-o8)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local le=d(b8)l3=l3*le/3.6;if ex>=l3*(1-o8)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ex<l3*(1-o8)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local g5=coroutine.status(beginSetup)if g5=="suspended"then local cg,g6=coroutine.resume(beginSetup)if g6 then system.print("ERROR STARTUP: "..g6)end elseif g5=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not a_ and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(oa)local function ob(oc)local C=1;local function od(oe,oc)local of={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local og=oe;for _,cH in ipairs(of)do if oc and og>cH then oe=cH elseif oe<cH and not oc then oe=cH;break end end;return oe end;if oc then C=-1 end;if not ExternalAGG and bz then if a1 and oc then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bh=od(bh,oc)else bh=bh+C*a3 end;if bh<planet.noAtmosphericDensityAltitude then bh=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=od(HoldAltitude,oc)else HoldAltitude=HoldAltitude+C*a3 end end else r:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function oh(oc)local C=1;if oc then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=q(K+C*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if oc then C=1 else C=nil end;aX.adjustAutopilotTargetIndex(C)end end;local function oi(oj)if not aq then a2="Flight Assist in Atmo only"return end;local cO=type(oj)if bK==nil then if cO=="table"then if Autopilot or VectorToTarget then cs()end;bX("180On","BR")elseif oj==1 then bX("bnkLft","BR")else bX("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cr()if cO~="table"then oj=oj+1 end end;bK=oj else bX("180Off","BR")bK=nil end end;if oa=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cf(0)if vBooster or hover then if aq and ao==-1 then bX("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b1=true;GearExtended=false else if S then bX("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then bX("grOut","LG",1)a.control.extendLandingGears()end else if S then bX("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif oa=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif oa=="forward"then T=T-1 elseif oa=="backward"then if AltIsOn then oi(-bs*5000)else T=T+1 end elseif oa=="left"then if AltIsOn then oi(1)else W=W-1 end elseif oa=="right"then if AltIsOn then oi(3)else W=W+1 end elseif oa=="yawright"then X=X-1 elseif oa=="yawleft"then X=X+1 elseif oa=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif oa=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif oa=="up"then af=af+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif oa=="down"then af=af-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif oa=="groundaltitudeup"then ob()elseif oa=="groundaltitudedown"then ob(true)elseif oa=="option1"then aX.adjustAutopilotTargetIndex()toggleView=false elseif oa=="option2"then aX.adjustAutopilotTargetIndex(1)toggleView=false elseif oa=="option3"then local function ok()aE=not aE;if not aE then bX("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else bX("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ok()toggleView=false elseif oa=="option4"then bK=nil;cs()toggleView=false elseif oa=="option5"then if AltIsOn and a1 and shield_1 then shield_1.toggle()toggleView=false;return end;function ToggleLockPitch()if LockPitch==nil then bX("lkPOn","LP")if not a1 then LockPitch=bC else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bX("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()toggleView=false elseif oa=="option6"then cr()toggleView=false elseif oa=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end;toggleView=false elseif oa=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()bX("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bX("gsOn","GS")end;toggleView=false elseif oa=="option9"then if AltIsOn and a1 then r:resetCommand(axisCommandId.longitudinal)r:resetCommand(axisCommandId.lateral)r:resetCommand(axisCommandId.vertical)cf(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then bX("gyOn","GA")else bX("gyOff","GA")end end;toggleView=false elseif oa=="lshift"then if AltIsOn then a1=true end;if w()==1 then a1=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then a1=true;b0=false;a_=false end elseif oa=="brake"then if BrakeToggleStatus then cu()elseif not BrakeIsOn then cu()else BrakeIsOn=true end elseif oa=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif oa=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif oa=="stopengines"then local function ol()if D-E<1.5 then bX("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bK=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b1=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;ol()E=D;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then r:resetCommand(axisCommandId.longitudinal)cf(0)else cf(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if aq then ci(AtmoSpeedLimit)else ci(MaxGameVelocity*3.6)end end end elseif oa=="speedup"then oh()elseif oa=="speeddown"then oh(true)elseif oa=="antigravity"and not ExternalAGG then if antigrav~=nil then cw()end end end;function script.onActionStop(oa)local function om()if not ExternalAGG and bz then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if oa=="forward"then T=0 elseif oa=="backward"then T=0 elseif oa=="left"then if bK then if bK==2 then bK=-2 else bK=-1 end end;W=0 elseif oa=="right"then if bK then if bK==4 then bK=-2 else bK=-1 end end;W=0 elseif oa=="yawright"then X=0 elseif oa=="yawleft"then X=0 elseif oa=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif oa=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif oa=="up"then af=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oa=="down"then af=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oa=="groundaltitudeup"then om()toggleView=false elseif oa=="groundaltitudedown"then om()toggleView=false elseif oa=="lshift"then if w()==1 then ag=0;ah=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then b0=false;a_=false end;a1=false elseif oa=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cu()else BrakeIsOn=false end end elseif oa=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(oa)local function on(oc)local C=1;if oc then C=-1 end;if not ExternalAGG and bz then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=q(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bh=bh+C*a5;if bh<planet.noAtmosphericDensityAltitude then bh=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a5 end;a5=q(a5*1.05,a3,50)else r:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function oo(oc)local C=1;if oc then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=q(K+C*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if oa=="groundaltitudeup"then if not a1 then on()end elseif oa=="groundaltitudedown"then if not a1 then on(true)end elseif oa=="speedup"then oo()elseif oa=="speeddown"then oo(true)end end;function script.onInputText(cc)local function op()for cG,cH in pairs(c2())do dbHud_1.setStringValue(cH,g(nil))end;for cG,cH in pairs(b)do if cH~="SavedLocations"then dbHud_1.setStringValue(cH,g(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ai=5 end;local function oq(os,eB,hG)local function ot(eB)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cW='::pos{'..A..','..A..','..A..','..A..','..A..'}'local d8,d9,df,dg,dh=n(eB,cW)if d8=="0"and d9=="0"then return vec3(y(df),y(dg),y(dh))end;dg=math.rad(dg)df=math.rad(df)local planet=aN[y(d8)][y(d9)]local e2=math.cos(df)local ou=vec3(e2*math.cos(dg),e2*math.sin(dg),math.sin(df))return planet.center+(planet.radius+dh)*ou end;local position=ot(eB)return aX.AddNewLocation(os,position,hG)end;local i;local ov,ow=nil,nil;local ox="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cc," ")ov=cc;if i~=nil then ov=string.sub(cc,0,i-1)ow=string.sub(cc,i+1)end;if ov=="/help"or ov=="/commands"then for jg in string.gmatch(ox,"([^\n]+)")do system.print(jg)end;return elseif ov=="/setname"then if ow==nil or ow==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aX.UpdatePosition(ow)else a2="Select a saved target to rename first"end elseif ov=="/addlocation"or string.find(cc,"::pos")~=nil then local hG=false;local os="0-Temp"if ow==nil or ow==""then ow=ov;hG=true end;i=string.find(ow,"::")if not hG then os=string.sub(ow,1,i-2)end;local eB=string.sub(ow,i)oq(os,eB,hG)elseif ov=="/agg"then if ow==nil or ow==""then a2="Usage: /agg targetheight"return end;ow=y(ow)if ow<1000 then ow=1000 end;AntigravTargetAltitude=ow;a2="AGG Target Height set to "..ow elseif ov=="/G"then if ow==nil or ow==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if ow=="dump"then for cG,cH in pairs(c2())do if type(_G[cH])=="boolean"then if _G[cH]==true then system.print(cH.." true")else system.print(cH.." false")end elseif _G[cH]==nil then system.print(cH.." nil")else system.print(cH.." ".._G[cH])end end;return end;i=string.find(ow," ")local oy=string.sub(ow,0,i-1)local oz=string.sub(ow,i+1)for cG,cH in pairs(c2())do if cH==oy then a2="Variable "..oy.." changed to "..oz;local oA=type(_G[cH])if oA=="number"then oz=y(oz)elseif oA=="boolean"then if string.lower(oz)=="true"then oz=true else oz=false end end;_G[cH]=oz;return end end;a2="No such global variable: "..oy elseif ov=="/copydatabank"then if dbHud_2 then cC(true)else a2="Spare Databank required to copy databank"end elseif ov=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aY.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dq)if radar_1 and not aq and not bI then unit.setTimer("contact",0.1)end end;function script.onLeave(dq)if radar_1 and CollisionSystem then if#bL>650 then dq=tostring(dq)bL[dq]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
