name: ArchHud - Archaegeo v1.300 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        soundFolder = "archHUD" --export: (Default: "archHUD")
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = true --export: (Default: true)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        SetWaypointOnExit = true --export: (Default: true)
        IntruderAlertSystem = false --export: (Default: true)
        AlwaysVSpd = false --export: (Default: false)
        BarFuelDisplay = true --export: (Default: true)
        showHelp = true --export: (Default: true)
        Cockpit = false --export: (Default: false)
        voices = true --export: (Default: true)
        alerts = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        LowOrbitHeight = 1000 --export: (Default: 1000)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        ReEntryHeight = 5000 --export: (Default: 5000)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 30 --export: (Default: 30)
        fuelY = 700 --export: (Default: 700)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        soundVolume = 100 --export: (Default: 100)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 180 --export: (Default: 180)
        minRollVelocity = 150 --export: (Default: 150)    
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.300;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;safeMass=0;iphCondition="All"stablized=true;sounds=true;local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass","iphCondition","stablized","sounds"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=utils.round;local p=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local function x(y,z)local A=10^(z or 0)return d(y*A+0.5)/A end;local B=16;local C=SafeR;local D=SafeB;local E=SafeG;local F=0;local G=0;local H=false;local I=0;local J=false;local K=x(ResolutionX/2,0)local L=x(ResolutionY/2,0)local M=false;local N=55;local O=false;local P=false;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=0;local W=0;local X=false;local Y=false;local Z="empty"local a0=5;local a1=5;local a2=a0;local a3=a1;local a4=false;local a5,a6=0;local a7,a8=0;local a9=nil;local aa=0;local ab=0;local ac=0;local ad=0;local ae=0;local af=3;local ag=0;local ah=""local ai=""local aj=0;local ak=false;local al=false;local am=false;local an=-1;local ao=false;local ap=""local aq=j()>0;local ar=j()local as=core.getAltitude()local at=core.getElementIdList()local au=p()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=false;local az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]local aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH={}local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=0;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=LandingGearGroundHeight;local bh=false;local bi=p()local bj=0;local bk=0;local bl=0;local bm=AtmoSpeedLimit;local bn=0;local bo=nil;local bp=0;local bq=0;local br=false;local bs=false;local bt={VectorToTarget=false}local bu=false;local bv=0;local bw=nil;local bx=false;local by=false;local bz=false;local bA=false;local bB=0;local bC=p()local bD=vec3(core.getConstructWorldOrientationUp())local bE=vec3(core.getConstructWorldOrientationForward())local bF=vec3(core.getConstructWorldOrientationRight())local bG=vec3(core.getWorldVelocity())local bH=vec3(bG):len()local bI=vec3(core.getWorldVertical())local bJ=-bI:dot(bG)local bK=vec3(core.getConstructWorldPos())local bL=0;local bM=false;local bN=false;local bO=nil;local bP=true;local bQ=0;local bR=0;local bS=false;local bT={}local bU=showHud;local bV={}local bW=false;local function bX(bY,bZ,type)if type==nil and not voices or type~=nil and not alerts or not sounds then return end;if type~=nil then system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..bY.."|"..bZ.."|"..soundVolume)else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..bY.."|"..bZ.."|"..soundVolume)end end;local function b_(c0,c1)for i=1,#c1 do c0[#c0+1]=c1[i]end;return c0 end;local function c2(c3)local c4={}local c5={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd","BarFuelDisplay","showHelp","Cockpit","voices","alerts"}local c6={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c7={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local c8={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c3 then b_(c4,c5)b_(c4,c6)b_(c4,c7)b_(c4,c8)return c4 elseif c3=="boolean"then return c5 elseif c3=="handling"then return c6 elseif c3=="hud"then return c7 elseif c3=="physics"then return c8 end end;local function c9(ca,cb,cc,cd,ce)if cd==nil then cd=""end;if ce==nil then ce=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cd,ca,cb,ce,cc)end;local function cf(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not ch then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cg)F=q(x(cg*100,0)/100,-1,1)end;local function ci(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not ch then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cg)bO=cg end;local function cj(ck,cl)if ck==0 then return c(cl)<1e-09 end;if cl==0 then return c(ck)<1e-09 end;return c(ck-cl)<math.max(c(ck),c(cl))*epsilon end;local function cm(ag,cn)local co=ag>100000;if cn==nil then cn=1 end;if co then return x(ag/1000/200,cn).."SU"elseif ag<1000 then return x(ag,cn).."M"else return x(ag/1000,cn).."KM"end end;local function cp()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;bf=true;ac=0;if aq and an==-1 then BrakeLanding=false;AltitudeHold=true;ac=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ci(d(bm))end else bx=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cq()bx=false;bp=nil;bq=nil;bB=0;if ar==0 then if IntoOrbit then IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bf=true;if bw==nil then bw=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else Z="Unable to engage orbiting, not near planet"end else IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false end end;local function cr()if bC-bk<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bv=HoldAltitude;bu=true;if not IntoOrbit then cq()end;br=true end end;bk=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bk=bC end;if unit.getClosestPlanetInfluence()>0 and ar==0 then bv=as;bu=true;br=true;cq()if IntoOrbit then bk=bC else bk=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;X=false;bf=true;LockPitch=nil;bx=false;if an==-1 then bX("AltitudeHoldEnabled.mp3","AH")AutoTakeoff=false;if bk>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if VertTakeOff then cp()end else bX("ThrottleUpAndDisengageBrakes.mp3","TU")AutoTakeoff=true;if bk>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bM then cp()end end;if al then HoldAltitude=100000 end else bX("AltitudeHoldDisabled.mp3","AH")if IntoOrbit then cq()end;if VertTakeOff then cp()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bk=0 end end;local function cs()if l()==1 then X=not X;if X then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else Z="Follow Mode only works with Remote controller"X=false end end;local function ct()local function cu(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cr()end end;VectorStatus="Proceeding to Waypoint"end;if bC-bl<1.5 and ar>0 then if not bA then Z="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight end;bl=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else bl=bC end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not al and not IntoOrbit then bb.UpdateAutopilotTarget()bc.showWayPoint(a9,AutopilotTargetCoords)local cv=unit.getClosestPlanetInfluence()>0;if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bX("AutopilotEngaged.mp3","AP")if ar~=0 then al=true;cr()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then bX("VectoringToTarget.mp3","AP")cu(SpaceTarget)end else bX("AutopilotEngaged.mp3","AP")if not(a9.name==planet.name and cv)then bx=false;Autopilot=true elseif not aq then if IntoOrbit then cq()end;bv=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bu=true;bt.AutopilotAlign=true;bt.VectorToTarget=true;br=false;if not IntoOrbit then cq()end end end else bX("AutoTakeoffEngaged.mp3","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then al=true;cr()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(a9.name==planet.name and cv)and not IntoOrbit then WaypointSet=false;bx=false;br=false;cq()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;X=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;M=false;LockPitch=nil;WaypointSet=false end else bX("AutoTakeoffEngaged.mp3","AP")al=true;cr()end else bX("AutopilotSecured.mp3","AP")al=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;M=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=as;TargetSet=false;Reentry=false;if IntoOrbit then cq()end end end;local function cw(cx)local cy=-1;local cz;cy=bb.findAtlasIndex(SavedLocations)if cy~=-1 then local cA;if cx~=nil then cz={position=SavedLocations[cy].position,name=cx,atmosphere=SavedLocations[cy].atmosphere,planetname=SavedLocations[cy].planetname,gravity=SavedLocations[cy].gravity}else cz={position=bK,name=SavedLocations[cy].name,atmosphere=ar,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cy]=cz;cy=-1;cy=bb.findAtlasIndex(b1[0])if cy>-1 then b1[0][cy]=cz end;bb.UpdateAtlasLocationsList()Z=CustomTarget.name.." position updated"bb.UpdateAutopilotTarget()else Z="Name Not Found"end end;local function cB()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then bX("250Hz.mp3","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;if not bN then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cp()end;if IntoOrbit then cq()end;bf=autoRollPreference;ak=false;am=false;ac=0 else bX("100Hz.mp3","B",1)end end;local function cC(cD,cE,cF)local function cG(cD,cH)cD=vec3(cD)cH=vec3(cH):normalize()local cI=cD*cH;return cI.x+cI.y+cI.z end;local cJ=0.001;local cK=1;if not aq or not bh or an~=-1 or bH<N then if cF==nil then cF=DampingMultiplier end;if cE==nil then cE=cJ end;cD=vec3(cD):normalize()local cL=vec3()-cD;local cM=-cG(cL,core.getConstructWorldOrientationRight())*cK;local cN=-cG(cL,core.getConstructWorldOrientationUp())*cK;if aC==0 then aC=cM/2 end;if aD==0 then aD=cN/2 end;if c(cM)<0.1 then S=S-cM*2 else S=S-(cM+(cM-aC)*cF)end;if c(cN)<0.1 then R=R+cN*2 else R=R+cN+(cN-aD)*cF end;aC=cM;aD=cN;if c(cM)<cE and c(cN)<cE then return true end;return false elseif bh and an==-1 then cD=bG;if cF==nil then cF=DampingMultiplier end;if cE==nil then cE=cJ end;cD=vec3(cD):normalize()local cL=bE-cD;local cM=-cG(cL,core.getConstructWorldOrientationRight())*cK;local cN=-cG(cL,core.getConstructWorldOrientationUp())*cK;if aC==0 then aC=cM/2 end;if aD==0 then aD=cN/2 end;if c(cM)<0.1 then S=S-cM*5 else S=S-(cM+(cM-aC)*cF)end;if c(cN)<0.1 then R=R+cN*5 else R=R+cN+(cN-aD)*cF end;aC=cM;aD=cN;if c(cM)<cE and c(cN)<cE then return true end;return false end end;local function cO()if Reentry then Z="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then Z="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"af=5 elseif not O then StrongBrakes=planet.gravity*9.80665*av<LastMaxBrakeInAtmo;if not StrongBrakes then Z="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;Z="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bm end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-100 end;local cc=cm(HoldAltitude)Z="Beginning Re-entry.  Target speed: "..bm.." Target Altitude: "..cc;ci(d(bm))end;AutoTakeoff=false end;local function cP()if antigrav and not ExternalAGG then if bN then bX("AntigravSecured.mp3","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bX("AntigravActivated.mp3","AG")antigrav.activate()antigrav.show()end end end;local function cQ(cR)local cS=0;local cT=0;local cU=0;if cR<60 then cR=d(cR)elseif cR<3600 then cS=d(cR/60)cR=d(cR%60)elseif cR<86400 then cT=d(cR/3600)cS=d(cR%3600/60)else cU=d(cR/86400)cT=d(cR%86400/3600)end;if cU>0 then return cU.."d "..cT.."h "elseif cT>0 then return cT.."h "..cS.."m "elseif cS>0 then return cS.."m "..cR.."s"elseif cR>0 then return cR.."s"else return"0s"end end;local function cV(cW)local function cX(cY)for cZ,c_ in pairs(cY)do dbHud_1.setStringValue(c_,g(_G[c_]))if cW and dbHud_2 then dbHud_2.setStringValue(c_,g(_G[c_]))end end end;if dbHud_1 then cX(b)cX(c2())system.print("Saved Variables to Datacore")if cW and dbHud_2 then Z="Databank copied.  Remove copy when ready."end end end;local function d0()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function d1()local function d2(d3)return type(d3)=='number'end;local function d4(d3)return type(tonumber(d3))=='number'end;local function d5(d6)return type(d6)=='table'end;local function d7(d8)return type(d8)=='string'end;local function d9(c_)return d5(c_)and d2(c_.x and c_.y and c_.z)end;local function da(db)return d5(db)and d2(db.latitude and db.longitude and db.altitude and db.bodyId and db.systemId)end;local dc=math.pi/180;local dd=180/math.pi;local epsilon=1e-10;local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local de='::pos{'..y..','..y..','..y..','..y..','..y..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function df(d3)local cI=string.gsub(string.reverse(e('%.4f',d3)),'^0*%.?','')return cI==''and'0'or string.reverse(cI)end;local function dg(dh)if d9(dh)then return e('{x=%.3f,y=%.3f,z=%.3f}',dh.x,dh.y,dh.z)end;if d5(dh)and not getmetatable(dh)then local di={}local dj=next(dh)if type(dj)=='nil'or dj==1 then di=dh else for cZ,c_ in pairs(dh)do local cg=dg(c_)if type(cZ)=='number'then table.insert(di,e('[%s]=%s',cZ,cg))else table.insert(di,e('%s=%s',cZ,cg))end end end;return e('{%s}',table.concat(di,','))end;if d7(dh)then return e("'%s'",dh:gsub("'",[[\']]))end;return tostring(dh)end;local dk={}dk.__index=dk;dk.__tostring=function(dh,dl)local dm={}for cZ in pairs(dh)do table.insert(dm,cZ)end;table.sort(dm)local di={}for _,cZ in ipairs(dm)do local cg=dg(dh[cZ])if type(cZ)=='number'then table.insert(di,e('[%s]=%s',cZ,cg))else table.insert(di,e('%s=%s',cZ,cg))end end;if dl then return e('%s%s',dl,table.concat(di,',\n'..dl))end;return e('{%s}',table.concat(di,','))end;dk.__eq=function(dn,dp)return dn.planetarySystemId==dp.planetarySystemId and dn.bodyId==dp.bodyId and cj(dn.radius,dp.radius)and cj(dn.center.x,dp.center.x)and cj(dn.center.y,dp.center.y)and cj(dn.center.z,dp.center.z)and cj(dn.GM,dp.GM)end;local function dq(dr,ds,dt,du,dv)assert(d4(dr),'Argument 1 (planetarySystemId) must be a number:'..type(dr))assert(d4(ds),'Argument 2 (bodyId) must be a number:'..type(ds))assert(d4(dt),'Argument 3 (radius) must be a number:'..type(dt))assert(d5(du),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(du))assert(d4(dv),'Argument 5 (GM) must be a number:'..type(dv))return setmetatable({planetarySystemId=tonumber(dr),bodyId=tonumber(ds),radius=tonumber(dt),center=vec3(du),GM=tonumber(dv)},dk)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dw)return e('::pos{%d,%d,%s,%s,%s}',dw.systemId,dw.bodyId,df(dw.latitude*dd),df(dw.longitude*dd),df(dw.altitude))end;MapPosition.__eq=function(dn,dp)return dn.bodyId==dp.bodyId and dn.systemId==dp.systemId and cj(dn.latitude,dp.latitude)and cj(dn.altitude,dp.altitude)and(cj(dn.longitude,dp.longitude)or cj(dn.latitude,math.pi/2)or cj(dn.latitude,-math.pi/2))end;local function dx(dy,ds,dz,dA,dB)local dr=dy;if d7(dy)and not dA and not dB and not ds and not dz then dr,ds,dz,dA,dB=n(dy,de)assert(dr,'Argument 1 (position string) is malformed.')else assert(d4(dr),'Argument 1 (systemId) must be a number:'..type(dr))assert(d4(ds),'Argument 2 (bodyId) must be a number:'..type(ds))assert(d4(dz),'Argument 3 (latitude) must be in degrees:'..type(dz))assert(d4(dA),'Argument 4 (longitude) must be in degrees:'..type(dA))assert(d4(dB),'Argument 5 (altitude) must be in meters:'..type(dB))end;dr=tonumber(dr)ds=tonumber(ds)dz=tonumber(dz)dA=tonumber(dA)dB=tonumber(dB)if ds==0 then return setmetatable({latitude=dz,longitude=dA,altitude=dB,bodyId=ds,systemId=dr},MapPosition)end;return setmetatable({latitude=dc*q(dz,-90,90),longitude=dc*(dA%360),altitude=dB,bodyId=ds,systemId=dr},MapPosition)end;local dC={}dC.__index=dC;dC.__tostring=function(dh,dl)local dD=dl and dl..'  'local dE={}local dm={}for cZ in pairs(dh)do table.insert(dm,cZ)end;table.sort(dm)for _,dF in ipairs(dm)do bdy=dh[dF]local dG=dk.__tostring(bdy,dD)if dl then table.insert(dE,e('[%s]={\n%s\n%s}',dF,dG,dl))else table.insert(dE,e('  [%s]=%s',dF,dG))end end;if dl then return e('\n%s%s%s',dl,table.concat(dE,',\n'..dl),dl)end;return e('{\n%s\n}',table.concat(dE,',\n'))end;local function dH(dI)local b1={}local pid;for _,c_ in pairs(dI)do local dJ=c_.planetarySystemId;if type(dJ)~='number'then error('Invalid planetary system ID: '..tostring(dJ))elseif pid and dJ~=pid then error('Mistringmatch planetary system IDs: '..dJ..' and '..pid)end;local dK=c_.bodyId;if type(dK)~='number'then error('Invalid body ID: '..tostring(dK))elseif b1[dK]then error('Duplicate body ID: '..tostring(dK))end;setmetatable(c_.center,getmetatable(vec3.unit_x))b1[dK]=setmetatable(c_,dk)pid=dJ end;return setmetatable(b1,dC)end;b5={}local function dL(dI)return setmetatable({galaxyAtlas=dI or{}},b5)end;b5.__index=function(d6,i)if type(i)=='number'then local system=d6.galaxyAtlas[i]return dH(system)end;return rawget(b5,i)end;b5.__pairs=function(dh)return function(d6,cZ)local dM,nv=next(d6,cZ)return dM,nv and dH(nv)end,dh.galaxyAtlas,nil end;b5.__tostring=function(dh)local dN={}for _,dO in pairs(dh or{})do local dP=dO:getPlanetarySystemId()local dQ=dC.__tostring(dO,'    ')table.insert(dN,e('  [%s]={%s\n  }',dP,dQ))end;return e('{\n%s\n}\n',table.concat(dN,',\n'))end;b5.BodyParameters=dq;b5.MapPosition=dx;b5.PlanetarySystem=dH;function b5.createBodyParameters(dR,ds,dS,dT,dU,dV,dW)assert(d4(dR),'Argument 1 (planetarySystemId) must be a number:'..type(dR))assert(d4(ds),'Argument 2 (bodyId) must be a number:'..type(ds))assert(d4(dS),'Argument 3 (surfaceArea) must be a number:'..type(dS))assert(d5(dT),'Argument 4 (aPosition) must be an array or vec3:'..type(dT))assert(d5(dU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dU))assert(d4(dV),'Argument 6 (altitude) must be in meters:'..type(dV))assert(d4(dW),'Argument 7 (gravityAtPosition) must be number:'..type(dW))local dt=math.sqrt(dS/4/math.pi)local ag=dt+dV;local dX=vec3(dT)+ag*vec3(dU)local dv=dW*ag*ag;return dq(dR,ds,dt,dX,dv)end;b5.isMapPosition=da;function b5:getPlanetarySystem(dy)if i==nil then i=0 end;if nv==nil then nv=0 end;local dR=dy;if da(dy)then dR=dy.systemId end;if type(dR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dC then system=dH(system)end;return system end end end;function dC:castIntersections(dY,cH,dZ,d_)local dZ=dZ or function(e0)return 1.05*e0.radius end;local e1={}if d_ then for _,i in ipairs(d_)do e1[i]=self[i]end else d_={}for cZ,e0 in pairs(self)do table.insert(d_,cZ)e1[cZ]=e0 end end;local function e2(e3,e4)local e5=e1[e3].center-dY;local e6=e1[e4].center-dY;return e5:len()<e6:len()end;table.sort(d_,e2)local e7=cH:normalize()for i,dJ in ipairs(d_)do local e0=e1[dJ]local e8=e0.center-dY;local dt=dZ(e0)local e9=e8:dot(e7)local ea=e9^2-(e8:len2()-dt^2)if ea>=0 then local eb=math.sqrt(ea)local ec=e9+eb;local ed=e9-eb;if ed>0 then return e0,ec,ed elseif ec>0 then return e0,ec,nil end end end;return nil,nil,nil end;function dC:closestBody(ee)assert(type(ee)=='table','Invalid coordinates.')local ef,e0;local eg=vec3(ee)for _,eh in pairs(self)do local ei=(eh.center-eg):len2()if(not e0 or ei<ef)and eh.name~="Space"then e0=eh;ef=ei end end;return e0 end;function dC:convertToBodyIdAndWorldCoordinates(dy)local ej=dy;if d7(dy)then ej=dx(dy)end;if ej.bodyId==0 then return 0,vec3(ej.latitude,ej.longitude,ej.altitude)end;local eh=self:getBodyParameters(ej)if eh then return ej.bodyId,eh:convertToWorldCoordinates(ej)end end;function dC:getBodyParameters(dy)local ds=dy;if da(dy)then ds=dy.bodyId end;assert(d4(ds),'Argument 1 (bodyId) must be a number:'..type(ds))return self[ds]end;function dC:getPlanetarySystemId()local _,c_=next(self)return c_ and c_.planetarySystemId end;function dk:convertToMapPosition(du)assert(d5(du),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(du))local ek=vec3(du)if self.bodyId==0 then return setmetatable({latitude=ek.x,longitude=ek.y,altitude=ek.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local el=ek-self.center;local ag=el:len()local dB=ag-self.radius;local dz=0;local dA=0;if not cj(ag,0)then local em=m(el.y,el.x)dA=em>=0 and em or 2*math.pi+em;dz=math.pi/2-math.acos(el.z/ag)end;return setmetatable({latitude=dz,longitude=dA,altitude=dB,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dk:convertToWorldCoordinates(dy)local ej=d7(dy)and dx(dy)or dy;if ej.bodyId==0 then return vec3(ej.latitude,ej.longitude,ej.altitude)end;assert(da(ej),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ej.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ej.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local en=math.cos(ej.latitude)return self.center+(self.radius+ej.altitude)*vec3(en*math.cos(ej.longitude),en*math.sin(ej.longitude),math.sin(ej.latitude))end;function dk:getAltitude(du)return(vec3(du)-self.center):len()-self.radius end;function dk:getDistance(du)return(vec3(du)-self.center):len()end;function dk:getGravity(du)local eo=self.center-vec3(du)local ep=eo:len2()return self.GM/ep*eo/math.sqrt(ep)end;return setmetatable(b5,{__call=function(_,...)return dL(...)end})end;local function eq()local b7={}local er=30000000/3600;local es=er*er;local et=100;local function eu(c_)return 1/math.sqrt(1-c_*c_/es)end;function b7.computeAccelerationTime(ev,ew,ex)local ey=er*math.asin(ev/er)return(er*math.asin(ex/er)-ey)/ew end;function b7.computeDistanceAndTime(ev,ex,ez,eA,eB,eC)eB=eB or 0;eC=eC or 0;local eD=ev<=ex;local eE=eA*(eD and 1 or-1)/ez;local eF=-eC/ez;local eG=eE+eF;if eD and eG<=0 or not eD and eG>=0 then return-1,-1 end;local eH,eI=0,0;if eE~=0 and eB>0 then local ey=math.asin(ev/er)local eJ=math.pi*(eE/2+eF)local eK=eE*eB;local eL=er*math.pi;local c_=function(d6)local eM=(eJ*d6-eK*math.sin(math.pi*d6/2/eB)+eL*ey)/eL;local eN=math.tan(eM)return er*eN/math.sqrt(eN*eN+1)end;local eO=eD and function(d8)return d8>=ex end or function(d8)return d8<=ex end;eI=2*eB;if eO(c_(eI))then local eP=0;while c(eI-eP)>0.5 do local d6=(eI+eP)/2;if eO(c_(d6))then eI=d6 else eP=d6 end end end;local eQ=ev;local eR=eI/et;for eS=1,et do local eT=c_(eS*eR)eH=eH+(eT+eQ)*eR/2;eQ=eT end;if eI<2*eB then return eH,eI end;ev=eQ end;local ey=er*math.asin(ev/er)local bC=(er*math.asin(ex/er)-ey)/eG;local eU=es*math.cos(ey/er)/eG;local ag=eU-es*math.cos((eG*bC+ey)/er)/eG;return ag+eH,bC+eI end;function b7.computeTravelTime(ev,ew,ag)if ag==0 then return 0 end;if ew>0 then local ey=er*math.asin(ev/er)local eU=es*math.cos(ey/er)/ew;return(er*math.acos(ew*(eU-ag)/es)-ey)/ew end;if ev==0 then return-1 end;assert(ev>0,'Acceleration and initial speed are both zero.')return ag/ev end;function b7.lorentz(c_)return eu(c_)end;return b7 end;local function eV()local vec3=require('cpml.vec3')local d1=d1()local function d7(d8)return type(d8)=='string'end;local function d5(d6)return type(d6)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dB)assert(self.body)local ag=dB+self.body.radius;if not cj(ag,0)then local orbit=math.sqrt(self.body.GM/ag)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dy,eW)assert(self.body)assert(d5(dy)or d7(dy))assert(d5(eW))local eX=(d7(dy)or d1.isMapPosition(dy))and self.body:convertToWorldCoordinates(dy)or vec3(dy)local c_=vec3(eW)local eY=eX-self.body.center;local e6=c_:len2()local eZ=eY:len()local e_=self.body.GM;local f0=((e6-e_/eZ)*eY-eY:dot(c_)*c_)/e_;local ck=e_/(2*e_/eZ-e6)local f1=f0:len()local e7=f0:normalize()local f2=ck*(1-f1)local f3=ck*(1+f1)local f4=f2*e7+self.body.center;local f5=f1<=1 and-f3*e7+self.body.center or nil;local f6=math.sqrt(ck*e_*(1-f1*f1))local f7=f5 and 2*math.pi*math.sqrt(ck^3/e_)local f8=math.acos(f0:dot(eY)/(f1*eZ))if eY:dot(c_)<0 then f8=-(f8-2*math.pi)end;local f9=math.acos((math.cos(f8)+f1)/(1+f1*math.cos(f8)))local fa=f9;if fa<0 then fa=fa+2*math.pi end;local fb=fa-f1*math.sin(fa)local fc=0;local fd=0;local fe=0;if f7~=nil then fc=fb/(2*math.pi/f7)fd=f7-fc;fe=fd+f7/2;if f8-math.pi>0 then fd=fc;fe=fd+f7/2 end;if fe>f7 then fe=fe-f7 end end;return{periapsis={position=f4,speed=f6/f2,circularOrbitSpeed=math.sqrt(e_/f2),altitude=f2-self.body.radius},apoapsis=f5 and{position=f5,speed=f6/f3,circularOrbitSpeed=math.sqrt(e_/f3),altitude=f3-self.body.radius},currentVelocity=c_,currentPosition=eX,eccentricity=f1,period=f7,eccentricAnomaly=f9,meanAnomaly=fb,timeToPeriapsis=fd,timeToApoapsis=fe}end;local function ff(fg)local eh=d1.BodyParameters(fg.planetarySystemId,fg.bodyId,fg.radius,fg.center,fg.GM)return setmetatable({body=eh},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ff(...)end})end;local function fh()local fi=0;local function fj(fk)local dt=500000;local fl,fm,fn=math.huge;local fo=false;local fp=vec3({13771471,7435803,-128971})local fq=18000000;fl=vec3(fk):dist(fp)if fl<fq then return true,c(fl-fq),"Safe Zone",0 end;fm=vec3(fk):dist(vec3(planet.center))if fm<dt then fo=true end;if c(fm-dt)<c(fl-fq)then return fo,c(fm-dt),planet.name,planet.bodyId else return fo,c(fl-fq),"Safe Zone",0 end end;local function fr(c_)if aJ==1920 then return c_ else return x(aJ*c_/1920,0)end end;local function fs(c_)if aK==1080 then return c_ else return x(aK*c_/1080,0)end end;local function ft()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function fu()local fv="TRAVEL"if not bP then fv="CRUISE"end;if Autopilot then fv="AUTOPILOT"end;return fv end;local function fw(fx,a_,ca,fy,fz,fA,fB,fC)local fD=1;local fE=2;local fF=3;local fG=4;local fH=5;local fI=6;local fJ=""local fK=0;local fL=fuelY;local fM=fuelY+5;if not BarFuelDisplay then fM=fM+5 end;if l()==1 and not RemoteHud then fL=fL-50;fM=fM-50 end;if fz=="ATMO"then fJ="atmofueltank"elseif fz=="SPACE"then fJ="spacefueltank"else fJ="rocketfueltank"end;fK=_G[fJ.."_size"]if#fA>0 then for i=1,#fA do local fN=string.sub(fA[i][fE],1,12)local fO=0;for fP=1,fK do if fA[i][fE]==f(unit[fJ.."_"..fP].getData()).name then fO=fP;break end end;if a_ or fB[i]==nil or fC[i]==nil then local fQ=0;local fR=0;local fS=0;local fT=0;local fU=p()if fO~=0 then fC[i]=f(unit[fJ.."_"..fO].getData()).percentage;fB[i]=f(unit[fJ.."_"..fO].getData()).timeLeft;if fB[i]=="n/a"then fB[i]=0 end else fS=k(fA[i][fD])-fA[i][fG]fQ=fA[i][fF]fC[i]=d(0.5+fS*100/fQ)fR=fA[i][fH]fT=fA[i][fI]if fR<=fS then fB[i]=0 else fB[i]=d(0.5+fS/((fR-fS)/(fU-fT)))end;fA[i][fH]=fS;fA[i][fI]=fU end end;if fN==fy then fN=e("%s %d",fz,i)end;if fO==0 then fN=fN.." *"end;local fV;if fB[i]==0 then fV=""else fV=cQ(fB[i])end;if fC[i]~=nil then local fW=d(fC[i]*2.55)local fX=e("rgb(%d,%d,%d)",255-fW,fW,0)local cd=""if fV~=""and fB[i]<120 or fC[i]<5 then if a_ then cd=[[class="red"]]end end;if BarFuelDisplay then table.insert(fx,e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],ca,fM,fX,fC[i],ca,fM,ca+2,fM+10,fC[i],fV))fx[#fx+1]=c9(ca,fL,fN,cd.."txtstart pdim txtfuel")fL=fL-30;fM=fM-30 else fx[#fx+1]=c9(ca,fL,fN,cd.." pdim txtfuel")fx[#fx+1]=c9(ca,fM,e("%d%% %s",fC[i],fV),"pdim txtfuel","fill:"..fX)fL=fL+30;fM=fM+30 end end end end end;local function fY(fx,dB)if dB<200000 and not aq or dB and aq then local fZ=0;if c(bJ)>1 then fZ=45*math.log(c(bJ),10)if bJ<0 then fZ=-fZ end end;fx[#fx+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bJ),d(fZ))end;return fx end;local function f_(g0)local g1=-bI;g0=g0-g0:project_on(g1)local g2=vec3(0,0,1)g2=g2-g2:project_on(g1)local g3=g2:cross(g1)local fZ=g2:angle_between(g0)*constants.rad2deg;if g0:dot(g3)<0 then fZ=360-fZ end;return fZ end;local function g4(fx,centerX,centerY,g5,g6,cv)local g7=circleRad;local g8=20;local g9=d(g5)if cv then for i=-45,45,5 do local ga=i;fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],ga,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fx[#fx+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+g7+g8-len,centerX,centerY+g7+g8)end;fx[#fx+1]=c9(centerX,centerY+g7+g8-35,g6,"pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY+g7+g8-25,g9 .." deg","pdim txt txtmid")fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g5,centerX,centerY)fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+g7+g8-20,centerX+5,centerY+g7+g8-20,centerX,centerY+g7+g8-15)fx[#fx+1]="</g>"end;local gb=g9;if cv then gb=f_(bE)end;local gc=20;local gd=d(gb)local ge=0;local gf=centerY+g7+g8+20;local gg=centerX;if g6~="YAW"then gf=fs(130)gg=fr(960)end;local gh=[[<path class="txttick line" d="]]local gi=d(gd-(gc+10)-gd%5+0.5)for i=gi+60,gi,-5 do local ca=gg-(-i*5+gb*5)if i%10==0 then ge=10;local y=i;if y==360 then y=0 elseif y>360 then y=y-360 elseif y<0 then y=y+360 end;fx[#fx+1]=c9(ca+5,gf-12,y)elseif i%5==0 then ge=5 end;if ge==10 then gh=e([[%s M %f %f v %d]],gh,ca,gf-5,ge)else gh=e([[%s M %f %f v %d]],gh,ca,gf-2.5,ge)end end;fx[#fx+1]=gh..[["/>]]fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gg-5,gf+10,gg+5,gf+10,gg,gf+5)if cv then g6="HDG"end;fx[#fx+1]=c9(gg,gf+25,gd.."deg","pdim txt txtmid","")fx[#fx+1]=c9(gg,gf+35,g6,"pdim txt txtmid","")end;local function gj(fx,gk,g5,centerX,centerY,cv,gl,eT)local g7=circleRad;local gm=d(g7*3/5)if g7>0 then local gn=d(gk)local len=0;local gh=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*g5,centerX,centerY)if not aq then gh=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fx[#fx+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],g7-1,centerX,centerY)fx[#fx+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gn-30-gn%5+0.5),d(gn+30+gn%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cb=centerY+-i*5+gk*5;if len==30 then gh=e([[%s M %d %f h %d]],gh,centerX-gm-len,cb,len)if aq then fx[#fx+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g5,centerX,centerY,centerX-gm+10,cb,i)fx[#fx+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g5,centerX,centerY,centerX+gm-10,cb,i)if i==0 or i==180 or i==-180 then fx[#fx+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g5,centerX,centerY,centerX-gm+20,cb,gm*2-40)end else fx[#fx+1]=c9(centerX-gm+10,cb,i,"pdim txt txtmid")fx[#fx+1]=c9(centerX+gm-10,cb,i,"pdim txt txtmid")end;gh=e([[%s M %d %f h %d]],gh,centerX+gm,cb,len)else gh=e([[%s M %d %f h %d]],gh,centerX-gm-len,cb,len)gh=e([[%s M %d %f h %d]],gh,centerX+gm,cb,len)end end;fx[#fx+1]=gh..[["/>]]local go="PITCH"if not cv then go="REL PITCH"end;if gk>90 and not aq then gk=90-(gk-90)elseif gk<-90 and not aq then gk=-90-(gk+90)end;if g7>200 then if aq then if eT>N then fx[#fx+1]=c9(centerX,centerY-15,"Yaw","pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY+20,gl,"pdim txt txtmid")end;fx[#fx+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g5,centerX,centerY)else fx[#fx+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-gm+25,centerY-5,centerX-gm+20,centerY,centerX-gm+25,centerY+5,centerX-gm+50,centerY+4,gn)fx[#fx+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+gm-25,centerY-5,centerX+gm-20,centerY,centerX+gm-25,centerY+5,centerX+gm-30,centerY+4,gn)fx[#fx+1]="</g>"end;local gp=d(g7/3)fx[#fx+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-gp,centerY,g7-gp)if not aq and cv then fx[#fx+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g5,centerX,centerY,centerX-gm+10,centerY,gm*2-20)end;fx[#fx+1]="</g>"if g7<200 then if aq and eT>N then fx[#fx+1]=c9(centerX,centerY-g7,go,"pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY-g7+10,gn,"pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY-15,"Yaw","pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY+20,gl,"pdim txt txtmid")else fx[#fx+1]=c9(centerX,centerY-g7,go,"pdim txt txtmid")fx[#fx+1]=c9(centerX,centerY-g7+15,gn,"pdim txt txtmid")end end end end;local function gq(fx,dB,cv)local gr=altMeterX;local gs=altMeterY;local gt=78;local gu=19;local gv=an;if an~=-1 then fx[#fx+1]=c9(gr+gt,gs+gu+20,e("AGL: %.1fm",an),"pdim altsm txtend")end;if cv and(dB<200000 and not aq or dB and aq)then table.insert(fx,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gr-1,gs-4,gt+2,gu+6,gr+1,gs-1,gt-4,gu))local cy=0;local gw=1;local gx=0;local gy=dB<0;local gz=9;if gy then gz=0 end;local dB=c(dB)while cy<6 do local gA=11;local gB=16;local gC=9;local gD=14;local cd="altsm"if cy>2 then gB=gB+3;gA=gA+2;gD=gD+2;gC=gC-6;cd="altbig"end;if gy then cd=cd.." red"end;local gE=dB/gw%10;local gF=d(gE)local gG=d((gF+1)%10)local gH=gx;if cy==0 then gH=gE-gF;if gy then gH=1-gH end end;if gy and(cy==0 or gx~=0)then local gI=gG;gG=gF;gF=gI end;local gJ=gB*(gH-1)local gK=gJ+gB;local ca=gr+gC+(6-cy)*gA;local cb=gs+gD;fx[#fx+1]=c9(ca,cb+gJ,gG,cd)fx[#fx+1]=c9(ca,cb+gK,gF,cd)cy=cy+1;gw=gw*10;if gF==gz then gx=gH else gx=0 end end;table.insert(fx,[[</g></g>]])end end;local function gL(eW)eW=vec3(eW)local gM=-math.deg(m(eW.y,eW.z))+180;gM=gM-90;if gM<0 then gM=360+gM end;if gM>180 then gM=-180+gM-180 end;return-gM end;local function gN(eW)eW=vec3(eW)local gb=math.deg(m(eW.y,eW.x))-90;if gb<-180 then gb=360+gb end;return gb end;local function gO(fx,eW,eT,centerX,centerY)if eT>5 and not aq or eT>N then local g7=circleRad;local gP=20;local gQ=20;local gR=vec3(eW)local gS=gL(gR)local gT=gN(gR)local gU=14;local gV=gU/2;local gW=-gT/gQ*g7;local gX=gS/gP*g7;local ca=centerX+gW;local cb=centerY+gX;local ag=math.sqrt(gW^2+gX^2)local gY=[[<circle
                            cx="]]..ca..[["
                            cy="]]..cb..[["
                            r="]]..gV/gU..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ca..[["
                            cy="]]..cb..[["
                            r="]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ca-gU..[[,]]..cb..[[ h ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ca+gV..[[,]]..cb..[[ h ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ca..[[,]]..cb-gU..[[ v ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ag<g7 then fx[#fx+1]=gY else local fZ=m(gX,gW)local gZ=4;local g_=centerX+g7*math.cos(fZ)local h0=centerY+g7*math.sin(fZ)fx[#fx+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fZ*180/math.pi,g_,h0,g_-gZ,h0-gZ/2,gZ*2,gZ,g_+gZ,h0-gZ,gZ,gZ,-gZ,gZ)end;if not aq then gS=gL(-gR)gT=gN(-gR)gW=-gT/gQ*g7;gX=gS/gP*g7;ca=centerX+gW;cb=centerY+gX;ag=math.sqrt(gW^2+gX^2)if ag<g7 then local h1=[[<circle
                                    cx="]]..ca..[["
                                    cy="]]..cb..[["
                                    r="]]..gV..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ca..[[,]]..cb-gU..[[ v ]]..gV..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ca..[[,]]..cb..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ca..[[,]]..cb..[[)" />
                                <path
                                    d="M ]]..ca-gV..[[,]]..cb..[[ h ]]..gU..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ca..[[,]]..cb..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ca..[[,]]..cb..[[)"/>]]fx[#fx+1]=h1 end end end end;local function h2(fx,fv,h3,h4)h3=d(h3+0.5)local fL=throtPosY+10;local fM=throtPosY+20;if l()==1 and not RemoteHud then fL=55;fM=65 end;local h5="CRUISE"local unit="km/h"local cg=h4;if fv=="TRAVEL"or fv=="AUTOPILOT"then h5="THROT"unit="%"cg=h3;local h6="dim"if h3<0 then h6="red"end;fx[#fx+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],h6,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h3),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fx[#fx+1]=c9(throtPosX+10,fL,h5,"pbright txtstart")fx[#fx+1]=c9(throtPosX+10,fM,e("%.0f %s",cg,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bP and H then h3=d(I*100+0.5)local h6="red"if h3<0 then h6="red"end;fx[#fx+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],h6,1-c(h3),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fx[#fx+1]=c9(throtPosX+10,fL+40,"LIMIT","pbright txtstart")fx[#fx+1]=c9(throtPosX+10,fM+40,h3 .."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then fx[#fx+1]=c9(throtPosX+10,fL-40,"LIMIT: "..bm.." km/h","dim txtstart")elseif not aq and Autopilot then fx[#fx+1]=c9(throtPosX+10,fL-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function h7(fx,h8)local h9=throtPosY-10;local ha=throtPosX+10;fx[#fx+1]=c9(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then h9=75 end;fx[#fx+1]=c9(ha,h9,d(h8).." km/h","pbright txtbig txtstart")end;local function hb(fx)fx[#fx+1]=c9(fr(1900),fs(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fx[#fx+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fx[#fx+1]=c9(fr(960),fs(550),"Warning: Invalid Control Scheme Detected","warnings")fx[#fx+1]=c9(fr(960),fs(600),"Keyboard Scheme must be selected","warnings")fx[#fx+1]=c9(fr(960),fs(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local hc=fr(960)local hd=fs(860)local he=fs(880)local hf=fs(900)local hg=fs(960)local hh=fs(200)local hi=fs(250)local hj=fs(960)if l()==1 and not RemoteHud then hd=fs(135)he=fs(155)hf=fs(175)hh=fs(115)hi=fs(95)end;if BrakeIsOn then fx[#fx+1]=c9(hc,hd,"Brake Engaged","warnings")elseif G>0 then fx[#fx+1]=c9(hc,hd,"Auto-Brake Engaged","warnings","opacity:"..G)end;if aq and bh and an==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bN and not VertTakeOff then fx[#fx+1]=c9(hc,hh+50,"** STALL WARNING **","warnings")bX("StallWarning.mp3","SW",1)end end;if ax then fx[#fx+1]=c9(hc,hj,"Gyro Enabled","warnings")end;if GearExtended then if P then fx[#fx+1]=c9(hc,he,"Gear Extended","warn")else fx[#fx+1]=c9(hc,he,"Landed (G: Takeoff)","warnings")end;local hk=cm(a:getTargetGroundAltitude())fx[#fx+1]=c9(hc,hf,"Hover Height: "..hk,"warn")end;if a4 then fx[#fx+1]=c9(hc,hg+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bN and AntigravTargetAltitude~=nil then if c(as-antigrav.getBaseAltitude())<501 then fx[#fx+1]=c9(hc,hh+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fx[#fx+1]=c9(hc,hh+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fx[#fx+1]=c9(hc,hh+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fx[#fx+1]=c9(hc,hh+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif X then fx[#fx+1]=c9(hc,hh+20,"Follow Mode Engaged","warn")elseif Reentry then fx[#fx+1]=c9(hc,hh+20,"Re-entry in Progress","warn")end;local hl,ec,ed=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(e0)if e0.noAtmosphericDensityAltitude>0 then return e0.radius+e0.noAtmosphericDensityAltitude else return e0.radius+e0.surfaceMaxAltitude*1.5 end end)local hm=ec;if ed~=nil and ec~=nil then hm=math.min(ed,ec)end;if AltitudeHold or VertTakeOff then local hk=cm(HoldAltitude,2)if VertTakeOff then if bN then hk=cm(antigrav.getBaseAltitude(),2).." AGG singularity height"end;fx[#fx+1]=c9(hc,hh,"VTO to "..hk,"warn")elseif AutoTakeoff and not IntoOrbit then if al then fx[#fx+1]=c9(hc,hh,"Takeoff to "..AutopilotTargetName,"warn")else fx[#fx+1]=c9(hc,hh,"Takeoff to "..hk,"warn")end;if BrakeIsOn and not VertTakeOff then fx[#fx+1]=c9(hc,hh+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fx[#fx+1]=c9(hc,hh,"Altitude Hold: "..hk,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then fx[#fx+1]=c9(hc,hh+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then fx[#fx+1]=c9(hc,hh+20,"Aligning trajectory","warn")elseif ar<0.05 then fx[#fx+1]=c9(hc,hh+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if bo~=nil then fx[#fx+1]=c9(hc,hh,bo,"warn")end end;if IntruderAlertSystem and safeMass==-1 then fx[#fx+1]=c9(hc,hh+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bL.."kg DETECTED","warnings")bX("Alarm.mp3","AL",1)end;if BrakeLanding then if StrongBrakes then fx[#fx+1]=c9(hc,hh,"Brake-Landing","warnings")else fx[#fx+1]=c9(hc,hh,"Coast-Landing","warnings")end end;if ProgradeIsOn then fx[#fx+1]=c9(hc,hh,"Prograde Alignment","crit")end;if RetrogradeIsOn then fx[#fx+1]=c9(hc,hh,"Retrograde Alignment","crit")end;if hm~=nil and ar==0 then local hk=cm(hm)local travelTime=b7.computeTravelTime(bH,0,hm)local hn="Collision"if hl.noAtmosphericDensityAltitude>0 then hn="Atmosphere"end;fx[#fx+1]=c9(hc,hi+20,hl.name.." "..hn.." "..cQ(travelTime).." In "..hk,"crit")end;if VectorToTarget and not IntoOrbit then fx[#fx+1]=c9(hc,hh+35,VectorStatus,"warn")end;fx[#fx+1]="</g>"return fx end;local function ho(eT)return d(x(eT*3.6,0)+0.5).." km/h"end;local function hp(fx)local hq=OrbitMapX;local hr=OrbitMapY;local hs=OrbitMapSize;local ht=4;local hu=15;local ca=0;local cb=0;local hv,hw,hx,hy;local function hz(type)local hA,bC,eT,hB;if type=="Periapsis"then hA=orbit.periapsis.altitude;bC=orbit.timeToPeriapsis;eT=orbit.periapsis.speed;hB=35 else hA=orbit.apoapsis.altitude;bC=orbit.timeToApoapsis;eT=orbit.apoapsis.speed;hB=-35 end;fx[#fx+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ca+hB,cb-5,hq+hs/2-hv+hy,cb-5)fx[#fx+1]=c9(ca,cb,type)cb=cb+hu;local hk=cm(hA)fx[#fx+1]=c9(ca,cb,hk)cb=cb+hu;fx[#fx+1]=c9(ca,cb,cQ(bC))cb=cb+hu;fx[#fx+1]=c9(ca,cb,ho(eT))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then hr=hr+ht;ca=hq+hs+hq/2+ht;cb=hr+hs/2+5+ht;hv=hs/4;hy=0;fx[#fx+1]=[[<g class="pbright txtorb txtmid">]]fx[#fx+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',hs+hq*2,hs+hr,ht,ht)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hx=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hv*2)hw=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hx*(1-orbit.eccentricity)hy=hv-orbit.periapsis.altitude/hx-planet.radius/hx;local hC=""if orbit.periapsis.altitude<=0 then hC='redout'end;fx[#fx+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hC,hq+hs/2+hy+ht,hr+hs/2+ht,hv,hw)fx[#fx+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hq+hs/2+ht,hr+hs/2+ht,planet.radius/hx)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hz("Apoapsis")end;cb=hr+hs/2+5+ht;ca=hq-hq/2+10+ht;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hz("Periapsis")end;fx[#fx+1]=c9(hq+hs/2+ht,planet.name,20+ht,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hD=orbit.timeToApoapsis/orbit.period*2*math.pi;local hE=hv*math.cos(hD)local hF=hw*math.sin(hD)fx[#fx+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hq+hs/2+hE+hy+ht,hr+hs/2+hF+ht)end;fx[#fx+1]=[[</g>]]return fx else return fx end end;local function hG()if radarPanelID~=nil and aj==0 then s(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then s(perisPanelID)perisPanelID=nil end else if aj==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;aj=0 end end;local function hH(fx)local ca=50;local cb=275;local hI={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hJ={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local hK={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local hL={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if aq then b_(hI,hJ)table.insert(hI,"---------------------------------------")if VertTakeOff then table.insert(hI,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if an~=-1 then if antigrav then if bN then table.insert(hI,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hI,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hI,"Alt-6: Begins Vertical Takeoff.")else table.insert(hI,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hI,"G: Begin BrakeLanding or Land")end else b_(hI,hK)end;if AltitudeHold then table.insert(hI,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(hI,"---------------------------------------")b_(hI,hL)for i=1,#hI do cb=cb+12;fx[#fx+1]=c9(ca,cb,hI[i],"pdim txttick txtstart")end end;local hM={}function hM.HUDPrologue(fx)bW,fi,_,_=fj(bK)if not bW then C=PvPR;E=PvPG;D=PvPB else C=SafeR;E=SafeG;D=SafeB end;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local hN=az;local hO=aA;local hP=az;local hQ=aA;if ft()and not brightHud then hN=[[rgb(]]..d(C*0.4+0.5)..","..d(E*0.4+0.5)..","..d(D*0.3+0.5)..[[)]]hO=[[rgb(]]..d(C*0.3+0.5)..","..d(E*0.3+0.5)..","..d(D*0.2+0.5)..[[)]]end;fx[#fx+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],hN,hN,hP,hP,hO,hO,hQ,hQ,aJ,aK)return fx end;function hM.DrawVerticalSpeed(fx,dB)fY(fx,dB)end;function hM.UpdateHud(fx)local dB=as;local eW=core.getVelocity()local eT=vec3(eW):len()local gM=bQ;local hR=bR;local g5=hR;local gk=bQ;local h3=d(unit.getThrottle())local h8=eT*3.6;local h4=unit.getAxisCommandValue(0)local hS=fr(1770)local hT=fs(310)if AtmoSpeedAssist and bP then h4=F;h3=F*100 end;local fv=fu()local g6="ROLL"local cv=unit.getClosestPlanetInfluence()>0;if h3==nil then h3=0 end;if not cv then if eT>5 then gM=gL(eW)hR=gN(eW)else gM=0;hR=0 end;g6="YAW"end;if fi>50000 and not aq then local hU;if fi>200000 then hU=x(fi/200000,2).." su"else hU=x(fi/1000,1).." km"end;fx[#fx+1]=c9(hS,hT,"PvP Boundary: "..hU,"pbright txtbig txtmid")end;fx[#fx+1]=ai;fx[#fx+1]=aE;fx[#fx+1]=ah;if b0%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then fw(fx,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)fw(fx,a_,fuelX+120,"Space fuel t","SPACE",aP,aW,aX)fw(fx,a_,fuelX+240,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b0=0 end;b0=b0+1;fY(fx,dB)if l()==0 or RemoteHud then if not ft()or brightHud then if cv then g4(fx,centerX,centerY,g5,g6,cv)gj(fx,gk,g5,centerX,centerY,cv,d(gN(eW)),eT)else g4(fx,centerX,centerY,hR,g6,cv)gj(fx,gM,hR,centerX,centerY,cv,d(hR),eT)end;gq(fx,dB,cv)gO(fx,eW,eT,centerX,centerY)end end;h2(fx,fv,h3,h4)h7(fx,h8)hb(fx)hp(fx)if showHelp then hH(fx)end;return fx end;function hM.HUDEpilogue(fx)fx[#fx+1]="</svg>"return fx end;function hM.ExtraData(fx)local hV=fr(1240)local hW=fs(55)local hX=hW+10;local hY;local hZ=0;local fv=fu()if VertTakeOffEngine then fv=fv.."-VERTICAL"end;if TurnBurn then fv="TB-"..fv end;if not stablized then fv=fv.."-DeCoupled"end;local h_=vec3(core.getWorldAcceleration()):len()/9.80665;hY=core.g()fx[#fx+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then hV=fr(1120)hW=fs(55)hX=hW+10 elseif aq then local i0=fr(770)fx[#fx+1]=c9(i0,hW,"ATMOSPHERE","pdim txt txtend")fx[#fx+1]=c9(i0,hX,e("%.2f",ar),"pdim txt txtend","")end;fx[#fx+1]=c9(hV,hW,"GRAVITY","pdim txt txtend")fx[#fx+1]=c9(hV,hX,e("%.2f",hY/9.80665),"pdim txt txtend")fx[#fx+1]=c9(hV,hW+20,"ACCEL","pdim txt txtend")fx[#fx+1]=c9(hV,hX+20,e("%.2f",h_),"pdim txt txtend")fx[#fx+1]=c9(fr(960),fs(180),fv,"txtbig txtmid")end;function hM.DrawOdometer(fx,aa,TotalDistanceTravelled,ab)local hY;local i1=0;local i2=0;local hZ=0;if aq then hZ=LastMaxBrakeInAtmo else hZ=LastMaxBrake end;maxThrust=a:maxForceForward()hY=core.g()if hY>0.1 then i2=av*hY;i1=maxThrust/hY end;fx[#fx+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],fr(660),fr(700),fs(35),fr(960),fs(55),fr(1240),fs(35),fr(1280))if l()==0 or RemoteHud then fx[#fx+1]=c9(fr(700),fs(20),e("Trip: %.2f km",aa),"txtstart")fx[#fx+1]=c9(fr(700),fs(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")fx[#fx+1]=c9(fr(830),fs(20),"Trip Time: "..cQ(ab),"txtstart")fx[#fx+1]=c9(fr(830),fs(30),"Total Time: "..cQ(TotalFlightTime),"txtstart")fx[#fx+1]=c9(fr(970),fs(20),e("Mass: %.2f Tons",av/1000),"txtstart")fx[#fx+1]=c9(fr(1240),fs(10),e("Max Brake: %.2f kN",hZ/1000),"txtend")fx[#fx+1]=c9(fr(1240),fs(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if hY>0.1 then fx[#fx+1]=c9(fr(970),fs(30),e("Max Mass: %.2f Tons",i1/1000),"txtstart")fx[#fx+1]=c9(fr(1240),fs(20),e("Req Thrust: %.2f kN",i2/1000),"txtend")else fx[#fx+1]=c9(fr(970),fs(30),"Max Mass: n/a","txtstart")fx[#fx+1]=c9(fr(1240),fs(20),"Req Thrust: n/a","txtend")end end;fx[#fx+1]="</g>"return fx end;function hM.DrawWarnings(fx)return hb(fx)end;function hM.DisplayOrbitScreen(fx)return hp(fx)end;function hM.DisplayMessage(fx,hk)if hk~="empty"then local cb=310;for i3 in string.gmatch(hk,"([^\n]+)")do cb=cb+35;fx[#fx+1]=c9("50%",cb,i3,"msg")end end;if af~=0 then unit.setTimer("msgTick",af)af=0 end end;function hM.DrawDeadZone(fx)fx[#fx+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function hM.UpdateRadar()if radar_1 then local i4=radar_1.getEntries()local i5=radar_1.getData()local i6=fr(1770)local i7=fs(330)if#i4>0 then local i8=i5:find('identifiedConstructs":%[%]')if i8==nil and perisPanelID==nil then aj=1;hG()end;if i8~=nil and perisPanelID~=nil then hG()end;if radarPanelID==nil then hG()end;ah=c9(i6,i7,"Radar: "..#i4 .." contacts","pbright txtbig txtmid")local i9={}for cZ,c_ in pairs(i4)do if radar_1.hasMatchingTransponder(c_)==1 then table.insert(i9,c_)end end;if#i9>0 then local cb=fs(15)local ca=fr(1370)ah=ah..c9(ca,cb,"Friendlies In Range","pbright txtbig txtmid")for cZ,c_ in pairs(i9)do cb=cb+20;ah=ah..c9(ca,cb,radar_1.getConstructName(c_),"pdim txtmid")end end else local ia;ia=i5:find('worksInEnvironment":false')if ia then ah=c9(i6,i7,"Radar: Jammed","pbright txtbig txtmid")else ah=c9(i6,i7,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then aj=0;hG()end end end end;function hM.DrawSettings(fx)if#bT>0 then local ca=fr(640)local cb=fs(200)fx[#fx+1]=[[<g class="pbright txtvspd txtstart">]]for cZ,c_ in pairs(bT)do fx[#fx+1]=c9(ca,cb,c_..": ".._G[c_])cb=cb+20;if cZ%12==0 then ca=ca+fr(350)cb=fs(200)end end;fx[#fx+1]=c9(fr(640),fs(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fx[#fx+1]="</g>"end;return fx end;return hM end;local function ib()local function ic()local function id(ie,ig)return ie.name<ig.name end;bV={}for cZ,c_ in pairs(b1[0])do bV[#bV+1]={name=c_.name,index=cZ}end;table.sort(bV,id)end;local d0={}function d0.UpdateAtlasLocationsList()ic()end;function d0.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a9=nil;CustomTarget=nil;return true end;local ih=bV[AutopilotTargetIndex].index;local ii=b1[0][ih]if ii.center then AutopilotTargetName=ii.name;a9=b6[0][ih]if CustomTarget~=nil then if ar==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ii;for _,c_ in pairs(b6[0])do if c_.name==CustomTarget.planetname then a9=c_;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a9.center)else AutopilotTargetCoords=CustomTarget.position end;if a9.planetname~="Space"then if a9.hasAtmosphere then AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function d0.adjustAutopilotTargetIndex(g1)if not Autopilot and not VectorToTarget and not al and not IntoOrbit then if g1==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bV then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bV end end;if AutopilotTargetIndex==0 then bb.UpdateAutopilotTarget()else local ih=bV[AutopilotTargetIndex].index;local ii=b1[0][ih]if ii.name=="Space"or iphCondition=="Custom Only"and ii.center or iphCondition=="No Moons"and string.find(ii.name,"Moon")~=nil then if g1==nil then bb.adjustAutopilotTargetIndex()else bb.adjustAutopilotTargetIndex(1)end else bb.UpdateAutopilotTarget()end end else Z="Disengage autopilot before changing Interplanetary Helper"end end;function d0.findAtlasIndex(ij)for cZ,c_ in pairs(ij)do if c_.name and c_.name==CustomTarget.name then return cZ end end;return-1 end;for cZ,c_ in pairs(SavedLocations)do table.insert(b1[0],c_)end;ic()d0.UpdateAutopilotTarget()return d0 end;local function ik()local il={}local im={vec3(bG),-vec3(bG),vec3(bD),-vec3(bD),vec3(bF),-vec3(bF)}local function io(eT)local ip=AutopilotEndSpeed;if not Autopilot then ip=0 end;if not aq then return b7.computeDistanceAndTime(eT,ip,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(eT,ip,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function iq(eT)local ip=AutopilotEndSpeed;if not Autopilot then ip=0 end;return b7.computeDistanceAndTime(eT,ip,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;function il.GetAutopilotBrakeDistanceAndTime(eT)return io(eT)end;function il.GetAutopilotTBBrakeDistanceAndTime(eT)return iq(eT)end;local function ir(is,it,iu)it=it:project_on_plane(is)iu=iu:project_on_plane(is)return m(it:cross(iu):dot(is),it:dot(iu))end;local function iv()local function iw()local ix=-1;local iy=-1;if vBooster then ix=vBooster.distance()end;if hover then iy=hover.distance()end;if ix~=-1 and iy~=-1 then if ix<iy then return ix else return iy end elseif ix~=-1 then return ix elseif iy~=-1 then return iy else return-1 end end;local iz=iw()local iA=-1;if telemeter_1 then iA=telemeter_1.getDistance()end;if iz~=-1 and iA~=-1 then if iz<iA then return iz else return iA end elseif iz~=-1 then return iz else return iA end end;local function iB(planet,ee,iC)local function iD(iE,du)local ek=vec3(du)if iE.bodyId==0 then return setmetatable({latitude=ek.x,longitude=ek.y,altitude=ek.z,bodyId=0,systemId=iE.planetarySystemId},MapPosition)end;local el=ek-iE.center;local ag=el:len()local dB=ag-iE.radius;local dz=0;local dA=0;if not cj(ag,0)then local em=m(el.y,el.x)dA=em>=0 and em or 2*math.pi+em;dz=math.pi/2-math.acos(el.z/ag)end;return setmetatable({latitude=math.deg(dz),longitude=math.deg(dA),altitude=dB,bodyId=iE.bodyId,systemId=iE.planetarySystemId},MapPosition)end;local iF=iD(planet,ee)iF="::pos{"..iF.systemId..","..iF.bodyId..","..iF.latitude..","..iF.longitude..","..iF.altitude.."}"if iC then return iF else system.setWaypoint(iF)return true end end;function il.showWayPoint(planet,ee,iC)return iB(planet,ee,iC)end;function il.APTick()aq=j()>0;ar=j()as=core.getAltitude()an=iv()bC=p()bi=bC;if antigrav then bN=antigrav.getState()==1 end;local iG=1;local iH=1;local iI=bC-bi;local iJ=-math.deg(ir(bD,bG,bE))local iK=math.deg(ir(bF,bG,bE))local g1=bI*-1;bh=aq and iJ<-YawStallAngle or iJ>YawStallAngle or iK<-PitchStallAngle or iK>PitchStallAngle;local iL=system.getMouseDeltaX()local iM=system.getMouseDeltaY()if InvertMouse and not Y then iM=-iM end;S=0;W=0;R=0;sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bG)if as==0 then as=(bK-planet.center):len()-planet.radius end;local hY=planet:getGravity(core.getConstructWorldPos()):len()*av;bj=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and Y then if not bd then ad=ad+iL;ae=ae+iM end else ad=0;ae=0 end else ad=ad+iL;ae=ae+iM;ag=math.sqrt(ad*ad+ae*ae)if not Y and l()==0 then if userControlScheme=="virtual joystick"then if ad>0 and ad>DeadZone then S=S-(ad-DeadZone)*MouseXSensitivity elseif ad<0 and ad<DeadZone*-1 then S=S-(ad+DeadZone)*MouseXSensitivity else S=0 end;if ae>0 and ae>DeadZone then R=R-(ae-DeadZone)*MouseYSensitivity elseif ae<0 and ae<DeadZone*-1 then R=R-(ae+DeadZone)*MouseYSensitivity else R=0 end else ad=0;ae=0;if userControlScheme=="mouse"then R=(-utils.smoothstep(iM,-100,100)+0.5)*2*iG;S=(-utils.smoothstep(iL,-100,100)+0.5)*2*iH end end end end;local iN=bH>8334;if bH>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not iN then Z="Space Speed Engine Shutoff reached"cf(0)end;if not iN and LastIsWarping then if not BrakeIsOn then cB()end;if Autopilot then ct()end end;LastIsWarping=iN;if aq and ar>0.09 then if bH>bm/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bH<bm/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then V=1 else V=0 end;if ProgradeIsOn then if ak then BrakeIsOn=false;local iO=false;if CustomTarget~=nil then iO=cC(CustomTarget.position-bK,0.1)else iO=cC(vec3(bG),0.01)end;bf=true;if iO then ci(d(bm))if(c(bR)<2 or c(bQ)>85)and bH>=bm/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cO()end elseif aq and AtmoSpeedAssist then cf(1)end elseif bH>N then cC(vec3(bG),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bH>N then cC(-vec3(bG))end end;if not ProgradeIsOn and ak and not IntoOrbit then if ar==0 then O=true;cO()ak=false;am=true else ak=false;ct()end end;if am and CustomTarget~=nil and(as<HoldAltitude+200 and as>HoldAltitude-200)and bH*3.6>bm-100 and c(bJ)<20 and ar>=0.1 and(CustomTarget.position-bK):len()>2000+as then ct()am=false end;if VertTakeOff then bf=true;local iP=HoldAltitude;if bJ<-30 then Z="Unable to achieve lift. Safety Landing."ac=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bN or HoldAltitude<planet.spaceEngineMinAltitude then if bN then iP=antigrav.getBaseAltitude()end;if as<iP-100 then bn=0;ac=15;BrakeIsOn=false elseif bJ>0 then BrakeIsOn=true;ac=0 elseif bJ<-30 then BrakeIsOn=true;ac=15 elseif as>=iP then if bN then if Autopilot or VectorToTarget then cp()else BrakeIsOn=true;VertTakeOff=false end;Z="Takeoff complete. Singularity engaged"else BrakeIsOn=false;Z="VTO complete. Engaging Horizontal Flight"cp()end;ac=0 end else if ar>0.08 then bn=0;BrakeIsOn=false;ac=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bz then bn=0;ac=20 else ac=0;bn=36;ci(3500)end else bf=autoRollPreference;IntoOrbit=true;bx=false;CancelIntoOrbit=false;br=false;bp=nil;bq=nil;if bw==nil then bw=planet end;bv=iP;bu=true;VertTakeOff=false end end;if bn~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iQ=q(bn-bQ,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(iQ)local iR=q(vTpitchPID:get(),-1,1)R=iR end end;if IntoOrbit then local cL;local iS=false;local iT=cm(bv)if bw==nil then bw=planet;if VectorToTarget then bw=a9 end end;if not bu then bv=d(bw.radius+bw.surfaceMaxAltitude+LowOrbitHeight)if bw.hasAtmosphere then bv=d(bw.radius+bw.noAtmosphericDensityAltitude+LowOrbitHeight)end;bu=true end;if bt.VectorToTarget then cL=CustomTarget.position-bK end;local iU,iV=b9(bw):escapeAndOrbitalSpeed((bK-bw.center):len()-bw.radius)local iW=bR;if not br then local iX=false;local iY=false;cf(0)bq=0;bo="Aligning to orbital path - OrbitHeight: "..iT;if bt.VectorToTarget then cC(cL:normalize():project_on_plane(bI))iS=bE:dot(cL:project_on_plane(bD):normalize())>0.95 else cC(bG)iS=iJ<0.5;if bH<150 then iS=true end end;R=0;bp=0;if bQ<=bp+1 and bQ>=bp-1 then iX=true else iX=false end;if iW<=bq+1 and iW>=bq-1 then iY=true else iY=false end;if iX and iY and iS then bp=nil;bq=nil;br=true end else if bt.VectorToTarget then cC(cL:normalize():project_on_plane(bI))elseif bH>150 then cC(bG)end;R=0;if bt.VectorToTarget then local a5,_=b7.computeDistanceAndTime(bH,bm/3.6,av,0,0,LastMaxBrake)if bx and cL:len()>15000+a5+as then bo="Orbiting to Target"if as-100<=bw.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bw.noAtmosphericDensityAltitude then bx=false end elseif bx or cL:len()<15000+a5+as then Z="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;O=true;am=true;bt.VectorToTarget,bt.AutopilotAlign=false,false;cq()cO()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bv*0.9 and as<bv*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bv*0.99 and orbit.apoapsis.altitude>=bv*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bx then if bx then BrakeIsOn=false;cf(0)bp=0;if not bt.VectorToTarget then Z="Orbit complete"cq()end else bB=bB+1;if bB>=2 then bx=true end end else bo="Adjusting Orbit - OrbitHeight: "..iT;bs=true;ci(iV*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iZ=bJ;local i_=as-bv;local j0=c(i_)if bJ<10 and c(bQ)<10 and j0<100 then iZ=bJ*2 end;if iZ<10 and c(bQ)<10 and j0<100 then iZ=iZ*2 end;if iZ<5 and c(bQ)<5 and j0<100 then iZ=iZ*4 end;VSpdPID:inject(iZ)bp=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(i_)bp=q(bp-q(OrbitAltPID:get(),-15,15),-90,90)end end else local j1=2.75;local j2=c(o(iU*j1))local j3=j2%50;if j3>0 then j2=j2-j3+50 end;BrakeIsOn=false;if as<bv*0.8 then bo="Escaping planet gravity - OrbitHeight: "..iT;bp=utils.map(bJ,200,0,-15,80)elseif as>=bv*0.8 and as<bv*1.15 then bo="Approaching orbital corridor - OrbitHeight: "..iT;j2=j2*0.75;bp=utils.map(bJ,100,-100,-15,65)elseif as>=bv*1.15 and as<bv*1.5 then bo="Approaching orbital corridor - OrbitHeight: "..iT;j2=j2*0.75;if bJ<0 or bs then bp=utils.map(as,bv*1.5,bv*1.01,-30,0)else bp=utils.map(as,bv*0.99,bv*1.5,0,30)end elseif as>bv*1.5 then bo="Reentering orbital corridor - OrbitHeight: "..iT;bp=-65;local j4=utils.map(bJ,-150,-400,1,0.55)j2=j2*j4 end;ci(d(j2))end end;if bp~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local j5=bp-bQ;OrbitPitchPID:inject(j5)local j6=q(OrbitPitchPID:get(),-0.5,0.5)R=j6 end end;if Autopilot and ar==0 and not ak then local function j7(j8,orbit)system.print(j8)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cf(0)M=false;Z=j8;if orbit then if AutopilotTargetOrbit~=nil then bv=AutopilotTargetOrbit else bv=as end;bu=true;cq()end end;local j9,ja=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jb=(CustomTarget.position-a9.center):normalize()local jc=jb:project_on_plane((a9.center-bK):normalize()):normalize()local jd=a9.center+jc*(a9.radius+AutopilotTargetOrbit)local je=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))if(bK-jd):len()<(bK-je):len()then j9=jd else j9=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))AutopilotEndSpeed=0 end;AutopilotTargetCoords=j9;bc.showWayPoint(a9,AutopilotTargetCoords)ja=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ja=true;TargetSet=true;AutopilotRealigned=true;j9=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jb=(bK+bG*100000-a9.center):normalize()local jc=jb:project_on_plane((a9.center-bK):normalize()):normalize()if jc:len()<1 then jb=(bK+bE*100000-a9.center):normalize()jc=jb:project_on_plane((a9.center-bK):normalize()):normalize()end;j9=a9.center+jc*(a9.radius+AutopilotTargetOrbit)AutopilotTargetCoords=j9;TargetSet=true;ja=true;AutopilotRealigned=true;bc.showWayPoint(a9,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(j9)-bK):len()local hl,ec,ed=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(e0)if e0.noAtmosphericDensityAltitude>0 then return e0.radius+e0.noAtmosphericDensityAltitude else return e0.radius+e0.surfaceMaxAltitude*1.5 end end)local hm=ec;if ed~=nil and ec~=nil then hm=math.min(ed,ec)end;if hm~=nil and hm<AutopilotDistance and hl.name==a9.name then AutopilotDistance=hm end;local iO=true;local jf=(a9.center-(bK+vec3(bG):normalize()*AutopilotDistance)):len()-a9.radius;local hk=cm(jf)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hk..'"}')local a5,a6;if not TurnBurn then a5,a6=io(bH)else a5,a6=iq(bH)end;if bH>300 and AutopilotAccelerating then local cL=vec3(j9)-bK;local jg=q(math.deg(ir(bD,bG:normalize(),cL:normalize()))*bH/500,-90,90)local jh=q(math.deg(ir(bF,bG:normalize(),cL:normalize()))*bH/500,-90,90)if c(jg)<20 and c(jh)<20 then jg=jg*2;jh=jh*2 end;if c(jg)<2 and c(jh)<2 then jg=jg*2;jh=jh*2 end;local iJ=-math.deg(ir(bD,bE,bG:normalize()))local iK=-math.deg(ir(bF,bE,bG:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jh-iK)local ji=q(apPitchPID:get(),-1,1)R=R+ji;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jg-iJ)local jj=q(apYawPID:get(),-1,1)S=S+jj;ja=true;if c(jg)>2 or c(jh)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jf<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(jf)end end;if not AutopilotCruising and not AutopilotBraking and not ja then iO=cC((j9-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then iO=cC(-vec3(bG):normalize())end;if AutopilotAccelerating then if not M then BrakeIsOn=false;cf(AutopilotInterplanetaryThrottle)F=x(AutopilotInterplanetaryThrottle,2)M=true end;local jk=unit.getThrottle()if AtmoSpeedAssist then jk=F end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jk==0 and M then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cf(0)end;if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cf(0)M=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;V=1 end;if TurnBurn then cf(1,true)end;local _,iV=b9(a9):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local cL;if CustomTarget~=nil then cL=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bH<50 then j7("Autopilot complete, arrived at space location")BrakeIsOn=true;V=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bH<=iV and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then j7("Autopilot complete, commencing reentry")BrakeIsOn=true;AutopilotTargetCoords=CustomTarget.position;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then AutopilotStatus="Circularizing"if bH<=iV then if CustomTarget~=nil then if bG:normalize():dot(cL:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=true end else j7("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=false end else j7("Autopilot completed, setting orbit",true)V=0 end end elseif AutopilotStatus=="Circularizing"then j7("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jk=unit.getThrottle()if AtmoSpeedAssist then jk=F end;if jk>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iO then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ak then AutopilotTargetCoords=vec3(a9.center)+(AutopilotTargetOrbit+a9.radius)*bF;AutopilotShipUp=bD;AutopilotShipRight=bF end;AutopilotRealigned=true elseif iO then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not M then cf(AutopilotInterplanetaryThrottle,true)F=x(AutopilotInterplanetaryThrottle,2)M=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then Z="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V=0;cf(0)M=false;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,CustomTarget.position)end;if X then bf=true;local jh=0;local eX=bK+vec3(unit.getMasterPlayerRelativePosition())local jl=eX-bK;local jm=vec3(jl):project_on(bE):len()local jn=vec3(jl):project_on(bF):len()local ag=math.sqrt(jm*jm+jn*jn)cC(jl:normalize())local jo=40;local jp=ag<jo;local jq=100;local jr=q((ag-jo)/2,10,jq)R=0;local iO=c(S)<0.1;if iO and bH<jr and not jp then BrakeIsOn=false;jh=-20 else BrakeIsOn=true;jh=0 end;local js=0;if c(jh-bQ)>js then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jh-bQ)local ji=pitchPID:get()R=ji end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cv=unit.getClosestPlanetInfluence()>0;local jt=HoldAltitude-as;local ju=500+bH;local jv=1;if AutoTakeoff then jv=q(bH/100,0.1,1)end;local jh=(utils.smoothstep(jt,-ju,ju)-0.5)*2*MaxPitch*jv;if not Reentry and not ak and not VectorToTarget and bE:dot(bG:normalize())<0.99 then jh=(utils.smoothstep(jt,-ju*q(20-19*ar*10,1,20),ju*q(20-19*ar*10,1,20))-0.5)*2*MaxPitch*q(2-ar*10,1,2)*jv end;if not AltitudeHold then jh=0 end;if LockPitch~=nil then if cv and not IntoOrbit then jh=LockPitch else LockPitch=nil end end;bf=true;local jw=R;if Reentry then local jx=d(bm)local jy,jz=b7.computeDistanceAndTime(bH,jx/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)local jA=as-(planet.noAtmosphericDensityAltitude+5000)if not bP and as>planet.noAtmosphericDensityAltitude+5000 and bH<=jx/3.6 and bH>jx/3.6-10 and c(bG:normalize():dot(bE))>0.9 then cf(0)elseif bP and bH>jx/3.6 and(jy>-1 and jA<=jy or as<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;ci(jx,true)if not O then jh=-80;if ar>0.02 then Z="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jh=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and as>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then ci(jx)if not bP and r:getTargetSpeed(axisCommandId.longitudinal)==bm then O=false;Reentry=false;bf=true end end end;if bH>N and not al and not VectorToTarget and not BrakeLanding and ForceAlignment then cC(vec3(bG))end;if(VectorToTarget or al)and AutopilotTargetIndex>0 and ar>0.01 then local cL;if CustomTarget~=nil then cL=CustomTarget.position-bK else cL=a9.center-bK end;local jg=math.deg(ir(bI:normalize(),bG,cL))*2;local jB=math.rad(c(bR))if bH>minRollVelocity and ar>0.01 then local jC=q(90-jh*2,-90,90)bj=q(jg*2,-jC,jC)local jD=jg;jg=q(q(jg,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(jB)+4*(bQ-jh)*math.sin(math.rad(bR)),-YawStallAngle*0.80,YawStallAngle*0.80)jh=q(q(jh*math.cos(jB),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(jD)*math.sin(jB),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bj=0;jg=q(jg,-YawStallAngle*0.80,YawStallAngle*0.80)end;local jE=iJ-jg;if not bh and bH>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jE)local jj=q(yawPID:get(),-1,1)S=S+jj elseif aq and an>-1 or bH<minRollVelocity then cC(cL)elseif bh and ar>0.01 then if(iJ<-YawStallAngle or iJ>YawStallAngle)and ar>0.01 then cC(bG)end;if(iK<-PitchStallAngle or iK>PitchStallAngle)and ar>0.01 then jh=q(bQ-iK,bQ-PitchStallAngle*0.80,bQ+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not al then local iP=planet:getAltitude(CustomTarget.position)local jA=math.sqrt(cL:len()^2-(as-iP)^2)local jF=LastMaxBrakeInAtmo;if jF then jF=jF*q(bH/100,0.1,1)*ar else jF=LastMaxBrake end;if ar<0.01 then jF=LastMaxBrake end;local jG=bG:len()-c(bJ)local jH=vec3(core.getWorldAirFrictionAcceleration())local jI=math.sqrt(jH:len()-jH:project_on(g1):len())*av;if bH>100 then a5,a6=b7.computeDistanceAndTime(bH,100,av,0,0,jF+jI)local jJ,jK=b7.computeDistanceAndTime(100,0,av,0,0,jF/2)a5=a5+jJ else a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jF/2)end;StrongBrakes=true;if not al and not Reentry and jA<=a5+bH*iI/2 and(bG:project_on_plane(bI):normalize():dot(cL:project_on_plane(bI):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cf(0)if AltitudeHold then cr()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jG<0.1 or jA<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jA)then if not bN then bX("BrakeLandingEngaged.mp3","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jA end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(al or Reentry)then if CustomTarget~=nil and a9.name==planet.name then local cL=CustomTarget.position-bK;local iP=planet:getAltitude(CustomTarget.position)local jA=math.sqrt(cL:len()^2-(as-iP)^2)local jF=LastMaxBrakeInAtmo;if jF then a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jF/2)StrongBrakes=true;if jA<=a5+bH*iI/2 and bG:project_on_plane(bI):normalize():dot(cL:project_on_plane(bI):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cO()end end;LastDistanceToTarget=jA end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(al or IntoOrbit or Reentry)then if not bx and not IntoOrbit then bv=HoldAltitude;bu=true;if VectorToTarget then bt.VectorToTarget=true end;cq()VectorToTarget=false;br=true end end;if bh and ar>0.01 and an==-1 and bH>minRollVelocity and VectorStatus~="Finalizing Approach"then cC(bG)jh=q(bQ-iK,bQ-PitchStallAngle*0.80,bQ+PitchStallAngle*0.80)end;R=jw;local iA=-1;if BrakeLanding then jh=0;local jL=false;local jM=30;if b8~=nil and b8>0 then local jI=0;local jN=q(ar,0.4,2)local jF=LastMaxBrakeInAtmo*q(bH/100,0.1,1)*jN;local jO=b8*jN+jF+jI-hY;local jP=jF/2+jI-hY;local jQ=bH-math.sqrt(c(jP/2)*20/(0.5*av))*utils.sign(jP)if jQ<0 then jQ=0 end;local jR;if bH>100 then local jS,_=b7.computeDistanceAndTime(bH,100,av,0,0,jF)local jT,_=b7.computeDistanceAndTime(100,0,av,0,0,math.sqrt(jF))jR=jS+jT else jR=b7.computeDistanceAndTime(bH,0,av,0,0,math.sqrt(jF))end;if jR<20 then BrakeIsOn=false else local jU=0;if jQ>100 then local jV,_=b7.computeDistanceAndTime(jQ,100,av,0,0,jO)local jW,_=b7.computeDistanceAndTime(100,0,av,0,0,b8*jN+math.sqrt(jF)+jI-hY)jU=jV+jW else jU,_=b7.computeDistanceAndTime(jQ,0,av,0,0,b8*jN+math.sqrt(jF)+jI-hY)end;jU=(jU+15+bH*iI)*1.1;local jX=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jX then local iP=planet:getAltitude(CustomTarget.position)local jY=as-iP-100;local cL=CustomTarget.position-bK;local jZ=math.sqrt(cL:len()^2-(as-iP)^2)if jZ>100 then jX=false elseif jY<=jU or jU==-1 then BrakeIsOn=true;jL=true else BrakeIsOn=false;jL=true end end;if not jX and CalculateBrakeLandingSpeed then if jU>=jM then BrakeIsOn=true else BrakeIsOn=false end;jL=true end end end;if not bP then cf(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)stablized=true;iA=an;if iA>-1 then bf=autoRollPreference;if bH<1 or bG:normalize():dot(bI)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)ac=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bG:normalize():dot(-g1)<0.999 then BrakeIsOn=true elseif bJ<-brakeLandingRate and not jL then BrakeIsOn=true elseif not jL then BrakeIsOn=false end end;if AutoTakeoff or al then local hl,ed,ec;if AutopilotTargetCoords~=nil then hl,ed,ec=b6:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(e0)return e0.radius+e0.noAtmosphericDensityAltitude end)end;if bN then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cf(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(jh)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not al then if bP and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif al and bH<N then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;cf(0)elseif al then cf(0)BrakeIsOn=true end elseif al and ar==0 and a9~=nil and(hl==nil or hl.name==a9.name)then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;if not bP then cf(0)end;AutopilotAccelerating=true end end;local j_=an>-1;local k0=bQ;if(VectorToTarget or al)and not j_ and bH>minRollVelocity and ar>0.01 then local jB=math.rad(c(bR))k0=bQ*c(math.cos(jB))+iK*math.sin(jB)end;local k1=q(jh-k0,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then k1=q(jh-k0,-85,MaxPitch)elseif ar<0.01 then k1=q(jh-k0,-MaxPitch,MaxPitch)end;if c(bR)<5 or VectorToTarget or BrakeLanding or j_ or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(k1)local ji=pitchPID:get()R=R+ji end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;an=iv()return il end;function script.onStart()local function k2()local function k3(k4)local k5=dbHud_1.hasKey;for cZ,c_ in pairs(k4)do if k5(c_)then local cI=f(dbHud_1.getStringValue(c_))if cI~=nil then _G[c_]=cI;aL=true end end end end;if dbHud_1 then local k5=dbHud_1.hasKey;if not useTheseSettings then k3(c2())coroutine.yield()k3(b)else k3(b)Z="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"af=5;aL=false end;coroutine.yield()if aL then Z="Loaded Saved Variables"K=x(ResolutionX/2,0)L=x(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bm=AtmoSpeedLimit;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]elseif not useTheseSettings then Z="No Saved Variables Found - Exit HUD to save settings"end else Z="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<bC then LastMaxBrakeInAtmo=0 end;LastStartTime=bC;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then Z="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"af=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=av end end;local function k6()local function k7(k8,k9)if k8>k9 then k9=k8 end;if ContainerOptimization>0 then k9=k9-k9*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then k9=k9-k9*FuelTankOptimization*0.05 end;return k9 end;local ka=core.getElementNameById;local kb=fuelX~=0 and fuelY~=0;for cZ in pairs(at)do local type=core.getElementTypeById(at[cZ])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(at[cZ])),'^.*vertical.*$')then bM=true end end;if n(type,'^.*Space Engine$')then bA=true;if n(tostring(core.getElementTagsById(at[cZ])),'^.*vertical.*$')then local kc=core.getElementRotationById(at[cZ])if kc[4]<0 then if o(-kc[4],0.1)==0.5 then by=true end else if o(kc[4],0.1)==0.5 then bz=true end end end end;if type=="Landing Gear"then P=true end;if type=="Dynamic Core Unit"then local kd=h(at[cZ])if kd>10000 then B=128 elseif kd>1000 then B=64 elseif kd>150 then B=32 end end;aR=aR+h(at[cZ])if kb and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local kd=h(at[cZ])local ke=k(at[cZ])local k8=0;local fU=p()if type=="Atmospheric Fuel Tank"then local k9=400;local kf=35.03;if kd>10000 then k9=51200;kf=5480 elseif kd>1300 then k9=6400;kf=988.67 elseif kd>150 then k9=1600;kf=182.67 end;k8=ke-kf;if fuelTankHandlingAtmo>0 then k9=k9+k9*fuelTankHandlingAtmo*0.2 end;k9=k7(k8,k9)aO[#aO+1]={at[cZ],ka(at[cZ]),k9,kf,k8,fU}end;if type=="Rocket Fuel Tank"then local k9=320;local kf=173.42;if kd>65000 then k9=40000;kf=25740 elseif kd>6000 then k9=5120;kf=4720 elseif kd>700 then k9=640;kf=886.72 end;k8=ke-kf;if fuelTankHandlingRocket>0 then k9=k9+k9*fuelTankHandlingRocket*0.1 end;k9=k7(k8,k9)aQ[#aQ+1]={at[cZ],ka(at[cZ]),k9,kf,k8,fU}end;if type=="Space Fuel Tank"then local k9=2400;local kf=182.67;if kd>10000 then k9=76800;kf=5480 elseif kd>1300 then k9=9600;kf=988.67 end;k8=ke-kf;if fuelTankHandlingSpace>0 then k9=k9+k9*fuelTankHandlingSpace*0.2 end;k9=k7(k8,k9)aP[#aP+1]={at[cZ],ka(at[cZ]),k9,kf,k8,fU}end end end;if not bM then VertTakeOff,VertTakeOffEngine=false,false end end;local function kg()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(aq or not aq and as<10000)then for _,c_ in pairs(door)do c_.toggle()end end;if switch then for _,c_ in pairs(switch)do c_.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,c_ in pairs(forcefield)do c_.toggle()end end;if antigrav then bN=antigrav.getState()==1;if bN and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if P then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if an~=-1 or not aq and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;GearExtended=true;if P then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(bg)if aq and an~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function kh(ki,kj,kk,kl,ca,cb,km,kn,ko,kp)local kq={enableName=ki,disableName=kj,width=kk,height=kl,x=ca,y=cb,toggleVar=km,toggleFunction=kn,drawCondition=ko,hovered=false}if kp then table.insert(aI,kq)else table.insert(aH,kq)end;return kq end;local function kr(ks)if not bS then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif ks=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif ks=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif ks=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bT=c2(ks)showHud=false else bT={}showHud=true end end;local function kt()bS=not bS;if bS then aG=aI;Z="Hold SHIFT to see Settings"bU=showHud else aG=aH;Z="Hold SHIFT to see Control Buttons"kr()showHud=bU end end;local function ku(c_)_G[c_]=not _G[c_]if _G[c_]then Z=c_.." set to true"else Z=c_.." set to false"end;if c_=="showHud"then bU=_G[c_]elseif c_=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif c_=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function kv()local kw=50;local kx=340;local ca=500;local cb=aK/2-400;local ky=0;for cZ,c_ in pairs(c2("boolean"))do if type(_G[c_])=="boolean"then kh(c_,c_,kx,kw,ca,cb,function()return _G[c_]end,function()ku(c_)end,function()return true end,true)cb=cb+kw+20;if ky==8 then ca=ca+kx+20;cb=aK/2-400;ky=0 else ky=ky+1 end end end;kh("Control View","Control View",kx,kw,10,aK/2-500,function()return true end,kt,function()return true end,true)kh("View Handling Settings",'Hide Handling Settings',kx,kw,10,aK/2-(500-kw),function()return showHandlingVariables end,function()kr("handling")end,function()return true end,true)kh("View Hud Settings",'Hide Hud Settings',kx,kw,10,aK/2-(500-kw*2),function()return showHudVariables end,function()kr("hud")end,function()return true end,true)kh("View Physics Settings",'Hide Physics Settings',kx,kw,10,aK/2-(500-kw*3),function()return showPhysicsVariables end,function()kr("physics")end,function()return true end,true)end;local function kz()local function kA()if dbHud_1 then local position=bK;local fN=planet.name..". "..#SavedLocations;if radar_1 then local dJ,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dJ~=nil and dJ~=""then fN=fN.." "..radar_1.getConstructName(dJ)end end;local cz={}cz={position=position,name=fN,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cz;table.insert(b1[0],cz)bb.UpdateAtlasLocationsList()Z="Location saved as "..fN else Z="Databank must be installed to save locations"end end;local function kB()TurnBurn=not TurnBurn end;local function kC(kD)if kD==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;X=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kE()kC(1)end;local function kF()local cy=-1;cy=bb.findAtlasIndex(b1[0])if cy>-1 then table.remove(b1[0],cy)end;cy=-1;cy=bb.findAtlasIndex(SavedLocations)if cy~=-1 then Z=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cy)end;bb.adjustAutopilotTargetIndex()bb.UpdateAtlasLocationsList()end;local function kG()local fN=AutopilotTargetName;if fN==nil then local hk=cm((bK-CustomTarget.position):len())fN=CustomTarget.name.." "..hk end;if fN==nil then fN="None"end;return"Engage Autopilot: "..fN end;local function kH()local fN=AutopilotTargetName;if fN==nil then fN=CustomTarget.name end;if fN==nil then fN="None"end;return"Disable Autopilot: "..fN end;local function kI()if safeMass>0 then Z="Safe Mass set to "..x(av,2).." kg"else Z="Intruder Detection reset\nSafe Mass set to "..x(av,2).." kg"af=5;bL=0 end;safeMass=av end;local kw=50;local kx=260;local kJ=kh("Enable Brake Toggle","Disable Brake Toggle",kx,kw,aJ/2-kx/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then Z="Brakes in Toggle Mode"else Z="Brakes in Default Mode"end end)kh("Align Prograde","Disable Prograde",kx,kw,aJ/2-kx/2-50-kJ.width,aK/2-kw+380,function()return ProgradeIsOn end,kE)kh("Align Retrograde","Disable Retrograde",kx,kw,aJ/2-kx/2+kJ.width+50,aK/2-kw+380,function()return RetrogradeIsOn end,kC,function()return ar==0 end)local kK=kh(kG,kH,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,ct)kh("Save Position","Save Position",200,kK.height,kK.x+kK.width+30,kK.y,function()return false end,kA,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)kh("Update Position","Update Position",200,kK.height,kK.x+kK.width+30,kK.y,function()return false end,cw,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kh("Clear Position","Clear Position",200,kK.height,kK.x-200-30,kK.y,function()return true end,kF,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kw=60;kx=300;local ca=10;local cb=aK/2-500;kh("Show Help","Hide Help",kx,kw,ca,cb,function()return showHelp end,function()showHelp=not showHelp end)cb=cb+kw+20;kh("View Settings","View Settings",kx,kw,ca,cb,function()return true end,kt)local cb=aK/2-300;kh("Enable Turn and Burn","Disable Turn and Burn",kx,kw,ca,cb,function()return TurnBurn end,kB)kh("Horizontal Takeoff Mode","Vertical Takeoff Mode",kx,kw,ca+kx+20,cb,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then Z="Vertical Takeoff Mode"else Z="Horizontal Takeoff Mode"end end,function()return bM end)cb=cb+kw+20;kh("Show Orbit Display","Hide Orbit Display",kx,kw,ca,cb,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then Z="Orbit Display Enabled"else Z="Orbit Display Disabled"end end)kh("Engage Orbiting","Cancel Orbiting",kx,kw,ca+kx+20,cb,function()return IntoOrbit end,cq,function()return ar==0 and unit.getClosestPlanetInfluence()>0 end)cb=cb+kw+20;kh("Glide Re-Entry","Cancel Glide Re-Entry",kx,kw,ca,cb,function()return Reentry end,function()ak=true;kE()end,function()return planet.hasAtmosphere and not aq end)kh("Parachute Re-Entry","Cancel Parachute Re-Entry",kx,kw,ca+kx+20,cb,function()return Reentry end,cO,function()return planet.hasAtmosphere and not aq end)cb=cb+kw+20;kh("Engage Follow Mode","Disable Follow Mode",kx,kw,ca,cb,function()return X end,cs,function()return l()==1 end)kh("Enable Repair Arrows","Disable Repair Arrows",kx,kw,ca+kx+20,cb,function()return aS end,function()aS=not aS;if aS then Z="Repair Arrows Enabled"else Z="Repair Arrows Diabled"end end,function()return l()==1 end)cb=cb+kw+20;if not ExternalAGG then kh("Enable AGG","Disable AGG",kx,kw,ca,cb,function()return bN end,cP,function()return antigrav~=nil end)end;kh("Reset Intruder Alert","Set Safe Mass",kx,kw,ca+kx+20,cb,function()return safeMass>0 end,kI,function()return IntruderAlertSystem end)cb=cb+kw+20;kh(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,kx*2,kw,ca,cb,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;Z="IPH Mode: "..iphCondition end)cb=cb+kw+20;kh(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,kx*2,kw,ca,cb,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;Z="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})k2()coroutine.yield()k6()coroutine.yield()bc=ik()kg()kv()kz()aG=aH;coroutine.yield()b1=d0()b5=d1()b6=b5(d0())b7=eq()b9=eV()ba=fh()bb=ib()bc=ik()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end;bX("StartupComplete.mp3","SU")end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,c_ in pairs(door)do c_.toggle()end end;if switch then for _,c_ in pairs(switch)do c_.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,c_ in pairs(forcefield)do c_.toggle()end end;safeMass=av;cV()if button then button.activate()end;if SetWaypointOnExit then bc.showWayPoint(planet,bK)end;bX("ShutdownComplete.mp3","SU")end;function script.onTick(kL)if kL=="tenthSecond"then local function kM()local kN=system.createData;local kO=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=kO(panelInterplanetary,"value")interplanetaryHeaderText=kN('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=kO(panelInterplanetary,"value")widgetDistanceText=kN('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=kO(panelInterplanetary,"value")widgetTravelTimeText=kN('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=kO(panelInterplanetary,"value")widgetMaxMassText=kN('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=kO(panelInterplanetary,"value")widgetTargetOrbitText=kN('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=kO(panelInterplanetary,"value")widgetCurBrakeDistanceText=kN('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=kO(panelInterplanetary,"value")widgetCurBrakeTimeText=kN('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=kO(panelInterplanetary,"value")widgetMaxBrakeDistanceText=kN('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=kO(panelInterplanetary,"value")widgetMaxBrakeTimeText=kN('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=kO(panelInterplanetary,"value")widgetTrajectoryAltitudeText=kN('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function kP()s(panelInterplanetary)panelInterplanetary=nil end;local function kQ()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a9.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local eT=bH;local jk=unit.getThrottle()/100;if AtmoSpeedAssist then jk=F end;local kR,kS=b7.computeDistanceAndTime(bH,MaxGameVelocity,av,a:maxForceForward()*jk,warmup,0)local a5,a6;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,kT;if not TurnBurn and eT>0 then _,kT=bc.GetAutopilotBrakeDistanceAndTime(eT)else _,kT=bc.GetAutopilotTBBrakeDistanceAndTime(eT)end;local kU=0;local kV=0;if AutopilotCruising or not Autopilot and eT>5 then kV=b7.computeTravelTime(eT,0,AutopilotDistance)elseif a5+kR<AutopilotDistance then kU=AutopilotDistance-(a5+kR)kV=b7.computeTravelTime(8333.0556,0,kU)else local kW=(AutopilotDistance-a5)/kR;kR=AutopilotDistance-a5;kS=kS*kW end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return kV elseif AutopilotBraking then return kT elseif AutopilotCruising then return kV+kT else return kS+a6+kV end end;local function kX(hY,kY)if hY==nil then hY=core.g()end;hY=x(hY,5)if kY~=nil and kY or(aN==nil or aN~=hY)then local eW=core.getVelocity()local eT=vec3(eW):len()local kZ=f(unit.getData()).maxBrake;if kZ~=nil and kZ>0 and aq then kZ=kZ/q(eT/100,0.1,1)kZ=kZ/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+kZ)/2 else LastMaxBrakeInAtmo=kZ end end end;if kZ~=nil and kZ>0 then LastMaxBrake=kZ end;aN=hY end end;kX(nil,true)if ar>0 and not WasInAtmo then if not bP and AtmoSpeedAssist and(AltitudeHold or Reentry)then cf(1)J=false end end;if bO~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bO then ci(bO,TRUE)else bO=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then kM()end;if AutopilotTargetName~=nil then local k_=CustomTarget~=nil;local l0=LastMaxBrakeInAtmo/a9:getGravity(a9.center+vec3(0,0,1)*a9.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=kQ()if k_ and not Autopilot then ag=(bK-CustomTarget.position):len()else ag=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hk=cm(ag)t(widgetDistanceText,'{"label": "distance", "value": "'..hk..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cQ(travelTime)..'", "unit":""}')hk=cm(a5)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hk..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cQ(a6)..'", "unit":""}')hk=cm(a7)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hk..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cQ(a8)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",l0/1000)..'", "unit":" Tons"}')hk=cm(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..hk..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if ar==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else kP()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;if bL>0 then bX("IntruderAlert.mp3","IA",1)end elseif kL=="oneSecond"then local function l1(fx)local l2=0;aE=""local l3=aR;local l4=0;local l5=0;local l6=0;local fW=0;local fX=""local l7=core.getElementHitPointsById;for cZ in pairs(at)do local kd=0;local l8=0;l8=h(at[cZ])kd=l7(at[cZ])l4=l4+kd;if kd<l8 then if kd==0 then l6=l6+1 else l5=l5+1 end;if aS and#aB==0 then position=vec3(core.getElementPositionById(at[cZ]))local ca=position.x-B;local cb=position.y-B;local l9=position.z-B;table.insert(aB,core.spawnArrowSticker(ca,cb,l9+1,"down"))table.insert(aB,core.spawnArrowSticker(ca,cb,l9+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(ca+1,cb,l9,"north"))table.insert(aB,core.spawnArrowSticker(ca+1,cb,l9,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(ca-1,cb,l9,"south"))table.insert(aB,core.spawnArrowSticker(ca-1,cb,l9,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(ca,cb-1,l9,"east"))table.insert(aB,core.spawnArrowSticker(ca,cb-1,l9,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(ca,cb+1,l9,"west"))table.insert(aB,core.spawnArrowSticker(ca,cb+1,l9,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,at[cZ])end elseif aS and#aB>0 and aB[11]==at[cZ]then for fP in pairs(aB)do core.deleteSticker(aB[fP])end;aB={}end end;l2=d(l4/l3*100)if l2<100 then fx[#fx+1]=c9(0,0,"","pbright txt")fW=d(l2*2.55)fX=e("rgb(%d,%d,%d)",255-fW,fW,0)if l2<100 then fx[#fx+1]=c9("50%",1035,"Elemental Integrity: "..l2 .."%","txtbig txtmid","fill:"..fX)if l6>0 then fx[#fx+1]=c9("50%",1055,"Disabled Modules: "..l6 .." Damaged Modules: "..l5,"txtbig txtmid","fill:"..fX)elseif l5>0 then fx[#fx+1]=c9("50%",1055,"Damaged Modules: "..l5,"txtbig txtmid","fill:"..fX)end end end end;local function la()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function lb()local fU=p()local h8=bH;local lc=fU-au;if h8>1.38889 then h8=h8/1000;local ld=h8*(fU-au)TotalDistanceTravelled=TotalDistanceTravelled+ld;aa=aa+ld end;ab=ab+lc;TotalFlightTime=TotalFlightTime+lc;au=fU end;local function le()if safeMass>0 then if av>safeMass+50 then bL=d(av-safeMass)safeMass=-1 elseif av<safeMass then safeMass=av end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;ao=false;if IntruderAlertSystem then le()end;lb()ba.UpdateRadar()la()local fx={}ba.ExtraData(fx)if ShowOdometer then fx=ba.DrawOdometer(fx,aa,TotalDistanceTravelled,ab)end;if ShouldCheckDamage then l1(fx)end;ai=table.concat(fx,"")collectgarbage("collect")elseif kL=="fiveSecond"then ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local cI=f(dbHud_1.getStringValue("SavedLocations"))if cI~=nil then _G["SavedLocations"]=cI;local cy=-1;local cz;for cZ,c_ in pairs(SavedLocations)do if c_.name and c_.name=="SatNav Location"then cy=cZ;break end end;if cy~=-1 then cz=SavedLocations[cy]cy=-1;for cZ,c_ in pairs(b1[0])do if c_.name and c_.name=="SatNav Location"then cy=cZ;break end end;if cy>-1 then b1[0][cy]=cz end;bb.UpdateAtlasLocationsList()Z=cz.name.." position updated"end end;for i=1,#bV do if bV[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bV[i].name)bb.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif kL=="msgTick"then local fx={}ba.DisplayMessage(fx,"empty")Z="empty"unit.stopTimer("msgTick")af=3 elseif kL=="animateTick"then be=true;bd=false;ad=0;ae=0;unit.stopTimer("animateTick")elseif kL=="hudTick"then local function lf(fx)local lg=d(q(ag/(aJ/4)*255,0,255))fx[#fx+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ad,ae,d(C+0.5)+lg,d(E+0.5)-lg,d(D+0.5)-lg)end;local function lh()for _,c_ in pairs(aG)do if c_.hovered then if not c_.drawCondition or c_.drawCondition()then c_.toggleFunction()end;c_.hovered=false end end end;local function li()local function lj(lk,ll,ca,cb,kk,kl)if lk>ca and lk<ca+kk and ll>cb and ll<cb+kl then return true else return false end end;local ca=ad+aJ/2;local cb=ae+aK/2;for _,c_ in pairs(aG)do c_.hovered=lj(ca,cb,c_.x,c_.y,c_.width,c_.height)end end;local function lm(fx)local function ln(fx,lo,hover,ca,cb,eM,lp,lq,lr,ls,lt)if type(ls)=="function"then ls=ls()end;if type(lt)=="function"then lt=lt()end;fx[#fx+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",ca,cb,eM,lp)if lo then fx[#fx+1]=e("%s'",lq)else fx[#fx+1]=lr end;if hover then fx[#fx+1]=" style='stroke:white; stroke-width:2'"else fx[#fx+1]=" style='stroke:black; stroke-width:1'"end;fx[#fx+1]="></rect>"fx[#fx+1]=e("<text x='%f' y='%f' font-size='24' fill='",ca+eM/2,cb+lp/2+5)if lo then fx[#fx+1]="black"else fx[#fx+1]="white"end;fx[#fx+1]="' text-anchor='middle' font-family='Montserrat'>"if lo then fx[#fx+1]=e("%s</text>",ls)else fx[#fx+1]=e("%s</text>",lt)end end;local lu="rgb(50,50,50)'"local lv="rgb(210,200,200)"local lw=ln;for _,c_ in pairs(aG)do local kj=c_.disableName;local ki=c_.enableName;if type(kj)=="function"then kj=kj()end;if type(ki)=="function"then ki=ki()end;if not c_.drawCondition or c_.drawCondition()then lw(fx,c_.toggleVar(),c_.hovered,c_.x,c_.y,c_.width,c_.height,lv,lu,kj,ki)end end end;local fx={}ba.HUDPrologue(fx)if showHud then ba.UpdateHud(fx)else if AlwaysVSpd then ba.DrawVerticalSpeed(fx,as)end;ba.DisplayOrbitScreen(fx)ba.DrawWarnings(fx)end;if bS and bT~={}then ba.DrawSettings(fx)end;ba.HUDEpilogue(fx)fx[#fx+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if Z~="empty"then ba.DisplayMessage(fx,Z)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then ba.DrawDeadZone(fx)end end;if w()==0 then if l()==1 and Y then li()lm(fx)if not bd and not be then local lx=table.concat(fx,"")fx={}fx[#fx+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fx[#fx+1]=lx;fx[#fx+1]="</body>"bd=true;fx[#fx+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fx,"")system.setScreen(content)elseif be then local lx=table.concat(fx,"")fx={}fx[#fx+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fx[#fx+1]=lx;fx[#fx+1]="</body>"end;if not bd then fx[#fx+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end else lh()end else if not Y and l()==0 then lh()if ag>DeadZone then if DisplayDeadZone then lf(fx)end end else li()lm(fx)end;fx[#fx+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end;fx[#fx+1]=[[</svg></body>]]content=table.concat(fx,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif kL=="apTick"then bc.APTick()end end;function script.onFlush()local function ly(lz,jr)local lA=vec3()local lB=vec3()if lz==axisCommandId.longitudinal then lA=vec3(core.getConstructOrientationForward())lB=bE elseif lz==axisCommandId.vertical then lA=vec3(core.getConstructOrientationUp())lB=bD elseif lz==axisCommandId.lateral then lA=vec3(core.getConstructOrientationRight())lB=bF else return vec3()end;local lC=vec3(core.getWorldGravity())local lD=lC:dot(lB)local lE=vec3(core.getWorldAirFrictionAcceleration())local lF=lE:dot(lB)local lG=vec3(core.getVelocity())local lH=lG:dot(lA)local lI=jr*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lI-lH)local lJ=targetSpeedPID2:get()local lK=(lJ-lF-lD)*lB;return lK end;local function lL(lz,jr)local lA=vec3()local lB=vec3()if lz==axisCommandId.longitudinal then lA=vec3(core.getConstructOrientationForward())lB=bE elseif lz==axisCommandId.vertical then lA=vec3(core.getConstructOrientationUp())lB=bD elseif lz==axisCommandId.lateral then lA=vec3(core.getConstructOrientationRight())lB=bF else return vec3()end;local lC=vec3(core.getWorldGravity())local lD=lC:dot(lB)local lE=vec3(core.getWorldAirFrictionAcceleration())local lF=lE:dot(lB)local lG=vec3(core.getVelocity())local lH=lG:dot(lA)local lI=jr*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lI-lH)local lJ=targetSpeedPID:get()local lK=(lJ-lF-lD)*lB;return lK end;local function lM(lN,g0,ig)local lO=lN:cross(ig):normalize_inplace()local gM=math.acos(q(lO:dot(-g0),-1,1))*constants.rad2deg;if lO:cross(-g0):dot(ig)<0 then gM=-gM end;return gM end;if antigrav and not ExternalAGG then if not bN and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bP=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bP and J then cf(0)J=false elseif not bP and not J then F=0;J=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lP=q(Q+R+system.getControlDeviceForwardInput(),-1,1)local lQ=q(T+W+system.getControlDeviceYawInput(),-1,1)local lR=q(U+S-system.getControlDeviceLeftRightInput(),-1,1)local lS=V;bI=vec3(core.getWorldVertical())if bI==nil or bI:len()==0 then bI=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bD=vec3(core.getConstructWorldOrientationUp())bE=vec3(core.getConstructWorldOrientationForward())bF=vec3(core.getConstructWorldOrientationRight())bG=vec3(core.getWorldVelocity())av=core.getConstructMass()bH=vec3(bG):len()bJ=-bI:dot(bG)bR=getRoll(bI,bE,bF)local lT=bR/180*math.pi;local lU=math.cos(lT)local lV=math.sin(lT)bQ=lM(bI,bE,bF*lU+bD*lV)local lW=bG:normalize()local lX=c(bR)local lY=utils.sign(bR)local lZ=vec3(core.getWorldAngularVelocity())local l_=lP*pitchSpeedFactor*bF+lQ*rollSpeedFactor*bE+lR*yawSpeedFactor*bD;if bf==true and bI:len()>0.01 then local m0=c(bj-bR)if((ProgradeIsOn or Reentry or ak or AltitudeHold or IntoOrbit)and m0>0 or ar>0.0 and m0<autoRollRollThreshold and autoRollPreference)and lQ==0 and c(bQ)<85 then local m1=bj;local m2=autoRollFactor;if ar==0 then m2=m2/4;bj=0;m1=0 end;if rollPID==nil then rollPID=pid.new(m2*0.01,0,m2*0.1)end;rollPID:inject(m1-bR)local m3=rollPID:get()l_=l_+m3*bE end end;if bI:len()>0.01 and ar>0.0 then local m4=20.0;if turnAssist==true and lX>m4 and lP==0 and lR==0 then local m5=turnAssistFactor*0.1;local m6=turnAssistFactor*0.025;local m7=(lX-m4)/(180-m4)*180;local m8=0;if m7<90 then m8=m7/90 elseif m7<180 then m8=(180-m7)/90 end;m8=m8*m8;local m9=-lY*m6*(1.0-m8)local ma=m5*m8;l_=l_+ma*bF+m9*bD end end;local mb=1;local mc=0;local md=1;if system.getMouseWheel()>0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local me=F;F=x(q(F+speedChangeLarge/100,-1,1),2)if F>=0 and me<0 then F=0;aw=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local me=F;F=x(q(F-speedChangeLarge/100,-1,1),2)if F<=0 and me>0 then F=0;aw=false end end else aw=true end;G=0;if aq and AtmoSpeedAssist and bP then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bm/3.6-bG:dot(bE))local mf=throttlePID:get()I=q(mf,-1,1)if I<F and ar>0.005 then H=true;r:setThrottleCommand(axisCommandId.longitudinal,q(I,0.01,1))else H=false;r:setThrottleCommand(axisCommandId.longitudinal,F)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-bm/3.6)local mg=q(brakePID:get(),0,1)if ar>0 and bJ<-80 or ar>0.005 then G=mg end;if G>0 then if H and I==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else I=q(I,0.01,1)end;local mh=''local mi=vec3()local mj=ly(axisCommandId.vertical,ac*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",mj,mc)local mk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mk=mk..ExtraLongitudeTags end;local ml=r:getAxisCommandType(axisCommandId.longitudinal)local mm=r:composeAxisAccelerationFromThrottle(mk,axisCommandId.longitudinal)local mn=lL(axisCommandId.lateral,LeftAmount*1000)mh=mh..' , '.."lateral airfoil , lateral ground "mi=mi+mn;if mi:len()>constants.epsilon then a:setEngineForceCommand(mh,mi,mc,'','','',md)end;a:setEngineForceCommand(mk,mm,mb)local mo='thrust analog vertical fueled 'local mp='thrust analog lateral fueled 'if ExtraLateralTags~="none"then mp=mp..ExtraLateralTags end;if ExtraVerticalTags~="none"then mo=mo..ExtraVerticalTags end;if ac~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(mo,mj,mb)else a:setEngineForceCommand(mo,vec3(),mb)end;if LeftAmount~=0 then a:setEngineForceCommand(mp,mn,mb)else a:setEngineForceCommand(mp,vec3(),mb)end;if lS==0 then lS=G end;local mq=-lS*(brakeSpeedFactor*bG+brakeFlatFactor*lW)a:setEngineForceCommand('brake',mq)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,F)end;local jr=unit.getAxisCommandValue(0)if not bP then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-jr/3.6)local mg=q(brakePID:get(),0,1)lS=q(lS+mg,0,1)end;local mq=-lS*(brakeSpeedFactor*bG+brakeFlatFactor*lW)a:setEngineForceCommand('brake',mq)local mh=''local mi=vec3()local mr=false;local mk='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mk=mk..ExtraLongitudeTags end;local ml=r:getAxisCommandType(axisCommandId.longitudinal)if ml==axisCommandType.byThrottle then local mm=r:composeAxisAccelerationFromThrottle(mk,axisCommandId.longitudinal)a:setEngineForceCommand(mk,mm,mb)elseif ml==axisCommandType.byTargetSpeed then local mm=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)mh=mh..' , '..mk;mi=mi+mm;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then mr=true end end;local mp='thrust analog lateral 'if ExtraLateralTags~="none"then mp=mp..ExtraLateralTags end;local ms=r:getAxisCommandType(axisCommandId.lateral)if ms==axisCommandType.byThrottle then local mt=r:composeAxisAccelerationFromThrottle(mp,axisCommandId.lateral)a:setEngineForceCommand(mp,mt,mb)elseif ms==axisCommandType.byTargetSpeed then local mn=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)mh=mh..' , '..mp;mi=mi+mn end;local mo='thrust analog vertical 'if ExtraVerticalTags~="none"then mo=mo..ExtraVerticalTags end;local mu=r:getAxisCommandType(axisCommandId.vertical)if mu==axisCommandType.byThrottle then local mj=r:composeAxisAccelerationFromThrottle(mo,axisCommandId.vertical)if ac~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mo,mj,mb,'airfoil','ground','',md)else a:setEngineForceCommand(mo,vec3(),mb)a:setEngineForceCommand('airfoil vertical',mj,mb,'airfoil','','',md)a:setEngineForceCommand('ground vertical',mj,mb,'ground','','',md)end elseif mu==axisCommandType.byTargetSpeed then if ac<0 then a:setEngineForceCommand('hover',vec3(),mb)end;local mv=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)mh=mh..' , '..mo;mi=mi+mv end;if mi:len()>constants.epsilon then if V~=0 or mr or c(lW:dot(bE))<0.8 then mh=mh..', brake'end;a:setEngineForceCommand(mh,mi,mc,'','','',md)end end;local mw=torqueFactor*(l_-lZ)local mx=vec3(core.getWorldAirFrictionAngularAcceleration())mw=mw-mx;a:setEngineTorqueCommand('torque',mw,mb,'airfoil','','',md)a:setBoosterCommand('rocket_engine')if a4 and not VanillaRockets then local eT=vec3(core.getVelocity()):len()local my=0.15;if not bP then local mz=r:getTargetSpeed(axisCommandId.longitudinal)if eT*3.6>mz*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eT*3.6<mz*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jk=unit.getThrottle()if AtmoSpeedAssist then jk=F*100 end;local jr=jk/100;if j==0 then jr=jr*MaxGameVelocity;if eT>=jr*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eT<jr*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jx=d(bm)jr=jr*jx/3.6;if eT>=jr*(1-my)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eT<jr*(1-my)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cI=coroutine.resume(beginSetup)if cI then SetupComplete=true end else a:update()if not bd and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(mA)local A=1;local function mB(mC)if mC then A=-1 end;if not ExternalAGG and bN then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a1;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+A*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a0;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a0 end else r:updateTargetGroundAltitudeFromActionStart(A*1.0)end end;local function mD(mC)if mC then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,A*speedChangeLarge)end else if mC then A=1 else A=nil end;bb.adjustAutopilotTargetIndex(A)end end;if mA=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cf(0)if vBooster or hover then if aq and an==-1 then bX("BrakeLandingEngaged.mp3","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else bX("LandingGearDeployed.mp3","BL")if aq then BrakeIsOn=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)else a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end end;if P and not BrakeLanding and not(vBooster or hover)then bX("LandingGearDeployed.mp3","BL")a.control.extendLandingGears()end else if P then bX("LandingGearRetracted.mp3","BL")a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif mA=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mA=="forward"then Q=Q-1 elseif mA=="backward"then Q=Q+1 elseif mA=="left"then T=T-1 elseif mA=="right"then T=T+1 elseif mA=="yawright"then U=U-1 elseif mA=="yawleft"then U=U+1 elseif mA=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mA=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mA=="up"then ac=ac+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mA=="down"then ac=ac-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mA=="groundaltitudeup"then mB()elseif mA=="groundaltitudedown"then mB(true)elseif mA=="option1"then bb.adjustAutopilotTargetIndex()toggleView=false elseif mA=="option2"then bb.adjustAutopilotTargetIndex(1)toggleView=false elseif mA=="option3"then local function mE()aF=not aF;if not aF then bX("VanillaDisplay.mp3","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else bX("HUDDisplay.mp3","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mE()toggleView=false elseif mA=="option4"then ct()toggleView=false elseif mA=="option5"then local function mF()if LockPitch==nil then bX("LockedPitchEngaged.mp3","LP")LockPitch=bQ;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bX("LockedPitchSecured.mp3","LP")LockPitch=nil end end;mF()toggleView=false elseif mA=="option6"then cr()toggleView=false elseif mA=="option7"then sounds=not sounds;if sounds then Z="All HUD sounds enabled"else Z="All HUD sounds disabled"end;toggleView=false elseif mA=="option8"then stablized=not stablized;if not stablized then Z="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()bX("GroundStabilizationOff.mp3","GS")else Z="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bX("GroundStabilizationOn.mp3","GS")end;toggleView=false elseif mA=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then bX("GyroActivated.mp3","GA")else bX("GyroDeactivated.mp3","GA")end end;toggleView=false elseif mA=="lshift"then if w()==1 then Y=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then Y=true;be=false;bd=false end elseif mA=="brake"then if BrakeToggleStatus then cB()elseif not BrakeIsOn then cB()else BrakeIsOn=true end elseif mA=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif mA=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a4 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a4=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a4=false end elseif mA=="stopengines"then local function mG()if ao then bX("ClearAll.mp3","CA")ao=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;X=false;M=false;ak=false;al=false;O=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else ao=true end end;r:resetCommand(axisCommandId.longitudinal)mG()F=0 elseif mA=="speedup"then mD()elseif mA=="speeddown"then mD(true)elseif mA=="antigravity"and not ExternalAGG then if antigrav~=nil then cP()end end end;function script.onActionStop(mA)local function mH()if not ExternalAGG and bN then a3=a1 end;if AltitudeHold or VertTakeOff or IntoOrbit then a2=a0 end end;if mA=="forward"then Q=0 elseif mA=="backward"then Q=0 elseif mA=="left"then T=0 elseif mA=="right"then T=0 elseif mA=="yawright"then U=0 elseif mA=="yawleft"then U=0 elseif mA=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mA=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mA=="up"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif mA=="down"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif mA=="groundaltitudeup"then mH()toggleView=false elseif mA=="groundaltitudedown"then mH()toggleView=false elseif mA=="lshift"then if w()==1 then Y=false;ad=0;ae=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then Y=false;be=false;bd=false end elseif mA=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cB()else BrakeIsOn=false end end elseif mA=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(mA)local A=1;local function mI(mC)if mC then A=-1 end;if not ExternalAGG and bN then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+A*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a2;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a2 end;a2=a2*1.05 else r:updateTargetGroundAltitudeFromActionLoop(A*1.0)end end;local function mJ(mC)if mC then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,A*speedChangeSmall)end end end;if mA=="groundaltitudeup"then mI()elseif mA=="groundaltitudedown"then mI(true)elseif mA=="speedup"then mJ()elseif mA=="speeddown"then mJ(true)end end;function script.onInputText(cc)local function mK()for cZ,c_ in pairs(c2())do dbHud_1.setStringValue(c_,g(nil))end;for cZ,c_ in pairs(b)do if c_~="SavedLocations"then dbHud_1.setStringValue(c_,g(nil))end end;Z="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"af=5;aL=false end;local function mL(mM,planet,eX,gI)local function mN(eX)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local de='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dr,ds,dz,dA,dB=n(eX,de)if dr=="0"and ds=="0"then return vec3(tonumber(dz),tonumber(dA),tonumber(dB))end;dA=math.rad(dA)dz=math.rad(dz)local planet=b1[tonumber(dr)][tonumber(ds)]local en=math.cos(dz)local mO=vec3(en*math.cos(dA),en*math.sin(dA),math.sin(dz))return planet.center+(planet.radius+dB)*mO end;if dbHud_1 or gI then local cz={}local position=mN(eX)if planet.name=="Space"then cz={position=position,name=mM,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cz={position=position,name=mM,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;if not gI then SavedLocations[#SavedLocations+1]=cz else for cZ,c_ in pairs(b1[0])do if c_.name and mM==c_.name then table.remove(b1[0],cZ)end end end;table.insert(b1[0],cz)bb.UpdateAtlasLocationsList()else Z="Databank must be installed to save permanent locations"end end;local i;local mP,mQ=nil,nil;local mR="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cc," ")mP=cc;if i~=nil then mP=string.sub(cc,0,i-1)mQ=string.sub(cc,i+1)end;if mP=="/help"or mP=="/commands"then for i3 in string.gmatch(mR,"([^\n]+)")do system.print(i3)end;return elseif mP=="/setname"then if mQ==nil or mQ==""then Z="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cw(mQ)else Z="Select a saved target to rename first"end elseif mP=="/addlocation"or string.find(cc,"::pos")~=nil then local gI=false;local mM="0-Temp"if mQ==nil or mQ==""then mQ=mP;gI=true end;i=string.find(mQ,"::")if not gI then mM=string.sub(mQ,1,i-2)end;local eX=string.sub(mQ,i)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local de='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dr,ds,dz,dA,dB=n(eX,de)local planet=b1[tonumber(dr)][tonumber(ds)]mL(mM,planet,eX,gI)Z="Added "..mM.." to saved locations,\nplanet "..planet.name.." at "..eX;af=5 elseif mP=="/agg"then if mQ==nil or mQ==""then Z="Usage: /agg targetheight"return end;mQ=tonumber(mQ)if mQ<1000 then mQ=1000 end;AntigravTargetAltitude=mQ;Z="AGG Target Height set to "..mQ elseif mP=="/G"then if mQ==nil or mQ==""then Z="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if mQ=="dump"then for cZ,c_ in pairs(c2())do if type(_G[c_])=="boolean"then if _G[c_]==true then system.print(c_.." true")else system.print(c_.." false")end elseif _G[c_]==nil then system.print(c_.." nil")else system.print(c_.." ".._G[c_])end end;return end;i=string.find(mQ," ")local mS=string.sub(mQ,0,i-1)local mT=string.sub(mQ,i+1)for cZ,c_ in pairs(c2())do if c_==mS then Z="Variable "..mS.." changed to "..mT;local mU=type(_G[c_])if mU=="number"then mT=tonumber(mT)elseif mU=="boolean"then if string.lower(mT)=="true"then mT=true else mT=false end end;_G[c_]=mT;return end end;Z="No such global variable: "..mS elseif mP=="/copydatabank"then if dbHud_2 then cV(true)else Z="Spare Databank required to copy databank"end elseif mP=="/iphWP"then if AutopilotTargetIndex>0 then system.print(bc.showWayPoint(a9,AutopilotTargetCoords,true))Z="::pos waypoint shown in lua chat"else Z="No target selected in IPH"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
