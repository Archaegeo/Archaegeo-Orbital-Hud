name: ArchHud - Archaegeo v1.149 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = true --export: (Default: true)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        minRollVelocity = 150 --export: (Default: 150)    
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.149;SetWaypointOnExit=true;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=core.getConstructMass;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local tostring=tostring;local p=utils.round;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local function y(z,A)local B=10^(A or 0)return d(z*B+0.5)/B end;local C=16;local D=SafeR;local E=SafeB;local F=SafeG;local G=0;local H=0;local I=false;local J=0;local K=false;local L=y(ResolutionX/2,0)local M=y(ResolutionY/2,0)local N=false;local O=55;local P=false;local Q=false;local R=0;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=false;local Z=false;local a0="empty"local a1=5;local a2=5;local a3=a1;local a4=a2;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=false;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=false;local ar=""local as=j()>0;local at=j()local au=core.getAltitude()local av=core.getElementIdList()local aw=q()local ax=nil;local ay=false;local az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]local aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH={}local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=d(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=0;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=nil;local be=false;local bf=false;local bg=autoRollPreference;local bh=LandingGearGroundHeight;local bi=false;local bj=q()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=q()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=-bJ:dot(bH)local bL=vec3(core.getConstructWorldPos())local bM=false;local bN=false;local bO=nil;local bP=true;local bQ=0;local bR=0;local bS=false;local bT={}local bU=showHud;local bV={}local function bW(bX,bY)for i=1,#bY do bX[#bX+1]=bY[i]end;return bX end;local function bZ(b_)local c0={}local c1={"userControlScheme","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit"}local c2={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","TargetOrbitRadius","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c3={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY"}local c4={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not b_ then bW(c0,c1)bW(c0,c2)bW(c0,c3)bW(c0,c4)return c0 elseif b_=="boolean"then return c1 elseif b_=="handling"then return c2 elseif b_=="hud"then return c3 elseif b_=="physics"then return c4 end end;local function c5(c6,c7,c8,c9,ca)if c9==nil then c9=""end;if ca==nil then ca=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],c9,c6,c7,ca,c8)end;local function cb(cc,cd)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not cd then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,cc)G=r(y(cc*100,0)/100,-1,1)end;local function ce(cc,cd)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cd then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,cc)bO=cc end;local function cf(cg,ch)if cg==0 then return c(ch)<1e-09 end;if ch==0 then return c(cg)<1e-09 end;return c(cg-ch)<math.max(c(cg),c(ch))*epsilon end;local function ci(ai,cj)local ck=ai>100000;local cl,cm=""if cj==nil then cj=1 end;if ck then cl,cm=y(ai/1000/200,cj),"SU"elseif ai<1000 then cl,cm=y(ai,cj),"M"else cl,cm=y(ai/1000,cj),"KM"end;return cl,cm end;local function cn()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;bg=true;ae=0;if as and ap==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ce(d(bn))end else VertTakeOff=true;AltitudeHold=false;by=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function co()by=false;bq=nil;br=nil;bC=0;if at==0 then if IntoOrbit then IntoOrbit=false;bs=false;bx=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bg=true;if bx==nil then bx=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a0="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bs=false;bx=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false end end;local function cp()if bD-bl<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;bw=HoldAltitude;bv=true;if not IntoOrbit then co()end;bs=true end end;bl=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bl=bD end;if unit.getClosestPlanetInfluence()>0 and at==0 then bw=au;bv=true;bs=true;co()if IntoOrbit then bl=bD else bl=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Y=false;bg=true;LockPitch=nil;by=false;if ap==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if VertTakeOff then cn()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bM then cn()end end;if an then HoldAltitude=100000 end else if IntoOrbit then co()end;if VertTakeOff then cn()end;bg=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bl=0 end end;local function cq()if m()==1 then Y=not Y;if Y then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bg=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a0="Follow Mode only works with Remote controller"Y=false end end;local function cr(planet,cs)local function ct(cu,cv)local cw=vec3(cv)if cu.bodyId==0 then return setmetatable({latitude=cw.x,longitude=cw.y,altitude=cw.z,bodyId=0,systemId=cu.planetarySystemId},MapPosition)end;local cx=cw-cu.center;local ai=cx:len()local cy=ai-cu.radius;local cz=0;local cA=0;if not cf(ai,0)then local cB=n(cx.y,cx.x)cA=cB>=0 and cB or 2*math.pi+cB;cz=math.pi/2-math.acos(cx.z/ai)end;return setmetatable({latitude=math.deg(cz),longitude=math.deg(cA),altitude=cy,bodyId=cu.bodyId,systemId=cu.planetarySystemId},MapPosition)end;local cC=ct(planet,cs)cC="::pos{"..cC.systemId..","..cC.bodyId..","..cC.latitude..","..cC.longitude..","..cC.altitude.."}"system.setWaypoint(cC)end;local function cD()local function cE(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cp()end end;VectorStatus="Proceeding to Waypoint"end;if bD-bm<1.5 and at>0 then if not bB then a0="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an then bc.UpdateAutopilotTarget()cr(aa,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if at~=0 then an=true;cp()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then if not VectorToTarget then cE(SpaceTarget)end else if au>AutopilotTargetOrbit*1.5 or au==0 then by=false;Autopilot=true elseif not as then if IntoOrbit then co()end;bw=planet.noAtmosphericDensityAltitude+1000;bv=true;bu.AutopilotAlign=true;bu.VectorToTarget=true;bs=false;if not IntoOrbit then co()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then an=true;cp()else Autopilot=true end end elseif at==0 then local cF=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(aa.name==planet.name and cF)and not IntoOrbit then WaypointSet=false;by=false;bs=false;co()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Y=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;N=false;LockPitch=nil;WaypointSet=false end else an=true;cp()end else an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;N=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then co()end end end;local function cG(cH)local cI=-1;local cJ;cI=bc.findAtlasIndex(SavedLocations)if cI~=-1 then local cK;if cH~=nil then cJ={position=SavedLocations[cI].position,name=cH,atmosphere=SavedLocations[cI].atmosphere,planetname=SavedLocations[cI].planetname,gravity=SavedLocations[cI].gravity}else cJ={position=bL,name=SavedLocations[cI].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cI]=cJ;cI=-1;cI=bc.findAtlasIndex(b2[0])if cI>-1 then b2[0][cI]=cJ end;bc.UpdateAtlasLocationsList()a0=CustomTarget.name.." position updated"bc.UpdateAutopilotTarget()else a0="Name Not Found"end end;local function cL()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bg=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then cn()end;if IntoOrbit then co()end;LockPitch=nil;bg=autoRollPreference;am=false;ao=false;ae=0 end end;local function cM(cN,cO,cP)local function cQ(cN,cR)cN=vec3(cN)cR=vec3(cR):normalize()local cl=cN*cR;return cl.x+cl.y+cl.z end;local cS=0.001;local cT=1;if not as or not bi or ap~=-1 or bI<O then local cU=cP;if cU==nil then cU=DampingMultiplier end;if cO==nil then cO=cS end;cN=vec3(cN):normalize()local cV=vec3()-cN;local cW=-cQ(cV,core.getConstructWorldOrientationRight())*cT;local cX=-cQ(cV,core.getConstructWorldOrientationUp())*cT;if aC==0 then aC=cW/2 end;if aD==0 then aD=cX/2 end;if c(cW)<0.1 then T=T-cW*2 else T=T-(cW+(cW-aC)*cU)end;if c(cX)<0.1 then S=S+cX*2 else S=S+cX+(cX-aD)*cU end;aC=cW;aD=cX;if c(cW)<cO and c(cX)<cO then return true end;return false elseif bi and ap==-1 then cN=bH;local cU=cP;if cU==nil then cU=DampingMultiplier end;if cO==nil then cO=cS end;cN=vec3(cN):normalize()local cV=bF-cN;local cW=-cQ(cV,core.getConstructWorldOrientationRight())*cT;local cX=-cQ(cV,core.getConstructWorldOrientationUp())*cT;if aC==0 then aC=cW/2 end;if aD==0 then aD=cX/2 end;if c(cW)<0.1 then T=T-cW*5 else T=T-(cW+(cW-aC)*cU)end;if c(cX)<0.1 then S=S+cX*5 else S=S+cX+(cX-aD)*cU end;aC=cW;aD=cX;if c(cW)<cO and c(cX)<cO then return true end;return false end end;local function cY()if Reentry then a0="Re-Entry cancelled"Reentry=false;bg=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a0="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not P then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then a0="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bg=true;BrakeIsOn=false;a0="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bn end else Reentry=true;AltitudeHold=true;bg=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local c8,cZ=ci(HoldAltitude)a0="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..c8 ..cZ;ce(d(bn))end;AutoTakeoff=false end;local function c_()if antigrav and not ExternalAGG then if bN then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function d0(d1)local d2=0;local d3=0;local d4=0;if d1<60 then d1=d(d1)elseif d1<3600 then d2=d(d1/60)d1=d(d1%60)elseif d1<86400 then d3=d(d1/3600)d2=d(d1%3600/60)else d4=d(d1/86400)d3=d(d1%86400/3600)end;if d4>0 then return d4 .."d "..d3 .."h "elseif d3>0 then return d3 .."h "..d2 .."m "elseif d2>0 then return d2 .."m "..d1 .."s"elseif d1>0 then return d1 .."s"else return"0s"end end;local function d5()local d6=-1;if telemeter_1 then d6=telemeter_1.getDistance()end;if ap~=-1 and d6~=-1 then if ap<d6 then return ap else return d6 end elseif ap~=-1 then return ap else return d6 end end;local function d7(d8)local function d9(da)for db,dc in pairs(da)do dbHud_1.setStringValue(dc,g(_G[dc]))if d8 and dbHud_2 then dbHud_2.setStringValue(dc,g(_G[dc]))end end end;if dbHud_1 then if not ad then d9(b)d9(bZ())system.print("Saved Variables to Datacore")if d8 and dbHud_2 then a0="Databank copied.  Remove copy when ready."end end end end;local function dd()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function de()local function df(dg)return type(dg)=='number'end;local function dh(dg)return type(tonumber(dg))=='number'end;local function di(dj)return type(dj)=='table'end;local function dk(dl)return type(dl)=='string'end;local function dm(dc)return di(dc)and df(dc.x and dc.y and dc.z)end;local function dn(dp)return di(dp)and df(dp.latitude and dp.longitude and dp.altitude and dp.bodyId and dp.systemId)end;local dq=math.pi/180;local dr=180/math.pi;local epsilon=1e-10;local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..z..','..z..','..z..','..z..','..z..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dt=r;local function cf(cg,ch)if cg==0 then return c(ch)<1e-09 end;if ch==0 then return c(cg)<1e-09 end;return c(cg-ch)<math.max(c(cg),c(ch))*epsilon end;local function du(dg)local cl=string.gsub(string.reverse(e('%.4f',dg)),'^0*%.?','')return cl==''and'0'or string.reverse(cl)end;local function dv(dw)if dm(dw)then return e('{x=%.3f,y=%.3f,z=%.3f}',dw.x,dw.y,dw.z)end;if di(dw)and not getmetatable(dw)then local dx={}local dy=next(dw)if type(dy)=='nil'or dy==1 then dx=dw else for db,dc in pairs(dw)do local cc=dv(dc)if type(db)=='number'then table.insert(dx,e('[%s]=%s',db,cc))else table.insert(dx,e('%s=%s',db,cc))end end end;return e('{%s}',table.concat(dx,','))end;if dk(dw)then return e("'%s'",dw:gsub("'",[[\']]))end;return tostring(dw)end;local dz={}dz.__index=dz;dz.__tostring=function(dw,dA)local dB={}for db in pairs(dw)do table.insert(dB,db)end;table.sort(dB)local dx={}for _,db in ipairs(dB)do local cc=dv(dw[db])if type(db)=='number'then table.insert(dx,e('[%s]=%s',db,cc))else table.insert(dx,e('%s=%s',db,cc))end end;if dA then return e('%s%s',dA,table.concat(dx,',\n'..dA))end;return e('{%s}',table.concat(dx,','))end;dz.__eq=function(dC,dD)return dC.planetarySystemId==dD.planetarySystemId and dC.bodyId==dD.bodyId and cf(dC.radius,dD.radius)and cf(dC.center.x,dD.center.x)and cf(dC.center.y,dD.center.y)and cf(dC.center.z,dD.center.z)and cf(dC.GM,dD.GM)end;local function dE(dF,dG,dH,cv,dI)assert(dh(dF),'Argument 1 (planetarySystemId) must be a number:'..type(dF))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(dH),'Argument 3 (radius) must be a number:'..type(dH))assert(di(cv),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cv))assert(dh(dI),'Argument 5 (GM) must be a number:'..type(dI))return setmetatable({planetarySystemId=tonumber(dF),bodyId=tonumber(dG),radius=tonumber(dH),center=vec3(cv),GM=tonumber(dI)},dz)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dJ)return e('::pos{%d,%d,%s,%s,%s}',dJ.systemId,dJ.bodyId,du(dJ.latitude*dr),du(dJ.longitude*dr),du(dJ.altitude))end;MapPosition.__eq=function(dC,dD)return dC.bodyId==dD.bodyId and dC.systemId==dD.systemId and cf(dC.latitude,dD.latitude)and cf(dC.altitude,dD.altitude)and(cf(dC.longitude,dD.longitude)or cf(dC.latitude,math.pi/2)or cf(dC.latitude,-math.pi/2))end;local function dK(dL,dG,cz,cA,cy)local dF=dL;if dk(dL)and not cA and not cy and not dG and not cz then dF,dG,cz,cA,cy=o(dL,ds)assert(dF,'Argument 1 (position string) is malformed.')else assert(dh(dF),'Argument 1 (systemId) must be a number:'..type(dF))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(cz),'Argument 3 (latitude) must be in degrees:'..type(cz))assert(dh(cA),'Argument 4 (longitude) must be in degrees:'..type(cA))assert(dh(cy),'Argument 5 (altitude) must be in meters:'..type(cy))end;dF=tonumber(dF)dG=tonumber(dG)cz=tonumber(cz)cA=tonumber(cA)cy=tonumber(cy)if dG==0 then return setmetatable({latitude=cz,longitude=cA,altitude=cy,bodyId=dG,systemId=dF},MapPosition)end;return setmetatable({latitude=dq*dt(cz,-90,90),longitude=dq*(cA%360),altitude=cy,bodyId=dG,systemId=dF},MapPosition)end;local dM={}dM.__index=dM;dM.__tostring=function(dw,dA)local dN=dA and dA..'  'local dO={}local dB={}for db in pairs(dw)do table.insert(dB,db)end;table.sort(dB)for _,dP in ipairs(dB)do bdy=dw[dP]local dQ=dz.__tostring(bdy,dN)if dA then table.insert(dO,e('[%s]={\n%s\n%s}',dP,dQ,dA))else table.insert(dO,e('  [%s]=%s',dP,dQ))end end;if dA then return e('\n%s%s%s',dA,table.concat(dO,',\n'..dA),dA)end;return e('{\n%s\n}',table.concat(dO,',\n'))end;local function dR(dS)local b2={}local pid;for _,dc in pairs(dS)do local dT=dc.planetarySystemId;if type(dT)~='number'then error('Invalid planetary system ID: '..tostring(dT))elseif pid and dT~=pid then error('Mistringmatch planetary system IDs: '..dT..' and '..pid)end;local dU=dc.bodyId;if type(dU)~='number'then error('Invalid body ID: '..tostring(dU))elseif b2[dU]then error('Duplicate body ID: '..tostring(dU))end;setmetatable(dc.center,getmetatable(vec3.unit_x))b2[dU]=setmetatable(dc,dz)pid=dT end;return setmetatable(b2,dM)end;b6={}local function dV(dS)return setmetatable({galaxyAtlas=dS or{}},b6)end;b6.__index=function(dj,i)if type(i)=='number'then local system=dj.galaxyAtlas[i]return dR(system)end;return rawget(b6,i)end;b6.__pairs=function(dw)return function(dj,db)local dW,nv=next(dj,db)return dW,nv and dR(nv)end,dw.galaxyAtlas,nil end;b6.__tostring=function(dw)local dX={}for _,dY in pairs(dw or{})do local dZ=dY:getPlanetarySystemId()local d_=dM.__tostring(dY,'    ')table.insert(dX,e('  [%s]={%s\n  }',dZ,d_))end;return e('{\n%s\n}\n',table.concat(dX,',\n'))end;b6.BodyParameters=dE;b6.MapPosition=dK;b6.PlanetarySystem=dR;function b6.createBodyParameters(e0,dG,e1,e2,e3,e4,e5)assert(dh(e0),'Argument 1 (planetarySystemId) must be a number:'..type(e0))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(e1),'Argument 3 (surfaceArea) must be a number:'..type(e1))assert(di(e2),'Argument 4 (aPosition) must be an array or vec3:'..type(e2))assert(di(e3),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(e3))assert(dh(e4),'Argument 6 (altitude) must be in meters:'..type(e4))assert(dh(e5),'Argument 7 (gravityAtPosition) must be number:'..type(e5))local dH=math.sqrt(e1/4/math.pi)local ai=dH+e4;local e6=vec3(e2)+ai*vec3(e3)local dI=e5*ai*ai;return dE(e0,dG,dH,e6,dI)end;b6.isMapPosition=dn;function b6:getPlanetarySystem(dL)if i==nil then i=0 end;if nv==nil then nv=0 end;local e0=dL;if dn(dL)then e0=dL.systemId end;if type(e0)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dM then system=dR(system)end;return system end end end;function dM:castIntersections(e7,cR,e8,e9)local e8=e8 or function(ea)return 1.05*ea.radius end;local eb={}if e9 then for _,i in ipairs(e9)do eb[i]=self[i]end else e9={}for db,ea in pairs(self)do table.insert(e9,db)eb[db]=ea end end;local function ec(ed,ee)local ef=eb[ed].center-e7;local eg=eb[ee].center-e7;return ef:len()<eg:len()end;table.sort(e9,ec)local eh=cR:normalize()for i,dT in ipairs(e9)do local ea=eb[dT]local ei=ea.center-e7;local dH=e8(ea)local ej=ei:dot(eh)local ek=ej^2-(ei:len2()-dH^2)if ek>=0 then local el=math.sqrt(ek)local em=ej+el;local en=ej-el;if en>0 then return ea,em,en elseif em>0 then return ea,em,nil end end end;return nil,nil,nil end;function dM:closestBody(cs)assert(type(cs)=='table','Invalid coordinates.')local eo,ea;local ep=vec3(cs)for _,eq in pairs(self)do local er=(eq.center-ep):len2()if(not ea or er<eo)and eq.name~="Space"then ea=eq;eo=er end end;return ea end;function dM:convertToBodyIdAndWorldCoordinates(dL)local es=dL;if dk(dL)then es=dK(dL)end;if es.bodyId==0 then return 0,vec3(es.latitude,es.longitude,es.altitude)end;local eq=self:getBodyParameters(es)if eq then return es.bodyId,eq:convertToWorldCoordinates(es)end end;function dM:getBodyParameters(dL)local dG=dL;if dn(dL)then dG=dL.bodyId end;assert(dh(dG),'Argument 1 (bodyId) must be a number:'..type(dG))return self[dG]end;function dM:getPlanetarySystemId()local _,dc=next(self)return dc and dc.planetarySystemId end;function dz:convertToMapPosition(cv)assert(di(cv),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cv))local cw=vec3(cv)if self.bodyId==0 then return setmetatable({latitude=cw.x,longitude=cw.y,altitude=cw.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cx=cw-self.center;local ai=cx:len()local cy=ai-self.radius;local cz=0;local cA=0;if not cf(ai,0)then local cB=n(cx.y,cx.x)cA=cB>=0 and cB or 2*math.pi+cB;cz=math.pi/2-math.acos(cx.z/ai)end;return setmetatable({latitude=cz,longitude=cA,altitude=cy,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dz:convertToWorldCoordinates(dL)local es=dk(dL)and dK(dL)or dL;if es.bodyId==0 then return vec3(es.latitude,es.longitude,es.altitude)end;assert(dn(es),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(es.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(es.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local et=math.cos(es.latitude)return self.center+(self.radius+es.altitude)*vec3(et*math.cos(es.longitude),et*math.sin(es.longitude),math.sin(es.latitude))end;function dz:getAltitude(cv)return(vec3(cv)-self.center):len()-self.radius end;function dz:getDistance(cv)return(vec3(cv)-self.center):len()end;function dz:getGravity(cv)local eu=self.center-vec3(cv)local ev=eu:len2()return self.GM/ev*eu/math.sqrt(ev)end;return setmetatable(b6,{__call=function(_,...)return dV(...)end})end;local function ew()local b8={}local ex=30000000/3600;local ey=ex*ex;local ez=100;local function eA(dc)return 1/math.sqrt(1-dc*dc/ey)end;function b8.computeAccelerationTime(eB,eC,eD)local eE=ex*math.asin(eB/ex)return(ex*math.asin(eD/ex)-eE)/eC end;function b8.computeDistanceAndTime(eB,eD,eF,eG,eH,eI)eH=eH or 0;eI=eI or 0;local eJ=eB<=eD;local eK=eG*(eJ and 1 or-1)/eF;local eL=-eI/eF;local eM=eK+eL;if eJ and eM<=0 or not eJ and eM>=0 then return-1,-1 end;local eN,eO=0,0;if eK~=0 and eH>0 then local eE=math.asin(eB/ex)local eP=math.pi*(eK/2+eL)local eQ=eK*eH;local eR=ex*math.pi;local dc=function(dj)local eS=(eP*dj-eQ*math.sin(math.pi*dj/2/eH)+eR*eE)/eR;local eT=math.tan(eS)return ex*eT/math.sqrt(eT*eT+1)end;local eU=eJ and function(dl)return dl>=eD end or function(dl)return dl<=eD end;eO=2*eH;if eU(dc(eO))then local eV=0;while c(eO-eV)>0.5 do local dj=(eO+eV)/2;if eU(dc(dj))then eO=dj else eV=dj end end end;local eW=eB;local eX=eO/ez;for eY=1,ez do local eZ=dc(eY*eX)eN=eN+(eZ+eW)*eX/2;eW=eZ end;if eO<2*eH then return eN,eO end;eB=eW end;local eE=ex*math.asin(eB/ex)local bD=(ex*math.asin(eD/ex)-eE)/eM;local e_=ey*math.cos(eE/ex)/eM;local ai=e_-ey*math.cos((eM*bD+eE)/ex)/eM;return ai+eN,bD+eO end;function b8.computeTravelTime(eB,eC,ai)if ai==0 then return 0 end;if eC>0 then local eE=ex*math.asin(eB/ex)local e_=ey*math.cos(eE/ex)/eC;return(ex*math.acos(eC*(e_-ai)/ey)-eE)/eC end;if eB==0 then return-1 end;assert(eB>0,'Acceleration and initial speed are both zero.')return ai/eB end;function b8.lorentz(dc)return eA(dc)end;return b8 end;local function f0()local vec3=require('cpml.vec3')local de=de()local function dk(dl)return type(dl)=='string'end;local function di(dj)return type(dj)=='table'end;local function cf(cg,ch)if cg==0 then return c(ch)<1e-09 end;if ch==0 then return c(cg)<1e-09 end;return c(cg-ch)<math.max(c(cg),c(ch))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cy)assert(self.body)local ai=cy+self.body.radius;if not cf(ai,0)then local orbit=math.sqrt(self.body.GM/ai)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dL,f1)assert(self.body)assert(di(dL)or dk(dL))assert(di(f1))local f2=(dk(dL)or de.isMapPosition(dL))and self.body:convertToWorldCoordinates(dL)or vec3(dL)local dc=vec3(f1)local f3=f2-self.body.center;local eg=dc:len2()local f4=f3:len()local f5=self.body.GM;local f6=((eg-f5/f4)*f3-f3:dot(dc)*dc)/f5;local cg=f5/(2*f5/f4-eg)local f7=f6:len()local eh=f6:normalize()local f8=cg*(1-f7)local f9=cg*(1+f7)local fa=f8*eh+self.body.center;local fb=f7<=1 and-f9*eh+self.body.center or nil;local fc=math.sqrt(cg*f5*(1-f7*f7))local fd=fb and 2*math.pi*math.sqrt(cg^3/f5)local fe=math.acos(f6:dot(f3)/(f7*f4))if f3:dot(dc)<0 then fe=-(fe-2*math.pi)end;local ff=math.acos((math.cos(fe)+f7)/(1+f7*math.cos(fe)))local fg=ff;if fg<0 then fg=fg+2*math.pi end;local fh=fg-f7*math.sin(fg)local fi=0;local fj=0;local fk=0;if fd~=nil then fi=fh/(2*math.pi/fd)fj=fd-fi;fk=fj+fd/2;if fe-math.pi>0 then fj=fi;fk=fj+fd/2 end;if fk>fd then fk=fk-fd end end;return{periapsis={position=fa,speed=fc/f8,circularOrbitSpeed=math.sqrt(f5/f8),altitude=f8-self.body.radius},apoapsis=fb and{position=fb,speed=fc/f9,circularOrbitSpeed=math.sqrt(f5/f9),altitude=f9-self.body.radius},currentVelocity=dc,currentPosition=f2,eccentricity=f7,period=fd,eccentricAnomaly=ff,meanAnomaly=fh,timeToPeriapsis=fj,timeToApoapsis=fk}end;local function fl(fm)local eq=de.BodyParameters(fm.planetarySystemId,fm.bodyId,fm.radius,fm.center,fm.GM)return setmetatable({body=eq},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fl(...)end})end;local function fn()local fo=false;local fp=0;local function fq(fr)local dH=500000;local fs,ft,fu=math.huge;local fv=false;local fw=vec3({13771471,7435803,-128971})local fx=18000000;fs=vec3(fr):dist(fw)if fs<fx then return true,c(fs-fx),"Safe Zone",0 end;ft=vec3(fr):dist(vec3(planet.center))if ft<dH then fv=true end;if c(ft-dH)<c(fs-fx)then return fv,c(ft-dH),planet.name,planet.bodyId else return fv,c(fs-fx),"Safe Zone",0 end end;local function fy(dc)if aJ==1920 then return dc else return y(aJ*dc/1920,0)end end;local function fz(dc)if aK==1080 then return dc else return y(aK*dc/1080,0)end end;local function fA()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function fB()local fC="TRAVEL"if not bP then fC="CRUISE"end;if Autopilot then fC="AUTOPILOT"end;return fC end;local function fD(fE,b0,c6,fF,fG,fH,fI,fJ)local fK=1;local fL=2;local fM=3;local fN=4;local fO=5;local fP=6;local fQ=""local fR=0;local fS=fuelY;local fT=fuelY+10;if m()==1 and not RemoteHud then fS=fS-50;fT=fT-50 end;if fG=="ATMO"then fQ="atmofueltank"elseif fG=="SPACE"then fQ="spacefueltank"else fQ="rocketfueltank"end;fR=_G[fQ.."_size"]if#fH>0 then for i=1,#fH do local fU=string.sub(fH[i][fL],1,12)local fV=0;for fW=1,fR do if fH[i][fL]==f(unit[fQ.."_"..fW].getData()).name then fV=fW;break end end;if b0 or fI[i]==nil or fJ[i]==nil then local fX=0;local fY=0;local fZ=0;local f_=0;local g0=q()if fV~=0 then fJ[i]=f(unit[fQ.."_"..fV].getData()).percentage;fI[i]=f(unit[fQ.."_"..fV].getData()).timeLeft;if fI[i]=="n/a"then fI[i]=0 end else fZ=k(fH[i][fK])-fH[i][fN]fX=fH[i][fM]fJ[i]=d(0.5+fZ*100/fX)fY=fH[i][fO]f_=fH[i][fP]if fY<=fZ then fI[i]=0 else fI[i]=d(0.5+fZ/((fY-fZ)/(g0-f_)))end;fH[i][fO]=fZ;fH[i][fP]=g0 end end;if fU==fF then fU=e("%s %d",fG,i)end;if fV==0 then fU=fU.." *"end;local g1;if fI[i]==0 then g1="n/a"else g1=d0(fI[i])end;if fJ[i]~=nil then local g2=d(fJ[i]*2.55)local g3=e("rgb(%d,%d,%d)",255-g2,g2,0)local c9=""if g1~="n/a"and fI[i]<120 or fJ[i]<5 then if b0 then c9=[[class="red"]]end end;fE[#fE+1]=c5(c6,fS,fU,c9 .." pdim txtfuel")fE[#fE+1]=c5(c6,fT,e("%d%% %s",fJ[i],g1),"pdim txtfuel","fill:"..g3)fS=fS+30;fT=fT+30 end end end end;local function g4(fE,cy)if cy<200000 and not as or cy and as then local g5=0;if c(bK)>1 then g5=45*math.log(c(bK),10)if bK<0 then g5=-g5 end end;fE[#fE+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bK),d(g5))end;return fE end;local function g6(g7)local g8=-bJ;g7=g7-g7:project_on(g8)local g9=vec3(0,0,1)g9=g9-g9:project_on(g8)local ga=g9:cross(g8)local g5=g9:angle_between(g7)*constants.rad2deg;if g7:dot(ga)<0 then g5=360-g5 end;return g5 end;local function gb(fE,centerX,centerY,gc,gd,cF)local ge=circleRad;local gf=20;local gg=d(gc)if cF then for i=-45,45,5 do local gh=i;fE[#fE+1]=e([[<g transform="rotate(%f,%d,%d)">]],gh,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fE[#fE+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+ge+gf-len,centerX,centerY+ge+gf)end;fE[#fE+1]=c5(centerX,centerY+ge+gf-35,gd,"pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY+ge+gf-25,gg.." deg","pdim txt txtmid")fE[#fE+1]=e([[<g transform="rotate(%f,%d,%d)">]],-gc,centerX,centerY)fE[#fE+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+ge+gf-20,centerX+5,centerY+ge+gf-20,centerX,centerY+ge+gf-15)fE[#fE+1]="</g>"end;local gi=gg;if cF then gi=g6(bF)end;local gj=20;local gk=d(gi)local gl=0;local gm=centerY+ge+gf+20;local gn=centerX;if gd~="YAW"then gm=fz(130)gn=fy(960)end;local go=[[<path class="txttick line" d="]]for i=d(gk-(gj+10)-gk%5+0.5),d(gk+gj+10+gk%5+0.5),5 do local c6=gn+-i*5+gi*5;if i%10==0 then gl=10;local z=i;if z==360 then z=0 elseif z>360 then z=z-360 elseif z<0 then z=z+360 end;fE[#fE+1]=c5(c6+5,gm-12,z)elseif i%5==0 then gl=5 end;if gl==10 then go=e([[%s M %f %f v %d]],go,c6,gm-5,gl)else go=e([[%s M %f %f v %d]],go,c6,gm-2.5,gl)end end;fE[#fE+1]=go..[["/>]]fE[#fE+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gn-5,gm+10,gn+5,gm+10,gn,gm+5)if cF then gd="HDG"end;fE[#fE+1]=c5(gn,gm+25,gk.."deg","pdim txt txtmid","")fE[#fE+1]=c5(gn,gm+35,gd,"pdim txt txtmid","")end;local function gp(fE,gq,gc,centerX,centerY,cF,gr,eZ)local ge=circleRad;local gs=d(ge*3/5)if ge>0 then local gt=d(gq)local len=0;local go=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*gc,centerX,centerY)if not as then go=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fE[#fE+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],ge-1,centerX,centerY)fE[#fE+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gt-30-gt%5+0.5),d(gt+30+gt%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c7=centerY+-i*5+gq*5;if len==30 then go=e([[%s M %d %f h %d]],go,centerX-gs-len,c7,len)if as then fE[#fE+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*gc,centerX,centerY,centerX-gs+10,c7,i)fE[#fE+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*gc,centerX,centerY,centerX+gs-10,c7,i)if i==0 or i==180 or i==-180 then fE[#fE+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*gc,centerX,centerY,centerX-gs+20,c7,gs*2-40)end else fE[#fE+1]=c5(centerX-gs+10,c7,i,"pdim txt txtmid")fE[#fE+1]=c5(centerX+gs-10,c7,i,"pdim txt txtmid")end;go=e([[%s M %d %f h %d]],go,centerX+gs,c7,len)else go=e([[%s M %d %f h %d]],go,centerX-gs-len,c7,len)go=e([[%s M %d %f h %d]],go,centerX+gs,c7,len)end end;fE[#fE+1]=go..[["/>]]local gu="PITCH"if not cF then gu="REL PITCH"end;if gq>90 and not as then gq=90-(gq-90)elseif gq<-90 and not as then gq=-90-(gq+90)end;if ge>200 then if as then if eZ>O then fE[#fE+1]=c5(centerX,centerY-15,"Yaw","pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY+20,gr,"pdim txt txtmid")end;fE[#fE+1]=e([[<g transform="rotate(%f,%d,%d)">]],-gc,centerX,centerY)else fE[#fE+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fE[#fE+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-gs+25,centerY-5,centerX-gs+20,centerY,centerX-gs+25,centerY+5,centerX-gs+50,centerY+4,gt)fE[#fE+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+gs-25,centerY-5,centerX+gs-20,centerY,centerX+gs-25,centerY+5,centerX+gs-30,centerY+4,gt)fE[#fE+1]="</g>"end;local gv=d(ge/3)fE[#fE+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-gv,centerY,ge-gv)if not as and cF then fE[#fE+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*gc,centerX,centerY,centerX-gs+10,centerY,gs*2-20)end;fE[#fE+1]="</g>"if ge<200 then if as and eZ>O then fE[#fE+1]=c5(centerX,centerY-ge,gu,"pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY-ge+10,gt,"pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY-15,"Yaw","pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY+20,gr,"pdim txt txtmid")else fE[#fE+1]=c5(centerX,centerY-ge,gu,"pdim txt txtmid")fE[#fE+1]=c5(centerX,centerY-ge+15,gt,"pdim txt txtmid")end end end end;local function gw(fE,cy,cF)local gx=altMeterX;local gy=altMeterY;local gz=78;local gA=19;local gB=d5()if gB~=-1 then fE[#fE+1]=c5(gx+gz,gy+gA+20,e("AGL: %.1fm",gB),"pdim altsm txtend")end;if cF and(cy<200000 and not as or cy and as)then table.insert(fE,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gx-1,gy-4,gz+2,gA+6,gx+1,gy-1,gz-4,gA))local cI=0;local gC=1;local gD=0;local gE=cy<0;local gF=9;if gE then gF=0 end;local cy=c(cy)while cI<6 do local gG=11;local gH=16;local gI=9;local gJ=14;local c9="altsm"if cI>2 then gH=gH+3;gG=gG+2;gJ=gJ+2;gI=gI-6;c9="altbig"end;if gE then c9=c9 .." red"end;local gK=cy/gC%10;local gL=d(gK)local gM=d((gL+1)%10)local gN=gD;if cI==0 then gN=gK-gL;if gE then gN=1-gN end end;if gE and(cI==0 or gD~=0)then local gO=gM;gM=gL;gL=gO end;local gP=gH*(gN-1)local gQ=gP+gH;local c6=gx+gI+(6-cI)*gG;local c7=gy+gJ;fE[#fE+1]=c5(c6,c7+gP,gM,c9)fE[#fE+1]=c5(c6,c7+gQ,gL,c9)cI=cI+1;gC=gC*10;if gL==gF then gD=gN else gD=0 end end;table.insert(fE,[[</g></g>]])end end;local function gR(f1)f1=vec3(f1)local gS=-math.deg(n(f1.y,f1.z))+180;gS=gS-90;if gS<0 then gS=360+gS end;if gS>180 then gS=-180+gS-180 end;return-gS end;local function gT(f1)f1=vec3(f1)local gi=math.deg(n(f1.y,f1.x))-90;if gi<-180 then gi=360+gi end;return gi end;local function gU(fE,f1,eZ,centerX,centerY)if eZ>5 and not as or eZ>O then local ge=circleRad;local gV=20;local gW=20;local gX=vec3(f1)local gY=gR(gX)local gZ=gT(gX)local g_=14;local h0=g_/2;local h1=-gZ/gW*ge;local h2=gY/gV*ge;local c6=centerX+h1;local c7=centerY+h2;local ai=math.sqrt(h1^2+h2^2)local h3=[[<circle
                            cx="]]..c6 ..[["
                            cy="]]..c7 ..[["
                            r="]]..h0/g_..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c6 ..[["
                            cy="]]..c7 ..[["
                            r="]]..h0 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c6-g_..[[,]]..c7 ..[[ h ]]..h0 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c6+h0 ..[[,]]..c7 ..[[ h ]]..h0 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c6 ..[[,]]..c7-g_..[[ v ]]..h0 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<ge then fE[#fE+1]=h3 else local g5=n(h2,h1)local h4=4;local h5=centerX+ge*math.cos(g5)local h6=centerY+ge*math.sin(g5)fE[#fE+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',g5*180/math.pi,h5,h6,h5-h4,h6-h4/2,h4*2,h4,h5+h4,h6-h4,h4,h4,-h4,h4)end;if not as then gY=gR(-gX)gZ=gT(-gX)h1=-gZ/gW*ge;h2=gY/gV*ge;c6=centerX+h1;c7=centerY+h2;ai=math.sqrt(h1^2+h2^2)if ai<ge then local h7=[[<circle
                                    cx="]]..c6 ..[["
                                    cy="]]..c7 ..[["
                                    r="]]..h0 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c6 ..[[,]]..c7-g_..[[ v ]]..h0 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c6 ..[[,]]..c7 ..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c6 ..[[,]]..c7 ..[[)" />
                                <path
                                    d="M ]]..c6-h0 ..[[,]]..c7 ..[[ h ]]..g_..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c6 ..[[,]]..c7 ..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c6 ..[[,]]..c7 ..[[)"/>]]fE[#fE+1]=h7 end end end end;local function h8(fE,fC,h9,ha)h9=d(h9+0.5)local fS=throtPosY+10;local fT=throtPosY+20;if m()==1 and not RemoteHud then fS=55;fT=65 end;local hb="CRUISE"local unit="km/h"local cc=ha;if fC=="TRAVEL"or fC=="AUTOPILOT"then hb="THROT"unit="%"cc=h9;local hc="dim"if h9<0 then hc="red"end;fE[#fE+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],hc,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h9),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fE[#fE+1]=c5(throtPosX+10,fS,hb,"pbright txtstart")fE[#fE+1]=c5(throtPosX+10,fT,e("%.0f %s",cc,unit),"pbright txtstart")if as and AtmoSpeedAssist and bP and I then h9=d(J*100+0.5)local hc="red"if h9<0 then hc="red"end;fE[#fE+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],hc,1-c(h9),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fE[#fE+1]=c5(throtPosX+10,fS+40,"LIMIT","pbright txtstart")fE[#fE+1]=c5(throtPosX+10,fT+40,h9 .."%","pbright txtstart")end;if as and AtmoSpeedAssist or Reentry then fE[#fE+1]=c5(throtPosX+10,fS-40,"LIMIT: "..bn.." km/h","dim txtstart")elseif not as and Autopilot then fE[#fE+1]=c5(throtPosX+10,fS-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function hd(fE,he)local hf=throtPosY-10;local hg=throtPosX+10;fE[#fE+1]=c5(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then hf=75 end;fE[#fE+1]=c5(hg,hf,d(he).." km/h","pbright txtbig txtstart")end;local function hh(fE)fE[#fE+1]=c5(fy(1900),fz(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fE[#fE+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fE[#fE+1]=c5(fy(960),fz(550),"Warning: Invalid Control Scheme Detected","warnings")fE[#fE+1]=c5(fy(960),fz(600),"Keyboard Scheme must be selected","warnings")fE[#fE+1]=c5(fy(960),fz(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local hi=fy(960)local hj=fz(860)local hk=fz(880)local hl=fz(900)local hm=fz(960)local hn=fz(200)local ho=fz(150)local hp=fz(960)if m()==1 and not RemoteHud then hj=fz(135)hk=fz(155)hl=fz(175)hn=fz(115)ho=fz(95)end;if BrakeIsOn then fE[#fE+1]=c5(hi,hj,"Brake Engaged","warnings")elseif H>0 then fE[#fE+1]=c5(hi,hj,"Auto-Brake Engaged","warnings","opacity:"..H)end;if as and bi and ap==-1 then fE[#fE+1]=c5(hi,hn+50,"** STALL WARNING **","warnings")end;if ax then fE[#fE+1]=c5(hi,hp,"Gyro Enabled","warnings")end;if GearExtended then if Q then fE[#fE+1]=c5(hi,hk,"Gear Extended","warn")else fE[#fE+1]=c5(hi,hk,"Landed (G: Takeoff)","warnings")end;local hq,cm=ci(a:getTargetGroundAltitude())fE[#fE+1]=c5(hi,hl,"Hover Height: "..hq..cm,"warn")end;if a5 then fE[#fE+1]=c5(hi,hm+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bN and AntigravTargetAltitude~=nil then if c(au-antigrav.getBaseAltitude())<501 then fE[#fE+1]=c5(hi,hn+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fE[#fE+1]=c5(hi,hn+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fE[#fE+1]=c5(hi,hn+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fE[#fE+1]=c5(hi,hn+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif Y then fE[#fE+1]=c5(hi,hn+20,"Follow Mode Engaged","warn")elseif Reentry then fE[#fE+1]=c5(hi,hn+20,"Re-entry in Progress","warn")end;local hr,em,en=b7:getPlanetarySystem(0):castIntersections(bL,bH:normalize(),function(ea)if ea.noAtmosphericDensityAltitude>0 then return ea.radius+ea.noAtmosphericDensityAltitude else return ea.radius+ea.surfaceMaxAltitude*1.5 end end)local hs=em;if en~=nil and em~=nil then hs=math.min(en,em)end;if AltitudeHold or VertTakeOff then local hq,cm=ci(HoldAltitude,2)if VertTakeOff then if bN then hq,cm=ci(antigrav.getBaseAltitude(),2)end;fE[#fE+1]=c5(hi,hn,"VTO to "..hq..cm,"warn")elseif AutoTakeoff and not IntoOrbit then fE[#fE+1]=c5(hi,hn,"Takeoff to "..hq..cm,"warn")if BrakeIsOn and not VertTakeOff then fE[#fE+1]=c5(hi,hn+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fE[#fE+1]=c5(hi,hn,"Altitude Hold: "..hq..cm,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then fE[#fE+1]=c5(hi,hn,"Beginning ascent","warn")elseif at<0.09 and at>0.05 then fE[#fE+1]=c5(hi,hn,"Aligning trajectory","warn")elseif at<0.05 then fE[#fE+1]=c5(hi,hn,"Leaving atmosphere","warn")end end;if IntoOrbit then if bp~=nil then fE[#fE+1]=c5(hi,hn,bp,"warn")end end;if BrakeLanding then if StrongBrakes then fE[#fE+1]=c5(hi,hn,"Brake-Landing","warnings")else fE[#fE+1]=c5(hi,hn,"Coast-Landing","warnings")end end;if ProgradeIsOn then fE[#fE+1]=c5(hi,hn,"Prograde Alignment","crit")end;if RetrogradeIsOn then fE[#fE+1]=c5(hi,hn,"Retrograde Alignment","crit")end;if hs~=nil and at==0 then local hq,cm=ci(hs)local travelTime=b8.computeTravelTime(bI,0,hs)local ht="Collision"if hr.noAtmosphericDensityAltitude>0 then ht="Atmosphere"end;fE[#fE+1]=c5(hi,ho,hr.name.." "..ht.." "..d0(travelTime).." In "..hq..cm,"crit")end;if VectorToTarget and not IntoOrbit then fE[#fE+1]=c5(hi,hn+35,VectorStatus,"warn")end;fE[#fE+1]="</g>"return fE end;local function hu(eZ)return d(y(eZ*3.6,0)+0.5).." km/h"end;local function hv(fE)local hw=OrbitMapX;local hx=OrbitMapY;local hy=OrbitMapSize;local hz=4;local hA=15;local c6=0;local c7=0;local hB,hC,hD,hE;local function hF(type)local hG,bD,eZ,hH;if type=="Periapsis"then hG=orbit.periapsis.altitude;bD=orbit.timeToPeriapsis;eZ=orbit.periapsis.speed;hH=35 else hG=orbit.apoapsis.altitude;bD=orbit.timeToApoapsis;eZ=orbit.apoapsis.speed;hH=-35 end;fE[#fE+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c6+hH,c7-5,hw+hy/2-hB+hE,c7-5)fE[#fE+1]=c5(c6,c7,type)c7=c7+hA;local hq,cm=ci(hG)fE[#fE+1]=c5(c6,c7,hq..cm)c7=c7+hA;fE[#fE+1]=c5(c6,c7,d0(bD))c7=c7+hA;fE[#fE+1]=c5(c6,c7,hu(eZ))end;if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then hx=hx+hz;c6=hw+hy+hw/2+hz;c7=hx+hy/2+5+hz;hB=hy/4;hE=0;fE[#fE+1]=[[<g class="pbright txtorb txtmid">]]fE[#fE+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',hy+hw*2,hy+hx,hz,hz)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hD=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hB*2)hC=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hD*(1-orbit.eccentricity)hE=hB-orbit.periapsis.altitude/hD-planet.radius/hD;local hI=""if orbit.periapsis.altitude<=0 then hI='redout'end;fE[#fE+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hI,hw+hy/2+hE+hz,hx+hy/2+hz,hB,hC)fE[#fE+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hw+hy/2+hz,hx+hy/2+hz,planet.radius/hD)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hF("Apoapsis")end;c7=hx+hy/2+5+hz;c6=hw-hw/2+10+hz;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hF("Periapsis")end;fE[#fE+1]=c5(hw+hy/2+hz,planet.name,20+hz,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hJ=orbit.timeToApoapsis/orbit.period*2*math.pi;local hK=hB*math.cos(hJ)local hL=hC*math.sin(hJ)fE[#fE+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hw+hy/2+hK+hE+hz,hx+hy/2+hL+hz)end;fE[#fE+1]=[[</g>]]return fE else return fE end end;local function hM()if radarPanelID~=nil and al==0 then t(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then t(perisPanelID)perisPanelID=nil end else if al==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;local function hN(fE)local c6=50;local c7=525;local hO={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hP={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local hQ={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local hR={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if as then bW(hO,hP)table.insert(hO,"---------------------------------------")if VertTakeOff then table.insert(hO,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if ap~=-1 then if antigrav then if bN then table.insert(hO,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hO,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hO,"Alt-6: Begins Vertical Takeoff.")else table.insert(hO,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hO,"G: Begin BrakeLanding or Land")end else bW(hO,hQ)end;if AltitudeHold then table.insert(hO,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(hO,"---------------------------------------")bW(hO,hR)for i=1,#hO do c7=c7+12;fE[#fE+1]=c5(c6,c7,hO[i],"pdim txttick txtstart")end end;local hS={}function hS.HUDPrologue(fE)if not fo then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local hT=az;local hU=aA;local hV=az;local hW=aA;if fA()and not brightHud then hT=[[rgb(]]..d(D*0.4+0.5)..","..d(F*0.4+0.5)..","..d(E*0.3+0.5)..[[)]]hU=[[rgb(]]..d(D*0.3+0.5)..","..d(F*0.3+0.5)..","..d(E*0.2+0.5)..[[)]]end;fE[#fE+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],hT,hT,hV,hV,hU,hU,hW,hW,aJ,aK)return fE end;function hS.UpdateHud(fE)local cy=au;local f1=core.getVelocity()local eZ=vec3(f1):len()local gS=bQ;local hX=bR;local gc=hX;local gq=bQ;local h9=d(unit.getThrottle())local he=eZ*3.6;local ha=unit.getAxisCommandValue(0)local hY=fy(1770)local hZ=fz(310)if AtmoSpeedAssist and bP then ha=G;h9=G*100 end;local fC=fB()local gd="ROLL"local cF=unit.getClosestPlanetInfluence()>0;if h9==nil then h9=0 end;if not cF then if eZ>5 then gS=gR(f1)hX=gT(f1)else gS=0;hX=0 end;gd="YAW"end;if not as then fo,fp,_,_=fq(bL)else fo=true end;if fp>50000 and not as then local h_;if fp>200000 then h_=y(fp/200000,2).." su"else h_=y(fp/1000,1).." km"end;fE[#fE+1]=c5(hY,hZ,"PvP Boundary: "..h_,"pbright txtbig txtmid")end;fE[#fE+1]=ak;fE[#fE+1]=aE;fE[#fE+1]=aj;if b1%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then fD(fE,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)fD(fE,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)fD(fE,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b1=0 end;b1=b1+1;g4(fE,cy)if m()==0 or RemoteHud then if not fA()or brightHud then if cF then gb(fE,centerX,centerY,gc,gd,cF)gp(fE,gq,gc,centerX,centerY,cF,d(gT(f1)),eZ)else gb(fE,centerX,centerY,hX,gd,cF)gp(fE,gS,hX,centerX,centerY,cF,d(hX),eZ)end;gw(fE,cy,cF)gU(fE,f1,eZ,centerX,centerY)end end;h8(fE,fC,h9,ha)hd(fE,he)hh(fE)hv(fE)if showHelp then hN(fE)end;return fE end;function hS.HUDEpilogue(fE)fE[#fE+1]="</svg>"return fE end;function hS.ExtraData(fE)local i0=fy(1240)local i1=fz(55)local i2=i1+10;local i3;local i4=0;local fC=fB()if VertTakeOffEngine then fC=fC.."-VERTICAL"end;if TurnBurn then fC="TB-"..fC end;local i5=vec3(core.getWorldAcceleration()):len()/9.80665;i3=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()fE[#fE+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then i0=fy(1120)i1=fz(55)i2=i1+10 elseif as then local i6=fy(770)fE[#fE+1]=c5(i6,i1,"ATMOSPHERE","pdim txt txtend")fE[#fE+1]=c5(i6,i2,e("%.2f",at),"pdim txt txtend","")end;fE[#fE+1]=c5(i0,i1,"GRAVITY","pdim txt txtend")fE[#fE+1]=c5(i0,i2,e("%.2f",i3/9.80665),"pdim txt txtend")fE[#fE+1]=c5(i0,i1+20,"ACCEL","pdim txt txtend")fE[#fE+1]=c5(i0,i2+20,e("%.2f",i5),"pdim txt txtend")fE[#fE+1]=c5(fy(960),fz(180),fC,"txtbig txtmid")end;function hS.DrawOdometer(fE,ab,TotalDistanceTravelled,ac)local i3;local i7=0;local i8=0;local i4=0;if as then i4=LastMaxBrakeInAtmo else i4=LastMaxBrake end;maxThrust=a:maxForceForward()aN=l()i3=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if i3>0.1 then i8=aN*i3;i7=maxThrust/i3 end;fE[#fE+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],fy(660),fy(700),fz(35),fy(960),fz(55),fy(1240),fz(35),fy(1280))if m()==0 or RemoteHud then fE[#fE+1]=c5(fy(700),fz(20),e("Trip: %.2f km",ab),"txtstart")fE[#fE+1]=c5(fy(700),fz(30),e("Lifetime: %.2f Mm",TotalDistanceTravelled/1000),"txtstart")fE[#fE+1]=c5(fy(830),fz(20),"Trip Time: "..d0(ac),"txtstart")fE[#fE+1]=c5(fy(830),fz(30),"Total Time: "..d0(TotalFlightTime),"txtstart")fE[#fE+1]=c5(fy(970),fz(20),e("Mass: %.2f Tons",aN/1000),"txtstart")fE[#fE+1]=c5(fy(1240),fz(10),e("Max Brake: %.2f kN",i4/1000),"txtend")fE[#fE+1]=c5(fy(1240),fz(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if i3>0.1 then fE[#fE+1]=c5(fy(970),fz(30),e("Max Mass: %.2f Tons",i7/1000),"txtstart")fE[#fE+1]=c5(fy(1240),fz(20),e("Req Thrust: %.2f kN",i8/1000),"txtend")else fE[#fE+1]=c5(fy(970),fz(30),"Max Mass: n/a","txtstart")fE[#fE+1]=c5(fy(1240),fz(20),"Req Thrust: n/a","txtend")end end;fE[#fE+1]="</g>"return fE end;function hS.DrawWarnings(fE)return hh(fE)end;function hS.DisplayOrbitScreen(fE)return hv(fE)end;function hS.DisplayMessage(fE,hq)if hq~="empty"then local c7=310;for i9 in string.gmatch(hq,"([^\n]+)")do c7=c7+35;fE[#fE+1]=c5("50%",c7,i9,"msg")end end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function hS.DrawDeadZone(fE)fE[#fE+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function hS.UpdateRadar()if radar_1 then local ia=radar_1.getEntries()local ib=radar_1.getData()local ic=fy(1770)local id=fz(330)if#ia>0 then local ie=ib:find('identifiedConstructs":%[%]')if ie==nil and perisPanelID==nil then al=1;hM()end;if ie~=nil and perisPanelID~=nil then hM()end;if radarPanelID==nil then hM()end;aj=c5(ic,id,"Radar: "..#ia.." contacts","pbright txtbig txtmid")local ig={}for db,dc in pairs(ia)do if radar_1.hasMatchingTransponder(dc)==1 then table.insert(ig,dc)end end;if#ig>0 then local c7=fz(15)local c6=fy(1370)aj=aj..c5(c6,c7,"Friendlies In Range","pbright txtbig txtmid")for db,dc in pairs(ig)do c7=c7+20;aj=aj..c5(c6,c7,radar_1.getConstructName(dc),"pdim txtmid")end end else local ih;ih=ib:find('worksInEnvironment":false')if ih then aj=c5(ic,id,"Radar: Jammed","pbright txtbig txtmid")else aj=c5(ic,id,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then al=0;hM()end end end end;function hS.DrawSettings(fE)if#bT>0 then local c6=fy(640)local c7=fz(200)fE[#fE+1]=[[<g class="pbright txtvspd txtstart">]]for db,dc in pairs(bT)do fE[#fE+1]=c5(c6,c7,dc..": ".._G[dc])c7=c7+20;if db%12==0 then c6=c6+fy(350)c7=fz(200)end end;fE[#fE+1]=c5(fy(640),fz(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fE[#fE+1]="</g>"end;return fE end;return hS end;local function ii()local function ij()local function ik(il,im)return il.name<im.name end;bV={}for db,dc in pairs(b2[0])do bV[#bV+1]={name=dc.name,index=db}end;table.sort(bV,ik)end;local dd={}function dd.UpdateAtlasLocationsList()ij()end;function dd.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local io=bV[AutopilotTargetIndex].index;local ip=b2[0][io]if ip.center then AutopilotTargetName=ip.name;aa=b7[0][io]if CustomTarget~=nil then if at==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ip;for _,dc in pairs(b7[0])do if dc.name==CustomTarget.planetname then aa=dc;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function dd.adjustAutopilotTargetIndex(g8)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if g8==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bV then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bV end end;if AutopilotTargetIndex==0 then bc.UpdateAutopilotTarget()else local io=bV[AutopilotTargetIndex].index;local ip=b2[0][io]if ip.name=="Space"then if g8==nil then bc.adjustAutopilotTargetIndex()else bc.adjustAutopilotTargetIndex(1)end else bc.UpdateAutopilotTarget()end end else a0="Disengage autopilot before changing Interplanetary Helper"end end;function dd.findAtlasIndex(iq)for db,dc in pairs(iq)do if dc.name and dc.name==CustomTarget.name then return db end end;return-1 end;for db,dc in pairs(SavedLocations)do table.insert(b2[0],dc)end;ij()dd.UpdateAutopilotTarget()return dd end;local function ir()local is={}local function it(eZ)if not as then return b8.computeDistanceAndTime(eZ,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b8.computeDistanceAndTime(eZ,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;local function iu(eZ)return b8.computeDistanceAndTime(eZ,AutopilotEndSpeed,l(),a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;function is.GetAutopilotBrakeDistanceAndTime(eZ)return it(eZ)end;function is.GetAutopilotTBBrakeDistanceAndTime(eZ)return iu(eZ)end;local function iv(iw,ix,iy)ix=ix:project_on_plane(iw)iy=iy:project_on_plane(iw)return n(ix:cross(iy):dot(iw),ix:dot(iy))end;local function iz()local iA=-1;local iB=-1;if vBooster then iA=vBooster.distance()end;if hover then iB=hover.distance()end;if iA~=-1 and iB~=-1 then if iA<iB then return iA else return iB end elseif iA~=-1 then return iA elseif iB~=-1 then return iB else return-1 end end;function is.APTick()as=j()>0;at=j()au=core.getAltitude()ap=iz()bD=q()bj=bD;if antigrav then bN=antigrav.getState()==1 end;local iC=1;local iD=1;local iE=bD-bj;local iF=-math.deg(iv(bE,bH,bF))local iG=math.deg(iv(bG,bH,bF))local g8=bJ*-1;bi=as and iF<-YawStallAngle or iF>YawStallAngle or iG<-PitchStallAngle or iG>PitchStallAngle;local iH=system.getMouseDeltaX()local iI=system.getMouseDeltaY()if InvertMouse and not Z then iI=-iI end;T=0;X=0;S=0;sys=b7[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=ba(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)if au==0 then au=(bL-planet.center):len()-planet.radius end;local i3=planet:getGravity(core.getConstructWorldPos()):len()*l()bk=0;b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and Z then if not be then af=af+iH;ag=ag+iI end else af=0;ag=0 end else af=af+iH;ag=ag+iI;ai=math.sqrt(af*af+ag*ag)if not Z and m()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then T=T-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then T=T-(af+DeadZone)*MouseXSensitivity else T=0 end;if ag>0 and ag>DeadZone then S=S-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then S=S-(ag+DeadZone)*MouseYSensitivity else S=0 end else af=0;ag=0;if userControlScheme=="mouse"then S=(-utils.smoothstep(iI,-100,100)+0.5)*2*iC;T=(-utils.smoothstep(iH,-100,100)+0.5)*2*iD end end end end;local iJ=bI>8334;if bI>SpaceSpeedLimit/3.6 and not as and not Autopilot and not iJ then a0="Space Speed Engine Shutoff reached"cb(0)end;if not iJ and LastIsWarping then if not BrakeIsOn then cL()end;if Autopilot then cD()end end;LastIsWarping=iJ;if as and at>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bI<bn/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then W=1 else W=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local iK=false;if CustomTarget~=nil then iK=cM(CustomTarget.position-bL,0.01)else iK=cM(vec3(bH),0.01)end;bg=true;if iK and(c(bR)<2 or c(bQ)>85)and bI>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;P=true;am=false;ao=true;Autopilot=false;cY()elseif as and AtmoSpeedAssist then cb(1)else ce(d(bn))end elseif bI>O then cM(vec3(bH),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bI>O then cM(-vec3(bH))end end;if not ProgradeIsOn and am and not IntoOrbit then if at==0 then P=true;cY()am=false;ao=true else am=false;cD()end end;if ao and CustomTarget~=nil and(au<HoldAltitude+200 and au>HoldAltitude-200)and bI*3.6>bn-100 and c(bK)<20 and at>=0.1 and(CustomTarget.position-bL):len()>2000+au then cD()ao=false end;if VertTakeOff then bg=true;local iL=HoldAltitude;if bK<-30 then a0="Unable to achieve lift. Safety Landing."ae=0;bg=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bN or HoldAltitude<planet.spaceEngineMinAltitude then if bN then iL=antigrav.getBaseAltitude()end;if au<iL-100 then bo=0;ae=15;BrakeIsOn=false elseif bK>0 then BrakeIsOn=true;ae=0 elseif bK<-30 then BrakeIsOn=true;ae=15 elseif au>=iL then if bN then if Autopilot or VectorToTarget then cn()else BrakeIsOn=true;VertTakeOff=false end;a0="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a0="VTO complete. Engaging Horizontal Flight"cn()end;ae=0 end else if at>0.08 then bo=0;BrakeIsOn=false;ae=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bA then bo=0;ae=20 else ae=0;bo=36;ce(3500)end else bg=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;bw=iL;bv=true;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iM=r(bo-bQ,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(iM)local iN=r(vTpitchPID:get(),-1,1)S=iN end end;if IntoOrbit then local cV;local iO=false;local iP,iQ=ci(bw)local iR=iP..iQ;if bx==nil then bx=planet;if VectorToTarget then bx=aa end end;if not bv then bw=math.floor(bx.radius+bx.surfaceMaxAltitude+1000)if bx.hasAtmosphere then bw=math.floor(bx.radius+bx.noAtmosphericDensityAltitude+1000)end;bv=true end;if bu.VectorToTarget then cV=CustomTarget.position-bL end;local iS,iT=ba(bx):escapeAndOrbitalSpeed((bL-bx.center):len()-bx.radius)local iU=bR;if not bs then local iV=false;local iW=false;cb(0)br=0;bp="Aligning to orbital path - OrbitHeight: "..iR;if bu.VectorToTarget then cM(cV:normalize():project_on_plane(bJ))iO=bF:dot(cV:project_on_plane(bE):normalize())>0.95 else cM(bH)iO=iF<0.5;if bI<150 then iO=true end end;S=0;bq=0;if bQ<=bq+1 and bQ>=bq-1 then iV=true else iV=false end;if iU<=br+1 and iU>=br-1 then iW=true else iW=false end;if iV and iW and iO then bq=nil;br=nil;bs=true end else if bu.VectorToTarget then cM(cV:normalize():project_on_plane(bJ))elseif bI>150 then cM(bH)end;S=0;if bu.VectorToTarget then local a6,_=b8.computeDistanceAndTime(bI,bn/3.6,l(),0,0,LastMaxBrake)if by and cV:len()>15000+a6+au then bp="Orbiting to Target"if orbit.periapsis.altitude<bx.noAtmosphericDensityAltitude then by=false end elseif by or cV:len()<15000+a6+au then a0="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;P=true;ao=true;bu.VectorToTarget,bu.AutopilotAlign=false,false;co()cY()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bw*0.9 and au<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;cb(0)bq=0;if not bu.VectorToTarget then a0="Orbit complete"co()end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..iR;bt=true;ce(iT*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iX=bK;local iY=au-bw;local iZ=c(iY)if bK<10 and c(bQ)<10 and iZ<100 then iX=bK*2 end;if iX<10 and c(bQ)<10 and iZ<100 then iX=iX*2 end;if iX<5 and c(bQ)<5 and iZ<100 then iX=iX*4 end;VSpdPID:inject(iX)bq=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(iY)bq=r(bq-r(OrbitAltPID:get(),-15,15),-90,90)end end else local i_=2.75;local j0=c(p(iS*i_))local j1=j0%50;if j1>0 then j0=j0-j1+50 end;BrakeIsOn=false;if au<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..iR;bq=utils.map(bK,200,0,-15,80)elseif au>=bw*0.8 and au<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..iR;j0=j0*0.75;bq=utils.map(bK,100,-100,-15,65)elseif au>=bw*1.15 and au<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..iR;j0=j0*0.75;if bK<0 or bt then bq=utils.map(au,bw*1.5,bw*1.01,-30,0)else bq=utils.map(au,bw*0.99,bw*1.5,0,30)end elseif au>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..iR;bq=-85;local j2=utils.map(bK,-150,-400,1,0.55)j0=j0*j2 end;ce(d(j0))end end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local j3=bq-bQ;OrbitPitchPID:inject(j3)local j4=r(OrbitPitchPID:get(),-0.5,0.5)S=j4 end end;if Autopilot and at==0 and not am then local j5,j6=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local j7=(CustomTarget.position-aa.center):normalize()local j8=j7:project_on_plane((aa.center-bL):normalize()):normalize()local j9=aa.center+j8*(aa.radius+AutopilotTargetOrbit)local ja=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bL-j9):len()<(bL-ja):len()then j5=j9;AutopilotTargetCoords=j5 else j5=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))AutopilotTargetCoords=j5 end;cr(aa,AutopilotTargetCoords)j6=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;j6=true;TargetSet=true;AutopilotRealigned=true;j5=CustomTarget.position+(bL-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local j7=(bL+bH*100000-aa.center):normalize()local j8=j7:project_on_plane((aa.center-bL):normalize()):normalize()if j8:len()<1 then j7=(bL+bF*100000-aa.center):normalize()j8=j7:project_on_plane((aa.center-bL):normalize()):normalize()end;j5=aa.center+j8*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=j5;TargetSet=true;j6=true;AutopilotRealigned=true;cr(aa,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(j5)-bL):len()local hr,em,en=b7:getPlanetarySystem(0):castIntersections(bL,bH:normalize(),function(ea)if ea.noAtmosphericDensityAltitude>0 then return ea.radius+ea.noAtmosphericDensityAltitude else return ea.radius+ea.surfaceMaxAltitude*1.5 end end)local hs=em;if en~=nil and em~=nil then hs=math.min(en,em)end;if hs~=nil and hs<AutopilotDistance and hr.name==aa.name then AutopilotDistance=hs end;local iK=true;local jb=(aa.center-(bL+vec3(bH):normalize()*AutopilotDistance)):len()-aa.radius;local hq,cm=ci(jb)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hq..'", "unit":"'..cm..'"}')local a6,a7;if not TurnBurn then a6,a7=it(bI)else a6,a7=iu(bI)end;if bI>300 and AutopilotAccelerating then local cV=vec3(j5)-bL;local jc=r(math.deg(iv(bE,bH:normalize(),cV:normalize()))*bI/500,-90,90)local jd=r(math.deg(iv(bG,bH:normalize(),cV:normalize()))*bI/500,-90,90)if c(jc)<20 and c(jd)<20 then jc=jc*2;jd=jd*2 end;if c(jc)<2 and c(jd)<2 then jc=jc*2;jd=jd*2 end;local iF=-math.deg(iv(bE,bF,bH:normalize()))local iG=-math.deg(iv(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jd-iG)local je=r(apPitchPID:get(),-1,1)S=S+je;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jc-iF)local jf=r(apYawPID:get(),-1,1)T=T+jf;j6=true;if c(jc)>2 or c(jd)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jb<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(jb)end end;if not AutopilotCruising and not AutopilotBraking and not j6 then iK=cM((j5-bL):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then iK=cM(-vec3(bH):normalize())end;if AutopilotAccelerating then if not N then BrakeIsOn=false;cb(AutopilotInterplanetaryThrottle)G=y(AutopilotInterplanetaryThrottle,2)N=true end;local jg=unit.getThrottle()if AtmoSpeedAssist then jg=G end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jg==0 and N then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cb(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cb(0)N=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;W=1 end;if TurnBurn then cb(1,true)end;local _,iT=ba(aa):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)local cV;if CustomTarget~=nil then cV=CustomTarget.position-bL end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then a0="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=iT and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a0="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cb(0)N=false;ProgradeIsOn=true;am=true;cr(aa,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iT=ba(aa):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)if bI<=iT then if CustomTarget~=nil then if bH:normalize():dot(cV:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;cr(aa,CustomTarget.position)WaypointSet=true end else a0="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cb(0)N=false;ProgradeIsOn=true;am=true;BrakeIsOn=false;cr(aa,CustomTarget.position)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a0="Autopilot completed, orbit established"W=0;cb(0)N=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;am=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jg=unit.getThrottle()if AtmoSpeedAssist then jg=G end;if jg>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iK then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif iK then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not N then cb(AutopilotInterplanetaryThrottle,true)G=y(AutopilotInterplanetaryThrottle,2)N=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a0="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W=0;cb(0)N=false;ProgradeIsOn=true;am=true;cr(aa,CustomTarget.position)end;if Y then bg=true;local jd=0;local f2=bL+vec3(unit.getMasterPlayerRelativePosition())local jh=f2-bL;local ji=vec3(jh):project_on(bF):len()local jj=vec3(jh):project_on(bG):len()local ai=math.sqrt(ji*ji+jj*jj)cM(jh:normalize())local jk=40;local jl=ai<jk;local jm=100;local jn=r((ai-jk)/2,10,jm)S=0;local iK=c(T)<0.1;if iK and bI<jn and not jl then BrakeIsOn=false;jd=-20 else BrakeIsOn=true;jd=0 end;local jo=0;if c(jd-bQ)>jo then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jd-bQ)local je=pitchPID:get()S=je end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cF=unit.getClosestPlanetInfluence()>0;local jp=HoldAltitude-au;local jq=500+bI;local jr=1;if AutoTakeoff then jr=r(bI/100,0.1,1)end;local jd=(utils.smoothstep(jp,-jq,jq)-0.5)*2*MaxPitch*jr;if not Reentry and not am and not VectorToTarget and bF:dot(bH:normalize())<0.99 then jd=(utils.smoothstep(jp,-jq*r(20-19*at*10,1,20),jq*r(20-19*at*10,1,20))-0.5)*2*MaxPitch*r(2-at*10,1,2)*jr end;if not AltitudeHold then jd=0 end;if LockPitch~=nil then if cF and not IntoOrbit then jd=LockPitch else LockPitch=nil end end;bg=true;local js=S;if Reentry then local jt=d(bn)local ju,jv=b8.computeDistanceAndTime(bI,jt/3.6,l(),0,0,LastMaxBrake-planet.gravity*9.8*l())local jw=au-(planet.noAtmosphericDensityAltitude+5000)if not bP and au>planet.noAtmosphericDensityAltitude+5000 and bI<=jt/3.6 and bI>jt/3.6-10 and c(bH:normalize():dot(bF))>0.9 then cb(0)elseif bP and(ju>-1 and jw<=ju or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;ce(jt,true)if not P then jd=-80;if at>0.02 then a0="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jd=0;bg=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then bg=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then ce(jt)if not bP and s:getTargetSpeed(axisCommandId.longitudinal)==bn then P=false;Reentry=false;bg=true end end end;if bI>O and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cM(vec3(bH))end;if(VectorToTarget or an)and AutopilotTargetIndex>0 and at>0.01 then local cV;if CustomTarget~=nil then cV=CustomTarget.position-bL else cV=aa.center-bL end;local jc=math.deg(iv(bJ:normalize(),bH,cV))*2;local jx=math.rad(c(bR))if bI>minRollVelocity and at>0.01 then local jy=r(90-jd*2,-90,90)bk=r(jc*2,-jy,jy)local jz=jc;jc=r(r(jc,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(jx)+4*(bQ-jd)*math.sin(math.rad(bR)),-YawStallAngle*0.80,YawStallAngle*0.80)jd=r(r(jd*math.cos(jx),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(r(c(jz)*math.sin(jx),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bk=0;jc=r(jc,-YawStallAngle*0.80,YawStallAngle*0.80)end;local jA=iF-jc;if not bi and bI>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jA)local jf=r(yawPID:get(),-1,1)T=T+jf elseif as and ap>-1 or bI<minRollVelocity then cM(cV)elseif bi and at>0.01 then if(iF<-YawStallAngle or iF>YawStallAngle)and at>0.01 then cM(bH)end;if(iG<-PitchStallAngle or iG>PitchStallAngle)and at>0.01 then jd=r(bQ-iG,bQ-PitchStallAngle*0.80,bQ+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local iL=planet:getAltitude(CustomTarget.position)local jw=math.sqrt(cV:len()^2-(au-iL)^2)local jB=LastMaxBrakeInAtmo;if jB then jB=jB*r(bI/100,0.1,1)*at else jB=LastMaxBrake end;if at<0.01 then jB=LastMaxBrake end;local jC=bH:len()-c(bK)local jD=vec3(core.getWorldAirFrictionAcceleration())local jE=math.sqrt(jD:len()-jD:project_on(g8):len())*l()if bI>100 then a6,a7=b8.computeDistanceAndTime(bI,100,l(),0,0,jB+jE)local jF,jG=b8.computeDistanceAndTime(100,0,l(),0,0,jB/2)a6=a6+jF else a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,jB/2)end;StrongBrakes=true;if not an and not Reentry and jw<=a6+bI*iE/2 and(bH:project_on_plane(bJ):normalize():dot(cV:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cb(0)if AltitudeHold then cp()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jC<0.1 or jw<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jw)then if not bN then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jw end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local cV=CustomTarget.position-bL;local iL=planet:getAltitude(CustomTarget.position)local jw=math.sqrt(cV:len()^2-(au-iL)^2)local jB=LastMaxBrakeInAtmo;if jB then a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,jB/2)StrongBrakes=true;if jw<=a6+bI*iE/2 and bH:project_on_plane(bJ):normalize():dot(cV:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;P=true;am=false;ao=true;Autopilot=false;cY()end end;LastDistanceToTarget=jw end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or IntoOrbit or Reentry)then if not by and not IntoOrbit then bw=HoldAltitude;bv=true;if VectorToTarget then bu.VectorToTarget=true end;co()VectorToTarget=false;bs=true end end;if bi and at>0.01 and ap==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then cM(bH)jd=r(bQ-iG,bQ-PitchStallAngle*0.80,bQ+PitchStallAngle*0.80)end;S=js;local d6=-1;if BrakeLanding then jd=0;local jH=false;local jI=30;if b9~=nil and b9>0 then local jE=0;local jJ=r(at,0.4,2)local jB=LastMaxBrakeInAtmo*r(bI/100,0.1,1)*jJ;local jK=b9*jJ+jB+jE-i3;local jL=jB/2+jE-i3;local jM=bI-math.sqrt(c(jL/2)*20/(0.5*l()))*utils.sign(jL)if jM<0 then jM=0 end;local jN;if bI>100 then local jO,_=b8.computeDistanceAndTime(bI,100,l(),0,0,jB)local jP,_=b8.computeDistanceAndTime(100,0,l(),0,0,math.sqrt(jB))jN=jO+jP else jN=b8.computeDistanceAndTime(bI,0,l(),0,0,math.sqrt(jB))end;if jN<20 then BrakeIsOn=false else local jQ=0;if jM>100 then local jR,_=b8.computeDistanceAndTime(jM,100,l(),0,0,jK)local jS,_=b8.computeDistanceAndTime(100,0,l(),0,0,b9*jJ+math.sqrt(jB)+jE-i3)jQ=jR+jS else jQ,_=b8.computeDistanceAndTime(jM,0,l(),0,0,b9*jJ+math.sqrt(jB)+jE-i3)end;jQ=(jQ+15+bI*iE)*1.1;local jT=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jT then local iL=planet:getAltitude(CustomTarget.position)local jU=au-iL-100;local cV=CustomTarget.position-bL;local jV=math.sqrt(cV:len()^2-(au-iL)^2)if jV>100 then jT=false elseif jU<=jQ or jQ==-1 then BrakeIsOn=true;jH=true else BrakeIsOn=false;jH=true end end;if not jT and CalculateBrakeLandingSpeed then if jQ>=jI then BrakeIsOn=true else BrakeIsOn=false end;jH=true end end end;if not bP then cb(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)d6=ap;if d6>-1 then bg=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-g8)<0.999 then BrakeIsOn=true elseif bK<-brakeLandingRate and not jH then BrakeIsOn=true elseif not jH then BrakeIsOn=false end end;if AutoTakeoff or an then local hr,en,em;if AutopilotTargetCoords~=nil then hr,en,em=b7:getPlanetarySystem(0):castIntersections(bL,(AutopilotTargetCoords-bL):normalize(),function(ea)return ea.radius+ea.noAtmosphericDensityAltitude end)end;if bN then if au>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cb(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(jd)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bP and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif an and bI<O then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;cb(0)elseif an then cb(0)BrakeIsOn=true end elseif an and at==0 and aa~=nil and(hr==nil or hr.name==aa.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bP then cb(0)end;AutopilotAccelerating=true end end;local jW=ap>-1;local jX=bQ;if(VectorToTarget or an)and not jW and bI>minRollVelocity and at>0.01 then local jx=math.rad(c(bR))jX=bQ*c(math.cos(jx))+iG*math.sin(jx)end;local jY=r(jd-jX,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then jY=r(jd-jX,-85,MaxPitch)elseif at<0.01 then jY=r(jd-jX,-MaxPitch,MaxPitch)end;if c(bR)<5 or VectorToTarget or BrakeLanding or jW or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jY)local je=pitchPID:get()S=S+je end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ap=iz()return is end;function script.onStart()local function jZ()local function j_(k0)local k1=dbHud_1.hasKey;for db,dc in pairs(k0)do if k1(dc)then local cl=f(dbHud_1.getStringValue(dc))if cl~=nil then _G[dc]=cl;aL=true end end end end;if dbHud_1 then local k1=dbHud_1.hasKey;if not useTheseSettings then j_(bZ())coroutine.yield()j_(b)else j_(b)a0="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5;aL=false end;coroutine.yield()if aL then a0="Loaded Saved Variables"L=y(ResolutionX/2,0)M=y(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bg=autoRollPreference;bn=AtmoSpeedLimit;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]elseif not useTheseSettings then a0="No Saved Variables Found - Exit HUD to save settings"end else a0="No databank found. Attach one to control unit and rerun the autoconfigure to save preferences and locations"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a0="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function k2()local function k3(k4,k5)if k4>k5 then k5=k4 end;if ContainerOptimization>0 then k5=k5-k5*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then k5=k5-k5*FuelTankOptimization*0.05 end;return k5 end;local k6=core.getElementNameById;local k7=fuelX~=0 and fuelY~=0;for db in pairs(av)do local type=core.getElementTypeById(av[db])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(av[db])),'^.*vertical.*$')then bM=true end end;if o(type,'^.*Space Engine$')then bB=true;if o(tostring(core.getElementTagsById(av[db])),'^.*vertical.*$')then local k8=core.getElementRotationById(av[db])if k8[4]<0 then if p(-k8[4],0.1)==0.5 then bz=true end else if p(k8[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then Q=true end;if type=="Dynamic Core Unit"then local k9=h(av[db])if k9>10000 then C=128 elseif k9>1000 then C=64 elseif k9>150 then C=32 end end;aS=aS+h(av[db])if k7 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local k9=h(av[db])local ka=k(av[db])local k4=0;local g0=q()if type=="Atmospheric Fuel Tank"then local k5=400;local kb=35.03;if k9>10000 then k5=51200;kb=5480 elseif k9>1300 then k5=6400;kb=988.67 elseif k9>150 then k5=1600;kb=182.67 end;k4=ka-kb;if fuelTankHandlingAtmo>0 then k5=k5+k5*fuelTankHandlingAtmo*0.2 end;k5=k3(k4,k5)aP[#aP+1]={av[db],k6(av[db]),k5,kb,k4,g0}end;if type=="Rocket Fuel Tank"then local k5=320;local kb=173.42;if k9>65000 then k5=40000;kb=25740 elseif k9>6000 then k5=5120;kb=4720 elseif k9>700 then k5=640;kb=886.72 end;k4=ka-kb;if fuelTankHandlingRocket>0 then k5=k5+k5*fuelTankHandlingRocket*0.1 end;k5=k3(k4,k5)aR[#aR+1]={av[db],k6(av[db]),k5,kb,k4,g0}end;if type=="Space Fuel Tank"then local k5=2400;local kb=182.67;if k9>10000 then k5=76800;kb=5480 elseif k9>1300 then k5=9600;kb=988.67 end;k4=ka-kb;if fuelTankHandlingSpace>0 then k5=k5+k5*fuelTankHandlingSpace*0.2 end;k5=k3(k4,k5)aQ[#aQ+1]={av[db],k6(av[db]),k5,kb,k4,g0}end end end;if not bM then VertTakeOff,VertTakeOffEngine=false,false end end;local function kc()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(as or not as and au<10000)then for _,dc in pairs(door)do dc.toggle()end end;if switch then for _,dc in pairs(switch)do dc.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,dc in pairs(forcefield)do dc.toggle()end end;if antigrav then bN=antigrav.getState()==1;if bN and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if Q then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;local kd=d5()if kd~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not Q then GearExtended=true end else BrakeIsOn=false end;if bh~=nil then s:setTargetGroundAltitude(bh)if bh==0 and not Q then GearExtended=true;BrakeIsOn=true end else bh=a:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if as and kd~=-1 then b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function ke(kf,kg,kh,ki,c6,c7,kj,kk,kl,km)local kn={enableName=kf,disableName=kg,width=kh,height=ki,x=c6,y=c7,toggleVar=kj,toggleFunction=kk,drawCondition=kl,hovered=false}if km then table.insert(aI,kn)else table.insert(aH,kn)end;return kn end;local function ko(kp)if not bS then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif kp=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif kp=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif kp=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bT=bZ(kp)showHud=false else bT={}showHud=true end end;local function kq()bS=not bS;if bS then aG=aI;a0="Hold SHIFT to see Settings"bU=showHud else aG=aH;a0="Hold SHIFT to see Control Buttons"ko()showHud=bU end end;local function kr(dc)_G[dc]=not _G[dc]if _G[dc]then a0=dc.." set to true"else a0=dc.." set to false"end;if dc=="showHud"then bU=_G[dc]elseif dc=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local function ks()local kt=50;local ku=340;local c6=500;local c7=aK/2-400;local kv=0;for db,dc in pairs(bZ("boolean"))do if type(_G[dc])=="boolean"then ke(dc,dc,ku,kt,c6,c7,function()return _G[dc]end,function()kr(dc)end,function()return true end,true)c7=c7+kt+20;if kv==7 then c6=c6+ku+20;c7=aK/2-400;kv=0 else kv=kv+1 end end end;ke("Control View","Control View",ku,kt,10,aK/2-500,function()return true end,kq,function()return true end,true)ke("View Handling Settings",'Hide Handling Settings',ku,kt,10,aK/2-(500-kt),function()return showHandlingVariables end,function()ko("handling")end,function()return true end,true)ke("View Hud Settings",'Hide Hud Settings',ku,kt,10,aK/2-(500-kt*2),function()return showHudVariables end,function()ko("hud")end,function()return true end,true)ke("View Physics Settings",'Hide Physics Settings',ku,kt,10,aK/2-(500-kt*3),function()return showPhysicsVariables end,function()ko("physics")end,function()return true end,true)end;local function kw()local function kx()if dbHud_1 then local position=bL;local fU=planet.name..". "..#SavedLocations;if radar_1 then local dT,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dT~=nil and dT~=""then fU=fU.." "..radar_1.getConstructName(dT)end end;local cJ={}cJ={position=position,name=fU,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cJ;table.insert(b2[0],cJ)bc.UpdateAtlasLocationsList()a0="Location saved as "..fU else a0="Databank must be installed to save locations"end end;local function ky()TurnBurn=not TurnBurn end;local function kz(kA)if kA==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;Y=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kB()kz(1)end;local function kC()local cI=-1;cI=bc.findAtlasIndex(b2[0])if cI>-1 then table.remove(b2[0],cI)end;cI=-1;cI=bc.findAtlasIndex(SavedLocations)if cI~=-1 then a0=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cI)end;bc.adjustAutopilotTargetIndex()bc.UpdateAtlasLocationsList()end;local function kD()local fU=AutopilotTargetName;if fU==nil then local hq,cm=ci((bL-CustomTarget.position):len())fU=CustomTarget.name.." "..hq..cm end;if fU==nil then fU="None"end;return"Engage Autopilot: "..fU end;local function kE()local fU=AutopilotTargetName;if fU==nil then fU=CustomTarget.name end;if fU==nil then fU="None"end;return"Disable Autopilot: "..fU end;local kt=50;local ku=260;local kF=ke("Enable Brake Toggle","Disable Brake Toggle",ku,kt,aJ/2-ku/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a0="Brakes in Toggle Mode"else a0="Brakes in Default Mode"end end)ke("Align Prograde","Disable Prograde",ku,kt,aJ/2-ku/2-50-kF.width,aK/2-kt+380,function()return ProgradeIsOn end,kB)ke("Align Retrograde","Disable Retrograde",ku,kt,aJ/2-ku/2+kF.width+50,aK/2-kt+380,function()return RetrogradeIsOn end,kz,function()return at==0 end)local kG=ke(kD,kE,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,cD)ke("Save Position","Save Position",200,kG.height,kG.x+kG.width+30,kG.y,function()return false end,kx,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)ke("Update Position","Update Position",200,kG.height,kG.x+kG.width+30,kG.y,function()return false end,cG,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ke("Clear Position","Clear Position",200,kG.height,kG.x-200-30,kG.y,function()return true end,kC,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kt=60;ku=300;local c6=10;local c7=aK/2-500;ke("Show Help","Hide Help",ku,kt,c6,c7,function()return showHelp end,function()showHelp=not showHelp end)c7=c7+kt+20;ke("View Settings","View Settings",ku,kt,c6,c7,function()return true end,kq)local c7=aK/2-300;ke("Enable Turn and Burn","Disable Turn and Burn",ku,kt,c6,c7,function()return TurnBurn end,ky)ke("Horizontal Takeoff Mode","Vertical Takeoff Mode",ku,kt,c6+ku+20,c7,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a0="Vertical Takeoff Mode"else a0="Horizontal Takeoff Mode"end end,function()return bM end)c7=c7+kt+20;ke("Show Orbit Display","Hide Orbit Display",ku,kt,c6,c7,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a0="Orbit Display Enabled"else a0="Orbit Display Disabled"end end)ke("Engage Orbiting","Cancel Orbiting",ku,kt,c6+ku+20,c7,function()return IntoOrbit end,co,function()return at==0 and unit.getClosestPlanetInfluence()>0 end)c7=c7+kt+20;ke("Glide Re-Entry","Cancel Glide Re-Entry",ku,kt,c6,c7,function()return Reentry end,function()am=true;kB()end,function()return planet.hasAtmosphere and not as end)ke("Parachute Re-Entry","Cancel Parachute Re-Entry",ku,kt,c6+ku+20,c7,function()return Reentry end,cY,function()return planet.hasAtmosphere and not as end)c7=c7+kt+20;ke("Engage Follow Mode","Disable Follow Mode",ku,kt,c6,c7,function()return Y end,cq,function()return m()==1 end)ke("Enable Repair Arrows","Disable Repair Arrows",ku,kt,c6+ku+20,c7,function()return aT end,function()aT=not aT;if aT then a0="Repair Arrows Enabled"else a0="Repair Arrows Diabled"end end,function()return m()==1 end)c7=c7+kt+20;if not ExternalAGG then ke("Enable AGG","Disable AGG",ku,kt,c6,c7,function()return bN end,c_,function()return antigrav~=nil end)end;c7=c7+kt+20;ke(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,ku*2,kt,c6,c7,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})jZ()coroutine.yield()k2()coroutine.yield()bd=ir()kc()ks()kw()aG=aH;coroutine.yield()b2=dd()b6=de()b7=b6(dd())b8=ew()ba=f0()bb=fn()bc=ii()bd=ir()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,dc in pairs(door)do dc.toggle()end end;if switch then for _,dc in pairs(switch)do dc.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,dc in pairs(forcefield)do dc.toggle()end end;d7()if button then button.activate()end;if SetWaypointOnExit then cr(planet,bL)end end;function script.onTick(kH)if kH=="tenthSecond"then local function kI()local kJ=system.createData;local kK=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=kK(panelInterplanetary,"value")interplanetaryHeaderText=kJ('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=kK(panelInterplanetary,"value")widgetDistanceText=kJ('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=kK(panelInterplanetary,"value")widgetTravelTimeText=kJ('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=kK(panelInterplanetary,"value")widgetMaxMassText=kJ('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=kK(panelInterplanetary,"value")widgetTargetOrbitText=kJ('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=kK(panelInterplanetary,"value")widgetCurBrakeDistanceText=kJ('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=kK(panelInterplanetary,"value")widgetCurBrakeTimeText=kJ('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=kK(panelInterplanetary,"value")widgetMaxBrakeDistanceText=kJ('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=kK(panelInterplanetary,"value")widgetMaxBrakeTimeText=kJ('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=kK(panelInterplanetary,"value")widgetTrajectoryAltitudeText=kJ('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function kL()t(panelInterplanetary)panelInterplanetary=nil end;local function kM()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bL):len()else AutopilotDistance=(CustomTarget.position-bL):len()end end;local eZ=bI;local jg=unit.getThrottle()/100;if AtmoSpeedAssist then jg=G end;local kN,kO=b8.computeDistanceAndTime(bI,MaxGameVelocity,l(),a:maxForceForward()*jg,warmup,0)local a6,a7;if not TurnBurn then a6,a7=bd.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a6,a7=bd.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,kP;if not TurnBurn and eZ>0 then _,kP=bd.GetAutopilotBrakeDistanceAndTime(eZ)else _,kP=bd.GetAutopilotTBBrakeDistanceAndTime(eZ)end;local kQ=0;local kR=0;if AutopilotCruising or not Autopilot and eZ>5 then kR=b8.computeTravelTime(eZ,0,AutopilotDistance)elseif a6+kN<AutopilotDistance then kQ=AutopilotDistance-(a6+kN)kR=b8.computeTravelTime(8333.0556,0,kQ)else local kS=(AutopilotDistance-a6)/kN;kN=AutopilotDistance-a6;kO=kO*kS end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return kR elseif AutopilotBraking then return kP elseif AutopilotCruising then return kR+kP else return kO+a7+kR end end;local function kT()local kU=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()return kU end;if at>0 and not WasInAtmo then if not bP and AtmoSpeedAssist and(AltitudeHold or Reentry)then cb(1)K=false end end;if bO~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bO then ce(bO,TRUE)else bO=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then kI()end;if AutopilotTargetName~=nil then local kV=CustomTarget~=nil;planetMaxMass=kT()u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=kM()if kV and not Autopilot then ai=(bL-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bL):len()end;if not TurnBurn then a6,a7=bd.GetAutopilotBrakeDistanceAndTime(bI)a8,a9=bd.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a6,a7=bd.GetAutopilotTBBrakeDistanceAndTime(bI)a8,a9=bd.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hq,cm=ci(ai)u(widgetDistanceText,'{"label": "distance", "value": "'..hq..'", "unit":"'..cm..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..d0(travelTime)..'", "unit":""}')hq,cm=ci(a6)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hq..'", "unit":"'..cm..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..d0(a7)..'", "unit":""}')hq,cm=ci(a8)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hq..'", "unit":"'..cm..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..d0(a9)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')hq,cm=ci(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",hq)..'", "unit":"'..cm..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if at==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else kL()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif kH=="oneSecond"then local function kW(i3,kX)if i3==nil then i3=core.g()end;i3=y(i3,5)if kX~=nil and kX or(aO==nil or aO~=i3)then local f1=core.getVelocity()local eZ=vec3(f1):len()local kY=f(unit.getData()).maxBrake;if kY~=nil and kY>0 and as then kY=kY/r(eZ/100,0.1,1)kY=kY/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+kY)/2 else LastMaxBrakeInAtmo=kY end end end;if kY~=nil and kY>0 then LastMaxBrake=kY end;aO=i3 end end;local function kZ(fE)local k_=0;aE=""local l0=aS;local l1=0;local l2=0;local l3=0;local g2=0;local g3=""local l4=core.getElementHitPointsById;for db in pairs(av)do local k9=0;local l5=0;l5=h(av[db])k9=l4(av[db])l1=l1+k9;if k9<l5 then if k9==0 then l3=l3+1 else l2=l2+1 end;if aT and#aB==0 then position=vec3(core.getElementPositionById(av[db]))local c6=position.x-C;local c7=position.y-C;local l6=position.z-C;table.insert(aB,core.spawnArrowSticker(c6,c7,l6+1,"down"))table.insert(aB,core.spawnArrowSticker(c6,c7,l6+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(c6+1,c7,l6,"north"))table.insert(aB,core.spawnArrowSticker(c6+1,c7,l6,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(c6-1,c7,l6,"south"))table.insert(aB,core.spawnArrowSticker(c6-1,c7,l6,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(c6,c7-1,l6,"east"))table.insert(aB,core.spawnArrowSticker(c6,c7-1,l6,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(c6,c7+1,l6,"west"))table.insert(aB,core.spawnArrowSticker(c6,c7+1,l6,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,av[db])end elseif aT and#aB>0 and aB[11]==av[db]then for fW in pairs(aB)do core.deleteSticker(aB[fW])end;aB={}end end;k_=d(l1/l0*100)if k_<100 then fE[#fE+1]=c5(0,0,"","pbright txt")g2=d(k_*2.55)g3=e("rgb(%d,%d,%d)",255-g2,g2,0)if k_<100 then fE[#fE+1]=c5("50%",1035,"Elemental Integrity: "..k_.."%","txtbig txtmid","fill:"..g3)if l3>0 then fE[#fE+1]=c5("50%",1055,"Disabled Modules: "..l3 .." Damaged Modules: "..l2,"txtbig txtmid","fill:"..g3)elseif l2>0 then fE[#fE+1]=c5("50%",1055,"Damaged Modules: "..l2,"txtbig txtmid","fill:"..g3)end end end end;local function l7()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;local function l8()local g0=q()local he=bI;local l9=g0-aw;if he>1.38889 then he=he/1000;local la=he*(g0-aw)TotalDistanceTravelled=TotalDistanceTravelled+la;ab=ab+la end;ac=ac+l9;TotalFlightTime=TotalFlightTime+l9;aw=g0 end;aq=false;kW(nil,true)l8()bb.UpdateRadar()l7()local fE={}bb.ExtraData(fE)if ShowOdometer then fE=bb.DrawOdometer(fE,ab,TotalDistanceTravelled,ac)end;if ShouldCheckDamage then kZ(fE)end;ak=table.concat(fE,"")collectgarbage("collect")elseif kH=="fiveSecond"then ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local cl=f(dbHud_1.getStringValue("SavedLocations"))if cl~=nil then _G["SavedLocations"]=cl;local cI=-1;local cJ;for db,dc in pairs(SavedLocations)do if dc.name and dc.name=="SatNav Location"then cI=db;break end end;if cI~=-1 then cJ=SavedLocations[cI]cI=-1;for db,dc in pairs(b2[0])do if dc.name and dc.name=="SatNav Location"then cI=db;break end end;if cI>-1 then b2[0][cI]=cJ end;bc.UpdateAtlasLocationsList()a0=cJ.name.." position updated"end end;for i=1,#bV do if bV[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bV[i].name)bc.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif kH=="msgTick"then local fE={}bb.DisplayMessage(fE,"empty")a0="empty"unit.stopTimer("msgTick")ah=3 elseif kH=="animateTick"then bf=true;be=false;af=0;ag=0;unit.stopTimer("animateTick")elseif kH=="hudTick"then local function lb(fE)local lc=d(r(ai/(aJ/4)*255,0,255))fE[#fE+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(D+0.5)+lc,d(F+0.5)-lc,d(E+0.5)-lc)end;local function ld()for _,dc in pairs(aG)do if dc.hovered then if not dc.drawCondition or dc.drawCondition()then dc.toggleFunction()end;dc.hovered=false end end end;local function le()local function lf(lg,lh,c6,c7,kh,ki)if lg>c6 and lg<c6+kh and lh>c7 and lh<c7+ki then return true else return false end end;local c6=af+aJ/2;local c7=ag+aK/2;for _,dc in pairs(aG)do dc.hovered=lf(c6,c7,dc.x,dc.y,dc.width,dc.height)end end;local function li(fE)local function lj(fE,lk,hover,c6,c7,eS,ll,lm,ln,lo,lp)if type(lo)=="function"then lo=lo()end;if type(lp)=="function"then lp=lp()end;fE[#fE+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c6,c7,eS,ll)if lk then fE[#fE+1]=e("%s'",lm)else fE[#fE+1]=ln end;if hover then fE[#fE+1]=" style='stroke:white; stroke-width:2'"else fE[#fE+1]=" style='stroke:black; stroke-width:1'"end;fE[#fE+1]="></rect>"fE[#fE+1]=e("<text x='%f' y='%f' font-size='24' fill='",c6+eS/2,c7+ll/2+5)if lk then fE[#fE+1]="black"else fE[#fE+1]="white"end;fE[#fE+1]="' text-anchor='middle' font-family='Montserrat'>"if lk then fE[#fE+1]=e("%s</text>",lo)else fE[#fE+1]=e("%s</text>",lp)end end;local lq="rgb(50,50,50)'"local lr="rgb(210,200,200)"local ls=lj;for _,dc in pairs(aG)do local kg=dc.disableName;local kf=dc.enableName;if type(kg)=="function"then kg=kg()end;if type(kf)=="function"then kf=kf()end;if not dc.drawCondition or dc.drawCondition()then ls(fE,dc.toggleVar(),dc.hovered,dc.x,dc.y,dc.width,dc.height,lr,lq,kg,kf)end end end;local fE={}bb.HUDPrologue(fE)if showHud then bb.UpdateHud(fE)else bb.DisplayOrbitScreen(fE)bb.DrawWarnings(fE)end;if bS and bT~={}then bb.DrawSettings(fE)end;bb.HUDEpilogue(fE)fE[#fE+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if a0~="empty"then bb.DisplayMessage(fE,a0)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bb.DrawDeadZone(fE)end end;if x()==0 then if m()==1 and Z then le()li(fE)if not be and not bf then local lt=table.concat(fE,"")fE={}fE[#fE+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fE[#fE+1]=lt;fE[#fE+1]="</body>"be=true;fE[#fE+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fE,"")system.setScreen(content)elseif bf then local lt=table.concat(fE,"")fE={}fE[#fE+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fE[#fE+1]=lt;fE[#fE+1]="</body>"end;if not be then fE[#fE+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],L,M,af,ag)end else ld()end else if not Z and m()==0 then ld()if ai>DeadZone then if DisplayDeadZone then lb(fE)end end else le()li(fE)end;fE[#fE+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],L,M,af,ag)end;fE[#fE+1]=[[</svg></body>]]content=table.concat(fE,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif kH=="apTick"then bd.APTick()end end;function script.onFlush()local function lu(lv,jn)local lw=vec3()local lx=vec3()if lv==axisCommandId.longitudinal then lw=vec3(core.getConstructOrientationForward())lx=bF elseif lv==axisCommandId.vertical then lw=vec3(core.getConstructOrientationUp())lx=bE elseif lv==axisCommandId.lateral then lw=vec3(core.getConstructOrientationRight())lx=bG else return vec3()end;local ly=vec3(core.getWorldGravity())local lz=ly:dot(lx)local lA=vec3(core.getWorldAirFrictionAcceleration())local lB=lA:dot(lx)local lC=vec3(core.getVelocity())local lD=lC:dot(lw)local lE=jn*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lE-lD)local lF=targetSpeedPID2:get()local lG=(lF-lB-lz)*lx;return lG end;local function lH(lv,jn)local lw=vec3()local lx=vec3()if lv==axisCommandId.longitudinal then lw=vec3(core.getConstructOrientationForward())lx=bF elseif lv==axisCommandId.vertical then lw=vec3(core.getConstructOrientationUp())lx=bE elseif lv==axisCommandId.lateral then lw=vec3(core.getConstructOrientationRight())lx=bG else return vec3()end;local ly=vec3(core.getWorldGravity())local lz=ly:dot(lx)local lA=vec3(core.getWorldAirFrictionAcceleration())local lB=lA:dot(lx)local lC=vec3(core.getVelocity())local lD=lC:dot(lw)local lE=jn*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lE-lD)local lF=targetSpeedPID:get()local lG=(lF-lB-lz)*lx;return lG end;local function lI(lJ,g7,im)local lK=lJ:cross(im):normalize_inplace()local gS=math.acos(r(lK:dot(-g7),-1,1))*constants.rad2deg;if lK:cross(-g7):dot(im)<0 then gS=-gS end;return gS end;if antigrav and not ExternalAGG then if not bN and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bP=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bP and K then cb(0)K=false elseif not bP and not K then G=0;K=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lL=r(R+S+system.getControlDeviceForwardInput(),-1,1)local lM=r(U+X+system.getControlDeviceYawInput(),-1,1)local lN=r(V+T-system.getControlDeviceLeftRightInput(),-1,1)local lO=W;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bL):normalize()end;bL=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()bK=-bJ:dot(bH)bR=getRoll(bJ,bF,bG)local lP=bR/180*math.pi;local lQ=math.cos(lP)local lR=math.sin(lP)bQ=lI(bJ,bF,bG*lQ+bE*lR)local lS=bH:normalize()local lT=getRoll(bJ,bF,bG)local lU=c(lT)local lV=utils.sign(lT)local lW=vec3(core.getWorldAngularVelocity())local lX=lL*pitchSpeedFactor*bG+lM*rollSpeedFactor*bF+lN*yawSpeedFactor*bE;if bJ:len()>0.01 and(at>0.0 or ProgradeIsOn or Reentry or am or AltitudeHold or IntoOrbit)then if bg==true and c(bk-lT)>autoRollRollThreshold and lM==0 and c(bQ)<85 then local lY=bk;local lZ=autoRollFactor;if at==0 then lZ=lZ/4;bk=0;lY=0 end;if rollPID==nil then rollPID=pid.new(lZ*0.01,0,lZ*0.1)end;rollPID:inject(lY-lT)local l_=rollPID:get()lX=lX+l_*bF end end;if bJ:len()>0.01 and at>0.0 then local m0=20.0;if turnAssist==true and lU>m0 and lL==0 and lN==0 then local m1=turnAssistFactor*0.1;local m2=turnAssistFactor*0.025;local m3=(lU-m0)/(180-m0)*180;local m4=0;if m3<90 then m4=m3/90 elseif m3<180 then m4=(180-m3)/90 end;m4=m4*m4;local m5=-lV*m2*(1.0-m4)local m6=m1*m4;lX=lX+m6*bG+m5*bE end end;local m7=1;local m8=0;local m9=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bn=r(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else G=y(r(G+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bn=r(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else G=y(r(G-speedChangeLarge/100,-1,1),2)end end;H=0;if as and AtmoSpeedAssist and bP then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local ma=throttlePID:get()J=r(ma,-1,1)if J<G and at>0.005 then I=true;s:setThrottleCommand(axisCommandId.longitudinal,r(J,0.01,1))else I=false;s:setThrottleCommand(axisCommandId.longitudinal,G)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local mb=r(brakePID:get(),0,1)if at>0 and bK<-80 or at>0.005 then H=mb end;if H>0 then if I and J==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else J=r(J,0.01,1)end;local mc=''local md=vec3()local me=lu(axisCommandId.vertical,ae*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",me,m8)local mf='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mf=mf..ExtraLongitudeTags end;local mg=s:getAxisCommandType(axisCommandId.longitudinal)local mh=s:composeAxisAccelerationFromThrottle(mf,axisCommandId.longitudinal)local mi=lH(axisCommandId.lateral,LeftAmount*1000)mc=mc..' , '.."lateral airfoil , lateral ground "md=md+mi;if md:len()>constants.epsilon then a:setEngineForceCommand(mc,md,m8,'','','',m9)end;a:setEngineForceCommand(mf,mh,m7)local mj='thrust analog vertical fueled 'local mk='thrust analog lateral fueled 'if ExtraLateralTags~="none"then mk=mk..ExtraLateralTags end;if ExtraVerticalTags~="none"then mj=mj..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mj,me,m7)else a:setEngineForceCommand(mj,vec3(),m7)end;if LeftAmount~=0 then a:setEngineForceCommand(mk,mi,m7)else a:setEngineForceCommand(mk,vec3(),m7)end;if lO==0 then lO=H end;local ml=-lO*(brakeSpeedFactor*bH+brakeFlatFactor*lS)a:setEngineForceCommand('brake',ml)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,G)end;local jn=unit.getAxisCommandValue(0)if not bP then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-jn/3.6)local mb=r(brakePID:get(),0,1)lO=r(lO+mb,0,1)end;local ml=-lO*(brakeSpeedFactor*bH+brakeFlatFactor*lS)a:setEngineForceCommand('brake',ml)local mc=''local md=vec3()local mm=false;local mf='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mf=mf..ExtraLongitudeTags end;local mg=s:getAxisCommandType(axisCommandId.longitudinal)if mg==axisCommandType.byThrottle then local mh=s:composeAxisAccelerationFromThrottle(mf,axisCommandId.longitudinal)a:setEngineForceCommand(mf,mh,m7)elseif mg==axisCommandType.byTargetSpeed then local mh=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)mc=mc..' , '..mf;md=md+mh;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then mm=true end end;local mk='thrust analog lateral 'if ExtraLateralTags~="none"then mk=mk..ExtraLateralTags end;local mn=s:getAxisCommandType(axisCommandId.lateral)if mn==axisCommandType.byThrottle then local mo=s:composeAxisAccelerationFromThrottle(mk,axisCommandId.lateral)a:setEngineForceCommand(mk,mo,m7)elseif mn==axisCommandType.byTargetSpeed then local mi=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)mc=mc..' , '..mk;md=md+mi end;local mj='thrust analog vertical 'if ExtraVerticalTags~="none"then mj=mj..ExtraVerticalTags end;local mp=s:getAxisCommandType(axisCommandId.vertical)if mp==axisCommandType.byThrottle then local me=s:composeAxisAccelerationFromThrottle(mj,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mj,me,m7,'airfoil','ground','',m9)else a:setEngineForceCommand(mj,vec3(),m7)a:setEngineForceCommand('airfoil vertical',me,m7,'airfoil','','',m9)a:setEngineForceCommand('ground vertical',me,m7,'ground','','',m9)end elseif mp==axisCommandType.byTargetSpeed then if ae<0 then a:setEngineForceCommand('hover',vec3(),m7)end;local mq=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)mc=mc..' , '..mj;md=md+mq end;if md:len()>constants.epsilon then if W~=0 or mm or c(lS:dot(bF))<0.8 then mc=mc..', brake'end;a:setEngineForceCommand(mc,md,m8,'','','',m9)end end;local mr=torqueFactor*(lX-lW)local ms=vec3(core.getWorldAirFrictionAngularAcceleration())mr=mr-ms;a:setEngineTorqueCommand('torque',mr,m7,'airfoil','','',m9)a:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local eZ=vec3(core.getVelocity()):len()local mt=0.15;if not bP then local mu=s:getTargetSpeed(axisCommandId.longitudinal)if eZ*3.6>mu*(1-mt)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eZ*3.6<mu*(1-mt)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jg=unit.getThrottle()if AtmoSpeedAssist then jg=G*100 end;local jn=jg/100;if j==0 then jn=jn*MaxGameVelocity;if eZ>=jn*(1-mt)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eZ<jn*(1-mt)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jt=d(bn)jn=jn*jt/3.6;if eZ>=jn*(1-mt)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eZ<jn*(1-mt)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cl=coroutine.resume(beginSetup)if cl then SetupComplete=true end else a:update()if not be and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(mv)local B=1;local function mw(mx)if mx then B=-1 end;if not ExternalAGG and bN then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+B*a2;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+B*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+B*a1;if bw<planet.noAtmosphericDensityAltitude then bw=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+B*a1 end else s:updateTargetGroundAltitudeFromActionStart(B*1.0)end end;local function my(mx)if mx then B=-1 end;if not Z then if AtmoSpeedAssist and not AltIsOn then G=r(G+B*speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,B*speedChangeLarge)end else if mx then B=1 else B=nil end;bc.adjustAutopilotTargetIndex(B)end end;if mv=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cb(0)if vBooster or hover then if as and ap==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bg=true;GearExtended=false elseif as then BrakeIsOn=true;a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)else a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end;if Q and not BrakeLanding then a.control.extendLandingGears()end else if Q then a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif mv=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mv=="forward"then R=R-1 elseif mv=="backward"then R=R+1 elseif mv=="left"then U=U-1 elseif mv=="right"then U=U+1 elseif mv=="yawright"then V=V-1 elseif mv=="yawleft"then V=V+1 elseif mv=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mv=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mv=="up"then ae=ae+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mv=="down"then ae=ae-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mv=="groundaltitudeup"then mw()elseif mv=="groundaltitudedown"then mw(true)elseif mv=="option1"then bc.adjustAutopilotTargetIndex()toggleView=false elseif mv=="option2"then bc.adjustAutopilotTargetIndex(1)toggleView=false elseif mv=="option3"then local function mz()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mz()toggleView=false elseif mv=="option4"then cD()toggleView=false elseif mv=="option5"then local function mA()if LockPitch==nil then LockPitch=bQ;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mA()toggleView=false elseif mv=="option6"then cp()toggleView=false elseif mv=="option7"then toggleView=false elseif mv=="option8"then cq()toggleView=false elseif mv=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif mv=="lshift"then if x()==1 then Z=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then Z=true;bf=false;be=false end elseif mv=="brake"then if BrakeToggleStatus then cL()elseif not BrakeIsOn then cL()else BrakeIsOn=true end elseif mv=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif mv=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a5 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a5=false end elseif mv=="stopengines"then local function mB()if aq then aq=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Y=false;N=false;am=false;an=false;P=false;bg=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else aq=true end end;s:resetCommand(axisCommandId.longitudinal)mB()G=0 elseif mv=="speedup"then my()elseif mv=="speeddown"then my(true)elseif mv=="antigravity"and not ExternalAGG then if antigrav~=nil then c_()end end end;function script.onActionStop(mv)local function mC()if not ExternalAGG and bN then a4=a2 end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=a1 end end;if mv=="forward"then R=0 elseif mv=="backward"then R=0 elseif mv=="left"then U=0 elseif mv=="right"then U=0 elseif mv=="yawright"then V=0 elseif mv=="yawleft"then V=0 elseif mv=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mv=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mv=="up"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mv=="down"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mv=="groundaltitudeup"then mC()toggleView=false elseif mv=="groundaltitudedown"then mC()toggleView=false elseif mv=="lshift"then if x()==1 then Z=false;af=0;ag=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then Z=false;bf=false;be=false end elseif mv=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cL()else BrakeIsOn=false end end elseif mv=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(mv)local B=1;local function mD(mx)if mx then B=-1 end;if not ExternalAGG and bN then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+B*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+B*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+B*a3;if bw<planet.noAtmosphericDensityAltitude then bw=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+B*a3 end;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(B*1.0)end end;local function mE(mx)if mx then B=-1 end;if not Z then if AtmoSpeedAssist and not AltIsOn then G=r(G+B*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,B*speedChangeSmall)end end end;if mv=="groundaltitudeup"then mD()elseif mv=="groundaltitudedown"then mD(true)elseif mv=="speedup"then mE()elseif mv=="speeddown"then mE(true)end end;function script.onInputText(c8)local function mF()for db,dc in pairs(bZ())do dbHud_1.setStringValue(dc,g(nil))end;for db,dc in pairs(b)do if dc~="SavedLocations"then dbHud_1.setStringValue(dc,g(nil))end end;a0="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5;aL=false;ad=true end;local function mG(mH,planet,f2)local function mI(f2)local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..z..','..z..','..z..','..z..','..z..'}'local dF,dG,cz,cA,cy=o(f2,ds)if dF=="0"and dG=="0"then return vec3(tonumber(cz),tonumber(cA),tonumber(cy))end;cA=math.rad(cA)cz=math.rad(cz)local planet=b2[tonumber(dF)][tonumber(dG)]local et=math.cos(cz)local mJ=vec3(et*math.cos(cA),et*math.sin(cA),math.sin(cz))return planet.center+(planet.radius+cy)*mJ end;if dbHud_1 then local cJ={}local position=mI(f2)if planet.name=="Space"then cJ={position=position,name=mH,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cJ={position=position,name=mH,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cJ;table.insert(b2[0],cJ)bc.UpdateAtlasLocationsList()else a0="Databank must be installed to save locations"end end;local i;local mK="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mL,mM=nil,nil;local mN="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(c8," ")mL=c8;if i~=nil then mL=string.sub(c8,0,i-1)mM=string.sub(c8,i+1)end;if mL=="/help"or mL=="/commands"then for i9 in string.gmatch(mN,"([^\n]+)")do system.print(i9)end;return elseif mL=="/setname"then if mM==nil or mM==""then a0="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cG(mM)else a0="Select a saved target to rename first"end elseif mL=="/addlocation"then if mM==nil or mM==""or string.find(mM,"::")==nil then a0="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mM,"::")local mH=string.sub(mM,1,i-2)local f2=string.sub(mM,i)local z=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..z..','..z..','..z..','..z..','..z..'}'local dF,dG,cz,cA,cy=o(f2,ds)local planet=b2[tonumber(dF)][tonumber(dG)]mG(mH,planet,f2)a0="Added "..mH.." to saved locations,\nplanet "..planet.name.." at "..f2;ah=5 elseif mL=="/agg"then if mM==nil or mM==""then a0="Usage: ah-agg targetheight"return end;mM=tonumber(mM)if mM<1000 then mM=1000 end;AntigravTargetAltitude=mM;a0="AGG Target Height set to "..mM elseif mL=="/G"then if mM==nil or mM==""then a0="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if mM=="dump"then for db,dc in pairs(bZ())do if type(_G[dc])=="boolean"then if _G[dc]==true then system.print(dc.." true")else system.print(dc.." false")end elseif _G[dc]==nil then system.print(dc.." nil")else system.print(dc.." ".._G[dc])end end;return end;i=string.find(mM," ")local mO=string.sub(mM,0,i-1)local mP=string.sub(mM,i+1)for db,dc in pairs(bZ())do if dc==mO then a0="Variable "..mO.." changed to "..mP;local mQ=type(_G[dc])if mQ=="number"then mP=tonumber(mP)elseif mQ=="boolean"then if string.lower(mP)=="true"then mP=true else mP=false end end;_G[dc]=mP;return end end;a0="No such global variable: "..mO elseif mL=="/copydatabank"then if dbHud_2 then d7(true)else a0="Spare Databank required to copy databank"end elseif mL=="/wipedatabank"then if dbHud_1 then mF()else a0="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
