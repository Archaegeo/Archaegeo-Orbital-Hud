name: ArchHud - Archaegeo v1.603 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")navGlobal=a;atlasGlobal=b;coreGlobal=core;unitGlobal=unit;systemGlobal=system;vBoosterGlobal=vBooster;hoverGlobal=hover;telmeter_1Global=telemeter_1;radar_1Global=radar_1;radar_2Global=radar_2;antigravGlobal=antigrav;shield_1Global=shield_1;require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")script={}VERSION_NUMBER=1.603;mabs=math.abs;mfloor=math.floor;stringf=string.format;jdecode=json.decode;jencode=json.encode;eleMaxHp=core.getElementMaxHitPointsById;atmosphere=unit.getAtmosphereDensity;eleMass=core.getElementMassById;isRemote=a.control.isRemoteControlled;atan=math.atan;stringmatch=string.match;systime=system.getTime;uclamp=utils.clamp;navCom=a.axisCommandManager;sysDestWid=system.destroyWidgetPanel;sysUpData=system.updateData;sysAddData=system.addDataToWidget;sysLockVw=system.lockView;sysIsVwLock=system.isViewLocked;msqrt=math.sqrt;tonum=tonumber;function round(c,d)local e=10^(d or 0)return mfloor(c*e+0.5)/e end;time=systime()clearAllCheck=systime()coreHalfDiag=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"holdAltitudeButtonModifier=5;antiGravButtonModifier=5;currentHoldAltModifier=holdAltitudeButtonModifier;currentAggModifier=antiGravButtonModifier;isBoosting=false;brakeDistance=0;brakeTime=0;maxBrakeDistance=0;maxBrakeTime=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;myAutopilotTarget=""inAtmo=atmosphere()>0;atmosDensity=atmosphere()coreAltitude=core.getAltitude()elementsID=core.getElementIdList()lastTravelTime=systime()coreMass=core.getConstructMass()mousePause=false;gyroIsOn=nil;rgb=[[rgb(]]..mfloor(PrimaryR+0.5)..","..mfloor(PrimaryG+0.5)..","..mfloor(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..mfloor(PrimaryR*0.9+0.5)..","..mfloor(PrimaryG*0.9+0.5)..","..mfloor(PrimaryB*0.9+0.5)..[[)]]markers={}previousYawAmount=0;previousPitchAmount=0;damageMessage=""UnitHidden=true;Buttons={}resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;atmoTanks={}spaceTanks={}rocketTanks={}eleTotalMaxHp=0;repairArrows=false;MapXRatio=nil;MapYRatio=nil;YouAreHere=nil;PlanetaryReference=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;targetGroundAltitude=LandingGearGroundHeight;stalling=false;lastApTickTime=systime()targetRoll=0;ahDoubleClick=0;apDoubleClick=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitPitch=0;orbitRoll=0;orbitAligned=false;orbitalRecover=false;orbitalParams={VectorToTarget=false}OrbitTargetSet=false;OrbitTargetOrbit=0;OrbitTargetPlanet=nil;OrbitAchieved=false;SpaceEngineVertUp=false;SpaceEngineVertDn=false;SpaceEngines=false;OrbitTicks=0;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())soundAlarm=0;UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;showSettings=false;settingsVariables={}oldShowHud=showHud;AtlasOrdered={}notPvPZone=false;pvpDist=50000;pipeMessage=""ReversalIsOn=nil;contacts={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;radars={}rType="Atmo"apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;function p(f)system.print(time..": "..f)end;function changeSpd(g)local e=1;if g then e=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn and mousePause then local h=PlayerThrottle;PlayerThrottle=round(uclamp(PlayerThrottle+e*speedChangeLarge/100,-1,1),2)if PlayerThrottle>=0 and h<0 then PlayerThrottle=0;mousePause=false end elseif AltIsOn then if atmosDensity>0 or Reentry then adjustedAtmoSpeedLimit=uclamp(adjustedAtmoSpeedLimit+e*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=uclamp(MaxGameVelocity+e*speedChangeLarge/3.6*100,0,8333.00)end else navCom:updateCommandFromActionStart(axisCommandId.longitudinal,e*speedChangeLarge)end else if Autopilot or VectorToTarget or spaceLaunch or IntoOrbit then apScrollIndex=apScrollIndex+1*e*-1;if apScrollIndex>#AtlasOrdered then apScrollIndex=1 end;if apScrollIndex<1 then apScrollIndex=#AtlasOrdered end else if not g then e=1 else e=nil end;ATLAS.adjustAutopilotTargetIndex(e)end end end;function play(j,k,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..j.."|"..k.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..j.."|"..k.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..j.."|"..k.."|"..soundVolume)end end;function addTable(l,m)for i=1,#m do l[#l+1]=m[i]end;return l end;function saveableVariables(n)local o={}if not n then addTable(o,saveableVariablesBoolean)addTable(o,savableVariablesHandling)addTable(o,savableVariablesHud)addTable(o,savableVariablesPhysics)return o elseif n=="boolean"then return saveableVariablesBoolean elseif n=="handling"then return savableVariablesHandling elseif n=="hud"then return savableVariablesHud elseif n=="physics"then return savableVariablesPhysics end end;function svgText(q,r,s,t,u)if t==nil then t=""end;if u==nil then u=""end;return stringf([[<text class="%s" x=%s y=%s style="%s">%s</text>]],t,q,r,u,s)end;function float_eq(v,w)if v==0 then return mabs(w)<1e-09 end;if w==0 then return mabs(v)<1e-09 end;return mabs(v-w)<math.max(mabs(v),mabs(w))*epsilon end;function getDistanceDisplayString(distance,x)local y=distance>100000;if x==nil then x=1 end;if y then return round(distance/1000/200,x).."SU"elseif distance<1000 then return round(distance,x).."M"else return round(distance/1000,x).."KM"end end;function FormatTimeString(z)local A=0;local B=0;local C=0;if z<60 then z=mfloor(z)elseif z<3600 then A=mfloor(z/60)z=mfloor(z%60)elseif z<86400 then B=mfloor(z/3600)A=mfloor(z%3600/60)else C=mfloor(z/86400)B=mfloor(z%86400/3600)end;if C>0 then return C.."d "..B.."h "elseif B>0 then return B.."h "..A.."m "elseif A>0 then return A.."m "..z.."s"elseif z>0 then return z.."s"else return"0s"end end;function SaveDataBank(D)local function E(F)for G,H in pairs(F)do dbHud_1.setStringValue(H,jencode(_G[H]))if D and dbHud_2 then dbHud_2.setStringValue(H,jencode(_G[H]))end end end;if dbHud_1 then E(autoVariables)E(saveableVariables())system.print("Saved Variables to Datacore")if D and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function I()local function J(K)return type(K)=='number'end;local function L(K)return type(tonum(K))=='number'end;local function M(N)return type(N)=='table'end;local function O(P)return type(P)=='string'end;local function Q(H)return M(H)and J(H.x and H.y and H.z)end;local function R(S)return M(S)and J(S.latitude and S.longitude and S.altitude and S.id and S.systemId)end;local T=math.pi/180;local U=180/math.pi;local epsilon=1e-10;local c=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local V='::pos{'..c..','..c..','..c..','..c..','..c..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function W(K)local X=string.gsub(string.reverse(stringf('%.4f',K)),'^0*%.?','')return X==''and'0'or string.reverse(X)end;local function Y(Z)if Q(Z)then return stringf('{x=%.3f,y=%.3f,z=%.3f}',Z.x,Z.y,Z.z)end;if M(Z)and not getmetatable(Z)then local a0={}local a1=next(Z)if type(a1)=='nil'or a1==1 then a0=Z else for G,H in pairs(Z)do local a2=Y(H)if type(G)=='number'then table.insert(a0,stringf('[%s]=%s',G,a2))else table.insert(a0,stringf('%s=%s',G,a2))end end end;return stringf('{%s}',table.concat(a0,','))end;if O(Z)then return stringf("'%s'",Z:gsub("'",[[\']]))end;return tostring(Z)end;local a3={}a3.__index=a3;a3.__tostring=function(Z,a4)local a5={}for G in pairs(Z)do table.insert(a5,G)end;table.sort(a5)local a0={}for _,G in ipairs(a5)do local a2=Y(Z[G])if type(G)=='number'then table.insert(a0,stringf('[%s]=%s',G,a2))else table.insert(a0,stringf('%s=%s',G,a2))end end;if a4 then return stringf('%s%s',a4,table.concat(a0,',\n'..a4))end;return stringf('{%s}',table.concat(a0,','))end;a3.__eq=function(a6,a7)return a6.systemId==a7.systemId and a6.id==a7.id and float_eq(a6.radius,a7.radius)and float_eq(a6.center.x,a7.center.x)and float_eq(a6.center.y,a7.center.y)and float_eq(a6.center.z,a7.center.z)and float_eq(a6.GM,a7.GM)end;local function a8(a9,aa,ab,ac,ad)assert(L(a9),'Argument 1 (systemId) must be a number:'..type(a9))assert(L(aa),'Argument 2 (id) must be a number:'..type(aa))assert(L(ab),'Argument 3 (radius) must be a number:'..type(ab))assert(M(ac),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ac))assert(L(ad),'Argument 5 (GM) must be a number:'..type(ad))return setmetatable({systemId=tonum(a9),id=tonum(aa),radius=tonum(ab),center=vec3(ac),GM=tonum(ad)},a3)end;local ae={}ae.__index=ae;ae.__tostring=function(p)return stringf('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,W(p.latitude*U),W(p.longitude*U),W(p.altitude))end;ae.__eq=function(a6,a7)return a6.id==a7.id and a6.systemId==a7.systemId and float_eq(a6.latitude,a7.latitude)and float_eq(a6.altitude,a7.altitude)and(float_eq(a6.longitude,a7.longitude)or float_eq(a6.latitude,math.pi/2)or float_eq(a6.latitude,-math.pi/2))end;local function af(ag,aa,ah,ai,aj)local a9=ag;if O(ag)and not ai and not aj and not aa and not ah then a9,aa,ah,ai,aj=stringmatch(ag,V)assert(a9,'Argument 1 (position string) is malformed.')else assert(L(a9),'Argument 1 (systemId) must be a number:'..type(a9))assert(L(aa),'Argument 2 (id) must be a number:'..type(aa))assert(L(ah),'Argument 3 (latitude) must be in degrees:'..type(ah))assert(L(ai),'Argument 4 (longitude) must be in degrees:'..type(ai))assert(L(aj),'Argument 5 (altitude) must be in meters:'..type(aj))end;a9=tonum(a9)aa=tonum(aa)ah=tonum(ah)ai=tonum(ai)aj=tonum(aj)if aa==0 then return setmetatable({latitude=ah,longitude=ai,altitude=aj,id=aa,systemId=a9},ae)end;return setmetatable({latitude=T*uclamp(ah,-90,90),longitude=T*(ai%360),altitude=aj,id=aa,systemId=a9},ae)end;local ak={}ak.__index=ak;ak.__tostring=function(Z,a4)local al=a4 and a4 ..'  'local am={}local a5={}for G in pairs(Z)do table.insert(a5,G)end;table.sort(a5)for _,an in ipairs(a5)do bdy=Z[an]local ao=a3.__tostring(bdy,al)if a4 then table.insert(am,stringf('[%s]={\n%s\n%s}',an,ao,a4))else table.insert(am,stringf('  [%s]=%s',an,ao))end end;if a4 then return stringf('\n%s%s%s',a4,table.concat(am,',\n'..a4),a4)end;return stringf('{\n%s\n}',table.concat(am,',\n'))end;local function ap(aq)local b={}local pid;for _,H in pairs(aq)do local aa=H.planetarySystemId;if type(aa)~='number'then error('Invalid planetary system ID: '..tostring(aa))elseif pid and aa~=pid then error('Mistringmatch planetary system IDs: '..aa..' and '..pid)end;local ar=H.bodyId;if type(ar)~='number'then error('Invalid body ID: '..tostring(ar))elseif b[ar]then error('Duplicate body ID: '..tostring(ar))end;setmetatable(H.center,getmetatable(vec3.unit_x))b[ar]=setmetatable(H,a3)pid=aa end;return setmetatable(b,ak)end;PlanetaryReference={}local function as(aq)return setmetatable({galaxyAtlas=aq or{}},PlanetaryReference)end;PlanetaryReference.__index=function(N,i)if type(i)=='number'then local system=N.galaxyAtlas[i]return ap(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(Z)return function(N,G)local at,nv=next(N,G)return at,nv and ap(nv)end,Z.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(Z)local au={}for _,av in pairs(Z or{})do local aw=av:getPlanetarySystemId()local ax=ak.__tostring(av,'    ')table.insert(au,stringf('  [%s]={%s\n  }',aw,ax))end;return stringf('{\n%s\n}\n',table.concat(au,',\n'))end;PlanetaryReference.BodyParameters=a8;PlanetaryReference.MapPosition=af;PlanetaryReference.PlanetarySystem=ap;function PlanetaryReference.createBodyParameters(a9,aa,ay,az,aA,aB,aC)assert(L(a9),'Argument 1 (systemId) must be a number:'..type(a9))assert(L(aa),'Argument 2 (id) must be a number:'..type(aa))assert(L(ay),'Argument 3 (surfaceArea) must be a number:'..type(ay))assert(M(az),'Argument 4 (aPosition) must be an array or vec3:'..type(az))assert(M(aA),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(aA))assert(L(aB),'Argument 6 (altitude) must be in meters:'..type(aB))assert(L(aC),'Argument 7 (gravityAtPosition) must be number:'..type(aC))local ab=msqrt(ay/4/math.pi)local distance=ab+aB;local aD=vec3(az)+distance*vec3(aA)local ad=aC*distance*distance;return a8(a9,aa,ab,aD,ad)end;PlanetaryReference.isMapPosition=R;function PlanetaryReference:getPlanetarySystem(ag)if i==nil then i=0 end;if nv==nil then nv=0 end;local a9=ag;if R(ag)then a9=ag.systemId end;if type(a9)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=ak then system=ap(system)end;return system end end end;function ak:sizeCalculator(aE)return 1.05*aE.radius end;function ak:castIntersections(aF,aG,aH,aI,aJ,aK)local aL={}local aM=aJ or self;for _,aE in pairs(aM)do table.insert(aL,aE)end;if not aK then table.sort(aL,function(aN,aO)return(aN.center-aF):len()<(aO.center-aF):len()end)end;local aP=aG:normalize()for _,aE in ipairs(aL)do local aQ=aE.center-aF;local ab=self:sizeCalculator(aE)local aR=aQ:dot(aP)local aS=aR^2-(aQ:len2()-ab^2)if aS>=0 then local aT=msqrt(aS)local aU=aR+aT;local aV=aR-aT;if aV>0 then return aE,aU,aV elseif aU>0 then return aE,aU,nil end end end;return nil,nil,nil end;function ak:closestBody(aW)assert(type(aW)=='table','Invalid coordinates.')local aX,aE;local aY=vec3(aW)for _,aZ in pairs(self)do local a_=(aZ.center-aY):len2()if(not aE or a_<aX)and aZ.name~="Space"then aE=aZ;aX=a_ end end;return aE end;function ak:convertToBodyIdAndWorldCoordinates(ag)local b0=ag;if O(ag)then b0=af(ag)end;if b0.id==0 then return 0,vec3(b0.latitude,b0.longitude,b0.altitude)end;local aZ=self:getBodyParameters(b0)if aZ then return b0.id,aZ:convertToWorldCoordinates(b0)end end;function ak:getBodyParameters(ag)local aa=ag;if R(ag)then aa=ag.id end;assert(L(aa),'Argument 1 (id) must be a number:'..type(aa))return self[aa]end;function ak:getPlanetarySystemId()local _,H=next(self)return H and H.systemId end;function a3:convertToMapPosition(ac)assert(M(ac),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ac))local b1=vec3(ac)if self.id==0 then return setmetatable({latitude=b1.x,longitude=b1.y,altitude=b1.z,id=0,systemId=self.systemId},ae)end;local b2=b1-self.center;local distance=b2:len()local aj=distance-self.radius;local ah=0;local ai=0;if not float_eq(distance,0)then local b3=atan(b2.y,b2.x)ai=b3>=0 and b3 or 2*math.pi+b3;ah=math.pi/2-math.acos(b2.z/distance)end;return setmetatable({latitude=ah,longitude=ai,altitude=aj,id=self.id,systemId=self.systemId},ae)end;function a3:convertToWorldCoordinates(ag)local b0=O(ag)and af(ag)or ag;if b0.id==0 then return vec3(b0.latitude,b0.longitude,b0.altitude)end;assert(R(b0),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(b0.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(b0.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local b4=math.cos(b0.latitude)return self.center+(self.radius+b0.altitude)*vec3(b4*math.cos(b0.longitude),b4*math.sin(b0.longitude),math.sin(b0.latitude))end;function a3:getAltitude(ac)return(vec3(ac)-self.center):len()-self.radius end;function a3:getDistance(ac)return(vec3(ac)-self.center):len()end;function a3:getGravity(ac)local b5=self.center-vec3(ac)local b6=b5:len2()return self.GM/b6*b5/msqrt(b6)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return as(...)end})end;local function b7()local Kinematic={}local b8=30000000/3600;local b9=b8*b8;local ba=100;function Kinematic.computeAccelerationTime(bb,bc,bd)local be=b8*math.asin(bb/b8)return(b8*math.asin(bd/b8)-be)/bc end;function Kinematic.computeDistanceAndTime(bb,bd,bf,bg,bh,bi)bh=bh or 0;bi=bi or 0;local bj=bb<=bd;local bk=bg*(bj and 1 or-1)/bf;local bl=-bi/bf;local bm=bk+bl;if bj and bm<=0 or not bj and bm>=0 then return-1,-1 end;local bn,bo=0,0;if bk~=0 and bh>0 then local be=math.asin(bb/b8)local bp=math.pi*(bk/2+bl)local bq=bk*bh;local br=b8*math.pi;local H=function(N)local bs=(bp*N-bq*math.sin(math.pi*N/2/bh)+br*be)/br;local bt=math.tan(bs)return b8*bt/msqrt(bt*bt+1)end;local bu=bj and function(P)return P>=bd end or function(P)return P<=bd end;bo=2*bh;if bu(H(bo))then local bv=0;while mabs(bo-bv)>0.5 do local N=(bo+bv)/2;if bu(H(N))then bo=N else bv=N end end end;local bw=bb;local bx=bo/ba;for by=1,ba do local bz=H(by*bx)bn=bn+(bz+bw)*bx/2;bw=bz end;if bo<2*bh then return bn,bo end;bb=bw end;local be=b8*math.asin(bb/b8)local time=(b8*math.asin(bd/b8)-be)/bm;local bA=b9*math.cos(be/b8)/bm;local distance=bA-b9*math.cos((bm*time+be)/b8)/bm;return distance+bn,time+bo end;function Kinematic.computeTravelTime(bb,bc,distance)if distance==0 then return 0 end;if bc>0 then local be=b8*math.asin(bb/b8)local bA=b9*math.cos(be/b8)/bc;return(b8*math.acos(bc*(bA-distance)/b9)-be)/bc end;if bb==0 then return-1 end;assert(bb>0,'Acceleration and initial speed are both zero.')return distance/bb end;return Kinematic end;local function bB()local vec3=require('cpml.vec3')local I=I()local function O(P)return type(P)=='string'end;local function M(N)return type(N)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(aj)assert(self.body)local distance=aj+self.body.radius;if not float_eq(distance,0)then local bC=msqrt(self.body.GM/distance)return msqrt(2)*bC,bC end;return nil,nil end;function Kepler:orbitalParameters(ag,bD)assert(self.body)assert(M(ag)or O(ag))assert(M(bD))local bE=(O(ag)or I.isMapPosition(ag))and self.body:convertToWorldCoordinates(ag)or vec3(ag)local H=vec3(bD)local bF=bE-self.body.center;local bG=H:len2()local bH=bF:len()local bI=self.body.GM;local bJ=((bG-bI/bH)*bF-bF:dot(H)*H)/bI;local v=bI/(2*bI/bH-bG)local bK=bJ:len()local aP=bJ:normalize()local bL=v*(1-bK)local bM=v*(1+bK)local bN=bL*aP+self.body.center;local bO=bK<=1 and-bM*aP+self.body.center or nil;local bP=msqrt(v*bI*(1-bK*bK))local bQ=bO and 2*math.pi*msqrt(v^3/bI)local bR=math.acos(bJ:dot(bF)/(bK*bH))if bF:dot(H)<0 then bR=-(bR-2*math.pi)end;local bS=math.acos((math.cos(bR)+bK)/(1+bK*math.cos(bR)))local bT=bS;if bT<0 then bT=bT+2*math.pi end;local bU=bT-bK*math.sin(bT)local bV=0;local bW=0;local bX=0;if bQ~=nil then bV=bU/(2*math.pi/bQ)bW=bQ-bV;bX=bW+bQ/2;if bR-math.pi>0 then bW=bV;bX=bW+bQ/2 end;if bX>bQ then bX=bX-bQ end end;return{periapsis={position=bN,speed=bP/bL,circularOrbitSpeed=msqrt(bI/bL),altitude=bL-self.body.radius},apoapsis=bO and{position=bO,speed=bP/bM,circularOrbitSpeed=msqrt(bI/bM),altitude=bM-self.body.radius},currentVelocity=H,currentPosition=bE,eccentricity=bK,period=bQ,eccentricAnomaly=bS,meanAnomaly=bU,timeToPeriapsis=bW,timeToApoapsis=bX,trueAnomaly=bR}end;local function bY(bZ)local aZ=I.BodyParameters(bZ.systemId,bZ.id,bZ.radius,bZ.center,bZ.GM)return setmetatable({body=aZ},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return bY(...)end})end;local function b_()local c0={}local c1={}local c2={XS=13,S=27,M=55,L=110,XL=221}local c3={}local c4;local c5;local c6;local c7;local c8;local function c9()local function ca(cb,cc,cd,ce,cf,cg,ch,ci)cc,ce,cg,ci=vec3(cc),vec3(ce),vec3(cg),vec3(ci)local cj,ck,cl=cb*cb,cd*cd,cf*cf;local bG=ce-cc;local cm=bG:normalize()local cn=bG:len()local co=cg-cc;local cp=(co-co:project_on(cm)):normalize()local cq,cr=co:dot(cm),co:dot(cp)local cs=cq*cq+cr*cr;local ct=cm:cross(cp)local q=(cj-ck+cn*cn)/(2*cn)local r=(cj-cl+cs-2*cq*q)/(2*cr)local S=cj-q^2-r^2;local cu=msqrt(S)local cv=cc+cm*q+cp*r+ct*cu;local cw=cc+cm*q+cp*r-ct*cu;if mabs((ci-cv):len()-ch)<mabs((ci-cw):len()-ch)then return cv else return cw end end;local function cx()local function cy()local cz=core.getConstructWorldOrientationRight()local bG=core.getConstructWorldOrientationForward()local co=core.getConstructWorldOrientationUp()local cA=library.systemResolution3(cz,bG,co,{1,0,0})local cB=library.systemResolution3(cz,bG,co,{0,1,0})local cC=library.systemResolution3(cz,bG,co,{0,0,1})return function(cD)return library.systemResolution3(cA,cB,cC,cD)end end;local cE=cy()local cF=core.getConstructWorldPos()local bE=core.getElementPositionById(1)local cG={bE[1],bE[2],bE[3]}local cH=cE(cG)local cI={cF[1]-cH[1],cF[2]-cH[2],cF[3]-cH[3]}return cI end;local function cJ(cK,bH,cL)local cM=cK.pts;local cN=#cM;local cO=cK.ref;if cN>3 then local cP,cQ,cR,cS=cM[cN],cM[cN-1],cM[cN-2],cM[cN-3]cK.ref=cL;local bE=ca(cP[1],cP[2],cQ[1],cQ[2],cR[1],cR[2],cS[1],cS[2])local q,r,cu=bE.x,bE.y,bE.z;if q==q and r==r and cu==cu then q=q+cO[1]r=r+cO[2]cu=cu+cO[3]local cT=vec3(q,r,cu)if not cK.lastPos then cK.center=cT elseif(cK.lastPos-cT):len()<2 then cK.center=cT;cK.skipCalc=true end;cK.lastPos=cT end;cK.pts={}else local cU={cL[1]-cO[1],cL[2]-cO[2],cL[3]-cO[3]}cM[cN+1]={bH,cU}end end;if radars[1]then c4=#radars[1].getConstructIds()local cV=radars[1].getData()local cW=cV:gmatch('{"constructId[^}]*}[^}]*}')if c4>0 then local cL=cx()local cX,cY=0,0;c8,c7=0,0;for H in cW do local aa,distance,cZ=H:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local c_=c2[cZ]distance=tonum(distance)if radars[1].hasMatchingTransponder(aa)==1 then table.insert(c1,aa)end;local d0=radars[1].getConstructType(aa)if CollisionSystem then if c_>27 or d0=="static"or d0=="space"then c8=c8+1;local d1=radars[1].getConstructName(aa)local cK=contacts[aa]if cK==nil then c_=c_+coreHalfDiag;contacts[aa]={pts={},ref=cL,name=d1,i=0,radius=c_,skipCalc=false}cK=contacts[aa]end;if not cK.skipCalc then cJ(cK,distance,cL)cY=cY+1 end;if cK.center then table.insert(c3,cK)end end;cX=cX+1;if nearPlanet and cX>700 or cY>70 or(not nearPlanet and cX>300 or cY>30)then coroutine.yield()cX,cY=0,0 end end end;c7=#c3;if c7>0 and velMag>20 then local aE,d2,d3,d4;local d5=0;local d6=galaxyReference:getPlanetarySystem(0)d4=constructVelocity:normalize()while d5<c7 do coroutine.yield()local d7={table.unpack(c3,d5,math.min(d5+75,c7))}aE,d2,d3=d6:castIntersections(worldPos,d4,nil,nil,d7,true)if aE and d3 then collisionTarget={aE,d2,d3}break end;d5=d5+75 end;if not aE then collisionTarget=nil end else collisionTarget=nil end;c3={}c5=cV:find('identifiedConstructs":%[%]')else c6=cV:find('worksInEnvironment":false')end end end;local function d8()if radars[1]then rType="Atmo"if radars[1].getData():find('worksInAtmosphere":false')then rType="Space"end end end;function c0.pickType()d8()end;function c0.assignRadar()if radar_1 and radars[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then radars[1]=radar_2 end;if radars[1]==radar_2 then d8()end elseif radar_2 and radars[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then radars[1]=radar_1 end;if radars[1]==radar_1 then d8()end end end;function c0.UpdateRadar()local d9=coroutine.status(UpdateRadarCoroutine)if d9=="suspended"then local a2,da=coroutine.resume(UpdateRadarCoroutine)if da then system.print("ERROR UPDATE RADAR: "..da)end elseif d9=="dead"then UpdateRadarCoroutine=coroutine.create(c9)local a2,da=coroutine.resume(UpdateRadarCoroutine)end end;function c0.GetRadarHud()local db=c1;c1={}return c5,c6,c4,c7,c8,db end;UpdateRadarCoroutine=coroutine.create(c9)return c0 end;local function dc()local function dd(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function de()local function df(dg,dh)return dg.name<dh.name end;AtlasOrdered={}for G,H in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=H.name,index=G}end;table.sort(AtlasOrdered,df)end;local function di(dj)for G,H in pairs(dj)do if H.name and H.name==CustomTarget.name then return G end end;return-1 end;local function dk()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local dl=AtlasOrdered[AutopilotTargetIndex].index;local dm=b[0][dl]if dm.center then AutopilotTargetName=dm.name;autopilotTargetPlanet=galaxyReference[0][dl]if CustomTarget~=nil then if atmosDensity==0 then if sysUpData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then sysAddData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if sysUpData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then sysAddData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if sysUpData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then sysAddData(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if sysUpData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then sysAddData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if sysUpData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then sysAddData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if sysUpData(widgetMaxMassText,widgetMaxMass)~=1 then sysAddData(widgetMaxMassText,widgetMaxMass)end;if sysUpData(widgetTravelTimeText,widgetTravelTime)~=1 then sysAddData(widgetTravelTimeText,widgetTravelTime)end;if sysUpData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then sysAddData(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=dm;for _,H in pairs(galaxyReference[0])do if H.name==CustomTarget.planetname then autopilotTargetPlanet=H;AutopilotTargetName=CustomTarget.name;break end end;if sysUpData(widgetMaxMassText,widgetMaxMass)~=1 then sysAddData(widgetMaxMassText,widgetMaxMass)end;if sysUpData(widgetTravelTimeText,widgetTravelTime)~=1 then sysAddData(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=mfloor(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=mfloor(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function dn(dp)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit then if dp==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then dk()else local dl=AtlasOrdered[AutopilotTargetIndex].index;local dm=b[0][dl]if dm~=nil and dm.name=="Space"or iphCondition=="Custom Only"and dm.center or iphCondition=="No Moons"and string.find(dm.name,"Moon")~=nil then if dp==nil then dn()else dn(1)end else dk()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function dq()local cN=-1;cN=di(b[0])if cN>-1 then table.remove(b[0],cN)end;cN=-1;cN=di(SavedLocations)if cN~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cN)end;dn()de()end;local function dr(d1,position,ds,dt)if dbHud_1 or ds then local p=dd(position)local du=p.gravity;if dt then du=unit.getClosestPlanetInfluence()end;local dv={position=position,name=d1,planetname=p.name,gravity=du,safe=dt}if not ds then SavedLocations[#SavedLocations+1]=dv else for G,H in pairs(b[0])do if H.name and d1==H.name then table.remove(b[0],G)end end end;table.insert(b[0],dv)de()dk()msgText="Location saved as "..d1 .."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local dw={}function dw.UpdateAtlasLocationsList()de()end;function dw.UpdateAutopilotTarget()dk()end;function dw.adjustAutopilotTargetIndex(dp)dn(dp)end;function dw.findAtlasIndex(dj)di(dj)end;function dw.UpdatePosition(dx)local cN=di(SavedLocations)if cN~=-1 then if dx~=nil then SavedLocations[cN].name=dx;AutopilotTargetIndex=AutopilotTargetIndex-1;dn()else local dy=SavedLocations[cN]dy.gravity=unit.getClosestPlanetInfluence()dy.position=worldPos;dy.safe=true end;msgText=SavedLocations[cN].name.." position updated ("..SavedLocations[cN].planetname..")"else msgText="Name Not Found"end end;function dw.AddNewLocation(d1,position,ds,dt)dr(d1,position,ds,dt)end;function dw.ClearCurrentPosition()dq()end;for G,H in pairs(SavedLocations)do table.insert(b[0],H)end;de()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;dw.UpdateAutopilotTarget()return dw end;function script.onStart()local dz=false;local function dA()local function dB(dC)local dD=dbHud_1.hasKey;for G,H in pairs(dC)do if dD(H)then local X=jdecode(dbHud_1.getStringValue(H))if X~=nil then _G[H]=X;dz=true end end end end;if dbHud_1 then if not useTheseSettings then dB(saveableVariables())coroutine.yield()dB(autoVariables)else dB(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;dz=false end;coroutine.yield()if dz then msgText="Loaded Saved Variables"resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..mfloor(PrimaryR+0.5)..","..mfloor(PrimaryG+0.5)..","..mfloor(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..mfloor(PrimaryR*0.9+0.5)..","..mfloor(PrimaryG*0.9+0.5)..","..mfloor(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function dE()local function dF(dG,dH)if dG>dH then dH=dG end;local dI,dJ=0,0;if ContainerOptimization>0 then dI=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then dJ=FuelTankOptimization*0.05 end;dH=dH*(1-(dI+dJ))return dH end;local dK=core.getElementNameById;local dL=fuelX~=0 and fuelY~=0;for G in pairs(elementsID)do local type=core.getElementTypeById(elementsID[G])if stringmatch(type,'^.*Atmospheric Engine$')then if stringmatch(tostring(core.getElementTagsById(elementsID[G])),'^.*vertical.*$')and core.getElementForwardById(elementsID[G])[3]>0 then UpVertAtmoEngine=true end end;if stringmatch(type,'^.*Space Engine$')then SpaceEngines=true;if stringmatch(tostring(core.getElementTagsById(elementsID[G])),'^.*vertical.*$')then local dM=core.getElementForwardById(elementsID[G])if dM[3]<0 then SpaceEngineVertUp=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local dN=eleMaxHp(elementsID[G])if dN>10000 then coreHalfDiag=110 elseif dN>1000 then coreHalfDiag=55 elseif dN>150 then coreHalfDiag=27 end end;eleTotalMaxHp=eleTotalMaxHp+eleMaxHp(elementsID[G])if dL and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local dN=eleMaxHp(elementsID[G])local dO=eleMass(elementsID[G])local dG=0;local dP=systime()if type=="Atmospheric Fuel Tank"then local dH=400;local dQ=35.03;if dN>10000 then dH=51200;dQ=5480 elseif dN>1300 then dH=6400;dQ=988.67 elseif dN>150 then dH=1600;dQ=182.67 end;dG=dO-dQ;if fuelTankHandlingAtmo>0 then dH=dH+dH*fuelTankHandlingAtmo*0.2 end;dH=dF(dG,dH)atmoTanks[#atmoTanks+1]={elementsID[G],dK(elementsID[G]),dH,dQ,dG,dP}end;if type=="Rocket Fuel Tank"then local dH=320;local dQ=173.42;if dN>65000 then dH=40000;dQ=25740 elseif dN>6000 then dH=5120;dQ=4720 elseif dN>700 then dH=640;dQ=886.72 end;dG=dO-dQ;if fuelTankHandlingRocket>0 then dH=dH+dH*fuelTankHandlingRocket*0.1 end;dH=dF(dG,dH)rocketTanks[#rocketTanks+1]={elementsID[G],dK(elementsID[G]),dH,dQ,dG,dP}end;if type=="Space Fuel Tank"then local dH=600;local dQ=35.03;if dN>10000 then dH=76800;dQ=5480 elseif dN>1300 then dH=9600;dQ=988.67 elseif dN>150 then dH=2400;dQ=182.67 end;dG=dO-dQ;if fuelTankHandlingSpace>0 then dH=dH+dH*fuelTankHandlingSpace*0.2 end;dH=dF(dG,dH)spaceTanks[#spaceTanks+1]={elementsID[G],dK(elementsID[G]),dH,dQ,dG,dP}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function dR()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then navCom:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then sysLockVw(1)else sysLockVw(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,H in pairs(door)do H.toggle()end end;if switch then for _,H in pairs(switch)do H.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,H in pairs(forcefield)do H.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if isRemote()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;navCom:setTargetGroundAltitude(targetGroundAltitude)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function dS()local dT={}local function dU()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local dV={[1]=4480,[6]=4480,[7]=6270}for dW,dX in pairs(b)do b[dW][0]=dU()b[dW][0].systemId=dW;dT[dW]={}for dY,planet in pairs(b[dW])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=dV[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=dW;planet.bodyId=planet.id;dT[dW][dY]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end end end;PlanetaryReference=I()galaxyReference=PlanetaryReference(dT)Kinematic=b7()Kep=bB()ATLAS=dc()end;SetupComplete=false;beginSetup=coroutine.create(function()navCom:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})dA()coroutine.yield()dE()coroutine.yield()AP=APClass()dR()coroutine.yield()dS()RADAR=b_()HUD=HudClass()HUD.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)radars[1]=nil;if radar_1 then radars[1]=radar_1;RADAR.pickType()end;play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,H in pairs(door)do H.toggle()end end;if switch then for _,H in pairs(switch)do H.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,H in pairs(forcefield)do H.toggle()end end;SaveDataBank()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(dZ)local d_=nil;if dZ=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif dZ=="tenthSecond"then local function e0()local e1=system.createData;local e2=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=e2(panelInterplanetary,"value")interplanetaryHeaderText=e1('{"label": "Target Planet", "value": "N/A", "unit":""}')sysAddData(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=e2(panelInterplanetary,"value")widgetDistanceText=e1('{"label": "distance", "value": "N/A", "unit":""}')sysAddData(widgetDistanceText,widgetDistance)widgetTravelTime=e2(panelInterplanetary,"value")widgetTravelTimeText=e1('{"label": "Travel Time", "value": "N/A", "unit":""}')sysAddData(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=e2(panelInterplanetary,"value")widgetMaxMassText=e1('{"label": "Maximum Mass", "value": "N/A", "unit":""}')sysAddData(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=e2(panelInterplanetary,"value")widgetTargetOrbitText=e1('{"label": "Target Altitude", "value": "N/A", "unit":""}')sysAddData(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=e2(panelInterplanetary,"value")widgetCurBrakeDistanceText=e1('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=e2(panelInterplanetary,"value")widgetCurBrakeTimeText=e1('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=e2(panelInterplanetary,"value")widgetMaxBrakeDistanceText=e1('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=e2(panelInterplanetary,"value")widgetMaxBrakeTimeText=e1('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=e2(panelInterplanetary,"value")widgetTrajectoryAltitudeText=e1('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then sysAddData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)sysAddData(widgetCurBrakeTimeText,widgetCurBrakeTime)sysAddData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)sysAddData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)sysAddData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function e3()sysDestWid(panelInterplanetary)panelInterplanetary=nil end;local function e4()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local bz=velMag;local e5=unit.getThrottle()/100;if AtmoSpeedAssist then e5=PlayerThrottle end;local e6,e7=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*e5,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,e8;if not TurnBurn and bz>0 then _,e8=AP.GetAutopilotBrakeDistanceAndTime(bz)else _,e8=AP.GetAutopilotTBBrakeDistanceAndTime(bz)end;local e9=0;local ea=0;if AutopilotCruising or not Autopilot and bz>5 then ea=Kinematic.computeTravelTime(bz,0,AutopilotDistance)elseif brakeDistance+e6<AutopilotDistance then e9=AutopilotDistance-(brakeDistance+e6)ea=Kinematic.computeTravelTime(8333.0556,0,e9)else local eb=(AutopilotDistance-brakeDistance)/e6;e6=AutopilotDistance-brakeDistance;e7=e7*eb end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ea elseif AutopilotBraking then return e8 elseif AutopilotCruising then return ea+e8 else return e7+brakeTime+ea end end;local function ec(du,ed)if du==nil then du=core.g()end;du=round(du,5)if ed~=nil and ed or(d_==nil or d_~=du)then local bz=coreVelocity:len()local ee=jdecode(unit.getData()).maxBrake;if ee~=nil and ee>0 and inAtmo then ee=ee/uclamp(bz/100,0.1,1)ee=ee/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+ee)/2 else LastMaxBrakeInAtmo=ee end end end;if ee~=nil and ee>0 then LastMaxBrake=ee end;d_=du end end;ec(nil,true)if setCruiseSpeed~=nil then if navCom:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or navCom:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then e0()end;if AutopilotTargetName~=nil then local ef=CustomTarget~=nil;local eg=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()eg=eg>1000000 and round(eg/1000000,2).." kTons"or round(eg/1000,2).." Tons"sysUpData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=e4()if ef and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local eh=getDistanceDisplayString(distance)sysUpData(widgetDistanceText,'{"label": "distance", "value": "'..eh..'"}')sysUpData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')eh=getDistanceDisplayString(brakeDistance)sysUpData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..eh..'"}')sysUpData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')eh=getDistanceDisplayString(maxBrakeDistance)sysUpData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..eh..'"}')sysUpData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')sysUpData(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..stringf("%s",eg)..'", "unit":""}')eh=getDistanceDisplayString(AutopilotTargetOrbit)sysUpData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..eh..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if sysUpData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then sysAddData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if sysUpData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then sysAddData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if sysUpData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then sysAddData(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if sysUpData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then sysAddData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if sysUpData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then sysAddData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else e3()end;if warpdrive~=nil then if jdecode(warpdrive.getData()).destination~="Unknown"and jdecode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif dZ=="oneSecond"then local function ei(ej)local ek=0;damageMessage=""local el=eleTotalMaxHp;local em=0;local en=0;local eo=0;local ep=0;local eq=""local er=core.getElementHitPointsById;for G in pairs(elementsID)do local dN=0;local es=0;es=eleMaxHp(elementsID[G])dN=er(elementsID[G])em=em+dN;if dN<es then if dN==0 then eo=eo+1 else en=en+1 end;if repairArrows and#markers==0 then position=vec3(core.getElementPositionById(elementsID[G]))local q=position.x;local r=position.y;local cu=position.z;table.insert(markers,core.spawnArrowSticker(q,r,cu+1,"down"))table.insert(markers,core.spawnArrowSticker(q,r,cu+1,"down"))core.rotateSticker(markers[2],0,0,90)table.insert(markers,core.spawnArrowSticker(q+1,r,cu,"north"))table.insert(markers,core.spawnArrowSticker(q+1,r,cu,"north"))core.rotateSticker(markers[4],90,90,0)table.insert(markers,core.spawnArrowSticker(q-1,r,cu,"south"))table.insert(markers,core.spawnArrowSticker(q-1,r,cu,"south"))core.rotateSticker(markers[6],90,-90,0)table.insert(markers,core.spawnArrowSticker(q,r-1,cu,"east"))table.insert(markers,core.spawnArrowSticker(q,r-1,cu,"east"))core.rotateSticker(markers[8],90,0,90)table.insert(markers,core.spawnArrowSticker(q,r+1,cu,"west"))table.insert(markers,core.spawnArrowSticker(q,r+1,cu,"west"))core.rotateSticker(markers[10],-90,0,90)table.insert(markers,elementsID[G])end elseif repairArrows and#markers>0 and markers[11]==elementsID[G]then for et in pairs(markers)do core.deleteSticker(markers[et])end;markers={}end end;ek=mfloor(em/el*100)if ek<100 then ej[#ej+1]=svgText(0,0,"","pbright txt")ep=mfloor(ek*2.55)eq=stringf("rgb(%d,%d,%d)",255-ep,ep,0)if ek<100 then ej[#ej+1]=svgText("50%",1035,"Elemental Integrity: "..ek.."%","txtbig txtmid","fill:"..eq)if eo>0 then ej[#ej+1]=svgText("50%",1055,"Disabled Modules: "..eo.." Damaged Modules: "..en,"txtbig txtmid","fill:"..eq)elseif en>0 then ej[#ej+1]=svgText("50%",1055,"Damaged Modules: "..en,"txtbig txtmid","fill:"..eq)end end end end;local function eu()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then sysDestWid(WeaponPanelID)WeaponPanelID=nil end end end;local function ev()local dP=systime()local ew=velMag;local ex=dP-lastTravelTime;if ew>1.38889 then ew=ew/1000;local ey=ew*(dP-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+ey;totalDistanceTrip=totalDistanceTrip+ey end;flightTime=flightTime+ex;TotalFlightTime=TotalFlightTime+ex;lastTravelTime=dP end;ev()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()eu()local ej={}HUD.OneSecond(ej)if ShouldCheckDamage then ei(ej)end;lastOdometerOutput=table.concat(ej,"")collectgarbage("collect")elseif dZ=="fiveSecond"then if not UseSatNav then return end;myAutopilotTarget=dbHud_1.getStringValue("SPBAutopilotTargetName")if myAutopilotTarget~=nil and myAutopilotTarget~=""and myAutopilotTarget~="SatNavNotChanged"then local X=jdecode(dbHud_1.getStringValue("SavedLocations"))if X~=nil then _G["SavedLocations"]=X;local cN=-1;local dv;for G,H in pairs(SavedLocations)do if H.name and H.name=="SatNav Location"then cN=G;break end end;if cN~=-1 then dv=SavedLocations[cN]cN=-1;for G,H in pairs(b[0])do if H.name and H.name=="SatNav Location"then cN=G;break end end;if cN>-1 then b[0][cN]=dv end;ATLAS.UpdateAtlasLocationsList()msgText=dv.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==myAutopilotTarget then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif dZ=="msgTick"then local ej={}HUD.DisplayMessage(ej,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif dZ=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif dZ=="hudTick"then HUD.hudtick()elseif dZ=="apTick"then AP.APTick()elseif dZ=="radarTick"then RADAR.UpdateRadar()elseif dZ=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function ez(eA,eB)local eC=vec3()local eD=vec3()if eA==axisCommandId.longitudinal then eC=vec3(core.getConstructOrientationForward())eD=constructForward elseif eA==axisCommandId.vertical then eC=vec3(core.getConstructOrientationUp())eD=constructUp elseif eA==axisCommandId.lateral then eC=vec3(core.getConstructOrientationRight())eD=constructRight else return vec3()end;local eE=vec3(core.getWorldGravity())local eF=eE:dot(eD)local eG=vec3(core.getWorldAirFrictionAcceleration())local eH=eG:dot(eD)local eI=coreVelocity:dot(eC)local eJ=eB*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(eJ-eI)local eK=targetSpeedPID2:get()local eL=(eK-eH-eF)*eD;return eL end;local function eM(eA,eB)local eC=vec3()local eD=vec3()if eA==axisCommandId.longitudinal then eC=vec3(core.getConstructOrientationForward())eD=constructForward elseif eA==axisCommandId.vertical then eC=vec3(core.getConstructOrientationUp())eD=constructUp elseif eA==axisCommandId.lateral then eC=vec3(core.getConstructOrientationRight())eD=constructRight else return vec3()end;local eE=vec3(core.getWorldGravity())local eF=eE:dot(eD)local eG=vec3(core.getWorldAirFrictionAcceleration())local eH=eG:dot(eD)local eI=coreVelocity:dot(eC)local eJ=eB*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(eJ-eI)local eK=targetSpeedPID:get()local eL=(eK-eH-eF)*eD;return eL end;local function eN(eO,eP,dh)local eQ=eO:cross(dh):normalize_inplace()local eR=math.acos(uclamp(eQ:dot(-eP),-1,1))*constants.rad2deg;if eQ:cross(-eP):dot(dh)<0 then eR=-eR end;return eR end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=navCom:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local eS=uclamp(pitchInput+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local eT=uclamp(rollInput+rollInput2+system.getControlDeviceYawInput(),-1,1)local eU=uclamp(yawInput+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local eV=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local eW=adjustedRoll/180*math.pi;local eX=math.cos(eW)local eY=math.sin(eW)adjustedPitch=eN(worldVertical,constructForward,constructRight*eX+constructUp*eY)local eZ=constructVelocity:normalize()local e_=mabs(adjustedRoll)local f0=utils.sign(adjustedRoll)local f1=vec3(core.getWorldAngularVelocity())local f2=eS*pitchSpeedFactor*constructRight+eT*rollSpeedFactor*constructForward+eU*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local f3=mabs(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and f3>0 or atmosDensity>0.0 and f3<autoRollRollThreshold and autoRollPreference)and eT==0 and mabs(adjustedPitch)<85 then local f4=targetRoll;local f5=autoRollFactor;if atmosDensity==0 then f5=f5/4;targetRoll=0;f4=0 end;if rollPID==nil then rollPID=pid.new(f5*0.01,0,f5*0.1)end;rollPID:inject(f4-adjustedRoll)local f6=rollPID:get()f2=f2+f6*constructForward end end;local f7=1;local f8=0;local f9=1;local fa=system.getMouseWheel()if fa>0 then changeSpd()elseif fa<0 then changeSpd(true)else mousePause=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local fb=throttlePID:get()calculatedThrottle=uclamp(fb,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;navCom:setThrottleCommand(axisCommandId.longitudinal,uclamp(calculatedThrottle,0.01,1))else ThrottleLimited=false;navCom:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local fc=uclamp(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=fc end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then navCom:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=uclamp(calculatedThrottle,0.01,1)end;local fd=''local fe=vec3()local ff=ez(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",ff,f8)local fg='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then fg=fg..ExtraLongitudeTags end;local fh=navCom:getAxisCommandType(axisCommandId.longitudinal)local fi=navCom:composeAxisAccelerationFromThrottle(fg,axisCommandId.longitudinal)local fj=eM(axisCommandId.lateral,LeftAmount*1000)fd=fd..' , '.."lateral airfoil , lateral ground "fe=fe+fj;if fe:len()>constants.epsilon then a:setEngineForceCommand(fd,fe,f8,'','','',f9)end;a:setEngineForceCommand(fg,fi,f7)local fk='thrust analog vertical fueled 'local fl='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then fl=fl..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then fk=fk..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(fk,ff,f7)else a:setEngineForceCommand(fk,vec3(),f7)end;if LeftAmount~=0 then a:setEngineForceCommand(fl,fj,f7)else a:setEngineForceCommand(fl,vec3(),f7)end;if eV==0 then eV=brakeInput2 end;local fm=-eV*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*eZ)a:setEngineForceCommand('brake',fm)else if AtmoSpeedAssist then navCom:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local eB=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-eB/3.6)local fc=uclamp(brakePID:get(),0,1)eV=uclamp(eV+fc,0,1)end;local fm=-eV*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*eZ)a:setEngineForceCommand('brake',fm)local fd=''local fe=vec3()local fn=false;local fg='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then fg=fg..ExtraLongitudeTags end;local fh=navCom:getAxisCommandType(axisCommandId.longitudinal)if fh==axisCommandType.byThrottle then local fi=navCom:composeAxisAccelerationFromThrottle(fg,axisCommandId.longitudinal)a:setEngineForceCommand(fg,fi,f7)elseif fh==axisCommandType.byTargetSpeed then local fi=navCom:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)fd=fd..' , '..fg;fe=fe+fi;if navCom:getTargetSpeed(axisCommandId.longitudinal)==0 or navCom:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-navCom:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then fn=true end end;local fl='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then fl=fl..ExtraLateralTags end;local fo=navCom:getAxisCommandType(axisCommandId.lateral)if fo==axisCommandType.byThrottle then local fp=navCom:composeAxisAccelerationFromThrottle(fl,axisCommandId.lateral)a:setEngineForceCommand(fl,fp,f7)elseif fo==axisCommandType.byTargetSpeed then local fj=navCom:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)fd=fd..' , '..fl;fe=fe+fj end;local fk='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then fk=fk..ExtraVerticalTags end;local fq=navCom:getAxisCommandType(axisCommandId.vertical)if fq==axisCommandType.byThrottle then local ff=navCom:composeAxisAccelerationFromThrottle(fk,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(fk,ff,f7,'airfoil','ground','',f9)else a:setEngineForceCommand(fk,vec3(),f7)a:setEngineForceCommand('airfoil vertical',ff,f7,'airfoil','','',f9)a:setEngineForceCommand('ground vertical',ff,f7,'ground','','',f9)end elseif fq==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),f7)end;local fr=navCom:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)fd=fd..' , '..fk;fe=fe+fr end;if fe:len()>constants.epsilon then if brakeInput~=0 or fn or mabs(eZ:dot(constructForward))<0.5 then fd=fd..', brake'end;a:setEngineForceCommand(fd,fe,f8,'','','',f9)end end;local fs=torqueFactor*(f2-f1)local ft=vec3(core.getWorldAirFrictionAngularAcceleration())fs=fs-ft;a:setEngineTorqueCommand('torque',fs,f7,'airfoil','','',f9)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local bz=coreVelocity:len()local fu=0.15;if not throttleMode then local fv=navCom:getTargetSpeed(axisCommandId.longitudinal)if bz*3.6>fv*(1-fu)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif bz*3.6<fv*(1-fu)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local e5=unit.getThrottle()if AtmoSpeedAssist then e5=PlayerThrottle*100 end;local eB=e5/100;if atmosphere==0 then eB=eB*MaxGameVelocity;if bz>=eB*(1-fu)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif bz<eB*(1-fu)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local fw=mfloor(adjustedAtmoSpeedLimit)eB=eB*fw/3.6;if bz>=eB*(1-fu)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif bz<eB*(1-fu)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local d9=coroutine.status(beginSetup)if d9=="suspended"then local a2,da=coroutine.resume(beginSetup)if da then system.print("ERROR STARTUP: "..da)end elseif d9=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(fx)local function fy(g)local e=1;local function fz(fA,g)local fB={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local fC=fA;for _,H in ipairs(fB)do if g and fC>H then fA=H elseif fA<H and not g then fA=H;break end end;return fA end;if g then e=-1 end;if not ExternalAGG and antigravOn then if holdingShift and g then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+e*antiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+e*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if holdingShift then OrbitTargetOrbit=fz(OrbitTargetOrbit,g)else OrbitTargetOrbit=OrbitTargetOrbit+e*holdAltitudeButtonModifier end;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else if holdingShift and inAtmo then HoldAltitude=fz(HoldAltitude,g)else HoldAltitude=HoldAltitude+e*holdAltitudeButtonModifier end end else navCom:updateTargetGroundAltitudeFromActionStart(e*1.0)end end;local function fD(fE)if not inAtmo then msgText="Flight Assist in Atmo only"return end;local N=type(fE)if ReversalIsOn==nil then if N=="table"then if Autopilot or VectorToTarget then AP.ToggleAutopilot()end;play("180On","BR")elseif fE==1 then play("bnkLft","BR")else play("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then AP.ToggleAltitudeHold()if N~="table"then fE=fE+1 end end;ReversalIsOn=fE else play("180Off","BR")ReversalIsOn=nil end end;if fx=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;AP.cmdThrottle(0)if vBooster or hover then if inAtmo and abvGndDet==-1 then play("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else if hasGear then play("grOut","LG",1)a.control.extendLandingGears()end;navCom:setTargetGroundAltitude(LandingGearGroundHeight)if inAtmo then BrakeIsOn=true end end end;if hasGear and not BrakeLanding and not(vBooster or hover)then play("grOut","LG",1)a.control.extendLandingGears()end else if hasGear then play("grIn","LG",1)a.control.retractLandingGears()end;navCom:setTargetGroundAltitude(TargetHoverHeight)end elseif fx=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif fx=="forward"then pitchInput=pitchInput-1 elseif fx=="backward"then if AltIsOn then fD(-constructVelocity*5000)else pitchInput=pitchInput+1 end elseif fx=="left"then if AltIsOn then fD(1)else rollInput=rollInput-1 end elseif fx=="right"then if AltIsOn then fD(3)else rollInput=rollInput+1 end elseif fx=="yawright"then yawInput=yawInput-1 elseif fx=="yawleft"then yawInput=yawInput+1 elseif fx=="straferight"then navCom:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif fx=="strafeleft"then navCom:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif fx=="up"then upAmount=upAmount+1;navCom:deactivateGroundEngineAltitudeStabilization()navCom:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif fx=="down"then upAmount=upAmount-1;navCom:deactivateGroundEngineAltitudeStabilization()navCom:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif fx=="groundaltitudeup"then fy()elseif fx=="groundaltitudedown"then fy(true)elseif fx=="option1"then toggleView=false;if AltIsOn and holdingShift then local fF=""for i=1,#passengers do fF=fF.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..round(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..fF)return end;ATLAS.adjustAutopilotTargetIndex()elseif fx=="option2"then toggleView=false;if AltIsOn and holdingShift then for i=1,#passengers do core.forceDeboard(passengers[i])end;msgText="Deboarded All Passengers"return end;ATLAS.adjustAutopilotTargetIndex(1)elseif fx=="option3"then local function fG()UnitHidden=not UnitHidden;if not UnitHidden then play("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else play("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then sysDestWid(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then sysDestWid(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then sysDestWid(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then sysDestWid(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then sysDestWid(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and holdingShift then local fF=""for i=1,#ships do fF=fF.."| ID: "..ships[i].." Mass: "..round(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..fF)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;fG()toggleView=false elseif fx=="option4"then toggleView=false;if AltIsOn and holdingShift then for i=1,#ships do core.forceUndock(ships[i])end;msgText="Undocked all ships"return end;ReversalIsOn=nil;AP.ToggleAutopilot()elseif fx=="option5"then toggleView=false;AP.ToggleLockPitch()elseif fx=="option6"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then local fH=shield_1.getVentingCooldown()if fH>0 then msgText="Cannot vent again for "..fH.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()msgText="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else msgText="Shields already at max hitpoints"end;return else msgText="No shield found"return end end;AP.ToggleAltitudeHold()elseif fx=="option7"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then shield_1.toggle()return else msgText="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then msgText="Collision System Enabled"else msgText="Collision System Secured"end elseif fx=="option8"then stablized=not stablized;if not stablized then msgText="DeCoupled Mode - Ground Stabilization off"navCom:deactivateGroundEngineAltitudeStabilization()play("gsOff","GS")else msgText="Coupled Mode - Ground Stabilization on"navCom:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)play("gsOn","GS")end;toggleView=false elseif fx=="option9"then if AltIsOn and holdingShift then navCom:resetCommand(axisCommandId.longitudinal)navCom:resetCommand(axisCommandId.lateral)navCom:resetCommand(axisCommandId.vertical)AP.cmdThrottle(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()gyroIsOn=gyro.getState()==1;if gyroIsOn then play("gyOn","GA")else play("gyOff","GA")end end;toggleView=false elseif fx=="lshift"then apButtonsHovered=false;if AltIsOn then holdingShift=true end;if sysIsVwLock()==1 then holdingShift=true;PrevViewLock=sysIsVwLock()sysLockVw(1)elseif isRemote()==1 and ShiftShowsRemoteButtons then holdingShift=true;Animated=false;Animating=false end elseif fx=="brake"then if BrakeToggleStatus or AltIsOn then AP.BrakeToggle()elseif not BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=true end elseif fx=="lalt"then toggleView=true;AltIsOn=true;if isRemote()==0 and not freeLookToggle and userControlScheme=="keyboard"then sysLockVw(1)end elseif fx=="booster"then if VanillaRockets then a:toggleBoosters()elseif not isBoosting then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;isBoosting=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;isBoosting=false end elseif fx=="stopengines"then local function fI()if time-clearAllCheck<1.5 then play("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;ReversalIsOn=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;followMode=false;apThrottleSet=false;spaceLand=false;spaceLaunch=false;reentryMode=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;gyroIsOn=false;LockPitch=nil;IntoOrbit=false end end;fI()clearAllCheck=time;if navCom:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if PlayerThrottle~=0 then navCom:resetCommand(axisCommandId.longitudinal)AP.cmdThrottle(0)else AP.cmdThrottle(100)end else if navCom:getTargetSpeed(axisCommandId.longitudinal)~=0 then navCom:resetCommand(axisCommandId.longitudinal)else if inAtmo then AP.cmdCruise(AtmoSpeedLimit)else AP.cmdCruise(MaxGameVelocity*3.6)end end end elseif fx=="speedup"then changeSpd()elseif fx=="speeddown"then changeSpd(true)elseif fx=="antigravity"and not ExternalAGG then if antigrav~=nil then AP.ToggleAntigrav()end end end;function script.onActionStop(fx)local function fJ()if not ExternalAGG and antigravOn then currentAggModifier=antiGravButtonModifier end;if AltitudeHold or VertTakeOff or IntoOrbit then currentHoldAltModifier=holdAltitudeButtonModifier end end;if fx=="forward"then pitchInput=0 elseif fx=="backward"then pitchInput=0 elseif fx=="left"then if ReversalIsOn then if ReversalIsOn==2 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;rollInput=0 elseif fx=="right"then if ReversalIsOn then if ReversalIsOn==4 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;rollInput=0 elseif fx=="yawright"then yawInput=0 elseif fx=="yawleft"then yawInput=0 elseif fx=="straferight"then navCom:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif fx=="strafeleft"then navCom:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif fx=="up"then upAmount=0;navCom:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then navCom:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif fx=="down"then upAmount=0;navCom:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then navCom:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif fx=="groundaltitudeup"then fJ()toggleView=false elseif fx=="groundaltitudedown"then fJ()toggleView=false elseif fx=="lshift"then if sysIsVwLock()==1 then simulatedX=0;simulatedY=0;sysLockVw(PrevViewLock)elseif isRemote()==1 and ShiftShowsRemoteButtons then Animated=false;Animating=false end;holdingShift=false elseif fx=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=false end end elseif fx=="lalt"then if isRemote()==0 and freeLookToggle then if toggleView then if sysIsVwLock()==1 then sysLockVw(0)else sysLockVw(1)end else toggleView=true end elseif isRemote()==0 and not freeLookToggle and userControlScheme=="keyboard"then sysLockVw(0)end;AltIsOn=false end end;function script.onActionLoop(fx)local function fK(g)local e=1;if g then e=-1 end;if not ExternalAGG and antigravOn then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+e*currentAggModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;currentAggModifier=uclamp(currentAggModifier*1.05,antiGravButtonModifier,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+e*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then OrbitTargetOrbit=OrbitTargetOrbit+e*currentHoldAltModifier;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+e*currentHoldAltModifier end;currentHoldAltModifier=uclamp(currentHoldAltModifier*1.05,holdAltitudeButtonModifier,50)else navCom:updateTargetGroundAltitudeFromActionLoop(e*1.0)end end;local function fL(g)local e=1;if g then e=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn then PlayerThrottle=uclamp(PlayerThrottle+e*speedChangeSmall/100,-1,1)else navCom:updateCommandFromActionLoop(axisCommandId.longitudinal,e*speedChangeSmall)end end end;if fx=="groundaltitudeup"then if not holdingShift then fK()end elseif fx=="groundaltitudedown"then if not holdingShift then fK(true)end elseif fx=="speedup"then fL()elseif fx=="speeddown"then fL(true)end end;function script.onInputText(s)local function fM(fN,bE,ds)local function fO(bE)local c=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local V='::pos{'..c..','..c..','..c..','..c..','..c..'}'local a9,aa,ah,ai,aj=stringmatch(bE,V)if a9=="0"and aa=="0"then return vec3(tonum(ah),tonum(ai),tonum(aj))end;ai=math.rad(ai)ah=math.rad(ah)local planet=b[tonum(a9)][tonum(aa)]local b4=math.cos(ah)local fP=vec3(b4*math.cos(ai),b4*math.sin(ai),math.sin(ah))return planet.center+(planet.radius+aj)*fP end;local position=fO(bE)return ATLAS.AddNewLocation(fN,position,ds)end;local i;local fQ,fR=nil,nil;local fS="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(s," ")fQ=s;if i~=nil then fQ=string.sub(s,0,i-1)fR=string.sub(s,i+1)end;if fQ=="/help"or fQ=="/commands"then for fT in string.gmatch(fS,"([^\n]+)")do system.print(fT)end;return elseif fQ=="/setname"then if fR==nil or fR==""then msgText="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.UpdatePosition(fR)else msgText="Select a saved target to rename first"end elseif shield_1 and fQ=="/resist"then if fR==nil or shield_1.getResistancesCooldown()>0 then msgText="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local c=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local V=c..', '..c..', '..c..', '..c;local fU,fV,fW,fX=stringmatch(fR,V)if fX==nil or fU+fV+fW+fX>0.6 then msgText="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(fU,fV,fW,fX)==1 then msgText="Shield Resistances set"else msgText="Resistance setting failed."end elseif fQ=="/addlocation"or string.find(s,"::pos")~=nil then local ds=false;local fN="0-Temp"if fR==nil or fR==""then fR=fQ;ds=true end;i=string.find(fR,"::")if not ds then fN=string.sub(fR,1,i-2)end;local bE=string.sub(fR,i)fM(fN,bE,ds)elseif fQ=="/agg"then if fR==nil or fR==""then msgText="Usage: /agg targetheight"return end;fR=tonum(fR)if fR<1000 then fR=1000 end;AntigravTargetAltitude=fR;msgText="AGG Target Height set to "..fR elseif fQ=="/G"then if fR==nil or fR==""then msgText="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if fR=="dump"then for G,H in pairs(saveableVariables())do if type(_G[H])=="boolean"then if _G[H]==true then system.print(H.." true")else system.print(H.." false")end elseif _G[H]==nil then system.print(H.." nil")else system.print(H.." ".._G[H])end end;return end;i=string.find(fR," ")local fY=string.sub(fR,0,i-1)local fZ=string.sub(fR,i+1)for G,H in pairs(saveableVariables())do if H==fY then msgText="Variable "..fY.." changed to "..fZ;local f_=type(_G[H])if f_=="number"then fZ=tonum(fZ)if H=="AtmoSpeedLimit"then adjustedAtmoSpeedLimit=fZ end elseif f_=="boolean"then if string.lower(fZ)=="true"then fZ=true else fZ=false end end;_G[H]=fZ;return end end;msgText="No such global variable: "..fY elseif fQ=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.ClearCurrentPosition()else msgText="Select a custom wp to delete first in IPH"end elseif fQ=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else msgText="Spare Databank required to copy databank"end elseif fQ=="/iphWP"then if AutopilotTargetIndex>0 then system.print(AP.showWayPoint(autopilotTargetPlanet,AutopilotTargetCoords,true))msgText="::pos waypoint shown in lua chat"else msgText="No target selected in IPH"end end end;function script.onEnter(aa)if radars[1]and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aa)if radars[1]and CollisionSystem then if#contacts>650 then aa=tostring(aa)contacts[aa]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
