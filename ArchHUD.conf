name: ArchHud - Archaegeo v1.516 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        AutoShieldToggle = true --export:
        PreventPvP = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.2 --export:
        LowOrbitHeight = 2000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        WipeDamage = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 0 --export:
        OrbitMapY = 25 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)local b=require("atlas")script={}VERSION_NUMBER=1.516;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"LastVersionUpdate=0.000;local c={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra","SelectedTab"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local y=math.sqrt;local z=tonumber;local core=core;local function A(B,C)local D=10^(C or 0)return e(B*D+0.5)/D end;local E=q()local F=q()local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8=0;local a9=0;local aa=0;local ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=k()>0;local ar=k()local as=core.getAltitude()local at=core.getElementIdList()local au=q()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]local az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=q()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=50000;local bJ=""local bK=nil;local bL={}local bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local bN=false;local bO=nil;local bP={}local bQ="Atmo"local bR=false;local bS=0;local bT={}local bU=nil;local bV=nil;function p(bW)system.print(E..": "..bW)end;local function bX(bY)local D=1;if bY then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn and aw then local bZ=K;K=A(r(K+D*speedChangeLarge/100,-1,1),2)if K>=0 and bZ<0 then K=0;aw=false end elseif AltIsOn then if ar>0 or Reentry then b7=r(b7+D*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+D*speedChangeLarge/3.6*100,0,8333.00)end else s:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if Autopilot or VectorToTarget or am or IntoOrbit then bS=bS+1*D*-1;if bS>#bG then bS=1 end;if bS<1 then bS=#bG end else if not bY then D=1 else D=nil end;aW.adjustAutopilotTargetIndex(D)end end end;local function b_(c0)local c1,c2,c3=aR:getPlanetarySystem(0):castIntersections(bv,c0,function(c4)if c4.noAtmosphericDensityAltitude>0 then return c4.radius+c4.noAtmosphericDensityAltitude else return c4.radius+c4.surfaceMaxAltitude*1.5 end end)local c5=c2;if c3~=nil and c2~=nil then c5=math.min(c3,c2)end;if c5~=nil then return c1,c5 else return nil,nil end end;local function c6(c7,c8,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c7 .."|"..c8 .."|"..soundVolume)end end;local function c9(ca,cb)for i=1,#cb do ca[#ca+1]=cb[i]end;return ca end;local function cc(cd)local ce={}local cf={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","voices","alerts","CollisionSystem","AutoShieldToggle","PreventPvP"}local cg={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization","WipeDamage"}local ch={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local ci={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not cd then c9(ce,cf)c9(ce,cg)c9(ce,ch)c9(ce,ci)return ce elseif cd=="boolean"then return cf elseif cd=="handling"then return cg elseif cd=="hud"then return ch elseif cd=="physics"then return ci end end;local function cj(ck,cl,cm,cn,co)if cn==nil then cn=""end;if co==nil then co=""end;return f([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cn,ck,cl,co,cm)end;local function cp(cq,cr)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not cr then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,cq)K=r(A(cq*100,0)/100,-1,1)bz=nil end;local function cs(cq,cr)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cr then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,cq)bz=cq end;local function ct(cu,cv)if cu==0 then return d(cv)<1e-09 end;if cv==0 then return d(cu)<1e-09 end;return d(cu-cv)<math.max(d(cu),d(cv))*epsilon end;local function cw(aj,cx)local cy=aj>100000;if cx==nil then cx=1 end;if cy then return A(aj/1000/200,cx).."SU"elseif aj<1000 then return A(aj,cx).."M"else return A(aj/1000,cx).."KM"end end;local function cz()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cs(e(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cA()bi=false;ba=nil;bb=nil;bm=0;if ar==0 then if IntoOrbit then c6("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bM then c6("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cB()if E-b5<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;c6("11","EP")else if bM then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cA()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=E end;if bM and ar==0 then bg=as;bf=true;bc=true;cA()if IntoOrbit then b5=E else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b0=true;LockPitch=nil;bi=false;if ao~=-1 and bs<20 then c6("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then cz()end else c6("altOn","AH")AutoTakeoff=false;if b5>-1 then if bM then HoldAltitude=as end end;if VertTakeOff then cz()end end;if am then HoldAltitude=100000 end else c6("altOff","AH")if IntoOrbit then cA()end;if VertTakeOff then cz()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cC(cD)if cD then am=false;Autopilot=false;AutopilotRealigned=false;P=false;HoldAltitude=as;TargetSet=false end;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bK=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cz()end;if IntoOrbit then cA()end;b0=autoRollPreference;al=false;an=false;af=0 end;local function cE()local function cF(SpaceTarget)bN=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cB()end end;VectorStatus="Proceeding to Waypoint"end;if E-b6<1.5 and ar>0 then if not bl then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;c6("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then c6("apSpc","AP")if ar~=0 then am=true;cB()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then c6("vtt","AP")cF(SpaceTarget)end else c6("apOn","AP")if not(ac.name==planet.name and as<AutopilotTargetOrbit*1.5)then bi=false;Autopilot=true elseif not aq then if IntoOrbit then cA()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cA()end end end else c6("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cB()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bM)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cA()else c6("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else c6("apP","AP")am=true;cB()end else c6("apOff","AP")cC(1)end end;local function cG()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then c6("bkOn","B",1)cC()else c6("bkOff","B",1)end end;local function cH()if Reentry then a2="Re-Entry cancelled"c6("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;c6("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cm=cw(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..cm;c6("glide","RE")cs(e(b7))end;AutoTakeoff=false end;local function cI()if antigrav and not ExternalAGG then if by then c6("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;c6("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cJ(cK)local cL=0;local cM=0;local cN=0;if cK<60 then cK=e(cK)elseif cK<3600 then cL=e(cK/60)cK=e(cK%60)elseif cK<86400 then cM=e(cK/3600)cL=e(cK%3600/60)else cN=e(cK/86400)cM=e(cK%86400/3600)end;if cN>0 then return cN.."d "..cM.."h "elseif cM>0 then return cM.."h "..cL.."m "elseif cL>0 then return cL.."m "..cK.."s"elseif cK>0 then return cK.."s"else return"0s"end end;local function cO(cP)local function cQ(cR)for cS,cT in pairs(cR)do dbHud_1.setStringValue(cT,h(_G[cT]))if cP and dbHud_2 then dbHud_2.setStringValue(cT,h(_G[cT]))end end end;if dbHud_1 then cQ(c)cQ(cc())system.print("Saved Variables to Datacore")if cP and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cU(cT)if aG==1920 then return cT else return A(aG*cT/1920,0)end end;local function cV(cT)if aH==1080 then return cT else return A(aH*cT/1080,0)end end;local function cW()local function cX(cY)return type(cY)=='number'end;local function cZ(cY)return type(z(cY))=='number'end;local function c_(d0)return type(d0)=='table'end;local function d1(d2)return type(d2)=='string'end;local function d3(cT)return c_(cT)and cX(cT.x and cT.y and cT.z)end;local function d4(d5)return c_(d5)and cX(d5.latitude and d5.longitude and d5.altitude and d5.id and d5.systemId)end;local d6=math.pi/180;local d7=180/math.pi;local epsilon=1e-10;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8='::pos{'..B..','..B..','..B..','..B..','..B..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function d9(cY)local da=string.gsub(string.reverse(f('%.4f',cY)),'^0*%.?','')return da==''and'0'or string.reverse(da)end;local function db(dc)if d3(dc)then return f('{x=%.3f,y=%.3f,z=%.3f}',dc.x,dc.y,dc.z)end;if c_(dc)and not getmetatable(dc)then local dd={}local de=next(dc)if type(de)=='nil'or de==1 then dd=dc else for cS,cT in pairs(dc)do local cq=db(cT)if type(cS)=='number'then table.insert(dd,f('[%s]=%s',cS,cq))else table.insert(dd,f('%s=%s',cS,cq))end end end;return f('{%s}',table.concat(dd,','))end;if d1(dc)then return f("'%s'",dc:gsub("'",[[\']]))end;return tostring(dc)end;local df={}df.__index=df;df.__tostring=function(dc,dg)local dh={}for cS in pairs(dc)do table.insert(dh,cS)end;table.sort(dh)local dd={}for _,cS in ipairs(dh)do local cq=db(dc[cS])if type(cS)=='number'then table.insert(dd,f('[%s]=%s',cS,cq))else table.insert(dd,f('%s=%s',cS,cq))end end;if dg then return f('%s%s',dg,table.concat(dd,',\n'..dg))end;return f('{%s}',table.concat(dd,','))end;df.__eq=function(di,dj)return di.systemId==dj.systemId and di.id==dj.id and ct(di.radius,dj.radius)and ct(di.center.x,dj.center.x)and ct(di.center.y,dj.center.y)and ct(di.center.z,dj.center.z)and ct(di.GM,dj.GM)end;local function dk(dl,dm,dn,dp,dq)assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dn),'Argument 3 (radius) must be a number:'..type(dn))assert(c_(dp),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dp))assert(cZ(dq),'Argument 5 (GM) must be a number:'..type(dq))return setmetatable({systemId=z(dl),id=z(dm),radius=z(dn),center=vec3(dp),GM=z(dq)},df)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return f('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,d9(p.latitude*d7),d9(p.longitude*d7),d9(p.altitude))end;MapPosition.__eq=function(di,dj)return di.id==dj.id and di.systemId==dj.systemId and ct(di.latitude,dj.latitude)and ct(di.altitude,dj.altitude)and(ct(di.longitude,dj.longitude)or ct(di.latitude,math.pi/2)or ct(di.latitude,-math.pi/2))end;local function dr(ds,dm,dt,du,dv)local dl=ds;if d1(ds)and not du and not dv and not dm and not dt then dl,dm,dt,du,dv=o(ds,d8)assert(dl,'Argument 1 (position string) is malformed.')else assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dt),'Argument 3 (latitude) must be in degrees:'..type(dt))assert(cZ(du),'Argument 4 (longitude) must be in degrees:'..type(du))assert(cZ(dv),'Argument 5 (altitude) must be in meters:'..type(dv))end;dl=z(dl)dm=z(dm)dt=z(dt)du=z(du)dv=z(dv)if dm==0 then return setmetatable({latitude=dt,longitude=du,altitude=dv,id=dm,systemId=dl},MapPosition)end;return setmetatable({latitude=d6*r(dt,-90,90),longitude=d6*(du%360),altitude=dv,id=dm,systemId=dl},MapPosition)end;local dw={}dw.__index=dw;dw.__tostring=function(dc,dg)local dx=dg and dg..'  'local dy={}local dh={}for cS in pairs(dc)do table.insert(dh,cS)end;table.sort(dh)for _,dz in ipairs(dh)do bdy=dc[dz]local dA=df.__tostring(bdy,dx)if dg then table.insert(dy,f('[%s]={\n%s\n%s}',dz,dA,dg))else table.insert(dy,f('  [%s]=%s',dz,dA))end end;if dg then return f('\n%s%s%s',dg,table.concat(dy,',\n'..dg),dg)end;return f('{\n%s\n}',table.concat(dy,',\n'))end;local function dB(dC)local b={}local pid;for _,cT in pairs(dC)do local dm=cT.planetarySystemId;if type(dm)~='number'then error('Invalid planetary system ID: '..tostring(dm))elseif pid and dm~=pid then error('Mistringmatch planetary system IDs: '..dm..' and '..pid)end;local dD=cT.bodyId;if type(dD)~='number'then error('Invalid body ID: '..tostring(dD))elseif b[dD]then error('Duplicate body ID: '..tostring(dD))end;setmetatable(cT.center,getmetatable(vec3.unit_x))b[dD]=setmetatable(cT,df)pid=dm end;return setmetatable(b,dw)end;aQ={}local function dE(dC)return setmetatable({galaxyAtlas=dC or{}},aQ)end;aQ.__index=function(d0,i)if type(i)=='number'then local system=d0.galaxyAtlas[i]return dB(system)end;return rawget(aQ,i)end;aQ.__pairs=function(dc)return function(d0,cS)local dF,nv=next(d0,cS)return dF,nv and dB(nv)end,dc.galaxyAtlas,nil end;aQ.__tostring=function(dc)local dG={}for _,dH in pairs(dc or{})do local dI=dH:getPlanetarySystemId()local dJ=dw.__tostring(dH,'    ')table.insert(dG,f('  [%s]={%s\n  }',dI,dJ))end;return f('{\n%s\n}\n',table.concat(dG,',\n'))end;aQ.BodyParameters=dk;aQ.MapPosition=dr;aQ.PlanetarySystem=dB;function aQ.createBodyParameters(dl,dm,dK,dL,dM,dN,dO)assert(cZ(dl),'Argument 1 (systemId) must be a number:'..type(dl))assert(cZ(dm),'Argument 2 (id) must be a number:'..type(dm))assert(cZ(dK),'Argument 3 (surfaceArea) must be a number:'..type(dK))assert(c_(dL),'Argument 4 (aPosition) must be an array or vec3:'..type(dL))assert(c_(dM),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dM))assert(cZ(dN),'Argument 6 (altitude) must be in meters:'..type(dN))assert(cZ(dO),'Argument 7 (gravityAtPosition) must be number:'..type(dO))local dn=y(dK/4/math.pi)local aj=dn+dN;local dP=vec3(dL)+aj*vec3(dM)local dq=dO*aj*aj;return dk(dl,dm,dn,dP,dq)end;aQ.isMapPosition=d4;function aQ:getPlanetarySystem(ds)if i==nil then i=0 end;if nv==nil then nv=0 end;local dl=ds;if d4(ds)then dl=ds.systemId end;if type(dl)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dw then system=dB(system)end;return system end end end;function dw:sizeCalculator(c4)return 1.05*c4.radius end;function dw:castIntersections(dQ,dR,dS,dT,dU,dV)local dW={}local dX=dU or self;for _,c4 in pairs(dX)do table.insert(dW,c4)end;if not dV then table.sort(dW,function(dY,dZ)return(dY.center-dQ):len()<(dZ.center-dQ):len()end)end;local d_=dR:normalize()for _,c4 in ipairs(dW)do local e0=c4.center-dQ;local dn=self:sizeCalculator(c4)local e1=e0:dot(d_)local e2=e1^2-(e0:len2()-dn^2)if e2>=0 then local e3=y(e2)local c2=e1+e3;local c3=e1-e3;if c3>0 then return c4,c2,c3 elseif c2>0 then return c4,c2,nil end end end;return nil,nil,nil end;function dw:closestBody(e4)assert(type(e4)=='table','Invalid coordinates.')local e5,c4;local e6=vec3(e4)for _,e7 in pairs(self)do local e8=(e7.center-e6):len2()if(not c4 or e8<e5)and e7.name~="Space"then c4=e7;e5=e8 end end;return c4 end;function dw:convertToBodyIdAndWorldCoordinates(ds)local e9=ds;if d1(ds)then e9=dr(ds)end;if e9.id==0 then return 0,vec3(e9.latitude,e9.longitude,e9.altitude)end;local e7=self:getBodyParameters(e9)if e7 then return e9.id,e7:convertToWorldCoordinates(e9)end end;function dw:getBodyParameters(ds)local dm=ds;if d4(ds)then dm=ds.id end;assert(cZ(dm),'Argument 1 (id) must be a number:'..type(dm))return self[dm]end;function dw:getPlanetarySystemId()local _,cT=next(self)return cT and cT.systemId end;function df:convertToMapPosition(dp)assert(c_(dp),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dp))local ea=vec3(dp)if self.id==0 then return setmetatable({latitude=ea.x,longitude=ea.y,altitude=ea.z,id=0,systemId=self.systemId},MapPosition)end;local eb=ea-self.center;local aj=eb:len()local dv=aj-self.radius;local dt=0;local du=0;if not ct(aj,0)then local ec=n(eb.y,eb.x)du=ec>=0 and ec or 2*math.pi+ec;dt=math.pi/2-math.acos(eb.z/aj)end;return setmetatable({latitude=dt,longitude=du,altitude=dv,id=self.id,systemId=self.systemId},MapPosition)end;function df:convertToWorldCoordinates(ds)local e9=d1(ds)and dr(ds)or ds;if e9.id==0 then return vec3(e9.latitude,e9.longitude,e9.altitude)end;assert(d4(e9),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e9.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e9.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local ed=math.cos(e9.latitude)return self.center+(self.radius+e9.altitude)*vec3(ed*math.cos(e9.longitude),ed*math.sin(e9.longitude),math.sin(e9.latitude))end;function df:getAltitude(dp)return(vec3(dp)-self.center):len()-self.radius end;function df:getDistance(dp)return(vec3(dp)-self.center):len()end;function df:getGravity(dp)local ee=self.center-vec3(dp)local ef=ee:len2()return self.GM/ef*ee/y(ef)end;return setmetatable(aQ,{__call=function(_,...)return dE(...)end})end;local function eg()local aS={}local eh=30000000/3600;local ei=eh*eh;local ej=100;function aS.computeAccelerationTime(ek,el,em)local en=eh*math.asin(ek/eh)return(eh*math.asin(em/eh)-en)/el end;function aS.computeDistanceAndTime(ek,em,eo,ep,eq,er)eq=eq or 0;er=er or 0;local es=ek<=em;local et=ep*(es and 1 or-1)/eo;local eu=-er/eo;local ev=et+eu;if es and ev<=0 or not es and ev>=0 then return-1,-1 end;local ew,ex=0,0;if et~=0 and eq>0 then local en=math.asin(ek/eh)local ey=math.pi*(et/2+eu)local ez=et*eq;local eA=eh*math.pi;local cT=function(d0)local eB=(ey*d0-ez*math.sin(math.pi*d0/2/eq)+eA*en)/eA;local eC=math.tan(eB)return eh*eC/y(eC*eC+1)end;local eD=es and function(d2)return d2>=em end or function(d2)return d2<=em end;ex=2*eq;if eD(cT(ex))then local eE=0;while d(ex-eE)>0.5 do local d0=(ex+eE)/2;if eD(cT(d0))then ex=d0 else eE=d0 end end end;local eF=ek;local eG=ex/ej;for eH=1,ej do local eI=cT(eH*eG)ew=ew+(eI+eF)*eG/2;eF=eI end;if ex<2*eq then return ew,ex end;ek=eF end;local en=eh*math.asin(ek/eh)local E=(eh*math.asin(em/eh)-en)/ev;local eJ=ei*math.cos(en/eh)/ev;local aj=eJ-ei*math.cos((ev*E+en)/eh)/ev;return aj+ew,E+ex end;function aS.computeTravelTime(ek,el,aj)if aj==0 then return 0 end;if el>0 then local en=eh*math.asin(ek/eh)local eJ=ei*math.cos(en/eh)/el;return(eh*math.acos(el*(eJ-aj)/ei)-en)/el end;if ek==0 then return-1 end;assert(ek>0,'Acceleration and initial speed are both zero.')return aj/ek end;return aS end;local function eK()local vec3=require('cpml.vec3')local cW=cW()local function d1(d2)return type(d2)=='string'end;local function c_(d0)return type(d0)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dv)assert(self.body)local aj=dv+self.body.radius;if not ct(aj,0)then local orbit=y(self.body.GM/aj)return y(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(ds,eL)assert(self.body)assert(c_(ds)or d1(ds))assert(c_(eL))local eM=(d1(ds)or cW.isMapPosition(ds))and self.body:convertToWorldCoordinates(ds)or vec3(ds)local cT=vec3(eL)local eN=eM-self.body.center;local eO=cT:len2()local eP=eN:len()local eQ=self.body.GM;local eR=((eO-eQ/eP)*eN-eN:dot(cT)*cT)/eQ;local cu=eQ/(2*eQ/eP-eO)local eS=eR:len()local d_=eR:normalize()local eT=cu*(1-eS)local eU=cu*(1+eS)local eV=eT*d_+self.body.center;local eW=eS<=1 and-eU*d_+self.body.center or nil;local eX=y(cu*eQ*(1-eS*eS))local eY=eW and 2*math.pi*y(cu^3/eQ)local eZ=math.acos(eR:dot(eN)/(eS*eP))if eN:dot(cT)<0 then eZ=-(eZ-2*math.pi)end;local e_=math.acos((math.cos(eZ)+eS)/(1+eS*math.cos(eZ)))local f0=e_;if f0<0 then f0=f0+2*math.pi end;local f1=f0-eS*math.sin(f0)local f2=0;local f3=0;local f4=0;if eY~=nil then f2=f1/(2*math.pi/eY)f3=eY-f2;f4=f3+eY/2;if eZ-math.pi>0 then f3=f2;f4=f3+eY/2 end;if f4>eY then f4=f4-eY end end;return{periapsis={position=eV,speed=eX/eT,circularOrbitSpeed=y(eQ/eT),altitude=eT-self.body.radius},apoapsis=eW and{position=eW,speed=eX/eU,circularOrbitSpeed=y(eQ/eU),altitude=eU-self.body.radius},currentVelocity=cT,currentPosition=eM,eccentricity=eS,period=eY,eccentricAnomaly=e_,meanAnomaly=f1,timeToPeriapsis=f3,timeToApoapsis=f4,trueAnomaly=eZ}end;local function f5(f6)local e7=cW.BodyParameters(f6.systemId,f6.id,f6.radius,f6.center,f6.GM)return setmetatable({body=e7},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return f5(...)end})end;local function f7()local f8={}local f9={}local fa={XS=13,S=27,M=55,L=110,XL=221}local fb={}local fc;local fd;local fe;local ff;local fg;local function fh()local function fi(fj,fk,fl,fm,fn,fo,fp,fq)fk,fm,fo,fq=vec3(fk),vec3(fm),vec3(fo),vec3(fq)local fr,fs,ft=fj*fj,fl*fl,fn*fn;local eO=fm-fk;local fu=eO:normalize()local fv=eO:len()local fw=fo-fk;local fx=(fw-fw:project_on(fu)):normalize()local fy,fz=fw:dot(fu),fw:dot(fx)local fA=fy*fy+fz*fz;local fB=fu:cross(fx)local ck=(fr-fs+fv*fv)/(2*fv)local cl=(fr-ft+fA-2*fy*ck)/(2*fz)local d5=fr-ck^2-cl^2;local fC=y(d5)local fD=fk+fu*ck+fx*cl+fB*fC;local fE=fk+fu*ck+fx*cl-fB*fC;if d((fq-fD):len()-fp)<d((fq-fE):len()-fp)then return fD else return fE end end;local function fF()local function fG()local fH=core.getConstructWorldOrientationRight()local eO=core.getConstructWorldOrientationForward()local fw=core.getConstructWorldOrientationUp()local fI=library.systemResolution3(fH,eO,fw,{1,0,0})local fJ=library.systemResolution3(fH,eO,fw,{0,1,0})local fK=library.systemResolution3(fH,eO,fw,{0,0,1})return function(fL)return library.systemResolution3(fI,fJ,fK,fL)end end;local fM=fG()local fN=core.getConstructWorldPos()local eM=core.getElementPositionById(1)local fO={eM[1],eM[2],eM[3]}local fP=fM(fO)local fQ={fN[1]-fP[1],fN[2]-fP[2],fN[3]-fP[3]}return fQ end;local function fR(fS,eP,fT)local fU=fS.pts;local fV=#fU;local fW=fS.ref;if fV>3 then local fX,fY,fZ,f_=fU[fV],fU[fV-1],fU[fV-2],fU[fV-3]fS.ref=fT;local eM=fi(fX[1],fX[2],fY[1],fY[2],fZ[1],fZ[2],f_[1],f_[2])local ck,cl,fC=eM.x,eM.y,eM.z;if ck==ck and cl==cl and fC==fC then ck=ck+fW[1]cl=cl+fW[2]fC=fC+fW[3]local g0=vec3(ck,cl,fC)if not fS.lastPos then fS.center=g0 elseif(fS.lastPos-g0):len()<2 then fS.center=g0;fS.skipCalc=true end;fS.lastPos=g0 end;fS.pts={}else local g1={fT[1]-fW[1],fT[2]-fW[2],fT[3]-fW[3]}fU[fV+1]={eP,g1}end end;if bP[1]then fc=#bP[1].getConstructIds()local g2=bP[1].getData()local g3=g2:gmatch('{"constructId[^}]*}[^}]*}')if fc>0 then local fT=fF()local g4,g5=0,0;fg,ff=0,0;for cT in g3 do local dm,aj,g6=cT:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local g7=fa[g6]aj=z(aj)if bP[1].hasMatchingTransponder(dm)==1 then table.insert(f9,dm)end;local g8=bP[1].getConstructType(dm)if CollisionSystem then if g7>27 or g8=="static"or g8=="space"then fg=fg+1;local g9=bP[1].getConstructName(dm)local fS=bL[dm]if fS==nil then g7=g7+G;bL[dm]={pts={},ref=fT,name=g9,i=0,radius=g7,skipCalc=false}fS=bL[dm]end;if not fS.skipCalc then fR(fS,aj,fT)g5=g5+1 end;if fS.center then table.insert(fb,fS)end end;g4=g4+1;if bM and g4>700 or g5>70 or(not bM and g4>300 or g5>30)then coroutine.yield()g4,g5=0,0 end end end;ff=#fb;if ff>0 and bs>20 then local c4,ga,gb,gc;local gd=0;local ge=aR:getPlanetarySystem(0)gc=br:normalize()while gd<ff do coroutine.yield()local gf={table.unpack(fb,gd,math.min(gd+75,ff))}c4,ga,gb=ge:castIntersections(bv,gc,nil,nil,gf,true)if c4 and gb then bO={c4,ga,gb}break end;gd=gd+75 end;if not c4 then bO=nil end else bO=nil end;fb={}fd=g2:find('identifiedConstructs":%[%]')else fe=g2:find('worksInEnvironment":false')end end end;local function gg()if bP[1]then bQ="Atmo"if bP[1].getData():find('worksInAtmosphere":false')then bQ="Space"end end end;function f8.pickType()gg()end;function f8.assignRadar()if radar_1 and bP[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then bP[1]=radar_2 end;if bP[1]==radar_2 then gg()end elseif radar_2 and bP[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then bP[1]=radar_1 end;if bP[1]==radar_1 then gg()end end end;function f8.UpdateRadar()local gh=coroutine.status(UpdateRadarCoroutine)if gh=="suspended"then local cq,gi=coroutine.resume(UpdateRadarCoroutine)if gi then system.print("ERROR UPDATE RADAR: "..gi)end elseif gh=="dead"then UpdateRadarCoroutine=coroutine.create(fh)local cq,gi=coroutine.resume(UpdateRadarCoroutine)end end;function f8.GetRadarHud()local gj=f9;f9={}return fd,fe,fc,ff,fg,gj end;UpdateRadarCoroutine=coroutine.create(fh)return f8 end;local function gk()local gl=9.80665;local gm={}local gn={}local go=vec3({13771471,7435803,-128971})local gp=18000000;local gq=500000;local gr,gs=math.huge;local gt;local function gu(gv)gr=vec3(gv):dist(go)if gr<gp then return true,d(gr-gp)end;gs=vec3(gv):dist(vec3(planet.center))if gs<gq then gt=true else gt=false end;if d(gs-gq)<d(gr-gp)then return gt,d(gs-gq)else return gt,d(gr-gp)end end;local function cU(cT)if aG==1920 then return cT else return A(aG*cT/1920,0)end end;local function cV(cT)if aH==1080 then return cT else return A(aH*cT/1080,0)end end;local function gw()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function gx()local gy="TRAVEL"if not bA then gy="CRUISE"end;if Autopilot then gy="AUTOPILOT"end;return gy end;local gz={Generic_Moon="assets.prod.novaquark.com/20368/f410e727-9d4d-4eab-98bf-22994b3fbdcf.png",Sun="assets.prod.novaquark.com/20368/0936494e-9b3d-4d60-9ea0-d93a3f3e29cd.png",Alioth="assets.prod.novaquark.com/20368/954f3adb-3369-4ea9-854d-a14606334152.png",Alioth_bis="assets.prod.novaquark.com/20368/b83225ed-fb96-404c-8c91-86ac15dfbbec.png",Sanctuary="assets.prod.novaquark.com/20368/1a70dbff-24bc-44cb-905c-6d375d9613b8.png",Feli="assets.prod.novaquark.com/20368/da91066c-b3fd-41f4-8c01-26131b0a7841.png",Ion="assets.prod.novaquark.com/20368/91d10712-dc51-4b73-9fc0-6f07d96605a6.png",Madis="assets.prod.novaquark.com/20368/46d57ef4-40ee-46ca-8cc5-5aee1504bbfe.png",Jago="assets.prod.novaquark.com/20368/7fca8389-6b70-4198-a9c3-4875d15edb38.png",Lacobus="assets.prod.novaquark.com/20368/cb67a6a4-933c-4688-a637-898c89eb5b94.png",Sicari="assets.prod.novaquark.com/20368/f6e2f801-075f-4ccd-ab94-46d060517e8f.png",Sinnen="assets.prod.novaquark.com/20368/54a99084-7c2b-461b-ab1f-ae4229b3b821.png",Symeon="assets.prod.novaquark.com/20368/97940324-f194-4e03-808d-d71733ad545a.png",Talemai="assets.prod.novaquark.com/20368/f68628d9-3245-4d76-968e-ad9c63a19c19.png",Teoma="assets.prod.novaquark.com/20368/5a01dd8c-3cf8-4151-99a2-83b22f1e7249.png",Thades="assets.prod.novaquark.com/20368/59f997a2-bcca-45cf-aa35-26e0e41ed5c1.png"}local gA=""local gB=""local gC=""local gD=1;local gE=2;local gF=3;local gG=4;local gH=5;local gI=6;local gJ=""local gK=0;local gL=e(1/apTickRate)*2*hudTickRate;local gM={}local gN={}local gO={}local gP={}local gQ={}local gR={}local function gS(ck,gT,gU,gV,gW,gX)local gY=tankY;local gZ=tankY+5;if not BarFuelDisplay then gZ=gZ+5 end;if m()==1 and not RemoteHud then gY=gY-50;gZ=gZ-50 end;if gU=="ATMO"then gJ="atmofueltank"elseif gU=="SPACE"then gJ="spacefueltank"else gJ="rocketfueltank"end;gK=_G[gJ.."_size"]if#gV>0 then for i=1,#gV do local g9=string.sub(gV[i][gE],1,12)local g_=0;for h0=1,gK do if gV[i][gE]==g(unit[gJ.."_"..h0].getData()).name then g_=h0;break end end;local h1=q()if gW[i]==nil or gX[i]==nil or h1-gV[i][gI]>gL then local h2;local h3=0;if g_~=0 then gX[i]=g(unit[gJ.."_"..g_].getData()).percentage;gW[i]=g(unit[gJ.."_"..g_].getData()).timeLeft;if gW[i]=="n/a"then gW[i]=0 end else h3=l(gV[i][gD])-gV[i][gG]gX[i]=e(0.5+h3*100/gV[i][gF])h2=gV[i][gH]if h2<=h3 then gW[i]=0 else gW[i]=e(0.5+h3/((h2-h3)/(h1-gV[i][gI])))end;gV[i][gH]=h3;gV[i][gI]=h1 end end;if g9==gT then g9=f("%s %d",gU,i)end;if g_==0 then g9=g9 .." *"end;local h4;if gW[i]==0 then h4=""else h4=cJ(gW[i])end;if gX[i]~=nil then local h5=e(gX[i]*2.55)local h6=f("rgb(%d,%d,%d)",255-h5,h5,0)local cn=""if h4~=""and gW[i]<120 or gX[i]<5 then cn="red "end;local h7=f("rgb(%d,%d,%d)",r(e((255-h5)/2.55),50,100),r(e(h5/2.55),0,50),50)if BarFuelDisplay then gB=gB..f([[
                                            <g class="pdim">                        
                                            <rect fill=%s class="bar" x="%d" y="%d" width="170" height="20"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="20" x="%d" y="%d"></rect>
                                            <text class="txtstart" fill="white" x="%d" y="%d" style="font-family:Play;font-size:14px">%s %s%% %s</text>
                                            </g>]],h7,ck,gZ,h6,e(gX[i]*1.7+0.5),ck,gZ,ck+5,gZ+14,g9,gX[i],h4)gY=gY-22;gZ=gZ-22 else gB=gB..cj(ck,gY,g9,cn.."pdim txtfuel")gB=gB..cj(ck,gZ,f("%d%% %s",gX[i],h4),"pdim txtfuel","fill:"..h6)gY=gY+30;gZ=gZ+30 end end end end;tankY=gY end;local function h8(h9,dv)if dv<200000 and not aq or dv and aq then local ha=0;if d(bu)>1 then ha=45*math.log(d(bu),10)if bu<0 then ha=-ha end end;h9[#h9+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(bu),e(ha))end;return h9 end;local function hb(hc)local hd=-bt;hc=hc-hc:project_on(hd)local he=vec3(0,0,1)he=he-he:project_on(hd)local hf=he:cross(hd)local ha=he:angle_between(hc)*constants.rad2deg;if hc:dot(hf)<0 then ha=360-ha end;return ha end;local function hg(h9,centerX,centerY,hh,hi,bM)local hj=circleRad;local hk=20;local hl=e(hh)if bM then for i=-45,45,5 do local hm=i;h9[#h9+1]=f([[<g transform="rotate(%f,%d,%d)">]],hm,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;h9[#h9+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+hj+hk-len,centerX,centerY+hj+hk)end;h9[#h9+1]=cj(centerX,centerY+hj+hk-35,hi,"pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY+hj+hk-25,hl.." deg","pdim txt txtmid")h9[#h9+1]=f([[<g transform="rotate(%f,%d,%d)">]],-hh,centerX,centerY)h9[#h9+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+hj+hk-20,centerX+5,centerY+hj+hk-20,centerX,centerY+hj+hk-15)h9[#h9+1]="</g>"end;h9[#h9+1]=[[<g style="clip-path: url(#headingClip);">]]local hn=hl;if bM then hn=hb(bo)end;local ho=20;local hp=e(hn)local hq=0;local hr=centerY+hj+hk+20;local hs=centerX;if hi~="YAW"then hr=cV(130)hs=cU(960)end;local ht=[[<path class="txttick line" d="]]local hu=e(hp-(ho+10)-hp%5+0.5)for i=hu+70,hu,-5 do local ck=hs-(-i*5+hn*5)if i%10==0 then hq=10;local B=i;if B==360 then B=0 elseif B>360 then B=B-360 elseif B<0 then B=B+360 end;h9[#h9+1]=cj(ck,hr+15,B,"txtmid bright")elseif i%5==0 then hq=5 end;if hq==10 then ht=f([[%s M %f %f v %d]],ht,ck,hr-5,hq)else ht=f([[%s M %f %f v %d]],ht,ck,hr-2.5,hq)end end;h9[#h9+1]=ht..[["/>]]h9[#h9+1]=f([[<<polygon class="bright" points="%d,%d %d,%d %d,%d"/>]],hs-5,hr-20,hs+5,hr-20,hs,hr-10)if bM then hi="HDG"end;h9[#h9+1]=cj(cU(960),cV(100),hp.."°","dim txt txtmid size14","")h9[#h9+1]=cj(cU(960),cV(85),hi,"dim txt txtmid size20","")h9[#h9+1]=[[</g>]]end;local function hv(h9,hw,hh,centerX,centerY,bM,hx,eI)local hj=circleRad;local hy=e(hj*3/5)if hj>0 then local hz=e(hw)local len=0;local ht=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*hh,centerX,centerY)if not aq then ht=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;h9[#h9+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],hj-1,centerX,centerY)h9[#h9+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(hz-30-hz%5+0.5),e(hz+30+hz%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cl=centerY+-i*5+hw*5;if len==30 then ht=f([[%s M %d %f h %d]],ht,centerX-hy-len,cl,len)if aq then h9[#h9+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hh,centerX,centerY,centerX-hy+10,cl+4,i)h9[#h9+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hh,centerX,centerY,centerX+hy-10,cl+4,i)if i==0 or i==180 or i==-180 then h9[#h9+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hh,centerX,centerY,centerX-hy+20,cl,hy*2-40)end else h9[#h9+1]=cj(centerX-hy+10,cl,i,"pdim txt txtmid")h9[#h9+1]=cj(centerX+hy-10,cl,i,"pdim txt txtmid")end;ht=f([[%s M %d %f h %d]],ht,centerX+hy,cl,len)else ht=f([[%s M %d %f h %d]],ht,centerX-hy-len,cl,len)ht=f([[%s M %d %f h %d]],ht,centerX+hy,cl,len)end end;h9[#h9+1]=ht..[["/>]]local hA="PITCH"if not bM then hA="REL PITCH"end;if hw>90 and not aq then hw=90-(hw-90)elseif hw<-90 and not aq then hw=-90-(hw+90)end;if hj>200 then if aq then if eI>Q then h9[#h9+1]=cj(centerX,centerY-15,"Yaw","pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY+20,hx,"pdim txt txtmid")end;h9[#h9+1]=f([[<g transform="rotate(%f,%d,%d)">]],-hh,centerX,centerY)else h9[#h9+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;h9[#h9+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hy+25,centerY-5,centerX-hy+20,centerY,centerX-hy+25,centerY+5,centerX-hy+50,centerY+4,hz)h9[#h9+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hy-25,centerY-5,centerX+hy-20,centerY,centerX+hy-25,centerY+5,centerX+hy-30,centerY+4,hz)h9[#h9+1]="</g>"end;local hB=e(hj/3)h9[#h9+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hB,centerY,hj-hB)if not aq and bM then h9[#h9+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hh,centerX,centerY,centerX-hy+10,centerY,hy*2-20)end;h9[#h9+1]="</g>"if hj<200 then if aq and eI>Q then h9[#h9+1]=cj(centerX,centerY-hj,hA,"pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY-hj+10,hz,"pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY-15,"Yaw","pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY+20,hx,"pdim txt txtmid")else h9[#h9+1]=cj(centerX,centerY-hj,hA,"pdim txt txtmid")h9[#h9+1]=cj(centerX,centerY-hj+15,hz,"pdim txt txtmid")end end end end;local function hC(h9,dv,bM)local hD=altMeterX;local hE=altMeterY;local hF=78;local hG=19;local hH=ao;if ao~=-1 then h9[#h9+1]=cj(hD+hF,hE+hG+20,f("AGL: %.1fm",ao),"pdim altsm txtend")end;if bM and(dv<200000 and not aq or dv and aq)then table.insert(h9,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hD-1,hE-4,hF+2,hG+6,hD+1,hE-1,hF-4,hG))local fV=0;local hI=1;local hJ=0;local hK=dv<0;local hL=dv<planet.surfaceMaxAltitude;local hM=9;if hK then hM=0 end;local dv=d(dv)while fV<6 do local hN=11;local hO=16;local hP=9;local hQ=14;local cn="altsm"if fV>2 then hO=hO+3;hN=hN+2;hQ=hQ+2;hP=hP-6;cn="altbig"end;if hK then cn=cn.." red"elseif hL then cn=cn.." orange"end;local hR=dv/hI%10;local hS=e(hR)local hT=e((hS+1)%10)local hU=hJ;if fV==0 then hU=hR-hS;if hK then hU=1-hU end end;if hK and(fV==0 or hJ~=0)then local hV=hT;hT=hS;hS=hV end;local hW=hO*(hU-1)local hX=hW+hO;local ck=hD+hP+(6-fV)*hN;local cl=hE+hQ;h9[#h9+1]=cj(ck,cl+hW,hT,cn)h9[#h9+1]=cj(ck,cl+hX,hS,cn)fV=fV+1;hI=hI*10;if hS==hM then hJ=hU else hJ=0 end end;table.insert(h9,[[</g></g>]])end end;local function hY(eL)local hZ=-math.deg(n(eL.y,eL.z))+180;hZ=hZ-90;if hZ<0 then hZ=360+hZ end;if hZ>180 then hZ=-180+hZ-180 end;return-hZ end;local function h_(eL)local hn=math.deg(n(eL.y,eL.x))-90;if hn<-180 then hn=360+hn end;return hn end;local function i0(h9,eL,eI,centerX,centerY)if eI>5 and not aq or eI>Q then local hj=circleRad;local i1=20;local i2=20;local i3=hY(eL)local i4=h_(eL)local i5=14;local i6=i5/2;local i7=-i4/i2*hj;local i8=i3/i1*hj;local ck=centerX+i7;local cl=centerY+i8;local aj=y(i7^2+i8^2)local i9=[[<circle
                            cx="]]..ck..[["
                            cy="]]..cl..[["
                            r="]]..i6/i5 ..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ck..[["
                            cy="]]..cl..[["
                            r="]]..i6 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ck-i5 ..[[,]]..cl..[[ h ]]..i6 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ck+i6 ..[[,]]..cl..[[ h ]]..i6 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ck..[[,]]..cl-i5 ..[[ v ]]..i6 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<hj then h9[#h9+1]=i9 else local ha=n(i8,i7)local ia=4;local ib=centerX+hj*math.cos(ha)local ic=centerY+hj*math.sin(ha)h9[#h9+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',ha*180/math.pi,ib,ic,ib-ia,ic-ia/2,ia*2,ia,ib+ia,ic-ia,ia,ia,-ia,ia)end;if not aq then local id=vec3(eL)i3=hY(-id)i4=h_(-id)i7=-i4/i2*hj;i8=i3/i1*hj;ck=centerX+i7;cl=centerY+i8;aj=y(i7^2+i8^2)if aj<hj then local ie=[[<circle
                                    cx="]]..ck..[["
                                    cy="]]..cl..[["
                                    r="]]..i6 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ck..[[,]]..cl-i5 ..[[ v ]]..i6 ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ck..[[,]]..cl..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ck..[[,]]..cl..[[)" />
                                <path
                                    d="M ]]..ck-i6 ..[[,]]..cl..[[ h ]]..i5 ..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ck..[[,]]..cl..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ck..[[,]]..cl..[[)"/>]]h9[#h9+1]=ie end end end end;local function ig(h9,gy,ih,ii)ih=e(ih+0.5)local gY=throtPosY+10;local gZ=throtPosY+20;if m()==1 and not RemoteHud then gY=55;gZ=65 end;local ij="CRUISE"local unit="km/h"local cq=ii;if gy=="TRAVEL"or gy=="AUTOPILOT"then ij="THROT"unit="%"cq=ih;local ik="dim"if ih<0 then ik="red"end;h9[#h9+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],ik,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(ih),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;h9[#h9+1]=cj(throtPosX+10,gY,ij,"pbright txtstart")h9[#h9+1]=cj(throtPosX+10,gZ,f("%.0f %s",cq,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bA and M then ih=e(N*100+0.5)local ik="red"if ih<0 then ik="red"end;h9[#h9+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],ik,1-d(ih),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)h9[#h9+1]=cj(throtPosX+10,gY+40,"LIMIT","pbright txtstart")h9[#h9+1]=cj(throtPosX+10,gZ+40,ih.."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then h9[#h9+1]=cj(throtPosX+10,gY-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not aq and Autopilot then h9[#h9+1]=cj(throtPosX+10,gY-40,"LIMIT: "..e(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function il(h9,im)local io=throtPosY-10;local ip=throtPosX+10;h9[#h9+1]=cj(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then io=75 end;h9[#h9+1]=cj(ip,io,e(im).." km/h","pbright txtbig txtstart")end;local function iq(h9)h9[#h9+1]=cj(cU(1900),cV(1070),f("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")h9[#h9+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then h9[#h9+1]=cj(cU(960),cV(550),"Warning: Invalid Control Scheme Detected","warnings")h9[#h9+1]=cj(cU(960),cV(600),"Keyboard Scheme must be selected","warnings")h9[#h9+1]=cj(cU(960),cV(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ir=cU(960)local is=cV(860)local it=cV(880)local iu=cV(900)local iv=cV(960)local iw=cV(200)local ix=cV(250)local iy=cV(960)if m()==1 and not RemoteHud then is=cV(135)it=cV(155)iu=cV(175)iw=cV(115)ix=cV(95)end;local iz="#222222"local iA="white"local iB="dimmer"local iC="pbright"local iD="#110000"local iE=iz;local iF=iB;if BrakeIsOn then h9[#h9+1]=cj(ir,is,"Brake Engaged","warnings")iD="#440000"iE=iA;iF=iC elseif L>0 then h9[#h9+1]=cj(ir,is,"Auto-Brake Engaged","warnings","opacity:"..L)end;local iG="#110000"local iH=iz;local iI=iB;if aq and b2 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then h9[#h9+1]=cj(ir,iw+50,"** STALL WARNING **","warnings")iG="#ff0000"iH=iA;iI=iC;c6("stall","SW",2)end end;if bK then h9[#h9+1]=cj(ir,iw+90,"Flight Assist in Progress","warnings")end;if ax then h9[#h9+1]=cj(ir,iy,"Gyro Enabled","warnings")end;local iJ="#111100"local iK=iz;local iL=iB;if GearExtended then iJ="#775500"iK=iA;iL=iC;if S then h9[#h9+1]=cj(ir,it,"Gear Extended","warn")else h9[#h9+1]=cj(ir,it,"Landed (G: Takeoff)","warnings")end;local iM=cw(a:getTargetGroundAltitude())h9[#h9+1]=cj(ir,iu,"Hover Height: "..iM,"warn")end;local iN="#000011"local iO=iz;local iP=iB;if a7 then iN="#0000DD"iO=iA;iP=iC;h9[#h9+1]=cj(ir,iv+20,"ROCKET BOOST ENABLED","warn")end;local iQ="#001100"local iR=iz;local iS=iB;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then iQ="#00DD00"iR=iA;iS=iC;if d(as-antigrav.getBaseAltitude())<501 then h9[#h9+1]=cj(ir,iw+15,f("Target Altitude: %d Singularity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warn")else h9[#h9+1]=cj(ir,iw+15,f("Target Altitude: %d Singluarity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then h9[#h9+1]=cj(ir,iw+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then h9[#h9+1]=cj(ir,iw+20,f("LockedPitch: %d",e(LockPitch)),"warn")elseif a0 then h9[#h9+1]=cj(ir,iw+20,"Follow Mode Engaged","warn")elseif Reentry or an then h9[#h9+1]=cj(ir,iw+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local iM=cw(HoldAltitude,2)if VertTakeOff then if by then iM=cw(antigrav.getBaseAltitude(),2).." AGG singularity height"end;h9[#h9+1]=cj(ir,iw,"VTO to "..iM,"warn")elseif AutoTakeoff and not IntoOrbit then if am then h9[#h9+1]=cj(ir,iw,"Takeoff to "..AutopilotTargetName,"warn")else h9[#h9+1]=cj(ir,iw,"Takeoff to "..iM,"warn")end;if BrakeIsOn and not VertTakeOff then h9[#h9+1]=cj(ir,iw+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else h9[#h9+1]=cj(ir,iw,"Altitude Hold: "..iM,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then h9[#h9+1]=cj(ir,iw+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then h9[#h9+1]=cj(ir,iw+20,"Aligning trajectory","warn")elseif ar<0.05 then h9[#h9+1]=cj(ir,iw+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then h9[#h9+1]=cj(ir,iw,b9,"warn")end end;if BrakeLanding then if StrongBrakes then h9[#h9+1]=cj(ir,iw,"Brake-Landing","warnings")else h9[#h9+1]=cj(ir,iw,"Coast-Landing","warnings")end end;if ProgradeIsOn then h9[#h9+1]=cj(ir,iw,"Prograde Alignment","crit")end;if RetrogradeIsOn then h9[#h9+1]=cj(ir,iw,"Retrograde Alignment","crit")end;local iT="#110000"local iU=iz;local iV=iB;if bN then iT="#FF0000"iU=iA;iV=iC;local type;if string.find(bN,"COLLISION")then type="warnings"else type="crit"end;h9[#h9+1]=cj(ir,ix+20,bN,type)elseif ar==0 then local c1,c5=b_(br:normalize())if c5~=nil then iV=iC;iT="#FF0000"iU=iA;local iM=cw(c5)local travelTime=aS.computeTravelTime(bs,0,c5)local iW="Collision"if c1.noAtmosphericDensityAltitude>0 then iW="Atmosphere"end;h9[#h9+1]=cj(ir,ix+20,c1.name.." "..iW.." "..cJ(travelTime).." In "..iM,"crit")end end;if VectorToTarget and not IntoOrbit then h9[#h9+1]=cj(ir,iw+35,VectorStatus,"warn")end;local iX="#111100"local iY=iz;local iZ=iB;if bU and#bU>1 then iX="#DDDD00"iY=iA;iZ=iC end;local i_=cU;local j0=cV;local iB="topButton"local j1="topButtonActive"local j2=iB;if Autopilot or VectorToTarget or am or IntoOrbit then j2=j1 end;local j3=iB;if ProgradeIsOn then j3=j1 end;local j4=iB;if BrakeLanding or GearExtended then j4=j1 end;local j5=iB;if AltitudeHold or VectorToTarget then j5=j1 end;local j6=iB;if RetrogradeIsOn then j6=j1 end;local j7=iB;if IntoOrbit or bi and Autopilot then j7=j1 end;local j8=j0(30)h9[#h9+1]=f([[ 
                            <g class="pdim txt txtmid">
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],j2,i_(960),j0(54),j0(-53),i_(-120),i_(25),j0(50))h9[#h9+1]=cj(i_(910),j8,"AUTOPILOT")h9[#h9+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j3,i_(865),j0(51),i_(-25),j0(-50),i_(-110),i_(25),j0(46))h9[#h9+1]=cj(i_(800),j8,"PROGRADE")h9[#h9+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j4,i_(755),j0(47),i_(-25),j0(-46),i_(-98),i_(44),j0(44))h9[#h9+1]=cj(i_(700),j8,"LAND")h9[#h9+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l 0 %f l %f 0 l %f %f Z"/>
                                ]],j5,i_(960),j0(54),j0(-53),i_(120),i_(-25),j0(50))h9[#h9+1]=cj(i_(1010),j8,"ALT HOLD")h9[#h9+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j6,i_(1055),j0(51),i_(25),j0(-50),i_(110),i_(-25),j0(46))h9[#h9+1]=cj(i_(1122),j8,"RETROGRADE")h9[#h9+1]=f([[
                                </g>
            
                                <g class="%s">
                                <path d="M %f %f l %f %f l %f 0 l %f %f Z"/>
                                ]],j7,i_(1165),j0(47),i_(25),j0(-46),i_(98),i_(-44),j0(44))h9[#h9+1]=cj(i_(1220),j8,"ORBIT")h9[#h9+1]=[[
                                </g>
                            </g>]]h9[#h9+1]="</g>"return h9 end;local function j9(eI)return e(A(eI*3.6,0)+0.5).." km/h"end;local function ja(h9)local ck=OrbitMapX+10;local cl=OrbitMapY+20;local jb={}local jc={"Alt-4: AutoTakeoff to Target"}local jd={"Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local je={"Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local jf={"","------------------ALWAYS--------------------","Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view","Alt-4: Autopilot to IPH target","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and off","Alt-8: Toggle ground stabilization (underwater flight)","CTRL: Toggle Brakes on and off. Cancels active AP","LAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}table.insert(jb,"--------------DYNAMIC-----------------")if aq then if ao~=-1 then c9(jb,jc)if ac and planet and ac.name==planet.name then table.insert(jb,"Alt-4-4: Low Orbit Autopilot to Target")end;if antigrav or VertTakeOffEngine then if antigrav then if by then table.insert(jb,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(jb,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(jb,"Alt-6: Begins Vertical AutoTakeoff.")end else table.insert(jb,"Alt-6: Autotakeoff to AutoTakeoffAltitude")table.insert(jb,"Alt-6-6: Autotakeoff to 11% atmosphere")end;if GearExtended then table.insert(jb,"G: Takeoff to hover height, raise gear")else table.insert(jb,"G: Lowergear and Land")end else c9(jb,jd)table.insert(jb,"G: Begin BrakeLanding or Land")end;if VertTakeOff then table.insert(jb,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end else c9(jb,je)if shield_1 then table.insert(jb,"Alt-Shift-5: Toggle shield off and on")table.insert(jb,"Alt-Shift-6: Vent shields")end end;if gyro then table.insert(jb,"Alt-9: Activate Gyroscope")end;if ExtraLateralTags~="none"or ExtraLongitudeTags~="none"or ExtraVerticalTags~="none"then table.insert(jb,"Alt-Shift-9: Cycles engines with Extra tags")end;if AltitudeHold then table.insert(jb,"Alt-Spacebar/C will raise/lower target height")table.insert(jb,"Alt+Shift+Spacebar/C will raise/lower target to preset values")end;if AtmoSpeedAssist or not aq then table.insert(jb,"LALT+Mousewheel will lower/raise speed limit")end;c9(jb,jf)for i=1,#jb do cl=cl+12;h9[#h9+1]=cj(ck,cl,jb[i],"pdim txtbig txtstart")end end;local function jg(h9)local jh=cU(OrbitMapX)local ji=cV(OrbitMapY)local jj=OrbitMapSize;local jk=4;local jl=15;local ck=0;local cl=0;local jm,jn,jo,jp;local jq;local function jr(type)local js,E,eI,jt,cn,ju;if type=="Periapsis"then js=jq.periapsis.altitude;E=jq.timeToPeriapsis;eI=jq.periapsis.speed;cn="txtend"jt=12;ju=math.min(ck,jh+jj-planet.radius/jo-jk*2)else js=jq.apoapsis.altitude;E=jq.timeToApoapsis;eI=jq.apoapsis.speed;jt=-12;cn="txtstart"ju=ck end;if bs<1 then E=0 end;h9[#h9+1]=f([[<line class="pdim linethin" style="stroke:white" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ju+jt,cl-5,ck,cl-5)h9[#h9+1]=f([[<line class="pdim linethin" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ju-jt*4,cl+2,ck,cl+2)h9[#h9+1]=cj(ju,cl,type,cn)ck=ju-jt*2;cl=cl+jl;local iM=cw(js)h9[#h9+1]=cj(ck,cl,iM,cn)cl=cl+jl;h9[#h9+1]=cj(ck,cl,cJ(E),cn)cl=cl+jl;h9[#h9+1]=cj(ck,cl,j9(eI),cn)end;local jv=jj*1.5;if SelectedTab=="INFO"then jv=25*7 end;if SelectedTab~="HIDE"then h9[#h9+1]=[[<g class="pbright txtorb txtmid">]]h9[#h9+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" class="dimfill brightstroke" style="stroke-width:3;fill-opacity:0.3;" />',jj*2,jv,jh,ji)h9[#h9+1]=f([[<clippath id="orbitRect">
                                                        <rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" class="dimfill brightstroke" style="stroke-width:3;fill-opacity:0.3;" />
                                                        </clippath>]],jj*2,jv,jh,ji)end;if SelectedTab=="ORBIT"then ji=ji+jk;jm=jj/2;jp=0;jq={}jq.periapsis={}jq.apoapsis={}if orbit~=nil then if orbit.periapsis~=nil then jq.periapsis.altitude=orbit.periapsis.altitude;jq.periapsis.speed=orbit.periapsis.speed end;if orbit.apoapsis~=nil then jq.apoapsis.altitude=orbit.apoapsis.altitude;jq.apoapsis.speed=orbit.apoapsis.speed end;jq.period=orbit.period;jq.eccentricity=orbit.eccentricity;jq.timeToApoapsis=orbit.timeToApoapsis;jq.timeToPeriapsis=orbit.timeToPeriapsis;jq.eccentricAnomaly=orbit.eccentricAnomaly;jq.trueAnomaly=orbit.trueAnomaly end;if jq.periapsis==nil then jq.periapsis={}jq.periapsis.altitude=-planet.radius;jq.periapsis.speed=MaxGameVelocity end;if jq.eccentricity==nil then jq.eccentricity=1 end;if jq.apoapsis==nil then jq.apoapsis={}jq.apoapsis.altitude=as;jq.apoapsis.speed=0 end;if bs<1 then jq.apoapsis.altitude=as;jq.apoapsis.speed=0 end;if jq.apoapsis.altitude then jo=(jq.apoapsis.altitude+jq.periapsis.altitude+planet.radius*2)/(jm*2)jn=(planet.radius+jq.apoapsis.altitude)/jo*(1-jq.eccentricity)jp=jm-jq.periapsis.altitude/jo-planet.radius/jo;local jw=math.pi;if jq.period~=nil and jq.period>0 and jq.timeToApoapsis~=nil then jw=jq.eccentricAnomaly;if jq.timeToPeriapsis<jq.timeToApoapsis then jw=2*math.pi-jw end end;if bs<1 or jw~=jw then jw=math.pi end;local jx=-jm*math.cos(jw)+jh+jj+jk;local jy=jn*math.sin(jw)+ji+jj*1.5/2+jk;local jz=""h9[#h9+1]='<g clip-path="url(#orbitRect)">'h9[#h9+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],jz,jh+jj+jk,ji+jj*1.5/2+jk,jm,jn)if jn<1 then h9[#h9+1]=f([[<line x1="%f" y1="%f" x2="%f" y2="%f" stroke="red"/>]],jh+jj+jk-jp,ji+jj*1.5/2+jk,jx,jy)end;h9[#h9+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="1" fill="rgb(0,150,200)" opacity="0.5" />',jh+jj+jk-jp,ji+jj*1.5/2+jk,(planet.radius+planet.noAtmosphericDensityAltitude)/jo)h9[#h9+1]=f('<clipPath id="planetClip"><circle cx="%f" cy="%f" r="%f" /></clipPath>',jh+jj+jk-jp,ji+jj*1.5/2+jk,(planet.radius+planet.noAtmosphericDensityAltitude)/jo)h9[#h9+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f" clip-path="url(#planetClip)"/>]],"redout",jh+jj+jk,ji+jj*1.5/2+jk,jm,jn)h9[#h9+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="black" stroke-width="1" fill="rgb(0,100,150)" />',jh+jj+jk-jp,ji+jj*1.5/2+jk,planet.radius/jo)h9[#h9+1]='</g>'local jA=math.floor(planet.radius/jo+0.5)local jB=gz.Generic_Moon;if gz[planet.name]then jB=gz[planet.name]end;ck=jh+jj+jk*4+jm;cl=ji+jj*1.5/2+5+jk;if jq.apoapsis~=nil and jq.apoapsis.speed<MaxGameVelocity then jr("Apoapsis")end;cl=ji+jj*1.5/2+5+jk;ck=jh+jj-jk*2-jm;if jq.periapsis~=nil and jq.periapsis.speed<MaxGameVelocity and jq.periapsis.altitude>0 then jr("Periapsis")end;h9[#h9+1]=cj(jh+jj+jk,ji+20+jk,planet.name,"txtorbbig")h9[#h9+1]=f('<circle cx="%f" cy="%f" r="2" stroke="black" stroke-width="1" fill="white" />',jx,jy)h9[#h9+1]=[[</g>]]return h9 else h9[#h9+1]='<g clip-path="url(#orbitRect)">'local jC=""local jD=1.2*(maxAtlasX-minAtlasX)/(jj*2)local jE=1.4*(maxAtlasY-minAtlasY)/(jj*1.5)for cS,cT in pairs(b[0])do if cT.center then local ck=jh+jj+cT.center.x/jD;local cl=ji+jj*1.5/2+cT.center.y/jE;jC=jC..'<circle cx="'..ck..'" cy="'..cl..'" r="'..cT.radius/jD*30 ..'" stroke="white" stroke-width="1" fill="blue" />'if not string.match(cT.name,"Moon")and not string.match(cT.name,"Sanctuary")and not string.match(cT.name,"Space")then jC=jC.."<text x='"..ck.."' y='"..cl+cT.radius/jD*30+20 .."' font-size='12' fill="..ay.." text-anchor='middle' font-family='Montserrat'>"..cT.name.."</text>"end end end;local eM=vec3(core.getConstructWorldPos())local ck=jh+jj+eM.x/jD;local cl=ji+jj*1.5/2+eM.y/jE;jC=jC..'<circle cx="'..ck..'" cy="'..cl..'" r="2" stroke="white" stroke-width="1" fill="red"/>'jC=jC.."<text x='"..ck.."' y='"..cl-10 .."' font-size='14' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aN=jD;aO=jE;local jF=eM+br*1000000;local jG=jh+jj+jF.x/jD;local gZ=ji+jj*1.5/2+jF.y/jE;jC=jC..'<line x1="'..ck..'" y1="'..cl..'" x2="'..jG..'" y2="'..gZ..'" stroke="purple" stroke-width="1"/>'h9[#h9+1]=jC;h9[#h9+1]='</g>'end elseif SelectedTab=="INFO"then h9=aV.DrawOdometer(h9,ad,TotalDistanceTravelled,ae)elseif SelectedTab=="HELP"then h9=ja(h9)else return h9 end end;local function jH(jI,jJ)local jK;local jL=(jJ-jI):normalize()local eN=(bv-jI):dot(jL)/jL:dot(jL)if eN<=0.then return(bv-jI):len()elseif eN>=(jJ-jI):len()then return(bv-jJ):len()end;local jM=jI+eN*jL;jK=(jM-bv):len()return jK end;local function jN()local jK;local jO=nil;local jP=nil;local jQ=nil;for cS,jR in pairs(b[0])do if jR.hasAtmosphere then local aj=jH(planet.center,jR.center)if jO==nil or aj<jO then jP=jR;jO=aj;jQ=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local e8=jH(ac.center,jR.center)if e8<jO then jP=jR;jO=e8;jQ=ac end end end end;local jS=cU(1770)local jT=cV(330)if jO then local jU="txttick "local jV=500000;if jO<jP.radius+jV or jO<jQ.radius+jV then if bH then jU="txttick red "else jU="txttick orange "end end;jK=cw(jO,2)bJ=cj(jS,jT,"Pipe ("..jQ.name.."--"..jP.name.."): "..jK,jU.."pbright txtmid")end end;local function jW(ck,cl,jX,jY,ij)local jZ={x=ck,y=cl,width=jX,height=jY,label=ij}bT[ij]=jZ;return jZ end;local function j_(k0,k1,jX,jY,ck,cl,k2,k3,k4,k5)local jZ={enableName=k0,disableName=k1,width=jX,height=jY,x=ck,y=cl,toggleVar=k2,toggleFunction=k3,drawCondition=k4,hovered=false}if k5 then table.insert(gn,jZ)else table.insert(gm,jZ)end;return jZ end;local function k6(k7)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif k7=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif k7=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif k7=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=cc(k7)showHud=false else bE={}showHud=true end end;local function k8()bD=not bD;if bD then aF=gn;a2="Hold SHIFT to see Settings"bF=showHud else aF=gm;a2="Hold SHIFT to see Control Buttons"k6()showHud=bF end end;local function k9()local function ka(cT)_G[cT]=not _G[cT]if _G[cT]then a2=cT.." set to true"else a2=cT.." set to false"end;if cT=="showHud"then bF=_G[cT]elseif cT=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local kb=50;local kc=340;local ck=500;local cl=aH/2-400;local kd=0;for cS,cT in pairs(cc("boolean"))do if type(_G[cT])=="boolean"then j_(cT,cT,kc,kb,ck,cl,function()return _G[cT]end,function()ka(cT)end,function()return true end,true)cl=cl+kb+20;if kd==9 then ck=ck+kc+20;cl=aH/2-400;kd=0 else kd=kd+1 end end end;j_("Control View","Control View",kc,kb,10,aH/2-500,function()return true end,k8,function()return true end,true)j_("View Handling Settings",'Hide Handling Settings',kc,kb,10,aH/2-(500-kb),function()return showHandlingVariables end,function()k6("handling")end,function()return true end,true)j_("View Hud Settings",'Hide Hud Settings',kc,kb,10,aH/2-(500-kb*2),function()return showHudVariables end,function()k6("hud")end,function()return true end,true)j_("View Physics Settings",'Hide Physics Settings',kc,kb,10,aH/2-(500-kb*3),function()return showPhysicsVariables end,function()k6("physics")end,function()return true end,true)end;local function ke()local function kf()local position=bv;local g9=planet.name..". "..#SavedLocations;if bP[1]then local dm,_=bP[1].getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dm~=nil and dm~=""then g9=g9 .." "..bP[1].getConstructName(dm)end end;return aW.AddNewLocation(g9,position,false,true)end;local function kg()TurnBurn=not TurnBurn end;local function kh(ki)if ki==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kj()aW.UpdatePosition()end;local function kk()aW.ClearCurrentPosition()end;local function kl(fV)local g9=AutopilotTargetName;if fV~=nil and type(fV)=="number"then if fV==0 then return"None"end;g9=bG[fV].name end;if g9==nil then g9=CustomTarget.name end;if g9==nil then g9="None"end;return g9 end;local function km(fV)return"Engage Autopilot: "..kl(fV)end;local function kn(fV)return"Disable Autopilot: "..kl(fV)end;local function ko()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)c6("folOn","F")else c6("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local kb=50;local kc=260;local kp=j_("Enable Brake Toggle","Disable Brake Toggle",kc,kb,aG/2-kc/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)j_("Align Prograde","Disable Prograde",kc,kb,aG/2-kc/2-50-kp.width,aH/2-kb+380,function()return ProgradeIsOn end,function()kh(1)end)j_("Align Retrograde","Disable Retrograde",kc,kb,aG/2-kc/2+kp.width+50,aH/2-kb+380,function()return RetrogradeIsOn end,kh,function()return ar==0 end)apbutton=j_(km,kn,600,60,aG/2-600/2,aH/2-60/2-330,function()return Autopilot or VectorToTarget or am or IntoOrbit end,function()end)local i;local function kq(kr)local fV=bS+kr;if fV>#bG then fV=fV-#bG-1 end;if fV<0 then fV=#bG+fV end;return fV end;apExtraButtons={}for i=0,10 do local button=j_(function(cv)local fV=kq(cv.apExtraIndex)if Autopilot or VectorToTarget or am or IntoOrbit then return"Redirect: "..kl(fV)end;return km(fV)end,function(cv)local fV=kq(cv.apExtraIndex)return kn(fV)end,600,60,aG/2-600/2,aH/2-60/2-330+60*i,function(cv)local fV=kq(cv.apExtraIndex)return fV==AutopilotTargetIndex and(Autopilot or VectorToTarget or am or IntoOrbit)end,function(cv)local fV=kq(cv.apExtraIndex)local ks=AutopilotTargetIndex==fV;AutopilotTargetIndex=fV;aW.UpdateAutopilotTarget()cE()if not ks and not(Autopilot or VectorToTarget or am or IntoOrbit)then cE()end end,function()return bR end)button.apExtraIndex=i;apExtraButtons[i]=button end;j_("Save Position","Save Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,kf,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)j_("Update Position","Update Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,kj,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)j_("Clear Position","Clear Position",200,apbutton.height,apbutton.x-200-30,apbutton.y,function()return true end,kk,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kb=60;kc=300;local ck=0;local cl=aH/2-150;j_("View Settings","View Settings",kc,kb,ck,cl,function()return true end,k8)cl=cl+kb+20;j_("Enable Turn and Burn","Disable Turn and Burn",kc,kb,ck,cl,function()return TurnBurn end,kg)ck=10;cl=aH/2-300;j_("Horizontal Takeoff Mode","Vertical Takeoff Mode",kc,kb,ck+kc+20,cl,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bx end)cl=cl+kb+20;j_("Engage Orbiting","Cancel Orbiting",kc,kb,ck+kc+20,cl,function()return IntoOrbit end,cA,function()return ar==0 and bM end)cl=cl+kb+20;j_("Glide Re-Entry","Cancel Glide Re-Entry",kc,kb,ck,cl,function()return Reentry end,function()al=1;kh(1)end,function()return planet.hasAtmosphere and not aq end)j_("Parachute Re-Entry","Cancel Parachute Re-Entry",kc,kb,ck+kc+20,cl,function()return Reentry end,cH,function()return planet.hasAtmosphere and not aq end)cl=cl+kb+20;j_("Engage Follow Mode","Disable Follow Mode",kc,kb,ck,cl,function()return a0 end,ko,function()return m()==1 end)j_("Enable Repair Arrows","Disable Repair Arrows",kc,kb,ck+kc+20,cl,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)cl=cl+kb+20;if not ExternalAGG then j_("Enable AGG","Disable AGG",kc,kb,ck,cl,function()return by end,cI,function()return antigrav~=nil end)end;j_(function()return f("Switch IPH Mode - Current: %s",iphCondition)end,function()return f("IPH Mode: %s",iphCondition)end,kc*2,kb,ck,cl,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)cl=cl+kb+20;j_(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,kc*2,kb,ck,cl,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)local kt=cV(20)local button=jW(0,0,cU(70),kt,"INFO")button=jW(button.x+button.width,button.y,cU(80),kt,"ORBIT")button=jW(button.x+button.width,button.y,cU(70),kt,"HELP")jW(button.x+button.width,button.y,cU(70),kt,"HIDE")end;local ku={}local kv=nil;function ku.HUDPrologue(h9)bH,bI=gu(bv)if not bH then H=PvPR;J=PvPG;I=PvPB;if shield_1 and AutoShieldToggle and shield_1.getState()==0 then shield_1.toggle()end else H=SafeR;J=SafeG;I=SafeB;if shield_1 and AutoShieldToggle and shield_1.getState()==1 then shield_1.toggle()end end;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.8+0.5)..","..e(J*0.8+0.5)..","..e(I*0.8+0.5)..[[)]]local kw=ay;local kx=az;local ky=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.3+0.5)..[[)]]local kz=ay;local kA=az;if gw()and not brightHud then kw=[[rgb(]]..e(H*0.5+0.5)..","..e(J*0.5+0.5)..","..e(I*0.5+0.5)..[[)]]kx=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.2+0.5)..[[)]]end;local i_=cU;local j0=cV;h9[#h9+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none;stroke:%s}
                                .linethick {stroke-width:3px;fill:none}
                                .linethin {stroke-width:1px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank;}
                                .warn {fill:orange; font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                text.bright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pbright {fill:%s;stroke:%s}
                                text.pbright {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dim {fill:%s;stroke:%s}
                                text.dim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .pdim {fill:%s;stroke:%s}
                                text.pdim {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .red {fill:red;stroke:red}
                                text.red {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .orange {fill:orange;stroke:orange}
                                text.orange {stroke:black; stroke-width:10px;paint-order:stroke;}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                text { stroke:black; stroke-width:10px;paint-order:stroke;}
                                .dimstroke {stroke:%s}
                                .brightstroke {stroke:%s}
                                .indicatorText {font-size:20px;fill:white}
                                .size14 {font-size:14px}
                                .size20 {font-size:20px}
                                .topButton {fill:%s;opacity:0.5;stroke-width:2;stroke:%s}
                                .topButtonActive {fill:url(#RadialGradientCenter);opacity:0.8;stroke-width:2;stroke:%s}
                                .topButton text {font-size:13px; fill: %s; opacity:1; stroke-width:20px}
                                .topButtonActive text {font-size:13px;fill:%s; stroke-width:0px; opacity:1}
                                .indicatorFont {font-size:20px;font-family:Bank}
                                .dimmer {stroke: %s;}
                                .dimfill {fill: %s;}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                                <defs>
                                    <radialGradient id="RadialGradientCenterTop" cx="0.5" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="100%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientRightTop" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinRightTopGradient" cx="1" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientLeftTop" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.5"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="ThinLeftTopGradient" cx="0" cy="0" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.2"/>
                                        <stop offset="200%%" stop-color="black" stop-opacity="0"/>
                                    </radialGradient>
                                    <radialGradient id="RadialGradientCenter" cx="0.5" cy="0.5" r="1">
                                        <stop offset="0%%" stop-color="%s" stop-opacity="0.8"/>
                                        <stop offset="100%%" stop-color="%s" stop-opacity="0.5"/>
                                    </radialGradient>
                                </defs>
                                <g class="pdim txt txtend">
                                
                            ]],kw,kw,kw,kz,kz,kx,kx,kA,kA,kx,kw,ky,kA,kw,kw,ky,ky,ky,aG,aH,kx,kx,kx,kx,kx,kz,kx)if not kv then kv=f([[<path class="linethick brightstroke" style="fill:url(#RadialGradientCenterTop);" d="M %f %f L %f %f L %f %f %f %f L %f %f"/>
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientRightTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <path class="linethick brightstroke" style="fill:url(#RadialGradientLeftTop);" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        
                        <clipPath id="headingClip">
                            <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>
                        </clipPath>
                        <path class="linethick dimstroke" style="fill:black;fill-opacity:0.4;" d="M %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f L %f %f Z"/>]],i_(630),j0(0),i_(675),j0(45),i_(960),j0(55),i_(1245),j0(45),i_(1290),j0(0),i_(1000),j0(105),i_(1040),j0(59),i_(1250),j0(51),i_(1300),j0(0),i_(1920),j0(0),i_(1920),j0(20),i_(1400),j0(20),i_(1300),j0(105),i_(920),j0(105),i_(880),j0(59),i_(670),j0(51),i_(620),j0(0),i_(0),j0(0),i_(0),j0(20),i_(520),j0(20),i_(620),j0(105),i_(890),j0(59),i_(960),j0(62),i_(1030),j0(59),i_(985),j0(112),i_(1150),j0(112),i_(1100),j0(152),i_(820),j0(152),i_(780),j0(112),i_(935),j0(112),i_(890),j0(59),i_(960),j0(62),i_(1030),j0(59),i_(985),j0(112),i_(1150),j0(112),i_(1100),j0(152),i_(820),j0(152),i_(780),j0(112),i_(935),j0(112))end;h9[#h9+1]=kv;return h9 end;function ku.DrawVerticalSpeed(h9,dv)h8(h9,dv)end;function ku.UpdateHud(h9)local hZ=bB;local kB=bC;local hh=kB;local hw=hZ;local ih=e(unit.getThrottle())local im=bs*3.6;local ii=unit.getAxisCommandValue(0)local kC=cU(1770)local kD=cV(310)if AtmoSpeedAssist and bA then ii=K;ih=K*100 end;local gy=gx()local hi="ROLL"if ih==nil then ih=0 end;if not bM then if bs>5 then hZ=hY(bq)kB=h_(bq)else hZ=0;kB=0 end;hi="YAW"end;if bI>50000 and not aq then local kE;kE=cw(bI)h9[#h9+1]=cj(kC,kD,"PvP Boundary: "..kE,"pbright txtbig txtmid")end;h9[#h9+1]=ak;h9[#h9+1]=aD;h9[#h9+1]=gA;if bJ~=""then h9[#h9+1]=bJ end;if gB~=""then h9[#h9+1]=gB end;if gC~=""then h9[#h9+1]=gC end;h8(h9,as)if m()==0 or RemoteHud then if bM then hg(h9,centerX,centerY,hh,hi,bM)else hg(h9,centerX,centerY,kB,hi,bM)end;if not gw()or brightHud then if bM then hg(h9,centerX,centerY,hh,hi,bM)hv(h9,hw,hh,centerX,centerY,bM,e(h_(bq)),bs)else hg(h9,centerX,centerY,kB,hi,bM)hv(h9,hZ,kB,centerX,centerY,bM,e(kB),bs)end;hC(h9,as,bM)i0(h9,bq,bs,centerX,centerY)end end;ig(h9,gy,ih,ii)il(h9,im)iq(h9)jg(h9)return h9 end;function ku.HUDEpilogue(h9)h9[#h9+1]="</svg>"return h9 end;function ku.ExtraData(h9)local kF=cU(1240)local kG=cV(55)local kH=kG+10;local kI;local i_=cU;local j0=cV;local kJ=0;local gy=gx()local kK=j0(99)local kL=j0(80)local kM=j0(85)local kN=j0(31)local kO=0;local kP=0;local kQ=av>1000000 and A(av/1000000,2).."kT"or A(av/1000,2).."T"if aq then kJ=LastMaxBrakeInAtmo else kJ=LastMaxBrake end;local kR,kS=aS.computeDistanceAndTime(bs,0,av,0,0,kJ)if kR<0 then kR=0 end;kJ=A(kJ/(av*gl),2).."g"local kT=a:maxForceForward()kI=core.g()if kI>0.1 then kP=av*kI;kP=A(kP/(av*gl),2).."g"kO=0.5*kT/kI;kO=kO>1000000 and A(kO/1000000,2).."kT"or A(kO/1000,2).."T"end;kT=A(kT/(av*gl),2).."g"local kU=vec3(core.getWorldAcceleration()):len()/9.80665;kI=core.g()h9[#h9+1]=[[<g class="dim txt txtend size14">]]if m()==1 and not RemoteHud then kF=cU(1120)kG=cV(55)kH=kG+10 elseif aq then local kV=cU(770)h9[#h9+1]=cj(i_(895),kK,"ATMO","")h9[#h9+1]=f([[<path class="linethin dimstroke"  d="M %f %f l %f 0"/>]],i_(895),kM,i_(-80))h9[#h9+1]=cj(i_(815),kL,f("%.1f%%",ar*100),"txtstart size20")end;h9[#h9+1]=cj(i_(1025),kK,"GRAVITY","txtstart")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(1025),kM,i_(80))h9[#h9+1]=cj(i_(1105),kL,f("%.2fg",kI/9.80665),"size20")h9[#h9+1]=cj(i_(1125),kK,"ACCEL","txtstart")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(1125),kM,i_(80))h9[#h9+1]=cj(i_(1205),kL,f("%.2fg",kU),"size20")h9[#h9+1]=cj(i_(695),kK,"BRK TIME","")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(695),kM,i_(-80))h9[#h9+1]=cj(i_(615),kL,f("%s",cJ(kS)),"txtstart size20")h9[#h9+1]=cj(i_(635),j0(45),"TRIP","")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(635),j0(31),i_(-90))if travelTime then h9[#h9+1]=cj(i_(532),j0(23),f("%s",cJ(travelTime)),"txtstart size20")end;h9[#h9+1]=cj(i_(795),kK,"BRK DIST","")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(795),kM,i_(-80))h9[#h9+1]=cj(i_(715),kL,f("%s",cw(kR)),"txtstart size20")h9[#h9+1]=cj(i_(1285),j0(45),"MASS","txtstart")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(1285),j0(31),i_(90))h9[#h9+1]=cj(i_(1388),j0(23),f("%s",kQ),"size20")h9[#h9+1]=cj(i_(1220),kK,"THRUST","txtstart")h9[#h9+1]=f([[<path class="linethin dimstroke" d="M %f %f l %f 0"/>]],i_(1220),kM,i_(80))h9[#h9+1]=cj(i_(1300),kL,f("%s",kT),"size20")h9[#h9+1]=cj(cU(960),cV(175),gy,"pbright txtbig txtmid size20")h9[#h9+1]="</g>"end;function ku.DrawOdometer(h9,ad,TotalDistanceTravelled,ae)if SelectedTab~="INFO"then return h9 end;local kI;local kO=0;local kP=0;local kJ=0;local kQ=av>1000000 and A(av/1000000,2).." kTons"or A(av/1000,2).." Tons"if aq then kJ=LastMaxBrakeInAtmo else kJ=LastMaxBrake end;local kR,kS=aS.computeDistanceAndTime(bs,0,av,0,0,kJ)kJ=A(kJ/(av*gl),2).." g"local kT=a:maxForceForward()kI=core.g()if kI>0.1 then kP=av*kI;kP=A(kP/(av*gl),2).." g"kO=0.5*kT/kI;kO=kO>1000000 and A(kO/1000000,2).." kTons"or A(kO/1000,2).." Tons"end;kT=A(kT/(av*gl),2).." g"if m()==0 or RemoteHud then local kW=cU(OrbitMapX+10)local kX=cV(OrbitMapY+20)local kY=cU(OrbitMapX+10+OrbitMapSize/1.25)local jY=25;h9[#h9+1]="<g class='txtstart size14 bright'>"h9[#h9+1]=cj(kW,kX,f("BrkTime: %s",cJ(kS)))h9[#h9+1]=cj(kY,kX,f("Trip: %.2f km",ad))h9[#h9+1]=cj(kW,kX+jY,f("Lifetime: %.2f kSU",TotalDistanceTravelled/200000))h9[#h9+1]=cj(kY,kX+jY,f("BrkDist: %s",cw(kR)))h9[#h9+1]=cj(kW,kX+jY*2,"Trip Time: "..cJ(ae))h9[#h9+1]=cj(kY,kX+jY*2,"Total Time: "..cJ(TotalFlightTime))h9[#h9+1]=cj(kW,kX+jY*3,f("Mass: %s",kQ))h9[#h9+1]=cj(kY,kX+jY*3,f("Max Brake: %s",kJ))h9[#h9+1]=cj(kW,kX+jY*4,f("Max Thrust: %s",kT))if kI>0.1 then h9[#h9+1]=cj(kY,kX+jY*4,f("Max Thrust Mass: %s",kO))h9[#h9+1]=cj(kW,kX+jY*5,f("Req Thrust: %s",kP))else h9[#h9+1]=cj(kY,kX+jY*5,"Max Mass: n/a")h9[#h9+1]=cj(kW,kX+jY*6,"Req Thrust: n/a")end end;h9[#h9+1]="</g></g>"return h9 end;function ku.DrawWarnings(h9)return iq(h9)end;function ku.DisplayOrbitScreen(h9)return jg(h9)end;function ku.DisplayMessage(h9,iM)if iM~="empty"then local cl=310;for kZ in string.gmatch(iM,"([^\n]+)")do cl=cl+35;h9[#h9+1]=cj("50%",cl,kZ,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function ku.DrawDeadZone(h9)h9[#h9+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ku.UpdatePipe()if aq then bJ=""return end;jN()end;function ku.DrawSettings(h9)if#bE>0 then local ck=cU(640)local cl=cV(200)h9[#h9+1]=[[<g class="pbright txtvspd txtstart">]]for cS,cT in pairs(bE)do h9[#h9+1]=cj(ck,cl,cT..": ".._G[cT])cl=cl+20;if cS%12==0 then ck=ck+cU(350)cl=cV(200)end end;h9[#h9+1]=cj(cU(640),cV(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")h9[#h9+1]="</g>"end;return h9 end;local k_;local l0=cU(1770)local l1=cV(350)local l2=cV(15)local l3=cU(1370)local bW,l4;local l5=0;function ku.DrawRadarInfo()local function l6()if radarPanelID~=nil and l5==0 then t(radarPanelID)radarPanelID=nil;if k_~=nil then t(k_)k_=nil end else if l5==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(bP,1,"Periscope","periscope")k_=_autoconf.panels[_autoconf.panels_size]end;if radarPanelID==nil then _autoconf.displayCategoryPanel(bP,1,"Radar","radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]end;l5=0 end end;local fd,fe,fc,ff,fg,f9=aY.GetRadarHud()local B=ff or 0;if fc>0 then if CollisionSystem then bW=B.."/"..fg.." Plotted : "..fc-fg.." Ignored"else bW="Radar Contacts: "..fc end;gA=cj(l0,l1,bW,"pbright txtbig txtmid")if#f9>0 then gA=gA..cj(l3,l2,"Friendlies In Range","pbright txtbig txtmid")for cS,cT in pairs(f9)do l2=l2+20;gA=gA..cj(l3,l2,bP[1].getConstructName(cT),"pdim txtmid")end end;if fd==nil and k_==nil then l5=1;l6()end;if fd~=nil and k_~=nil then l6()end;if radarPanelID==nil then l6()end else if fe then gA=cj(l0,l1,bQ.." Radar: Jammed","pbright txtbig txtmid")else gA=cj(l0,l1,"Radar: No "..bQ.." Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then l5=0;l6()end end end;function ku.DrawTanks()if fuelX~=0 and fuelY~=0 then gB=cj(fuelX,fuelY,"","txtstart pdim txtfuel")tankY=fuelY;gS(fuelX,"Atmospheric ","ATMO",aI,gQ,gR)gS(fuelX,"Space Fuel T","SPACE",aJ,gO,gP)gS(fuelX,"Rocket Fuel ","ROCKET",aK,gM,gN)end end;function ku.DrawShield()local l7=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local l8=core.getPvPTimer()local l9=shield_1.getResistances()local la="A: "..10+l9[1]*100 .."% / E: "..10+l9[2]*100 .."% / K:"..10+l9[3]*100 .."% / T: "..10+l9[4]*100 .."%"local ck,cl=shieldX-60,shieldY+30;local lb=e(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local h5=e(lb*2.55)local h6=f("rgb(%d,%d,%d)",255-h5,h5,0)local cn=""gC=cj(ck,cl,"","txtmid pdim txtfuel")if lb<10 and l7~="Shield Disabled"then cn="red "end;l8=l8>0 and"   PvPTime: "..cJ(l8)or""gC=gC..f([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],ck,cl,h6,lb*2,ck,cl,ck+2,cl+10,lb,l8)gC=gC..cj(ck,cl-5,l7,cn.."txtstart pbright txtbig")gC=gC..cj(ck,cl+30,la,cn.."txtstart pbright txtsmall")end;function ku.hudtick()if not planet then return end;local function lc(h9)local ld=e(r(aj/(aG/4)*255,0,255))h9[#h9+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,e(H+0.5)+ld,e(J+0.5)-ld,e(I+0.5)-ld)end;local function le()for _,cT in pairs(aF)do if cT.hovered then if not cT.drawCondition or cT.drawCondition(cT)then cT.toggleFunction(cT)end;cT.hovered=false end end;for _,cT in pairs(bT)do if cT.hovered then SelectedTab=cT.label;cT.hovered=false end end end;local function lf()local function lg(lh,li,ck,cl,jX,jY)if lh>=ck and lh<=ck+jX and li>=cl and li<=cl+jY then return true else return false end end;local ck=ag+aG/2;local cl=ah+aH/2;for _,cT in pairs(aF)do cT.hovered=lg(ck,cl,cT.x,cT.y,cT.width,cT.height)end;for _,cT in pairs(bT)do cT.hovered=lg(ck,cl,cT.x,cT.y,cT.width,cT.height)end;if bR then local lj=false;for _,cv in ipairs(apExtraButtons)do if cv.hovered then lj=true;break end end;if apbutton.hovered then lj=true end;bR=lj else bR=apbutton.hovered;if not bR then bS=AutopilotTargetIndex end end end;local function lk(h9)if not SelectedTab or SelectedTab==""then SelectedTab="HELP"end;for cS,cT in pairs(bT)do local cn="dim brightstroke"local ll=0.2;if SelectedTab==cS then cn="pbright dimstroke"ll=0.6 end;local lm=""if cT.hovered then ll=0.8;lm=";stroke:white"end;h9[#h9+1]=f([[<rect width="%f" height="%d" x="%d" y="%d" clip-path="url(#round-corner)" class="%s" style="stroke-width:1;fill-opacity:%f;%s" />]],cT.width,cT.height,cT.x,cT.y,cn,ll,lm)h9[#h9+1]=cj(cT.x+cT.width/2,cT.y+cT.height/2+5,cT.label,"txt txtmid pdim")end end;local function ln(h9)local function lo(h9,lp,hover,ck,cl,eB,lq,lr,ls,lt,lu,button)if type(lt)=="function"then lt=lt(button)end;if type(lu)=="function"then lu=lu(button)end;h9[#h9+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",ck,cl,eB,lq)if lp then h9[#h9+1]=f("%s'",lr)else h9[#h9+1]=ls end;if hover then h9[#h9+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:2'",SafeR,SafeG,SafeB)else h9[#h9+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:1'",A(SafeR*0.5,0),A(SafeG*0.5,0),A(SafeB*0.5,0))end;h9[#h9+1]=" rx='5'></rect>"h9[#h9+1]=f("<text x='%f' y='%f' font-size='24' fill='",ck+eB/2,cl+lq/2+5)if lp then h9[#h9+1]="black"else h9[#h9+1]="white"end;h9[#h9+1]="' text-anchor='middle' font-family='Play' style='stroke-width:0px;'>"if lp then h9[#h9+1]=f("%s</text>",lt)else h9[#h9+1]=f("%s</text>",lu)end end;local lv=f("rgb(%d,%d,%d)'",A(SafeR*0.1,0),A(SafeG*0.1,0),A(SafeB*0.1,0))local lw=f("rgb(%d,%d,%d)",A(SafeR*0.8,0),A(SafeG*0.8,0),A(SafeB*0.8,0))local lx=lo;for _,cT in pairs(aF)do local k1=cT.disableName;local k0=cT.enableName;if type(k1)=="function"then k1=k1(cT)end;if type(k0)=="function"then k0=k0(cT)end;if not cT.drawCondition or cT.drawCondition(cT)then lx(h9,cT.toggleVar(cT),cT.hovered,cT.x,cT.y,cT.width,cT.height,lw,lv,k1,k0,cT)end end end;local ly=A(ResolutionX/2,0)local lz=A(ResolutionY/2,0)local h9={}aV.HUDPrologue(h9)if showHud then aV.UpdateHud(h9)else if AlwaysVSpd then aV.DrawVerticalSpeed(h9,as)end;aV.DisplayOrbitScreen(h9)aV.DrawWarnings(h9)end;if bD and bE~={}then aV.DrawSettings(h9)end;if radar_1 or radar_2 then aY.assignRadar()end;if bP[1]then aV.DrawRadarInfo()end;aV.HUDEpilogue(h9)h9[#h9+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aV.DisplayMessage(h9,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(h9)end end;lk(h9)if x()==0 then if m()==1 and a1 then if not AltIsOn then lf()ln(h9)end;if not aZ and not a_ then local lA=table.concat(h9,"")h9={}h9[#h9+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h9[#h9+1]=lA;h9[#h9+1]="</body>"aZ=true;h9[#h9+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(h9,"")system.setScreen(content)elseif a_ then local lA=table.concat(h9,"")h9={}h9[#h9+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h9[#h9+1]=lA;h9[#h9+1]="</body>"end;if not aZ then h9[#h9+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ly,lz,ag,ah)end else le()end else if not a1 and m()==0 then le()if aj>DeadZone then if DisplayDeadZone then lc(h9)end end elseif a1 and(not AltIsOn or not freeLookToggle)then lf()ln(h9)end;h9[#h9+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ly,lz,ag,ah)end;h9[#h9+1]=[[</svg></body>]]content=table.concat(h9,"")end;function ku.TenthTick()aV.DrawTanks()if shield_1 then aV.DrawShield()end end;function ku.OneSecond(h9)local function lB()local h1=q()local im=bs;local lC=h1-au;if im>1.38889 then im=im/1000;local lD=im*(h1-au)TotalDistanceTravelled=TotalDistanceTravelled+lD;ad=ad+lD end;ae=ae+lC;TotalFlightTime=TotalFlightTime+lC;au=h1 end;lB()aV.UpdatePipe()aV.ExtraData(h9)end;function ku.ButtonSetup()k9()ke()aF=gm end;return ku end;local function lE()local function lF(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function lG()local function lH(lI,lJ)return lI.name<lJ.name end;bG={}for cS,cT in pairs(b[0])do bG[#bG+1]={name=cT.name,index=cS}end;table.sort(bG,lH)end;local function lK(lL)for cS,cT in pairs(lL)do if cT.name and cT.name==CustomTarget.name then return cS end end;return-1 end;local function lM()bS=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local lN=bG[AutopilotTargetIndex].index;local lO=b[0][lN]if lO.center then AutopilotTargetName=lO.name;ac=aR[0][lN]if CustomTarget~=nil then if ar==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=lO;for _,cT in pairs(aR[0])do if cT.name==CustomTarget.planetname then ac=cT;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function lP(hd)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if hd==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then lM()else local lN=bG[AutopilotTargetIndex].index;local lO=b[0][lN]if lO~=nil and lO.name=="Space"or iphCondition=="Custom Only"and lO.center or iphCondition=="No Moons"and string.find(lO.name,"Moon")~=nil then if hd==nil then lP()else lP(1)end else lM()end end else a2="Disengage autopilot before changing Interplanetary Helper"c6("iph","AP")end end;local function kk()local fV=-1;fV=lK(b[0])if fV>-1 then table.remove(b[0],fV)end;fV=-1;fV=lK(SavedLocations)if fV~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fV)end;lP()lG()end;local function kf(g9,position,hV,lQ)if dbHud_1 or hV then local p=lF(position)local kI=p.gravity;if lQ then kI=unit.getClosestPlanetInfluence()end;local lR={position=position,name=g9,planetname=p.name,gravity=kI,safe=lQ}if not hV then SavedLocations[#SavedLocations+1]=lR else for cS,cT in pairs(b[0])do if cT.name and g9==cT.name then table.remove(b[0],cS)end end end;table.insert(b[0],lR)lG()lM()a2="Location saved as "..g9 .."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local lS={}function lS.UpdateAtlasLocationsList()lG()end;function lS.UpdateAutopilotTarget()lM()end;function lS.adjustAutopilotTargetIndex(hd)lP(hd)end;function lS.findAtlasIndex(lL)lK(lL)end;function lS.UpdatePosition(lT)local fV=lK(SavedLocations)if fV~=-1 then if lT~=nil then SavedLocations[fV].name=lT;AutopilotTargetIndex=AutopilotTargetIndex-1;lP()else local lU=SavedLocations[fV]lU.gravity=unit.getClosestPlanetInfluence()lU.position=bv;lU.safe=true end;a2=SavedLocations[fV].name.." position updated ("..SavedLocations[fV].planetname..")"else a2="Name Not Found"end end;function lS.AddNewLocation(g9,position,hV,lQ)kf(g9,position,hV,lQ)end;function lS.ClearCurrentPosition()kk()end;for cS,cT in pairs(SavedLocations)do table.insert(b[0],cT)end;lG()if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end;lS.UpdateAutopilotTarget()return lS end;local function lV()local cD={}local function lW(eI)local lX=AutopilotEndSpeed;if not Autopilot then lX=0 end;if not aq then return aS.computeDistanceAndTime(eI,lX,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(eI,lX,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function lY(eI)local lX=AutopilotEndSpeed;if not Autopilot then lX=0 end;return aS.computeDistanceAndTime(eI,lX,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local lZ=false;local l_=0;function cD.GetAutopilotBrakeDistanceAndTime(eI)return lW(eI)end;function cD.GetAutopilotTBBrakeDistanceAndTime(eI)return lY(eI)end;local function m0(m1,m2,m3)m2=m2:project_on_plane(m1)m3=m3:project_on_plane(m1)return n(m2:cross(m3):dot(m1),m2:dot(m3))end;local function m4()local function m5()local m6=-1;local m7=-1;if vBooster then m6=vBooster.getDistance()end;if hover then m7=hover.getDistance()end;if m6~=-1 and m7~=-1 then if m6<m7 then return m6 else return m7 end elseif m6~=-1 then return m6 elseif m7~=-1 then return m7 else return-1 end end;local m8=m5()local m9=-1;if telemeter_1 then m9=telemeter_1.getDistance()end;if m8~=-1 and m9~=-1 then if m8<m9 then return m8 else return m9 end elseif m8~=-1 then return m8 else return m9 end end;local function ma(planet,e4,mb)local function mc(md,dp)local ea=vec3(dp)if md.id==0 then return setmetatable({latitude=ea.x,longitude=ea.y,altitude=ea.z,id=0,systemId=md.systemId},MapPosition)end;local eb=ea-md.center;local aj=eb:len()local dv=aj-md.radius;local dt=0;local du=0;if not ct(aj,0)then local ec=n(eb.y,eb.x)du=ec>=0 and ec or 2*math.pi+ec;dt=math.pi/2-math.acos(eb.z/aj)end;return setmetatable({latitude=math.deg(dt),longitude=math.deg(du),altitude=dv,id=md.id,systemId=md.systemId},MapPosition)end;local me=mc(planet,e4)me="::pos{"..me.systemId..","..me.id..","..me.latitude..","..me.longitude..","..me.altitude.."}"if mb then return me else system.setWaypoint(me)return true end end;local mf=false;function cD.showWayPoint(planet,e4,mb)return ma(planet,e4,mb)end;function cD.APTick()local function mg()if bO and not BrakeLanding then local c4=bO[1]local ga,gb=bO[2],bO[3]local mh=math.min(ga,gb or ga)local mi=mh/bs;local mj=AutoTakeoff and(bs<42 or ao~=-1)local mk=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if mk and not mj and(a8*1.5>mh or mi<1)then BrakeIsOn=true;cp(0)if AltitudeHold then cB()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cE()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if mi<11 then bN=c4.name.." COLLISION "..cJ(mi).." / "..cw(mh,2)else bN=c4.name.." collision "..cJ(mi)end;if mi<6 then c6("alarm","AL",2)end else bN=false end end;local function ml(c0,mm,mn)local function mo(c0,dR)c0=vec3(c0)dR=vec3(dR):normalize()local da=c0*dR;return da.x+da.y+da.z end;local mp=0.001;local mq=1;if not aq or not b2 or ao~=-1 or bs<Q then if mn==nil then mn=DampingMultiplier end;if mm==nil then mm=mp end;c0=vec3(c0):normalize()local mr=vec3()-c0;local ms=-mo(mr,core.getConstructWorldOrientationRight())*mq;local mt=-mo(mr,core.getConstructWorldOrientationUp())*mq;if aB==0 then aB=ms/2 end;if aC==0 then aC=mt/2 end;if d(ms)<0.1 then V=V-ms*2 else V=V-(ms+(ms-aB)*mn)end;if d(mt)<0.1 then U=U+mt*2 else U=U+mt+(mt-aC)*mn end;aB=ms;aC=mt;if d(ms)<mm and d(mt)<mm then return true end;return false elseif b2 and ao==-1 then c0=br;if mn==nil then mn=DampingMultiplier end;if mm==nil then mm=mp end;c0=vec3(c0):normalize()local mr=bo-c0;local ms=-mo(mr,core.getConstructWorldOrientationRight())*mq;local mt=-mo(mr,core.getConstructWorldOrientationUp())*mq;if aB==0 then aB=ms/2 end;if aC==0 then aC=mt/2 end;if d(ms)<0.1 then V=V-ms*5 else V=V-(ms+(ms-aB)*mn)end;if d(mt)<0.1 then U=U+mt*5 else U=U+mt+(mt-aC)*mn end;aB=ms;aC=mt;if d(ms)<mm and d(mt)<mm then return true end;return false end end;aq=k()>0;ar=k()as=core.getAltitude()ao=m4()E=q()b3=E;if CollisionSystem then mg()end;if antigrav then by=antigrav.getState()==1 end;local mu=1;local mv=1;local mw=E-b3;local mx=-math.deg(m0(bn,br,bo))local my=math.deg(m0(bp,br,bo))local hd=bt*-1;b2=aq and mx<-YawStallAngle or mx>YawStallAngle or my<-PitchStallAngle or my>PitchStallAngle;local mz=system.getMouseDeltaX()local mA=system.getMouseDeltaY()if InvertMouse and not a1 then mA=-mA end;V=0;Z=0;U=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if as==0 then as=(bv-planet.center):len()-planet.radius end;bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local kI=planet:getGravity(core.getConstructWorldPos()):len()*av;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and a1 then if not aZ then ag=r(ag+mz,-aG/2,aG/2)ah=r(ah+mA,-aH/2,aH/2)end else ag=0;ah=0 end else ag=r(ag+mz,-aG/2,aG/2)ah=r(ah+mA,-aH/2,aH/2)aj=y(ag*ag+ah*ah)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(mA,-100,100)+0.5)*2*mu;V=(-utils.smoothstep(mz,-100,100)+0.5)*2*mv end end end end;local mB=bs>8334;if bs>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not mB then a2="Space Speed Engine Shutoff reached"cp(0)end;if not mB and LastIsWarping then if not BrakeIsOn then cG()end;if Autopilot then cE()end end;LastIsWarping=mB;if aq and ar>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not lZ then BrakeIsOn=true;lZ=true elseif not AtmoSpeedAssist and lZ then if bs<b7/3.6 then BrakeIsOn=false;lZ=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local mC=false;if CustomTarget and al~=1 then mC=ml(CustomTarget.position-bv,0.1)else mC=ml(vec3(br),0.01)end;b0=true;if mC then cs(e(b7))if(d(bC)<2 or d(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cH()end elseif aq and AtmoSpeedAssist then cp(1)end elseif bs>Q then ml(vec3(br),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bs>Q then ml(-vec3(br))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cH()al=false;an=true else al=false;cE()end end;if an and CustomTarget and(as<HoldAltitude+250 and as>HoldAltitude-250)and bs*3.6>b7-250 and d(bu)<25 and ar>=0.1 and(CustomTarget.position-bv):len()>2000+as then cE()an=false end;if VertTakeOff then b0=true;local mD=HoldAltitude;if bu<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then mD=antigrav.getBaseAltitude()end;if as<mD-100 then b8=0;af=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;af=0 elseif bu<-30 then BrakeIsOn=true;af=15 elseif as>=mD then if by then if Autopilot or VectorToTarget then cz()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"c6("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"c6("vtoc","VT")cz()end;af=0 end else if ar>0.08 then b8=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bk then b8=0;af=20 else af=0;b8=36;cs(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=mD;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local mE=r(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(mE)local mF=r(vTpitchPID:get(),-1,1)U=mF end end;if IntoOrbit then local mr;local mG=false;local mH=cw(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ac end end;if not bf then bg=e(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=e(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget and CustomTarget then mr=CustomTarget.position-bv end;local mI,mJ=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local mK=bC;if not bc then local mL=false;local mM=false;cp(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..mH;if be.VectorToTarget then ml(mr:normalize():project_on_plane(bt))mG=bo:dot(mr:project_on_plane(bn):normalize())>0.95 else ml(br)mG=mx<0.5;if bs<150 then mG=true end end;U=0;ba=0;if bB<=ba+1 and bB>=ba-1 then mL=true else mL=false end;if mK<=bb+1 and mK>=bb-1 then mM=true else mM=false end;if mL and mM and mG then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then ml(mr:normalize():project_on_plane(bt))elseif bs>150 then ml(br)end;U=0;if be.VectorToTarget and CustomTarget then local a8,_=aS.computeDistanceAndTime(bs,b7/3.6,av,0,0,LastMaxBrake)if bi and mr:len()>15000+a8+as then b9="Orbiting to Target"if as-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or mr:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"c6("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;be.VectorToTarget,be.AutopilotAlign=false,false;cA()cH()return end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bg*0.9 and as<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;cp(0)ba=0;if not be.VectorToTarget then a2="Orbit complete"c6("orCom","OB")cA()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..mH;bd=true;cs(mJ*3.6+1)local mN=bg-as;if VSpdPID==nil then VSpdPID=pid.new(0.1,0,1*0.1)end;VSpdPID:inject(mN-bu*r(utils.smoothstep(2000-mN,-2000,2000)^6*10,1,10))ba=r(VSpdPID:get(),-60,60)end end else local mO=2.75;local mP=d(A(mI*mO))local mQ=mP%50;if mQ>0 then mP=mP-mQ+50 end;BrakeIsOn=false;if as<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..mH;ba=utils.map(bu,200,0,-15,80)elseif as>=bg*0.8 and as<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..mH;mP=mP*0.75;ba=utils.map(bu,100,-100,-15,65)elseif as>=bg*1.15 and as<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..mH;mP=mP*0.75;if bu<0 or bd then ba=utils.map(as,bg*1.5,bg*1.01,-30,0)else ba=utils.map(as,bg*0.99,bg*1.5,0,30)end elseif as>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..mH;ba=-65;local mR=utils.map(bu,-150,-400,1,0.55)mP=mP*mR end;cs(e(mP))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local mS=ba-bB;OrbitPitchPID:inject(mS)local mT=r(OrbitPitchPID:get(),-0.5,0.5)U=mT end end;if Autopilot and ar==0 and not al then local function mU(bW,orbit)system.print(bW)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cp(0)P=false;a2=bW;c6("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bg=as;bf=true end;cA()end end;local mV,mW=AutopilotTargetCoords,false;if CustomTarget and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local mX=(CustomTarget.position-ac.center):normalize()local mY=mX:project_on_plane((ac.center-bv):normalize()):normalize()local mZ=ac.center+mY*(ac.radius+AutopilotTargetOrbit)local m_=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bv-mZ):len()<(bv-m_):len()then mV=mZ else mV=m_;AutopilotEndSpeed=0 end;AutopilotTargetCoords=mV;aX.showWayPoint(ac,AutopilotTargetCoords)mW=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget and CustomTarget.planetname=="Space"then if not TargetSet then AutopilotPlanetGravity=0;mW=true;AutopilotRealigned=true;TargetSet=true;mV=CustomTarget.position+(bv-CustomTarget.position):normalize()*AutopilotSpaceDistance;AutopilotTargetCoords=mV end elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local mX=(bv+br*100000-ac.center):normalize()local mY=mX:project_on_plane((ac.center-bv):normalize()):normalize()if mY:len()<1 then mX=(bv+bo*100000-ac.center):normalize()mY=mX:project_on_plane((ac.center-bv):normalize()):normalize()end;mV=ac.center+mY*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=mV;TargetSet=true;mW=true;AutopilotRealigned=true;aX.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(mV)-bv):len()local c1,c2,c3=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(c4)if c4.noAtmosphericDensityAltitude>0 then return c4.radius+c4.noAtmosphericDensityAltitude else return c4.radius+c4.surfaceMaxAltitude*1.5 end end)local c5=c2;if c3~=nil and c2~=nil then c5=math.min(c3,c2)end;if c5~=nil and c5<AutopilotDistance and c1.name==ac.name then AutopilotDistance=c5 end;local mC=true;local n0=(ac.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ac.radius;local iM=cw(n0)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..iM..'"}')local a8,a9;if not TurnBurn then a8,a9=lW(bs)else a8,a9=lY(bs)end;if bs>50 and AutopilotAccelerating then local mr=vec3(mV)-bv;local n1=r(math.deg(m0(bn,br:normalize(),mr:normalize()))*bs/500,-90,90)local n2=r(math.deg(m0(bp,br:normalize(),mr:normalize()))*bs/500,-90,90)if d(n1)<20 and d(n2)<20 then n1=n1*2;n2=n2*2 end;if d(n1)<2 and d(n2)<2 then n1=n1*2;n2=n2*2 end;local mx=-math.deg(m0(bn,bo,br:normalize()))local my=-math.deg(m0(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(n2-my)local n3=r(apPitchPID:get(),-1,1)U=U+n3;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(n1-mx)local n4=r(apYawPID:get(),-1,1)V=V+n4;mW=true;if d(n1)>2 or d(n2)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"c6("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end end elseif AutopilotAccelerating and bs<=50 then ml((mV-bv):normalize())end;if n0<AutopilotTargetOrbit*1.5 then if CustomTarget and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(n0)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local c1,c5=b_((AutopilotTargetCoords-bv):normalize())if ac.name~=planet.name then if c1~=nil and ac.name~=c1.name and c5<AutopilotDistance then a2="Collision with "..c1.name.." in "..cw(c5).."\nClear LOS to continue."ai=5;mf=true else mf=false;a2=""end end end;if not mf then if not AutopilotCruising and not AutopilotBraking and not mW then mC=ml((mV-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then mC=ml(-vec3(br):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cp(AutopilotInterplanetaryThrottle)K=A(AutopilotInterplanetaryThrottle,2)P=true end;local n5=unit.getThrottle()if AtmoSpeedAssist then n5=K end;local n6=99999;local kU=-vec3(core.getWorldAcceleration()):dot(br:normalize())local n7=r(br:dot((mV-bv):normalize()),0,bs)if n7>0 or kU>0 then n6=aS.computeTravelTime(n7,kU,AutopilotDistance-a8)end;if bq:len()>=MaxGameVelocity or n5==0 and P or warmup/4>n6 then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then c6("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cp(0)end;local n8=AutopilotDistance;if n8<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<l_ and bI>2000 then cE()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;l_=bI else l_=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c6("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cp(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cp(1,true)end;local _,mJ=aU(ac):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local mr;if CustomTarget then mr=CustomTarget.position-bv end;if CustomTarget and CustomTarget.planetname=="Space"and bs<50 then mU("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget and CustomTarget.planetname~="Space"and bs<=mJ and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then mU("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,AutopilotTargetCoords)elseif(CustomTarget and CustomTarget.planetname~="Space"or CustomTarget==nil)and orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then c6("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=mJ then if CustomTarget then if br:normalize():dot(mr:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then c6("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else mU("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else mU("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then mU("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local n8=AutopilotDistance;if n8<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<l_ and bI>2000 then cE()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;l_=bI else l_=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c6("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local n5=unit.getThrottle()if AtmoSpeedAssist then n5=K end;if n5>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end;AutopilotCruising=false end else if mC then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif mC and not mf then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c6("apAcc","AP")end;if not P then cp(AutopilotInterplanetaryThrottle,true)K=A(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"c6("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cp(0)P=false;ProgradeIsOn=true;al=true;aX.showWayPoint(ac,CustomTarget.position)end;if a0 then b0=true;local n2=0;local eM=bv+vec3(unit.getMasterPlayerRelativePosition())local n9=eM-bv;local na=vec3(n9):project_on(bo):len()local nb=vec3(n9):project_on(bp):len()local aj=y(na*na+nb*nb)ml(n9:normalize())local nc=40;local nd=aj<nc;local ne=100;local nf=r((aj-nc)/2,10,ne)U=0;local mC=d(V)<0.1;if mC and bs<nf and not nd then BrakeIsOn=false;n2=-20 else BrakeIsOn=true;n2=0 end;local ng=0;if d(n2-bB)>ng then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(n2-bB)local n3=pitchPID:get()U=n3 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local nh=LastMaxBrakeInAtmo;if nh then nh=nh*r(bs/100,0.1,1)*ar else nh=LastMaxBrake end;if ar<0.01 then nh=LastMaxBrake end;local ni=bo:project_on_plane(bt):normalize():dot(br)local nj=vec3(core.getWorldAirFrictionAcceleration())local nk=nj:len()*av;if ni>100 then a8,a9=aS.computeDistanceAndTime(ni,100,av,0,0,nh)local nl,nm=aS.computeDistanceAndTime(100,0,av,0,0,nh*0.55)a8=a8+nl else a8,a9=aS.computeDistanceAndTime(ni,0,av,0,0,nh*0.55)end;local mN=HoldAltitude-as-bu;local nn=200+bs;if Reentry or al then minMax=2000+bs end;local no=1;if AutoTakeoff then no=r(bs/100,0.1,1)end;local n2=(utils.smoothstep(mN,-nn,nn)-0.5)*2*MaxPitch*no;if not Reentry and not al and not VectorToTarget and bo:dot(br:normalize())<0.99 then n2=(utils.smoothstep(mN,-nn*r(20-19*ar*10,1,20),nn*r(20-19*ar*10,1,20))-0.5)*2*MaxPitch*r(2-ar*10,1,2)*no end;if not AltitudeHold then n2=0 end;if LockPitch~=nil then if bM and not IntoOrbit then n2=LockPitch else LockPitch=nil end end;b0=true;local np=U;if Reentry then local nq=e(b7)local nr,ns=aS.computeDistanceAndTime(bs,nq/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)nr=nr==-1 and 5000 or nr;local nt=as-(planet.noAtmosphericDensityAltitude+nr)local nu=as>planet.noAtmosphericDensityAltitude+nr*1.35;if nu then n2=ReEntryPitch;if bs<=nq/3.6 and bs>nq/3.6-10 and d(br:normalize():dot(bo))>0.9 and not bA then O=false;cp(1)end elseif bA and not nu and not aq then cs(nq,true)end;if bA then if bs>nq/3.6 and not nu then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not R then n2=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;n2=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and nu then b0=true elseif not nu then if not aq and(bA or s:getTargetSpeed(axisCommandId.longitudinal)~=nq)then cs(nq)end;if bs<nq/3.6+1 then BrakeIsOn=false;R=false;Reentry=false;b0=true end end end;if bs>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then ml(vec3(br))end;if bK or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local mr;if bK then if type(bK)=="table"then mr=bK elseif bK<3 and bK>0 then mr=-bt:cross(br)*5000 elseif bK>=3 then mr=bt:cross(br)*5000 elseif bK<0 then mr=br*25000 end elseif CustomTarget~=nil then mr=CustomTarget.position-bv else mr=ac.center-bv end;local n1=math.deg(m0(bt:normalize(),br,mr))*2;local nw=math.rad(d(bC))if bs>minRollVelocity and ar>0.01 then local nx=1000+bs;local ny=(utils.smoothstep(mN-bu*10,-nx,nx)-0.5)*2*MaxPitch;local nz=r(90-ny,0,180)b4=r(n1*2,-nz,nz)local nA=n1;n1=r(r(n1,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(nw)+4*(bB-n2)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)local nB=1;if b4~=0 then nB=d(nw/b4)end;nB=(90-r(d(b4-bC),0,90))/90;local nC=n2;if d(bC)>90 then nC=-nC end;n2=nB*r(r(nC*math.cos(nw),-PitchStallAngle*0.8,PitchStallAngle*0.8)+d(r(d(nA)*math.sin(nw),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;n1=r(n1,-YawStallAngle*0.80,YawStallAngle*0.80)end;local nD=mx-n1;if bK and d(nD)<=0.0001 and(type(bK)=="table"or type(bK)~="table"and bK<0 and d(bC)<1)then if bK==-2 then cB()end;bK=nil;c6("180Off","BR")return end;if not b2 and bs>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(nD)local n4=r(yawPID:get(),-1,1)V=V+n4 elseif aq and ao>-1 or bs<minRollVelocity then ml(mr)elseif b2 and ar>0.01 then if(mx<-YawStallAngle or mx>YawStallAngle)and ar>0.01 then ml(br)end;if(my<-PitchStallAngle or my>PitchStallAngle)and ar>0.01 then n2=r(bB-my,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local mD=planet:getAltitude(CustomTarget.position)local nt=mr:project_on_plane(bt):len()StrongBrakes=true;if not am and not Reentry and nt<=a8 and(br:project_on_plane(bt):normalize():dot(mr:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cp(0)if AltitudeHold then cB()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ni<0.1 or nt<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<nt)then if not by then c6("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bN=false end;LastDistanceToTarget=nt end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local mr=CustomTarget.position-bv;local mD=planet:getAltitude(CustomTarget.position)local nt=y(mr:len()^2-(as-mD)^2)local nh=LastMaxBrakeInAtmo;if nh then a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,nh/2)StrongBrakes=true;if nt<=a8+bs*mw/2 and br:project_on_plane(bt):normalize():dot(mr:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cH()end end;LastDistanceToTarget=nt end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cA()VectorToTarget=false;bc=true end end;if b2 and ar>0.01 and ao==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then ml(br)n2=r(bB-my,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;U=np;local m9=-1;if BrakeLanding then n2=0;local nE=false;local nF=30;if aT~=nil and aT>0 then local nG=r(ar,0.4,2)local nh=LastMaxBrakeInAtmo*r(bs/100,0.1,1)*nG;local nH=aT*nG+nh-kI;local nI=nh/2-kI;local nJ=bs-y(d(nI/2)*20/(0.5*av))*utils.sign(nI)if nJ<0 then nJ=0 end;local nK;if bs>100 then local nL,_=aS.computeDistanceAndTime(bs,100,av,0,0,nh)local nM,_=aS.computeDistanceAndTime(100,0,av,0,0,y(nh))nK=nL+nM else nK=aS.computeDistanceAndTime(bs,0,av,0,0,y(nh))end;if nK<20 then BrakeIsOn=false else local nN=0;if nJ>100 then local nO,_=aS.computeDistanceAndTime(nJ,100,av,0,0,nH)local nP,_=aS.computeDistanceAndTime(100,0,av,0,0,aT*nG+y(nh)-kI)nN=nO+nP else nN,_=aS.computeDistanceAndTime(nJ,0,av,0,0,aT*nG+y(nh)-kI)end;nN=(nN+15+bs*mw)*1.1;local nQ=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if nQ then local mD=planet:getAltitude(CustomTarget.position)local nR=as-mD-100;local mr=CustomTarget.position-bv;local nS=y(mr:len()^2-(as-mD)^2)if nS>100 then nQ=false elseif nR<=nN or nN==-1 then BrakeIsOn=true;nE=true else BrakeIsOn=false;nE=true end end;if not nQ and CalculateBrakeLandingSpeed then if nN>=nF then BrakeIsOn=true else BrakeIsOn=false end;nE=true end end end;if not bA then cp(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)stablized=true;m9=ao;if m9>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()c6("grOut","LG",1)end;s:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-hd)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not nE then BrakeIsOn=true elseif not nE then BrakeIsOn=false end end;if AutoTakeoff or am then local c1,c3,c2;if AutopilotTargetCoords~=nil then c1,c3,c2=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(c4)return c4.radius+c4.noAtmosphericDensityAltitude end)end;if by then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cp(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(n2)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bs<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cp(0)elseif am then cp(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(c1==nil or c1.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bA then cp(0)end;AutopilotAccelerating=true end end;local nT=ao>-1;local nU=bB;if(VectorToTarget or am or bK)and not nT and bs>minRollVelocity and ar>0.01 then local nw=math.rad(d(bC))nU=bB*d(math.cos(nw))+my*math.sin(nw)end;local nV=r(n2-nU,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then nV=r(n2-nU,-85,MaxPitch)elseif ar<0.01 then nV=r(n2-nU,-MaxPitch,MaxPitch)end;if d(bC)<5 or VectorToTarget or bK or BrakeLanding or nT or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(nV)local n3=pitchPID:get()U=U+n3 end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=m4()return cD end;function script.onStart()local nW=false;local function nX()local function nY(nZ)local n_=dbHud_1.hasKey;for cS,cT in pairs(nZ)do if n_(cT)then local da=g(dbHud_1.getStringValue(cT))if da~=nil then _G[cT]=da;nW=true end end end end;if dbHud_1 then if not useTheseSettings then nY(cc())coroutine.yield()nY(c)else nY(c)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;nW=false end;coroutine.yield()if nW then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then a2="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function o0()local function o1(o2,o3)if o2>o3 then o3=o2 end;local o4,o5=0,0;if ContainerOptimization>0 then o4=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then o5=FuelTankOptimization*0.05 end;o3=o3*(1-(o4+o5))return o3 end;local o6=core.getElementNameById;local o7=fuelX~=0 and fuelY~=0;for cS in pairs(at)do local type=core.getElementTypeById(at[cS])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(at[cS])),'^.*vertical.*$')and core.getElementForwardById(at[cS])[3]>0 then bx=true end end;if o(type,'^.*Space Engine$')then bl=true;if o(tostring(core.getElementTagsById(at[cS])),'^.*vertical.*$')then local o8=core.getElementForwardById(at[cS])if o8[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local o9=j(at[cS])if o9>10000 then G=110 elseif o9>1000 then G=55 elseif o9>150 then G=27 end end;aL=aL+j(at[cS])if o7 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local o9=j(at[cS])local kQ=l(at[cS])local o2=0;local h1=q()if type=="Atmospheric Fuel Tank"then local o3=400;local oa=35.03;if o9>10000 then o3=51200;oa=5480 elseif o9>1300 then o3=6400;oa=988.67 elseif o9>150 then o3=1600;oa=182.67 end;o2=kQ-oa;if fuelTankHandlingAtmo>0 then o3=o3+o3*fuelTankHandlingAtmo*0.2 end;o3=o1(o2,o3)aI[#aI+1]={at[cS],o6(at[cS]),o3,oa,o2,h1}end;if type=="Rocket Fuel Tank"then local o3=320;local oa=173.42;if o9>65000 then o3=40000;oa=25740 elseif o9>6000 then o3=5120;oa=4720 elseif o9>700 then o3=640;oa=886.72 end;o2=kQ-oa;if fuelTankHandlingRocket>0 then o3=o3+o3*fuelTankHandlingRocket*0.1 end;o3=o1(o2,o3)aK[#aK+1]={at[cS],o6(at[cS]),o3,oa,o2,h1}end;if type=="Space Fuel Tank"then local o3=600;local oa=35.03;if o9>10000 then o3=76800;oa=5480 elseif o9>1300 then o3=9600;oa=988.67 elseif o9>150 then o3=2400;oa=182.67 end;o2=kQ-oa;if fuelTankHandlingSpace>0 then o3=o3+o3*fuelTankHandlingSpace*0.2 end;o3=o1(o2,o3)aJ[#aJ+1]={at[cS],o6(at[cS]),o3,oa,o2,h1}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function ob()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then s:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(aq or not aq and as<10000)then for _,cT in pairs(door)do cT.toggle()end end;if switch then for _,cT in pairs(switch)do cT.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cT in pairs(forcefield)do cT.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;s:setTargetGroundAltitude(b1)if aq and ao~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function oc()local od={}local function oe()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local of={[1]=4480,[6]=4480,[7]=6270}for og,oh in pairs(b)do b[og][0]=oe()b[og][0].systemId=og;od[og]={}for oi,planet in pairs(b[og])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=of[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=og;planet.bodyId=planet.id;od[og][oi]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end end end;aQ=cW()aR=aQ(od)aS=eg()aU=eK()aW=lE()end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})nX()coroutine.yield()o0()coroutine.yield()aX=lV()ob()coroutine.yield()oc()aY=f7()aV=gk()aV.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bP[1]=nil;if radar_1 then bP[1]=radar_1;aY.pickType()end;c6("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cT in pairs(door)do cT.toggle()end end;if switch then for _,cT in pairs(switch)do cT.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cT in pairs(forcefield)do cT.toggle()end end;cO()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;c6("stop","SU")end;function script.onTick(oj)local ok=nil;if oj=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a2="Radar Contact"c6("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif oj=="tenthSecond"then local function ol()local om=system.createData;local on=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=on(panelInterplanetary,"value")interplanetaryHeaderText=om('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=on(panelInterplanetary,"value")widgetDistanceText=om('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=on(panelInterplanetary,"value")widgetTravelTimeText=om('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=on(panelInterplanetary,"value")widgetMaxMassText=om('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=on(panelInterplanetary,"value")widgetTargetOrbitText=om('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=on(panelInterplanetary,"value")widgetCurBrakeDistanceText=om('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=on(panelInterplanetary,"value")widgetCurBrakeTimeText=om('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=on(panelInterplanetary,"value")widgetMaxBrakeDistanceText=om('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=on(panelInterplanetary,"value")widgetMaxBrakeTimeText=om('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=on(panelInterplanetary,"value")widgetTrajectoryAltitudeText=om('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function oo()t(panelInterplanetary)panelInterplanetary=nil end;local function op()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local eI=bs;local n5=unit.getThrottle()/100;if AtmoSpeedAssist then n5=K end;local oq,os=aS.computeDistanceAndTime(bs,MaxGameVelocity,av,a:maxForceForward()*n5,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ot;if not TurnBurn and eI>0 then _,ot=aX.GetAutopilotBrakeDistanceAndTime(eI)else _,ot=aX.GetAutopilotTBBrakeDistanceAndTime(eI)end;local ou=0;local ov=0;if AutopilotCruising or not Autopilot and eI>5 then ov=aS.computeTravelTime(eI,0,AutopilotDistance)elseif a8+oq<AutopilotDistance then ou=AutopilotDistance-(a8+oq)ov=aS.computeTravelTime(8333.0556,0,ou)else local ow=(AutopilotDistance-a8)/oq;oq=AutopilotDistance-a8;os=os*ow end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ov elseif AutopilotBraking then return ot elseif AutopilotCruising then return ov+ot else return os+a9+ov end end;local function ox(kI,oy)if kI==nil then kI=core.g()end;kI=A(kI,5)if oy~=nil and oy or(ok==nil or ok~=kI)then local eI=bq:len()local oz=g(unit.getData()).maxBrake;if oz~=nil and oz>0 and aq then oz=oz/r(eI/100,0.1,1)oz=oz/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+oz)/2 else LastMaxBrakeInAtmo=oz end end end;if oz~=nil and oz>0 then LastMaxBrake=oz end;ok=kI end end;ox(nil,true)if bz~=nil then if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or s:getTargetSpeed(axisCommandId.longitudinal)~=bz then cs(bz)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then ol()end;if AutopilotTargetName~=nil then local oA=CustomTarget~=nil;local oB=0.5*LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()oB=oB>1000000 and A(oB/1000000,2).." kTons"or A(oB/1000,2).." Tons"u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=op()if oA and not Autopilot then aj=(bv-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local iM=cw(aj)u(widgetDistanceText,'{"label": "distance", "value": "'..iM..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cJ(travelTime)..'", "unit":""}')iM=cw(a8)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..iM..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cJ(a9)..'", "unit":""}')iM=cw(aa)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..iM..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cJ(ab)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..f("%s",oB)..'", "unit":""}')iM=cw(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..iM..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then cp(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else oo()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.TenthTick()elseif oj=="oneSecond"then local function oC(h9)local oD=0;aD=""local oE=aL;local oF=0;local oG=0;local oH=0;local h5=0;local h6=""local oI=core.getElementHitPointsById;for cS in pairs(at)do local o9=0;local oJ=0;oJ=j(at[cS])o9=oI(at[cS])oF=oF+o9;if o9<oJ then if o9==0 then oH=oH+1 else oG=oG+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cS]))local ck=position.x;local cl=position.y;local fC=position.z;table.insert(aA,core.spawnArrowSticker(ck,cl,fC+1,"down"))table.insert(aA,core.spawnArrowSticker(ck,cl,fC+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(ck+1,cl,fC,"north"))table.insert(aA,core.spawnArrowSticker(ck+1,cl,fC,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(ck-1,cl,fC,"south"))table.insert(aA,core.spawnArrowSticker(ck-1,cl,fC,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(ck,cl-1,fC,"east"))table.insert(aA,core.spawnArrowSticker(ck,cl-1,fC,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(ck,cl+1,fC,"west"))table.insert(aA,core.spawnArrowSticker(ck,cl+1,fC,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cS])end elseif aM and#aA>0 and aA[11]==at[cS]then for h0 in pairs(aA)do core.deleteSticker(aA[h0])end;aA={}end end;oD=e(oF/oE*100)if oD<100 then if oD>0 and oD<WipeDamage then SavedLocations={}aW.UpdateAtlasLocationsList()aW.UpdateAutopilotTarget()cO()end;h9[#h9+1]=cj(0,0,"","pbright txt")h5=e(oD*2.55)h6=f("rgb(%d,%d,%d)",255-h5,h5,0)if oD<100 then h9[#h9+1]=cj("50%",1035,"Elemental Integrity: "..oD.."%","txtbig txtmid","fill:"..h6)if oH>0 then h9[#h9+1]=cj("50%",1055,"Disabled Modules: "..oH.." Damaged Modules: "..oG,"txtbig txtmid","fill:"..h6)elseif oG>0 then h9[#h9+1]=cj("50%",1055,"Damaged Modules: "..oG,"txtbig txtmid","fill:"..h6)end end end end;local function oK()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;bU=core.getPlayersOnBoard()bV=core.getDockedConstructs()oK()local h9={}aV.OneSecond(h9)if ShouldCheckDamage then oC(h9)end;ak=table.concat(h9,"")collectgarbage("collect")elseif oj=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local da=g(dbHud_1.getStringValue("SavedLocations"))if da~=nil then _G["SavedLocations"]=da;local fV=-1;local lR;for cS,cT in pairs(SavedLocations)do if cT.name and cT.name=="SatNav Location"then fV=cS;break end end;if fV~=-1 then lR=SavedLocations[fV]fV=-1;for cS,cT in pairs(b[0])do if cT.name and cT.name=="SatNav Location"then fV=cS;break end end;if fV>-1 then b[0][fV]=lR end;aW.UpdateAtlasLocationsList()a2=lR.name.." position updated"end end;for i=1,#bG do if bG[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif oj=="msgTick"then local h9={}aV.DisplayMessage(h9,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif oj=="animateTick"then a_=true;aZ=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif oj=="hudTick"then aV.hudtick()elseif oj=="apTick"then aX.APTick()elseif oj=="radarTick"then aY.UpdateRadar()elseif oj=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function oL(oM,nf)local oN=vec3()local oO=vec3()if oM==axisCommandId.longitudinal then oN=vec3(core.getConstructOrientationForward())oO=bo elseif oM==axisCommandId.vertical then oN=vec3(core.getConstructOrientationUp())oO=bn elseif oM==axisCommandId.lateral then oN=vec3(core.getConstructOrientationRight())oO=bp else return vec3()end;local oP=vec3(core.getWorldGravity())local oQ=oP:dot(oO)local oR=vec3(core.getWorldAirFrictionAcceleration())local oS=oR:dot(oO)local oT=bq:dot(oN)local oU=nf*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(oU-oT)local oV=targetSpeedPID2:get()local oW=(oV-oS-oQ)*oO;return oW end;local function oX(oM,nf)local oN=vec3()local oO=vec3()if oM==axisCommandId.longitudinal then oN=vec3(core.getConstructOrientationForward())oO=bo elseif oM==axisCommandId.vertical then oN=vec3(core.getConstructOrientationUp())oO=bn elseif oM==axisCommandId.lateral then oN=vec3(core.getConstructOrientationRight())oO=bp else return vec3()end;local oP=vec3(core.getWorldGravity())local oQ=oP:dot(oO)local oR=vec3(core.getWorldAirFrictionAcceleration())local oS=oR:dot(oO)local oT=bq:dot(oN)local oU=nf*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(oU-oT)local oV=targetSpeedPID:get()local oW=(oV-oS-oQ)*oO;return oW end;local function oY(oZ,hc,lJ)local o_=oZ:cross(lJ):normalize_inplace()local hZ=math.acos(r(o_:dot(-hc),-1,1))*constants.rad2deg;if o_:cross(-hc):dot(lJ)<0 then hZ=-hZ end;return hZ end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and O then cp(0)O=false elseif not bA and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local p0=r(T+U+system.getControlDeviceForwardInput(),-1,1)local p1=r(W+Z+system.getControlDeviceYawInput(),-1,1)local p2=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local p3=Y;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())av=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local p4=bC/180*math.pi;local p5=math.cos(p4)local p6=math.sin(p4)bB=oY(bt,bo,bp*p5+bn*p6)local p7=br:normalize()local p8=d(bC)local p9=utils.sign(bC)local pa=vec3(core.getWorldAngularVelocity())local pb=p0*pitchSpeedFactor*bp+p1*rollSpeedFactor*bo+p2*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local pc=d(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and pc>0 or ar>0.0 and pc<autoRollRollThreshold and autoRollPreference)and p1==0 and d(bB)<85 then local pd=b4;local pe=autoRollFactor;if ar==0 then pe=pe/4;b4=0;pd=0 end;if rollPID==nil then rollPID=pid.new(pe*0.01,0,pe*0.1)end;rollPID:inject(pd-bC)local pf=rollPID:get()pb=pb+pf*bo end end;local pg=1;local ph=0;local pi=1;local pj=system.getMouseWheel()if pj>0 then bX()elseif pj<0 then bX(true)else aw=true end;L=0;if aq and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local pk=throttlePID:get()N=r(pk,-1,1)if N<K and ar>0.005 then M=true;s:setThrottleCommand(axisCommandId.longitudinal,r(N,0.01,1))else M=false;s:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local pl=r(brakePID:get(),0,1)if ar>0 and bu<-80 or ar>0.005 then L=pl end;if L>0 then if M and N==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else N=r(N,0.01,1)end;local pm=''local pn=vec3()local po=oL(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",po,ph)local pp='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pp=pp..ExtraLongitudeTags end;local pq=s:getAxisCommandType(axisCommandId.longitudinal)local pr=s:composeAxisAccelerationFromThrottle(pp,axisCommandId.longitudinal)local ps=oX(axisCommandId.lateral,LeftAmount*1000)pm=pm..' , '.."lateral airfoil , lateral ground "pn=pn+ps;if pn:len()>constants.epsilon then a:setEngineForceCommand(pm,pn,ph,'','','',pi)end;a:setEngineForceCommand(pp,pr,pg)local pt='thrust analog vertical fueled 'local pu='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then pu=pu..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then pt=pt..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(pt,po,pg)else a:setEngineForceCommand(pt,vec3(),pg)end;if LeftAmount~=0 then a:setEngineForceCommand(pu,ps,pg)else a:setEngineForceCommand(pu,vec3(),pg)end;if p3==0 then p3=L end;local pv=-p3*(brakeSpeedFactor*br+brakeFlatFactor*p7)a:setEngineForceCommand('brake',pv)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,K)end;local nf=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-nf/3.6)local pl=r(brakePID:get(),0,1)p3=r(p3+pl,0,1)end;local pv=-p3*(brakeSpeedFactor*br+brakeFlatFactor*p7)a:setEngineForceCommand('brake',pv)local pm=''local pn=vec3()local pw=false;local pp='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then pp=pp..ExtraLongitudeTags end;local pq=s:getAxisCommandType(axisCommandId.longitudinal)if pq==axisCommandType.byThrottle then local pr=s:composeAxisAccelerationFromThrottle(pp,axisCommandId.longitudinal)a:setEngineForceCommand(pp,pr,pg)elseif pq==axisCommandType.byTargetSpeed then local pr=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)pm=pm..' , '..pp;pn=pn+pr;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then pw=true end end;local pu='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then pu=pu..ExtraLateralTags end;local px=s:getAxisCommandType(axisCommandId.lateral)if px==axisCommandType.byThrottle then local py=s:composeAxisAccelerationFromThrottle(pu,axisCommandId.lateral)a:setEngineForceCommand(pu,py,pg)elseif px==axisCommandType.byTargetSpeed then local ps=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)pm=pm..' , '..pu;pn=pn+ps end;local pt='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then pt=pt..ExtraVerticalTags end;local pz=s:getAxisCommandType(axisCommandId.vertical)if pz==axisCommandType.byThrottle then local po=s:composeAxisAccelerationFromThrottle(pt,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(pt,po,pg,'airfoil','ground','',pi)else a:setEngineForceCommand(pt,vec3(),pg)a:setEngineForceCommand('airfoil vertical',po,pg,'airfoil','','',pi)a:setEngineForceCommand('ground vertical',po,pg,'ground','','',pi)end elseif pz==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),pg)end;local pA=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)pm=pm..' , '..pt;pn=pn+pA end;if pn:len()>constants.epsilon then if Y~=0 or pw or d(p7:dot(bo))<0.5 then pm=pm..', brake'end;a:setEngineForceCommand(pm,pn,ph,'','','',pi)end end;local pB=torqueFactor*(pb-pa)local pC=vec3(core.getWorldAirFrictionAngularAcceleration())pB=pB-pC;a:setEngineTorqueCommand('torque',pB,pg,'airfoil','','',pi)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local eI=bq:len()local pD=0.15;if not bA then local pE=s:getTargetSpeed(axisCommandId.longitudinal)if eI*3.6>pE*(1-pD)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI*3.6<pE*(1-pD)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local n5=unit.getThrottle()if AtmoSpeedAssist then n5=K*100 end;local nf=n5/100;if k==0 then nf=nf*MaxGameVelocity;if eI>=nf*(1-pD)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI<nf*(1-pD)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local nq=e(b7)nf=nf*nq/3.6;if eI>=nf*(1-pD)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eI<nf*(1-pD)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local gh=coroutine.status(beginSetup)if gh=="suspended"then local cq,gi=coroutine.resume(beginSetup)if gi then system.print("ERROR STARTUP: "..gi)end elseif gh=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(pF)local function pG(bY)local D=1;local function pH(pI,bY)local pJ={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local pK=pI;for _,cT in ipairs(pJ)do if bY and pK>cT then pI=cT elseif pI<cT and not bY then pI=cT;break end end;return pI end;if bY then D=-1 end;if not ExternalAGG and by then if a1 and bY then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bg=pH(bg,bY)else bg=bg+D*a3 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=pH(HoldAltitude,bY)else HoldAltitude=HoldAltitude+D*a3 end end else s:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function pL(pM)if not aq then a2="Flight Assist in Atmo only"return end;local d0=type(pM)if bK==nil then if d0=="table"then if Autopilot or VectorToTarget then cE()end;c6("180On","BR")elseif pM==1 then c6("bnkLft","BR")else c6("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cB()if d0~="table"then pM=pM+1 end end;bK=pM else c6("180Off","BR")bK=nil end end;if pF=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cp(0)if vBooster or hover then if aq and ao==-1 then c6("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if S then c6("grOut","LG",1)a.control.extendLandingGears()end;s:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then c6("grOut","LG",1)a.control.extendLandingGears()end else if S then c6("grIn","LG",1)a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif pF=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif pF=="forward"then T=T-1 elseif pF=="backward"then if AltIsOn then pL(-br*5000)else T=T+1 end elseif pF=="left"then if AltIsOn then pL(1)else W=W-1 end elseif pF=="right"then if AltIsOn then pL(3)else W=W+1 end elseif pF=="yawright"then X=X-1 elseif pF=="yawleft"then X=X+1 elseif pF=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif pF=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif pF=="up"then af=af+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif pF=="down"then af=af-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif pF=="groundaltitudeup"then pG()elseif pF=="groundaltitudedown"then pG(true)elseif pF=="option1"then toggleView=false;if AltIsOn and a1 then local pN=""for i=1,#bU do pN=pN.."| Name: "..system.getPlayerName(bU[i]).." Mass: "..A(core.getBoardedPlayerMass(bU[i])/1000,1).."t "end;system.print("Onboard: "..pN)return end;aW.adjustAutopilotTargetIndex()elseif pF=="option2"then toggleView=false;if AltIsOn and a1 then for i=1,#bU do core.forceDeboard(bU[i])end;a2="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif pF=="option3"then local function pO()aE=not aE;if not aE then c6("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else c6("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then t(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then t(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a1 then local pN=""for i=1,#bV do pN=pN.."| ID: "..bV[i].." Mass: "..A(core.getDockedConstructMass(bV[i])/1000,1).."t "end;system.print("Docked Ships: "..pN)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;pO()toggleView=false elseif pF=="option4"then toggleView=false;if AltIsOn and a1 then for i=1,#bV do core.forceUndock(bV[i])end;a2="Undocked all ships"return end;bK=nil;cE()elseif pF=="option5"then toggleView=false;function ToggleLockPitch()if LockPitch==nil then c6("lkPOn","LP")if not a1 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else c6("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif pF=="option6"then toggleView=false;if AltIsOn and a1 then if shield_1 then local pP=shield_1.getVentingCooldown()if pP>0 then a2="Cannot vent again for "..pP.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a2="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a2="Shields already at max hitpoints"end;return else a2="No shield found"return end end;cB()elseif pF=="option7"then toggleView=false;if AltIsOn and a1 then if shield_1 then shield_1.toggle()return else a2="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end elseif pF=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"s:deactivateGroundEngineAltitudeStabilization()c6("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)c6("gsOn","GS")end;toggleView=false elseif pF=="option9"then if AltIsOn and a1 then s:resetCommand(axisCommandId.longitudinal)s:resetCommand(axisCommandId.lateral)s:resetCommand(axisCommandId.vertical)cp(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then c6("gyOn","GA")else c6("gyOff","GA")end end;toggleView=false elseif pF=="lshift"then bR=false;if AltIsOn then a1=true end;if x()==1 then a1=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;a_=false;aZ=false end elseif pF=="brake"then if BrakeToggleStatus or AltIsOn then cG()elseif not BrakeIsOn then cG()else BrakeIsOn=true end elseif pF=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif pF=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif pF=="stopengines"then local function pQ()if E-F<1.5 then c6("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bK=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;pQ()F=E;if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then s:resetCommand(axisCommandId.longitudinal)cp(0)else cp(100)end else if s:getTargetSpeed(axisCommandId.longitudinal)~=0 then s:resetCommand(axisCommandId.longitudinal)else if aq then cs(AtmoSpeedLimit)else cs(MaxGameVelocity*3.6)end end end elseif pF=="speedup"then bX()elseif pF=="speeddown"then bX(true)elseif pF=="antigravity"and not ExternalAGG then if antigrav~=nil then cI()end end end;function script.onActionStop(pF)local function pR()if not ExternalAGG and by then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if pF=="forward"then T=0 elseif pF=="backward"then T=0 elseif pF=="left"then if bK then if bK==2 then bK=-2 else bK=-1 end end;W=0 elseif pF=="right"then if bK then if bK==4 then bK=-2 else bK=-1 end end;W=0 elseif pF=="yawright"then X=0 elseif pF=="yawleft"then X=0 elseif pF=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif pF=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif pF=="up"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pF=="down"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif pF=="groundaltitudeup"then pR()toggleView=false elseif pF=="groundaltitudedown"then pR()toggleView=false elseif pF=="lshift"then if x()==1 then ag=0;ah=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a1=false elseif pF=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then cG()else BrakeIsOn=false end end elseif pF=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(pF)local function pS(bY)local D=1;if bY then D=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=r(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+D*a5;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a5 end;a5=r(a5*1.05,a3,50)else s:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function pT(bY)local D=1;if bY then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if pF=="groundaltitudeup"then if not a1 then pS()end elseif pF=="groundaltitudedown"then if not a1 then pS(true)end elseif pF=="speedup"then pT()elseif pF=="speeddown"then pT(true)end end;function script.onInputText(cm)local function pU(pV,eM,hV)local function pW(eM)local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8='::pos{'..B..','..B..','..B..','..B..','..B..'}'local dl,dm,dt,du,dv=o(eM,d8)if dl=="0"and dm=="0"then return vec3(z(dt),z(du),z(dv))end;du=math.rad(du)dt=math.rad(dt)local planet=b[z(dl)][z(dm)]local ed=math.cos(dt)local pX=vec3(ed*math.cos(du),ed*math.sin(du),math.sin(dt))return planet.center+(planet.radius+dv)*pX end;local position=pW(eM)return aW.AddNewLocation(pV,position,hV)end;local i;local pY,pZ=nil,nil;local p_="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(cm," ")pY=cm;if i~=nil then pY=string.sub(cm,0,i-1)pZ=string.sub(cm,i+1)end;if pY=="/help"or pY=="/commands"then for kZ in string.gmatch(p_,"([^\n]+)")do system.print(kZ)end;return elseif pY=="/setname"then if pZ==nil or pZ==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(pZ)else a2="Select a saved target to rename first"end elseif shield_1 and pY=="/resist"then if pZ==nil or shield_1.getResistancesCooldown()>0 then a2="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d8=B..', '..B..', '..B..', '..B;local q0,q1,q2,q3=o(pZ,d8)if q3==nil or q0+q1+q2+q3>0.6 then a2="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(q0,q1,q2,q3)==1 then a2="Shield Resistances set"else a2="Resistance setting failed."end elseif pY=="/addlocation"or string.find(cm,"::pos")~=nil then local hV=false;local pV="0-Temp"if pZ==nil or pZ==""then pZ=pY;hV=true end;i=string.find(pZ,"::")if not hV then pV=string.sub(pZ,1,i-2)end;local eM=string.sub(pZ,i)pU(pV,eM,hV)elseif pY=="/agg"then if pZ==nil or pZ==""then a2="Usage: /agg targetheight"return end;pZ=z(pZ)if pZ<1000 then pZ=1000 end;AntigravTargetAltitude=pZ;a2="AGG Target Height set to "..pZ elseif pY=="/G"then if pZ==nil or pZ==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if pZ=="dump"then for cS,cT in pairs(cc())do if type(_G[cT])=="boolean"then if _G[cT]==true then system.print(cT.." true")else system.print(cT.." false")end elseif _G[cT]==nil then system.print(cT.." nil")else system.print(cT.." ".._G[cT])end end;return end;i=string.find(pZ," ")local q4=string.sub(pZ,0,i-1)local q5=string.sub(pZ,i+1)for cS,cT in pairs(cc())do if cT==q4 then a2="Variable "..q4 .." changed to "..q5;local q6=type(_G[cT])if q6=="number"then q5=z(q5)if cT=="AtmoSpeedLimit"then b7=q5 end elseif q6=="boolean"then if string.lower(q5)=="true"then q5=true else q5=false end end;_G[cT]=q5;return end end;a2="No such global variable: "..q4 elseif pY=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then aW.ClearCurrentPosition()else a2="Select a custom wp to delete first in IPH"end elseif pY=="/copydatabank"then if dbHud_2 then cO(true)else a2="Spare Databank required to copy databank"end elseif pY=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dm)if bP[1]and not aq and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dm)if bP[1]and CollisionSystem then if#bL>650 then dm=tostring(dm)bL[dm]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
