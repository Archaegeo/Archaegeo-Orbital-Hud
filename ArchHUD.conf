name: ArchHud - Archaegeo v1.006 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.006;freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementHitPointsById;local k=core.getElementMassById;local l=core.getElementNameById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local function s(t,u)local v=10^(u or 0)return c(t*v+0.5)/v end;local w=SafeR;local x=SafeB;local y=SafeG;local z=false;local A=0;local B=0;local C=0;local D=false;local E=0;local F=false;local G=s(ResolutionX/2,0)local H=s(ResolutionY/2,0)local I=false;local J=true;local K=55;local L=false;local M=1;local N=1;local O=false;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=0;local W=false;local X=false;local Y="empty"local Z=5;local a0=5;local a1=false;local a2,a3=0;local a4,a5=0;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=h()>0;local ap=h()local aq=core.getAltitude()local ar=core.getElementIdList()local as=r()local at=nil;local au=false;local av=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]local aw=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local ax={}local ay=0;local az=0;local aA=""local aB=true;local aC={}local aD=1;local aE=0.001;local aF=ResolutionX;local aG=ResolutionY;local aH=nil;local aI=nil;local aJ=nil;local aK=nil;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=c(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=16;local b2=0;local b3=nil;local b4=""local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=vec3(core.getWorldVelocity())local bh=vec3(bg):len()local bi=LandingGearGroundHeight;local bj=system.getMouseDeltaX()local bk=system.getMouseDeltaY()local bl=false;local bm=r()local bn=0;local bo=0;local bp=0;local bq=AtmoSpeedLimit;local br=0;local bs=nil;local bt=0;local bu=0;local bv=false;local bw=false;local bx={VectorToTarget=false}local by=false;local bz=0;local bA=nil;local bB=false;local bC=false;local bD=false;local bE=false;local bF=0;local bG=r()local function bH(bI)local bJ=dbHud_1.hasKey;for bK,bL in pairs(bI)do if bJ(bL)then local bM=e(dbHud_1.getStringValue(bL))if bM~=nil then _G[bL]=bM;aL=true end end end end;local function bN()if dbHud_1 then local bJ=dbHud_1.hasKey;bH(a)coroutine.yield()bH(b)if aL then Y="Loaded Saved Variables (see Lua Chat Tab for list)"G=s(ResolutionX/2,0)H=s(ResolutionY/2,0)aF=ResolutionX;aG=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bq=AtmoSpeedLimit;av=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]aw=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]else Y="No Saved Variables Found - Stand up / leave remote to save settings"end else Y="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bG then LastMaxBrakeInAtmo=0 end;LastStartTime=bG;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then Y="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function bO(bP,bQ)if bP>bQ then bQ=bP end;if ContainerOptimization>0 then bQ=bQ-bQ*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bQ=bQ-bQ*FuelTankOptimization*0.05 end;return bQ end;local function bR()local bS=fuelX~=0 and fuelY~=0;for bK in pairs(ar)do local type=core.getElementTypeById(ar[bK])if p(type,'^.*Space Engine$')then bE=true;if p(tostring(core.getElementTagsById(ar[bK])),'^.*vertical.*$')then local bT=core.getElementRotationById(ar[bK])if bT[4]<0 then if q(-bT[4],0.1)==0.5 then bC=true end else if q(bT[4],0.1)==0.5 then bD=true end end end end;if type=="Landing Gear"then O=true end;if type=="Dynamic Core Unit"then local bU=g(ar[bK])if bU>10000 then b1=128 elseif bU>1000 then b1=64 elseif bU>150 then b1=32 end end;aS=aS+g(ar[bK])if bS and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bU=g(ar[bK])local bV=k(ar[bK])local bP=0;local bW=r()if type=="Atmospheric Fuel Tank"then local bQ=400;local bX=35.03;if bU>10000 then bQ=51200;bX=5480 elseif bU>1300 then bQ=6400;bX=988.67 elseif bU>150 then bQ=1600;bX=182.67 end;bP=bV-bX;if fuelTankHandlingAtmo>0 then bQ=bQ+bQ*fuelTankHandlingAtmo*0.2 end;bQ=bO(bP,bQ)aP[#aP+1]={ar[bK],l(ar[bK]),bQ,bX,bP,bW}end;if type=="Rocket Fuel Tank"then local bQ=320;local bX=173.42;if bU>65000 then bQ=40000;bX=25740 elseif bU>6000 then bQ=5120;bX=4720 elseif bU>700 then bQ=640;bX=886.72 end;bP=bV-bX;if fuelTankHandlingRocket>0 then bQ=bQ+bQ*fuelTankHandlingRocket*0.1 end;bQ=bO(bP,bQ)aR[#aR+1]={ar[bK],l(ar[bK]),bQ,bX,bP,bW}end;if type=="Space Fuel Tank"then local bQ=2400;local bX=182.67;if bU>10000 then bQ=76800;bX=5480 elseif bU>1300 then bQ=9600;bX=988.67 end;bP=bV-bX;if fuelTankHandlingSpace>0 then bQ=bQ+bQ*fuelTankHandlingSpace*0.2 end;bQ=bO(bP,bQ)aQ[#aQ+1]={ar[bK],l(ar[bK]),bQ,bX,bP,bW}end end end end;local function bY()if gyro~=nil then at=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(ao or not ao and aq<10000)then for _,bL in pairs(door)do bL.toggle()end end;if switch then for _,bL in pairs(switch)do bL.toggle()end end;if forcefield and(ao or not ao==0 and aq<10000)then for _,bL in pairs(forcefield)do bL.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if O then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bZ=AboveGroundLevel()if bZ~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not O then GearExtended=true end else BrakeIsOn=false end;if bi~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bi)if bi==0 and not O then GearExtended=true;BrakeIsOn=true end else bi=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bZ~=-1 then bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ao end;local function b_(bL)if ResolutionX==1920 then return bL else return s(ResolutionX*bL/1920,0)end end;local function c0(bL)if ResolutionY==1080 then return bL else return s(ResolutionY*bL/1080,0)end end;local function c1(c2,c3)if c2==nil then c2=core.g()end;c2=s(c2,5)if c3~=nil and c3 or(aO==nil or aO~=c2)then local bg=core.getVelocity()local c4=vec3(bg):len()local c5=e(unit.getData()).maxBrake;if c5~=nil and c5>0 and ao then c5=c5/utils.clamp(c4/100,0.1,1)c5=c5/ap;if ap>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c5)/2 else LastMaxBrakeInAtmo=c5 end end end;if c5~=nil and c5>0 then LastMaxBrake=c5 end;aO=c2 end end;local function c6(c7,c8,c9,ca,cb,cc,cd,ce,cf)local cg={enableName=c7,disableName=c8,width=c9,height=ca,x=cb,y=cc,toggleVar=cd,toggleFunction=ce,drawCondition=cf,hovered=false}table.insert(aC,cg)return cg end;local function ch()AtlasOrdered={}for bK,bL in pairs(b3[0])do table.insert(AtlasOrdered,{name=bL.name,index=bK})end;local function ci(cj,ck)return cj.name<ck.name end;table.sort(AtlasOrdered,ci)end;local function cl()for bK,bL in pairs(SavedLocations)do table.insert(b3[0],bL)end;ch()end;local function cm(cn,co)if cn==0 then return math.abs(co)<1e-09 end;if co==0 then return math.abs(cn)<1e-09 end;return math.abs(cn-co)<math.max(math.abs(cn),math.abs(co))*epsilon end;local function cp(cq,cr)local cs=vec3(cr)if cq.bodyId==0 then return setmetatable({latitude=cs.x,longitude=cs.y,altitude=cs.z,bodyId=0,systemId=cq.planetarySystemId},MapPosition)end;local ct=cs-cq.center;local ae=ct:len()local cu=ae-cq.radius;local cv=0;local cw=0;if not cm(ae,0)then local cx=math.atan(ct.y,ct.x)cw=cx>=0 and cx or 2*math.pi+cx;cv=math.pi/2-math.acos(ct.z/ae)end;return setmetatable({latitude=math.deg(cv),longitude=math.deg(cw),altitude=cu,bodyId=cq.bodyId,systemId=cq.planetarySystemId},MapPosition)end;local function cy(cz)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cA='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cB,cC,cv,cw,cu=p(cz,cA)if cB=="0"and cC=="0"then return vec3(tonumber(cv),tonumber(cw),tonumber(cu))end;cw=math.rad(cw)cv=math.rad(cv)local planet=b3[tonumber(cB)][tonumber(cC)]local cD=math.cos(cv)local cE=vec3(cD*math.cos(cw),cD*math.sin(cw),math.sin(cv))return planet.center+(planet.radius+cu)*cE end;local function cF(cG,planet,cz)if dbHud_1 then local cH={}local position=cy(cz)if planet.name=="Space"then cH={position=position,name=cG,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cI=false;if planet.hasAtmosphere then cI=true else cI=false end;cH={position=position,name=cG,atmosphere=cI,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cH;table.insert(b3[0],cH)ch()else Y="Databank must be installed to save locations"end end;local function cJ(ae,cK)local cL=ae>100000;local bM,cM=""if cK==nil then cK=1 end;if cL then bM,cM=s(ae/1000/200,cK),"SU"elseif ae<1000 then bM,cM=s(ae,cK),"M"else bM,cM=s(ae/1000,cK),"KM"end;return bM,cM end;local function cN(cO)for bK,bL in pairs(cO)do if bL.name and bL.name==CustomTarget.name then return bK end end;return-1 end;local function cP()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cQ=planet.name..". "..#SavedLocations;if radar_1 then local cR,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cR~=nil and cR~=""then cQ=cQ.." "..radar_1.getConstructName(cR)end end;local cH={}local cI=false;if planet.hasAtmosphere then cI=true end;cH={position=position,name=cQ,atmosphere=cI,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cH;table.insert(b3[0],cH)ch()Y="Location saved as "..cQ else Y="Databank must be installed to save locations"end end;local function cS(cT)local cU=-1;local cH;cU=cN(SavedLocations)if cU~=-1 then local cV;if cT~=nil then cH={position=SavedLocations[cU].position,name=cT,atmosphere=SavedLocations[cU].atmosphere,planetname=SavedLocations[cU].planetname,gravity=SavedLocations[cU].gravity}else cH={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cU].name,atmosphere=ap,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cU]=cH;cU=-1;cU=cN(b3[0])if cU>-1 then b3[0][cU]=cH end;ch()Y=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else Y="Name Not Found"end end;local function cW()local cU=-1;cU=cN(b3[0])if cU>-1 then table.remove(b3[0],cU)end;cU=-1;cU=cN(SavedLocations)if cU~=-1 then Y=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cU)end;DecrementAutopilotTargetIndex()ch()end;local function cX(cY)cY[#cY+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;local function cZ()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;local function c_()aB=not aB;if not aB then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function d0()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function d1()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function d2(d3,d4,cb,cc,c9,ca)if d3>cb and d3<cb+c9 and d4>cc and d4<cc+ca then return true else return false end end;local function d5()TurnBurn=not TurnBurn end;local function d6()if bG-bo<1.5 then if planet.hasAtmosphere then if ap>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bo=-1;if AltitudeHold then return end end else bo=bG end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;W=false;bf=true;LockPitch=nil;bB=false;if hoverDetectGround()==-1 then AutoTakeoff=false;if bo>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=aq end end;if not ao then bB=false;by=true;IntoOrbit=true;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bo>-1 then HoldAltitude=aq+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function d7(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then d6()end end;VectorStatus="Proceeding to Waypoint"end;local function d8()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end end;local function d9()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then d6()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then d6()end;AutoTakeoff=true;HoldAltitude=aq+AutoTakeoffAltitude end;bB=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function ToggleIntoOrbit()bv=false;bt=nil;bu=nil;bF=0;if IntoOrbit then if bB then CancelIntoOrbit=false else CancelIntoOrbit=true end;bB=false;IntoOrbit=false;bA=nil elseif unit.getClosestPlanetInfluence()>0 and ap==0 then IntoOrbit=true;bB=false;CancelIntoOrbit=false;if bA==nil then bA=planet end else Y="Unable to engage orbiting, not near planet or in atmosphere"end end;local function da()local db=vec3(core.getConstructWorldOrientationForward())local dc=vec3(core.getConstructWorldOrientationRight())local dd=vec3(core.getConstructWorldOrientationUp())local de=vec3(core.getWorldVertical())return db,dc,dd,de end;local function df()if LockPitch==nil then local db,dc,_,de=da()local dg=getPitch(de,db,dc)LockPitch=dg;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function dh()if n()==1 then W=not W;if W then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else Y="Follow Mode only works with Remote controller"W=false end end;local function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local di=AtlasOrdered[AutopilotTargetIndex].index;local dj=b3[0][di]if dj.center then AutopilotTargetName=dj.name;a6=b9[0][di]if CustomTarget~=nil then if ap==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=dj;for _,bL in pairs(b9[0])do if bL.name==CustomTarget.planetname then a6=bL;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bc(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function dk(dl)if not Autopilot and not VectorToTarget and not aj then if dl==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local di=AtlasOrdered[AutopilotTargetIndex].index;local dj=b3[0][di]if dj.name=="Space"then if dl==nil then dk()else dk(1)end else UpdateAutopilotTarget()end end else Y="Disengage autopilot before changing Interplanetary Helper"end end;local function dm()if bG-bp<1.5 and ap>0 then if not bE then Y="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ap>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bp=-1;if Autopilot or VectorToTarget then return end end else bp=bG end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local dn=cp(a6,AutopilotTargetCoords)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ap~=0 then aj=true;d6()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ap>0 then bB=false;if not VectorToTarget then d7(SpaceTarget)end else if aq>100000 or aq==0 then bB=false;Autopilot=true else ai=true;ProgradeIsOn=true;if AltitudeHold then d6()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ap~=0 then aj=true;d6()else Autopilot=true end end elseif ap==0 then local dp=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a6.name==planet.name and dp)then bB=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;W=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;I=false;LockPitch=nil;WaypointSet=false end else aj=true;d6()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;I=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aq;TargetSet=false;Reentry=false end end;function gradeToggle(dq)if dq==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;W=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function ProgradeToggle()gradeToggle(1)end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bf=autoRollPreference;ai=false;ak=false;aa=0 end end;function CheckDamage(cY)local dr=0;aA=""local ds=aS;local dt=0;local du=0;local dv=0;local dw=0;local dx=""for bK in pairs(ar)do local bU=0;local dy=0;dy=g(ar[bK])bU=j(ar[bK])dt=dt+bU;if bU<dy then if bU==0 then dv=dv+1 else du=du+1 end;if aT and#ax==0 then position=vec3(core.getElementPositionById(ar[bK]))local cb=position.x-b1;local cc=position.y-b1;local dz=position.z-b1;table.insert(ax,core.spawnArrowSticker(cb,cc,dz+1,"down"))table.insert(ax,core.spawnArrowSticker(cb,cc,dz+1,"down"))core.rotateSticker(ax[2],0,0,90)table.insert(ax,core.spawnArrowSticker(cb+1,cc,dz,"north"))table.insert(ax,core.spawnArrowSticker(cb+1,cc,dz,"north"))core.rotateSticker(ax[4],90,90,0)table.insert(ax,core.spawnArrowSticker(cb-1,cc,dz,"south"))table.insert(ax,core.spawnArrowSticker(cb-1,cc,dz,"south"))core.rotateSticker(ax[6],90,-90,0)table.insert(ax,core.spawnArrowSticker(cb,cc-1,dz,"east"))table.insert(ax,core.spawnArrowSticker(cb,cc-1,dz,"east"))core.rotateSticker(ax[8],90,0,90)table.insert(ax,core.spawnArrowSticker(cb,cc+1,dz,"west"))table.insert(ax,core.spawnArrowSticker(cb,cc+1,dz,"west"))core.rotateSticker(ax[10],-90,0,90)table.insert(ax,ar[bK])end elseif aT and#ax>0 and ax[11]==ar[bK]then for dA in pairs(ax)do core.deleteSticker(ax[dA])end;ax={}end end;dr=c(dt/ds*100)if dr<100 then cY[#cY+1]=[[<g class="pbright txt">]]dw=c(dr*2.55)dx=d("rgb(%d,%d,%d)",255-dw,dw,0)if dr<100 then cY[#cY+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dx,dr)if dv>0 then cY[#cY+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dx,dv,du)elseif du>0 then cY[#cY+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dx,du)end end;cY[#cY+1]=[[<\g>]]end end;function DrawCursorLine(cY)local dB=c(utils.clamp(ae/(aF/4)*255,0,255))cY[#cY+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,c(w+0.5)+dB,c(y+0.5)-dB,c(x+0.5)-dB)end;function getPitch(dC,dD,ck)local dE=dC:cross(ck):normalize_inplace()local dg=math.acos(utils.clamp(dE:dot(-dD),-1,1))*constants.rad2deg;if dE:cross(-dD):dot(ck)<0 then dg=-dg end;return dg end;function signedRotationAngle(dF,dG,dH)dG=dG:project_on_plane(dF)dH=dH:project_on_plane(dF)return o(dG:cross(dH):dot(dF),dG:dot(dH))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;W=false;I=false;ai=false;aj=false;L=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;at=false;LockPitch=nil;IntoOrbit=false else am=true end end;function wipeSaveVariables()for bK,bL in pairs(a)do dbHud_1.setStringValue(bL,f(nil))end;for bK,bL in pairs(b)do if bL~="SavedLocations"then dbHud_1.setStringValue(bL,f(nil))end end;Y="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ad=5;aL=false;a9=true end;function CheckButtons()for _,bL in pairs(aC)do if bL.hovered then if not bL.drawCondition or bL.drawCondition()then bL.toggleFunction()end;bL.hovered=false end end end;function SetButtonContains()local cb=ab+aF/2;local cc=ac+aG/2;for _,bL in pairs(aC)do bL.hovered=d2(cb,cc,bL.x,bL.y,bL.width,bL.height)end end;function DrawButton(cY,dI,hover,cb,cc,dJ,dK,dL,dM,dN,dO)if type(dN)=="function"then dN=dN()end;if type(dO)=="function"then dO=dO()end;cY[#cY+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",cb,cc,dJ,dK)if dI then cY[#cY+1]=d("%s'",dL)else cY[#cY+1]=dM end;if hover then cY[#cY+1]=" style='stroke:white; stroke-width:2'"else cY[#cY+1]=" style='stroke:black; stroke-width:1'"end;cY[#cY+1]="></rect>"cY[#cY+1]=d("<text x='%f' y='%f' font-size='24' fill='",cb+dJ/2,cc+dK/2+5)if dI then cY[#cY+1]="black"else cY[#cY+1]="white"end;cY[#cY+1]="' text-anchor='middle' font-family='Montserrat'>"if dI then cY[#cY+1]=d("%s</text>",dN)else cY[#cY+1]=d("%s</text>",dO)end end;function DrawButtons(cY)local dP="rgb(50,50,50)'"local dQ="rgb(210,200,200)"local dR=DrawButton;for _,bL in pairs(aC)do local c8=bL.disableName;local c7=bL.enableName;if type(c8)=="function"then c8=c8()end;if type(c7)=="function"then c7=c7()end;if not bL.drawCondition or bL.drawCondition()then dR(cY,bL.toggleVar(),bL.hovered,bL.x,bL.y,bL.width,bL.height,dQ,dP,c8,c7)end end end;function DrawTank(cY,b0,cb,dS,dT,dU,dV,dW)local dX=1;local dY=2;local dZ=3;local d_=4;local e0=5;local e1=6;local e2=""local e3=0;local e4=fuelY;local e5=fuelY+10;if n()==1 and not RemoteHud then e4=e4-50;e5=e5-50 end;cY[#cY+1]=[[<g class="pdim txtfuel">]]if dT=="ATMO"then e2="atmofueltank"elseif dT=="SPACE"then e2="spacefueltank"else e2="rocketfueltank"end;e3=_G[e2 .."_size"]if#dU>0 then for i=1,#dU do local cQ=string.sub(dU[i][dY],1,12)local e6=0;for dA=1,e3 do if dU[i][dY]==e(unit[e2 .."_"..dA].getData()).name then e6=dA;break end end;if b0 or dV[i]==nil or dW[i]==nil then local e7=0;local e8=0;local e9=0;local ea=0;local bW=r()if e6~=0 then dW[i]=e(unit[e2 .."_"..e6].getData()).percentage;dV[i]=e(unit[e2 .."_"..e6].getData()).timeLeft;if dV[i]=="n/a"then dV[i]=0 end else e9=k(dU[i][dX])-dU[i][d_]e7=dU[i][dZ]dW[i]=c(0.5+e9*100/e7)e8=dU[i][e0]ea=dU[i][e1]if e8<=e9 then dV[i]=0 else dV[i]=c(0.5+e9/((e8-e9)/(bW-ea)))end;dU[i][e0]=e9;dU[i][e1]=bW end end;if cQ==dS then cQ=d("%s %d",dT,i)end;if e6==0 then cQ=cQ.." *"end;local eb;if dV[i]==0 then eb="n/a"else eb=FormatTimeString(dV[i])end;if dW[i]~=nil then local dw=c(dW[i]*2.55)local dx=d("rgb(%d,%d,%d)",255-dw,dw,0)local ec=""if eb~="n/a"and dV[i]<120 or dW[i]<5 then if b0 then ec=[[class="red"]]end end;cY[#cY+1]=d([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],cb,e4,ec,cQ,cb,e5,dx,dW[i],eb)e4=e4+30;e5=e5+30 end end end;cY[#cY+1]="</g>"end;function getRelativePitch(bg)bg=vec3(bg)local dg=-math.deg(math.atan(bg.y,bg.z))+180;dg=dg-90;if dg<0 then dg=360+dg end;if dg>180 then dg=-180+dg-180 end;return-dg end;function getRelativeYaw(bg)bg=vec3(bg)local ed=math.deg(math.atan(bg.y,bg.x))-90;if ed<-180 then ed=360+ed end;return ed end;function AlignToWorldVector(ee,ef,eg)if not ao or not bl or al~=-1 or bh<K then local eh=eg;if eh==nil then eh=DampingMultiplier end;if ef==nil then ef=aE end;ee=vec3(ee):normalize()local ei=vec3(core.getConstructWorldOrientationForward())-ee;local ej=-getMagnitudeInDirection(ei,core.getConstructWorldOrientationRight())*aD;local ek=-getMagnitudeInDirection(ei,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=ej/2 end;if az==0 then az=ek/2 end;if math.abs(ej)<0.1 then R=R-ej*2 else R=R-(ej+(ej-ay)*eh)end;if math.abs(ek)<0.1 then Q=Q+ek*2 else Q=Q+ek+(ek-az)*eh end;ay=ej;az=ek;if math.abs(ej)<ef and math.abs(ek)<ef then return true end;return false elseif bl and al==-1 then ee=vec3(core.getWorldVelocity())local eh=eg;if eh==nil then eh=DampingMultiplier end;if ef==nil then ef=aE end;ee=vec3(ee):normalize()local ei=vec3(core.getConstructWorldOrientationForward())-ee;local ej=-getMagnitudeInDirection(ei,core.getConstructWorldOrientationRight())*aD;local ek=-getMagnitudeInDirection(ei,core.getConstructWorldOrientationUp())*aD;if ay==0 then ay=ej/2 end;if az==0 then az=ek/2 end;if math.abs(ej)<0.1 then R=R-ej*5 else R=R-(ej+(ej-ay)*eh)end;if math.abs(ek)<0.1 then Q=Q+ek*5 else Q=Q+ek+(ek-az)*eh end;ay=ej;az=ek;if math.abs(ej)<ef and math.abs(ek)<ef then return true end;return false end end;function getAPEnableName()local cQ=AutopilotTargetName;if cQ==nil then local el,cM=cJ((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cQ=CustomTarget.name.." "..el..cM end;if cQ==nil then cQ="None"end;return"Engage Autopilot: "..cQ end;function getAPDisableName()local cQ=AutopilotTargetName;if cQ==nil then cQ=CustomTarget.name end;if cQ==nil then cQ="None"end;return"Disable Autopilot: "..cQ end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aq end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then Y="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then Y="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not L then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then Y="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;Y="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local em,en=cJ(HoldAltitude)Y="Beginning Re-entry.  Target speed: "..bq.." Target Altitude: "..em..en;cmdCruise(math.floor(bq))end;AutoTakeoff=false end;function SetupButtons()local eo=50;local ep=260;local eq=c6("Enable Brake Toggle","Disable Brake Toggle",ep,eo,aF/2-ep/2,aG/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then Y="Brakes in Toggle Mode"else Y="Brakes in Default Mode"end end)c6("Align Prograde","Disable Prograde",ep,eo,aF/2-ep/2-50-eq.width,aG/2-eo+380,function()return ProgradeIsOn end,ProgradeToggle)c6("Align Retrograde","Disable Retrograde",ep,eo,aF/2-ep/2+eq.width+50,aG/2-eo+380,function()return RetrogradeIsOn end,gradeToggle,function()return ap==0 end)local er=c6(getAPEnableName,getAPDisableName,600,60,aF/2-600/2,aG/2-60/2-400,function()return Autopilot end,dm)c6("Save Position","Save Position",200,er.height,er.x+er.width+30,er.y,function()return false end,cP,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)c6("Update Position","Update Position",200,er.height,er.x+er.width+30,er.y,function()return false end,cS,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)c6("Clear Position","Clear Position",200,er.height,er.x-200-30,er.y,function()return true end,cW,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)eo=60;ep=300;local cb=10;local cc=aG/2-300;c6("Enable Turn and Burn","Disable Turn and Burn",ep,eo,cb,cc,function()return TurnBurn end,d5)c6("Engage Altitude Hold","Disable Altitude Hold",ep,eo,cb+ep+20,cc,function()return AltitudeHold end,d6)cc=cc+eo+20;c6("Engage Autoland","Disable Autoland",ep,eo,cb,cc,function()return AutoLanding end,d8)local es,et,eu;if VertTakeOffEngine then es="Engage Vertical Takeoff"et="Disable Vertical Takeoff"eu=VertTakeOff else es="Engage Auto Takeoff"et="Disable Auto Takeoff"eu=AutoTakeoff end;c6(es,et,ep,eo,cb+ep+20,cc,function()return eu end,d9)cc=cc+eo+20;c6("Show Orbit Display","Hide Orbit Display",ep,eo,cb,cc,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then Y="Orbit Display Enabled"else Y="Orbit Display Disabled"end end)c6("Engage Orbiting","Cancel Orbiting",ep,eo,cb+ep+20,cc,function()return IntoOrbit end,ToggleIntoOrbit,function()return ap==0 and unit.getClosestPlanetInfluence()>0 end)cc=cc+eo+20;c6("Glide Re-Entry","Cancel Glide Re-Entry",ep,eo,cb,cc,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return aq>ReentryAltitude end)c6("Parachute Re-Entry","Cancel Parachute Re-Entry",ep,eo,cb+ep+20,cc,function()return Reentry end,BeginReentry,function()return aq>ReentryAltitude end)cc=cc+eo+20;c6("Engage Follow Mode","Disable Follow Mode",ep,eo,cb,cc,function()return W end,dh,function()return n()==1 end)c6("Enable Repair Arrows","Disable Repair Arrows",ep,eo,cb+ep+20,cc,function()return aT end,function()aT=not aT;if aT then Y="Repair Arrows Enabled"else Y="Repair Arrows Diabled"end end,function()return n()==1 end)cc=cc+eo+20;if not ExternalAGG then c6("Enable AGG","Disable AGG",ep,eo,cb,cc,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;cc=cc+eo+20;c6(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,ep*2,eo,cb,cc,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local ev=Nav.axisCommandManager:getAxisCommandType(0)local ew="TRAVEL"if ev==1 then ew="CRUISE"end;if Autopilot then ew="AUTOPILOT"end;return ew end;function UpdateHud(cY)local cu=aq;local bg=core.getVelocity()local c4=vec3(bg):len()local db,dc,dd,de=da()local ex=getRoll(de,db,dc)local ey=ex/180*math.pi;local ez=math.cos(ey)local eA=math.sin(ey)local dg=getPitch(de,db,dc*ez+dd*eA)local eB=ex;local eC=dg;local eD=c(unit.getThrottle())local eE=c4*3.6;local eF=unit.getAxisCommandValue(0)local eG=b_(1770)local eH=c0(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eF=B;eD=B*100 end;local ew=GetFlightStyle()local eI="ROLL"local dp=unit.getClosestPlanetInfluence()>0;if eD==nil then eD=0 end;if not dp then if c4>5 then dg=getRelativePitch(bg)ex=getRelativeYaw(bg)else dg=0;ex=0 end;eI="YAW"end;if A>50000 and not ao then local eJ;if A>200000 then eJ=s(A/200000,2).." su"else eJ=s(A/1000,1).." km"end;cY[#cY+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],eG,eH,eJ)end;cY[#cY+1]=ag;cY[#cY+1]=aA;cY[#cY+1]=af;if b2%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cY,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)DrawTank(cY,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)DrawTank(cY,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b2=0 end;b2=b2+1;DrawVerticalSpeed(cY,cu)if n()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dp then DrawRollLines(cY,centerX,centerY,eB,eI,dp)DrawArtificialHorizon(cY,eC,eB,centerX,centerY,dp,c(getRelativeYaw(bg)),c4)else DrawRollLines(cY,centerX,centerY,ex,eI,dp)DrawArtificialHorizon(cY,dg,ex,centerX,centerY,dp,c(ex),c4)end;DrawAltitudeDisplay(cY,cu,dp)DrawPrograde(cY,bg,c4,centerX,centerY)end end;DrawThrottle(cY,ew,eD,eF)DrawSpeed(cY,eE)DrawWarnings(cY)DisplayOrbitScreen(cY)if screen_2 then local cz=vec3(core.getConstructWorldPos())local cb=960+cz.x/b5;local cc=450+cz.y/b6;screen_2.moveContent(b7,(cb-80)/19.2,(cc-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;function HUDPrologue(cY)if not z then w=PvPR;y=PvPG;x=PvPB else w=SafeR;y=SafeG;x=SafeB end;av=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]aw=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local eK=av;local eL=aw;local eM=av;local eN=aw;if IsInFreeLook()and not brightHud then eK=[[rgb(]]..c(w*0.4+0.5)..","..c(y*0.4+0.5)..","..c(x*0.3+0.5)..[[)]]eL=[[rgb(]]..c(w*0.3+0.5)..","..c(y*0.3+0.5)..","..c(x*0.2+0.5)..[[)]]end;cY[#cY+1]=d([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],eK,eK,eM,eM,eL,eL,eN,eN,ResolutionX,ResolutionY)end;function HUDEpilogue(cY)cY[#cY+1]="</svg>"end;function DrawSpeed(cY,eE)local eO=throtPosY-10;local eP=throtPosX+10;cY[#cY+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eO=75 end;cY[#cY+1]=d([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],eP,eO,c(eE))end;function DrawOdometer(cY,a7,TotalDistanceTravelled,ew,a8,eQ)local eR=b_(1240)local eS=c0(55)local eT=eS+10;local c2=core.g()local eU=0;local eV=0;local eW=0;c1(c2)if ao then eW=LastMaxBrakeInAtmo else eW=LastMaxBrake end;maxThrust=Nav:maxForceForward()aN=m()if not ShowOdometer then return end;local eX=vec3(core.getWorldAcceleration()):len()/9.80665;if c2>0.1 then eV=aN*c2;eU=maxThrust/c2 end;cY[#cY+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eR=b_(1120)eS=c0(55)eT=eS+10 elseif ao then local eY=b_(770)cY[#cY+1]=d([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],eY,eS,eY,eT,ap)end;cY[#cY+1]=d([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],eR,eS,eR,eT,c2/9.80665,eR,eS+20,eR,eT+20,eX)cY[#cY+1]=d([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],b_(660),b_(700),c0(35),b_(960),c0(55),b_(1240),c0(35),b_(1280))if n()==0 or RemoteHud then cY[#cY+1]=d([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],b_(700),c0(20),a7,b_(700),c0(30),TotalDistanceTravelled/1000,b_(830),c0(20),FormatTimeString(a8),b_(830),c0(30),FormatTimeString(TotalFlightTime),b_(970),c0(20),aN/1000,b_(1240),c0(10),eW/1000,b_(1240),c0(30),maxThrust/1000,b_(960),c0(180),ew)if c2>0.1 then cY[#cY+1]=d([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],b_(970),c0(30),eU/1000,b_(1240),c0(20),eV/1000)else cY[#cY+1]=d([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],b_(970),c0(30),b_(1240),c0(20))end else cY[#cY+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],b_(960),c0(33),ew)end;cY[#cY+1]="</g>"end;function DrawThrottle(cY,ew,eD,eF)eD=math.floor(eD+0.5)local e4=throtPosY+10;local e5=throtPosY+20;if n()==1 and not RemoteHud then e4=55;e5=65 end;local eZ="CRUISE"local unit="km/h"local e_=eF;if ew=="TRAVEL"or ew=="AUTOPILOT"then eZ="THROT"unit="%"e_=eD;local f0="dim"if eD<0 then f0="red"end;cY[#cY+1]=d([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],f0,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eD),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cY[#cY+1]=d([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,e4,eZ,throtPosX+10,e5,e_,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then eD=math.floor(E*100+0.5)local f0="red"if eD<0 then f0="red"end;cY[#cY+1]=d([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],f0,1-math.abs(eD),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cY[#cY+1]=d([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,e4+40,"LIMIT",throtPosX+10,e5+40,eD,"%")end;if ao and AtmoSpeedAssist or Reentry then cY[#cY+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,e4-40,"LIMIT: ",bq.." km/h")elseif not ao and Autopilot then cY[#cY+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,e4-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cY,cu)if cu<200000 and not ao or cu and ao then local f1=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local f2=0;if math.abs(f1)>1 then f2=45*math.log(math.abs(f1),10)if f1<0 then f2=-f2 end end;cY[#cY+1]=d([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,c(f1),c(f2))end end;function getHeading(dD)local dl=-vec3(core.getWorldVertical())dD=dD-dD:project_on(dl)local f3=vec3(0,0,1)f3=f3-f3:project_on(dl)local f4=f3:cross(dl)local f2=f3:angle_between(dD)*constants.rad2deg;if dD:dot(f4)<0 then f2=360-f2 end;return f2 end;function DrawRollLines(cY,centerX,centerY,eB,eI,dp)local f5=circleRad;local f6=20;f6=c(f6)local f7=c(eB)if dp then for i=-45,45,5 do local f8=i;cY[#cY+1]=d([[<g transform="rotate(%f,%d,%d)">]],f8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cY[#cY+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+f5+f6-len,centerX,centerY+f5+f6)end;cY[#cY+1]=d([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+f5+f6-35,eI,centerX,centerY+f5+f6-25,f7)cY[#cY+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eB,centerX,centerY)cY[#cY+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+f5+f6-20,centerX+5,centerY+f5+f6-20,centerX,centerY+f5+f6-15)cY[#cY+1]="</g>"end;local ed=f7;if dp then ed=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local f9=20;local fa=c(ed)local fb=0;local fc=centerY+f5+f6+20;local fd=centerX;if eI~="YAW"then fc=c0(130)fd=b_(960)end;local fe=[[<path class="txttick line" d="]]for i=c(fa-(f9+10)-fa%5+0.5),c(fa+f9+10+fa%5+0.5),5 do local cb=fd+-i*5+ed*5;if i%10==0 then fb=10;local t=i;if t==360 then t=0 elseif t>360 then t=t-360 elseif t<0 then t=t+360 end;cY[#cY+1]=d([[
                            <text x="%f" y="%f">%d</text>]],cb+5,fc-12,t)elseif i%5==0 then fb=5 end;if fb==10 then fe=d([[%s M %f %f v %d]],fe,cb,fc-5,fb)else fe=d([[%s M %f %f v %d]],fe,cb,fc-2.5,fb)end end;cY[#cY+1]=fe..[["/>]]cY[#cY+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fd-5,fc+10,fd+5,fc+10,fd,fc+5)if dp then eI="HDG"end;cY[#cY+1]=d([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],fd,fc+25,fa,fd,fc+35,eI)end;function DrawArtificialHorizon(cY,eC,eB,centerX,centerY,dp,ff,c4)local f5=circleRad;local fg=c(f5*3/5)if f5>0 then local fh=c(eC)local len=0;local fe=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*eB,centerX,centerY)if not ao then fe=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cY[#cY+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],f5-1,centerX,centerY)cY[#cY+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(fh-30-fh%5+0.5),c(fh+30+fh%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cc=centerY+-i*5+eC*5;if len==30 then fe=d([[%s M %d %f h %d]],fe,centerX-fg-len,cc,len)if ao then cY[#cY+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eB,centerX,centerY,centerX-fg+10,cc,i)cY[#cY+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eB,centerX,centerY,centerX+fg-10,cc,i)if i==0 or i==180 or i==-180 then cY[#cY+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eB,centerX,centerY,centerX-fg+20,cc,fg*2-40)end else cY[#cY+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-fg+10,cc,i)cY[#cY+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+fg-10,cc,i)end;fe=d([[%s M %d %f h %d]],fe,centerX+fg,cc,len)else fe=d([[%s M %d %f h %d]],fe,centerX-fg-len,cc,len)fe=d([[%s M %d %f h %d]],fe,centerX+fg,cc,len)end end;cY[#cY+1]=fe..[["/>]]local fi="PITCH"if not dp then fi="REL PITCH"end;if eC>90 and not ao then eC=90-(eC-90)elseif eC<-90 and not ao then eC=-90-(eC+90)end;if f5>200 then if ao then if c4>K then cY[#cY+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ff)end;cY[#cY+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eB,centerX,centerY)else cY[#cY+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cY[#cY+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-fg+25,centerY-5,centerX-fg+20,centerY,centerX-fg+25,centerY+5,centerX-fg+50,centerY+4,fh)cY[#cY+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+fg-25,centerY-5,centerX+fg-20,centerY,centerX+fg-25,centerY+5,centerX+fg-30,centerY+4,fh)cY[#cY+1]="</g>"end;local fj=c(f5/3)cY[#cY+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fj,centerY,f5-fj)if not ao and dp then cY[#cY+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eB,centerX,centerY,centerX-fg+10,centerY,fg*2-20)end;cY[#cY+1]="</g>"if f5<200 then if ao and c4>K then cY[#cY+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-f5,fi,centerX,centerY-f5+10,fh,centerX,centerY-15,"Yaw",centerX,centerY+20,ff)else cY[#cY+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-f5,fi,centerX,centerY-f5+15,fh)end end end end;function DrawAltitudeDisplay(cY,cu,dp)local fk=altMeterX;local fl=altMeterY;local fm=78;local fn=19;local fo=AboveGroundLevel()if fo~=-1 then table.insert(cY,d([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],fk+fm,fl+fn+20,fo))end;if dp and(cu<200000 and not ao or cu and ao)then table.insert(cY,d([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],fk-1,fl-4,fm+2,fn+6,fk+1,fl-1,fm-4,fn))local cU=0;local fp=1;local fq=0;local fr=cu<0;local fs=9;if fr then fs=0 end;local cu=math.abs(cu)while cU<6 do local ft=11;local fu=16;local fv=9;local fw=14;local ec="altsm"if cU>2 then fu=fu+3;ft=ft+2;fw=fw+2;fv=fv-6;ec="altbig"end;if fr then ec=ec.." red"end;local fx=cu/fp%10;local fy=c(fx)local fz=c((fy+1)%10)local fA=fq;if cU==0 then fA=fx-fy;if fr then fA=1-fA end end;if fr and(cU==0 or fq~=0)then local fB=fz;fz=fy;fy=fB end;local fC=fu*(fA-1)local fD=fC+fu;local cb=fk+fv+(6-cU)*ft;local cc=fl+fw;table.insert(cY,d([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],ec,cb,cc+fC,fz,cb,cc+fD,fy))cU=cU+1;fp=fp*10;if fy==fs then fq=fA else fq=0 end end;table.insert(cY,[[</g></g>]])end end;function DrawPrograde(cY,bg,c4,centerX,centerY)if c4>5 and not ao or c4>K then local f5=circleRad;local fE=20;local fF=20;local fG=vec3(bg)local fH=getRelativePitch(fG)local fI=getRelativeYaw(fG)local fJ=14;local fK=fJ/2;local fL=-fI/fF*f5;local fM=fH/fE*f5;local cb=centerX+fL;local cc=centerY+fM;local ae=math.sqrt(fL^2+fM^2)local fN=[[<circle
                cx="]]..cb..[["
                cy="]]..cc..[["
                r="]]..fK/fJ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..cb..[["
                cy="]]..cc..[["
                r="]]..fK..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..cb-fJ..[[,]]..cc..[[ h ]]..fK..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..cb+fK..[[,]]..cc..[[ h ]]..fK..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..cb..[[,]]..cc-fJ..[[ v ]]..fK..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<f5 then cY[#cY+1]=fN else local f2=math.atan(fM,fL)local fO=4;local fP=centerX+f5*math.cos(f2)local fQ=centerY+f5*math.sin(f2)cY[#cY+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',f2*180/math.pi,fP,fQ,fP-fO,fQ-fO/2,fO*2,fO,fP+fO,fQ-fO,fO,fO,-fO,fO)end;if not ao then fH=getRelativePitch(-fG)fI=getRelativeYaw(-fG)fL=-fI/fF*f5;fM=fH/fE*f5;cb=centerX+fL;cc=centerY+fM;ae=math.sqrt(fL^2+fM^2)if ae<f5 then local fR=[[<circle
                        cx="]]..cb..[["
                        cy="]]..cc..[["
                        r="]]..fK..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..cb..[[,]]..cc-fJ..[[ v ]]..fK..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..cb..[[,]]..cc..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..cb..[[,]]..cc..[[)" />
                     <path
                        d="M ]]..cb-fK..[[,]]..cc..[[ h ]]..fJ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..cb..[[,]]..cc..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..cb..[[,]]..cc..[[)"/>]]cY[#cY+1]=fR end end end end;function DrawWarnings(cY)cY[#cY+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],b_(1900),c0(1070),VERSION_NUMBER)cY[#cY+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cY[#cY+1]=d([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],b_(960),c0(550))cY[#cY+1]=d([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],b_(960),c0(600))cY[#cY+1]=d([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],b_(960),c0(650))end;local fS=b_(960)local fT=c0(860)local fU=c0(880)local fV=c0(900)local fW=c0(960)local fX=c0(200)local fY=c0(150)local fZ=c0(960)if n()==1 and not RemoteHud then fT=c0(135)fU=c0(155)fV=c0(175)fX=c0(115)fY=c0(95)end;if BrakeIsOn then cY[#cY+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],fS,fT)elseif C>0 then cY[#cY+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fS,fT,C)end;if ao and bl and hoverDetectGround()==-1 then cY[#cY+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],fS,fX+50)end;if at then cY[#cY+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],fS,fZ)end;if GearExtended then if O then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fS,fU)else cY[#cY+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fS,fU)end;local el,cM=cJ(Nav:getTargetGroundAltitude())cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fS,fV,el..cM)end;if a1 then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fS,fW+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(aq-antigrav.getBaseAltitude())<501 then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fS,fX+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else cY[#cY+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fS,fX+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fS,fX+20,AutopilotStatus)elseif LockPitch~=nil then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fS,fX+20,c(LockPitch))elseif W then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fS,fX+20)elseif Reentry then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fS,fX+20)end;local f_,g0,g1=b9:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bg:normalize(),function(g2)if g2.noAtmosphericDensityAltitude>0 then return g2.radius+g2.noAtmosphericDensityAltitude else return g2.radius+g2.surfaceMaxAltitude*1.5 end end)local g3=g0;if g1~=nil and g0~=nil then g3=math.min(g1,g0)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local el,cM=cJ(HoldAltitude,2)cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],fS,fX,el..cM)if BrakeIsOn then cY[#cY+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fS,fX+50)end else local el,cM=cJ(HoldAltitude)cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fS,fX,el..cM)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ap>0.1 then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fS,fX)elseif ap<0.09 and ap>0.05 then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fS,fX)elseif ap<0.05 then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fS,fX)end end;if IntoOrbit then if bs~=nil then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],fS,fX,bs)end end;if BrakeLanding then if StrongBrakes then cY[#cY+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],fS,fX)else cY[#cY+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],fS,fX)end end;if ProgradeIsOn then cY[#cY+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fS,fX)end;if RetrogradeIsOn then cY[#cY+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fS,fX)end;if TurnBurn then cY[#cY+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fS,fY)elseif g3~=nil and ap==0 then local el,cM=cJ(g3)local travelTime=ba.computeTravelTime(bh,0,g3)local g4="Collision"if f_.noAtmosphericDensityAltitude>0 then g4="Atmosphere"end;cY[#cY+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fS,fY,f_.name,g4,FormatTimeString(travelTime),el..cM)end;if VectorToTarget and not IntoOrbit then cY[#cY+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],fS,fX+30,VectorStatus)end;cY[#cY+1]="</g>"end;function DisplayOrbitScreen(cY)if orbit~=nil and ap<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local g5=OrbitMapX;local g6=OrbitMapY;local g7=OrbitMapSize;local g8=4;g6=g6+g8;local g9=15;local cb=g5+g7+g5/2+g8;local cc=g6+g7/2+5+g8;local ga,gb,gc,gd;ga=g7/4;gd=0;cY[#cY+1]=[[<g class="pbright txtorb txtmid">]]cY[#cY+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',g7+g5*2,g7+g6,g8,g8)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gc=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ga*2)gb=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gc*(1-orbit.eccentricity)gd=ga-orbit.periapsis.altitude/gc-planet.radius/gc;local ge=""if orbit.periapsis.altitude<=0 then ge='redout'end;cY[#cY+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ge,g5+g7/2+gd+g8,g6+g7/2+g8,ga,gb)cY[#cY+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',g5+g7/2+g8,g6+g7/2+g8,planet.radius/gc)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cY[#cY+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cb-35,cc-5,g5+g7/2+ga+gd,cc-5)cY[#cY+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],cb,cc)cc=cc+g9;local el,cM=cJ(orbit.apoapsis.altitude)cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,el..cM)cc=cc+g9;cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,FormatTimeString(orbit.timeToApoapsis))cc=cc+g9;cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,getSpeedDisplayString(orbit.apoapsis.speed))end;cc=g6+g7/2+5+g8;cb=g5-g5/2+10+g8;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cY[#cY+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cb+35,cc-5,g5+g7/2-ga+gd,cc-5)cY[#cY+1]=d([[<text x="%f" y="%f">Periapsis</text>]],cb,cc)cc=cc+g9;local el,cM=cJ(orbit.periapsis.altitude)cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,el..cM)cc=cc+g9;cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,FormatTimeString(orbit.timeToPeriapsis))cc=cc+g9;cY[#cY+1]=d([[<text x="%f" y="%f">%s</text>]],cb,cc,getSpeedDisplayString(orbit.periapsis.speed))end;cY[#cY+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],g5+g7/2+g8,20+g8,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gf=orbit.timeToApoapsis/orbit.period*2*math.pi;local gg=ga*math.cos(gf)local gh=gb*math.sin(gf)cY[#cY+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',g5+g7/2+gg+gd+g8,g6+g7/2+gh+g8)end;cY[#cY+1]=[[</g>]]end end;function getSpeedDisplayString(c4)return c(s(c4*3.6,0)+0.5).." km/h"end;function FormatTimeString(gi)local gj=0;local gk=0;local gl=0;if gi<60 then gi=c(gi)elseif gi<3600 then gj=c(gi/60)gi=c(gi%60)elseif gi<86400 then gk=c(gi/3600)gj=c(gi%3600/60)else gl=c(gi/86400)gk=c(gi%86400/3600)end;if gl>0 then return gl.."d "..gk.."h "elseif gk>0 then return gk.."h "..gj.."m "elseif gj>0 then return gj.."m "..gi.."s"elseif gi>0 then return gi.."s"else return"0s"end end;function getMagnitudeInDirection(ee,gm)ee=vec3(ee)gm=vec3(gm):normalize()local bM=ee*gm;return bM.x+bM.y+bM.z end;function GetAutopilotMaxMass()local gn=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return gn end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bg=core.getWorldVelocity()local c4=vec3(bg):len()local go=unit.getThrottle()/100;if AtmoSpeedAssist then go=B end;local gp,gq=ba.computeDistanceAndTime(vec3(bg):len(),MaxGameVelocity,m(),Nav:maxForceForward()*go,warmup,0)local a2,a3;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,gr;if not TurnBurn and c4>0 then _,gr=GetAutopilotBrakeDistanceAndTime(c4)else _,gr=GetAutopilotTBBrakeDistanceAndTime(c4)end;local gs=0;local gt=0;if AutopilotCruising or not Autopilot and c4>5 then gt=ba.computeTravelTime(c4,0,AutopilotDistance)elseif a2+gp<AutopilotDistance then gs=AutopilotDistance-(a2+gp)gt=ba.computeTravelTime(8333.0556,0,gs)else local gu=(AutopilotDistance-a2)/gp;gp=AutopilotDistance-a2;gq=gq*gu end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gt elseif AutopilotBraking then return gr elseif AutopilotCruising then return gt+gr else return gq+a3+gt end end;function GetAutopilotBrakeDistanceAndTime(c4)if not ao then c1()return ba.computeDistanceAndTime(c4,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return ba.computeDistanceAndTime(c4,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(c4)c1()return ba.computeDistanceAndTime(c4,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;function hoverDetectGround()local gv=-1;local gw=-1;if vBooster then gv=vBooster.distance()end;if hover then gw=hover.distance()end;if gv~=-1 and gw~=-1 then if gv<gw then return gv else return gw end elseif gv~=-1 then return gv elseif gw~=-1 then return gw else return-1 end end;function AboveGroundLevel()local gx=-1;local gy=hoverDetectGround()if telemeter_1 then gx=telemeter_1.getDistance()end;if gy~=-1 and gx~=-1 then if gy<gx then return gy else return gx end elseif gy~=-1 then return gy else return gx end end;function tablelength(gz)local gA=0;for _ in pairs(gz)do gA=gA+1 end;return gA end;function BeginProfile(gB)ProfileTimeStart=r()end;function EndProfile(gB)local gC=r()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gC;ProfileCount=ProfileCount+1;if gC>ProfileTimeMax then ProfileTimeMax=gC end;if gC<ProfileTimeMin then ProfileTimeMin=gC end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gD=ProfileTimeSum;local gE=ProfileTimeSum/ProfileCount;local gF=ProfileTimeMin;local gG=ProfileTimeMax;local gH=ProfileCount;system.print(d("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gD,gE,gF,gG,gH))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gI=radar_1.getEntries()local gJ=radar_1.getData()local gK=b_(1770)local gL=c0(330)if#gI>0 then local gM=gJ:find('identifiedConstructs":%[%]')if gM==nil and perisPanelID==nil then ah=1;cZ()end;if gM~=nil and perisPanelID~=nil then cZ()end;if radarPanelID==nil then cZ()end;af=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gK,gL,#gI)local gN={}for bK,bL in pairs(gI)do if radar_1.hastringmatchingTransponder(bL)==1 then table.insert(gN,bL)end end;if#gN>0 then local cc=c0(15)local cb=b_(1370)af=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,cb,cc)for bK,bL in pairs(gN)do cc=cc+20;af=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,cb,cc,radar_1.getConstructName(bL))end end else local gO;gO=gJ:find('worksInEnvironment":false')if gO then af=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gK,gL)else af=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gK,gL)end;if radarPanelID~=nil then ah=0;cZ()end end end end;function DisplayMessage(cY,el)if el~="empty"then cY[#cY+1]=[[<text class="msg" x="50%%" y="310" >]]for gP in string.gmatch(el,"([^\n]+)")do cY[#cY+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],gP)end;cY[#cY+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bW=r()local bg=vec3(core.getWorldVelocity())local eE=vec3(bg):len()local gQ=bW-as;if eE>1.38889 then eE=eE/1000;local gR=eE*(bW-as)TotalDistanceTravelled=TotalDistanceTravelled+gR;a7=a7+gR end;a8=a8+gQ;TotalFlightTime=TotalFlightTime+gQ;as=bW end;function composeAxisAccelerationFromTargetSpeedV(gS,gT)local gU=vec3()local gV=vec3()if gS==axisCommandId.longitudinal then gU=vec3(core.getConstructOrientationForward())gV=vec3(core.getConstructWorldOrientationForward())elseif gS==axisCommandId.vertical then gU=vec3(core.getConstructOrientationUp())gV=vec3(core.getConstructWorldOrientationUp())elseif gS==axisCommandId.lateral then gU=vec3(core.getConstructOrientationRight())gV=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gW=vec3(core.getWorldGravity())local gX=gW:dot(gV)local gY=vec3(core.getWorldAirFrictionAcceleration())local gZ=gY:dot(gV)local g_=vec3(core.getVelocity())local h0=g_:dot(gU)local h1=gT*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(h1-h0)local h2=targetSpeedPID2:get()local h3=(h2-gZ-gX)*gV;return h3 end;function composeAxisAccelerationFromTargetSpeed(gS,gT)local gU=vec3()local gV=vec3()if gS==axisCommandId.longitudinal then gU=vec3(core.getConstructOrientationForward())gV=vec3(core.getConstructWorldOrientationForward())elseif gS==axisCommandId.vertical then gU=vec3(core.getConstructOrientationUp())gV=vec3(core.getConstructWorldOrientationUp())elseif gS==axisCommandId.lateral then gU=vec3(core.getConstructOrientationRight())gV=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gW=vec3(core.getWorldGravity())local gX=gW:dot(gV)local gY=vec3(core.getWorldAirFrictionAcceleration())local gZ=gY:dot(gV)local g_=vec3(core.getVelocity())local h0=g_:dot(gU)local h1=gT*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(h1-h0)local h2=targetSpeedPID:get()local h3=(h2-gZ-gX)*gV;return h3 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b3=Atlas()for bK,bL in pairs(b3[0])do if aH==nil or bL.center.x<aH then aH=bL.center.x end;if aI==nil or bL.center.x>aI then aI=bL.center.x end;if aJ==nil or bL.center.y<aJ then aJ=bL.center.y end;if aK==nil or bL.center.y>aK then aK=bL.center.y end end;b4=""local h4=1.1*(aI-aH)/1920;local h5=1.4*(aK-aJ)/1080;for bK,bL in pairs(b3[0])do local cb=960+bL.center.x/h4;local cc=540+bL.center.y/h5;b4=b4 ..'<circle cx="'..cb..'" cy="'..cc..'" r="'..bL.radius/h4*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bL.name,"Moon")and not p(bL.name,"Sanctuary")and not p(bL.name,"Space")then b4=b4 .."<text x='"..cb.."' y='"..cc+bL.radius/h4*30+20 .."' font-size='28' fill="..av.." text-anchor='middle' font-family='Montserrat'>"..bL.name.."</text>"end end;local cz=vec3(core.getConstructWorldPos())local cb=960+cz.x/h4;local cc=540+cz.y/h5;b4=b4 ..'<circle cx="'..cb..'" cy="'..cc..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='"..cb.."' y='"..cc-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b4=b4 ..[[</svg>]]b5=h4;b6=h5;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b4)local cz=vec3(core.getConstructWorldPos())local cb=960+cz.x/h4;local cc=540+cz.y/h5;b4='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='80' y='105' font-size='18' fill="..av.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b7=screen_2.addContent((cb-80)/19.20,(cc-80)/10.80,b4)end end;function PlanetRef()local function h6(h7)return type(h7)=='number'end;local function h8(h7)return type(tonumber(h7))=='number'end;local function h9(ha)return type(ha)=='table'end;local function hb(hc)return type(hc)=='string'end;local function hd(bL)return h9(bL)and h6(bL.x and bL.y and bL.z)end;local function he(hf)return h9(hf)and h6(hf.latitude and hf.longitude and hf.altitude and hf.bodyId and hf.systemId)end;local hg=math.pi/180;local hh=180/math.pi;local epsilon=1e-10;local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cA='::pos{'..t..','..t..','..t..','..t..','..t..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local hi=utils.clamp;local function cm(cn,co)if cn==0 then return math.abs(co)<1e-09 end;if co==0 then return math.abs(cn)<1e-09 end;return math.abs(cn-co)<math.max(math.abs(cn),math.abs(co))*epsilon end;local function hj(h7)local bM=string.gsub(string.reverse(d('%.4f',h7)),'^0*%.?','')return bM==''and'0'or string.reverse(bM)end;local function hk(hl)if hd(hl)then return d('{x=%.3f,y=%.3f,z=%.3f}',hl.x,hl.y,hl.z)end;if h9(hl)and not getmetatable(hl)then local hm={}local hn=next(hl)if type(hn)=='nil'or hn==1 then hm=hl else for bK,bL in pairs(hl)do local e_=hk(bL)if type(bK)=='number'then table.insert(hm,d('[%s]=%s',bK,e_))else table.insert(hm,d('%s=%s',bK,e_))end end end;return d('{%s}',table.concat(hm,','))end;if hb(hl)then return d("'%s'",hl:gsub("'",[[\']]))end;return tostring(hl)end;local ho={}ho.__index=ho;ho.__tostring=function(hl,hp)local hq={}for bK in pairs(hl)do table.insert(hq,bK)end;table.sort(hq)local hm={}for _,bK in ipairs(hq)do local e_=hk(hl[bK])if type(bK)=='number'then table.insert(hm,d('[%s]=%s',bK,e_))else table.insert(hm,d('%s=%s',bK,e_))end end;if hp then return d('%s%s',hp,table.concat(hm,',\n'..hp))end;return d('{%s}',table.concat(hm,','))end;ho.__eq=function(hr,hs)return hr.planetarySystemId==hs.planetarySystemId and hr.bodyId==hs.bodyId and cm(hr.radius,hs.radius)and cm(hr.center.x,hs.center.x)and cm(hr.center.y,hs.center.y)and cm(hr.center.z,hs.center.z)and cm(hr.GM,hs.GM)end;local function ht(cB,cC,hu,cr,hv)assert(h8(cB),'Argument 1 (planetarySystemId) must be a number:'..type(cB))assert(h8(cC),'Argument 2 (bodyId) must be a number:'..type(cC))assert(h8(hu),'Argument 3 (radius) must be a number:'..type(hu))assert(h9(cr),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cr))assert(h8(hv),'Argument 5 (GM) must be a number:'..type(hv))return setmetatable({planetarySystemId=tonumber(cB),bodyId=tonumber(cC),radius=tonumber(hu),center=vec3(cr),GM=tonumber(hv)},ho)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(hw)return d('::pos{%d,%d,%s,%s,%s}',hw.systemId,hw.bodyId,hj(hw.latitude*hh),hj(hw.longitude*hh),hj(hw.altitude))end;MapPosition.__eq=function(hr,hs)return hr.bodyId==hs.bodyId and hr.systemId==hs.systemId and cm(hr.latitude,hs.latitude)and cm(hr.altitude,hs.altitude)and(cm(hr.longitude,hs.longitude)or cm(hr.latitude,math.pi/2)or cm(hr.latitude,-math.pi/2))end;local function hx(hy,cC,cv,cw,cu)local cB=hy;if hb(hy)and not cw and not cu and not cC and not cv then cB,cC,cv,cw,cu=p(hy,cA)assert(cB,'Argument 1 (position string) is malformed.')else assert(h8(cB),'Argument 1 (systemId) must be a number:'..type(cB))assert(h8(cC),'Argument 2 (bodyId) must be a number:'..type(cC))assert(h8(cv),'Argument 3 (latitude) must be in degrees:'..type(cv))assert(h8(cw),'Argument 4 (longitude) must be in degrees:'..type(cw))assert(h8(cu),'Argument 5 (altitude) must be in meters:'..type(cu))end;cB=tonumber(cB)cC=tonumber(cC)cv=tonumber(cv)cw=tonumber(cw)cu=tonumber(cu)if cC==0 then return setmetatable({latitude=cv,longitude=cw,altitude=cu,bodyId=cC,systemId=cB},MapPosition)end;return setmetatable({latitude=hg*hi(cv,-90,90),longitude=hg*(cw%360),altitude=cu,bodyId=cC,systemId=cB},MapPosition)end;local hz={}hz.__index=hz;hz.__tostring=function(hl,hp)local hA=hp and hp..'  'local hB={}local hq={}for bK in pairs(hl)do table.insert(hq,bK)end;table.sort(hq)for _,hC in ipairs(hq)do bdy=hl[hC]local hD=ho.__tostring(bdy,hA)if hp then table.insert(hB,d('[%s]={\n%s\n%s}',hC,hD,hp))else table.insert(hB,d('  [%s]=%s',hC,hD))end end;if hp then return d('\n%s%s%s',hp,table.concat(hB,',\n'..hp),hp)end;return d('{\n%s\n}',table.concat(hB,',\n'))end;local function hE(hF)local b3={}local pid;for _,bL in pairs(hF)do local cR=bL.planetarySystemId;if type(cR)~='number'then error('Invalid planetary system ID: '..tostring(cR))elseif pid and cR~=pid then error('Mistringmatch planetary system IDs: '..cR..' and '..pid)end;local hG=bL.bodyId;if type(hG)~='number'then error('Invalid body ID: '..tostring(hG))elseif b3[hG]then error('Duplicate body ID: '..tostring(hG))end;setmetatable(bL.center,getmetatable(vec3.unit_x))b3[hG]=setmetatable(bL,ho)pid=cR end;return setmetatable(b3,hz)end;b8={}local function hH(hF)return setmetatable({galaxyAtlas=hF or{}},b8)end;b8.__index=function(ha,i)if type(i)=='number'then local system=ha.galaxyAtlas[i]return hE(system)end;return rawget(b8,i)end;b8.__pairs=function(hl)return function(ha,bK)local hI,nv=next(ha,bK)return hI,nv and hE(nv)end,hl.galaxyAtlas,nil end;b8.__tostring=function(hl)local hJ={}for _,hK in pairs(hl or{})do local hL=hK:getPlanetarySystemId()local hM=hz.__tostring(hK,'    ')table.insert(hJ,d('  [%s]={%s\n  }',hL,hM))end;return d('{\n%s\n}\n',table.concat(hJ,',\n'))end;b8.BodyParameters=ht;b8.MapPosition=hx;b8.PlanetarySystem=hE;function b8.createBodyParameters(hN,cC,hO,hP,hQ,hR,hS)assert(h8(hN),'Argument 1 (planetarySystemId) must be a number:'..type(hN))assert(h8(cC),'Argument 2 (bodyId) must be a number:'..type(cC))assert(h8(hO),'Argument 3 (surfaceArea) must be a number:'..type(hO))assert(h9(hP),'Argument 4 (aPosition) must be an array or vec3:'..type(hP))assert(h9(hQ),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(hQ))assert(h8(hR),'Argument 6 (altitude) must be in meters:'..type(hR))assert(h8(hS),'Argument 7 (gravityAtPosition) must be number:'..type(hS))local hu=math.sqrt(hO/4/math.pi)local ae=hu+hR;local hT=vec3(hP)+ae*vec3(hQ)local hv=hS*ae*ae;return ht(hN,cC,hu,hT,hv)end;b8.isMapPosition=he;function b8:getPlanetarySystem(hy)if i==nil then i=0 end;if nv==nil then nv=0 end;local hN=hy;if he(hy)then hN=hy.systemId end;if type(hN)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=hz then system=hE(system)end;return system end end end;function hz:castIntersections(hU,gm,hV,hW)local hV=hV or function(g2)return 1.05*g2.radius end;local hX={}if hW then for _,i in ipairs(hW)do hX[i]=self[i]end else hW={}for bK,g2 in pairs(self)do table.insert(hW,bK)hX[bK]=g2 end end;local function hY(hZ,h_)local i0=hX[hZ].center-hU;local i1=hX[h_].center-hU;return i0:len()<i1:len()end;table.sort(hW,hY)local i2=gm:normalize()for i,cR in ipairs(hW)do local g2=hX[cR]local i3=g2.center-hU;local hu=hV(g2)local i4=i3:dot(i2)local i5=i4^2-(i3:len2()-hu^2)if i5>=0 then local i6=math.sqrt(i5)local g0=i4+i6;local g1=i4-i6;if g1>0 then return g2,g0,g1 elseif g0>0 then return g2,g0,nil end end end;return nil,nil,nil end;function hz:closestBody(i7)assert(type(i7)=='table','Invalid coordinates.')local i8,g2;local i9=vec3(i7)for _,ia in pairs(self)do local ib=(ia.center-i9):len2()if(not g2 or ib<i8)and ia.name~="Space"then g2=ia;i8=ib end end;return g2 end;function hz:convertToBodyIdAndWorldCoordinates(hy)local ic=hy;if hb(hy)then ic=hx(hy)end;if ic.bodyId==0 then return 0,vec3(ic.latitude,ic.longitude,ic.altitude)end;local ia=self:getBodyParameters(ic)if ia then return ic.bodyId,ia:convertToWorldCoordinates(ic)end end;function hz:getBodyParameters(hy)local cC=hy;if he(hy)then cC=hy.bodyId end;assert(h8(cC),'Argument 1 (bodyId) must be a number:'..type(cC))return self[cC]end;function hz:getPlanetarySystemId()local _,bL=next(self)return bL and bL.planetarySystemId end;function ho:convertToMapPosition(cr)assert(h9(cr),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cr))local cs=vec3(cr)if self.bodyId==0 then return setmetatable({latitude=cs.x,longitude=cs.y,altitude=cs.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ct=cs-self.center;local ae=ct:len()local cu=ae-self.radius;local cv=0;local cw=0;if not cm(ae,0)then local cx=math.atan(ct.y,ct.x)cw=cx>=0 and cx or 2*math.pi+cx;cv=math.pi/2-math.acos(ct.z/ae)end;return setmetatable({latitude=cv,longitude=cw,altitude=cu,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function ho:convertToWorldCoordinates(hy)local ic=hb(hy)and hx(hy)or hy;if ic.bodyId==0 then return vec3(ic.latitude,ic.longitude,ic.altitude)end;assert(he(ic),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ic.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ic.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cD=math.cos(ic.latitude)return self.center+(self.radius+ic.altitude)*vec3(cD*math.cos(ic.longitude),cD*math.sin(ic.longitude),math.sin(ic.latitude))end;function ho:getAltitude(cr)return(vec3(cr)-self.center):len()-self.radius end;function ho:getDistance(cr)return(vec3(cr)-self.center):len()end;function ho:getGravity(cr)local id=self.center-vec3(cr)local ie=id:len2()return self.GM/ie*id/math.sqrt(ie)end;return setmetatable(b8,{__call=function(_,...)return hH(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function hb(hc)return type(hc)=='string'end;local function h9(ha)return type(ha)=='table'end;local function cm(cn,co)if cn==0 then return math.abs(co)<1e-09 end;if co==0 then return math.abs(cn)<1e-09 end;return math.abs(cn-co)<math.max(math.abs(cn),math.abs(co))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cu)assert(self.body)local ae=cu+self.body.radius;if not cm(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(hy,bg)assert(self.body)assert(h9(hy)or hb(hy))assert(h9(bg))local cz=(hb(hy)or PlanetRef.isMapPosition(hy))and self.body:convertToWorldCoordinates(hy)or vec3(hy)local bL=vec3(bg)local ig=cz-self.body.center;local i1=bL:len2()local ih=ig:len()local ii=self.body.GM;local ij=((i1-ii/ih)*ig-ig:dot(bL)*bL)/ii;local cn=ii/(2*ii/ih-i1)local ik=ij:len()local i2=ij:normalize()local il=cn*(1-ik)local im=cn*(1+ik)local io=il*i2+self.body.center;local ip=ik<=1 and-im*i2+self.body.center or nil;local iq=math.sqrt(cn*ii*(1-ik*ik))local ir=ip and 2*math.pi*math.sqrt(cn^3/ii)local is=math.acos(ij:dot(ig)/(ik*ih))if ig:dot(bL)<0 then is=-(is-2*math.pi)end;local it=math.acos((math.cos(is)+ik)/(1+ik*math.cos(is)))local iu=it;if iu<0 then iu=iu+2*math.pi end;local iv=iu-ik*math.sin(iu)local iw=0;local ix=0;local iy=0;if ir~=nil then iw=iv/(2*math.pi/ir)ix=ir-iw;iy=ix+ir/2;if is-math.pi>0 then ix=iw;iy=ix+ir/2 end;if iy>ir then iy=iy-ir end end;return{periapsis={position=io,speed=iq/il,circularOrbitSpeed=math.sqrt(ii/il),altitude=il-self.body.radius},apoapsis=ip and{position=ip,speed=iq/im,circularOrbitSpeed=math.sqrt(ii/im),altitude=im-self.body.radius},currentVelocity=bL,currentPosition=cz,eccentricity=ik,period=ir,eccentricAnomaly=it,meanAnomaly=iv,timeToPeriapsis=ix,timeToApoapsis=iy}end;local function iz(iA)local ia=PlanetRef.BodyParameters(iA.planetarySystemId,iA.bodyId,iA.radius,iA.center,iA.GM)return setmetatable({body=ia},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iz(...)end})end;function Kinematics()local ba={}local iB=30000000/3600;local iC=iB*iB;local iD=100;local function iE(bL)return 1/math.sqrt(1-bL*bL/iC)end;function ba.computeAccelerationTime(iF,iG,iH)local iI=iB*math.asin(iF/iB)return(iB*math.asin(iH/iB)-iI)/iG end;function ba.computeDistanceAndTime(iF,iH,iJ,iK,iL,iM)iL=iL or 0;iM=iM or 0;local iN=iF<=iH;local iO=iK*(iN and 1 or-1)/iJ;local iP=-iM/iJ;local iQ=iO+iP;if iN and iQ<=0 or not iN and iQ>=0 then return-1,-1 end;local iR,iS=0,0;if iO~=0 and iL>0 then local iI=math.asin(iF/iB)local iT=math.pi*(iO/2+iP)local iU=iO*iL;local iV=iB*math.pi;local bL=function(ha)local dJ=(iT*ha-iU*math.sin(math.pi*ha/2/iL)+iV*iI)/iV;local iW=math.tan(dJ)return iB*iW/math.sqrt(iW*iW+1)end;local iX=iN and function(hc)return hc>=iH end or function(hc)return hc<=iH end;iS=2*iL;if iX(bL(iS))then local iY=0;while math.abs(iS-iY)>0.5 do local ha=(iS+iY)/2;if iX(bL(ha))then iS=ha else iY=ha end end end;local iZ=iF;local i_=iS/iD;for j0=1,iD do local c4=bL(j0*i_)iR=iR+(c4+iZ)*i_/2;iZ=c4 end;if iS<2*iL then return iR,iS end;iF=iZ end;local iI=iB*math.asin(iF/iB)local bG=(iB*math.asin(iH/iB)-iI)/iQ;local j1=iC*math.cos(iI/iB)/iQ;local ae=j1-iC*math.cos((iQ*bG+iI)/iB)/iQ;return ae+iR,bG+iS end;function ba.computeTravelTime(iF,iG,ae)if ae==0 then return 0 end;if iG>0 then local iI=iB*math.asin(iF/iB)local j1=iC*math.cos(iI/iB)/iG;return(iB*math.acos(iG*(j1-ae)/iC)-iI)/iG end;if iF==0 then return-1 end;assert(iF>0,'Acceleration and initial speed are both zero.')return ae/iF end;function ba.lorentz(bL)return iE(bL)end;return ba end;function safeZone(j2)local hu=500000;local j3,j4,j5=math.huge;local j6=false;local j7=vec3({13771471,7435803,-128971})local j8=18000000;j3=vec3(j2):dist(j7)if j3<j8 then return true,math.abs(j3-j8),"Safe Zone",0 end;j4=vec3(j2):dist(vec3(planet.center))if j4<hu then j6=true end;if math.abs(j4-hu)<math.abs(j3-j8)then return j6,math.abs(j4-hu),planet.name,planet.bodyId else return j6,math.abs(j3-j8),"Safe Zone",0 end end;function cmdThrottle(e_,j9)if j9==nil then j9=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not j9 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,e_)B=s(e_*100,0)end;function cmdCruise(e_,j9)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not j9 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,e_)end;function SaveDataBank(ja)if dbHud_1 then if not a9 then for bK,bL in pairs(b)do dbHud_1.setStringValue(bL,f(_G[bL]))if ja and dbHud_2 then dbHud_2.setStringValue(bL,f(_G[bL]))end end;for bK,bL in pairs(a)do dbHud_1.setStringValue(bL,f(_G[bL]))if ja and dbHud_2 then dbHud_2.setStringValue(bL,f(_G[bL]))end end;system.print("Saved Variables to Datacore")if ja and dbHud_2 then Y="Databank copied.  Remove copy when ready."end end end end;function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})bN()coroutine.yield()bR()coroutine.yield()bY()SetupButtons()coroutine.yield()SetupAtlas()b8=PlanetRef()b9=b8(Atlas())ba=Kinematics()bc=Keplers()cl()ch()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ap>0 or ap==0 and aq<10000)then for _,bL in pairs(door)do bL.toggle()end end;if switch then for _,bL in pairs(switch)do bL.toggle()end end;if forcefield and(ap>0 or ap==0 and aq<10000)then for _,bL in pairs(forcefield)do bL.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(jb)if jb=="tenthSecond"then if ap>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then B=1;Nav.control.cancelCurrentControlMasterMode()F=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then d0()end;if AutopilotTargetName~=nil then local jc=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if jc and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(bh)a4,a5=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(bh)a4,a5=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local el,cM=cJ(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..el..'", "unit":"'..cM..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')el,cM=cJ(a2)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..el..'", "unit":"'..cM..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')el,cM=cJ(a4)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..el..'", "unit":"'..cM..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a5)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')el,cM=cJ(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",el)..'", "unit":"'..cM..'"}')if ap>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else d1()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif jb=="oneSecond"then am=false;c1(nil,true)updateDistance()updateRadar()updateWeapons()local cY={}local ew=GetFlightStyle()DrawOdometer(cY,a7,TotalDistanceTravelled,ew,a8)if ShouldCheckDamage then CheckDamage(cY)end;ag=table.concat(cY,"")collectgarbage("collect")elseif jb=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bM=json.decode(dbHud_1.getStringValue("SavedLocations"))if bM~=nil then _G["SavedLocations"]=bM;local cU=-1;local cH;for bK,bL in pairs(SavedLocations)do if bL.name and bL.name=="SatNav Location"then cU=bK;break end end;if cU~=-1 then cH=SavedLocations[cU]cU=-1;for bK,bL in pairs(b3[0])do if bL.name and bL.name=="SatNav Location"then cU=bK;break end end;if cU>-1 then b3[0][cU]=cH end;ch()Y=cH.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif jb=="msgTick"then local cY={}DisplayMessage(cY,"empty")Y="empty"unit.stopTimer("msgTick")ad=3 elseif jb=="animateTick"then be=true;bd=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif jb=="hudTick"then local cY={}HUDPrologue(cY)if showHud then UpdateHud(cY)else DisplayOrbitScreen(cY)DrawWarnings(cY)end;HUDEpilogue(cY)cY[#cY+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if Y~="empty"then DisplayMessage(cY,Y)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then cX(cY)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cY)if screen_1.getMouseState()==1 then CheckButtons()end;cY[#cY+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,ab,ac)elseif system.isViewLocked()==0 then if n()==1 and X then SetButtonContains()DrawButtons(cY)if not bd and not be then local jd=table.concat(cY,"")cY={}cY[#cY+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cY[#cY+1]=b4;cY[#cY+1]=jd;cY[#cY+1]="</body>"bd=true;cY[#cY+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cY,"")system.setScreen(content)elseif be then local jd=table.concat(cY,"")cY={}cY[#cY+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cY[#cY+1]=b4;cY[#cY+1]=jd;cY[#cY+1]="</body>"end;if not bd then cY[#cY+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,ab,ac)end else CheckButtons()end else if not X and n()==0 then CheckButtons()if ae>DeadZone then if DisplayDeadZone then DrawCursorLine(cY)end end else SetButtonContains()DrawButtons(cY)end;cY[#cY+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,ab,ac)end;cY[#cY+1]=[[</svg></body>]]content=table.concat(cY,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif jb=="apTick"then ao=h()>0;ap=h()bG=r()local je=bG-bm;bm=bG;local db,dc,jf,de=da()local jg=vec3(core.getConstructWorldPos())local ex=getRoll(de,db,dc)local ey=ex/180*math.pi;local ez=math.cos(ey)local eA=math.sin(ey)local dg=getPitch(de,db,dc)local jh=getPitch(de,db,dc*ez+jf*eA)local ji=-math.deg(signedRotationAngle(jf,bg,db))local jj=math.deg(signedRotationAngle(dc,bg,db))bl=ao and ji<-YawStallAngle or ji>YawStallAngle or jj<-PitchStallAngle or jj>PitchStallAngle;bj=system.getMouseDeltaX()bk=system.getMouseDeltaY()if InvertMouse and not X then bk=-bk end;R=0;V=0;Q=0;bg=vec3(core.getWorldVelocity())bh=vec3(bg):len()sys=b9[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bc(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bg)al=hoverDetectGround()local c2=planet:getGravity(core.getConstructWorldPos()):len()*m()bn=0;bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]z,A,_,_=safeZone(jg)if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if n()==1 and X then if not bd then ab=ab+bj;ac=ac+bk end else ab=0;ac=0 end else ab=ab+bj;ac=ac+bk;ae=math.sqrt(ab*ab+ac*ac)if not X and n()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then R=R-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then R=R-(ab+DeadZone)*MouseXSensitivity else R=0 end;if ac>0 and ac>DeadZone then Q=Q-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then Q=Q-(ac+DeadZone)*MouseYSensitivity else Q=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;Q=(-utils.smoothstep(bk,-100,100)+0.5)*2*M;R=(-utils.smoothstep(bj,-100,100)+0.5)*2*N else ab=0;ac=0 end end end;local jk=bh>8334;if bh>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not jk then Y="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end;if not jk and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then dm()end end;LastIsWarping=jk;if ao and ap>0.09 then if bh>bq/3.6 and not AtmoSpeedAssist and not au then BrakeIsOn=true;au=true elseif not AtmoSpeedAssist and au then if bh<bq/3.6 then BrakeIsOn=false;au=false end end end;if BrakeIsOn then U=1 else U=0 end;aq=core.getAltitude()if aq==0 then aq=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local jl=false;if CustomTarget~=nil then jl=AlignToWorldVector(CustomTarget.position-jg,0.01)else jl=AlignToWorldVector(vec3(bg),0.01)end;bf=true;if jl and(math.abs(ex)<2 or math.abs(jh)>85)and bh>=bq/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;L=true;ai=false;ak=true;Autopilot=false;BeginReentry()elseif ao and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bq))B=0 end elseif bh>K then AlignToWorldVector(vec3(bg),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bh>K then AlignToWorldVector(-vec3(bg))end end;if not ProgradeIsOn and ai then if ap==0 then L=true;BeginReentry()ai=false;ak=true else ai=false;dm()end end;local dl=vec3(core.getWorldVertical())*-1;local f1=bg.x*dl.x+bg.y*dl.y+bg.z*dl.z;if ak and CustomTarget~=nil and(aq<HoldAltitude+200 and aq>HoldAltitude-200)and bh*3.6>bq-100 and math.abs(f1)<20 and ap>=0.1 and(CustomTarget.position-jg):len()>2000+aq then dm()ak=false end;if VertTakeOff then bf=true;if f1<-30 then Y="Unable to achieve lift. Safety Landing."aa=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if aq<antigrav.getBaseAltitude()-100 then br=0;aa=15;BrakeIsOn=false elseif f1>0 then BrakeIsOn=true;aa=0 elseif f1<-30 then BrakeIsOn=true;aa=15 elseif aq>=antigrav.getBaseAltitude()then BrakeIsOn=true;aa=0;VertTakeOff=false;Y="Takeoff complete. Singularity engaged"end else if ap>0.08 then br=0;BrakeIsOn=false;aa=20 elseif ap<0.08 and ap>0 then BrakeIsOn=false;if bD then br=0;aa=20 else aa=0;br=36;cmdCruise(3500)end else bf=autoRollPreference;IntoOrbit=true;bB=false;CancelIntoOrbit=false;bv=false;bt=nil;bu=nil;if bA==nil then bA=planet end;VertTakeOff=false end end;if br~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jm=utils.clamp(br-jh,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jm)local jn=utils.clamp(vTpitchPID:get(),-1,1)Q=jn end end;if IntoOrbit then if bA==nil then if VectorToTarget then bA=a6 else bA=planet end end;if not by then if bA.hasAtmosphere then bz=math.floor(bA.radius*(TargetOrbitRadius-1)+bA.noAtmosphericDensityAltitude)else bz=math.floor(bA.radius*(TargetOrbitRadius-1)+bA.surfaceMaxAltitude)end;by=true end;if AltitudeHold or VectorToTarget then if not aj then bz=s(HoldAltitude,1)bv=true;AltitudeHold=false end;if VectorToTarget then bx.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jo,jp=cJ(bz,2)local jq=jo..jp;local jr,js=bc(bA):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bA.center):len()-bA.radius)local jt=ex;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and aq>bz*0.9 and aq<bz*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bz*0.99 and orbit.apoapsis.altitude>=bz*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bB then if bB then BrakeIsOn=false;B=0;cmdThrottle(0)bB=true;bt=0;if bx.VectorToTarget then local ei=CustomTarget.position-jg;local a2,_=ba.computeDistanceAndTime(bh,bq/3.6,m(),0,0,LastMaxBrake)if bg:normalize():dot(ei:normalize())>0.5 and ei:len()>15000+a2+aq then bs="Orbiting to Target"else Y="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;L=true;ak=true;BeginReentry()bx.VectorToTarget=false end end;if not bx.VectorToTarget then bs=nil;bw=false;by=false;bA=nil;bf=autoRollPreference;if not ak then Y="Orbit established"end;bx.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bv=false;bt=nil;bu=nil;bA=nil;bB=false;bF=0 end else bF=bF+1;if bF>=2 then bB=true end end else bs="Adjusting Orbit - OrbitHeight: "..jq;bw=true;cmdCruise(js*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local ju=f1;local jv=aq-bz;local jw=math.abs(jv)if f1<10 and math.abs(jh)<10 and jw<100 then ju=f1*2 end;if ju<10 and math.abs(jh)<10 and jw<100 then ju=ju*2 end;if ju<5 and math.abs(jh)<5 and jw<100 then ju=ju*4 end;VSpdPID:inject(ju)bt=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jv)bt=utils.clamp(bt-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jx=2.75;local jy=math.abs(q(jr*jx))local jz=jy%50;if jz>0 then jy=jy-jz+50 end;BrakeIsOn=false;if not bv then local jA=false;local jB=false;if aq<bz then bs="Aligning to orbital path - OrbitHeight: "..jq else bs="Aligning to orbital point - OrbitHeight: "..jq end;bt=0;bu=0;if jh<=bt+1 and jh>=bt-1 then jA=true else jA=false end;if jt<=bu+1 and jt>=bu-1 then jB=true else jB=false end;if jA and jB then bt=nil;bu=nil;bv=true end else if aq<bz*0.8 then bs="Escaping planet gravity - OrbitHeight: "..jq;bt=utils.map(f1,200,0,-15,80)elseif aq>=bz*0.8 and aq<bz*1.15 then bs="Approaching orbital corridor - OrbitHeight: "..jq;jy=jy*0.75;bt=utils.map(f1,100,-100,-15,65)elseif aq>=bz*1.15 and aq<bz*1.5 then bs="Approaching orbital corridor - OrbitHeight: "..jq;jy=jy*0.75;if f1<0 or bw then bt=utils.map(aq,bz*1.5,bz*1.01,-30,0)else bt=utils.map(aq,bz*0.99,bz*1.5,0,30)end elseif aq>bz*1.5 then bs="Reentering orbital corridor - OrbitHeight: "..jq;bt=utils.map(f1,100,-100,-65,0)jy=jy*0.75 end end;cmdCruise(math.floor(jy))end;if bt~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jC=bt-jh;OrbitPitchPID:inject(jC)local jD=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)Q=jD end;if bu~=nil then if jh<85 then local jE=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jE*0.01,0,jE*0.1)end;local jF=bu-jt;OrbitRollPID:inject(jF)local jG=utils.clamp(OrbitRollPID:get(),-0.5,0.5)V=jG end end elseif CancelIntoOrbit then by=false;bA=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and ap==0 and not ai then local jH,jI=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jJ=(CustomTarget.position-a6.center):normalize()local jK=jJ:project_on_plane((a6.center-jg):normalize()):normalize()local jL=a6.center+jK*(a6.radius+AutopilotTargetOrbit)local jM=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if(jg-jL):len()<(jg-jM):len()then jH=jL;AutopilotTargetCoords=jH else jH=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=jH end;local dn=cp(a6,AutopilotTargetCoords)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)jI=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jI=true;TargetSet=true;AutopilotRealigned=true;jH=CustomTarget.position+(jg-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jJ=(jg+bg*100000-a6.center):normalize()local jK=jJ:project_on_plane((a6.center-jg):normalize()):normalize()if jK:len()<1 then jJ=(jg+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()jK=jJ:project_on_plane((a6.center-jg):normalize()):normalize()end;jH=a6.center+jK*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jH;TargetSet=true;jI=true;AutopilotRealigned=true;local dn=cp(a6,AutopilotTargetCoords)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)end end;AutopilotDistance=(vec3(jH)-vec3(core.getConstructWorldPos())):len()local f_,g0,g1=b9:getPlanetarySystem(0):castIntersections(jg,bg:normalize(),function(g2)if g2.noAtmosphericDensityAltitude>0 then return g2.radius+g2.noAtmosphericDensityAltitude else return g2.radius+g2.surfaceMaxAltitude*1.5 end end)local g3=g0;if g1~=nil and g0~=nil then g3=math.min(g1,g0)end;if g3~=nil and g3<AutopilotDistance and f_.name==a6.name then AutopilotDistance=g3 end;local jl=true;local jN=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bg):normalize()*AutopilotDistance)):len()-a6.radius;local el,cM=cJ(jN)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..el..'", "unit":"'..cM..'"}')local a2,a3;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(bh)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(bh)end;if bh>300 and AutopilotAccelerating then local ei=vec3(jH)-vec3(core.getConstructWorldPos())local jO=utils.clamp(math.deg(signedRotationAngle(jf,bg:normalize(),ei:normalize()))*bh/500,-90,90)local jP=utils.clamp(math.deg(signedRotationAngle(dc,bg:normalize(),ei:normalize()))*bh/500,-90,90)if math.abs(jO)<20 and math.abs(jP)<20 then jO=jO*2;jP=jP*2 end;if math.abs(jO)<2 and math.abs(jP)<2 then jO=jO*2;jP=jP*2 end;local ji=-math.deg(signedRotationAngle(jf,db,bg:normalize()))local jj=-math.deg(signedRotationAngle(dc,db,bg:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jP-jj)local jQ=utils.clamp(apPitchPID:get(),-1,1)Q=Q+jQ;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jO-ji)local jR=utils.clamp(apYawPID:get(),-1,1)R=R+jR;jI=true;if math.abs(jO)>2 or math.abs(jP)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jN<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bc(a6):escapeAndOrbitalSpeed(jN)end end;if not AutopilotCruising and not AutopilotBraking and not jI then jl=AlignToWorldVector((jH-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then jl=AlignToWorldVector(-vec3(bg):normalize())end;if AutopilotAccelerating then if not I then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)B=s(AutopilotInterplanetaryThrottle,2)I=true end;local go=unit.getThrottle()if AtmoSpeedAssist then go=B end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or go==0 and I then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)B=0 end;if AutopilotDistance<=a2 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)B=0;I=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;U=1 end;if TurnBurn then cmdThrottle(100,true)B=1 end;local _,js=bc(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local ei;if CustomTarget~=nil then ei=CustomTarget.position-jg end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bh<50 then Y="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bh<=js and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then Y="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)B=0;I=false;ProgradeIsOn=true;ai=true;local dn=cp(a6,AutopilotTargetCoords)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,js=bc(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bh<=js then if CustomTarget~=nil then if bg:normalize():dot(ei:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local dn=cp(a6,CustomTarget.position)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)WaypointSet=true end else Y="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)B=0;I=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local dn=cp(a6,CustomTarget.position)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y="Autopilot completed, orbit established"U=0;B=0;I=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a2 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local go=unit.getThrottle()if AtmoSpeedAssist then go=B end;if go>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jl then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif jl then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not I then cmdThrottle(AutopilotInterplanetaryThrottle,true)B=s(AutopilotInterplanetaryThrottle,2)I=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ap>0)then Y="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"U=0;cmdThrottle(0)B=0;I=false;ProgradeIsOn=true;ai=true;local dn=cp(a6,CustomTarget.position)dn="::pos{"..dn.systemId..","..dn.bodyId..","..dn.latitude..","..dn.longitude..","..dn.altitude.."}"system.setWaypoint(dn)end;if W then bf=true;local jP=0;local cz=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local jS=cz-vec3(core.getConstructWorldPos())local jT=vec3(jS):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jU=vec3(jS):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(jT*jT+jU*jU)AlignToWorldVector(jS:normalize())local jV=40;local jW=ae<jV;local jX=100;local gT=utils.clamp((ae-jV)/2,10,jX)Q=0;local jl=math.abs(R)<0.1;if jl and bh<gT and not jW then BrakeIsOn=false;jP=-20 else BrakeIsOn=true;jP=0 end;local jY=0;if math.abs(jP-dg)>jY then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jP-dg)local jQ=pitchPID:get()Q=jQ end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dp=unit.getClosestPlanetInfluence()>0;local jZ=HoldAltitude-aq;local j_=500+bh;local k0=1;if AutoTakeoff then k0=utils.clamp(bh/100,0.1,1)end;local jP=(utils.smoothstep(jZ,-j_,j_)-0.5)*2*MaxPitch*k0;if not Reentry and not ai and not VectorToTarget and db:dot(bg:normalize())<0.99 then jP=(utils.smoothstep(jZ,-j_*utils.clamp(20-19*ap*10,1,20),j_*utils.clamp(20-19*ap*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ap*10,1,2)*k0 end;if not AltitudeHold then jP=0 end;if LockPitch~=nil then if dp and not IntoOrbit then jP=LockPitch else LockPitch=nil end end;bf=true;local k1=Q;if Reentry then local ReentrySpeed=math.floor(bq)local k2,k3=ba.computeDistanceAndTime(bh,ReentrySpeed/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local k4=aq-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and aq>planet.noAtmosphericDensityAltitude+5000 and bh<=ReentrySpeed/3.6 and bh>ReentrySpeed/3.6-10 and math.abs(bg:normalize():dot(db))>0.9 then Nav.control.cancelCurrentControlMasterMode()B=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(k2>-1 and k4<=k2 or aq<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not L then jP=-80;if ap>0.02 then Y="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jP=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aq>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif aq<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bq then L=false;Reentry=false;bf=true end end end;if bh>K and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bg))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and ap>0.01 then local ei;if CustomTarget~=nil then ei=CustomTarget.position-vec3(core.getConstructWorldPos())else ei=a6.center-jg end;local jO=math.deg(signedRotationAngle(de:normalize(),bg,ei))*2;local k5=math.rad(math.abs(ex))if bh>minRollVelocity and ap>0.01 then local k6=utils.clamp(90-jP*2,-90,90)bn=utils.clamp(jO*2,-k6,k6)local k7=jO;jO=utils.clamp(utils.clamp(jO,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(k5)+4*(jh-jP)*math.sin(math.rad(ex)),-YawStallAngle*0.85,YawStallAngle*0.85)jP=utils.clamp(utils.clamp(jP*math.cos(k5),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(k7)*math.sin(k5),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bn=0;jO=utils.clamp(jO,-YawStallAngle*0.85,YawStallAngle*0.85)end;local k8=ji-jO;if not bl and bh>minRollVelocity and ap>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(k8)local jR=utils.clamp(yawPID:get(),-1,1)R=R+jR elseif ao and al>-1 or bh<minRollVelocity then AlignToWorldVector(ei)elseif bl and ap>0.01 then if(ji<-YawStallAngle or ji>YawStallAngle)and ap>0.01 then AlignToWorldVector(bg)end;if(jj<-PitchStallAngle or jj>PitchStallAngle)and ap>0.01 then jP=utils.clamp(jh-jj,jh-PitchStallAngle*0.85,jh+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local k9=planet:getAltitude(CustomTarget.position)local k4=math.sqrt(ei:len()^2-(aq-k9)^2)local ka=LastMaxBrakeInAtmo;if ka then ka=ka*utils.clamp(bh/100,0.1,1)*ap else ka=LastMaxBrake end;if ap<0.01 then ka=LastMaxBrake end;local kb=bg:len()-math.abs(f1)local kc=vec3(core.getWorldAirFrictionAcceleration())local kd=math.sqrt(kc:len()-kc:project_on(dl):len())*m()if bh>100 then a2,a3=ba.computeDistanceAndTime(bh,100,m(),0,0,ka+kd)local ke,kf=ba.computeDistanceAndTime(100,0,m(),0,0,ka/2)a2=a2+ke else a2,a3=ba.computeDistanceAndTime(bh,0,m(),0,0,ka/2)end;StrongBrakes=true;if not aj and not Reentry and k4<=a2+bh*je/2 and(bg:project_on_plane(de):normalize():dot(ei:project_on_plane(de):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)B=0;if AltitudeHold then d6()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kb<0.1 or k4<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<k4)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=k4 end elseif VectorToTarget and ap==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(aj or Reentry)then if CustomTarget~=nil and a6.name==planet.name then local ei=CustomTarget.position-vec3(core.getConstructWorldPos())local k9=planet:getAltitude(CustomTarget.position)local k4=math.sqrt(ei:len()^2-(aq-k9)^2)local ka=LastMaxBrakeInAtmo;if not bB then by=false;IntoOrbit=true else ka=LastMaxBrake;a2,a3=ba.computeDistanceAndTime(bh,0,m(),0,0,ka/2)StrongBrakes=true;if k4<=a2+bh*je/2 and bg:project_on_plane(de):normalize():dot(ei:project_on_plane(de):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;L=true;ai=false;ak=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=k4 end end end;if ap==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(aj or VectorToTarget or IntoOrbit or Reentry)then if not bB then IntoOrbit=true end end;if bl and ap>0.01 and al==-1 and bh>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bg)jP=utils.clamp(jh-jj,jh-PitchStallAngle*0.85,jh+PitchStallAngle*0.85)end;Q=k1;local gx=-1;if BrakeLanding then jP=0;local kg=false;local kh=30;if bb~=nil and bb>0 then local kd=0;local eQ=utils.clamp(ap,0.4,2)local ka=LastMaxBrakeInAtmo*utils.clamp(bh/100,0.1,1)*eQ;local ki=bb*eQ+ka+kd-c2;local kj=ka/2+kd-c2;local kk=bh-math.sqrt(math.abs(kj/2)*20/(0.5*m()))*utils.sign(kj)if kk<0 then kk=0 end;local kl;if bh>100 then local km,_=ba.computeDistanceAndTime(bh,100,m(),0,0,ka)local kn,_=ba.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(ka))kl=km+kn else kl=ba.computeDistanceAndTime(bh,0,m(),0,0,math.sqrt(ka))end;if kl<20 then BrakeIsOn=false else local ko=0;if kk>100 then local kp,_=ba.computeDistanceAndTime(kk,100,m(),0,0,ki)local kq,_=ba.computeDistanceAndTime(100,0,m(),0,0,bb*eQ+math.sqrt(ka)+kd-c2)ko=kp+kq else ko,_=ba.computeDistanceAndTime(kk,0,m(),0,0,bb*eQ+math.sqrt(ka)+kd-c2)end;ko=(ko+15+bh*je)*1.1;local kr=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kr then local k9=planet:getAltitude(CustomTarget.position)local ks=aq-k9-100;local ei=CustomTarget.position-vec3(core.getConstructWorldPos())local kt=math.sqrt(ei:len()^2-(aq-k9)^2)if kt>100 then kr=false elseif ks<=ko or ko==-1 then BrakeIsOn=true;kg=true else BrakeIsOn=false;kg=true end end;if not kr and CalculateBrakeLandingSpeed then if ko>=kh then BrakeIsOn=true else BrakeIsOn=false end;kg=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)gx=al;if gx>-1 then bf=autoRollPreference;if bh<1 or bg:normalize():dot(de)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bg:normalize():dot(-dl)<0.999 then BrakeIsOn=true elseif f1<-brakeLandingRate and not kg then BrakeIsOn=true elseif not kg then BrakeIsOn=false end end;if AutoTakeoff or aj then local f_,g1,g0;if AutopilotTargetCoords~=nil then f_,g1,g0=b9:getPlanetarySystem(0):castIntersections(jg,(AutopilotTargetCoords-jg):normalize(),function(g2)return g2.radius+g2.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if aq>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)B=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jP)<15 and aq/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bh<K then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)B=0 elseif aj then cmdThrottle(0)B=0;BrakeIsOn=true end elseif aj and ap==0 and a6~=nil and(f_==nil or f_.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local ku=hoverDetectGround()>-1;local kv=dg;if(VectorToTarget or aj)and not ku and bh>minRollVelocity and ap>0.01 then local k5=math.rad(math.abs(ex))kv=dg*math.abs(math.cos(k5))+jj*math.sin(k5)end;local kw=utils.clamp(jP-kv,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ap<0.01 and VectorToTarget then kw=utils.clamp(jP-kv,-85,MaxPitch)elseif ap<0.01 then kw=utils.clamp(jP-kv,-MaxPitch,MaxPitch)end;if math.abs(ex)<5 or VectorToTarget or BrakeLanding or ku or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kw)local jQ=pitchPID:get()Q=Q+jQ end end;if antigrav~=nil and(antigrav and not ExternalAGG and aq<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and F then B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)F=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not F then B=0;F=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local kx=utils.clamp(P+Q+system.getControlDeviceForwardInput(),-1,1)local ky=utils.clamp(S+V+system.getControlDeviceYawInput(),-1,1)local kz=utils.clamp(T+R-system.getControlDeviceLeftRightInput(),-1,1)local kA=U;local kB=vec3(core.getWorldVertical())if kB==nil or kB:len()==0 then kB=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local kC=vec3(core.getConstructWorldOrientationUp())local kD=vec3(core.getConstructWorldOrientationForward())local kE=vec3(core.getConstructWorldOrientationRight())local kF=vec3(core.getWorldVelocity())local kG=vec3(core.getWorldVelocity()):normalize()local kH=getRoll(kB,kD,kE)local kI=math.abs(kH)local kJ=utils.sign(kH)local kK=vec3(core.getWorldAngularVelocity())local kL=kx*pitchSpeedFactor*kE+ky*rollSpeedFactor*kD+kz*yawSpeedFactor*kC;if kB:len()>0.01 and(ap>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local ex=getRoll(kB,kD,kE)local ey=ex/180*math.pi;local ez=math.cos(ey)local eA=math.sin(ey)local jh=getPitch(kB,kD,kE*ez+kC*eA)if bf==true and math.abs(bn-kH)>autoRollRollThreshold and ky==0 and math.abs(jh)<85 then local kM=bn;local jE=autoRollFactor;if ap==0 then jE=jE/4;bn=0;kM=0 end;if rollPID==nil then rollPID=pid.new(jE*0.01,0,jE*0.1)end;rollPID:inject(kM-kH)local kN=rollPID:get()kL=kL+kN*kD end end;if kB:len()>0.01 and ap>0.0 then local kO=20.0;if turnAssist==true and kI>kO and kx==0 and kz==0 then local kP=turnAssistFactor*0.1;local kQ=turnAssistFactor*0.025;local kR=(kI-kO)/(180-kO)*180;local kS=0;if kR<90 then kS=kR/90 elseif kR<180 then kS=(180-kR)/90 end;kS=kS*kS;local kT=-kJ*kQ*(1.0-kS)local kU=kP*kS;kL=kL+kU*kE+kT*kC end end;local kV=1;local kW=0;local kX=1;if system.getMouseWheel()>0 then if AltIsOn then if ap>0 or Reentry then bq=utils.clamp(bq+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;J=false else B=s(utils.clamp(B+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ap>0 or Reentry then bq=utils.clamp(bq-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;J=false else B=s(utils.clamp(B-speedChangeLarge/100,-1,1),2)end end;C=0;local f1=-kB:dot(kF)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bq/3.6-kF:dot(kD))local kY=throttlePID:get()E=utils.clamp(kY,-1,1)if E<B and ap>0.005 then D=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(E,0.01,1))else D=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kF:len()-bq/3.6)local kZ=utils.clamp(brakePID:get(),0,1)if ap>0 and f1<-80 or ap>0.005 then C=kZ end;if C>0 then if D and E==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else E=utils.clamp(E,0.01,1)end;local k_=''local l0=vec3()local l1=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",l1,kW)local l2='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l2=l2 ..ExtraLongitudeTags end;local l3=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local l4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l2,axisCommandId.longitudinal)local l5=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)k_=k_..' , '.."lateral airfoil , lateral ground "l0=l0+l5;if l0:len()>constants.epsilon then Nav:setEngineForceCommand(k_,l0,kW,'','','',kX)end;Nav:setEngineForceCommand(l2,l4,kV)local l6='thrust analog vertical fueled 'local l7='thrust analog lateral fueled 'if ExtraLateralTags~="none"then l7=l7 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then l6=l6 ..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l6,l1,kV)else Nav:setEngineForceCommand(l6,vec3(),kV)end;if LeftAmount~=0 then Nav:setEngineForceCommand(l7,l5,kV)else Nav:setEngineForceCommand(l7,vec3(),kV)end;if kA==0 then kA=C end;local l8=-kA*(brakeSpeedFactor*kF+brakeFlatFactor*kG)Nav:setEngineForceCommand('brake',l8)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;local gT=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kF:len()-gT/3.6)local kZ=utils.clamp(brakePID:get(),0,1)kA=utils.clamp(kA+kZ,0,1)end;local l8=-kA*(brakeSpeedFactor*kF+brakeFlatFactor*kG)Nav:setEngineForceCommand('brake',l8)local k_=''local l0=vec3()local l9=false;local l2='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l2=l2 ..ExtraLongitudeTags end;local l3=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if l3==axisCommandType.byThrottle then local l4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l2,axisCommandId.longitudinal)Nav:setEngineForceCommand(l2,l4,kV)elseif l3==axisCommandType.byTargetSpeed then local l4=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)k_=k_..' , '..l2;l0=l0+l4;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then l9=true end end;local l7='thrust analog lateral 'if ExtraLateralTags~="none"then l7=l7 ..ExtraLateralTags end;local la=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if la==axisCommandType.byThrottle then local lb=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l7,axisCommandId.lateral)Nav:setEngineForceCommand(l7,lb,kV)elseif la==axisCommandType.byTargetSpeed then local l5=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)k_=k_..' , '..l7;l0=l0+l5 end;local l6='thrust analog vertical 'if ExtraVerticalTags~="none"then l6=l6 ..ExtraVerticalTags end;local lc=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lc==axisCommandType.byThrottle then local l1=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l6,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(l6,l1,kV,'airfoil','ground','',kX)else Nav:setEngineForceCommand(l6,vec3(),kV)Nav:setEngineForceCommand('airfoil vertical',l1,kV,'airfoil','','',kX)Nav:setEngineForceCommand('ground vertical',l1,kV,'ground','','',kX)end elseif lc==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),kV)end;local ld=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)k_=k_..' , '..l6;l0=l0+ld end;if l0:len()>constants.epsilon then if U~=0 or l9 or math.abs(kG:dot(kD))<0.8 then k_=k_..', brake'end;Nav:setEngineForceCommand(k_,l0,kW,'','','',kX)end end;local le=torqueFactor*(kL-kK)local lf=vec3(core.getWorldAirFrictionAngularAcceleration())le=le-lf;Nav:setEngineTorqueCommand('torque',le,kV,'airfoil','','',kX)Nav:setBoosterCommand('rocket_engine')if a1 and not VanillaRockets then local c4=vec3(core.getVelocity()):len()local lg=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lh=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c4*3.6>lh*(1-lg)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c4*3.6<lh*(1-lg)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local go=unit.getThrottle()if AtmoSpeedAssist then go=B*100 end;local gT=go/100;if h==0 then gT=gT*MaxGameVelocity;if c4>=gT*(1-lg)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c4<gT*(1-lg)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gT=gT*ReentrySpeed/3.6;if c4>=gT*(1-lg)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c4<gT*(1-lg)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bM=coroutine.resume(beginSetup)if bM then SetupComplete=true end else Nav:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(li)if li=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0;if(vBooster or hover)and al==-1 and(ap>0 or aq<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if O and not BrakeLanding then Nav.control.extendLandingGears()end else if O then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif li=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif li=="forward"then P=P-1 elseif li=="backward"then P=P+1 elseif li=="left"then S=S-1 elseif li=="right"then S=S+1 elseif li=="yawright"then T=T-1 elseif li=="yawleft"then T=T+1 elseif li=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif li=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif li=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif li=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif li=="groundaltitudeup"then OldButtonMod=Z;OldAntiMod=a0;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a0;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a0 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Z else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif li=="groundaltitudedown"then OldButtonMod=Z;OldAntiMod=a0;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Z else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif li=="option1"then dk()J=false elseif li=="option2"then dk(1)J=false elseif li=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;J=false;c_()elseif li=="option4"then dm()J=false elseif li=="option5"then df()J=false elseif li=="option6"then d6()J=false elseif li=="option7"then Y="Use /wipedatabank command to wipe databank."J=false elseif li=="option8"then dh()J=false elseif li=="option9"then if gyro~=nil then gyro.toggle()at=gyro.getState()==1 end;J=false elseif li=="lshift"then if system.isViewLocked()==1 then X=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then X=true;be=false;bd=false end elseif li=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif li=="lalt"then AltIsOn=true;if n()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif li=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a1 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a1=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a1=false end elseif li=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()B=0 elseif li=="speedup"then if not X then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else dk()end elseif li=="speeddown"then if not X then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else dk(1)end elseif li=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(li)if li=="forward"then P=0 elseif li=="backward"then P=0 elseif li=="left"then S=0 elseif li=="right"then S=0 elseif li=="yawright"then T=0 elseif li=="yawleft"then T=0 elseif li=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif li=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif li=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif li=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif li=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a0=OldAntiMod end;if AltitudeHold then Z=OldButtonMod end;J=false elseif li=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a0=OldAntiMod end;if AltitudeHold then Z=OldButtonMod end;J=false elseif li=="lshift"then if system.isViewLocked()==1 then X=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then X=false;be=false;bd=false end elseif li=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif li=="lalt"then if n()==0 and freeLookToggle then if J then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else J=true end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(li)if li=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a0;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a0 end;a0=a0*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Z;Z=Z*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif li=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a0=a0*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Z;Z=Z*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif li=="speedup"then if not X then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif li=="speeddown"then if not X then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(em)local i;local lj="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local lk,ll=nil,nil;local lm="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(em," ")lk=em;if i~=nil then lk=string.sub(em,0,i-1)ll=string.sub(em,i+1)elseif not string.find(lj,lk)then for gP in string.gmatch(lm,"([^\n]+)")do system.print(gP)end;return end;if lk=="/setname"then if ll==nil or ll==""then Y="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cS(ll)else Y="Select a saved target to rename first"end elseif lk=="/addlocation"then if ll==nil or ll==""or string.find(ll,"::")==nil then Y="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(ll,"::")local cG=string.sub(ll,1,i-2)local cz=string.sub(ll,i)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cA='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cB,cC,cv,cw,cu=p(cz,cA)local planet=b3[tonumber(cB)][tonumber(cC)]cF(cG,planet,cz)Y="Added "..cG.." to saved locations,\nplanet "..planet.name.." at "..cz;ad=5 elseif lk=="/agg"then if ll==nil or ll==""then Y="Usage: /agg targetheight"return end;ll=tonumber(ll)if ll<1000 then ll=1000 end;AntigravTargetAltitude=ll;Y="AGG Target Height set to "..ll elseif lk=="/G"then if ll==nil or ll==""then Y="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if ll=="dump"then for bK,bL in pairs(a)do if type(_G[bL])=="boolean"then if _G[bL]==true then system.print(bL.." true")else system.print(bL.." false")end elseif _G[bL]==nil then system.print(bL.." nil")else system.print(bL.." ".._G[bL])end end;return end;i=string.find(ll," ")local ln=string.sub(ll,0,i-1)local lo=string.sub(ll,i+1)for bK,bL in pairs(a)do if bL==ln then Y="Variable "..ln.." changed to "..lo;local lp=type(_G[bL])if lp=="number"then lo=tonumber(lo)elseif lp=="boolean"then if string.lower(lo)=="true"then lo=true else lo=false end end;_G[bL]=lo;return end end;Y="No such global variable: "..ln elseif lk=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else Y="Spare Databank required to copy databank"end elseif lk=="/wipedatabank"then if dbHud_1 then wipeSaveVariables()else Y="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
