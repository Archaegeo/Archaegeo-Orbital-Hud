name: ArchHud - Archaegeo v1.135 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.135;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=core.getConstructMass;local m=Nav.control.isRemoteControlled;local n=math.atan;local o=string.match;local tostring=tostring;local p=utils.round;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=Nav.axisCommandManager;local t=system.setWaypoint;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=false;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=false;local ar=""local as=j()>0;local at=j()local au=core.getAltitude()local av=core.getElementIdList()local aw=q()local ax=nil;local ay=false;local az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]local aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH=ResolutionX;local aI=ResolutionY;local aJ=false;local aK=false;local aL=0;local aM=nil;local aN={}local aO={}local aP={}local aQ=0;local aR=false;local aS={}local aT={}local aU=d(1/apTickRate)*2;local aV={}local aW={}local aX={}local aY={}local aZ=false;local a_=16;local b0=0;local b1=nil;local b2=""local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=q()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=q()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=vec3(core.getConstructWorldPos())local bL=false;local bM=false;local bN=nil;local bO=true;local function bP(bQ,bR)if bR==nil then bR=false end;if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not bR then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,bQ)I=r(z(bQ*100,0)/100,-1,1)end;local function bS(bQ,bR)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bR then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,bQ)bN=bQ end;local function bT(bU)if aH==1920 then return bU else return z(aH*bU/1920,0)end end;local function bV(bU)if aI==1080 then return bU else return z(aI*bU/1080,0)end end;local function bW(bX,bY)if bX==nil then bX=core.g()end;bX=z(bX,5)if bY~=nil and bY or(aM==nil or aM~=bX)then local bZ=core.getVelocity()local b_=vec3(bZ):len()local c0=f(unit.getData()).maxBrake;if c0~=nil and c0>0 and as then c0=c0/r(b_/100,0.1,1)c0=c0/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c0)/2 else LastMaxBrakeInAtmo=c0 end end end;if c0~=nil and c0>0 then LastMaxBrake=c0 end;aM=bX end end;local function c1()AtlasOrdered={}for c2,bU in pairs(b1[0])do table.insert(AtlasOrdered,{name=bU.name,index=c2})end;local function c3(c4,c5)return c4.name<c5.name end;table.sort(AtlasOrdered,c3)end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function c9(ca,cb)local cc=vec3(cb)if ca.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=ca.planetarySystemId},MapPosition)end;local cd=cc-ca.center;local ai=cd:len()local ce=ai-ca.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=math.deg(cf),longitude=math.deg(cg),altitude=ce,bodyId=ca.bodyId,systemId=ca.planetarySystemId},MapPosition)end;local function ci(ai,cj)local ck=ai>100000;local cl,cm=""if cj==nil then cj=1 end;if ck then cl,cm=z(ai/1000/200,cj),"SU"elseif ai<1000 then cl,cm=z(ai,cj),"M"else cl,cm=z(ai/1000,cj),"KM"end;return cl,cm end;local function cn(co)for c2,bU in pairs(co)do if bU.name and bU.name==CustomTarget.name then return c2 end end;return-1 end;local function cp()if radarPanelID~=nil and al==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if al==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function ct()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;be=true;ae=0;if as and ap==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bS(d(bn))end else VertTakeOff=true;AltitudeHold=false;by=false;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cu()by=false;bq=nil;br=nil;bC=0;if at==0 then if IntoOrbit then IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;be=true;if bx==nil then bx=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false end end;local function cv()if bD-bl<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;bw=HoldAltitude;bv=true;if not IntoOrbit then cu()end;bs=true end end;bl=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bl=bD end;if unit.getClosestPlanetInfluence()>0 and at==0 then bw=au;bv=true;bs=true;cu()if IntoOrbit then bl=bD else bl=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;be=true;LockPitch=nil;by=false;if ap==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if VertTakeOff then ct()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bL then ct()end end;if an then HoldAltitude=100000 end else if IntoOrbit then cu()end;if VertTakeOff then ct()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bl=0 end end;local function cw()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function cx()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local cy=AtlasOrdered[AutopilotTargetIndex].index;local cz=b1[0][cy]if cz.center then AutopilotTargetName=cz.name;aa=b7[0][cy]if CustomTarget~=nil then if at==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cz;for _,bU in pairs(b7[0])do if bU.name==CustomTarget.planetname then aa=bU;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cA(cB)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if cB==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cx()else local cy=AtlasOrdered[AutopilotTargetIndex].index;local cz=b1[0][cy]if cz.name=="Space"then if cB==nil then cA()else cA(1)end else cx()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cC()local function cD(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cv()end end;VectorStatus="Proceeding to Waypoint"end;if bD-bm<1.5 and at>0 then if not bB then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an then cx()local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if at~=0 then an=true;cv()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then if not VectorToTarget then cD(SpaceTarget)end else if au>AutopilotTargetOrbit*1.5 or au==0 then by=false;Autopilot=true elseif not as then if IntoOrbit then cu()end;bw=planet.noAtmosphericDensityAltitude+1000;bv=true;bu.AutopilotAlign=true;bu.VectorToTarget=true;bs=false;if not IntoOrbit then cu()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then an=true;cv()else Autopilot=true end end elseif at==0 then local cF=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(aa.name==planet.name and cF)and not IntoOrbit then by=false;bs=false;cu()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else an=true;cv()end else an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then cu()end end end;local function cG(cH)local cI=-1;local cJ;cI=cn(SavedLocations)if cI~=-1 then local cK;if cH~=nil then cJ={position=SavedLocations[cI].position,name=cH,atmosphere=SavedLocations[cI].atmosphere,planetname=SavedLocations[cI].planetname,gravity=SavedLocations[cI].gravity}else cJ={position=bK,name=SavedLocations[cI].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cI]=cJ;cI=-1;cI=cn(b1[0])if cI>-1 then b1[0][cI]=cJ end;c1()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cx()else a2="Name Not Found"end end;local function cL(cM,cN,c5)local cO=cM:cross(c5):normalize_inplace()local cP=math.acos(r(cO:dot(-cN),-1,1))*constants.rad2deg;if cO:cross(-cN):dot(c5)<0 then cP=-cP end;return cP end;local function cQ(cR,cS,cT)cS=cS:project_on_plane(cR)cT=cT:project_on_plane(cR)return n(cS:cross(cT):dot(cR),cS:dot(cT))end;local function cq()local cr=-1;local cs=-1;if vBooster then cr=vBooster.distance()end;if hover then cs=hover.distance()end;if cr~=-1 and cs~=-1 then if cr<cs then return cr else return cs end elseif cr~=-1 then return cr elseif cs~=-1 then return cs else return-1 end end;local function cU()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then ct()end;if IntoOrbit then cu()end;LockPitch=nil;be=autoRollPreference;am=false;ao=false;ae=0 end end;local function cV(cW,cX)cW=vec3(cW)cX=vec3(cX):normalize()local cl=cW*cX;return cl.x+cl.y+cl.z end;local function cY(cW,cZ,c_)local d0=0.001;local d1=1;if not as or not bi or ap~=-1 or bI<Q then local d2=c_;if d2==nil then d2=DampingMultiplier end;if cZ==nil then cZ=d0 end;cW=vec3(cW):normalize()local d3=vec3()-cW;local d4=-cV(d3,core.getConstructWorldOrientationRight())*d1;local d5=-cV(d3,core.getConstructWorldOrientationUp())*d1;if aC==0 then aC=d4/2 end;if aD==0 then aD=d5/2 end;if c(d4)<0.1 then V=V-d4*2 else V=V-(d4+(d4-aC)*d2)end;if c(d5)<0.1 then U=U+d5*2 else U=U+d5+(d5-aD)*d2 end;aC=d4;aD=d5;if c(d4)<cZ and c(d5)<cZ then return true end;return false elseif bi and ap==-1 then cW=bH;local d2=c_;if d2==nil then d2=DampingMultiplier end;if cZ==nil then cZ=d0 end;cW=vec3(cW):normalize()local d3=bF-cW;local d4=-cV(d3,core.getConstructWorldOrientationRight())*d1;local d5=-cV(d3,core.getConstructWorldOrientationUp())*d1;if aC==0 then aC=d4/2 end;if aD==0 then aD=d5/2 end;if c(d4)<0.1 then V=V-d4*5 else V=V-(d4+(d4-aC)*d2)end;if c(d5)<0.1 then U=U+d5*5 else U=U+d5+(d5-aD)*d2 end;aC=d4;aD=d5;if c(d4)<cZ and c(d5)<cZ then return true end;return false end end;local function d6()if Reentry then a2="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not R then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bn end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local d7,d8=ci(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..d7 ..d8;bS(d(bn))end;AutoTakeoff=false end;local function d9(b_)if not as then bW()return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;local function da(b_)bW()return b8.computeDistanceAndTime(b_,AutopilotEndSpeed,l(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;local function db()if antigrav and not ExternalAGG then if bM then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function dc(dd)local de=0;local df=0;local dg=0;if dd<60 then dd=d(dd)elseif dd<3600 then de=d(dd/60)dd=d(dd%60)elseif dd<86400 then df=d(dd/3600)de=d(dd%3600/60)else dg=d(dd/86400)df=d(dd%86400/3600)end;if dg>0 then return dg.."d "..df.."h "elseif df>0 then return df.."h "..de.."m "elseif de>0 then return de.."m "..dd.."s"elseif dd>0 then return dd.."s"else return"0s"end end;local function dh()local di=-1;local dj=cq()if telemeter_1 then di=telemeter_1.getDistance()end;if dj~=-1 and di~=-1 then if dj<di then return dj else return di end elseif dj~=-1 then return dj else return di end end;local function dk(dl)local function dm(dn)for c2,bU in pairs(dn)do dbHud_1.setStringValue(bU,g(_G[bU]))if dl and dbHud_2 then dbHud_2.setStringValue(bU,g(_G[bU]))end end end;if dbHud_1 then if not ad then dm(b)dm(a)system.print("Saved Variables to Datacore")if dl and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function dp()local dq={}local function dr()return y()==0 and userControlScheme~="keyboard"and m()==0 end;local function ds()local dt=s:getAxisCommandType(0)local du="TRAVEL"if dt==1 then du="CRUISE"end;if Autopilot then du="AUTOPILOT"end;return du end;local function dv(dw,aZ,dx,dy,dz,dA,dB,dC)local dD=1;local dE=2;local dF=3;local dG=4;local dH=5;local dI=6;local dJ=""local dK=0;local dL=fuelY;local dM=fuelY+10;if m()==1 and not RemoteHud then dL=dL-50;dM=dM-50 end;dw[#dw+1]=[[<g class="pdim txtfuel">]]if dz=="ATMO"then dJ="atmofueltank"elseif dz=="SPACE"then dJ="spacefueltank"else dJ="rocketfueltank"end;dK=_G[dJ.."_size"]if#dA>0 then for i=1,#dA do local dN=string.sub(dA[i][dE],1,12)local dO=0;for dP=1,dK do if dA[i][dE]==f(unit[dJ.."_"..dP].getData()).name then dO=dP;break end end;if aZ or dB[i]==nil or dC[i]==nil then local dQ=0;local dR=0;local dS=0;local dT=0;local dU=q()if dO~=0 then dC[i]=f(unit[dJ.."_"..dO].getData()).percentage;dB[i]=f(unit[dJ.."_"..dO].getData()).timeLeft;if dB[i]=="n/a"then dB[i]=0 end else dS=k(dA[i][dD])-dA[i][dG]dQ=dA[i][dF]dC[i]=d(0.5+dS*100/dQ)dR=dA[i][dH]dT=dA[i][dI]if dR<=dS then dB[i]=0 else dB[i]=d(0.5+dS/((dR-dS)/(dU-dT)))end;dA[i][dH]=dS;dA[i][dI]=dU end end;if dN==dy then dN=e("%s %d",dz,i)end;if dO==0 then dN=dN.." *"end;local dV;if dB[i]==0 then dV="n/a"else dV=dc(dB[i])end;if dC[i]~=nil then local dW=d(dC[i]*2.55)local dX=e("rgb(%d,%d,%d)",255-dW,dW,0)local dY=""if dV~="n/a"and dB[i]<120 or dC[i]<5 then if aZ then dY=[[class="red"]]end end;dw[#dw+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dx,dL,dY,dN,dx,dM,dX,dC[i],dV)dL=dL+30;dM=dM+30 end end end;dw[#dw+1]="</g>"end;local function dZ(dw,ce)if ce<200000 and not as or ce and as then local d_=-bJ:dot(bH)local e0=0;if c(d_)>1 then e0=45*math.log(c(d_),10)if d_<0 then e0=-e0 end end;dw[#dw+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(d_),d(e0))end;return dw end;local function e1(cN)local cB=-bJ;cN=cN-cN:project_on(cB)local e2=vec3(0,0,1)e2=e2-e2:project_on(cB)local e3=e2:cross(cB)local e0=e2:angle_between(cN)*constants.rad2deg;if cN:dot(e3)<0 then e0=360-e0 end;return e0 end;local function e4(dw,centerX,centerY,e5,e6,cF)local e7=circleRad;local e8=20;e8=d(e8)local e9=d(e5)if cF then for i=-45,45,5 do local ea=i;dw[#dw+1]=e([[<g transform="rotate(%f,%d,%d)">]],ea,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dw[#dw+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+e7+e8-len,centerX,centerY+e7+e8)end;dw[#dw+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+e7+e8-35,e6,centerX,centerY+e7+e8-25,e9)dw[#dw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e5,centerX,centerY)dw[#dw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+e7+e8-20,centerX+5,centerY+e7+e8-20,centerX,centerY+e7+e8-15)dw[#dw+1]="</g>"end;local eb=e9;if cF then eb=e1(bF)end;local ec=20;local ed=d(eb)local ee=0;local ef=centerY+e7+e8+20;local eg=centerX;if e6~="YAW"then ef=bV(130)eg=bT(960)end;local eh=[[<path class="txttick line" d="]]for i=d(ed-(ec+10)-ed%5+0.5),d(ed+ec+10+ed%5+0.5),5 do local dx=eg+-i*5+eb*5;if i%10==0 then ee=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;dw[#dw+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],dx+5,ef-12,A)elseif i%5==0 then ee=5 end;if ee==10 then eh=e([[%s M %f %f v %d]],eh,dx,ef-5,ee)else eh=e([[%s M %f %f v %d]],eh,dx,ef-2.5,ee)end end;dw[#dw+1]=eh..[["/>]]dw[#dw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eg-5,ef+10,eg+5,ef+10,eg,ef+5)if cF then e6="HDG"end;dw[#dw+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],eg,ef+25,ed,eg,ef+35,e6)end;local function ei(dw,ej,e5,centerX,centerY,cF,ek,b_)local e7=circleRad;local el=d(e7*3/5)if e7>0 then local em=d(ej)local len=0;local eh=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*e5,centerX,centerY)if not as then eh=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dw[#dw+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],e7-1,centerX,centerY)dw[#dw+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(em-30-em%5+0.5),d(em+30+em%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local en=centerY+-i*5+ej*5;if len==30 then eh=e([[%s M %d %f h %d]],eh,centerX-el-len,en,len)if as then dw[#dw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e5,centerX,centerY,centerX-el+10,en,i)dw[#dw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*e5,centerX,centerY,centerX+el-10,en,i)if i==0 or i==180 or i==-180 then dw[#dw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e5,centerX,centerY,centerX-el+20,en,el*2-40)end else dw[#dw+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-el+10,en,i)dw[#dw+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+el-10,en,i)end;eh=e([[%s M %d %f h %d]],eh,centerX+el,en,len)else eh=e([[%s M %d %f h %d]],eh,centerX-el-len,en,len)eh=e([[%s M %d %f h %d]],eh,centerX+el,en,len)end end;dw[#dw+1]=eh..[["/>]]local eo="PITCH"if not cF then eo="REL PITCH"end;if ej>90 and not as then ej=90-(ej-90)elseif ej<-90 and not as then ej=-90-(ej+90)end;if e7>200 then if as then if b_>Q then dw[#dw+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ek)end;dw[#dw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-e5,centerX,centerY)else dw[#dw+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dw[#dw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-el+25,centerY-5,centerX-el+20,centerY,centerX-el+25,centerY+5,centerX-el+50,centerY+4,em)dw[#dw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+el-25,centerY-5,centerX+el-20,centerY,centerX+el-25,centerY+5,centerX+el-30,centerY+4,em)dw[#dw+1]="</g>"end;local ep=d(e7/3)dw[#dw+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ep,centerY,e7-ep)if not as and cF then dw[#dw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*e5,centerX,centerY,centerX-el+10,centerY,el*2-20)end;dw[#dw+1]="</g>"if e7<200 then if as and b_>Q then dw[#dw+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e7,eo,centerX,centerY-e7+10,em,centerX,centerY-15,"Yaw",centerX,centerY+20,ek)else dw[#dw+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-e7,eo,centerX,centerY-e7+15,em)end end end end;local function eq(dw,ce,cF)local er=altMeterX;local es=altMeterY;local et=78;local eu=19;local ev=dh()if ev~=-1 then table.insert(dw,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],er+et,es+eu+20,ev))end;if cF and(ce<200000 and not as or ce and as)then table.insert(dw,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],er-1,es-4,et+2,eu+6,er+1,es-1,et-4,eu))local cI=0;local ew=1;local ex=0;local ey=ce<0;local ez=9;if ey then ez=0 end;local ce=c(ce)while cI<6 do local eA=11;local eB=16;local eC=9;local eD=14;local dY="altsm"if cI>2 then eB=eB+3;eA=eA+2;eD=eD+2;eC=eC-6;dY="altbig"end;if ey then dY=dY.." red"end;local eE=ce/ew%10;local eF=d(eE)local eG=d((eF+1)%10)local eH=ex;if cI==0 then eH=eE-eF;if ey then eH=1-eH end end;if ey and(cI==0 or ex~=0)then local eI=eG;eG=eF;eF=eI end;local eJ=eB*(eH-1)local eK=eJ+eB;local dx=er+eC+(6-cI)*eA;local en=es+eD;table.insert(dw,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dY,dx,en+eJ,eG,dx,en+eK,eF))cI=cI+1;ew=ew*10;if eF==ez then ex=eH else ex=0 end end;table.insert(dw,[[</g></g>]])end end;local function eL(bZ)bZ=vec3(bZ)local cP=-math.deg(n(bZ.y,bZ.z))+180;cP=cP-90;if cP<0 then cP=360+cP end;if cP>180 then cP=-180+cP-180 end;return-cP end;local function eM(bZ)bZ=vec3(bZ)local eb=math.deg(n(bZ.y,bZ.x))-90;if eb<-180 then eb=360+eb end;return eb end;local function eN(dw,bZ,b_,centerX,centerY)if b_>5 and not as or b_>Q then local e7=circleRad;local eO=20;local eP=20;local eQ=vec3(bZ)local eR=eL(eQ)local eS=eM(eQ)local eT=14;local eU=eT/2;local eV=-eS/eP*e7;local eW=eR/eO*e7;local dx=centerX+eV;local en=centerY+eW;local ai=math.sqrt(eV^2+eW^2)local eX=[[<circle
                        cx="]]..dx..[["
                        cy="]]..en..[["
                        r="]]..eU/eT..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dx..[["
                        cy="]]..en..[["
                        r="]]..eU..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dx-eT..[[,]]..en..[[ h ]]..eU..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dx+eU..[[,]]..en..[[ h ]]..eU..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dx..[[,]]..en-eT..[[ v ]]..eU..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<e7 then dw[#dw+1]=eX else local e0=n(eW,eV)local eY=4;local eZ=centerX+e7*math.cos(e0)local e_=centerY+e7*math.sin(e0)dw[#dw+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',e0*180/math.pi,eZ,e_,eZ-eY,e_-eY/2,eY*2,eY,eZ+eY,e_-eY,eY,eY,-eY,eY)end;if not as then eR=eL(-eQ)eS=eM(-eQ)eV=-eS/eP*e7;eW=eR/eO*e7;dx=centerX+eV;en=centerY+eW;ai=math.sqrt(eV^2+eW^2)if ai<e7 then local f0=[[<circle
                                cx="]]..dx..[["
                                cy="]]..en..[["
                                r="]]..eU..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dx..[[,]]..en-eT..[[ v ]]..eU..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dx..[[,]]..en..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dx..[[,]]..en..[[)" />
                            <path
                                d="M ]]..dx-eU..[[,]]..en..[[ h ]]..eT..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dx..[[,]]..en..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dx..[[,]]..en..[[)"/>]]dw[#dw+1]=f0 end end end end;local function f1(dw,du,f2,f3)f2=d(f2+0.5)local dL=throtPosY+10;local dM=throtPosY+20;if m()==1 and not RemoteHud then dL=55;dM=65 end;local f4="CRUISE"local unit="km/h"local bQ=f3;if du=="TRAVEL"or du=="AUTOPILOT"then f4="THROT"unit="%"bQ=f2;local f5="dim"if f2<0 then f5="red"end;dw[#dw+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],f5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(f2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dw[#dw+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dL,f4,throtPosX+10,dM,bQ,unit)if as and AtmoSpeedAssist and bO and K then f2=d(L*100+0.5)local f5="red"if f2<0 then f5="red"end;dw[#dw+1]=e([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],f5,1-c(f2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dw[#dw+1]=e([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dL+40,"LIMIT",throtPosX+10,dM+40,f2,"%")end;if as and AtmoSpeedAssist or Reentry then dw[#dw+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dL-40,"LIMIT: ",bn.." km/h")elseif not as and Autopilot then dw[#dw+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dL-40,"LIMIT: ",d(MaxGameVelocity*3.6+0.5).." km/h")end end;local function f6(dw,f7)local f8=throtPosY-10;local f9=throtPosX+10;dw[#dw+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then f8=75 end;dw[#dw+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],f9,f8,d(f7))end;local function fa(dw)dw[#dw+1]=e([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],bT(1900),bV(1070),VERSION_NUMBER)dw[#dw+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dw[#dw+1]=e([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bT(960),bV(550))dw[#dw+1]=e([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bT(960),bV(600))dw[#dw+1]=e([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bT(960),bV(650))end;local fb=bT(960)local fc=bV(860)local fd=bV(880)local fe=bV(900)local ff=bV(960)local fg=bV(200)local fh=bV(150)local fi=bV(960)if m()==1 and not RemoteHud then fc=bV(135)fd=bV(155)fe=bV(175)fg=bV(115)fh=bV(95)end;if BrakeIsOn then dw[#dw+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fb,fc)elseif J>0 then dw[#dw+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fb,fc,J)end;if as and bi and cq()==-1 then dw[#dw+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fb,fg+50)end;if ax then dw[#dw+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fb,fi)end;if GearExtended then if S then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fb,fd)else dw[#dw+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fb,fd)end;local fj,cm=ci(Nav:getTargetGroundAltitude())dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fb,fe,fj..cm)end;if a5 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fb,ff+20)end;if antigrav and not ExternalAGG and bM and AntigravTargetAltitude~=nil then if c(au-antigrav.getBaseAltitude())<501 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],fb,fg+15,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else dw[#dw+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fb,fg+15,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fb,fg+20,AutopilotStatus)elseif LockPitch~=nil then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fb,fg+20,d(LockPitch))elseif a0 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fb,fg+20)elseif Reentry then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fb,fg+20)end;local fk,fl,fm=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fn)if fn.noAtmosphericDensityAltitude>0 then return fn.radius+fn.noAtmosphericDensityAltitude else return fn.radius+fn.surfaceMaxAltitude*1.5 end end)local fo=fl;if fm~=nil and fl~=nil then fo=math.min(fm,fl)end;if AltitudeHold or VertTakeOff then local fj,cm=ci(HoldAltitude,2)if VertTakeOff then if bM then fj,cm=ci(antigrav.getBaseAltitude(),2)end;dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],fb,fg,fj..cm)elseif AutoTakeoff and not IntoOrbit then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],fb,fg,fj..cm)if BrakeIsOn and not VertTakeOff then dw[#dw+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fb,fg+50)end else dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fb,fg,fj..cm)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fb,fg)elseif at<0.09 and at>0.05 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fb,fg)elseif at<0.05 then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fb,fg)end end;if IntoOrbit then if bp~=nil then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fb,fg,bp)end end;if BrakeLanding then if StrongBrakes then dw[#dw+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fb,fg)else dw[#dw+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fb,fg)end end;if ProgradeIsOn then dw[#dw+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fb,fg)end;if RetrogradeIsOn then dw[#dw+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fb,fg)end;if fo~=nil and at==0 then local fj,cm=ci(fo)local travelTime=b8.computeTravelTime(bI,0,fo)local fp="Collision"if fk.noAtmosphericDensityAltitude>0 then fp="Atmosphere"end;dw[#dw+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fb,fh,fk.name,fp,dc(travelTime),fj..cm)end;if VectorToTarget and not IntoOrbit then dw[#dw+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fb,fg+35,VectorStatus)end;dw[#dw+1]="</g>"return dw end;local function fq(b_)return d(z(b_*3.6,0)+0.5).." km/h"end;local function fr(dw)if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fs=OrbitMapX;local ft=OrbitMapY;local fu=OrbitMapSize;local fv=4;ft=ft+fv;local fw=15;local dx=fs+fu+fs/2+fv;local en=ft+fu/2+5+fv;local fx,fy,fz,fA;fx=fu/4;fA=0;dw[#dw+1]=[[<g class="pbright txtorb txtmid">]]dw[#dw+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fu+fs*2,fu+ft,fv,fv)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fz=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fx*2)fy=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fz*(1-orbit.eccentricity)fA=fx-orbit.periapsis.altitude/fz-planet.radius/fz;local fB=""if orbit.periapsis.altitude<=0 then fB='redout'end;dw[#dw+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fB,fs+fu/2+fA+fv,ft+fu/2+fv,fx,fy)dw[#dw+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fs+fu/2+fv,ft+fu/2+fv,planet.radius/fz)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dw[#dw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dx-35,en-5,fs+fu/2+fx+fA,en-5)dw[#dw+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],dx,en)en=en+fw;local fj,cm=ci(orbit.apoapsis.altitude)dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,fj..cm)en=en+fw;dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,dc(orbit.timeToApoapsis))en=en+fw;dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,fq(orbit.apoapsis.speed))end;en=ft+fu/2+5+fv;dx=fs-fs/2+10+fv;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dw[#dw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dx+35,en-5,fs+fu/2-fx+fA,en-5)dw[#dw+1]=e([[<text x="%f" y="%f">Periapsis</text>]],dx,en)en=en+fw;local fj,cm=ci(orbit.periapsis.altitude)dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,fj..cm)en=en+fw;dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,dc(orbit.timeToPeriapsis))en=en+fw;dw[#dw+1]=e([[<text x="%f" y="%f">%s</text>]],dx,en,fq(orbit.periapsis.speed))end;dw[#dw+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fs+fu/2+fv,20+fv,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fC=orbit.timeToApoapsis/orbit.period*2*math.pi;local fD=fx*math.cos(fC)local fE=fy*math.sin(fC)dw[#dw+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fs+fu/2+fD+fA+fv,ft+fu/2+fE+fv)end;dw[#dw+1]=[[</g>]]return dw else return dw end end;local function fF(dw)local function fG(fH,fI)for i=1,#fI do table.insert(fH,fI[i])end;return fH end;local dx=50;local en=525;local fJ={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fK={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fL={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fM={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if as then fG(fJ,fK)table.insert(fJ,"---------------------------------------")if VertTakeOff then table.insert(fJ,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif ap~=-1 then if antigrav then if bM then table.insert(fJ,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fJ,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fJ,"Alt-6: Begins Vertical Takeoff.")else table.insert(fJ,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fJ,"G: Begin BrakeLanding or Land")end else fG(fJ,fL)end;if AltitudeHold then table.insert(fJ,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fJ,"---------------------------------------")fG(fJ,fM)dw[#dw+1]=[[<g class="pdim txt txtstart">]]for i=1,#fJ do en=en+10;dw[#dw+1]=e([[<text x=%d y="%d">%s</text>]],dx,en,fJ[i])end;dw[#dw+1]="</g>"end;function dq.HUDPrologue(dw)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]local fN=az;local fO=aA;local fP=az;local fQ=aA;if dr()and not brightHud then fN=[[rgb(]]..d(D*0.4+0.5)..","..d(F*0.4+0.5)..","..d(E*0.3+0.5)..[[)]]fO=[[rgb(]]..d(D*0.3+0.5)..","..d(F*0.3+0.5)..","..d(E*0.2+0.5)..[[)]]end;dw[#dw+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fN,fN,fP,fP,fO,fO,fQ,fQ,aH,aI)return dw end;function dq.UpdateHud(dw)local ce=au;local bZ=core.getVelocity()local b_=vec3(bZ):len()local fR=getRoll(bJ,bF,bG)local fS=fR/180*math.pi;local fT=math.cos(fS)local fU=math.sin(fS)local cP=cL(bJ,bF,bG*fT+bE*fU)local e5=fR;local ej=cP;local f2=d(unit.getThrottle())local f7=b_*3.6;local f3=unit.getAxisCommandValue(0)local fV=bT(1770)local fW=bV(310)if AtmoSpeedAssist and bO then f3=I;f2=I*100 end;local du=ds()local e6="ROLL"local cF=unit.getClosestPlanetInfluence()>0;if f2==nil then f2=0 end;if not cF then if b_>5 then cP=eL(bZ)fR=eM(bZ)else cP=0;fR=0 end;e6="YAW"end;if H>50000 and not as then local fX;if H>200000 then fX=z(H/200000,2).." su"else fX=z(H/1000,1).." km"end;dw[#dw+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fV,fW,fX)end;dw[#dw+1]=ak;dw[#dw+1]=aE;dw[#dw+1]=aj;if b0%aU==0 then aZ=true end;if fuelX~=0 and fuelY~=0 then dv(dw,aZ,fuelX,"Atmospheric ","ATMO",aN,aX,aY)dv(dw,aZ,fuelX+100,"Space fuel t","SPACE",aO,aV,aW)dv(dw,aZ,fuelX+200,"Rocket fuel ","ROCKET",aP,aS,aT)end;if aZ then aZ=false;b0=0 end;b0=b0+1;dZ(dw,ce)if m()==0 or RemoteHud then if not dr()or brightHud then if cF then e4(dw,centerX,centerY,e5,e6,cF)ei(dw,ej,e5,centerX,centerY,cF,d(eM(bZ)),b_)else e4(dw,centerX,centerY,fR,e6,cF)ei(dw,cP,fR,centerX,centerY,cF,d(fR),b_)end;eq(dw,ce,cF)eN(dw,bZ,b_,centerX,centerY)end end;f1(dw,du,f2,f3)f6(dw,f7)fa(dw)fr(dw)if showHelp then fF(dw)end;if screen_2 then local fY=bK;local dx=960+fY.x/b3;local en=450+fY.y/b4;screen_2.moveContent(b5,(dx-80)/19.2,(en-80)/10.8)end;return dw end;function dq.HUDEpilogue(dw)dw[#dw+1]="</svg>"return dw end;function dq.DrawOdometer(dw,ab,TotalDistanceTravelled,ac,fZ)local f_=bT(1240)local g0=bV(55)local g1=g0+10;local bX=core.g()local g2=0;local g3=0;local g4=0;local du=ds()if VertTakeOffEngine then du=du.."-VERTICAL"end;if TurnBurn then du="TB-"..du end;bW(bX)if as then g4=LastMaxBrakeInAtmo else g4=LastMaxBrake end;maxThrust=Nav:maxForceForward()aL=l()if not ShowOdometer then return end;local g5=vec3(core.getWorldAcceleration()):len()/9.80665;bX=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bX>0.1 then g3=aL*bX;g2=maxThrust/bX end;dw[#dw+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then f_=bT(1120)g0=bV(55)g1=g0+10 elseif as then local g6=bT(770)dw[#dw+1]=e([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],g6,g0,g6,g1,at)end;dw[#dw+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],f_,g0,f_,g1,bX/9.80665,f_,g0+20,f_,g1+20,g5)dw[#dw+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bT(660),bT(700),bV(35),bT(960),bV(55),bT(1240),bV(35),bT(1280))if m()==0 or RemoteHud then dw[#dw+1]=e([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bT(700),bV(20),ab,bT(700),bV(30),TotalDistanceTravelled/1000,bT(830),bV(20),dc(ac),bT(830),bV(30),dc(TotalFlightTime),bT(970),bV(20),aL/1000,bT(1240),bV(10),g4/1000,bT(1240),bV(30),maxThrust/1000,bT(960),bV(180),du)if bX>0.1 then dw[#dw+1]=e([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bT(970),bV(30),g2/1000,bT(1240),bV(20),g3/1000)else dw[#dw+1]=e([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bT(970),bV(30),bT(1240),bV(20))end else dw[#dw+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bT(960),bV(33),du)end;dw[#dw+1]="</g>"return dw end;function dq.DrawWarnings(dw)return fa(dw)end;function dq.DisplayOrbitScreen(dw)return fr(dw)end;function dq.DisplayMessage(dw,fj)if fj~="empty"then dw[#dw+1]=[[<text class="msg" x="50%%" y="310" >]]for g7 in string.gmatch(fj,"([^\n]+)")do dw[#dw+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],g7)end;dw[#dw+1]=[[</text>]]end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function dq.DrawDeadZone(dw)dw[#dw+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return dq end;local function g8()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function g9()local function ga(gb)return type(gb)=='number'end;local function gc(gb)return type(tonumber(gb))=='number'end;local function gd(ge)return type(ge)=='table'end;local function gf(gg)return type(gg)=='string'end;local function gh(bU)return gd(bU)and ga(bU.x and bU.y and bU.z)end;local function gi(gj)return gd(gj)and ga(gj.latitude and gj.longitude and gj.altitude and gj.bodyId and gj.systemId)end;local gk=math.pi/180;local gl=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gm='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gn=r;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*epsilon end;local function go(gb)local cl=string.gsub(string.reverse(e('%.4f',gb)),'^0*%.?','')return cl==''and'0'or string.reverse(cl)end;local function gp(gq)if gh(gq)then return e('{x=%.3f,y=%.3f,z=%.3f}',gq.x,gq.y,gq.z)end;if gd(gq)and not getmetatable(gq)then local gr={}local gs=next(gq)if type(gs)=='nil'or gs==1 then gr=gq else for c2,bU in pairs(gq)do local bQ=gp(bU)if type(c2)=='number'then table.insert(gr,e('[%s]=%s',c2,bQ))else table.insert(gr,e('%s=%s',c2,bQ))end end end;return e('{%s}',table.concat(gr,','))end;if gf(gq)then return e("'%s'",gq:gsub("'",[[\']]))end;return tostring(gq)end;local gt={}gt.__index=gt;gt.__tostring=function(gq,gu)local gv={}for c2 in pairs(gq)do table.insert(gv,c2)end;table.sort(gv)local gr={}for _,c2 in ipairs(gv)do local bQ=gp(gq[c2])if type(c2)=='number'then table.insert(gr,e('[%s]=%s',c2,bQ))else table.insert(gr,e('%s=%s',c2,bQ))end end;if gu then return e('%s%s',gu,table.concat(gr,',\n'..gu))end;return e('{%s}',table.concat(gr,','))end;gt.__eq=function(gw,gx)return gw.planetarySystemId==gx.planetarySystemId and gw.bodyId==gx.bodyId and c6(gw.radius,gx.radius)and c6(gw.center.x,gx.center.x)and c6(gw.center.y,gx.center.y)and c6(gw.center.z,gx.center.z)and c6(gw.GM,gx.GM)end;local function gy(gz,gA,gB,cb,gC)assert(gc(gz),'Argument 1 (planetarySystemId) must be a number:'..type(gz))assert(gc(gA),'Argument 2 (bodyId) must be a number:'..type(gA))assert(gc(gB),'Argument 3 (radius) must be a number:'..type(gB))assert(gd(cb),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cb))assert(gc(gC),'Argument 5 (GM) must be a number:'..type(gC))return setmetatable({planetarySystemId=tonumber(gz),bodyId=tonumber(gA),radius=tonumber(gB),center=vec3(cb),GM=tonumber(gC)},gt)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gD)return e('::pos{%d,%d,%s,%s,%s}',gD.systemId,gD.bodyId,go(gD.latitude*gl),go(gD.longitude*gl),go(gD.altitude))end;MapPosition.__eq=function(gw,gx)return gw.bodyId==gx.bodyId and gw.systemId==gx.systemId and c6(gw.latitude,gx.latitude)and c6(gw.altitude,gx.altitude)and(c6(gw.longitude,gx.longitude)or c6(gw.latitude,math.pi/2)or c6(gw.latitude,-math.pi/2))end;local function gE(gF,gA,cf,cg,ce)local gz=gF;if gf(gF)and not cg and not ce and not gA and not cf then gz,gA,cf,cg,ce=o(gF,gm)assert(gz,'Argument 1 (position string) is malformed.')else assert(gc(gz),'Argument 1 (systemId) must be a number:'..type(gz))assert(gc(gA),'Argument 2 (bodyId) must be a number:'..type(gA))assert(gc(cf),'Argument 3 (latitude) must be in degrees:'..type(cf))assert(gc(cg),'Argument 4 (longitude) must be in degrees:'..type(cg))assert(gc(ce),'Argument 5 (altitude) must be in meters:'..type(ce))end;gz=tonumber(gz)gA=tonumber(gA)cf=tonumber(cf)cg=tonumber(cg)ce=tonumber(ce)if gA==0 then return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=gA,systemId=gz},MapPosition)end;return setmetatable({latitude=gk*gn(cf,-90,90),longitude=gk*(cg%360),altitude=ce,bodyId=gA,systemId=gz},MapPosition)end;local gG={}gG.__index=gG;gG.__tostring=function(gq,gu)local gH=gu and gu..'  'local gI={}local gv={}for c2 in pairs(gq)do table.insert(gv,c2)end;table.sort(gv)for _,gJ in ipairs(gv)do bdy=gq[gJ]local gK=gt.__tostring(bdy,gH)if gu then table.insert(gI,e('[%s]={\n%s\n%s}',gJ,gK,gu))else table.insert(gI,e('  [%s]=%s',gJ,gK))end end;if gu then return e('\n%s%s%s',gu,table.concat(gI,',\n'..gu),gu)end;return e('{\n%s\n}',table.concat(gI,',\n'))end;local function gL(gM)local b1={}local pid;for _,bU in pairs(gM)do local gN=bU.planetarySystemId;if type(gN)~='number'then error('Invalid planetary system ID: '..tostring(gN))elseif pid and gN~=pid then error('Mistringmatch planetary system IDs: '..gN..' and '..pid)end;local gO=bU.bodyId;if type(gO)~='number'then error('Invalid body ID: '..tostring(gO))elseif b1[gO]then error('Duplicate body ID: '..tostring(gO))end;setmetatable(bU.center,getmetatable(vec3.unit_x))b1[gO]=setmetatable(bU,gt)pid=gN end;return setmetatable(b1,gG)end;b6={}local function gP(gM)return setmetatable({galaxyAtlas=gM or{}},b6)end;b6.__index=function(ge,i)if type(i)=='number'then local system=ge.galaxyAtlas[i]return gL(system)end;return rawget(b6,i)end;b6.__pairs=function(gq)return function(ge,c2)local gQ,nv=next(ge,c2)return gQ,nv and gL(nv)end,gq.galaxyAtlas,nil end;b6.__tostring=function(gq)local gR={}for _,gS in pairs(gq or{})do local gT=gS:getPlanetarySystemId()local gU=gG.__tostring(gS,'    ')table.insert(gR,e('  [%s]={%s\n  }',gT,gU))end;return e('{\n%s\n}\n',table.concat(gR,',\n'))end;b6.BodyParameters=gy;b6.MapPosition=gE;b6.PlanetarySystem=gL;function b6.createBodyParameters(gV,gA,gW,gX,gY,gZ,g_)assert(gc(gV),'Argument 1 (planetarySystemId) must be a number:'..type(gV))assert(gc(gA),'Argument 2 (bodyId) must be a number:'..type(gA))assert(gc(gW),'Argument 3 (surfaceArea) must be a number:'..type(gW))assert(gd(gX),'Argument 4 (aPosition) must be an array or vec3:'..type(gX))assert(gd(gY),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gY))assert(gc(gZ),'Argument 6 (altitude) must be in meters:'..type(gZ))assert(gc(g_),'Argument 7 (gravityAtPosition) must be number:'..type(g_))local gB=math.sqrt(gW/4/math.pi)local ai=gB+gZ;local h0=vec3(gX)+ai*vec3(gY)local gC=g_*ai*ai;return gy(gV,gA,gB,h0,gC)end;b6.isMapPosition=gi;function b6:getPlanetarySystem(gF)if i==nil then i=0 end;if nv==nil then nv=0 end;local gV=gF;if gi(gF)then gV=gF.systemId end;if type(gV)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gG then system=gL(system)end;return system end end end;function gG:castIntersections(h1,cX,h2,h3)local h2=h2 or function(fn)return 1.05*fn.radius end;local h4={}if h3 then for _,i in ipairs(h3)do h4[i]=self[i]end else h3={}for c2,fn in pairs(self)do table.insert(h3,c2)h4[c2]=fn end end;local function h5(h6,h7)local h8=h4[h6].center-h1;local h9=h4[h7].center-h1;return h8:len()<h9:len()end;table.sort(h3,h5)local ha=cX:normalize()for i,gN in ipairs(h3)do local fn=h4[gN]local hb=fn.center-h1;local gB=h2(fn)local hc=hb:dot(ha)local hd=hc^2-(hb:len2()-gB^2)if hd>=0 then local he=math.sqrt(hd)local fl=hc+he;local fm=hc-he;if fm>0 then return fn,fl,fm elseif fl>0 then return fn,fl,nil end end end;return nil,nil,nil end;function gG:closestBody(hf)assert(type(hf)=='table','Invalid coordinates.')local hg,fn;local hh=vec3(hf)for _,hi in pairs(self)do local hj=(hi.center-hh):len2()if(not fn or hj<hg)and hi.name~="Space"then fn=hi;hg=hj end end;return fn end;function gG:convertToBodyIdAndWorldCoordinates(gF)local hk=gF;if gf(gF)then hk=gE(gF)end;if hk.bodyId==0 then return 0,vec3(hk.latitude,hk.longitude,hk.altitude)end;local hi=self:getBodyParameters(hk)if hi then return hk.bodyId,hi:convertToWorldCoordinates(hk)end end;function gG:getBodyParameters(gF)local gA=gF;if gi(gF)then gA=gF.bodyId end;assert(gc(gA),'Argument 1 (bodyId) must be a number:'..type(gA))return self[gA]end;function gG:getPlanetarySystemId()local _,bU=next(self)return bU and bU.planetarySystemId end;function gt:convertToMapPosition(cb)assert(gd(cb),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cb))local cc=vec3(cb)if self.bodyId==0 then return setmetatable({latitude=cc.x,longitude=cc.y,altitude=cc.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cd=cc-self.center;local ai=cd:len()local ce=ai-self.radius;local cf=0;local cg=0;if not c6(ai,0)then local ch=n(cd.y,cd.x)cg=ch>=0 and ch or 2*math.pi+ch;cf=math.pi/2-math.acos(cd.z/ai)end;return setmetatable({latitude=cf,longitude=cg,altitude=ce,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gt:convertToWorldCoordinates(gF)local hk=gf(gF)and gE(gF)or gF;if hk.bodyId==0 then return vec3(hk.latitude,hk.longitude,hk.altitude)end;assert(gi(hk),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hk.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hk.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local hl=math.cos(hk.latitude)return self.center+(self.radius+hk.altitude)*vec3(hl*math.cos(hk.longitude),hl*math.sin(hk.longitude),math.sin(hk.latitude))end;function gt:getAltitude(cb)return(vec3(cb)-self.center):len()-self.radius end;function gt:getDistance(cb)return(vec3(cb)-self.center):len()end;function gt:getGravity(cb)local hm=self.center-vec3(cb)local hn=hm:len2()return self.GM/hn*hm/math.sqrt(hn)end;return setmetatable(b6,{__call=function(_,...)return gP(...)end})end;function script.onStart()local function ho()local function hp(hq)local hr=dbHud_1.hasKey;for c2,bU in pairs(hq)do if hr(bU)then local cl=f(dbHud_1.getStringValue(bU))if cl~=nil then _G[bU]=cl;aJ=true end end end end;if dbHud_1 then local hr=dbHud_1.hasKey;if not useTheseSettings then hp(a)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5 end;coroutine.yield()hp(b)if aJ then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bn=AtmoSpeedLimit;az=[[rgb(]]..d(D+0.5)..","..d(F+0.5)..","..d(E+0.5)..[[)]]aA=[[rgb(]]..d(D*0.9+0.5)..","..d(F*0.9+0.5)..","..d(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hs()local function ht(hu,hv)if hu>hv then hv=hu end;if ContainerOptimization>0 then hv=hv-hv*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hv=hv-hv*FuelTankOptimization*0.05 end;return hv end;local hw=core.getElementNameById;local hx=fuelX~=0 and fuelY~=0;for c2 in pairs(av)do local type=core.getElementTypeById(av[c2])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(av[c2])),'^.*vertical.*$')then bL=true end end;if o(type,'^.*Space Engine$')then bB=true;if o(tostring(core.getElementTagsById(av[c2])),'^.*vertical.*$')then local hy=core.getElementRotationById(av[c2])if hy[4]<0 then if p(-hy[4],0.1)==0.5 then bz=true end else if p(hy[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hz=h(av[c2])if hz>10000 then a_=128 elseif hz>1000 then a_=64 elseif hz>150 then a_=32 end end;aQ=aQ+h(av[c2])if hx and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hz=h(av[c2])local hA=k(av[c2])local hu=0;local dU=q()if type=="Atmospheric Fuel Tank"then local hv=400;local hB=35.03;if hz>10000 then hv=51200;hB=5480 elseif hz>1300 then hv=6400;hB=988.67 elseif hz>150 then hv=1600;hB=182.67 end;hu=hA-hB;if fuelTankHandlingAtmo>0 then hv=hv+hv*fuelTankHandlingAtmo*0.2 end;hv=ht(hu,hv)aN[#aN+1]={av[c2],hw(av[c2]),hv,hB,hu,dU}end;if type=="Rocket Fuel Tank"then local hv=320;local hB=173.42;if hz>65000 then hv=40000;hB=25740 elseif hz>6000 then hv=5120;hB=4720 elseif hz>700 then hv=640;hB=886.72 end;hu=hA-hB;if fuelTankHandlingRocket>0 then hv=hv+hv*fuelTankHandlingRocket*0.1 end;hv=ht(hu,hv)aP[#aP+1]={av[c2],hw(av[c2]),hv,hB,hu,dU}end;if type=="Space Fuel Tank"then local hv=2400;local hB=182.67;if hz>10000 then hv=76800;hB=5480 elseif hz>1300 then hv=9600;hB=988.67 end;hu=hA-hB;if fuelTankHandlingSpace>0 then hv=hv+hv*fuelTankHandlingSpace*0.2 end;hv=ht(hu,hv)aO[#aO+1]={av[c2],hw(av[c2]),hv,hB,hu,dU}end end end;if not bL then VertTakeOff,VertTakeOffEngine=false,false end end;local function hC()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(as or not as and au<10000)then for _,bU in pairs(door)do bU.toggle()end end;if switch then for _,bU in pairs(switch)do bU.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,bU in pairs(forcefield)do bU.toggle()end end;if antigrav then bM=antigrav.getState()==1;if bM and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hD=dh()if hD~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then s:setTargetGroundAltitude(bf)if bf==0 and not S then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if as and hD~=-1 then b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function hE(hF,hG,hH,hI,dx,en,hJ,hK,hL)local hM={enableName=hF,disableName=hG,width=hH,height=hI,x=dx,y=en,toggleVar=hJ,toggleFunction=hK,drawCondition=hL,hovered=false}table.insert(aG,hM)return hM end;local function hN()local function hO()if dbHud_1 then local position=bK;local dN=planet.name..". "..#SavedLocations;if radar_1 then local gN,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gN~=nil and gN~=""then dN=dN.." "..radar_1.getConstructName(gN)end end;local cJ={}cJ={position=position,name=dN,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cJ;table.insert(b1[0],cJ)c1()a2="Location saved as "..dN else a2="Databank must be installed to save locations"end end;local function hP()TurnBurn=not TurnBurn end;local function hQ(hR)if hR==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hS()hQ(1)end;local function hT()local cI=-1;cI=cn(b1[0])if cI>-1 then table.remove(b1[0],cI)end;cI=-1;cI=cn(SavedLocations)if cI~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cI)end;cA()c1()end;local function hU()local dN=AutopilotTargetName;if dN==nil then local fj,cm=ci((bK-CustomTarget.position):len())dN=CustomTarget.name.." "..fj..cm end;if dN==nil then dN="None"end;return"Engage Autopilot: "..dN end;local function hV()local dN=AutopilotTargetName;if dN==nil then dN=CustomTarget.name end;if dN==nil then dN="None"end;return"Disable Autopilot: "..dN end;local hW=50;local hX=260;local hY=hE("Enable Brake Toggle","Disable Brake Toggle",hX,hW,aH/2-hX/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hE("Align Prograde","Disable Prograde",hX,hW,aH/2-hX/2-50-hY.width,aI/2-hW+380,function()return ProgradeIsOn end,hS)hE("Align Retrograde","Disable Retrograde",hX,hW,aH/2-hX/2+hY.width+50,aI/2-hW+380,function()return RetrogradeIsOn end,hQ,function()return at==0 end)local hZ=hE(hU,hV,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,cC)hE("Save Position","Save Position",200,hZ.height,hZ.x+hZ.width+30,hZ.y,function()return false end,hO,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hE("Update Position","Update Position",200,hZ.height,hZ.x+hZ.width+30,hZ.y,function()return false end,cG,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hE("Clear Position","Clear Position",200,hZ.height,hZ.x-200-30,hZ.y,function()return true end,hT,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hW=60;hX=300;local dx=10;local en=aI/2-500;hE("Show Help","Hide Help",hX,hW,dx,en,function()return showHelp end,function()showHelp=not showHelp end)local en=aI/2-300;hE("Enable Turn and Burn","Disable Turn and Burn",hX,hW,dx,en,function()return TurnBurn end,hP)hE("Horizontal Takeoff Mode","Vertical Takeoff Mode",hX,hW,dx+hX+20,en,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bL end)en=en+hW+20;hE("Show Orbit Display","Hide Orbit Display",hX,hW,dx,en,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hE("Engage Orbiting","Cancel Orbiting",hX,hW,dx+hX+20,en,function()return IntoOrbit end,cu,function()return at==0 and unit.getClosestPlanetInfluence()>0 end)en=en+hW+20;hE("Glide Re-Entry","Cancel Glide Re-Entry",hX,hW,dx,en,function()return Reentry end,function()am=true;hS()end,function()return planet.hasAtmosphere and not as end)hE("Parachute Re-Entry","Cancel Parachute Re-Entry",hX,hW,dx+hX+20,en,function()return Reentry end,d6,function()return planet.hasAtmosphere and not as end)en=en+hW+20;hE("Engage Follow Mode","Disable Follow Mode",hX,hW,dx,en,function()return a0 end,cw,function()return m()==1 end)hE("Enable Repair Arrows","Disable Repair Arrows",hX,hW,dx+hX+20,en,function()return aR end,function()aR=not aR;if aR then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)en=en+hW+20;if not ExternalAGG then hE("Enable AGG","Disable AGG",hX,hW,dx,en,function()return bM end,db,function()return antigrav~=nil end)end;en=en+hW+20;hE(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,hX*2,hW,dx,en,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function h_()local i0=nil;local i1=nil;local i2=nil;local i3=nil;b1=g8()for c2,bU in pairs(b1[0])do if i0==nil or bU.center.x<i0 then i0=bU.center.x end;if i1==nil or bU.center.x>i1 then i1=bU.center.x end;if i2==nil or bU.center.y<i2 then i2=bU.center.y end;if i3==nil or bU.center.y>i3 then i3=bU.center.y end end;b2=""local i4=1.1*(i1-i0)/1920;local i5=1.4*(i3-i2)/1080;for c2,bU in pairs(b1[0])do local dx=960+bU.center.x/i4;local en=540+bU.center.y/i5;b2=b2 ..'<circle cx="'..dx..'" cy="'..en..'" r="'..bU.radius/i4*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not o(bU.name,"Moon")and not o(bU.name,"Sanctuary")and not o(bU.name,"Space")then b2=b2 .."<text x='"..dx.."' y='"..en+bU.radius/i4*30+20 .."' font-size='28' fill="..az.." text-anchor='middle' font-family='Montserrat'>"..bU.name.."</text>"end end;local fY=bK;local dx=960+fY.x/i4;local en=540+fY.y/i5;b2=b2 ..'<circle cx="'..dx..'" cy="'..en..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='"..dx.."' y='"..en-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b2=b2 ..[[</svg>]]b3=i4;b4=i5;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b2)local fY=bK;local dx=960+fY.x/i4;local en=540+fY.y/i5;b2='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='80' y='105' font-size='18' fill="..az.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b5=screen_2.addContent((dx-80)/19.20,(en-80)/10.80,b2)end end;local function i6()for c2,bU in pairs(SavedLocations)do table.insert(b1[0],bU)end;c1()end;local function i7()local b8={}local i8=30000000/3600;local i9=i8*i8;local ia=100;local function ib(bU)return 1/math.sqrt(1-bU*bU/i9)end;function b8.computeAccelerationTime(ic,id,ie)local ig=i8*math.asin(ic/i8)return(i8*math.asin(ie/i8)-ig)/id end;function b8.computeDistanceAndTime(ic,ie,ih,ii,ij,ik)ij=ij or 0;ik=ik or 0;local il=ic<=ie;local im=ii*(il and 1 or-1)/ih;local io=-ik/ih;local ip=im+io;if il and ip<=0 or not il and ip>=0 then return-1,-1 end;local iq,ir=0,0;if im~=0 and ij>0 then local ig=math.asin(ic/i8)local is=math.pi*(im/2+io)local it=im*ij;local iu=i8*math.pi;local bU=function(ge)local iv=(is*ge-it*math.sin(math.pi*ge/2/ij)+iu*ig)/iu;local iw=math.tan(iv)return i8*iw/math.sqrt(iw*iw+1)end;local ix=il and function(gg)return gg>=ie end or function(gg)return gg<=ie end;ir=2*ij;if ix(bU(ir))then local iy=0;while c(ir-iy)>0.5 do local ge=(ir+iy)/2;if ix(bU(ge))then ir=ge else iy=ge end end end;local iz=ic;local iA=ir/ia;for iB=1,ia do local b_=bU(iB*iA)iq=iq+(b_+iz)*iA/2;iz=b_ end;if ir<2*ij then return iq,ir end;ic=iz end;local ig=i8*math.asin(ic/i8)local bD=(i8*math.asin(ie/i8)-ig)/ip;local iC=i9*math.cos(ig/i8)/ip;local ai=iC-i9*math.cos((ip*bD+ig)/i8)/ip;return ai+iq,bD+ir end;function b8.computeTravelTime(ic,id,ai)if ai==0 then return 0 end;if id>0 then local ig=i8*math.asin(ic/i8)local iC=i9*math.cos(ig/i8)/id;return(i8*math.acos(id*(iC-ai)/i9)-ig)/id end;if ic==0 then return-1 end;assert(ic>0,'Acceleration and initial speed are both zero.')return ai/ic end;function b8.lorentz(bU)return ib(bU)end;return b8 end;local function iD()local vec3=require('cpml.vec3')local g9=g9()local function gf(gg)return type(gg)=='string'end;local function gd(ge)return type(ge)=='table'end;local function c6(c7,c8)if c7==0 then return c(c8)<1e-09 end;if c8==0 then return c(c7)<1e-09 end;return c(c7-c8)<math.max(c(c7),c(c8))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ce)assert(self.body)local ai=ce+self.body.radius;if not c6(ai,0)then local orbit=math.sqrt(self.body.GM/ai)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gF,bZ)assert(self.body)assert(gd(gF)or gf(gF))assert(gd(bZ))local fY=(gf(gF)or g9.isMapPosition(gF))and self.body:convertToWorldCoordinates(gF)or vec3(gF)local bU=vec3(bZ)local iE=fY-self.body.center;local h9=bU:len2()local iF=iE:len()local iG=self.body.GM;local iH=((h9-iG/iF)*iE-iE:dot(bU)*bU)/iG;local c7=iG/(2*iG/iF-h9)local iI=iH:len()local ha=iH:normalize()local iJ=c7*(1-iI)local iK=c7*(1+iI)local iL=iJ*ha+self.body.center;local iM=iI<=1 and-iK*ha+self.body.center or nil;local iN=math.sqrt(c7*iG*(1-iI*iI))local iO=iM and 2*math.pi*math.sqrt(c7^3/iG)local iP=math.acos(iH:dot(iE)/(iI*iF))if iE:dot(bU)<0 then iP=-(iP-2*math.pi)end;local iQ=math.acos((math.cos(iP)+iI)/(1+iI*math.cos(iP)))local iR=iQ;if iR<0 then iR=iR+2*math.pi end;local iS=iR-iI*math.sin(iR)local iT=0;local iU=0;local iV=0;if iO~=nil then iT=iS/(2*math.pi/iO)iU=iO-iT;iV=iU+iO/2;if iP-math.pi>0 then iU=iT;iV=iU+iO/2 end;if iV>iO then iV=iV-iO end end;return{periapsis={position=iL,speed=iN/iJ,circularOrbitSpeed=math.sqrt(iG/iJ),altitude=iJ-self.body.radius},apoapsis=iM and{position=iM,speed=iN/iK,circularOrbitSpeed=math.sqrt(iG/iK),altitude=iK-self.body.radius},currentVelocity=bU,currentPosition=fY,eccentricity=iI,period=iO,eccentricAnomaly=iQ,meanAnomaly=iS,timeToPeriapsis=iU,timeToApoapsis=iV}end;local function iW(iX)local hi=g9.BodyParameters(iX.planetarySystemId,iX.bodyId,iX.radius,iX.center,iX.GM)return setmetatable({body=hi},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iW(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})ho()coroutine.yield()hs()coroutine.yield()hC()hN()coroutine.yield()h_()b6=g9()b7=b6(g8())b8=i7()ba=iD()bb=dp()i6()c1()cx()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,bU in pairs(door)do bU.toggle()end end;if switch then for _,bU in pairs(switch)do bU.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,bU in pairs(forcefield)do bU.toggle()end end;dk()if button then button.activate()end;local cE=c9(planet,bK)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end;function script.onTick(iY)local iZ=system.createData;local i_=system.createWidget;local function j0()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=i_(panelInterplanetary,"value")interplanetaryHeaderText=iZ('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=i_(panelInterplanetary,"value")widgetDistanceText=iZ('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=i_(panelInterplanetary,"value")widgetTravelTimeText=iZ('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=i_(panelInterplanetary,"value")widgetMaxMassText=iZ('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=i_(panelInterplanetary,"value")widgetTargetOrbitText=iZ('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=i_(panelInterplanetary,"value")widgetCurBrakeDistanceText=iZ('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=i_(panelInterplanetary,"value")widgetCurBrakeTimeText=iZ('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=i_(panelInterplanetary,"value")widgetMaxBrakeDistanceText=iZ('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=i_(panelInterplanetary,"value")widgetMaxBrakeTimeText=iZ('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=i_(panelInterplanetary,"value")widgetTrajectoryAltitudeText=iZ('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function j1()u(panelInterplanetary)panelInterplanetary=nil end;local function j2(j3)local gB=500000;local j4,j5,j6=math.huge;local j7=false;local j8=vec3({13771471,7435803,-128971})local j9=18000000;j4=vec3(j3):dist(j8)if j4<j9 then return true,c(j4-j9),"Safe Zone",0 end;j5=vec3(j3):dist(vec3(planet.center))if j5<gB then j7=true end;if c(j5-gB)<c(j4-j9)then return j7,c(j5-gB),planet.name,planet.bodyId else return j7,c(j4-j9),"Safe Zone",0 end end;local function ja(dw)local jb=0;aE=""local jc=aQ;local jd=0;local je=0;local jf=0;local dW=0;local dX=""local jg=core.getElementHitPointsById;for c2 in pairs(av)do local hz=0;local jh=0;jh=h(av[c2])hz=jg(av[c2])jd=jd+hz;if hz<jh then if hz==0 then jf=jf+1 else je=je+1 end;if aR and#aB==0 then position=vec3(core.getElementPositionById(av[c2]))local dx=position.x-a_;local en=position.y-a_;local ji=position.z-a_;table.insert(aB,core.spawnArrowSticker(dx,en,ji+1,"down"))table.insert(aB,core.spawnArrowSticker(dx,en,ji+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(dx+1,en,ji,"north"))table.insert(aB,core.spawnArrowSticker(dx+1,en,ji,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(dx-1,en,ji,"south"))table.insert(aB,core.spawnArrowSticker(dx-1,en,ji,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(dx,en-1,ji,"east"))table.insert(aB,core.spawnArrowSticker(dx,en-1,ji,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(dx,en+1,ji,"west"))table.insert(aB,core.spawnArrowSticker(dx,en+1,ji,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,av[c2])end elseif aR and#aB>0 and aB[11]==av[c2]then for dP in pairs(aB)do core.deleteSticker(aB[dP])end;aB={}end end;jb=d(jd/jc*100)if jb<100 then dw[#dw+1]=[[<g class="pbright txt">]]dW=d(jb*2.55)dX=e("rgb(%d,%d,%d)",255-dW,dW,0)if jb<100 then dw[#dw+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dX,jb)if jf>0 then dw[#dw+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dX,jf,je)elseif je>0 then dw[#dw+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dX,je)end end;dw[#dw+1]=[[<\g>]]end end;local function jj(dw)local jk=d(r(ai/(aH/4)*255,0,255))dw[#dw+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(D+0.5)+jk,d(F+0.5)-jk,d(E+0.5)-jk)end;local function jl()local jm=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()return jm end;local function jn()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local b_=bI;local jo=unit.getThrottle()/100;if AtmoSpeedAssist then jo=I end;local jp,jq=b8.computeDistanceAndTime(bI,MaxGameVelocity,l(),Nav:maxForceForward()*jo,warmup,0)local a6,a7;if not TurnBurn then a6,a7=d9(MaxGameVelocity)else a6,a7=da(MaxGameVelocity)end;local _,jr;if not TurnBurn and b_>0 then _,jr=d9(b_)else _,jr=da(b_)end;local js=0;local jt=0;if AutopilotCruising or not Autopilot and b_>5 then jt=b8.computeTravelTime(b_,0,AutopilotDistance)elseif a6+jp<AutopilotDistance then js=AutopilotDistance-(a6+jp)jt=b8.computeTravelTime(8333.0556,0,js)else local ju=(AutopilotDistance-a6)/jp;jp=AutopilotDistance-a6;jq=jq*ju end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return jt elseif AutopilotBraking then return jr elseif AutopilotCruising then return jt+jr else return jq+a7+jt end end;local function jv()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jw()if radar_1 then local jx=radar_1.getEntries()local jy=radar_1.getData()local jz=bT(1770)local jA=bV(330)if#jx>0 then local jB=jy:find('identifiedConstructs":%[%]')if jB==nil and perisPanelID==nil then al=1;cp()end;if jB~=nil and perisPanelID~=nil then cp()end;if radarPanelID==nil then cp()end;aj=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jz,jA,#jx)local jC={}for c2,bU in pairs(jx)do if radar_1.hasMatchingTransponder(bU)==1 then table.insert(jC,bU)end end;if#jC>0 then local en=bV(15)local dx=bT(1370)aj=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aj,dx,en)for c2,bU in pairs(jC)do en=en+20;aj=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aj,dx,en,radar_1.getConstructName(bU))end end else local jD;jD=jy:find('worksInEnvironment":false')if jD then aj=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jz,jA)else aj=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jz,jA)end;if radarPanelID~=nil then al=0;cp()end end end end;local function jE()local dU=q()local f7=bI;local jF=dU-aw;if f7>1.38889 then f7=f7/1000;local jG=f7*(dU-aw)TotalDistanceTravelled=TotalDistanceTravelled+jG;ab=ab+jG end;ac=ac+jF;TotalFlightTime=TotalFlightTime+jF;aw=dU end;local function jH()for _,bU in pairs(aG)do if bU.hovered then if not bU.drawCondition or bU.drawCondition()then bU.toggleFunction()end;bU.hovered=false end end end;local function jI()local function jJ(jK,jL,dx,en,hH,hI)if jK>dx and jK<dx+hH and jL>en and jL<en+hI then return true else return false end end;local dx=af+aH/2;local en=ag+aI/2;for _,bU in pairs(aG)do bU.hovered=jJ(dx,en,bU.x,bU.y,bU.width,bU.height)end end;local function jM(dw)local function jN(dw,jO,hover,dx,en,iv,jP,jQ,jR,jS,jT)if type(jS)=="function"then jS=jS()end;if type(jT)=="function"then jT=jT()end;dw[#dw+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",dx,en,iv,jP)if jO then dw[#dw+1]=e("%s'",jQ)else dw[#dw+1]=jR end;if hover then dw[#dw+1]=" style='stroke:white; stroke-width:2'"else dw[#dw+1]=" style='stroke:black; stroke-width:1'"end;dw[#dw+1]="></rect>"dw[#dw+1]=e("<text x='%f' y='%f' font-size='24' fill='",dx+iv/2,en+jP/2+5)if jO then dw[#dw+1]="black"else dw[#dw+1]="white"end;dw[#dw+1]="' text-anchor='middle' font-family='Montserrat'>"if jO then dw[#dw+1]=e("%s</text>",jS)else dw[#dw+1]=e("%s</text>",jT)end end;local jU="rgb(50,50,50)'"local jV="rgb(210,200,200)"local jW=jN;for _,bU in pairs(aG)do local hG=bU.disableName;local hF=bU.enableName;if type(hG)=="function"then hG=hG()end;if type(hF)=="function"then hF=hF()end;if not bU.drawCondition or bU.drawCondition()then jW(dw,bU.toggleVar(),bU.hovered,bU.x,bU.y,bU.width,bU.height,jV,jU,hG,hF)end end end;if iY=="tenthSecond"then if at>0 and not WasInAtmo then if not bO and AtmoSpeedAssist and(AltitudeHold or Reentry)then bP(1)M=false end end;if bN~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bN then bS(bN,TRUE)else bN=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then j0()end;if AutopilotTargetName~=nil then local jX=CustomTarget~=nil;planetMaxMass=jl()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=jn()if jX and not Autopilot then ai=(bK-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a6,a7=d9(bI)a8,a9=d9(MaxGameVelocity)else a6,a7=da(bI)a8,a9=da(MaxGameVelocity)end;local fj,cm=ci(ai)v(widgetDistanceText,'{"label": "distance", "value": "'..fj..'", "unit":"'..cm..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..dc(travelTime)..'", "unit":""}')fj,cm=ci(a6)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..fj..'", "unit":"'..cm..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..dc(a7)..'", "unit":""}')fj,cm=ci(a8)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..fj..'", "unit":"'..cm..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..dc(a9)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')fj,cm=ci(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",fj)..'", "unit":"'..cm..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else j1()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iY=="oneSecond"then aq=false;bW(nil,true)jE()jw()jv()local dw={}dw=bb.DrawOdometer(dw,ab,TotalDistanceTravelled,ac)if ShouldCheckDamage then ja(dw)end;ak=table.concat(dw,"")collectgarbage("collect")elseif iY=="fiveSecond"then ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local cl=f(dbHud_1.getStringValue("SavedLocations"))if cl~=nil then _G["SavedLocations"]=cl;local cI=-1;local cJ;for c2,bU in pairs(SavedLocations)do if bU.name and bU.name=="SatNav Location"then cI=c2;break end end;if cI~=-1 then cJ=SavedLocations[cI]cI=-1;for c2,bU in pairs(b1[0])do if bU.name and bU.name=="SatNav Location"then cI=c2;break end end;if cI>-1 then b1[0][cI]=cJ end;c1()a2=cJ.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cx()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iY=="msgTick"then local dw={}bb.DisplayMessage(dw,"empty")a2="empty"unit.stopTimer("msgTick")ah=3 elseif iY=="animateTick"then bd=true;bc=false;af=0;ag=0;unit.stopTimer("animateTick")elseif iY=="hudTick"then local dw={}bb.HUDPrologue(dw)if showHud then bb.UpdateHud(dw)else bb.DisplayOrbitScreen(dw)bb.DrawWarnings(dw)end;bb.HUDEpilogue(dw)dw[#dw+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aH,aI)if a2~="empty"then bb.DisplayMessage(dw,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bb.DrawDeadZone(dw)end end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then jI()jM(dw)if screen_1.getMouseState()==1 then jH()end;dw[#dw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)elseif y()==0 then if m()==1 and a1 then jI()jM(dw)if not bc and not bd then local jY=table.concat(dw,"")dw={}dw[#dw+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dw[#dw+1]=b2;dw[#dw+1]=jY;dw[#dw+1]="</body>"bc=true;dw[#dw+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dw,"")system.setScreen(content)elseif bd then local jY=table.concat(dw,"")dw={}dw[#dw+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dw[#dw+1]=b2;dw[#dw+1]=jY;dw[#dw+1]="</body>"end;if not bc then dw[#dw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end else jH()end else if not a1 and m()==0 then jH()if ai>DeadZone then if DisplayDeadZone then jj(dw)end end else jI()jM(dw)end;dw[#dw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end;dw[#dw+1]=[[</svg></body>]]content=table.concat(dw,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iY=="apTick"then as=j()>0;at=j()au=core.getAltitude()if antigrav then bM=antigrav.getState()==1 end;bD=q()local jZ=bD-bj;bj=bD;local fR=getRoll(bJ,bF,bG)local fS=fR/180*math.pi;local fT=math.cos(fS)local fU=math.sin(fS)local j_=cL(bJ,bF,bG*fT+bE*fU)local k0=-math.deg(cQ(bE,bH,bF))local k1=math.deg(cQ(bG,bH,bF))local k2=1;local k3=1;bi=as and k0<-YawStallAngle or k0>YawStallAngle or k1<-PitchStallAngle or k1>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not a1 then bh=-bh end;V=0;Z=0;U=0;sys=b7[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=ba(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)if au==0 then au=(bK-planet.center):len()-planet.radius end;ap=cq()local bX=planet:getGravity(core.getConstructWorldPos()):len()*l()bk=0;b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not as then G,H,_,_=j2(bK)else G=true end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then af=screen_1.getMouseX()*aH;ag=screen_1.getMouseY()*aI elseif y()==0 then if m()==1 and a1 then if not bc then af=af+bg;ag=ag+bh end else af=0;ag=0 end else af=af+bg;ag=ag+bh;ai=math.sqrt(af*af+ag*ag)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then V=V-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then V=V-(af+DeadZone)*MouseXSensitivity else V=0 end;if ag>0 and ag>DeadZone then U=U-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then U=U-(ag+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then af=0;ag=0;U=(-utils.smoothstep(bh,-100,100)+0.5)*2*k2;V=(-utils.smoothstep(bg,-100,100)+0.5)*2*k3 else af=0;ag=0 end end end;local k4=bI>8334;if bI>SpaceSpeedLimit/3.6 and not as and not Autopilot and not k4 then a2="Space Speed Engine Shutoff reached"bP(0)end;if not k4 and LastIsWarping then if not BrakeIsOn then cU()end;if Autopilot then cC()end end;LastIsWarping=k4;if as and at>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bI<bn/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local k5=false;if CustomTarget~=nil then k5=cY(CustomTarget.position-bK,0.01)else k5=cY(vec3(bH),0.01)end;be=true;if k5 and(c(fR)<2 or c(j_)>85)and bI>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d6()elseif as and AtmoSpeedAssist then bP(1)else bS(d(bn))end elseif bI>Q then cY(vec3(bH),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bI>Q then cY(-vec3(bH))end end;if not ProgradeIsOn and am and not IntoOrbit then if at==0 then R=true;d6()am=false;ao=true else am=false;cC()end end;local cB=bJ*-1;local d_=bH.x*cB.x+bH.y*cB.y+bH.z*cB.z;if ao and CustomTarget~=nil and(au<HoldAltitude+200 and au>HoldAltitude-200)and bI*3.6>bn-100 and c(d_)<20 and at>=0.1 and(CustomTarget.position-bK):len()>2000+au then cC()ao=false end;if VertTakeOff then be=true;local k6=HoldAltitude;if d_<-30 then a2="Unable to achieve lift. Safety Landing."ae=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bM or HoldAltitude<planet.spaceEngineMinAltitude then if bM then k6=antigrav.getBaseAltitude()end;if au<k6-100 then bo=0;ae=15;BrakeIsOn=false elseif d_>0 then BrakeIsOn=true;ae=0 elseif d_<-30 then BrakeIsOn=true;ae=15 elseif au>=k6 then if bM then if Autopilot or VectorToTarget then ct()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"ct()end;ae=0 end else if at>0.08 then bo=0;BrakeIsOn=false;ae=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bA then bo=0;ae=20 else ae=0;bo=36;bS(3500)end else be=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;bw=k6;bv=true;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k7=r(bo-j_,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k7)local k8=r(vTpitchPID:get(),-1,1)U=k8 end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=aa else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius+bx.noAtmosphericDensityAltitude+1000)else bw=math.floor(bx.radius+bx.surfaceMaxAltitude+1000)end;bv=true end;local d3;local k9=false;local ka,kb=ci(bw)local kc=ka..kb;if bu.VectorToTarget then d3=CustomTarget.position-bK end;local kd,ke=ba(bx):escapeAndOrbitalSpeed((bK-bx.center):len()-bx.radius)local kf=fR;if not bs then bP(0)br=0;bp="Aligning to orbital path - OrbitHeight: "..kc;local kg=false;local kh=false;if bu.VectorToTarget then cY(d3:normalize():project_on_plane(bJ))k9=bF:dot(d3:project_on_plane(bE):normalize())>0.95 else cY(bH)k9=k0<0.5;if bI<150 then k9=true end end;U=0;bq=0;if j_<=bq+1 and j_>=bq-1 then kg=true else kg=false end;if kf<=br+1 and kf>=br-1 then kh=true else kh=false end;if kg and kh and k9 then bq=nil;br=nil;bs=true end else if bu.VectorToTarget then cY(d3:normalize():project_on_plane(bJ))elseif bI>150 then cY(bH)end;U=0;if bu.VectorToTarget then local a6,_=b8.computeDistanceAndTime(bI,bn/3.6,l(),0,0,LastMaxBrake)if by and d3:len()>15000+a6+au then bp="Orbiting to Target"elseif by or d3:len()<15000+a6+au then a2="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;R=true;ao=true;bu.VectorToTarget,bu.AutopilotAlign=false,false;cu()d6()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bw*0.9 and au<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;bP(0)by=true;bq=0;if not bu.VectorToTarget then a2="Orbit complete"cu()end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..kc;bt=true;bS(ke*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local ki=d_;local kj=au-bw;local kk=c(kj)if d_<10 and c(j_)<10 and kk<100 then ki=d_*2 end;if ki<10 and c(j_)<10 and kk<100 then ki=ki*2 end;if ki<5 and c(j_)<5 and kk<100 then ki=ki*4 end;VSpdPID:inject(ki)bq=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kj)bq=r(bq-r(OrbitAltPID:get(),-15,15),-90,90)end end else local kl=2.75;local km=c(p(kd*kl))local kn=km%50;if kn>0 then km=km-kn+50 end;BrakeIsOn=false;if au<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..kc;bq=utils.map(d_,200,0,-15,80)elseif au>=bw*0.8 and au<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..kc;km=km*0.75;bq=utils.map(d_,100,-100,-15,65)elseif au>=bw*1.15 and au<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..kc;km=km*0.75;if d_<0 or bt then bq=utils.map(au,bw*1.5,bw*1.01,-30,0)else bq=utils.map(au,bw*0.99,bw*1.5,0,30)end elseif au>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..kc;bq=-85;local ko=utils.map(d_,-150,-400,1,0.55)km=km*ko end;bS(d(km))end end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kp=bq-j_;OrbitPitchPID:inject(kp)local kq=r(OrbitPitchPID:get(),-0.5,0.5)U=kq end end;if Autopilot and at==0 and not am then local kr,ks=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kt=(CustomTarget.position-aa.center):normalize()local ku=kt:project_on_plane((aa.center-bK):normalize()):normalize()local kv=aa.center+ku*(aa.radius+AutopilotTargetOrbit)local kw=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bK-kv):len()<(bK-kw):len()then kr=kv;AutopilotTargetCoords=kr else kr=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))AutopilotTargetCoords=kr end;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)ks=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ks=true;TargetSet=true;AutopilotRealigned=true;kr=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kt=(bK+bH*100000-aa.center):normalize()local ku=kt:project_on_plane((aa.center-bK):normalize()):normalize()if ku:len()<1 then kt=(bK+bF*100000-aa.center):normalize()ku=kt:project_on_plane((aa.center-bK):normalize()):normalize()end;kr=aa.center+ku*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kr;TargetSet=true;ks=true;AutopilotRealigned=true;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end end;AutopilotDistance=(vec3(kr)-bK):len()local fk,fl,fm=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(fn)if fn.noAtmosphericDensityAltitude>0 then return fn.radius+fn.noAtmosphericDensityAltitude else return fn.radius+fn.surfaceMaxAltitude*1.5 end end)local fo=fl;if fm~=nil and fl~=nil then fo=math.min(fm,fl)end;if fo~=nil and fo<AutopilotDistance and fk.name==aa.name then AutopilotDistance=fo end;local k5=true;local kx=(aa.center-(bK+vec3(bH):normalize()*AutopilotDistance)):len()-aa.radius;local fj,cm=ci(kx)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..fj..'", "unit":"'..cm..'"}')local a6,a7;if not TurnBurn then a6,a7=d9(bI)else a6,a7=da(bI)end;if bI>300 and AutopilotAccelerating then local d3=vec3(kr)-bK;local ky=r(math.deg(cQ(bE,bH:normalize(),d3:normalize()))*bI/500,-90,90)local kz=r(math.deg(cQ(bG,bH:normalize(),d3:normalize()))*bI/500,-90,90)if c(ky)<20 and c(kz)<20 then ky=ky*2;kz=kz*2 end;if c(ky)<2 and c(kz)<2 then ky=ky*2;kz=kz*2 end;local k0=-math.deg(cQ(bE,bF,bH:normalize()))local k1=-math.deg(cQ(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kz-k1)local kA=r(apPitchPID:get(),-1,1)U=U+kA;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ky-k0)local kB=r(apYawPID:get(),-1,1)V=V+kB;ks=true;if c(ky)>2 or c(kz)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kx<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(kx)end end;if not AutopilotCruising and not AutopilotBraking and not ks then k5=cY((kr-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then k5=cY(-vec3(bH):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bP(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local jo=unit.getThrottle()if AtmoSpeedAssist then jo=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jo==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bP(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bP(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bP(1,true)end;local _,ke=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local d3;if CustomTarget~=nil then d3=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=ke and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bP(0)P=false;ProgradeIsOn=true;am=true;local cE=c9(aa,AutopilotTargetCoords)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,ke=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bI<=ke then if CustomTarget~=nil then if bH:normalize():dot(d3:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bP(0)P=false;ProgradeIsOn=true;am=true;BrakeIsOn=false;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bP(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;am=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jo=unit.getThrottle()if AtmoSpeedAssist then jo=I end;if jo>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if k5 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif k5 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bP(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bP(0)P=false;ProgradeIsOn=true;am=true;local cE=c9(aa,CustomTarget.position)cE="::pos{"..cE.systemId..","..cE.bodyId..","..cE.latitude..","..cE.longitude..","..cE.altitude.."}"t(cE)end;if a0 then be=true;local kz=0;local fY=bK+vec3(unit.getMasterPlayerRelativePosition())local kC=fY-bK;local kD=vec3(kC):project_on(bF):len()local kE=vec3(kC):project_on(bG):len()local ai=math.sqrt(kD*kD+kE*kE)cY(kC:normalize())local kF=40;local kG=ai<kF;local kH=100;local kI=r((ai-kF)/2,10,kH)U=0;local k5=c(V)<0.1;if k5 and bI<kI and not kG then BrakeIsOn=false;kz=-20 else BrakeIsOn=true;kz=0 end;local kJ=0;if c(kz-j_)>kJ then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kz-j_)local kA=pitchPID:get()U=kA end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cF=unit.getClosestPlanetInfluence()>0;local kK=HoldAltitude-au;local kL=500+bI;local kM=1;if AutoTakeoff then kM=r(bI/100,0.1,1)end;local kz=(utils.smoothstep(kK,-kL,kL)-0.5)*2*MaxPitch*kM;if not Reentry and not am and not VectorToTarget and bF:dot(bH:normalize())<0.99 then kz=(utils.smoothstep(kK,-kL*r(20-19*at*10,1,20),kL*r(20-19*at*10,1,20))-0.5)*2*MaxPitch*r(2-at*10,1,2)*kM end;if not AltitudeHold then kz=0 end;if LockPitch~=nil then if cF and not IntoOrbit then kz=LockPitch else LockPitch=nil end end;be=true;local kN=U;if Reentry then local kO=d(bn)local kP,kQ=b8.computeDistanceAndTime(bI,kO/3.6,l(),0,0,LastMaxBrake-planet.gravity*9.8*l())local kR=au-(planet.noAtmosphericDensityAltitude+5000)if not bO and au>planet.noAtmosphericDensityAltitude+5000 and bI<=kO/3.6 and bI>kO/3.6-10 and c(bH:normalize():dot(bF))>0.9 then bP(0)elseif bO and(kP>-1 and kR<=kP or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bS(kO,true)if not R then kz=-80;if at>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kz=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then be=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then bS(kO)if not bO and s:getTargetSpeed(axisCommandId.longitudinal)==bn then R=false;Reentry=false;be=true end end end;if bI>Q and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cY(vec3(bH))end;if(VectorToTarget or an)and AutopilotTargetIndex>0 and at>0.01 then local d3;if CustomTarget~=nil then d3=CustomTarget.position-bK else d3=aa.center-bK end;local ky=math.deg(cQ(bJ:normalize(),bH,d3))*2;local kS=math.rad(c(fR))if bI>minRollVelocity and at>0.01 then local kT=r(90-kz*2,-90,90)bk=r(ky*2,-kT,kT)local kU=ky;ky=r(r(ky,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kS)+4*(j_-kz)*math.sin(math.rad(fR)),-YawStallAngle*0.80,YawStallAngle*0.80)kz=r(r(kz*math.cos(kS),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(r(c(kU)*math.sin(kS),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bk=0;ky=r(ky,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kV=k0-ky;if not bi and bI>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kV)local kB=r(yawPID:get(),-1,1)V=V+kB elseif as and ap>-1 or bI<minRollVelocity then cY(d3)elseif bi and at>0.01 then if(k0<-YawStallAngle or k0>YawStallAngle)and at>0.01 then cY(bH)end;if(k1<-PitchStallAngle or k1>PitchStallAngle)and at>0.01 then kz=r(j_-k1,j_-PitchStallAngle*0.80,j_+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local k6=planet:getAltitude(CustomTarget.position)local kR=math.sqrt(d3:len()^2-(au-k6)^2)local kW=LastMaxBrakeInAtmo;if kW then kW=kW*r(bI/100,0.1,1)*at else kW=LastMaxBrake end;if at<0.01 then kW=LastMaxBrake end;local kX=bH:len()-c(d_)local kY=vec3(core.getWorldAirFrictionAcceleration())local kZ=math.sqrt(kY:len()-kY:project_on(cB):len())*l()if bI>100 then a6,a7=b8.computeDistanceAndTime(bI,100,l(),0,0,kW+kZ)local k_,l0=b8.computeDistanceAndTime(100,0,l(),0,0,kW/2)a6=a6+k_ else a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kW/2)end;StrongBrakes=true;if not an and not Reentry and kR<=a6+bI*jZ/2 and(bH:project_on_plane(bJ):normalize():dot(d3:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bP(0)if AltitudeHold then cv()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kX<0.1 or kR<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kR)then if not bM then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kR end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local d3=CustomTarget.position-bK;local k6=planet:getAltitude(CustomTarget.position)local kR=math.sqrt(d3:len()^2-(au-k6)^2)local kW=LastMaxBrakeInAtmo;if kW then a6,a7=b8.computeDistanceAndTime(bI,0,l(),0,0,kW/2)StrongBrakes=true;if kR<=a6+bI*jZ/2 and bH:project_on_plane(bJ):normalize():dot(d3:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;d6()end end;LastDistanceToTarget=kR end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or IntoOrbit or Reentry)then if not by and not IntoOrbit then bw=HoldAltitude;bv=true;if VectorToTarget then bu.VectorToTarget=true end;cu()VectorToTarget=false;bs=true end end;if bi and at>0.01 and ap==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then cY(bH)kz=r(j_-k1,j_-PitchStallAngle*0.80,j_+PitchStallAngle*0.80)end;U=kN;local di=-1;if BrakeLanding then kz=0;local l1=false;local l2=30;if b9~=nil and b9>0 then local kZ=0;local fZ=r(at,0.4,2)local kW=LastMaxBrakeInAtmo*r(bI/100,0.1,1)*fZ;local l3=b9*fZ+kW+kZ-bX;local l4=kW/2+kZ-bX;local l5=bI-math.sqrt(c(l4/2)*20/(0.5*l()))*utils.sign(l4)if l5<0 then l5=0 end;local l6;if bI>100 then local l7,_=b8.computeDistanceAndTime(bI,100,l(),0,0,kW)local l8,_=b8.computeDistanceAndTime(100,0,l(),0,0,math.sqrt(kW))l6=l7+l8 else l6=b8.computeDistanceAndTime(bI,0,l(),0,0,math.sqrt(kW))end;if l6<20 then BrakeIsOn=false else local l9=0;if l5>100 then local la,_=b8.computeDistanceAndTime(l5,100,l(),0,0,l3)local lb,_=b8.computeDistanceAndTime(100,0,l(),0,0,b9*fZ+math.sqrt(kW)+kZ-bX)l9=la+lb else l9,_=b8.computeDistanceAndTime(l5,0,l(),0,0,b9*fZ+math.sqrt(kW)+kZ-bX)end;l9=(l9+15+bI*jZ)*1.1;local lc=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lc then local k6=planet:getAltitude(CustomTarget.position)local ld=au-k6-100;local d3=CustomTarget.position-bK;local le=math.sqrt(d3:len()^2-(au-k6)^2)if le>100 then lc=false elseif ld<=l9 or l9==-1 then BrakeIsOn=true;l1=true else BrakeIsOn=false;l1=true end end;if not lc and CalculateBrakeLandingSpeed then if l9>=l2 then BrakeIsOn=true else BrakeIsOn=false end;l1=true end end end;if not bO then bP(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)di=ap;if di>-1 then be=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-cB)<0.999 then BrakeIsOn=true elseif d_<-brakeLandingRate and not l1 then BrakeIsOn=true elseif not l1 then BrakeIsOn=false end end;if AutoTakeoff or an then local fk,fm,fl;if AutopilotTargetCoords~=nil then fk,fm,fl=b7:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(fn)return fn.radius+fn.noAtmosphericDensityAltitude end)end;if bM then if au>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;bP(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kz)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bO and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif an and bI<Q then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;bP(0)elseif an then bP(0)BrakeIsOn=true end elseif an and at==0 and aa~=nil and(fk==nil or fk.name==aa.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bO then bP(0)end;AutopilotAccelerating=true end end;local lf=cq()>-1;local lg=j_;if(VectorToTarget or an)and not lf and bI>minRollVelocity and at>0.01 then local kS=math.rad(c(fR))lg=j_*c(math.cos(kS))+k1*math.sin(kS)end;local lh=r(kz-lg,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then lh=r(kz-lg,-85,MaxPitch)elseif at<0.01 then lh=r(kz-lg,-MaxPitch,MaxPitch)end;if c(fR)<5 or VectorToTarget or BrakeLanding or lf or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lh)local kA=pitchPID:get()U=U+kA end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function li(lj,kI)local lk=vec3()local ll=vec3()if lj==axisCommandId.longitudinal then lk=vec3(core.getConstructOrientationForward())ll=bF elseif lj==axisCommandId.vertical then lk=vec3(core.getConstructOrientationUp())ll=bE elseif lj==axisCommandId.lateral then lk=vec3(core.getConstructOrientationRight())ll=bG else return vec3()end;local lm=vec3(core.getWorldGravity())local ln=lm:dot(ll)local lo=vec3(core.getWorldAirFrictionAcceleration())local lp=lo:dot(ll)local lq=vec3(core.getVelocity())local lr=lq:dot(lk)local ls=kI*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(ls-lr)local lt=targetSpeedPID2:get()local lu=(lt-lp-ln)*ll;return lu end;local function lv(lj,kI)local lk=vec3()local ll=vec3()if lj==axisCommandId.longitudinal then lk=vec3(core.getConstructOrientationForward())ll=bF elseif lj==axisCommandId.vertical then lk=vec3(core.getConstructOrientationUp())ll=bE elseif lj==axisCommandId.lateral then lk=vec3(core.getConstructOrientationRight())ll=bG else return vec3()end;local lm=vec3(core.getWorldGravity())local ln=lm:dot(ll)local lo=vec3(core.getWorldAirFrictionAcceleration())local lp=lo:dot(ll)local lq=vec3(core.getVelocity())local lr=lq:dot(lk)local ls=kI*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(ls-lr)local lt=targetSpeedPID:get()local lu=(lt-lp-ln)*ll;return lu end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bM and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bO=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bO and M then bP(0)M=false elseif not bO and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lw=r(T+U+system.getControlDeviceForwardInput(),-1,1)local lx=r(W+Z+system.getControlDeviceYawInput(),-1,1)local ly=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local lz=Y;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()local lA=bH:normalize()local lB=getRoll(bJ,bF,bG)local lC=c(lB)local lD=utils.sign(lB)local lE=vec3(core.getWorldAngularVelocity())local lF=lw*pitchSpeedFactor*bG+lx*rollSpeedFactor*bF+ly*yawSpeedFactor*bE;if bJ:len()>0.01 and(at>0.0 or ProgradeIsOn or Reentry or am or AltitudeHold or IntoOrbit)then local fR=getRoll(bJ,bF,bG)local fS=fR/180*math.pi;local fT=math.cos(fS)local fU=math.sin(fS)local j_=cL(bJ,bF,bG*fT+bE*fU)if be==true and c(bk-lB)>autoRollRollThreshold and lx==0 and c(j_)<85 then local lG=bk;local lH=autoRollFactor;if at==0 then lH=lH/4;bk=0;lG=0 end;if rollPID==nil then rollPID=pid.new(lH*0.01,0,lH*0.1)end;rollPID:inject(lG-lB)local lI=rollPID:get()lF=lF+lI*bF end end;if bJ:len()>0.01 and at>0.0 then local lJ=20.0;if turnAssist==true and lC>lJ and lw==0 and ly==0 then local lK=turnAssistFactor*0.1;local lL=turnAssistFactor*0.025;local lM=(lC-lJ)/(180-lJ)*180;local lN=0;if lM<90 then lN=lM/90 elseif lM<180 then lN=(180-lM)/90 end;lN=lN*lN;local lO=-lD*lL*(1.0-lN)local lP=lK*lN;lF=lF+lP*bG+lO*bE end end;local lQ=1;local lR=0;local lS=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bn=r(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bn=r(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(r(I-speedChangeLarge/100,-1,1),2)end end;J=0;local d_=-bJ:dot(bH)if as and AtmoSpeedAssist and bO then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local lT=throttlePID:get()L=r(lT,-1,1)if L<I and at>0.005 then K=true;s:setThrottleCommand(axisCommandId.longitudinal,r(L,0.01,1))else K=false;s:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local lU=r(brakePID:get(),0,1)if at>0 and d_<-80 or at>0.005 then J=lU end;if J>0 then if K and L==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else L=r(L,0.01,1)end;local lV=''local lW=vec3()local lX=li(axisCommandId.vertical,ae*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lX,lR)local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=s:getAxisCommandType(axisCommandId.longitudinal)local l_=s:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)local m0=lv(axisCommandId.lateral,LeftAmount*1000)lV=lV..' , '.."lateral airfoil , lateral ground "lW=lW+m0;if lW:len()>constants.epsilon then Nav:setEngineForceCommand(lV,lW,lR,'','','',lS)end;Nav:setEngineForceCommand(lY,l_,lQ)local m1='thrust analog vertical fueled 'local m2='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m1,lX,lQ)else Nav:setEngineForceCommand(m1,vec3(),lQ)end;if LeftAmount~=0 then Nav:setEngineForceCommand(m2,m0,lQ)else Nav:setEngineForceCommand(m2,vec3(),lQ)end;if lz==0 then lz=J end;local m3=-lz*(brakeSpeedFactor*bH+brakeFlatFactor*lA)Nav:setEngineForceCommand('brake',m3)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,I)end;local kI=unit.getAxisCommandValue(0)if not bO then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-kI/3.6)local lU=r(brakePID:get(),0,1)lz=r(lz+lU,0,1)end;local m3=-lz*(brakeSpeedFactor*bH+brakeFlatFactor*lA)Nav:setEngineForceCommand('brake',m3)local lV=''local lW=vec3()local m4=false;local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=s:getAxisCommandType(axisCommandId.longitudinal)if lZ==axisCommandType.byThrottle then local l_=s:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)Nav:setEngineForceCommand(lY,l_,lQ)elseif lZ==axisCommandType.byTargetSpeed then local l_=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lV=lV..' , '..lY;lW=lW+l_;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m4=true end end;local m2='thrust analog lateral 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;local m5=s:getAxisCommandType(axisCommandId.lateral)if m5==axisCommandType.byThrottle then local m6=s:composeAxisAccelerationFromThrottle(m2,axisCommandId.lateral)Nav:setEngineForceCommand(m2,m6,lQ)elseif m5==axisCommandType.byTargetSpeed then local m0=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lV=lV..' , '..m2;lW=lW+m0 end;local m1='thrust analog vertical 'if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;local m7=s:getAxisCommandType(axisCommandId.vertical)if m7==axisCommandType.byThrottle then local lX=s:composeAxisAccelerationFromThrottle(m1,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(m1,lX,lQ,'airfoil','ground','',lS)else Nav:setEngineForceCommand(m1,vec3(),lQ)Nav:setEngineForceCommand('airfoil vertical',lX,lQ,'airfoil','','',lS)Nav:setEngineForceCommand('ground vertical',lX,lQ,'ground','','',lS)end elseif m7==axisCommandType.byTargetSpeed then if ae<0 then Nav:setEngineForceCommand('hover',vec3(),lQ)end;local m8=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lV=lV..' , '..m1;lW=lW+m8 end;if lW:len()>constants.epsilon then if Y~=0 or m4 or c(lA:dot(bF))<0.8 then lV=lV..', brake'end;Nav:setEngineForceCommand(lV,lW,lR,'','','',lS)end end;local m9=torqueFactor*(lF-lE)local ma=vec3(core.getWorldAirFrictionAngularAcceleration())m9=m9-ma;Nav:setEngineTorqueCommand('torque',m9,lQ,'airfoil','','',lS)Nav:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local b_=vec3(core.getVelocity()):len()local mb=0.15;if not bO then local mc=s:getTargetSpeed(axisCommandId.longitudinal)if b_*3.6>mc*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_*3.6<mc*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jo=unit.getThrottle()if AtmoSpeedAssist then jo=I*100 end;local kI=jo/100;if j==0 then kI=kI*MaxGameVelocity;if b_>=kI*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_<kI*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kO=d(bn)kI=kI*kO/3.6;if b_>=kI*(1-mb)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b_<kI*(1-mb)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cl=coroutine.resume(beginSetup)if cl then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(md)local function me()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function mf()if LockPitch==nil and as then LockPitch=cL(bJ,bF,bG)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function mg()if aq then aq=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;am=false;an=false;R=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else aq=true end end;if md=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bP(0)if(vBooster or hover)and ap==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then Nav.control.extendLandingGears()end else if S then Nav.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif md=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif md=="forward"then T=T-1 elseif md=="backward"then T=T+1 elseif md=="left"then W=W-1 elseif md=="right"then W=W+1 elseif md=="yawright"then X=X-1 elseif md=="yawleft"then X=X+1 elseif md=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif md=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif md=="up"then ae=ae+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif md=="down"then ae=ae-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif md=="groundaltitudeup"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end else s:updateTargetGroundAltitudeFromActionStart(1.0)end elseif md=="groundaltitudedown"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end else s:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif md=="option1"then cA()toggleView=false elseif md=="option2"then cA(1)toggleView=false elseif md=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;me()toggleView=false elseif md=="option4"then cC()toggleView=false elseif md=="option5"then mf()toggleView=false elseif md=="option6"then cv()toggleView=false elseif md=="option7"then toggleView=false elseif md=="option8"then cw()toggleView=false elseif md=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif md=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;bd=false;bc=false end elseif md=="brake"then if BrakeToggleStatus then cU()elseif not BrakeIsOn then cU()else BrakeIsOn=true end elseif md=="lalt"then AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif md=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a5 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a5=false end elseif md=="stopengines"then s:resetCommand(axisCommandId.longitudinal)mg()I=0 elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cA()end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cA(1)end elseif md=="antigravity"and not ExternalAGG then if antigrav~=nil then db()end end end;function script.onActionStop(md)if md=="forward"then T=0 elseif md=="backward"then T=0 elseif md=="left"then W=0 elseif md=="right"then W=0 elseif md=="yawright"then X=0 elseif md=="yawleft"then X=0 elseif md=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif md=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif md=="up"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif md=="down"then ae=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif md=="groundaltitudeup"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="lshift"then if y()==1 then a1=false;af=0;ag=0;x(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a1=false;bd=false;bc=false end elseif md=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cU()else BrakeIsOn=false end end elseif md=="lalt"then if m()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(md)if md=="groundaltitudeup"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end;a3=a3*1.05 else s:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I+speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=r(I-speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(d7)local function mh()for c2,bU in pairs(a)do dbHud_1.setStringValue(bU,g(nil))end;for c2,bU in pairs(b)do if bU~="SavedLocations"then dbHud_1.setStringValue(bU,g(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5;aJ=false;ad=true end;local function mi(mj,planet,fY)local function mk(fY)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gm='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gz,gA,cf,cg,ce=o(fY,gm)if gz=="0"and gA=="0"then return vec3(tonumber(cf),tonumber(cg),tonumber(ce))end;cg=math.rad(cg)cf=math.rad(cf)local planet=b1[tonumber(gz)][tonumber(gA)]local hl=math.cos(cf)local ml=vec3(hl*math.cos(cg),hl*math.sin(cg),math.sin(cf))return planet.center+(planet.radius+ce)*ml end;if dbHud_1 then local cJ={}local position=mk(fY)if planet.name=="Space"then cJ={position=position,name=mj,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cJ={position=position,name=mj,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cJ;table.insert(b1[0],cJ)c1()else a2="Databank must be installed to save locations"end end;local i;local mm="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mn,mo=nil,nil;local mp="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(d7," ")mn=d7;if i~=nil then mn=string.sub(d7,0,i-1)mo=string.sub(d7,i+1)end;if mn=="/help"or mn=="/commands"then for g7 in string.gmatch(mp,"([^\n]+)")do system.print(g7)end;return elseif mn=="/setname"then if mo==nil or mo==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cG(mo)else a2="Select a saved target to rename first"end elseif mn=="/addlocation"then if mo==nil or mo==""or string.find(mo,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mo,"::")local mj=string.sub(mo,1,i-2)local fY=string.sub(mo,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gm='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gz,gA,cf,cg,ce=o(fY,gm)local planet=b1[tonumber(gz)][tonumber(gA)]mi(mj,planet,fY)a2="Added "..mj.." to saved locations,\nplanet "..planet.name.." at "..fY;ah=5 elseif mn=="/agg"then if mo==nil or mo==""then a2="Usage: ah-agg targetheight"return end;mo=tonumber(mo)if mo<1000 then mo=1000 end;AntigravTargetAltitude=mo;a2="AGG Target Height set to "..mo elseif mn=="/G"then if mo==nil or mo==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mo=="dump"then for c2,bU in pairs(a)do if type(_G[bU])=="boolean"then if _G[bU]==true then system.print(bU.." true")else system.print(bU.." false")end elseif _G[bU]==nil then system.print(bU.." nil")else system.print(bU.." ".._G[bU])end end;return end;i=string.find(mo," ")local mq=string.sub(mo,0,i-1)local mr=string.sub(mo,i+1)for c2,bU in pairs(a)do if bU==mq then a2="Variable "..mq.." changed to "..mr;local ms=type(_G[bU])if ms=="number"then mr=tonumber(mr)elseif ms=="boolean"then if string.lower(mr)=="true"then mr=true else mr=false end end;_G[bU]=mr;return end end;a2="No such global variable: "..mq elseif mn=="/copydatabank"then if dbHud_2 then dk(true)else a2="Spare Databank required to copy databank"end elseif mn=="/wipedatabank"then if dbHud_1 then mh()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
