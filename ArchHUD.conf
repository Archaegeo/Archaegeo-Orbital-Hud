name: ArchHud - Archaegeo v1.414 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.414;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local core=core;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;local D=o()local E=o()local F=13;local G=SafeR;local H=SafeB;local I=SafeG;local J=0;local K=0;local L=false;local M=0;local N=false;local O=false;local P=55;local Q=false;local R=false;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=false;local a0=false;local a1="empty"local a2=5;local a3=5;local a4=a2;local a5=a3;local a6=false;local a7,a8=0;local a9,aa=0;local ab=nil;local ac=0;local ad=0;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=false;local al=false;local am=false;local an=-1;local ao=""local ap=j()>0;local aq=j()local ar=core.getAltitude()local as=core.getElementIdList()local at=o()local au=core.getConstructMass()local av=false;local aw=nil;local ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]local ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]local az={}local aA=0;local aB=0;local aC=""local aD=true;local aE={}local aF=ResolutionX;local aG=ResolutionY;local aH={}local aI={}local aJ={}local aK=0;local aL=false;local aM=nil;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=o()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=""local bJ=nil;local bK={}local bL=unit.getClosestPlanetInfluence()>0 or ar>0 and ar<200000;local bM=false;local bN=nil;function p(bO)system.print(D..": "..bO)end;local function bP(bQ)local bR,bS,bT=aR:getPlanetarySystem(0):castIntersections(bv,bQ,function(bU)if bU.noAtmosphericDensityAltitude>0 then return bU.radius+bU.noAtmosphericDensityAltitude else return bU.radius+bU.surfaceMaxAltitude*1.5 end end)local bV=bS;if bT~=nil and bS~=nil then bV=math.min(bT,bS)end;if bV~=nil then return bR,bV else return nil,nil end end;local function bW(bX,bY,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)end end;local function bZ(b_,c0)for i=1,#c0 do b_[#b_+1]=c0[i]end;return b_ end;local function c1(c2)local c3={}local c4={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","Cockpit","voices","alerts","CollisionSystem"}local c5={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c6={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local c7={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c2 then bZ(c3,c4)bZ(c3,c5)bZ(c3,c6)bZ(c3,c7)return c3 elseif c2=="boolean"then return c4 elseif c2=="handling"then return c5 elseif c2=="hud"then return c6 elseif c2=="physics"then return c7 end end;local function c8(c9,ca,cb,cc,cd)if cc==nil then cc=""end;if cd==nil then cd=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cc,c9,ca,cd,cb)end;local function ce(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not cg then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cf)J=q(z(cf*100,0)/100,-1,1)end;local function ch(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cg then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cf)bz=cf end;local function ci(cj,ck)if cj==0 then return c(ck)<1e-09 end;if ck==0 then return c(cj)<1e-09 end;return c(cj-ck)<math.max(c(cj),c(ck))*epsilon end;local function cl(ai,cm)local cn=ai>100000;if cm==nil then cm=1 end;if cn then return z(ai/1000/200,cm).."SU"elseif ai<1000 then return z(ai,cm).."M"else return z(ai/1000,cm).."KM"end end;local function co()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;ae=0;if ap and an==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ch(d(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cp()bi=false;ba=nil;bb=nil;bm=0;if aq==0 then if IntoOrbit then bW("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bL then bW("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a1="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cq()if D-b5<1.5 then if planet.hasAtmosphere then if aq>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;bW("11","EP")else if bL then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cp()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=D end;if bL and aq==0 then bg=ar;bf=true;bc=true;cp()if IntoOrbit then b5=D else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Z=false;b0=true;LockPitch=nil;bi=false;if an~=-1 and bs<20 then bW("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=ar+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then co()end else bW("altOn","AH")AutoTakeoff=false;if b5>-1 then if bL then HoldAltitude=ar end end;if VertTakeOff then co()end end;if al then HoldAltitude=100000 end else bW("altOff","AH")if IntoOrbit then cp()end;if VertTakeOff then co()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cr()local function cs(SpaceTarget)bM=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cq()end end;VectorStatus="Proceeding to Waypoint"end;if D-b6<1.5 and aq>0 then if not bl then a1="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if aq>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bW("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=D end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not al and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<au then a1="WARNING: Heavy Loads may affect autopilot performance."ah=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ab,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bW("apSpc","AP")if aq~=0 then al=true;cq()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if aq>0 then if not VectorToTarget then bW("vtt","AP")cs(SpaceTarget)end else bW("apOn","AP")if not(ab.name==planet.name and bL)then bi=false;Autopilot=true elseif not ap then if IntoOrbit then cp()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cp()end end end else bW("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if aq~=0 then al=true;cq()else Autopilot=true end end elseif aq==0 then if CustomTarget==nil and(ab.name==planet.name and bL)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cp()else bW("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Z=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;O=false;LockPitch=nil;WaypointSet=false end else bW("apP","AP")al=true;cq()end else bW("apOff","AP")al=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;O=false;AutoTakeoff=false;AltitudeHold=false;HoldAltitude=ar;TargetSet=false;Reentry=false;if IntoOrbit then cp()end end end;local function ct()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then bW("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bJ=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then co()end;if IntoOrbit then cp()end;b0=autoRollPreference;ak=false;am=false;ae=0 else bW("bkOff","B",1)end end;local function cu()if Reentry then a1="Re-Entry cancelled"bW("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a1="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not Q then Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a1="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;bW("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cb=cl(HoldAltitude)a1="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..cb;bW("glide","RE")ch(d(b7))end;AutoTakeoff=false end;local function cv()if antigrav and not ExternalAGG then if by then bW("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ar end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bW("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cw(cx)local cy=0;local cz=0;local cA=0;if cx<60 then cx=d(cx)elseif cx<3600 then cy=d(cx/60)cx=d(cx%60)elseif cx<86400 then cz=d(cx/3600)cy=d(cx%3600/60)else cA=d(cx/86400)cz=d(cx%86400/3600)end;if cA>0 then return cA.."d "..cz.."h "elseif cz>0 then return cz.."h "..cy.."m "elseif cy>0 then return cy.."m "..cx.."s"elseif cx>0 then return cx.."s"else return"0s"end end;local function cB(cC)local function cD(cE)for cF,cG in pairs(cE)do dbHud_1.setStringValue(cG,g(_G[cG]))if cC and dbHud_2 then dbHud_2.setStringValue(cG,g(_G[cG]))end end end;if dbHud_1 then cD(b)cD(c1())system.print("Saved Variables to Datacore")if cC and dbHud_2 then a1="Databank copied.  Remove copy when ready."end end end;local function cH()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function cI()local function cJ(cK)return type(cK)=='number'end;local function cL(cK)return type(y(cK))=='number'end;local function cM(cN)return type(cN)=='table'end;local function cO(cP)return type(cP)=='string'end;local function cQ(cG)return cM(cG)and cJ(cG.x and cG.y and cG.z)end;local function cR(cS)return cM(cS)and cJ(cS.latitude and cS.longitude and cS.altitude and cS.bodyId and cS.systemId)end;local cT=math.pi/180;local cU=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cV='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function cW(cK)local cX=string.gsub(string.reverse(e('%.4f',cK)),'^0*%.?','')return cX==''and'0'or string.reverse(cX)end;local function cY(cZ)if cQ(cZ)then return e('{x=%.3f,y=%.3f,z=%.3f}',cZ.x,cZ.y,cZ.z)end;if cM(cZ)and not getmetatable(cZ)then local c_={}local d0=next(cZ)if type(d0)=='nil'or d0==1 then c_=cZ else for cF,cG in pairs(cZ)do local cf=cY(cG)if type(cF)=='number'then table.insert(c_,e('[%s]=%s',cF,cf))else table.insert(c_,e('%s=%s',cF,cf))end end end;return e('{%s}',table.concat(c_,','))end;if cO(cZ)then return e("'%s'",cZ:gsub("'",[[\']]))end;return tostring(cZ)end;local d1={}d1.__index=d1;d1.__tostring=function(cZ,d2)local d3={}for cF in pairs(cZ)do table.insert(d3,cF)end;table.sort(d3)local c_={}for _,cF in ipairs(d3)do local cf=cY(cZ[cF])if type(cF)=='number'then table.insert(c_,e('[%s]=%s',cF,cf))else table.insert(c_,e('%s=%s',cF,cf))end end;if d2 then return e('%s%s',d2,table.concat(c_,',\n'..d2))end;return e('{%s}',table.concat(c_,','))end;d1.__eq=function(d4,d5)return d4.planetarySystemId==d5.planetarySystemId and d4.bodyId==d5.bodyId and ci(d4.radius,d5.radius)and ci(d4.center.x,d5.center.x)and ci(d4.center.y,d5.center.y)and ci(d4.center.z,d5.center.z)and ci(d4.GM,d5.GM)end;local function d6(d7,d8,d9,da,db)assert(cL(d7),'Argument 1 (planetarySystemId) must be a number:'..type(d7))assert(cL(d8),'Argument 2 (bodyId) must be a number:'..type(d8))assert(cL(d9),'Argument 3 (radius) must be a number:'..type(d9))assert(cM(da),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(da))assert(cL(db),'Argument 5 (GM) must be a number:'..type(db))return setmetatable({planetarySystemId=y(d7),bodyId=y(d8),radius=y(d9),center=vec3(da),GM=y(db)},d1)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.bodyId,cW(p.latitude*cU),cW(p.longitude*cU),cW(p.altitude))end;MapPosition.__eq=function(d4,d5)return d4.bodyId==d5.bodyId and d4.systemId==d5.systemId and ci(d4.latitude,d5.latitude)and ci(d4.altitude,d5.altitude)and(ci(d4.longitude,d5.longitude)or ci(d4.latitude,math.pi/2)or ci(d4.latitude,-math.pi/2))end;local function dc(dd,d8,de,df,dg)local d7=dd;if cO(dd)and not df and not dg and not d8 and not de then d7,d8,de,df,dg=n(dd,cV)assert(d7,'Argument 1 (position string) is malformed.')else assert(cL(d7),'Argument 1 (systemId) must be a number:'..type(d7))assert(cL(d8),'Argument 2 (bodyId) must be a number:'..type(d8))assert(cL(de),'Argument 3 (latitude) must be in degrees:'..type(de))assert(cL(df),'Argument 4 (longitude) must be in degrees:'..type(df))assert(cL(dg),'Argument 5 (altitude) must be in meters:'..type(dg))end;d7=y(d7)d8=y(d8)de=y(de)df=y(df)dg=y(dg)if d8==0 then return setmetatable({latitude=de,longitude=df,altitude=dg,bodyId=d8,systemId=d7},MapPosition)end;return setmetatable({latitude=cT*q(de,-90,90),longitude=cT*(df%360),altitude=dg,bodyId=d8,systemId=d7},MapPosition)end;local dh={}dh.__index=dh;dh.__tostring=function(cZ,d2)local di=d2 and d2 ..'  'local dj={}local d3={}for cF in pairs(cZ)do table.insert(d3,cF)end;table.sort(d3)for _,dk in ipairs(d3)do bdy=cZ[dk]local dl=d1.__tostring(bdy,di)if d2 then table.insert(dj,e('[%s]={\n%s\n%s}',dk,dl,d2))else table.insert(dj,e('  [%s]=%s',dk,dl))end end;if d2 then return e('\n%s%s%s',d2,table.concat(dj,',\n'..d2),d2)end;return e('{\n%s\n}',table.concat(dj,',\n'))end;local function dm(dn)local aM={}local pid;for _,cG in pairs(dn)do local dp=cG.planetarySystemId;if type(dp)~='number'then error('Invalid planetary system ID: '..tostring(dp))elseif pid and dp~=pid then error('Mistringmatch planetary system IDs: '..dp..' and '..pid)end;local dq=cG.bodyId;if type(dq)~='number'then error('Invalid body ID: '..tostring(dq))elseif aM[dq]then error('Duplicate body ID: '..tostring(dq))end;setmetatable(cG.center,getmetatable(vec3.unit_x))aM[dq]=setmetatable(cG,d1)pid=dp end;return setmetatable(aM,dh)end;aQ={}local function dr(dn)return setmetatable({galaxyAtlas=dn or{}},aQ)end;aQ.__index=function(cN,i)if type(i)=='number'then local system=cN.galaxyAtlas[i]return dm(system)end;return rawget(aQ,i)end;aQ.__pairs=function(cZ)return function(cN,cF)local ds,nv=next(cN,cF)return ds,nv and dm(nv)end,cZ.galaxyAtlas,nil end;aQ.__tostring=function(cZ)local dt={}for _,du in pairs(cZ or{})do local dv=du:getPlanetarySystemId()local dw=dh.__tostring(du,'    ')table.insert(dt,e('  [%s]={%s\n  }',dv,dw))end;return e('{\n%s\n}\n',table.concat(dt,',\n'))end;aQ.BodyParameters=d6;aQ.MapPosition=dc;aQ.PlanetarySystem=dm;function aQ.createBodyParameters(dx,d8,dy,dz,dA,dB,dC)assert(cL(dx),'Argument 1 (planetarySystemId) must be a number:'..type(dx))assert(cL(d8),'Argument 2 (bodyId) must be a number:'..type(d8))assert(cL(dy),'Argument 3 (surfaceArea) must be a number:'..type(dy))assert(cM(dz),'Argument 4 (aPosition) must be an array or vec3:'..type(dz))assert(cM(dA),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dA))assert(cL(dB),'Argument 6 (altitude) must be in meters:'..type(dB))assert(cL(dC),'Argument 7 (gravityAtPosition) must be number:'..type(dC))local d9=x(dy/4/math.pi)local ai=d9+dB;local dD=vec3(dz)+ai*vec3(dA)local db=dC*ai*ai;return d6(dx,d8,d9,dD,db)end;aQ.isMapPosition=cR;function aQ:getPlanetarySystem(dd)if i==nil then i=0 end;if nv==nil then nv=0 end;local dx=dd;if cR(dd)then dx=dd.systemId end;if type(dx)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dh then system=dm(system)end;return system end end end;function dh:sizeCalculator(bU)return 1.05*bU.radius end;function dh:castIntersections(dE,dF,dG,dH,dI,dJ)local dK={}local dL=dI or self;for _,bU in pairs(dL)do table.insert(dK,bU)end;if not dJ then table.sort(dK,function(dM,dN)return(dM.center-dE):len()<(dN.center-dE):len()end)end;local dO=dF:normalize()for _,bU in ipairs(dK)do local dP=bU.center-dE;local d9=self:sizeCalculator(bU)local dQ=dP:dot(dO)local dR=dQ^2-(dP:len2()-d9^2)if dR>=0 then local dS=x(dR)local bS=dQ+dS;local bT=dQ-dS;if bT>0 then return bU,bS,bT elseif bS>0 then return bU,bS,nil end end end;return nil,nil,nil end;function dh:closestBody(dT)assert(type(dT)=='table','Invalid coordinates.')local dU,bU;local dV=vec3(dT)for _,dW in pairs(self)do local dX=(dW.center-dV):len2()if(not bU or dX<dU)and dW.name~="Space"then bU=dW;dU=dX end end;return bU end;function dh:convertToBodyIdAndWorldCoordinates(dd)local dY=dd;if cO(dd)then dY=dc(dd)end;if dY.bodyId==0 then return 0,vec3(dY.latitude,dY.longitude,dY.altitude)end;local dW=self:getBodyParameters(dY)if dW then return dY.bodyId,dW:convertToWorldCoordinates(dY)end end;function dh:getBodyParameters(dd)local d8=dd;if cR(dd)then d8=dd.bodyId end;assert(cL(d8),'Argument 1 (bodyId) must be a number:'..type(d8))return self[d8]end;function dh:getPlanetarySystemId()local _,cG=next(self)return cG and cG.planetarySystemId end;function d1:convertToMapPosition(da)assert(cM(da),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(da))local dZ=vec3(da)if self.bodyId==0 then return setmetatable({latitude=dZ.x,longitude=dZ.y,altitude=dZ.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local d_=dZ-self.center;local ai=d_:len()local dg=ai-self.radius;local de=0;local df=0;if not ci(ai,0)then local e0=m(d_.y,d_.x)df=e0>=0 and e0 or 2*math.pi+e0;de=math.pi/2-math.acos(d_.z/ai)end;return setmetatable({latitude=de,longitude=df,altitude=dg,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function d1:convertToWorldCoordinates(dd)local dY=cO(dd)and dc(dd)or dd;if dY.bodyId==0 then return vec3(dY.latitude,dY.longitude,dY.altitude)end;assert(cR(dY),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dY.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dY.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e1=math.cos(dY.latitude)return self.center+(self.radius+dY.altitude)*vec3(e1*math.cos(dY.longitude),e1*math.sin(dY.longitude),math.sin(dY.latitude))end;function d1:getAltitude(da)return(vec3(da)-self.center):len()-self.radius end;function d1:getDistance(da)return(vec3(da)-self.center):len()end;function d1:getGravity(da)local e2=self.center-vec3(da)local e3=e2:len2()return self.GM/e3*e2/x(e3)end;return setmetatable(aQ,{__call=function(_,...)return dr(...)end})end;local function e4()local aS={}local e5=30000000/3600;local e6=e5*e5;local e7=100;function aS.computeAccelerationTime(e8,e9,ea)local eb=e5*math.asin(e8/e5)return(e5*math.asin(ea/e5)-eb)/e9 end;function aS.computeDistanceAndTime(e8,ea,ec,ed,ee,ef)ee=ee or 0;ef=ef or 0;local eg=e8<=ea;local eh=ed*(eg and 1 or-1)/ec;local ei=-ef/ec;local ej=eh+ei;if eg and ej<=0 or not eg and ej>=0 then return-1,-1 end;local ek,el=0,0;if eh~=0 and ee>0 then local eb=math.asin(e8/e5)local em=math.pi*(eh/2+ei)local en=eh*ee;local eo=e5*math.pi;local cG=function(cN)local ep=(em*cN-en*math.sin(math.pi*cN/2/ee)+eo*eb)/eo;local eq=math.tan(ep)return e5*eq/x(eq*eq+1)end;local er=eg and function(cP)return cP>=ea end or function(cP)return cP<=ea end;el=2*ee;if er(cG(el))then local es=0;while c(el-es)>0.5 do local cN=(el+es)/2;if er(cG(cN))then el=cN else es=cN end end end;local et=e8;local eu=el/e7;for ev=1,e7 do local ew=cG(ev*eu)ek=ek+(ew+et)*eu/2;et=ew end;if el<2*ee then return ek,el end;e8=et end;local eb=e5*math.asin(e8/e5)local D=(e5*math.asin(ea/e5)-eb)/ej;local ex=e6*math.cos(eb/e5)/ej;local ai=ex-e6*math.cos((ej*D+eb)/e5)/ej;return ai+ek,D+el end;function aS.computeTravelTime(e8,e9,ai)if ai==0 then return 0 end;if e9>0 then local eb=e5*math.asin(e8/e5)local ex=e6*math.cos(eb/e5)/e9;return(e5*math.acos(e9*(ex-ai)/e6)-eb)/e9 end;if e8==0 then return-1 end;assert(e8>0,'Acceleration and initial speed are both zero.')return ai/e8 end;return aS end;local function ey()local vec3=require('cpml.vec3')local cI=cI()local function cO(cP)return type(cP)=='string'end;local function cM(cN)return type(cN)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dg)assert(self.body)local ai=dg+self.body.radius;if not ci(ai,0)then local orbit=x(self.body.GM/ai)return x(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dd,ez)assert(self.body)assert(cM(dd)or cO(dd))assert(cM(ez))local eA=(cO(dd)or cI.isMapPosition(dd))and self.body:convertToWorldCoordinates(dd)or vec3(dd)local cG=vec3(ez)local eB=eA-self.body.center;local eC=cG:len2()local eD=eB:len()local eE=self.body.GM;local eF=((eC-eE/eD)*eB-eB:dot(cG)*cG)/eE;local cj=eE/(2*eE/eD-eC)local eG=eF:len()local dO=eF:normalize()local eH=cj*(1-eG)local eI=cj*(1+eG)local eJ=eH*dO+self.body.center;local eK=eG<=1 and-eI*dO+self.body.center or nil;local eL=x(cj*eE*(1-eG*eG))local eM=eK and 2*math.pi*x(cj^3/eE)local eN=math.acos(eF:dot(eB)/(eG*eD))if eB:dot(cG)<0 then eN=-(eN-2*math.pi)end;local eO=math.acos((math.cos(eN)+eG)/(1+eG*math.cos(eN)))local eP=eO;if eP<0 then eP=eP+2*math.pi end;local eQ=eP-eG*math.sin(eP)local eR=0;local eS=0;local eT=0;if eM~=nil then eR=eQ/(2*math.pi/eM)eS=eM-eR;eT=eS+eM/2;if eN-math.pi>0 then eS=eR;eT=eS+eM/2 end;if eT>eM then eT=eT-eM end end;return{periapsis={position=eJ,speed=eL/eH,circularOrbitSpeed=x(eE/eH),altitude=eH-self.body.radius},apoapsis=eK and{position=eK,speed=eL/eI,circularOrbitSpeed=x(eE/eI),altitude=eI-self.body.radius},currentVelocity=cG,currentPosition=eA,eccentricity=eG,period=eM,eccentricAnomaly=eO,meanAnomaly=eQ,timeToPeriapsis=eS,timeToApoapsis=eT}end;local function eU(eV)local dW=cI.BodyParameters(eV.planetarySystemId,eV.bodyId,eV.radius,eV.center,eV.GM)return setmetatable({body=dW},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eU(...)end})end;local function eW()local eX={}local eY={}local eZ={XS=13,S=27,M=55,L=110,XL=221}local e_={}local f0;local f1;local f2;local f3;local f4;local function f5()local function f6(f7,f8,f9,fa,fb,fc,fd,fe)f8,fa,fc,fe=vec3(f8),vec3(fa),vec3(fc),vec3(fe)local ff,fg,fh=f7*f7,f9*f9,fb*fb;local eC=fa-f8;local fi=eC:normalize()local fj=eC:len()local fk=fc-f8;local fl=(fk-fk:project_on(fi)):normalize()local fm,fn=fk:dot(fi),fk:dot(fl)local fo=fm*fm+fn*fn;local fp=fi:cross(fl)local c9=(ff-fg+fj*fj)/(2*fj)local ca=(ff-fh+fo-2*fm*c9)/(2*fn)local cS=ff-c9^2-ca^2;local fq=x(cS)local fr=f8+fi*c9+fl*ca+fp*fq;local fs=f8+fi*c9+fl*ca-fp*fq;if c((fe-fr):len()-fd)<c((fe-fs):len()-fd)then return fr else return fs end end;local function ft()local function fu()local fv=core.getConstructWorldOrientationRight()local eC=core.getConstructWorldOrientationForward()local fk=core.getConstructWorldOrientationUp()local fw=library.systemResolution3(fv,eC,fk,{1,0,0})local fx=library.systemResolution3(fv,eC,fk,{0,1,0})local fy=library.systemResolution3(fv,eC,fk,{0,0,1})return function(fz)return library.systemResolution3(fw,fx,fy,fz)end end;local fA=fu()local fB=core.getConstructWorldPos()local eA=core.getElementPositionById(1)local fC={eA[1],eA[2],eA[3]}local fD=fA(fC)local fE={fB[1]-fD[1],fB[2]-fD[2],fB[3]-fD[3]}return fE end;local function fF(fG,eD,fH)local fI=fG.pts;local fJ=#fI;local fK=fG.ref;if fJ>3 then local fL,fM,fN,fO=fI[fJ],fI[fJ-1],fI[fJ-2],fI[fJ-3]fG.ref=fH;local eA=f6(fL[1],fL[2],fM[1],fM[2],fN[1],fN[2],fO[1],fO[2])local c9,ca,fq=eA.x,eA.y,eA.z;if c9==c9 and ca==ca and fq==fq then c9=c9+fK[1]ca=ca+fK[2]fq=fq+fK[3]local fP=vec3(c9,ca,fq)if not fG.lastPos then fG.center=fP elseif(fG.lastPos-fP):len()<2 then fG.center=fP;fG.skipCalc=true end;fG.lastPos=fP end;fG.pts={}else local fQ={fH[1]-fK[1],fH[2]-fK[2],fH[3]-fK[3]}fI[fJ+1]={eD,fQ}end end;if radar_1 then f0=#radar_1.getConstructIds()local fR=radar_1.getData()local fS=fR:gmatch('{"constructId[^}]*}[^}]*}')if f0>0 then local fH=ft()local fT,fU=0,0;f4,f3=0,0;for cG in fS do local dp,ai,fV=cG:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local fW=eZ[fV]ai=y(ai)if radar_1.hasMatchingTransponder(dp)==1 then table.insert(eY,dp)end;local fX=radar_1.getConstructType(dp)if CollisionSystem then if fW>27 or fX=="static"or fX=="space"then f4=f4+1;local fY=radar_1.getConstructName(dp)local fG=bK[dp]if fG==nil then fW=fW+F;bK[dp]={pts={},ref=fH,name=fY,i=0,radius=fW,skipCalc=false}fG=bK[dp]end;if not fG.skipCalc then fF(fG,ai,fH)fU=fU+1 end;if fG.center then table.insert(e_,fG)end end;fT=fT+1;if bL and fT>700 or fU>70 or(not bL and fT>300 or fU>30)then coroutine.yield()fT,fU=0,0 end end end;f3=#e_;if f3>0 and bs>20 then local bU,fZ,f_,g0;local g1=0;local g2=aR:getPlanetarySystem(0)g0=br:normalize()while g1<f3 do coroutine.yield()local g3={table.unpack(e_,g1,math.min(g1+75,f3))}bU,fZ,f_=g2:castIntersections(bv,g0,nil,nil,g3,true)if bU and f_ then bN={bU,fZ,f_}break end;g1=g1+75 end;if not bU then bN=nil end else bN=nil end;e_={}f1=fR:find('identifiedConstructs":%[%]')else f2=fR:find('worksInEnvironment":false')end end end;function eX.UpdateRadar()local g4=coroutine.status(UpdateRadarCoroutine)if g4=="suspended"then local cf,g5=coroutine.resume(UpdateRadarCoroutine)if g5 then system.print("ERROR UPDATE RADAR: "..g5)end elseif g4=="dead"then UpdateRadarCoroutine=coroutine.create(f5)local cf,g5=coroutine.resume(UpdateRadarCoroutine)end end;function eX.GetRadarHud()local g6=eY;eY={}return f1,f2,f0,f3,f4,g6 end;UpdateRadarCoroutine=coroutine.create(f5)return eX end;local function g7()local g8=0;local g9=9.80665;local ga=vec3({13771471,7435803,-128971})local gb=18000000;local gc=500000;local gd,ge=math.huge;local gf;local function gg(gh)gd=vec3(gh):dist(ga)if gd<gb then return true,c(gd-gb)end;ge=vec3(gh):dist(vec3(planet.center))if ge<gc then gf=true else gf=false end;if c(ge-gc)<c(gd-gb)then return gf,c(ge-gc)else return gf,c(gd-gb)end end;local function gi(cG)if aF==1920 then return cG else return z(aF*cG/1920,0)end end;local function gj(cG)if aG==1080 then return cG else return z(aG*cG/1080,0)end end;local function gk()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function gl()local gm="TRAVEL"if not bA then gm="CRUISE"end;if Autopilot then gm="AUTOPILOT"end;return gm end;local gn=""local go=""local gp=""local gq=1;local gr=2;local gs=3;local gt=4;local gu=5;local gv=6;local gw=""local gx=0;local gy=d(1/apTickRate)*2*hudTickRate;local gz={}local gA={}local gB={}local gC={}local gD={}local gE={}local function gF(c9,gG,gH,gI,gJ,gK)local gL=fuelY;local gM=fuelY+5;if not BarFuelDisplay then gM=gM+5 end;if l()==1 and not RemoteHud then gL=gL-50;gM=gM-50 end;if gH=="ATMO"then gw="atmofueltank"elseif gH=="SPACE"then gw="spacefueltank"else gw="rocketfueltank"end;gx=_G[gw.."_size"]if#gI>0 then for i=1,#gI do local fY=string.sub(gI[i][gr],1,12)local gN=0;for gO=1,gx do if gI[i][gr]==f(unit[gw.."_"..gO].getData()).name then gN=gO;break end end;local gP=o()if gJ[i]==nil or gK[i]==nil or gP-gI[i][gv]>gy then local gQ;local gR=0;if gN~=0 then gK[i]=f(unit[gw.."_"..gN].getData()).percentage;gJ[i]=f(unit[gw.."_"..gN].getData()).timeLeft;if gJ[i]=="n/a"then gJ[i]=0 end else gR=k(gI[i][gq])-gI[i][gt]gK[i]=d(0.5+gR*100/gI[i][gs])gQ=gI[i][gu]if gQ<=gR then gJ[i]=0 else gJ[i]=d(0.5+gR/((gQ-gR)/(gP-gI[i][gv])))end;gI[i][gu]=gR;gI[i][gv]=gP end end;if fY==gG then fY=e("%s %d",gH,i)end;if gN==0 then fY=fY.." *"end;local gS;if gJ[i]==0 then gS=""else gS=cw(gJ[i])end;if gK[i]~=nil then local gT=d(gK[i]*2.55)local gU=e("rgb(%d,%d,%d)",255-gT,gT,0)local cc=""if gS~=""and gJ[i]<120 or gK[i]<5 then cc="red "end;if BarFuelDisplay then go=go..e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],c9,gM,gU,gK[i],c9,gM,c9+2,gM+10,gK[i],gS)go=go..c8(c9,gL,fY,cc.."txtstart pdim txtfuel")gL=gL-30;gM=gM-30 else go=go..c8(c9,gL,fY,cc.."pdim txtfuel")go=go..c8(c9,gM,e("%d%% %s",gK[i],gS),"pdim txtfuel","fill:"..gU)gL=gL+30;gM=gM+30 end end end end end;local function gV(gW,dg)if dg<200000 and not ap or dg and ap then local gX=0;if c(bu)>1 then gX=45*math.log(c(bu),10)if bu<0 then gX=-gX end end;gW[#gW+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bu),d(gX))end;return gW end;local function gY(gZ)local g_=-bt;gZ=gZ-gZ:project_on(g_)local h0=vec3(0,0,1)h0=h0-h0:project_on(g_)local h1=h0:cross(g_)local gX=h0:angle_between(gZ)*constants.rad2deg;if gZ:dot(h1)<0 then gX=360-gX end;return gX end;local function h2(gW,centerX,centerY,h3,h4,bL)local h5=circleRad;local h6=20;local h7=d(h3)if bL then for i=-45,45,5 do local h8=i;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],h8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;gW[#gW+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+h5+h6-len,centerX,centerY+h5+h6)end;gW[#gW+1]=c8(centerX,centerY+h5+h6-35,h4,"pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY+h5+h6-25,h7 .." deg","pdim txt txtmid")gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+h5+h6-20,centerX+5,centerY+h5+h6-20,centerX,centerY+h5+h6-15)gW[#gW+1]="</g>"end;local h9=h7;if bL then h9=gY(bo)end;local ha=20;local hb=d(h9)local hc=0;local hd=centerY+h5+h6+20;local he=centerX;if h4~="YAW"then hd=gj(130)he=gi(960)end;local hf=[[<path class="txttick line" d="]]local hg=d(hb-(ha+10)-hb%5+0.5)for i=hg+60,hg,-5 do local c9=he-(-i*5+h9*5)if i%10==0 then hc=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;gW[#gW+1]=c8(c9+5,hd-12,A)elseif i%5==0 then hc=5 end;if hc==10 then hf=e([[%s M %f %f v %d]],hf,c9,hd-5,hc)else hf=e([[%s M %f %f v %d]],hf,c9,hd-2.5,hc)end end;gW[#gW+1]=hf..[["/>]]gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],he-5,hd+10,he+5,hd+10,he,hd+5)if bL then h4="HDG"end;gW[#gW+1]=c8(he,hd+25,hb.."deg","pdim txt txtmid","")gW[#gW+1]=c8(he,hd+35,h4,"pdim txt txtmid","")end;local function hh(gW,hi,h3,centerX,centerY,bL,hj,ew)local h5=circleRad;local hk=d(h5*3/5)if h5>0 then local hl=d(hi)local len=0;local hf=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*h3,centerX,centerY)if not ap then hf=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;gW[#gW+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],h5-1,centerX,centerY)gW[#gW+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(hl-30-hl%5+0.5),d(hl+30+hl%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ca=centerY+-i*5+hi*5;if len==30 then hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,ca,len)if ap then gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX-hk+10,ca,i)gW[#gW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h3,centerX,centerY,centerX+hk-10,ca,i)if i==0 or i==180 or i==-180 then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+20,ca,hk*2-40)end else gW[#gW+1]=c8(centerX-hk+10,ca,i,"pdim txt txtmid")gW[#gW+1]=c8(centerX+hk-10,ca,i,"pdim txt txtmid")end;hf=e([[%s M %d %f h %d]],hf,centerX+hk,ca,len)else hf=e([[%s M %d %f h %d]],hf,centerX-hk-len,ca,len)hf=e([[%s M %d %f h %d]],hf,centerX+hk,ca,len)end end;gW[#gW+1]=hf..[["/>]]local hm="PITCH"if not bL then hm="REL PITCH"end;if hi>90 and not ap then hi=90-(hi-90)elseif hi<-90 and not ap then hi=-90-(hi+90)end;if h5>200 then if ap then if ew>P then gW[#gW+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY+20,hj,"pdim txt txtmid")end;gW[#gW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-h3,centerX,centerY)else gW[#gW+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hk+25,centerY-5,centerX-hk+20,centerY,centerX-hk+25,centerY+5,centerX-hk+50,centerY+4,hl)gW[#gW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hk-25,centerY-5,centerX+hk-20,centerY,centerX+hk-25,centerY+5,centerX+hk-30,centerY+4,hl)gW[#gW+1]="</g>"end;local hn=d(h5/3)gW[#gW+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hn,centerY,h5-hn)if not ap and bL then gW[#gW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h3,centerX,centerY,centerX-hk+10,centerY,hk*2-20)end;gW[#gW+1]="</g>"if h5<200 then if ap and ew>P then gW[#gW+1]=c8(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY-h5+10,hl,"pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY+20,hj,"pdim txt txtmid")else gW[#gW+1]=c8(centerX,centerY-h5,hm,"pdim txt txtmid")gW[#gW+1]=c8(centerX,centerY-h5+15,hl,"pdim txt txtmid")end end end end;local function ho(gW,dg,bL)local hp=altMeterX;local hq=altMeterY;local hr=78;local hs=19;local ht=an;if an~=-1 then gW[#gW+1]=c8(hp+hr,hq+hs+20,e("AGL: %.1fm",an),"pdim altsm txtend")end;if bL and(dg<200000 and not ap or dg and ap)then table.insert(gW,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hp-1,hq-4,hr+2,hs+6,hp+1,hq-1,hr-4,hs))local fJ=0;local hu=1;local hv=0;local hw=dg<0;local hx=dg<planet.surfaceMaxAltitude;local hy=9;if hw then hy=0 end;local dg=c(dg)while fJ<6 do local hz=11;local hA=16;local hB=9;local hC=14;local cc="altsm"if fJ>2 then hA=hA+3;hz=hz+2;hC=hC+2;hB=hB-6;cc="altbig"end;if hw then cc=cc.." red"elseif hx then cc=cc.." orange"end;local hD=dg/hu%10;local hE=d(hD)local hF=d((hE+1)%10)local hG=hv;if fJ==0 then hG=hD-hE;if hw then hG=1-hG end end;if hw and(fJ==0 or hv~=0)then local hH=hF;hF=hE;hE=hH end;local hI=hA*(hG-1)local hJ=hI+hA;local c9=hp+hB+(6-fJ)*hz;local ca=hq+hC;gW[#gW+1]=c8(c9,ca+hI,hF,cc)gW[#gW+1]=c8(c9,ca+hJ,hE,cc)fJ=fJ+1;hu=hu*10;if hE==hy then hv=hG else hv=0 end end;table.insert(gW,[[</g></g>]])end end;local function hK(ez)local hL=-math.deg(m(ez.y,ez.z))+180;hL=hL-90;if hL<0 then hL=360+hL end;if hL>180 then hL=-180+hL-180 end;return-hL end;local function hM(ez)local h9=math.deg(m(ez.y,ez.x))-90;if h9<-180 then h9=360+h9 end;return h9 end;local function hN(gW,ez,ew,centerX,centerY)if ew>5 and not ap or ew>P then local h5=circleRad;local hO=20;local hP=20;local hQ=hK(ez)local hR=hM(ez)local hS=14;local hT=hS/2;local hU=-hR/hP*h5;local hV=hQ/hO*h5;local c9=centerX+hU;local ca=centerY+hV;local ai=x(hU^2+hV^2)local hW=[[<circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..hT/hS..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c9-hS..[[,]]..ca..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9+hT..[[,]]..ca..[[ h ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9 ..[[,]]..ca-hS..[[ v ]]..hT..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<h5 then gW[#gW+1]=hW else local gX=m(hV,hU)local hX=4;local hY=centerX+h5*math.cos(gX)local hZ=centerY+h5*math.sin(gX)gW[#gW+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',gX*180/math.pi,hY,hZ,hY-hX,hZ-hX/2,hX*2,hX,hY+hX,hZ-hX,hX,hX,-hX,hX)end;if not ap then local h_=vec3(ez)hQ=hK(-h_)hR=hM(-h_)hU=-hR/hP*h5;hV=hQ/hO*h5;c9=centerX+hU;ca=centerY+hV;ai=x(hU^2+hV^2)if ai<h5 then local i0=[[<circle
                                    cx="]]..c9 ..[["
                                    cy="]]..ca..[["
                                    r="]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c9 ..[[,]]..ca-hS..[[ v ]]..hT..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c9 ..[[,]]..ca..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c9 ..[[,]]..ca..[[)" />
                                <path
                                    d="M ]]..c9-hT..[[,]]..ca..[[ h ]]..hS..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c9 ..[[,]]..ca..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c9 ..[[,]]..ca..[[)"/>]]gW[#gW+1]=i0 end end end end;local function i1(gW,gm,i2,i3)i2=d(i2+0.5)local gL=throtPosY+10;local gM=throtPosY+20;if l()==1 and not RemoteHud then gL=55;gM=65 end;local i4="CRUISE"local unit="km/h"local cf=i3;if gm=="TRAVEL"or gm=="AUTOPILOT"then i4="THROT"unit="%"cf=i2;local i5="dim"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],i5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;gW[#gW+1]=c8(throtPosX+10,gL,i4,"pbright txtstart")gW[#gW+1]=c8(throtPosX+10,gM,e("%.0f %s",cf,unit),"pbright txtstart")if ap and AtmoSpeedAssist and bA and L then i2=d(M*100+0.5)local i5="red"if i2<0 then i5="red"end;gW[#gW+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],i5,1-c(i2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)gW[#gW+1]=c8(throtPosX+10,gL+40,"LIMIT","pbright txtstart")gW[#gW+1]=c8(throtPosX+10,gM+40,i2 .."%","pbright txtstart")end;if ap and AtmoSpeedAssist or Reentry then gW[#gW+1]=c8(throtPosX+10,gL-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not ap and Autopilot then gW[#gW+1]=c8(throtPosX+10,gL-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function i6(gW,i7)local i8=throtPosY-10;local i9=throtPosX+10;gW[#gW+1]=c8(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then i8=75 end;gW[#gW+1]=c8(i9,i8,d(i7).." km/h","pbright txtbig txtstart")end;local function ia(gW)gW[#gW+1]=c8(gi(1900),gj(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")gW[#gW+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then gW[#gW+1]=c8(gi(960),gj(550),"Warning: Invalid Control Scheme Detected","warnings")gW[#gW+1]=c8(gi(960),gj(600),"Keyboard Scheme must be selected","warnings")gW[#gW+1]=c8(gi(960),gj(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ib=gi(960)local ic=gj(860)local id=gj(880)local ie=gj(900)local ig=gj(960)local ih=gj(200)local ii=gj(250)local ij=gj(960)if l()==1 and not RemoteHud then ic=gj(135)id=gj(155)ie=gj(175)ih=gj(115)ii=gj(95)end;if BrakeIsOn then gW[#gW+1]=c8(ib,ic,"Brake Engaged","warnings")elseif K>0 then gW[#gW+1]=c8(ib,ic,"Auto-Brake Engaged","warnings","opacity:"..K)end;if ap and b2 and an==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then gW[#gW+1]=c8(ib,ih+50,"** STALL WARNING **","warnings")bW("stall","SW",2)end end;if bJ then gW[#gW+1]=c8(ib,ih+90,"Flight Assist in Progress","warnings")end;if aw then gW[#gW+1]=c8(ib,ij,"Gyro Enabled","warnings")end;if GearExtended then if R then gW[#gW+1]=c8(ib,id,"Gear Extended","warn")else gW[#gW+1]=c8(ib,id,"Landed (G: Takeoff)","warnings")end;local ik=cl(a:getTargetGroundAltitude())gW[#gW+1]=c8(ib,ie,"Hover Height: "..ik,"warn")end;if a6 then gW[#gW+1]=c8(ib,ig+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then if c(ar-antigrav.getBaseAltitude())<501 then gW[#gW+1]=c8(ib,ih+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else gW[#gW+1]=c8(ib,ih+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then gW[#gW+1]=c8(ib,ih+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then gW[#gW+1]=c8(ib,ih+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif Z then gW[#gW+1]=c8(ib,ih+20,"Follow Mode Engaged","warn")elseif Reentry or am then gW[#gW+1]=c8(ib,ih+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local ik=cl(HoldAltitude,2)if VertTakeOff then if by then ik=cl(antigrav.getBaseAltitude(),2).." AGG singularity height"end;gW[#gW+1]=c8(ib,ih,"VTO to "..ik,"warn")elseif AutoTakeoff and not IntoOrbit then if al then gW[#gW+1]=c8(ib,ih,"Takeoff to "..AutopilotTargetName,"warn")else gW[#gW+1]=c8(ib,ih,"Takeoff to "..ik,"warn")end;if BrakeIsOn and not VertTakeOff then gW[#gW+1]=c8(ib,ih+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else gW[#gW+1]=c8(ib,ih,"Altitude Hold: "..ik,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if aq>0.1 then gW[#gW+1]=c8(ib,ih+20,"Beginning ascent","warn")elseif aq<0.09 and aq>0.05 then gW[#gW+1]=c8(ib,ih+20,"Aligning trajectory","warn")elseif aq<0.05 then gW[#gW+1]=c8(ib,ih+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then gW[#gW+1]=c8(ib,ih,b9,"warn")end end;if BrakeLanding then if StrongBrakes then gW[#gW+1]=c8(ib,ih,"Brake-Landing","warnings")else gW[#gW+1]=c8(ib,ih,"Coast-Landing","warnings")end end;if ProgradeIsOn then gW[#gW+1]=c8(ib,ih,"Prograde Alignment","crit")end;if RetrogradeIsOn then gW[#gW+1]=c8(ib,ih,"Retrograde Alignment","crit")end;if bM then local type;if string.find(bM,"COLLISION")then type="warnings"else type="crit"end;gW[#gW+1]=c8(ib,ii+20,bM,type)elseif aq==0 then local bR,bV=bP(br:normalize())if bV~=nil then local ik=cl(bV)local travelTime=aS.computeTravelTime(bs,0,bV)local il="Collision"if bR.noAtmosphericDensityAltitude>0 then il="Atmosphere"end;gW[#gW+1]=c8(ib,ii+20,bR.name.." "..il.." "..cw(travelTime).." In "..ik,"crit")end end;if VectorToTarget and not IntoOrbit then gW[#gW+1]=c8(ib,ih+35,VectorStatus,"warn")end;gW[#gW+1]="</g>"return gW end;local function im(ew)return d(z(ew*3.6,0)+0.5).." km/h"end;local function io(gW)local ip=OrbitMapX;local iq=OrbitMapY;local ir=OrbitMapSize;local is=4;local it=15;local c9=0;local ca=0;local iu,iv,iw,ix;local function iy(type)local iz,D,ew,iA;if type=="Periapsis"then iz=orbit.periapsis.altitude;D=orbit.timeToPeriapsis;ew=orbit.periapsis.speed;iA=35 else iz=orbit.apoapsis.altitude;D=orbit.timeToApoapsis;ew=orbit.apoapsis.speed;iA=-35 end;gW[#gW+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9+iA,ca-5,ip+ir/2-iu+ix,ca-5)gW[#gW+1]=c8(c9,ca,type)ca=ca+it;local ik=cl(iz)gW[#gW+1]=c8(c9,ca,ik)ca=ca+it;gW[#gW+1]=c8(c9,ca,cw(D))ca=ca+it;gW[#gW+1]=c8(c9,ca,im(ew))end;if orbit~=nil and aq<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then iq=iq+is;c9=ip+ir+ip/2+is;ca=iq+ir/2+5+is;iu=ir/4;ix=0;gW[#gW+1]=[[<g class="pbright txtorb txtmid">]]gW[#gW+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ir+ip*2,ir+iq,is,is)if orbit.periapsis~=nil and orbit.apoapsis~=nil then iw=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(iu*2)iv=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/iw*(1-orbit.eccentricity)ix=iu-orbit.periapsis.altitude/iw-planet.radius/iw;local iB=""if orbit.periapsis.altitude<=0 then iB='redout'end;gW[#gW+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iB,ip+ir/2+ix+is,iq+ir/2+is,iu,iv)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ip+ir/2+is,iq+ir/2+is,planet.radius/iw)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then iy("Apoapsis")end;ca=iq+ir/2+5+is;c9=ip-ip/2+10+is;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then iy("Periapsis")end;gW[#gW+1]=c8(ip+ir/2+is,planet.name,20+is,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iC=orbit.timeToApoapsis/orbit.period*2*math.pi;local iD=iu*math.cos(iC)local iE=iv*math.sin(iC)gW[#gW+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ip+ir/2+iD+ix+is,iq+ir/2+iE+is)end;gW[#gW+1]=[[</g>]]return gW else return gW end end;local function iF(iG,iH)local iI;local iJ=(iH-iG):normalize()local eB=(bv-iG):dot(iJ)/iJ:dot(iJ)if eB<=0.then return(bv-iG):len()elseif eB>=(iH-iG):len()then return(bv-iH):len()end;local iK=iG+eB*iJ;iI=(iK-bv):len()return iI end;local function iL()local iI;local iM=nil;local iN=nil;local iO=nil;for cF,iP in pairs(aM[0])do if iP.hasAtmosphere then local ai=iF(planet.center,iP.center)if iM==nil or ai<iM then iN=iP;iM=ai;iO=planet end;if ab and ab.hasAtmosphere and ab.name~=planet.name then local dX=iF(ab.center,iP.center)if dX<iM then iN=iP;iM=dX;iO=ab end end end end;local iQ=gi(1770)local iR=gj(330)if iM then local iS="txttick "local iT=500000;if iM<iN.radius+iT or iM<iO.radius+iT then if bH then iS="txttick red "else iS="txttick orange "end end;iI=cl(iM,2)bI=c8(iQ,iR,"Pipe ("..iO.name.."--"..iN.name.."): "..iI,iS.."pbright txtmid")end end;local iU={}function iU.HUDPrologue(gW)bH,g8=gg(bv)if not bH then G=PvPR;I=PvPG;H=PvPB else G=SafeR;I=SafeG;H=SafeB end;ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]local iV=ax;local iW=ay;local iX=ax;local iY=ay;if gk()and not brightHud then iV=[[rgb(]]..d(G*0.4+0.5)..","..d(I*0.4+0.5)..","..d(H*0.3+0.5)..[[)]]iW=[[rgb(]]..d(G*0.3+0.5)..","..d(I*0.3+0.5)..","..d(H*0.2+0.5)..[[)]]end;gW[#gW+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],iV,iV,iX,iX,iW,iW,iY,iY,aF,aG)return gW end;function iU.DrawVerticalSpeed(gW,dg)gV(gW,dg)end;function iU.UpdateHud(gW)local hL=bB;local iZ=bC;local h3=iZ;local hi=hL;local i2=d(unit.getThrottle())local i7=bs*3.6;local i3=unit.getAxisCommandValue(0)local i_=gi(1770)local j0=gj(310)if AtmoSpeedAssist and bA then i3=J;i2=J*100 end;local gm=gl()local h4="ROLL"if i2==nil then i2=0 end;if not bL then if bs>5 then hL=hK(bq)iZ=hM(bq)else hL=0;iZ=0 end;h4="YAW"end;if g8>50000 and not ap then local j1;j1=cl(g8)gW[#gW+1]=c8(i_,j0,"PvP Boundary: "..j1,"pbright txtbig txtmid")end;gW[#gW+1]=aj;gW[#gW+1]=aC;gW[#gW+1]=gn;if bI~=""then gW[#gW+1]=bI end;if go~=""then gW[#gW+1]=go end;if gp~=""then gW[#gW+1]=gp end;gV(gW,ar)if l()==0 or RemoteHud then if not gk()or brightHud then if bL then h2(gW,centerX,centerY,h3,h4,bL)hh(gW,hi,h3,centerX,centerY,bL,d(hM(bq)),bs)else h2(gW,centerX,centerY,iZ,h4,bL)hh(gW,hL,iZ,centerX,centerY,bL,d(iZ),bs)end;ho(gW,ar,bL)hN(gW,bq,bs,centerX,centerY)end end;i1(gW,gm,i2,i3)i6(gW,i7)ia(gW)io(gW)return gW end;function iU.HUDEpilogue(gW)gW[#gW+1]="</svg>"return gW end;function iU.ExtraData(gW)local j2=gi(1240)local j3=gj(55)local j4=j3+10;local j5;local j6=0;local gm=gl()if VertTakeOffEngine then gm=gm.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bs>20 then gm=gm.."-COLLISION ON"end;if UseExtra~="Off"then gm="("..UseExtra..")-"..gm end;if TurnBurn then gm="TB-"..gm end;if not stablized then gm=gm.."-DeCoupled"end;local j7=vec3(core.getWorldAcceleration()):len()/9.80665;j5=core.g()gW[#gW+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then j2=gi(1120)j3=gj(55)j4=j3+10 elseif ap then local j8=gi(770)gW[#gW+1]=c8(j8,j3,"ATMOSPHERE","pdim txt txtend")gW[#gW+1]=c8(j8,j4,e("%.2f",aq),"pdim txt txtend","")end;gW[#gW+1]=c8(j2,j3,"GRAVITY","pdim txt txtend")gW[#gW+1]=c8(j2,j4,e("%.2f",j5/9.80665),"pdim txt txtend")gW[#gW+1]=c8(j2,j3+20,"ACCEL","pdim txt txtend")gW[#gW+1]=c8(j2,j4+20,e("%.2f",j7),"pdim txt txtend")gW[#gW+1]=c8(gi(960),gj(180),gm,"txtbig txtmid")end;function iU.DrawOdometer(gW,ac,TotalDistanceTravelled,ad)local j5;local j9=0;local ja=0;local j6=0;local jb=au>1000000 and z(au/1000000,2).." kTons"or z(au/1000,2).." Tons"if ap then j6=LastMaxBrakeInAtmo else j6=LastMaxBrake end;local jc,jd=aS.computeDistanceAndTime(bs,0,au,0,0,j6)j6=z(j6/(au*g9),2).." g"local je=a:maxForceForward()j5=core.g()if j5>0.1 then ja=au*j5;ja=z(ja/(au*g9),2).." g"j9=0.5*je/j5;j9=j9>1000000 and z(j9/1000000,2).." kTons"or z(j9/1000,2).." Tons"end;je=z(je/(au*g9),2).." g"gW[#gW+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gi(660),gi(700),gj(35),gi(960),gj(55),gi(1240),gj(35),gi(1280))if l()==0 or RemoteHud then gW[#gW+1]=c8(gi(700),gj(10),e("BrkTime: %s",cw(jd)),"txtstart")gW[#gW+1]=c8(gi(700),gj(20),e("Trip: %.2f km",ac),"txtstart")gW[#gW+1]=c8(gi(700),gj(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")gW[#gW+1]=c8(gi(830),gj(10),e("BrkDist: %s",cl(jc)),"txtstart")gW[#gW+1]=c8(gi(830),gj(20),"Trip Time: "..cw(ad),"txtstart")gW[#gW+1]=c8(gi(830),gj(30),"Total Time: "..cw(TotalFlightTime),"txtstart")gW[#gW+1]=c8(gi(970),gj(20),e("Mass: %s",jb),"txtstart")gW[#gW+1]=c8(gi(1240),gj(10),e("Max Brake: %s",j6),"txtend")gW[#gW+1]=c8(gi(1240),gj(30),e("Max Thrust: %s",je),"txtend")if j5>0.1 then gW[#gW+1]=c8(gi(970),gj(30),e("Max Thrust Mass: %s",j9),"txtstart")gW[#gW+1]=c8(gi(1240),gj(20),e("Req Thrust: %s",ja),"txtend")else gW[#gW+1]=c8(gi(970),gj(30),"Max Mass: n/a","txtstart")gW[#gW+1]=c8(gi(1240),gj(20),"Req Thrust: n/a","txtend")end end;gW[#gW+1]="</g>"return gW end;function iU.DrawWarnings(gW)return ia(gW)end;function iU.DisplayOrbitScreen(gW)return io(gW)end;function iU.DisplayMessage(gW,ik)if ik~="empty"then local ca=310;for jf in string.gmatch(ik,"([^\n]+)")do ca=ca+35;gW[#gW+1]=c8("50%",ca,jf,"msg")end end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function iU.DrawDeadZone(gW)gW[#gW+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function iU.UpdatePipe()if ap then bI=""return end;iL()end;function iU.DrawSettings(gW)if#bE>0 then local c9=gi(640)local ca=gj(200)gW[#gW+1]=[[<g class="pbright txtvspd txtstart">]]for cF,cG in pairs(bE)do gW[#gW+1]=c8(c9,ca,cG..": ".._G[cG])ca=ca+20;if cF%12==0 then c9=c9+gi(350)ca=gj(200)end end;gW[#gW+1]=c8(gi(640),gj(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")gW[#gW+1]="</g>"end;return gW end;local jg;local jh=gi(1770)local ji=gj(350)local jj=gj(15)local jk=gi(1370)local bO,jl;local jm=0;function iU.DrawRadarInfo()local function jn()if radarPanelID~=nil and jm==0 then s(radarPanelID)radarPanelID=nil;if jg~=nil then s(jg)jg=nil end else if jm==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jg=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;jm=0 end end;local f1,f2,f0,f3,f4,eY=aY.GetRadarHud()local A=f3 or 0;if f0>0 then if CollisionSystem then bO=A.."/"..f4 .." Plotted : "..f0-f4 .." Ignored"else bO="Radar Contacts: "..f0 end;gn=c8(jh,ji,bO,"pbright txtbig txtmid")if#eY>0 then gn=gn..c8(jk,jj,"Friendlies In Range","pbright txtbig txtmid")for cF,cG in pairs(eY)do jj=jj+20;gn=gn..c8(jk,jj,radar_1.getConstructName(cG),"pdim txtmid")end end;if f1==nil and jg==nil then jm=1;jn()end;if f1~=nil and jg~=nil then jn()end;if radarPanelID==nil then jn()end else if f2 then gn=c8(jh,ji,"Radar: Jammed","pbright txtbig txtmid")else gn=c8(jh,ji,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jm=0;jn()end end end;function iU.DrawTanks()if fuelX~=0 and fuelY~=0 then go=c8(fuelX,fuelY,"","txtstart pdim txtfuel")gF(fuelX,"Atmospheric ","ATMO",aH,gD,gE)gF(fuelX+120,"Space fuel t","SPACE",aI,gB,gC)gF(fuelX+240,"Rocket fuel ","ROCKET",aJ,gz,gA)end end;function iU.DrawShield()local jo=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local jp=core.getPvPTimer()local jq=shield_1.getResistances()local jr="A: "..10+jq[1]*100 .."% / E: "..10+jq[2]*100 .."% / K:"..10+jq[3]*100 .."% / T: "..10+jq[4]*100 .."%"local c9,ca=shieldX-60,shieldY+30;local js=d(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local gT=d(js*2.55)local gU=e("rgb(%d,%d,%d)",255-gT,gT,0)local cc=""gp=c8(c9,ca,"","txtmid pdim txtfuel")if js<10 and jo~="Shield Disabled"then cc="red "end;jp=jp>0 and"   PvPTime: "..cw(jp)or""gp=gp..e([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],c9,ca,gU,js*2,c9,ca,c9+2,ca+10,js,jp)gp=gp..c8(c9,ca-5,jo,cc.."txtstart pbright txtbig")gp=gp..c8(c9,ca+30,jr,cc.."txtstart pbright txtsmall")end;return iU end;local function jt()local function ju(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=aM[0][0]end;return p end;local function jv()local function jw(jx,jy)return jx.name<jy.name end;bG={}for cF,cG in pairs(aM[0])do bG[#bG+1]={name=cG.name,index=cF}end;table.sort(bG,jw)end;local function jz(jA)for cF,cG in pairs(jA)do if cG.name and cG.name==CustomTarget.name then return cF end end;return-1 end;local function jB()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ab=nil;CustomTarget=nil;return true end;local jC=bG[AutopilotTargetIndex].index;local jD=aM[0][jC]if jD.center then AutopilotTargetName=jD.name;ab=aR[0][jC]if CustomTarget~=nil then if aq==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jD;for _,cG in pairs(aR[0])do if cG.name==CustomTarget.planetname then ab=cG;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ab.center)else AutopilotTargetCoords=CustomTarget.position end;if ab.planetname~="Space"then if ab.hasAtmosphere then AutopilotTargetOrbit=d(ab.radius*(TargetOrbitRadius-1)+ab.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(ab.radius*(TargetOrbitRadius-1)+ab.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ab):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jE(g_)if not Autopilot and not VectorToTarget and not al and not IntoOrbit then if g_==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then jB()else local jC=bG[AutopilotTargetIndex].index;local jD=aM[0][jC]if jD~=nil and jD.name=="Space"or iphCondition=="Custom Only"and jD.center or iphCondition=="No Moons"and string.find(jD.name,"Moon")~=nil then if g_==nil then jE()else jE(1)end else jB()end end else a1="Disengage autopilot before changing Interplanetary Helper"bW("iph","AP")end end;local function jF()local fJ=-1;fJ=jz(aM[0])if fJ>-1 then table.remove(aM[0],fJ)end;fJ=-1;fJ=jz(SavedLocations)if fJ~=-1 then a1=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fJ)end;jE()jv()end;local function jG(fY,position,hH,jH)if dbHud_1 or hH then local p=ju(position)local j5=p.gravity;local jI=p.atmosphericDensityAboveSurface;if jH then jI=aq;j5=unit.getClosestPlanetInfluence()end;local jJ={position=position,name=fY,atmosphere=jI,planetname=p.name,gravity=j5,safe=jH}if not hH then SavedLocations[#SavedLocations+1]=jJ else for cF,cG in pairs(aM[0])do if cG.name and fY==cG.name then table.remove(aM[0],cF)end end end;table.insert(aM[0],jJ)jv()jB()a1="Location saved as "..fY.."("..p.name..")"else a1="Databank must be installed to save permanent locations"end end;local cH={}function cH.UpdateAtlasLocationsList()jv()end;function cH.UpdateAutopilotTarget()jB()end;function cH.adjustAutopilotTargetIndex(g_)jE(g_)end;function cH.findAtlasIndex(jA)jz(jA)end;function cH.UpdatePosition(jK)local fJ=jz(SavedLocations)if fJ~=-1 then if jK~=nil then SavedLocations[fJ].name=jK;AutopilotTargetIndex=AutopilotTargetIndex-1;jE()else local jL=SavedLocations[fJ]jL.atmosphere=aq;jL.gravity=unit.getClosestPlanetInfluence()jL.position=bv;jL.safe=true end;a1=SavedLocations[fJ].name.." position updated ("..SavedLocations[fJ].planetname..")"else a1="Name Not Found"end end;function cH.AddNewLocation(fY,position,hH,jH)jG(fY,position,hH,jH)end;function cH.ClearCurrentPosition()jF()end;for cF,cG in pairs(SavedLocations)do table.insert(aM[0],cG)end;jv()cH.UpdateAutopilotTarget()return cH end;local function jM()local jN={}local function jO(ew)local jP=AutopilotEndSpeed;if not Autopilot then jP=0 end;if not ap then return aS.computeDistanceAndTime(ew,jP,au,0,0,LastMaxBrake-AutopilotPlanetGravity*au)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(ew,jP,au,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*au)else return 0,0 end end end;local function jQ(ew)local jP=AutopilotEndSpeed;if not Autopilot then jP=0 end;return aS.computeDistanceAndTime(ew,jP,au,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*au)end;local jR=false;function jN.GetAutopilotBrakeDistanceAndTime(ew)return jO(ew)end;function jN.GetAutopilotTBBrakeDistanceAndTime(ew)return jQ(ew)end;local function jS(jT,jU,jV)jU=jU:project_on_plane(jT)jV=jV:project_on_plane(jT)return m(jU:cross(jV):dot(jT),jU:dot(jV))end;local function jW()local function jX()local jY=-1;local jZ=-1;if vBooster then jY=vBooster.getDistance()end;if hover then jZ=hover.getDistance()end;if jY~=-1 and jZ~=-1 then if jY<jZ then return jY else return jZ end elseif jY~=-1 then return jY elseif jZ~=-1 then return jZ else return-1 end end;local j_=jX()local k0=-1;if telemeter_1 then k0=telemeter_1.getDistance()end;if j_~=-1 and k0~=-1 then if j_<k0 then return j_ else return k0 end elseif j_~=-1 then return j_ else return k0 end end;local function k1(planet,dT,k2)local function k3(k4,da)local dZ=vec3(da)if k4.bodyId==0 then return setmetatable({latitude=dZ.x,longitude=dZ.y,altitude=dZ.z,bodyId=0,systemId=k4.planetarySystemId},MapPosition)end;local d_=dZ-k4.center;local ai=d_:len()local dg=ai-k4.radius;local de=0;local df=0;if not ci(ai,0)then local e0=m(d_.y,d_.x)df=e0>=0 and e0 or 2*math.pi+e0;de=math.pi/2-math.acos(d_.z/ai)end;return setmetatable({latitude=math.deg(de),longitude=math.deg(df),altitude=dg,bodyId=k4.bodyId,systemId=k4.planetarySystemId},MapPosition)end;local k5=k3(planet,dT)k5="::pos{"..k5.systemId..","..k5.bodyId..","..k5.latitude..","..k5.longitude..","..k5.altitude.."}"if k2 then return k5 else system.setWaypoint(k5)return true end end;local k6=false;function jN.showWayPoint(planet,dT,k2)return k1(planet,dT,k2)end;function jN.APTick()local function k7()if bN and not BrakeLanding then local bU=bN[1]local fZ,f_=bN[2],bN[3]local k8=math.min(fZ,f_ or fZ)local k9=k8/bs;local ka=AutoTakeoff and(bs<42 or an~=-1)local kb=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if kb and not ka and(a7*1.5>k8 or k9<1)then BrakeIsOn=true;ce(0)if AltitudeHold then cq()end;if LockPitch then ToggleLockPitch()end;a1="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cr()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if k9<11 then bM=bU.name.." COLLISION "..cw(k9).." / "..cl(k8,2)else bM=bU.name.." collision "..cw(k9)end;if k9<6 then bW("alarm","AL",2)end else bM=false end end;local function kc(bQ,kd,ke)local function kf(bQ,dF)bQ=vec3(bQ)dF=vec3(dF):normalize()local cX=bQ*dF;return cX.x+cX.y+cX.z end;local kg=0.001;local kh=1;if not ap or not b2 or an~=-1 or bs<P then if ke==nil then ke=DampingMultiplier end;if kd==nil then kd=kg end;bQ=vec3(bQ):normalize()local ki=vec3()-bQ;local kj=-kf(ki,core.getConstructWorldOrientationRight())*kh;local kk=-kf(ki,core.getConstructWorldOrientationUp())*kh;if aA==0 then aA=kj/2 end;if aB==0 then aB=kk/2 end;if c(kj)<0.1 then U=U-kj*2 else U=U-(kj+(kj-aA)*ke)end;if c(kk)<0.1 then T=T+kk*2 else T=T+kk+(kk-aB)*ke end;aA=kj;aB=kk;if c(kj)<kd and c(kk)<kd then return true end;return false elseif b2 and an==-1 then bQ=br;if ke==nil then ke=DampingMultiplier end;if kd==nil then kd=kg end;bQ=vec3(bQ):normalize()local ki=bo-bQ;local kj=-kf(ki,core.getConstructWorldOrientationRight())*kh;local kk=-kf(ki,core.getConstructWorldOrientationUp())*kh;if aA==0 then aA=kj/2 end;if aB==0 then aB=kk/2 end;if c(kj)<0.1 then U=U-kj*5 else U=U-(kj+(kj-aA)*ke)end;if c(kk)<0.1 then T=T+kk*5 else T=T+kk+(kk-aB)*ke end;aA=kj;aB=kk;if c(kj)<kd and c(kk)<kd then return true end;return false end end;ap=j()>0;aq=j()ar=core.getAltitude()an=jW()D=o()b3=D;if CollisionSystem then k7()end;if antigrav then by=antigrav.getState()==1 end;local kl=1;local km=1;local kn=D-b3;local ko=-math.deg(jS(bn,br,bo))local kp=math.deg(jS(bp,br,bo))local g_=bt*-1;b2=ap and ko<-YawStallAngle or ko>YawStallAngle or kp<-PitchStallAngle or kp>PitchStallAngle;local kq=system.getMouseDeltaX()local kr=system.getMouseDeltaY()if InvertMouse and not a0 then kr=-kr end;U=0;Y=0;T=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if ar==0 then ar=(bv-planet.center):len()-planet.radius end;bL=unit.getClosestPlanetInfluence()>0 or ar>0 and ar<200000;local j5=planet:getGravity(core.getConstructWorldPos()):len()*au;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and a0 then if not aZ then af=af+kq;ag=ag+kr end else af=0;ag=0 end else af=af+kq;ag=ag+kr;ai=x(af*af+ag*ag)if not a0 and l()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then U=U-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then U=U-(af+DeadZone)*MouseXSensitivity else U=0 end;if ag>0 and ag>DeadZone then T=T-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then T=T-(ag+DeadZone)*MouseYSensitivity else T=0 end else af=0;ag=0;if userControlScheme=="mouse"then T=(-utils.smoothstep(kr,-100,100)+0.5)*2*kl;U=(-utils.smoothstep(kq,-100,100)+0.5)*2*km end end end end;local ks=bs>8334;if bs>SpaceSpeedLimit/3.6 and not ap and not Autopilot and not ks then a1="Space Speed Engine Shutoff reached"ce(0)end;if not ks and LastIsWarping then if not BrakeIsOn then ct()end;if Autopilot then cr()end end;LastIsWarping=ks;if ap and aq>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not jR then BrakeIsOn=true;jR=true elseif not AtmoSpeedAssist and jR then if bs<b7/3.6 then BrakeIsOn=false;jR=false end end end;if BrakeIsOn then X=1 else X=0 end;if ProgradeIsOn then if ak then BrakeIsOn=false;local kt=false;if CustomTarget~=nil and ak~=1 then kt=kc(CustomTarget.position-bv,0.1)else kt=kc(vec3(br),0.01)end;b0=true;if kt then ch(d(b7))if(c(bC)<2 or c(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;Q=true;if ak~=1 then am=true end;ak=false;Autopilot=false;cu()end elseif ap and AtmoSpeedAssist then ce(1)end elseif bs>P then kc(vec3(br),0.01)end end;if RetrogradeIsOn then if ap then RetrogradeIsOn=false elseif bs>P then kc(-vec3(br))end end;if not ProgradeIsOn and ak and not IntoOrbit then if aq==0 then Q=true;cu()ak=false;am=true else ak=false;cr()end end;if am and CustomTarget~=nil and(ar<HoldAltitude+250 and ar>HoldAltitude-250)and bs*3.6>b7-250 and c(bu)<25 and aq>=0.1 and(CustomTarget.position-bv):len()>2000+ar then cr()am=false end;if VertTakeOff then b0=true;local ku=HoldAltitude;if bu<-30 then a1="Unable to achieve lift. Safety Landing."ae=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then ku=antigrav.getBaseAltitude()end;if ar<ku-100 then b8=0;ae=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;ae=0 elseif bu<-30 then BrakeIsOn=true;ae=15 elseif ar>=ku then if by then if Autopilot or VectorToTarget then co()else BrakeIsOn=true;VertTakeOff=false end;a1="Takeoff complete. Singularity engaged"bW("aggLk","AG")else BrakeIsOn=false;a1="VTO complete. Engaging Horizontal Flight"bW("vtoc","VT")co()end;ae=0 end else if aq>0.08 then b8=0;BrakeIsOn=false;ae=20 elseif aq<0.08 and aq>0 then BrakeIsOn=false;if bk then b8=0;ae=20 else ae=0;b8=36;ch(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=ku;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local kv=q(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(kv)local kw=q(vTpitchPID:get(),-1,1)T=kw end end;if IntoOrbit then local ki;local kx=false;local ky=cl(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ab end end;if not bf then bg=d(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=d(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget then ki=CustomTarget.position-bv end;local kz,kA=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local kB=bC;if not bc then local kC=false;local kD=false;ce(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..ky;if be.VectorToTarget then kc(ki:normalize():project_on_plane(bt))kx=bo:dot(ki:project_on_plane(bn):normalize())>0.95 else kc(br)kx=ko<0.5;if bs<150 then kx=true end end;T=0;ba=0;if bB<=ba+1 and bB>=ba-1 then kC=true else kC=false end;if kB<=bb+1 and kB>=bb-1 then kD=true else kD=false end;if kC and kD and kx then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then kc(ki:normalize():project_on_plane(bt))elseif bs>150 then kc(br)end;T=0;if be.VectorToTarget then local a7,_=aS.computeDistanceAndTime(bs,b7/3.6,au,0,0,LastMaxBrake)if bi and ki:len()>15000+a7+ar then b9="Orbiting to Target"if ar-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or ki:len()<15000+a7+ar then a1="Orbit complete, proceeding with reentry"bW("orCom","OB")AutopilotTargetCoords=CustomTarget.position;Q=true;am=true;be.VectorToTarget,be.AutopilotAlign=false,false;cp()cu()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ar>bg*0.9 and ar<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;ce(0)ba=0;if not be.VectorToTarget then a1="Orbit complete"bW("orCom","OB")cp()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..ky;bd=true;ch(kA*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kE=bu;local kF=ar-bg;local kG=c(kF)if bu<10 and c(bB)<10 and kG<100 then kE=bu*2 end;if kE<10 and c(bB)<10 and kG<100 then kE=kE*2 end;if kE<5 and c(bB)<5 and kG<100 then kE=kE*4 end;VSpdPID:inject(kE)ba=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kF)ba=q(ba-q(OrbitAltPID:get(),-15,15),-90,90)end end else local kH=2.75;local kI=c(z(kz*kH))local kJ=kI%50;if kJ>0 then kI=kI-kJ+50 end;BrakeIsOn=false;if ar<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..ky;ba=utils.map(bu,200,0,-15,80)elseif ar>=bg*0.8 and ar<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..ky;kI=kI*0.75;ba=utils.map(bu,100,-100,-15,65)elseif ar>=bg*1.15 and ar<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..ky;kI=kI*0.75;if bu<0 or bd then ba=utils.map(ar,bg*1.5,bg*1.01,-30,0)else ba=utils.map(ar,bg*0.99,bg*1.5,0,30)end elseif ar>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..ky;ba=-65;local kK=utils.map(bu,-150,-400,1,0.55)kI=kI*kK end;ch(d(kI))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kL=ba-bB;OrbitPitchPID:inject(kL)local kM=q(OrbitPitchPID:get(),-0.5,0.5)T=kM end end;if Autopilot and aq==0 and not ak then local function kN(bO,orbit)system.print(bO)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ce(0)O=false;a1=bO;bW("apCom","AP")if orbit or ak then if orbit and AutopilotTargetOrbit~=nil and not ak then if not ar or ar==0 then return end;bg=ar;bf=true end;cp()end end;local kO,kP=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kQ=(CustomTarget.position-ab.center):normalize()local kR=kQ:project_on_plane((ab.center-bv):normalize()):normalize()local kS=ab.center+kR*(ab.radius+AutopilotTargetOrbit)local kT=CustomTarget.position+(CustomTarget.position-ab.center):normalize()*(AutopilotTargetOrbit-ab:getAltitude(CustomTarget.position))if(bv-kS):len()<(bv-kT):len()then kO=kS else kO=kT;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kO;aX.showWayPoint(ab,AutopilotTargetCoords)kP=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kP=true;TargetSet=true;AutopilotRealigned=true;kO=CustomTarget.position+(bv-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kQ=(bv+br*100000-ab.center):normalize()local kR=kQ:project_on_plane((ab.center-bv):normalize()):normalize()if kR:len()<1 then kQ=(bv+bo*100000-ab.center):normalize()kR=kQ:project_on_plane((ab.center-bv):normalize()):normalize()end;kO=ab.center+kR*(ab.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kO;TargetSet=true;kP=true;AutopilotRealigned=true;aX.showWayPoint(ab,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kO)-bv):len()local bR,bS,bT=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(bU)if bU.noAtmosphericDensityAltitude>0 then return bU.radius+bU.noAtmosphericDensityAltitude else return bU.radius+bU.surfaceMaxAltitude*1.5 end end)local bV=bS;if bT~=nil and bS~=nil then bV=math.min(bT,bS)end;if bV~=nil and bV<AutopilotDistance and bR.name==ab.name then AutopilotDistance=bV end;local kt=true;local kU=(ab.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ab.radius;local ik=cl(kU)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ik..'"}')local a7,a8;if not TurnBurn then a7,a8=jO(bs)else a7,a8=jQ(bs)end;if bs>300 and AutopilotAccelerating then local ki=vec3(kO)-bv;local kV=q(math.deg(jS(bn,br:normalize(),ki:normalize()))*bs/500,-90,90)local kW=q(math.deg(jS(bp,br:normalize(),ki:normalize()))*bs/500,-90,90)if c(kV)<20 and c(kW)<20 then kV=kV*2;kW=kW*2 end;if c(kV)<2 and c(kW)<2 then kV=kV*2;kW=kW*2 end;local ko=-math.deg(jS(bn,bo,br:normalize()))local kp=-math.deg(jS(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kW-kp)local kX=q(apPitchPID:get(),-1,1)T=T+kX;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kV-ko)local kY=q(apYawPID:get(),-1,1)U=U+kY;kP=true;if c(kV)>2 or c(kW)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"bW("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end end end;if kU<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ab):escapeAndOrbitalSpeed(kU)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bR,bV=bP((AutopilotTargetCoords-bv):normalize())if ab.name~=planet.name then if bR~=nil and ab.name~=bR.name then a1="Collision with "..bR.name.." in "..cl(bV).."\nClear LOS to continue."ah=5;k6=true else k6=false;a1=""end end end;if not k6 then if not AutopilotCruising and not AutopilotBraking and not kP then kt=kc((kO-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kt=kc(-vec3(br):normalize())end end;if AutopilotAccelerating then if not O then BrakeIsOn=false;ce(AutopilotInterplanetaryThrottle)J=z(AutopilotInterplanetaryThrottle,2)O=true end;local kZ=unit.getThrottle()if AtmoSpeedAssist then kZ=J end;if bq:len()>=MaxGameVelocity or kZ==0 and O then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then bW("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;ce(0)end;local k_=AutopilotDistance;if ab.name=="Space"then k_=k_-AutopilotSpaceDistance end;if k_<=a7 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bW("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;ce(0)O=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;X=1 end;if TurnBurn then ce(1,true)end;local _,kA=aU(ab):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local ki;if CustomTarget~=nil then ki=CustomTarget.position-bv end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bs<50 then kN("Autopilot complete, arrived at space location")BrakeIsOn=true;X=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bs<=kA and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kN("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;ak=true;aX.showWayPoint(ab,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then bW("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=kA then if CustomTarget~=nil then if br:normalize():dot(ki:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then bW("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ab,CustomTarget.position)WaypointSet=true end else kN("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;ak=true;aX.showWayPoint(ab,CustomTarget.position)WaypointSet=false end else kN("Autopilot completed, setting orbit",true)X=0 end end elseif AutopilotStatus=="Circularizing"then kN("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local k_=AutopilotDistance;if ab.name=="Space"then k_=k_-AutopilotSpaceDistance end;if k_<=a7 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bW("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kZ=unit.getThrottle()if AtmoSpeedAssist then kZ=J end;if kZ>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end;AutopilotCruising=false end else if kt then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ak then AutopilotTargetCoords=vec3(ab.center)+(AutopilotTargetOrbit+ab.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif kt and not k6 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end;if not O then ce(AutopilotInterplanetaryThrottle,true)J=z(AutopilotInterplanetaryThrottle,2)O=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and aq>0)then a1="Autopilot complete, starting reentry"bW("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X=0;ce(0)O=false;ProgradeIsOn=true;ak=true;aX.showWayPoint(ab,CustomTarget.position)end;if Z then b0=true;local kW=0;local eA=bv+vec3(unit.getMasterPlayerRelativePosition())local l0=eA-bv;local l1=vec3(l0):project_on(bo):len()local l2=vec3(l0):project_on(bp):len()local ai=x(l1*l1+l2*l2)kc(l0:normalize())local l3=40;local l4=ai<l3;local l5=100;local l6=q((ai-l3)/2,10,l5)T=0;local kt=c(U)<0.1;if kt and bs<l6 and not l4 then BrakeIsOn=false;kW=-20 else BrakeIsOn=true;kW=0 end;local l7=0;if c(kW-bB)>l7 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kW-bB)local kX=pitchPID:get()T=kX end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local l8=LastMaxBrakeInAtmo;if l8 then l8=l8*q(bs/100,0.1,1)*aq else l8=LastMaxBrake end;if aq<0.01 then l8=LastMaxBrake end;local l9=vec3(core.getWorldAirFrictionAcceleration())local la=x(l9:len()-l9:project_on(g_):len())*au;if bs>100 then a7,a8=aS.computeDistanceAndTime(bs,100,au,0,0,l8+la)local lb,lc=aS.computeDistanceAndTime(100,0,au,0,0,l8/2)a7=a7+lb else a7,a8=aS.computeDistanceAndTime(bs,0,au,0,0,l8/2)end;local ld=HoldAltitude-ar;local le=500+bs;local lf=1;if AutoTakeoff then lf=q(bs/100,0.1,1)end;local kW=(utils.smoothstep(ld,-le,le)-0.5)*2*MaxPitch*lf;if not Reentry and not ak and not VectorToTarget and bo:dot(br:normalize())<0.99 then kW=(utils.smoothstep(ld,-le*q(20-19*aq*10,1,20),le*q(20-19*aq*10,1,20))-0.5)*2*MaxPitch*q(2-aq*10,1,2)*lf end;if not AltitudeHold then kW=0 end;if LockPitch~=nil then if bL and not IntoOrbit then kW=LockPitch else LockPitch=nil end end;b0=true;local lg=T;if Reentry then local lh=d(b7)local li,lj=aS.computeDistanceAndTime(bs,lh/3.6,au,0,0,LastMaxBrake-planet.gravity*9.8*au)li=li==-1 and 5000 or li;local lk=ar-(planet.noAtmosphericDensityAltitude+li)local ll=ar>planet.noAtmosphericDensityAltitude+li*1.35;if ll then kW=ReEntryPitch;if bs<=lh/3.6 and bs>lh/3.6-10 and c(br:normalize():dot(bo))>0.9 and not bA then N=false;ce(1)end elseif bA and not ll and not ap then ch(lh,true)end;if bA then if bs>lh/3.6 and not ll then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not Q then kW=-80;if aq>0.02 then a1="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kW=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ll then b0=true elseif not ll then if not ap and(bA or r:getTargetSpeed(axisCommandId.longitudinal)~=lh)then ch(lh)end;if bs<lh/3.6+1 then BrakeIsOn=false;Q=false;Reentry=false;b0=true end end end;if bs>P and not al and not VectorToTarget and not BrakeLanding and ForceAlignment then kc(vec3(br))end;if bJ or(VectorToTarget or al)and AutopilotTargetIndex>0 and aq>0.01 then local ki;if bJ then if type(bJ)=="table"then ki=bJ elseif bJ<3 and bJ>0 then ki=-bt:cross(br)*5000 elseif bJ>=3 then ki=bt:cross(br)*5000 elseif bJ<0 then ki=br*25000 end elseif CustomTarget~=nil then ki=CustomTarget.position-bv else ki=ab.center-bv end;local kV=math.deg(jS(bt:normalize(),br,ki))*2;local lm=math.rad(c(bC))if bs>minRollVelocity and aq>0.01 then local ln=q(90-kW*2,-90,90)b4=q(kV*2,-ln,ln)local lo=kV;kV=q(q(kV,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(lm)+4*(bB-kW)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)kW=q(q(kW*math.cos(lm),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(lo)*math.sin(lm),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;kV=q(kV,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lp=ko-kV;if bJ and c(lp)<=0.0001 and(type(bJ)=="table"or type(bJ)~="table"and bJ<0 and c(bC)<1)then if bJ==-2 then cq()end;bJ=nil;bW("180Off","BR")return end;if not b2 and bs>minRollVelocity and aq>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lp)local kY=q(yawPID:get(),-1,1)U=U+kY elseif ap and an>-1 or bs<minRollVelocity then kc(ki)elseif b2 and aq>0.01 then if(ko<-YawStallAngle or ko>YawStallAngle)and aq>0.01 then kc(br)end;if(kp<-PitchStallAngle or kp>PitchStallAngle)and aq>0.01 then kW=q(bB-kp,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not al then local ku=planet:getAltitude(CustomTarget.position)local lk=x(ki:len()^2-(ar-ku)^2)local lq=br:len()-c(bu)StrongBrakes=true;if not al and not Reentry and lk<=a7+bs*kn/2 and(br:project_on_plane(bt):normalize():dot(ki:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"ce(0)if AltitudeHold then cq()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(lq<0.1 or lk<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<lk)then if not by then bW("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bM=false end;LastDistanceToTarget=lk end elseif VectorToTarget and aq==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(al or Reentry)then if CustomTarget~=nil and ab.name==planet.name then local ki=CustomTarget.position-bv;local ku=planet:getAltitude(CustomTarget.position)local lk=x(ki:len()^2-(ar-ku)^2)local l8=LastMaxBrakeInAtmo;if l8 then a7,a8=aS.computeDistanceAndTime(bs,0,au,0,0,l8/2)StrongBrakes=true;if lk<=a7+bs*kn/2 and br:project_on_plane(bt):normalize():dot(ki:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;Q=true;ak=false;am=true;Autopilot=false;cu()end end;LastDistanceToTarget=lk end end end;if aq==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(al or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cp()VectorToTarget=false;bc=true end end;if b2 and aq>0.01 and an==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then kc(br)kW=q(bB-kp,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;T=lg;local k0=-1;if BrakeLanding then kW=0;local lr=false;local ls=30;if aT~=nil and aT>0 then local lt=q(aq,0.4,2)local l8=LastMaxBrakeInAtmo*q(bs/100,0.1,1)*lt;local lu=aT*lt+l8-j5;local lv=l8/2-j5;local lw=bs-x(c(lv/2)*20/(0.5*au))*utils.sign(lv)if lw<0 then lw=0 end;local lx;if bs>100 then local ly,_=aS.computeDistanceAndTime(bs,100,au,0,0,l8)local lz,_=aS.computeDistanceAndTime(100,0,au,0,0,x(l8))lx=ly+lz else lx=aS.computeDistanceAndTime(bs,0,au,0,0,x(l8))end;if lx<20 then BrakeIsOn=false else local lA=0;if lw>100 then local lB,_=aS.computeDistanceAndTime(lw,100,au,0,0,lu)local lC,_=aS.computeDistanceAndTime(100,0,au,0,0,aT*lt+x(l8)-j5)lA=lB+lC else lA,_=aS.computeDistanceAndTime(lw,0,au,0,0,aT*lt+x(l8)-j5)end;lA=(lA+15+bs*kn)*1.1;local lD=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lD then local ku=planet:getAltitude(CustomTarget.position)local lE=ar-ku-100;local ki=CustomTarget.position-bv;local lF=x(ki:len()^2-(ar-ku)^2)if lF>100 then lD=false elseif lE<=lA or lA==-1 then BrakeIsOn=true;lr=true else BrakeIsOn=false;lr=true end end;if not lD and CalculateBrakeLandingSpeed then if lA>=ls then BrakeIsOn=true else BrakeIsOn=false end;lr=true end end end;if not bA then ce(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)stablized=true;k0=an;if k0>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if R then a.control.extendLandingGears()bW("grOut","LG",1)end;r:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-g_)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not lr then BrakeIsOn=true elseif not lr then BrakeIsOn=false end end;if AutoTakeoff or al then local bR,bT,bS;if AutopilotTargetCoords~=nil then bR,bT,bS=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(bU)return bU.radius+bU.noAtmosphericDensityAltitude end)end;if by then if ar>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;ce(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kW)<15 and ar/HoldAltitude>0.75 then AutoTakeoff=false;if not al then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif al and bs<P then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;ce(0)elseif al then ce(0)BrakeIsOn=true end elseif al and aq==0 and ab~=nil and(bR==nil or bR.name==ab.name)then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;if not bA then ce(0)end;AutopilotAccelerating=true end end;local lG=an>-1;local lH=bB;if(VectorToTarget or al or bJ)and not lG and bs>minRollVelocity and aq>0.01 then local lm=math.rad(c(bC))lH=bB*c(math.cos(lm))+kp*math.sin(lm)end;local lI=q(kW-lH,-PitchStallAngle*0.80,PitchStallAngle*0.80)if aq<0.01 and VectorToTarget then lI=q(kW-lH,-85,MaxPitch)elseif aq<0.01 then lI=q(kW-lH,-MaxPitch,MaxPitch)end;if c(bC)<5 or VectorToTarget or bJ or BrakeLanding or lG or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lI)local kX=pitchPID:get()T=T+kX end end;if antigrav~=nil and(antigrav and not ExternalAGG and ar<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;an=jW()return jN end;function script.onStart()local lJ={}local lK={}local lL=false;local function lM()local function lN(lO)local lP=dbHud_1.hasKey;for cF,cG in pairs(lO)do if lP(cG)then local cX=f(dbHud_1.getStringValue(cG))if cX~=nil then _G[cG]=cX;lL=true end end end end;if dbHud_1 then if not useTheseSettings then lN(c1())coroutine.yield()lN(b)else lN(b)a1="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5;lL=false end;coroutine.yield()if lL then a1="Loaded Saved Variables"aF=ResolutionX;aG=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ax=[[rgb(]]..d(G+0.5)..","..d(I+0.5)..","..d(H+0.5)..[[)]]ay=[[rgb(]]..d(G*0.9+0.5)..","..d(I*0.9+0.5)..","..d(H*0.9+0.5)..[[)]]elseif not useTheseSettings then a1="No Saved Variables Found - Exit HUD to save settings"end else a1="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<D then LastMaxBrakeInAtmo=0 end;LastStartTime=D;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a1="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ar end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function lQ()local function lR(lS,lT)if lS>lT then lT=lS end;local lU,lV=0,0;if ContainerOptimization>0 then lU=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lV=FuelTankOptimization*0.05 end;lT=lT*(1-(lU+lV))return lT end;local lW=core.getElementNameById;local lX=fuelX~=0 and fuelY~=0;for cF in pairs(as)do local type=core.getElementTypeById(as[cF])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(as[cF])),'^.*vertical.*$')and core.getElementForwardById(as[cF])[3]>0 then bx=true;p("UpEngine")end end;if n(type,'^.*Space Engine$')then bl=true;if n(tostring(core.getElementTagsById(as[cF])),'^.*vertical.*$')then local lY=core.getElementForwardById(as[cF])if lY[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then R=true end;if type=="Dynamic Core Unit"then local lZ=h(as[cF])if lZ>10000 then F=110 elseif lZ>1000 then F=55 elseif lZ>150 then F=27 end end;aK=aK+h(as[cF])if lX and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lZ=h(as[cF])local jb=k(as[cF])local lS=0;local gP=o()if type=="Atmospheric Fuel Tank"then local lT=400;local l_=35.03;if lZ>10000 then lT=51200;l_=5480 elseif lZ>1300 then lT=6400;l_=988.67 elseif lZ>150 then lT=1600;l_=182.67 end;lS=jb-l_;if fuelTankHandlingAtmo>0 then lT=lT+lT*fuelTankHandlingAtmo*0.2 end;lT=lR(lS,lT)aH[#aH+1]={as[cF],lW(as[cF]),lT,l_,lS,gP}end;if type=="Rocket Fuel Tank"then local lT=320;local l_=173.42;if lZ>65000 then lT=40000;l_=25740 elseif lZ>6000 then lT=5120;l_=4720 elseif lZ>700 then lT=640;l_=886.72 end;lS=jb-l_;if fuelTankHandlingRocket>0 then lT=lT+lT*fuelTankHandlingRocket*0.1 end;lT=lR(lS,lT)aJ[#aJ+1]={as[cF],lW(as[cF]),lT,l_,lS,gP}end;if type=="Space Fuel Tank"then local lT=2400;local l_=182.67;if lZ>10000 then lT=76800;l_=5480 elseif lZ>1300 then lT=9600;l_=988.67 end;lS=jb-l_;if fuelTankHandlingSpace>0 then lT=lT+lT*fuelTankHandlingSpace*0.2 end;lT=lR(lS,lT)aI[#aI+1]={as[cF],lW(as[cF]),lT,l_,lS,gP}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function m0()if gyro~=nil then aw=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(ap or not ap and ar<10000)then for _,cG in pairs(door)do cG.toggle()end end;if switch then for _,cG in pairs(switch)do cG.toggle()end end;if forcefield and(ap or not ap==0 and ar<10000)then for _,cG in pairs(forcefield)do cG.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if R then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if an~=-1 or not ap and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if R then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(b1)if ap and an~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ap end;local function m1(m2,m3,m4,m5,c9,ca,m6,m7,m8,m9)local ma={enableName=m2,disableName=m3,width=m4,height=m5,x=c9,y=ca,toggleVar=m6,toggleFunction=m7,drawCondition=m8,hovered=false}if m9 then table.insert(lK,ma)else table.insert(lJ,ma)end;return ma end;local function mb(mc)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif mc=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif mc=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif mc=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=c1(mc)showHud=false else bE={}showHud=true end end;local function md()bD=not bD;if bD then aE=lK;a1="Hold SHIFT to see Settings"bF=showHud else aE=lJ;a1="Hold SHIFT to see Control Buttons"mb()showHud=bF end end;local function me(cG)_G[cG]=not _G[cG]if _G[cG]then a1=cG.." set to true"else a1=cG.." set to false"end;if cG=="showHud"then bF=_G[cG]elseif cG=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cG=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function mf()local mg=50;local mh=340;local c9=500;local ca=aG/2-400;local mi=0;for cF,cG in pairs(c1("boolean"))do if type(_G[cG])=="boolean"then m1(cG,cG,mh,mg,c9,ca,function()return _G[cG]end,function()me(cG)end,function()return true end,true)ca=ca+mg+20;if mi==9 then c9=c9+mh+20;ca=aG/2-400;mi=0 else mi=mi+1 end end end;m1("Control View","Control View",mh,mg,10,aG/2-500,function()return true end,md,function()return true end,true)m1("View Handling Settings",'Hide Handling Settings',mh,mg,10,aG/2-(500-mg),function()return showHandlingVariables end,function()mb("handling")end,function()return true end,true)m1("View Hud Settings",'Hide Hud Settings',mh,mg,10,aG/2-(500-mg*2),function()return showHudVariables end,function()mb("hud")end,function()return true end,true)m1("View Physics Settings",'Hide Physics Settings',mh,mg,10,aG/2-(500-mg*3),function()return showPhysicsVariables end,function()mb("physics")end,function()return true end,true)end;local function mj()local function jG()local position=bv;local fY=planet.name..". "..#SavedLocations;if radar_1 then local dp,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dp~=nil and dp~=""then fY=fY.." "..radar_1.getConstructName(dp)end end;return aW.AddNewLocation(fY,position,false,true)end;local function mk()TurnBurn=not TurnBurn end;local function ml(mm)if mm==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function mn()aW.UpdatePosition()end;local function jF()aW.ClearCurrentPosition()end;local function mo()local fY=AutopilotTargetName;if fY==nil then local ik=cl((bv-CustomTarget.position):len())fY=CustomTarget.name.." "..ik end;if fY==nil then fY="None"end;return"Engage Autopilot: "..fY end;local function mp()local fY=AutopilotTargetName;if fY==nil then fY=CustomTarget.name end;if fY==nil then fY="None"end;return"Disable Autopilot: "..fY end;local function mq()if l()==1 then Z=not Z;if Z then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)bW("folOn","F")else bW("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else a1="Follow Mode only works with Remote controller"Z=false end end;local mg=50;local mh=260;local mr=m1("Enable Brake Toggle","Disable Brake Toggle",mh,mg,aF/2-mh/2,aG/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a1="Brakes in Toggle Mode"else a1="Brakes in Default Mode"end end)m1("Align Prograde","Disable Prograde",mh,mg,aF/2-mh/2-50-mr.width,aG/2-mg+380,function()return ProgradeIsOn end,function()ml(1)end)m1("Align Retrograde","Disable Retrograde",mh,mg,aF/2-mh/2+mr.width+50,aG/2-mg+380,function()return RetrogradeIsOn end,ml,function()return aq==0 end)local ms=m1(mo,mp,600,60,aF/2-600/2,aG/2-60/2-400,function()return Autopilot end,cr)m1("Save Position","Save Position",200,ms.height,ms.x+ms.width+30,ms.y,function()return false end,jG,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)m1("Update Position","Update Position",200,ms.height,ms.x+ms.width+30,ms.y,function()return false end,mn,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)m1("Clear Position","Clear Position",200,ms.height,ms.x-200-30,ms.y,function()return true end,jF,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)mg=60;mh=300;local c9=10;local ca=aG/2-500;ca=ca+mg+20;m1("View Settings","View Settings",mh,mg,c9,ca,function()return true end,md)local ca=aG/2-300;m1("Enable Turn and Burn","Disable Turn and Burn",mh,mg,c9,ca,function()return TurnBurn end,mk)m1("Horizontal Takeoff Mode","Vertical Takeoff Mode",mh,mg,c9+mh+20,ca,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a1="Vertical Takeoff Mode"else a1="Horizontal Takeoff Mode"end end,function()return bx end)ca=ca+mg+20;m1("Show Orbit Display","Hide Orbit Display",mh,mg,c9,ca,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a1="Orbit Display Enabled"else a1="Orbit Display Disabled"end end)m1("Engage Orbiting","Cancel Orbiting",mh,mg,c9+mh+20,ca,function()return IntoOrbit end,cp,function()return aq==0 and bL end)ca=ca+mg+20;m1("Glide Re-Entry","Cancel Glide Re-Entry",mh,mg,c9,ca,function()return Reentry end,function()ak=1;ml(1)end,function()return planet.hasAtmosphere and not ap end)m1("Parachute Re-Entry","Cancel Parachute Re-Entry",mh,mg,c9+mh+20,ca,function()return Reentry end,cu,function()return planet.hasAtmosphere and not ap end)ca=ca+mg+20;m1("Engage Follow Mode","Disable Follow Mode",mh,mg,c9,ca,function()return Z end,mq,function()return l()==1 end)m1("Enable Repair Arrows","Disable Repair Arrows",mh,mg,c9+mh+20,ca,function()return aL end,function()aL=not aL;if aL then a1="Repair Arrows Enabled"else a1="Repair Arrows Diabled"end end,function()return l()==1 end)ca=ca+mg+20;if not ExternalAGG then m1("Enable AGG","Disable AGG",mh,mg,c9,ca,function()return by end,cv,function()return antigrav~=nil end)end;m1(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,mh*2,mg,c9,ca,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a1="IPH Mode: "..iphCondition end)ca=ca+mg+20;m1(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,mh*2,mg,c9,ca,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a1="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lM()coroutine.yield()lQ()coroutine.yield()aX=jM()m0()mf()mj()aE=lJ;coroutine.yield()aM=cH()aQ=cI()aR=aQ(cH())aS=e4()aU=ey()aY=eW()aV=g7()aW=jt()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bW("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(aq>0 or aq==0 and ar<10000)then for _,cG in pairs(door)do cG.toggle()end end;if switch then for _,cG in pairs(switch)do cG.toggle()end end;if forcefield and(aq>0 or aq==0 and ar<10000)then for _,cG in pairs(forcefield)do cG.toggle()end end;cB()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;bW("stop","SU")end;function script.onTick(mt)local mu=nil;if mt=="contact"then if not contactTimer then contactTimer=0 end;if D>contactTimer+10 then a1="Radar Contact"bW("rdrCon","RC")contactTimer=D end;unit.stopTimer("contact")elseif mt=="tenthSecond"then local function mv()local mw=system.createData;local mx=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mx(panelInterplanetary,"value")interplanetaryHeaderText=mw('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mx(panelInterplanetary,"value")widgetDistanceText=mw('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=mx(panelInterplanetary,"value")widgetTravelTimeText=mw('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mx(panelInterplanetary,"value")widgetMaxMassText=mw('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mx(panelInterplanetary,"value")widgetTargetOrbitText=mw('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mx(panelInterplanetary,"value")widgetCurBrakeDistanceText=mw('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mx(panelInterplanetary,"value")widgetCurBrakeTimeText=mw('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mx(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mw('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mx(panelInterplanetary,"value")widgetMaxBrakeTimeText=mw('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mx(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mw('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ap then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function my()s(panelInterplanetary)panelInterplanetary=nil end;local function mz()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ab.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local ew=bs;local kZ=unit.getThrottle()/100;if AtmoSpeedAssist then kZ=J end;local mA,mB=aS.computeDistanceAndTime(bs,MaxGameVelocity,au,a:maxForceForward()*kZ,warmup,0)local a7,a8;if not TurnBurn then a7,a8=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a7,a8=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mC;if not TurnBurn and ew>0 then _,mC=aX.GetAutopilotBrakeDistanceAndTime(ew)else _,mC=aX.GetAutopilotTBBrakeDistanceAndTime(ew)end;local mD=0;local mE=0;if AutopilotCruising or not Autopilot and ew>5 then mE=aS.computeTravelTime(ew,0,AutopilotDistance)elseif a7+mA<AutopilotDistance then mD=AutopilotDistance-(a7+mA)mE=aS.computeTravelTime(8333.0556,0,mD)else local mF=(AutopilotDistance-a7)/mA;mA=AutopilotDistance-a7;mB=mB*mF end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mE elseif AutopilotBraking then return mC elseif AutopilotCruising then return mE+mC else return mB+a8+mE end end;local function mG(j5,mH)if j5==nil then j5=core.g()end;j5=z(j5,5)if mH~=nil and mH or(mu==nil or mu~=j5)then local ew=bq:len()local mI=f(unit.getData()).maxBrake;if mI~=nil and mI>0 and ap then mI=mI/q(ew/100,0.1,1)mI=mI/aq;if aq>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mI)/2 else LastMaxBrakeInAtmo=mI end end end;if mI~=nil and mI>0 then LastMaxBrake=mI end;mu=j5 end end;mG(nil,true)if bz~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bz then ch(bz,TRUE)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mv()end;if AutopilotTargetName~=nil then local mJ=CustomTarget~=nil;local mK=0.5*LastMaxBrakeInAtmo/ab:getGravity(ab.center+vec3(0,0,1)*ab.radius):len()mK=mK>1000000 and z(mK/1000000,2).." kTons"or z(mK/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mz()if mJ and not Autopilot then ai=(bv-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a7,a8=aX.GetAutopilotBrakeDistanceAndTime(bs)a9,aa=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a7,a8=aX.GetAutopilotTBBrakeDistanceAndTime(bs)a9,aa=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ik=cl(ai)t(widgetDistanceText,'{"label": "distance", "value": "'..ik..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cw(travelTime)..'", "unit":""}')ik=cl(a7)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ik..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cw(a8)..'", "unit":""}')ik=cl(a9)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ik..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cw(aa)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",mK)..'", "unit":""}')ik=cl(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..ik..'"}')if aq>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or am)then ce(1)BrakeIsOn=false;N=false end end;if aq==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else my()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.DrawTanks()if shield_1 then aV.DrawShield()end elseif mt=="oneSecond"then local function mL(gW)local mM=0;aC=""local mN=aK;local mO=0;local mP=0;local mQ=0;local gT=0;local gU=""local mR=core.getElementHitPointsById;for cF in pairs(as)do local lZ=0;local mS=0;mS=h(as[cF])lZ=mR(as[cF])mO=mO+lZ;if lZ<mS then if lZ==0 then mQ=mQ+1 else mP=mP+1 end;if aL and#az==0 then position=vec3(core.getElementPositionById(as[cF]))local c9=position.x;local ca=position.y;local fq=position.z;table.insert(az,core.spawnArrowSticker(c9,ca,fq+1,"down"))table.insert(az,core.spawnArrowSticker(c9,ca,fq+1,"down"))core.rotateSticker(az[2],0,0,90)table.insert(az,core.spawnArrowSticker(c9+1,ca,fq,"north"))table.insert(az,core.spawnArrowSticker(c9+1,ca,fq,"north"))core.rotateSticker(az[4],90,90,0)table.insert(az,core.spawnArrowSticker(c9-1,ca,fq,"south"))table.insert(az,core.spawnArrowSticker(c9-1,ca,fq,"south"))core.rotateSticker(az[6],90,-90,0)table.insert(az,core.spawnArrowSticker(c9,ca-1,fq,"east"))table.insert(az,core.spawnArrowSticker(c9,ca-1,fq,"east"))core.rotateSticker(az[8],90,0,90)table.insert(az,core.spawnArrowSticker(c9,ca+1,fq,"west"))table.insert(az,core.spawnArrowSticker(c9,ca+1,fq,"west"))core.rotateSticker(az[10],-90,0,90)table.insert(az,as[cF])end elseif aL and#az>0 and az[11]==as[cF]then for gO in pairs(az)do core.deleteSticker(az[gO])end;az={}end end;mM=d(mO/mN*100)if mM<100 then gW[#gW+1]=c8(0,0,"","pbright txt")gT=d(mM*2.55)gU=e("rgb(%d,%d,%d)",255-gT,gT,0)if mM<100 then gW[#gW+1]=c8("50%",1035,"Elemental Integrity: "..mM.."%","txtbig txtmid","fill:"..gU)if mQ>0 then gW[#gW+1]=c8("50%",1055,"Disabled Modules: "..mQ.." Damaged Modules: "..mP,"txtbig txtmid","fill:"..gU)elseif mP>0 then gW[#gW+1]=c8("50%",1055,"Damaged Modules: "..mP,"txtbig txtmid","fill:"..gU)end end end end;local function mT()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function mU()local gP=o()local i7=bs;local mV=gP-at;if i7>1.38889 then i7=i7/1000;local mW=i7*(gP-at)TotalDistanceTravelled=TotalDistanceTravelled+mW;ac=ac+mW end;ad=ad+mV;TotalFlightTime=TotalFlightTime+mV;at=gP end;mU()aV.UpdatePipe()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()mT()local gW={}aV.ExtraData(gW)if ShowOdometer then gW=aV.DrawOdometer(gW,ac,TotalDistanceTravelled,ad)end;if ShouldCheckDamage then mL(gW)end;aj=table.concat(gW,"")collectgarbage("collect")elseif mt=="fiveSecond"then if not UseSatNav then return end;ao=dbHud_1.getStringValue("SPBAutopilotTargetName")if ao~=nil and ao~=""and ao~="SatNavNotChanged"then local cX=f(dbHud_1.getStringValue("SavedLocations"))if cX~=nil then _G["SavedLocations"]=cX;local fJ=-1;local jJ;for cF,cG in pairs(SavedLocations)do if cG.name and cG.name=="SatNav Location"then fJ=cF;break end end;if fJ~=-1 then jJ=SavedLocations[fJ]fJ=-1;for cF,cG in pairs(aM[0])do if cG.name and cG.name=="SatNav Location"then fJ=cF;break end end;if fJ>-1 then aM[0][fJ]=jJ end;aW.UpdateAtlasLocationsList()a1=jJ.name.." position updated"end end;for i=1,#bG do if bG[i].name==ao then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mt=="msgTick"then local gW={}aV.DisplayMessage(gW,"empty")a1="empty"unit.stopTimer("msgTick")ah=3 elseif mt=="animateTick"then a_=true;aZ=false;af=0;ag=0;unit.stopTimer("animateTick")elseif mt=="hudTick"then local function mX(gW)local mY=d(q(ai/(aF/4)*255,0,255))gW[#gW+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,d(G+0.5)+mY,d(I+0.5)-mY,d(H+0.5)-mY)end;local function mZ()for _,cG in pairs(aE)do if cG.hovered then if not cG.drawCondition or cG.drawCondition()then cG.toggleFunction()end;cG.hovered=false end end end;local function m_()local function n0(n1,n2,c9,ca,m4,m5)if n1>c9 and n1<c9+m4 and n2>ca and n2<ca+m5 then return true else return false end end;local c9=af+aF/2;local ca=ag+aG/2;for _,cG in pairs(aE)do cG.hovered=n0(c9,ca,cG.x,cG.y,cG.width,cG.height)end end;local function n3(gW)local function n4(gW,n5,hover,c9,ca,ep,n6,n7,n8,n9,na)if type(n9)=="function"then n9=n9()end;if type(na)=="function"then na=na()end;gW[#gW+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c9,ca,ep,n6)if n5 then gW[#gW+1]=e("%s'",n7)else gW[#gW+1]=n8 end;if hover then gW[#gW+1]=" style='stroke:white; stroke-width:2'"else gW[#gW+1]=" style='stroke:black; stroke-width:1'"end;gW[#gW+1]="></rect>"gW[#gW+1]=e("<text x='%f' y='%f' font-size='24' fill='",c9+ep/2,ca+n6/2+5)if n5 then gW[#gW+1]="black"else gW[#gW+1]="white"end;gW[#gW+1]="' text-anchor='middle' font-family='Montserrat'>"if n5 then gW[#gW+1]=e("%s</text>",n9)else gW[#gW+1]=e("%s</text>",na)end end;local nb="rgb(50,50,50)'"local nc="rgb(210,200,200)"local nd=n4;for _,cG in pairs(aE)do local m3=cG.disableName;local m2=cG.enableName;if type(m3)=="function"then m3=m3()end;if type(m2)=="function"then m2=m2()end;if not cG.drawCondition or cG.drawCondition()then nd(gW,cG.toggleVar(),cG.hovered,cG.x,cG.y,cG.width,cG.height,nc,nb,m3,m2)end end end;local ne=z(ResolutionX/2,0)local nf=z(ResolutionY/2,0)local gW={}aV.HUDPrologue(gW)if showHud then aV.UpdateHud(gW)else if AlwaysVSpd then aV.DrawVerticalSpeed(gW,ar)end;aV.DisplayOrbitScreen(gW)aV.DrawWarnings(gW)end;if bD and bE~={}then aV.DrawSettings(gW)end;if radar_1 then aV.DrawRadarInfo()end;aV.HUDEpilogue(gW)gW[#gW+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aF,aG)if a1~="empty"then aV.DisplayMessage(gW,a1)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(gW)end end;if w()==0 then if l()==1 and a0 then if not AltIsOn then m_()n3(gW)end;if not aZ and not a_ then local ng=table.concat(gW,"")gW={}gW[#gW+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aF,aG)gW[#gW+1]=ng;gW[#gW+1]="</body>"aZ=true;gW[#gW+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(gW,"")system.setScreen(content)elseif a_ then local ng=table.concat(gW,"")gW={}gW[#gW+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aF,aG)gW[#gW+1]=ng;gW[#gW+1]="</body>"end;if not aZ then gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ne,nf,af,ag)end else mZ()end else if not a0 and l()==0 then mZ()if ai>DeadZone then if DisplayDeadZone then mX(gW)end end elseif not AltIsOn or AltIsOn and a0 then m_()n3(gW)end;gW[#gW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ne,nf,af,ag)end;gW[#gW+1]=[[</svg></body>]]content=table.concat(gW,"")elseif mt=="apTick"then aX.APTick()elseif mt=="radarTick"then aY.UpdateRadar()elseif mt=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a1="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function nh(ni,l6)local nj=vec3()local nk=vec3()if ni==axisCommandId.longitudinal then nj=vec3(core.getConstructOrientationForward())nk=bo elseif ni==axisCommandId.vertical then nj=vec3(core.getConstructOrientationUp())nk=bn elseif ni==axisCommandId.lateral then nj=vec3(core.getConstructOrientationRight())nk=bp else return vec3()end;local nl=vec3(core.getWorldGravity())local nm=nl:dot(nk)local nn=vec3(core.getWorldAirFrictionAcceleration())local no=nn:dot(nk)local np=bq:dot(nj)local nq=l6*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nq-np)local nr=targetSpeedPID2:get()local ns=(nr-no-nm)*nk;return ns end;local function nt(ni,l6)local nj=vec3()local nk=vec3()if ni==axisCommandId.longitudinal then nj=vec3(core.getConstructOrientationForward())nk=bo elseif ni==axisCommandId.vertical then nj=vec3(core.getConstructOrientationUp())nk=bn elseif ni==axisCommandId.lateral then nj=vec3(core.getConstructOrientationRight())nk=bp else return vec3()end;local nl=vec3(core.getWorldGravity())local nm=nl:dot(nk)local nn=vec3(core.getWorldAirFrictionAcceleration())local no=nn:dot(nk)local np=bq:dot(nj)local nq=l6*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nq-np)local nr=targetSpeedPID:get()local ns=(nr-no-nm)*nk;return ns end;local function nu(nw,gZ,jy)local nx=nw:cross(jy):normalize_inplace()local hL=math.acos(q(nx:dot(-gZ),-1,1))*constants.rad2deg;if nx:cross(-gZ):dot(jy)<0 then hL=-hL end;return hL end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and N then ce(0)N=false elseif not bA and not N then J=0;N=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local ny=q(S+T+system.getControlDeviceForwardInput(),-1,1)local nz=q(V+Y+system.getControlDeviceYawInput(),-1,1)local nA=q(W+U-system.getControlDeviceLeftRightInput(),-1,1)local nB=X;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())au=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local nC=bC/180*math.pi;local nD=math.cos(nC)local nE=math.sin(nC)bB=nu(bt,bo,bp*nD+bn*nE)local nF=br:normalize()local nG=c(bC)local nH=utils.sign(bC)local nI=vec3(core.getWorldAngularVelocity())local nJ=ny*pitchSpeedFactor*bp+nz*rollSpeedFactor*bo+nA*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local nK=c(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or ak or AltitudeHold or IntoOrbit)and nK>0 or aq>0.0 and nK<autoRollRollThreshold and autoRollPreference)and nz==0 and c(bB)<85 then local nL=b4;local nM=autoRollFactor;if aq==0 then nM=nM/4;b4=0;nL=0 end;if rollPID==nil then rollPID=pid.new(nM*0.01,0,nM*0.1)end;rollPID:inject(nL-bC)local nN=rollPID:get()nJ=nJ+nN*bo end end;local nO=1;local nP=0;local nQ=1;if system.getMouseWheel()>0 then if AltIsOn then if aq>0 or Reentry then b7=q(b7+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif av then local nR=J;J=z(q(J+speedChangeLarge/100,-1,1),2)if J>=0 and nR<0 then J=0;av=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if aq>0 or Reentry then b7=q(b7-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif av then local nR=J;J=z(q(J-speedChangeLarge/100,-1,1),2)if J<=0 and nR>0 then J=0;av=false end end else av=true end;K=0;if ap and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local nS=throttlePID:get()M=q(nS,-1,1)if M<J and aq>0.005 then L=true;r:setThrottleCommand(axisCommandId.longitudinal,q(M,0.01,1))else L=false;r:setThrottleCommand(axisCommandId.longitudinal,J)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local nT=q(brakePID:get(),0,1)if aq>0 and bu<-80 or aq>0.005 then K=nT end;if K>0 then if L and M==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else M=q(M,0.01,1)end;local nU=''local nV=vec3()local nW=nh(axisCommandId.vertical,ae*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",nW,nP)local nX='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nX=nX..ExtraLongitudeTags end;local nY=r:getAxisCommandType(axisCommandId.longitudinal)local nZ=r:composeAxisAccelerationFromThrottle(nX,axisCommandId.longitudinal)local n_=nt(axisCommandId.lateral,LeftAmount*1000)nU=nU..' , '.."lateral airfoil , lateral ground "nV=nV+n_;if nV:len()>constants.epsilon then a:setEngineForceCommand(nU,nV,nP,'','','',nQ)end;a:setEngineForceCommand(nX,nZ,nO)local o0='thrust analog vertical fueled 'local o1='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then o1=o1 ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then o0=o0 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(o0,nW,nO)else a:setEngineForceCommand(o0,vec3(),nO)end;if LeftAmount~=0 then a:setEngineForceCommand(o1,n_,nO)else a:setEngineForceCommand(o1,vec3(),nO)end;if nB==0 then nB=K end;local o2=-nB*(brakeSpeedFactor*br+brakeFlatFactor*nF)a:setEngineForceCommand('brake',o2)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,J)end;local l6=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-l6/3.6)local nT=q(brakePID:get(),0,1)nB=q(nB+nT,0,1)end;local o2=-nB*(brakeSpeedFactor*br+brakeFlatFactor*nF)a:setEngineForceCommand('brake',o2)local nU=''local nV=vec3()local o3=false;local nX='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then nX=nX..ExtraLongitudeTags end;local nY=r:getAxisCommandType(axisCommandId.longitudinal)if nY==axisCommandType.byThrottle then local nZ=r:composeAxisAccelerationFromThrottle(nX,axisCommandId.longitudinal)a:setEngineForceCommand(nX,nZ,nO)elseif nY==axisCommandType.byTargetSpeed then local nZ=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nU=nU..' , '..nX;nV=nV+nZ;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then o3=true end end;local o1='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then o1=o1 ..ExtraLateralTags end;local o4=r:getAxisCommandType(axisCommandId.lateral)if o4==axisCommandType.byThrottle then local o5=r:composeAxisAccelerationFromThrottle(o1,axisCommandId.lateral)a:setEngineForceCommand(o1,o5,nO)elseif o4==axisCommandType.byTargetSpeed then local n_=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nU=nU..' , '..o1;nV=nV+n_ end;local o0='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then o0=o0 ..ExtraVerticalTags end;local o6=r:getAxisCommandType(axisCommandId.vertical)if o6==axisCommandType.byThrottle then local nW=r:composeAxisAccelerationFromThrottle(o0,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(o0,nW,nO,'airfoil','ground','',nQ)else a:setEngineForceCommand(o0,vec3(),nO)a:setEngineForceCommand('airfoil vertical',nW,nO,'airfoil','','',nQ)a:setEngineForceCommand('ground vertical',nW,nO,'ground','','',nQ)end elseif o6==axisCommandType.byTargetSpeed then if ae<0 then a:setEngineForceCommand('hover',vec3(),nO)end;local o7=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nU=nU..' , '..o0;nV=nV+o7 end;if nV:len()>constants.epsilon then if X~=0 or o3 or c(nF:dot(bo))<0.8 then nU=nU..', brake'end;a:setEngineForceCommand(nU,nV,nP,'','','',nQ)end end;local o8=torqueFactor*(nJ-nI)local o9=vec3(core.getWorldAirFrictionAngularAcceleration())o8=o8-o9;a:setEngineTorqueCommand('torque',o8,nO,'airfoil','','',nQ)a:setBoosterCommand('rocket_engine')if a6 and not VanillaRockets then local ew=bq:len()local oa=0.15;if not bA then local ob=r:getTargetSpeed(axisCommandId.longitudinal)if ew*3.6>ob*(1-oa)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew*3.6<ob*(1-oa)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kZ=unit.getThrottle()if AtmoSpeedAssist then kZ=J*100 end;local l6=kZ/100;if j==0 then l6=l6*MaxGameVelocity;if ew>=l6*(1-oa)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew<l6*(1-oa)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local lh=d(b7)l6=l6*lh/3.6;if ew>=l6*(1-oa)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif ew<l6*(1-oa)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local g4=coroutine.status(beginSetup)if g4=="suspended"then local cf,g5=coroutine.resume(beginSetup)if g5 then system.print("ERROR STARTUP: "..g5)end elseif g4=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(oc)local function od(oe)local C=1;local function of(og,oe)local oh={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oi=og;for _,cG in ipairs(oh)do if oe and oi>cG then og=cG elseif og<cG and not oe then og=cG;break end end;return og end;if oe then C=-1 end;if not ExternalAGG and by then if a0 and oe then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a0 then bg=of(bg,oe)else bg=bg+C*a2 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a0 and ap then HoldAltitude=of(HoldAltitude,oe)else HoldAltitude=HoldAltitude+C*a2 end end else r:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function oj(oe)local C=1;if oe then C=-1 end;if not a0 then if AtmoSpeedAssist and not AltIsOn then J=q(J+C*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if oe then C=1 else C=nil end;aW.adjustAutopilotTargetIndex(C)end end;local function ok(ol)if not ap then a1="Flight Assist in Atmo only"return end;local cN=type(ol)if bJ==nil then if cN=="table"then if Autopilot or VectorToTarget then cr()end;bW("180On","BR")elseif ol==1 then bW("bnkLft","BR")else bW("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cq()if cN~="table"then ol=ol+1 end end;bJ=ol else bW("180Off","BR")bJ=nil end end;if oc=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;ce(0)if vBooster or hover then if ap and an==-1 then bW("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if R then bW("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if ap then BrakeIsOn=true end end end;if R and not BrakeLanding and not(vBooster or hover)then bW("grOut","LG",1)a.control.extendLandingGears()end else if R then bW("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif oc=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif oc=="forward"then S=S-1 elseif oc=="backward"then if AltIsOn then ok(-br*5000)else S=S+1 end elseif oc=="left"then if AltIsOn then ok(1)else V=V-1 end elseif oc=="right"then if AltIsOn then ok(3)else V=V+1 end elseif oc=="yawright"then W=W-1 elseif oc=="yawleft"then W=W+1 elseif oc=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif oc=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif oc=="up"then ae=ae+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif oc=="down"then ae=ae-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif oc=="groundaltitudeup"then od()elseif oc=="groundaltitudedown"then od(true)elseif oc=="option1"then toggleView=false;if AltIsOn and a0 then local om=""for i=1,#passengers do om=om.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..z(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..om)return end;aW.adjustAutopilotTargetIndex()elseif oc=="option2"then toggleView=false;if AltIsOn and a0 then for i=1,#passengers do core.forceDeboard(passengers[i])end;a1="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif oc=="option3"then local function on()aD=not aD;if not aD then bW("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else bW("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then s(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then s(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a0 then local om=""for i=1,#ships do om=om.."| ID: "..ships[i].." Mass: "..z(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..om)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;on()toggleView=false elseif oc=="option4"then toggleView=false;if AltIsOn and a0 then for i=1,#ships do core.forceUndock(ships[i])end;a1="Undocked all ships"return end;bJ=nil;cr()elseif oc=="option5"then toggleView=false;if AltIsOn and a0 then if shield_1 then shield_1.toggle()return else a1="No shield found"return end end;function ToggleLockPitch()if LockPitch==nil then bW("lkPOn","LP")if not a0 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bW("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif oc=="option6"then toggleView=false;if AltIsOn and a0 then if shield_1 then local oo=shield_1.getVentingCooldown()if oo>0 then a1="Cannot vent again for "..oo.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a1="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a1="Shields already at max hitpoints"end;return else a1="No shield found"return end end;cq()elseif oc=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a1="Collision System Enabled"else a1="Collision System Secured"end;toggleView=false elseif oc=="option8"then stablized=not stablized;if not stablized then a1="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()bW("gsOff","GS")else a1="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bW("gsOn","GS")end;toggleView=false elseif oc=="option9"then if AltIsOn and a0 then r:resetCommand(axisCommandId.longitudinal)r:resetCommand(axisCommandId.lateral)r:resetCommand(axisCommandId.vertical)ce(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()aw=gyro.getState()==1;if aw then bW("gyOn","GA")else bW("gyOff","GA")end end;toggleView=false elseif oc=="lshift"then if AltIsOn then a0=true end;if w()==1 then a0=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then a0=true;a_=false;aZ=false end elseif oc=="brake"then if BrakeToggleStatus then ct()elseif not BrakeIsOn then ct()else BrakeIsOn=true end elseif oc=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif oc=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a6 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a6=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a6=false end elseif oc=="stopengines"then local function op()if D-E<1.5 then bW("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bJ=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Z=false;O=false;ak=false;al=false;Q=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;aw=false;LockPitch=nil;IntoOrbit=false end end;op()E=D;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if J~=0 then r:resetCommand(axisCommandId.longitudinal)ce(0)else ce(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if ap then ch(AtmoSpeedLimit)else ch(MaxGameVelocity*3.6)end end end elseif oc=="speedup"then oj()elseif oc=="speeddown"then oj(true)elseif oc=="antigravity"and not ExternalAGG then if antigrav~=nil then cv()end end end;function script.onActionStop(oc)local function oq()if not ExternalAGG and by then a5=a3 end;if AltitudeHold or VertTakeOff or IntoOrbit then a4=a2 end end;if oc=="forward"then S=0 elseif oc=="backward"then S=0 elseif oc=="left"then if bJ then if bJ==2 then bJ=-2 else bJ=-1 end end;V=0 elseif oc=="right"then if bJ then if bJ==4 then bJ=-2 else bJ=-1 end end;V=0 elseif oc=="yawright"then W=0 elseif oc=="yawleft"then W=0 elseif oc=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif oc=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif oc=="up"then ae=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oc=="down"then ae=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oc=="groundaltitudeup"then oq()toggleView=false elseif oc=="groundaltitudedown"then oq()toggleView=false elseif oc=="lshift"then if w()==1 then af=0;ag=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a0=false elseif oc=="brake"then if not BrakeToggleStatus then if BrakeIsOn then ct()else BrakeIsOn=false end end elseif oc=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(oc)local function os(oe)local C=1;if oe then C=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a5;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a5=q(a5*1.05,a3,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+C*a4;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a4 end;a4=q(a4*1.05,a2,50)else r:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function ot(oe)local C=1;if oe then C=-1 end;if not a0 then if AtmoSpeedAssist and not AltIsOn then J=q(J+C*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if oc=="groundaltitudeup"then if not a0 then os()end elseif oc=="groundaltitudedown"then if not a0 then os(true)end elseif oc=="speedup"then ot()elseif oc=="speeddown"then ot(true)end end;function script.onInputText(cb)local function ou()for cF,cG in pairs(c1())do dbHud_1.setStringValue(cG,g(nil))end;for cF,cG in pairs(b)do if cG~="SavedLocations"then dbHud_1.setStringValue(cG,g(nil))end end;a1="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5 end;local function ov(ow,eA,hH)local function ox(eA)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cV='::pos{'..A..','..A..','..A..','..A..','..A..'}'local d7,d8,de,df,dg=n(eA,cV)if d7=="0"and d8=="0"then return vec3(y(de),y(df),y(dg))end;df=math.rad(df)de=math.rad(de)local planet=aM[y(d7)][y(d8)]local e1=math.cos(de)local oy=vec3(e1*math.cos(df),e1*math.sin(df),math.sin(de))return planet.center+(planet.radius+dg)*oy end;local position=ox(eA)return aW.AddNewLocation(ow,position,hH)end;local i;local oz,oA=nil,nil;local oB="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute"i=string.find(cb," ")oz=cb;if i~=nil then oz=string.sub(cb,0,i-1)oA=string.sub(cb,i+1)end;if oz=="/help"or oz=="/commands"then for jf in string.gmatch(oB,"([^\n]+)")do system.print(jf)end;return elseif oz=="/setname"then if oA==nil or oA==""then a1="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(oA)else a1="Select a saved target to rename first"end elseif shield_1 and oz=="/resist"then if oA==nil or shield_1.getResistancesCooldown()>0 then a1="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cV=A..', '..A..', '..A..', '..A;local oC,oD,oE,oF=n(oA,cV)if oF==nil or oC+oD+oE+oF>0.6 then a1="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(oC,oD,oE,oF)==1 then a1="Shield Resistances set"else a1="Resistance setting failed."end elseif oz=="/addlocation"or string.find(cb,"::pos")~=nil then local hH=false;local ow="0-Temp"if oA==nil or oA==""then oA=oz;hH=true end;i=string.find(oA,"::")if not hH then ow=string.sub(oA,1,i-2)end;local eA=string.sub(oA,i)ov(ow,eA,hH)elseif oz=="/agg"then if oA==nil or oA==""then a1="Usage: /agg targetheight"return end;oA=y(oA)if oA<1000 then oA=1000 end;AntigravTargetAltitude=oA;a1="AGG Target Height set to "..oA elseif oz=="/G"then if oA==nil or oA==""then a1="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if oA=="dump"then for cF,cG in pairs(c1())do if type(_G[cG])=="boolean"then if _G[cG]==true then system.print(cG.." true")else system.print(cG.." false")end elseif _G[cG]==nil then system.print(cG.." nil")else system.print(cG.." ".._G[cG])end end;return end;i=string.find(oA," ")local oG=string.sub(oA,0,i-1)local oH=string.sub(oA,i+1)for cF,cG in pairs(c1())do if cG==oG then a1="Variable "..oG.." changed to "..oH;local oI=type(_G[cG])if oI=="number"then oH=y(oH)elseif oI=="boolean"then if string.lower(oH)=="true"then oH=true else oH=false end end;_G[cG]=oH;return end end;a1="No such global variable: "..oG elseif oz=="/copydatabank"then if dbHud_2 then cB(true)else a1="Spare Databank required to copy databank"end elseif oz=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ab,AutopilotTargetCoords,true))a1="::pos waypoint shown in lua chat"else a1="No target selected in IPH"end end end;function script.onEnter(dp)if radar_1 and not ap and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dp)if radar_1 and CollisionSystem then if#bK>650 then dp=tostring(dp)bK[dp]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
