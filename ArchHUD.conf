name: ArchHud - Archaegeo v1.500 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 2000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)local b=require("atlas")script={}VERSION_NUMBER=1.500;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"LastVersionUpdate=0.000;local c={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local y=math.sqrt;local z=tonumber;local core=core;local function A(B,C)local D=10^(C or 0)return e(B*D+0.5)/D end;local E=q()local F=q()local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8,a9=0;local aa,ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=k()>0;local ar=k()local as=core.getAltitude()local at=core.getElementIdList()local au=q()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]local az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=q()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=""local bJ=nil;local bK={}local bL=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local bM=false;local bN=nil;function p(bO)system.print(E..": "..bO)end;local function bP(bQ)local bR,bS,bT=aR:getPlanetarySystem(0):castIntersections(bv,bQ,function(bU)if bU.noAtmosphericDensityAltitude>0 then return bU.radius+bU.noAtmosphericDensityAltitude else return bU.radius+bU.surfaceMaxAltitude*1.5 end end)local bV=bS;if bT~=nil and bS~=nil then bV=math.min(bT,bS)end;if bV~=nil then return bR,bV else return nil,nil end end;local function bW(bX,bY,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..bX.."|"..bY.."|"..soundVolume)end end;local function bZ(b_,c0)for i=1,#c0 do b_[#b_+1]=c0[i]end;return b_ end;local function c1(c2)local c3={}local c4={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","Cockpit","voices","alerts","CollisionSystem"}local c5={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c6={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local c7={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c2 then bZ(c3,c4)bZ(c3,c5)bZ(c3,c6)bZ(c3,c7)return c3 elseif c2=="boolean"then return c4 elseif c2=="handling"then return c5 elseif c2=="hud"then return c6 elseif c2=="physics"then return c7 end end;local function c8(c9,ca,cb,cc,cd)if cc==nil then cc=""end;if cd==nil then cd=""end;return f([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cc,c9,ca,cd,cb)end;local function ce(cf,cg)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not cg then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,cf)K=r(A(cf*100,0)/100,-1,1)end;local function ch(cf,cg)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cg then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,cf)bz=cf end;local function ci(cj,ck)if cj==0 then return d(ck)<1e-09 end;if ck==0 then return d(cj)<1e-09 end;return d(cj-ck)<math.max(d(cj),d(ck))*epsilon end;local function cl(aj,cm)local cn=aj>100000;if cm==nil then cm=1 end;if cn then return A(aj/1000/200,cm).."SU"elseif aj<1000 then return A(aj,cm).."M"else return A(aj/1000,cm).."KM"end end;local function co()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ch(e(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cp()bi=false;ba=nil;bb=nil;bm=0;if ar==0 then if IntoOrbit then bW("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bL then bW("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cq()if E-b5<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;bW("11","EP")else if bL then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cp()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=E end;if bL and ar==0 then bg=as;bf=true;bc=true;cp()if IntoOrbit then b5=E else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b0=true;LockPitch=nil;bi=false;if ao~=-1 and bs<20 then bW("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then co()end else bW("altOn","AH")AutoTakeoff=false;if b5>-1 then if bL then HoldAltitude=as end end;if VertTakeOff then co()end end;if am then HoldAltitude=100000 end else bW("altOff","AH")if IntoOrbit then cp()end;if VertTakeOff then co()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cr()local function cs(SpaceTarget)bM=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cq()end end;VectorStatus="Proceeding to Waypoint"end;if E-b6<1.5 and ar>0 then if not bl then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bW("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bW("apSpc","AP")if ar~=0 then am=true;cq()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then bW("vtt","AP")cs(SpaceTarget)end else bW("apOn","AP")if not(ac.name==planet.name and bL)then bi=false;Autopilot=true elseif not aq then if IntoOrbit then cp()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cp()end end end else bW("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cq()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bL)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cp()else bW("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else bW("apP","AP")am=true;cq()end else bW("apOff","AP")am=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;HoldAltitude=as;TargetSet=false;Reentry=false;if IntoOrbit then cp()end end end;local function ct()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then bW("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bJ=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then co()end;if IntoOrbit then cp()end;b0=autoRollPreference;al=false;an=false;af=0 else bW("bkOff","B",1)end end;local function cu()if Reentry then a2="Re-Entry cancelled"bW("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;bW("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cb=cl(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..cb;bW("glide","RE")ch(e(b7))end;AutoTakeoff=false end;local function cv()if antigrav and not ExternalAGG then if by then bW("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bW("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cw(cx)local cy=0;local cz=0;local cA=0;if cx<60 then cx=e(cx)elseif cx<3600 then cy=e(cx/60)cx=e(cx%60)elseif cx<86400 then cz=e(cx/3600)cy=e(cx%3600/60)else cA=e(cx/86400)cz=e(cx%86400/3600)end;if cA>0 then return cA.."d "..cz.."h "elseif cz>0 then return cz.."h "..cy.."m "elseif cy>0 then return cy.."m "..cx.."s"elseif cx>0 then return cx.."s"else return"0s"end end;local function cB(cC)local function cD(cE)for cF,cG in pairs(cE)do dbHud_1.setStringValue(cG,h(_G[cG]))if cC and dbHud_2 then dbHud_2.setStringValue(cG,h(_G[cG]))end end end;if dbHud_1 then cD(c)cD(c1())system.print("Saved Variables to Datacore")if cC and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cH()local function cI(cJ)return type(cJ)=='number'end;local function cK(cJ)return type(z(cJ))=='number'end;local function cL(cM)return type(cM)=='table'end;local function cN(cO)return type(cO)=='string'end;local function cP(cG)return cL(cG)and cI(cG.x and cG.y and cG.z)end;local function cQ(cR)return cL(cR)and cI(cR.latitude and cR.longitude and cR.altitude and cR.id and cR.systemId)end;local cS=math.pi/180;local cT=180/math.pi;local epsilon=1e-10;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU='::pos{'..B..','..B..','..B..','..B..','..B..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function cV(cJ)local cW=string.gsub(string.reverse(f('%.4f',cJ)),'^0*%.?','')return cW==''and'0'or string.reverse(cW)end;local function cX(cY)if cP(cY)then return f('{x=%.3f,y=%.3f,z=%.3f}',cY.x,cY.y,cY.z)end;if cL(cY)and not getmetatable(cY)then local cZ={}local c_=next(cY)if type(c_)=='nil'or c_==1 then cZ=cY else for cF,cG in pairs(cY)do local cf=cX(cG)if type(cF)=='number'then table.insert(cZ,f('[%s]=%s',cF,cf))else table.insert(cZ,f('%s=%s',cF,cf))end end end;return f('{%s}',table.concat(cZ,','))end;if cN(cY)then return f("'%s'",cY:gsub("'",[[\']]))end;return tostring(cY)end;local d0={}d0.__index=d0;d0.__tostring=function(cY,d1)local d2={}for cF in pairs(cY)do table.insert(d2,cF)end;table.sort(d2)local cZ={}for _,cF in ipairs(d2)do local cf=cX(cY[cF])if type(cF)=='number'then table.insert(cZ,f('[%s]=%s',cF,cf))else table.insert(cZ,f('%s=%s',cF,cf))end end;if d1 then return f('%s%s',d1,table.concat(cZ,',\n'..d1))end;return f('{%s}',table.concat(cZ,','))end;d0.__eq=function(d3,d4)return d3.systemId==d4.systemId and d3.id==d4.id and ci(d3.radius,d4.radius)and ci(d3.center.x,d4.center.x)and ci(d3.center.y,d4.center.y)and ci(d3.center.z,d4.center.z)and ci(d3.GM,d4.GM)end;local function d5(d6,d7,d8,d9,da)assert(cK(d6),'Argument 1 (systemId) must be a number:'..type(d6))assert(cK(d7),'Argument 2 (id) must be a number:'..type(d7))assert(cK(d8),'Argument 3 (radius) must be a number:'..type(d8))assert(cL(d9),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(d9))assert(cK(da),'Argument 5 (GM) must be a number:'..type(da))return setmetatable({systemId=z(d6),id=z(d7),radius=z(d8),center=vec3(d9),GM=z(da)},d0)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return f('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,cV(p.latitude*cT),cV(p.longitude*cT),cV(p.altitude))end;MapPosition.__eq=function(d3,d4)return d3.id==d4.id and d3.systemId==d4.systemId and ci(d3.latitude,d4.latitude)and ci(d3.altitude,d4.altitude)and(ci(d3.longitude,d4.longitude)or ci(d3.latitude,math.pi/2)or ci(d3.latitude,-math.pi/2))end;local function db(dc,d7,dd,de,df)local d6=dc;if cN(dc)and not de and not df and not d7 and not dd then d6,d7,dd,de,df=o(dc,cU)assert(d6,'Argument 1 (position string) is malformed.')else assert(cK(d6),'Argument 1 (systemId) must be a number:'..type(d6))assert(cK(d7),'Argument 2 (id) must be a number:'..type(d7))assert(cK(dd),'Argument 3 (latitude) must be in degrees:'..type(dd))assert(cK(de),'Argument 4 (longitude) must be in degrees:'..type(de))assert(cK(df),'Argument 5 (altitude) must be in meters:'..type(df))end;d6=z(d6)d7=z(d7)dd=z(dd)de=z(de)df=z(df)if d7==0 then return setmetatable({latitude=dd,longitude=de,altitude=df,id=d7,systemId=d6},MapPosition)end;return setmetatable({latitude=cS*r(dd,-90,90),longitude=cS*(de%360),altitude=df,id=d7,systemId=d6},MapPosition)end;local dg={}dg.__index=dg;dg.__tostring=function(cY,d1)local dh=d1 and d1 ..'  'local di={}local d2={}for cF in pairs(cY)do table.insert(d2,cF)end;table.sort(d2)for _,dj in ipairs(d2)do bdy=cY[dj]local dk=d0.__tostring(bdy,dh)if d1 then table.insert(di,f('[%s]={\n%s\n%s}',dj,dk,d1))else table.insert(di,f('  [%s]=%s',dj,dk))end end;if d1 then return f('\n%s%s%s',d1,table.concat(di,',\n'..d1),d1)end;return f('{\n%s\n}',table.concat(di,',\n'))end;local function dl(dm)local b={}local pid;for _,cG in pairs(dm)do local d7=cG.planetarySystemId;if type(d7)~='number'then error('Invalid planetary system ID: '..tostring(d7))elseif pid and d7~=pid then error('Mistringmatch planetary system IDs: '..d7 ..' and '..pid)end;local dn=cG.bodyId;if type(dn)~='number'then error('Invalid body ID: '..tostring(dn))elseif b[dn]then error('Duplicate body ID: '..tostring(dn))end;setmetatable(cG.center,getmetatable(vec3.unit_x))b[dn]=setmetatable(cG,d0)pid=d7 end;return setmetatable(b,dg)end;aQ={}local function dp(dm)return setmetatable({galaxyAtlas=dm or{}},aQ)end;aQ.__index=function(cM,i)if type(i)=='number'then local system=cM.galaxyAtlas[i]return dl(system)end;return rawget(aQ,i)end;aQ.__pairs=function(cY)return function(cM,cF)local dq,nv=next(cM,cF)return dq,nv and dl(nv)end,cY.galaxyAtlas,nil end;aQ.__tostring=function(cY)local dr={}for _,ds in pairs(cY or{})do local dt=ds:getPlanetarySystemId()local du=dg.__tostring(ds,'    ')table.insert(dr,f('  [%s]={%s\n  }',dt,du))end;return f('{\n%s\n}\n',table.concat(dr,',\n'))end;aQ.BodyParameters=d5;aQ.MapPosition=db;aQ.PlanetarySystem=dl;function aQ.createBodyParameters(d6,d7,dv,dw,dx,dy,dz)assert(cK(d6),'Argument 1 (systemId) must be a number:'..type(d6))assert(cK(d7),'Argument 2 (id) must be a number:'..type(d7))assert(cK(dv),'Argument 3 (surfaceArea) must be a number:'..type(dv))assert(cL(dw),'Argument 4 (aPosition) must be an array or vec3:'..type(dw))assert(cL(dx),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dx))assert(cK(dy),'Argument 6 (altitude) must be in meters:'..type(dy))assert(cK(dz),'Argument 7 (gravityAtPosition) must be number:'..type(dz))local d8=y(dv/4/math.pi)local aj=d8+dy;local dA=vec3(dw)+aj*vec3(dx)local da=dz*aj*aj;return d5(d6,d7,d8,dA,da)end;aQ.isMapPosition=cQ;function aQ:getPlanetarySystem(dc)if i==nil then i=0 end;if nv==nil then nv=0 end;local d6=dc;if cQ(dc)then d6=dc.systemId end;if type(d6)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dg then system=dl(system)end;return system end end end;function dg:sizeCalculator(bU)return 1.05*bU.radius end;function dg:castIntersections(dB,dC,dD,dE,dF,dG)local dH={}local dI=dF or self;for _,bU in pairs(dI)do table.insert(dH,bU)end;if not dG then table.sort(dH,function(dJ,dK)return(dJ.center-dB):len()<(dK.center-dB):len()end)end;local dL=dC:normalize()for _,bU in ipairs(dH)do local dM=bU.center-dB;local d8=self:sizeCalculator(bU)local dN=dM:dot(dL)local dO=dN^2-(dM:len2()-d8^2)if dO>=0 then local dP=y(dO)local bS=dN+dP;local bT=dN-dP;if bT>0 then return bU,bS,bT elseif bS>0 then return bU,bS,nil end end end;return nil,nil,nil end;function dg:closestBody(dQ)assert(type(dQ)=='table','Invalid coordinates.')local dR,bU;local dS=vec3(dQ)for _,dT in pairs(self)do local dU=(dT.center-dS):len2()if(not bU or dU<dR)and dT.name~="Space"then bU=dT;dR=dU end end;return bU end;function dg:convertToBodyIdAndWorldCoordinates(dc)local dV=dc;if cN(dc)then dV=db(dc)end;if dV.id==0 then return 0,vec3(dV.latitude,dV.longitude,dV.altitude)end;local dT=self:getBodyParameters(dV)if dT then return dV.id,dT:convertToWorldCoordinates(dV)end end;function dg:getBodyParameters(dc)local d7=dc;if cQ(dc)then d7=dc.id end;assert(cK(d7),'Argument 1 (id) must be a number:'..type(d7))return self[d7]end;function dg:getPlanetarySystemId()local _,cG=next(self)return cG and cG.systemId end;function d0:convertToMapPosition(d9)assert(cL(d9),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(d9))local dW=vec3(d9)if self.id==0 then return setmetatable({latitude=dW.x,longitude=dW.y,altitude=dW.z,id=0,systemId=self.systemId},MapPosition)end;local dX=dW-self.center;local aj=dX:len()local df=aj-self.radius;local dd=0;local de=0;if not ci(aj,0)then local dY=n(dX.y,dX.x)de=dY>=0 and dY or 2*math.pi+dY;dd=math.pi/2-math.acos(dX.z/aj)end;return setmetatable({latitude=dd,longitude=de,altitude=df,id=self.id,systemId=self.systemId},MapPosition)end;function d0:convertToWorldCoordinates(dc)local dV=cN(dc)and db(dc)or dc;if dV.id==0 then return vec3(dV.latitude,dV.longitude,dV.altitude)end;assert(cQ(dV),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dV.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dV.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local dZ=math.cos(dV.latitude)return self.center+(self.radius+dV.altitude)*vec3(dZ*math.cos(dV.longitude),dZ*math.sin(dV.longitude),math.sin(dV.latitude))end;function d0:getAltitude(d9)return(vec3(d9)-self.center):len()-self.radius end;function d0:getDistance(d9)return(vec3(d9)-self.center):len()end;function d0:getGravity(d9)local d_=self.center-vec3(d9)local e0=d_:len2()return self.GM/e0*d_/y(e0)end;return setmetatable(aQ,{__call=function(_,...)return dp(...)end})end;local function e1()local aS={}local e2=30000000/3600;local e3=e2*e2;local e4=100;function aS.computeAccelerationTime(e5,e6,e7)local e8=e2*math.asin(e5/e2)return(e2*math.asin(e7/e2)-e8)/e6 end;function aS.computeDistanceAndTime(e5,e7,e9,ea,eb,ec)eb=eb or 0;ec=ec or 0;local ed=e5<=e7;local ee=ea*(ed and 1 or-1)/e9;local ef=-ec/e9;local eg=ee+ef;if ed and eg<=0 or not ed and eg>=0 then return-1,-1 end;local eh,ei=0,0;if ee~=0 and eb>0 then local e8=math.asin(e5/e2)local ej=math.pi*(ee/2+ef)local ek=ee*eb;local el=e2*math.pi;local cG=function(cM)local em=(ej*cM-ek*math.sin(math.pi*cM/2/eb)+el*e8)/el;local en=math.tan(em)return e2*en/y(en*en+1)end;local eo=ed and function(cO)return cO>=e7 end or function(cO)return cO<=e7 end;ei=2*eb;if eo(cG(ei))then local ep=0;while d(ei-ep)>0.5 do local cM=(ei+ep)/2;if eo(cG(cM))then ei=cM else ep=cM end end end;local eq=e5;local er=ei/e4;for es=1,e4 do local et=cG(es*er)eh=eh+(et+eq)*er/2;eq=et end;if ei<2*eb then return eh,ei end;e5=eq end;local e8=e2*math.asin(e5/e2)local E=(e2*math.asin(e7/e2)-e8)/eg;local eu=e3*math.cos(e8/e2)/eg;local aj=eu-e3*math.cos((eg*E+e8)/e2)/eg;return aj+eh,E+ei end;function aS.computeTravelTime(e5,e6,aj)if aj==0 then return 0 end;if e6>0 then local e8=e2*math.asin(e5/e2)local eu=e3*math.cos(e8/e2)/e6;return(e2*math.acos(e6*(eu-aj)/e3)-e8)/e6 end;if e5==0 then return-1 end;assert(e5>0,'Acceleration and initial speed are both zero.')return aj/e5 end;return aS end;local function ev()local vec3=require('cpml.vec3')local cH=cH()local function cN(cO)return type(cO)=='string'end;local function cL(cM)return type(cM)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(df)assert(self.body)local aj=df+self.body.radius;if not ci(aj,0)then local orbit=y(self.body.GM/aj)return y(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dc,ew)assert(self.body)assert(cL(dc)or cN(dc))assert(cL(ew))local ex=(cN(dc)or cH.isMapPosition(dc))and self.body:convertToWorldCoordinates(dc)or vec3(dc)local cG=vec3(ew)local ey=ex-self.body.center;local ez=cG:len2()local eA=ey:len()local eB=self.body.GM;local eC=((ez-eB/eA)*ey-ey:dot(cG)*cG)/eB;local cj=eB/(2*eB/eA-ez)local eD=eC:len()local dL=eC:normalize()local eE=cj*(1-eD)local eF=cj*(1+eD)local eG=eE*dL+self.body.center;local eH=eD<=1 and-eF*dL+self.body.center or nil;local eI=y(cj*eB*(1-eD*eD))local eJ=eH and 2*math.pi*y(cj^3/eB)local eK=math.acos(eC:dot(ey)/(eD*eA))if ey:dot(cG)<0 then eK=-(eK-2*math.pi)end;local eL=math.acos((math.cos(eK)+eD)/(1+eD*math.cos(eK)))local eM=eL;if eM<0 then eM=eM+2*math.pi end;local eN=eM-eD*math.sin(eM)local eO=0;local eP=0;local eQ=0;if eJ~=nil then eO=eN/(2*math.pi/eJ)eP=eJ-eO;eQ=eP+eJ/2;if eK-math.pi>0 then eP=eO;eQ=eP+eJ/2 end;if eQ>eJ then eQ=eQ-eJ end end;return{periapsis={position=eG,speed=eI/eE,circularOrbitSpeed=y(eB/eE),altitude=eE-self.body.radius},apoapsis=eH and{position=eH,speed=eI/eF,circularOrbitSpeed=y(eB/eF),altitude=eF-self.body.radius},currentVelocity=cG,currentPosition=ex,eccentricity=eD,period=eJ,eccentricAnomaly=eL,meanAnomaly=eN,timeToPeriapsis=eP,timeToApoapsis=eQ}end;local function eR(eS)local dT=cH.BodyParameters(eS.systemId,eS.id,eS.radius,eS.center,eS.GM)return setmetatable({body=dT},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eR(...)end})end;local function eT()local eU={}local eV={}local eW={XS=13,S=27,M=55,L=110,XL=221}local eX={}local eY;local eZ;local e_;local f0;local f1;local function f2()local function f3(f4,f5,f6,f7,f8,f9,fa,fb)f5,f7,f9,fb=vec3(f5),vec3(f7),vec3(f9),vec3(fb)local fc,fd,fe=f4*f4,f6*f6,f8*f8;local ez=f7-f5;local ff=ez:normalize()local fg=ez:len()local fh=f9-f5;local fi=(fh-fh:project_on(ff)):normalize()local fj,fk=fh:dot(ff),fh:dot(fi)local fl=fj*fj+fk*fk;local fm=ff:cross(fi)local c9=(fc-fd+fg*fg)/(2*fg)local ca=(fc-fe+fl-2*fj*c9)/(2*fk)local cR=fc-c9^2-ca^2;local fn=y(cR)local fo=f5+ff*c9+fi*ca+fm*fn;local fp=f5+ff*c9+fi*ca-fm*fn;if d((fb-fo):len()-fa)<d((fb-fp):len()-fa)then return fo else return fp end end;local function fq()local function fr()local fs=core.getConstructWorldOrientationRight()local ez=core.getConstructWorldOrientationForward()local fh=core.getConstructWorldOrientationUp()local ft=library.systemResolution3(fs,ez,fh,{1,0,0})local fu=library.systemResolution3(fs,ez,fh,{0,1,0})local fv=library.systemResolution3(fs,ez,fh,{0,0,1})return function(fw)return library.systemResolution3(ft,fu,fv,fw)end end;local fx=fr()local fy=core.getConstructWorldPos()local ex=core.getElementPositionById(1)local fz={ex[1],ex[2],ex[3]}local fA=fx(fz)local fB={fy[1]-fA[1],fy[2]-fA[2],fy[3]-fA[3]}return fB end;local function fC(fD,eA,fE)local fF=fD.pts;local fG=#fF;local fH=fD.ref;if fG>3 then local fI,fJ,fK,fL=fF[fG],fF[fG-1],fF[fG-2],fF[fG-3]fD.ref=fE;local ex=f3(fI[1],fI[2],fJ[1],fJ[2],fK[1],fK[2],fL[1],fL[2])local c9,ca,fn=ex.x,ex.y,ex.z;if c9==c9 and ca==ca and fn==fn then c9=c9+fH[1]ca=ca+fH[2]fn=fn+fH[3]local fM=vec3(c9,ca,fn)if not fD.lastPos then fD.center=fM elseif(fD.lastPos-fM):len()<2 then fD.center=fM;fD.skipCalc=true end;fD.lastPos=fM end;fD.pts={}else local fN={fE[1]-fH[1],fE[2]-fH[2],fE[3]-fH[3]}fF[fG+1]={eA,fN}end end;if radar_1 then eY=#radar_1.getConstructIds()local fO=radar_1.getData()local fP=fO:gmatch('{"constructId[^}]*}[^}]*}')if eY>0 then local fE=fq()local fQ,fR=0,0;f1,f0=0,0;for cG in fP do local d7,aj,fS=cG:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local fT=eW[fS]aj=z(aj)if radar_1.hasMatchingTransponder(d7)==1 then table.insert(eV,d7)end;local fU=radar_1.getConstructType(d7)if CollisionSystem then if fT>27 or fU=="static"or fU=="space"then f1=f1+1;local fV=radar_1.getConstructName(d7)local fD=bK[d7]if fD==nil then fT=fT+G;bK[d7]={pts={},ref=fE,name=fV,i=0,radius=fT,skipCalc=false}fD=bK[d7]end;if not fD.skipCalc then fC(fD,aj,fE)fR=fR+1 end;if fD.center then table.insert(eX,fD)end end;fQ=fQ+1;if bL and fQ>700 or fR>70 or(not bL and fQ>300 or fR>30)then coroutine.yield()fQ,fR=0,0 end end end;f0=#eX;if f0>0 and bs>20 then local bU,fW,fX,fY;local fZ=0;local f_=aR:getPlanetarySystem(0)fY=br:normalize()while fZ<f0 do coroutine.yield()local g0={table.unpack(eX,fZ,math.min(fZ+75,f0))}bU,fW,fX=f_:castIntersections(bv,fY,nil,nil,g0,true)if bU and fX then bN={bU,fW,fX}break end;fZ=fZ+75 end;if not bU then bN=nil end else bN=nil end;eX={}eZ=fO:find('identifiedConstructs":%[%]')else e_=fO:find('worksInEnvironment":false')end end end;function eU.UpdateRadar()local g1=coroutine.status(UpdateRadarCoroutine)if g1=="suspended"then local cf,g2=coroutine.resume(UpdateRadarCoroutine)if g2 then system.print("ERROR UPDATE RADAR: "..g2)end elseif g1=="dead"then UpdateRadarCoroutine=coroutine.create(f2)local cf,g2=coroutine.resume(UpdateRadarCoroutine)end end;function eU.GetRadarHud()local g3=eV;eV={}return eZ,e_,eY,f0,f1,g3 end;UpdateRadarCoroutine=coroutine.create(f2)return eU end;local function g4()local g5=0;local g6=9.80665;local g7=vec3({13771471,7435803,-128971})local g8=18000000;local g9=500000;local ga,gb=math.huge;local gc;local function gd(ge)ga=vec3(ge):dist(g7)if ga<g8 then return true,d(ga-g8)end;gb=vec3(ge):dist(vec3(planet.center))if gb<g9 then gc=true else gc=false end;if d(gb-g9)<d(ga-g8)then return gc,d(gb-g9)else return gc,d(ga-g8)end end;local function gf(cG)if aG==1920 then return cG else return A(aG*cG/1920,0)end end;local function gg(cG)if aH==1080 then return cG else return A(aH*cG/1080,0)end end;local function gh()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function gi()local gj="TRAVEL"if not bA then gj="CRUISE"end;if Autopilot then gj="AUTOPILOT"end;return gj end;local gk=""local gl=""local gm=""local gn=1;local go=2;local gp=3;local gq=4;local gr=5;local gs=6;local gt=""local gu=0;local gv=e(1/apTickRate)*2*hudTickRate;local gw={}local gx={}local gy={}local gz={}local gA={}local gB={}local function gC(c9,gD,gE,gF,gG,gH)local gI=fuelY;local gJ=fuelY+5;if not BarFuelDisplay then gJ=gJ+5 end;if m()==1 and not RemoteHud then gI=gI-50;gJ=gJ-50 end;if gE=="ATMO"then gt="atmofueltank"elseif gE=="SPACE"then gt="spacefueltank"else gt="rocketfueltank"end;gu=_G[gt.."_size"]if#gF>0 then for i=1,#gF do local fV=string.sub(gF[i][go],1,12)local gK=0;for gL=1,gu do if gF[i][go]==g(unit[gt.."_"..gL].getData()).name then gK=gL;break end end;local gM=q()if gG[i]==nil or gH[i]==nil or gM-gF[i][gs]>gv then local gN;local gO=0;if gK~=0 then gH[i]=g(unit[gt.."_"..gK].getData()).percentage;gG[i]=g(unit[gt.."_"..gK].getData()).timeLeft;if gG[i]=="n/a"then gG[i]=0 end else gO=l(gF[i][gn])-gF[i][gq]gH[i]=e(0.5+gO*100/gF[i][gp])gN=gF[i][gr]if gN<=gO then gG[i]=0 else gG[i]=e(0.5+gO/((gN-gO)/(gM-gF[i][gs])))end;gF[i][gr]=gO;gF[i][gs]=gM end end;if fV==gD then fV=f("%s %d",gE,i)end;if gK==0 then fV=fV.." *"end;local gP;if gG[i]==0 then gP=""else gP=cw(gG[i])end;if gH[i]~=nil then local gQ=e(gH[i]*2.55)local gR=f("rgb(%d,%d,%d)",255-gQ,gQ,0)local cc=""if gP~=""and gG[i]<120 or gH[i]<5 then cc="red "end;if BarFuelDisplay then gl=gl..f([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],c9,gJ,gR,gH[i],c9,gJ,c9+2,gJ+10,gH[i],gP)gl=gl..c8(c9,gI,fV,cc.."txtstart pdim txtfuel")gI=gI-30;gJ=gJ-30 else gl=gl..c8(c9,gI,fV,cc.."pdim txtfuel")gl=gl..c8(c9,gJ,f("%d%% %s",gH[i],gP),"pdim txtfuel","fill:"..gR)gI=gI+30;gJ=gJ+30 end end end end end;local function gS(gT,df)if df<200000 and not aq or df and aq then local gU=0;if d(bu)>1 then gU=45*math.log(d(bu),10)if bu<0 then gU=-gU end end;gT[#gT+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(bu),e(gU))end;return gT end;local function gV(gW)local gX=-bt;gW=gW-gW:project_on(gX)local gY=vec3(0,0,1)gY=gY-gY:project_on(gX)local gZ=gY:cross(gX)local gU=gY:angle_between(gW)*constants.rad2deg;if gW:dot(gZ)<0 then gU=360-gU end;return gU end;local function g_(gT,centerX,centerY,h0,h1,bL)local h2=circleRad;local h3=20;local h4=e(h0)if bL then for i=-45,45,5 do local h5=i;gT[#gT+1]=f([[<g transform="rotate(%f,%d,%d)">]],h5,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;gT[#gT+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+h2+h3-len,centerX,centerY+h2+h3)end;gT[#gT+1]=c8(centerX,centerY+h2+h3-35,h1,"pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY+h2+h3-25,h4 .." deg","pdim txt txtmid")gT[#gT+1]=f([[<g transform="rotate(%f,%d,%d)">]],-h0,centerX,centerY)gT[#gT+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+h2+h3-20,centerX+5,centerY+h2+h3-20,centerX,centerY+h2+h3-15)gT[#gT+1]="</g>"end;local h6=h4;if bL then h6=gV(bo)end;local h7=20;local h8=e(h6)local h9=0;local ha=centerY+h2+h3+20;local hb=centerX;if h1~="YAW"then ha=gg(130)hb=gf(960)end;local hc=[[<path class="txttick line" d="]]local hd=e(h8-(h7+10)-h8%5+0.5)for i=hd+60,hd,-5 do local c9=hb-(-i*5+h6*5)if i%10==0 then h9=10;local B=i;if B==360 then B=0 elseif B>360 then B=B-360 elseif B<0 then B=B+360 end;gT[#gT+1]=c8(c9+5,ha-12,B)elseif i%5==0 then h9=5 end;if h9==10 then hc=f([[%s M %f %f v %d]],hc,c9,ha-5,h9)else hc=f([[%s M %f %f v %d]],hc,c9,ha-2.5,h9)end end;gT[#gT+1]=hc..[["/>]]gT[#gT+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],hb-5,ha+10,hb+5,ha+10,hb,ha+5)if bL then h1="HDG"end;gT[#gT+1]=c8(hb,ha+25,h8 .."deg","pdim txt txtmid","")gT[#gT+1]=c8(hb,ha+35,h1,"pdim txt txtmid","")end;local function he(gT,hf,h0,centerX,centerY,bL,hg,et)local h2=circleRad;local hh=e(h2*3/5)if h2>0 then local hi=e(hf)local len=0;local hc=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*h0,centerX,centerY)if not aq then hc=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;gT[#gT+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],h2-1,centerX,centerY)gT[#gT+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(hi-30-hi%5+0.5),e(hi+30+hi%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ca=centerY+-i*5+hf*5;if len==30 then hc=f([[%s M %d %f h %d]],hc,centerX-hh-len,ca,len)if aq then gT[#gT+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h0,centerX,centerY,centerX-hh+10,ca,i)gT[#gT+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*h0,centerX,centerY,centerX+hh-10,ca,i)if i==0 or i==180 or i==-180 then gT[#gT+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h0,centerX,centerY,centerX-hh+20,ca,hh*2-40)end else gT[#gT+1]=c8(centerX-hh+10,ca,i,"pdim txt txtmid")gT[#gT+1]=c8(centerX+hh-10,ca,i,"pdim txt txtmid")end;hc=f([[%s M %d %f h %d]],hc,centerX+hh,ca,len)else hc=f([[%s M %d %f h %d]],hc,centerX-hh-len,ca,len)hc=f([[%s M %d %f h %d]],hc,centerX+hh,ca,len)end end;gT[#gT+1]=hc..[["/>]]local hj="PITCH"if not bL then hj="REL PITCH"end;if hf>90 and not aq then hf=90-(hf-90)elseif hf<-90 and not aq then hf=-90-(hf+90)end;if h2>200 then if aq then if et>Q then gT[#gT+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY+20,hg,"pdim txt txtmid")end;gT[#gT+1]=f([[<g transform="rotate(%f,%d,%d)">]],-h0,centerX,centerY)else gT[#gT+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;gT[#gT+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hh+25,centerY-5,centerX-hh+20,centerY,centerX-hh+25,centerY+5,centerX-hh+50,centerY+4,hi)gT[#gT+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hh-25,centerY-5,centerX+hh-20,centerY,centerX+hh-25,centerY+5,centerX+hh-30,centerY+4,hi)gT[#gT+1]="</g>"end;local hk=e(h2/3)gT[#gT+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hk,centerY,h2-hk)if not aq and bL then gT[#gT+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*h0,centerX,centerY,centerX-hh+10,centerY,hh*2-20)end;gT[#gT+1]="</g>"if h2<200 then if aq and et>Q then gT[#gT+1]=c8(centerX,centerY-h2,hj,"pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY-h2+10,hi,"pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY+20,hg,"pdim txt txtmid")else gT[#gT+1]=c8(centerX,centerY-h2,hj,"pdim txt txtmid")gT[#gT+1]=c8(centerX,centerY-h2+15,hi,"pdim txt txtmid")end end end end;local function hl(gT,df,bL)local hm=altMeterX;local hn=altMeterY;local ho=78;local hp=19;local hq=ao;if ao~=-1 then gT[#gT+1]=c8(hm+ho,hn+hp+20,f("AGL: %.1fm",ao),"pdim altsm txtend")end;if bL and(df<200000 and not aq or df and aq)then table.insert(gT,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hm-1,hn-4,ho+2,hp+6,hm+1,hn-1,ho-4,hp))local fG=0;local hr=1;local hs=0;local ht=df<0;local hu=df<planet.surfaceMaxAltitude;local hv=9;if ht then hv=0 end;local df=d(df)while fG<6 do local hw=11;local hx=16;local hy=9;local hz=14;local cc="altsm"if fG>2 then hx=hx+3;hw=hw+2;hz=hz+2;hy=hy-6;cc="altbig"end;if ht then cc=cc.." red"elseif hu then cc=cc.." orange"end;local hA=df/hr%10;local hB=e(hA)local hC=e((hB+1)%10)local hD=hs;if fG==0 then hD=hA-hB;if ht then hD=1-hD end end;if ht and(fG==0 or hs~=0)then local hE=hC;hC=hB;hB=hE end;local hF=hx*(hD-1)local hG=hF+hx;local c9=hm+hy+(6-fG)*hw;local ca=hn+hz;gT[#gT+1]=c8(c9,ca+hF,hC,cc)gT[#gT+1]=c8(c9,ca+hG,hB,cc)fG=fG+1;hr=hr*10;if hB==hv then hs=hD else hs=0 end end;table.insert(gT,[[</g></g>]])end end;local function hH(ew)local hI=-math.deg(n(ew.y,ew.z))+180;hI=hI-90;if hI<0 then hI=360+hI end;if hI>180 then hI=-180+hI-180 end;return-hI end;local function hJ(ew)local h6=math.deg(n(ew.y,ew.x))-90;if h6<-180 then h6=360+h6 end;return h6 end;local function hK(gT,ew,et,centerX,centerY)if et>5 and not aq or et>Q then local h2=circleRad;local hL=20;local hM=20;local hN=hH(ew)local hO=hJ(ew)local hP=14;local hQ=hP/2;local hR=-hO/hM*h2;local hS=hN/hL*h2;local c9=centerX+hR;local ca=centerY+hS;local aj=y(hR^2+hS^2)local hT=[[<circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..hQ/hP..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..hQ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c9-hP..[[,]]..ca..[[ h ]]..hQ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9+hQ..[[,]]..ca..[[ h ]]..hQ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9 ..[[,]]..ca-hP..[[ v ]]..hQ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<h2 then gT[#gT+1]=hT else local gU=n(hS,hR)local hU=4;local hV=centerX+h2*math.cos(gU)local hW=centerY+h2*math.sin(gU)gT[#gT+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',gU*180/math.pi,hV,hW,hV-hU,hW-hU/2,hU*2,hU,hV+hU,hW-hU,hU,hU,-hU,hU)end;if not aq then local hX=vec3(ew)hN=hH(-hX)hO=hJ(-hX)hR=-hO/hM*h2;hS=hN/hL*h2;c9=centerX+hR;ca=centerY+hS;aj=y(hR^2+hS^2)if aj<h2 then local hY=[[<circle
                                    cx="]]..c9 ..[["
                                    cy="]]..ca..[["
                                    r="]]..hQ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c9 ..[[,]]..ca-hP..[[ v ]]..hQ..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c9 ..[[,]]..ca..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c9 ..[[,]]..ca..[[)" />
                                <path
                                    d="M ]]..c9-hQ..[[,]]..ca..[[ h ]]..hP..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c9 ..[[,]]..ca..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c9 ..[[,]]..ca..[[)"/>]]gT[#gT+1]=hY end end end end;local function hZ(gT,gj,h_,i0)h_=e(h_+0.5)local gI=throtPosY+10;local gJ=throtPosY+20;if m()==1 and not RemoteHud then gI=55;gJ=65 end;local i1="CRUISE"local unit="km/h"local cf=i0;if gj=="TRAVEL"or gj=="AUTOPILOT"then i1="THROT"unit="%"cf=h_;local i2="dim"if h_<0 then i2="red"end;gT[#gT+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],i2,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(h_),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;gT[#gT+1]=c8(throtPosX+10,gI,i1,"pbright txtstart")gT[#gT+1]=c8(throtPosX+10,gJ,f("%.0f %s",cf,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bA and M then h_=e(N*100+0.5)local i2="red"if h_<0 then i2="red"end;gT[#gT+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],i2,1-d(h_),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)gT[#gT+1]=c8(throtPosX+10,gI+40,"LIMIT","pbright txtstart")gT[#gT+1]=c8(throtPosX+10,gJ+40,h_.."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then gT[#gT+1]=c8(throtPosX+10,gI-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not aq and Autopilot then gT[#gT+1]=c8(throtPosX+10,gI-40,"LIMIT: "..e(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function i3(gT,i4)local i5=throtPosY-10;local i6=throtPosX+10;gT[#gT+1]=c8(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then i5=75 end;gT[#gT+1]=c8(i6,i5,e(i4).." km/h","pbright txtbig txtstart")end;local function i7(gT)gT[#gT+1]=c8(gf(1900),gg(1070),f("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")gT[#gT+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then gT[#gT+1]=c8(gf(960),gg(550),"Warning: Invalid Control Scheme Detected","warnings")gT[#gT+1]=c8(gf(960),gg(600),"Keyboard Scheme must be selected","warnings")gT[#gT+1]=c8(gf(960),gg(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local i8=gf(960)local i9=gg(860)local ia=gg(880)local ib=gg(900)local ic=gg(960)local id=gg(200)local ie=gg(250)local ig=gg(960)if m()==1 and not RemoteHud then i9=gg(135)ia=gg(155)ib=gg(175)id=gg(115)ie=gg(95)end;if BrakeIsOn then gT[#gT+1]=c8(i8,i9,"Brake Engaged","warnings")elseif L>0 then gT[#gT+1]=c8(i8,i9,"Auto-Brake Engaged","warnings","opacity:"..L)end;if aq and b2 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then gT[#gT+1]=c8(i8,id+50,"** STALL WARNING **","warnings")bW("stall","SW",2)end end;if bJ then gT[#gT+1]=c8(i8,id+90,"Flight Assist in Progress","warnings")end;if ax then gT[#gT+1]=c8(i8,ig,"Gyro Enabled","warnings")end;if GearExtended then if S then gT[#gT+1]=c8(i8,ia,"Gear Extended","warn")else gT[#gT+1]=c8(i8,ia,"Landed (G: Takeoff)","warnings")end;local ih=cl(a:getTargetGroundAltitude())gT[#gT+1]=c8(i8,ib,"Hover Height: "..ih,"warn")end;if a7 then gT[#gT+1]=c8(i8,ic+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then if d(as-antigrav.getBaseAltitude())<501 then gT[#gT+1]=c8(i8,id+15,f("AGG On - Target Altitude: %d Singularity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warn")else gT[#gT+1]=c8(i8,id+15,f("AGG On - Target Altitude: %d Singluarity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then gT[#gT+1]=c8(i8,id+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then gT[#gT+1]=c8(i8,id+20,f("LockedPitch: %d",e(LockPitch)),"warn")elseif a0 then gT[#gT+1]=c8(i8,id+20,"Follow Mode Engaged","warn")elseif Reentry or an then gT[#gT+1]=c8(i8,id+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local ih=cl(HoldAltitude,2)if VertTakeOff then if by then ih=cl(antigrav.getBaseAltitude(),2).." AGG singularity height"end;gT[#gT+1]=c8(i8,id,"VTO to "..ih,"warn")elseif AutoTakeoff and not IntoOrbit then if am then gT[#gT+1]=c8(i8,id,"Takeoff to "..AutopilotTargetName,"warn")else gT[#gT+1]=c8(i8,id,"Takeoff to "..ih,"warn")end;if BrakeIsOn and not VertTakeOff then gT[#gT+1]=c8(i8,id+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else gT[#gT+1]=c8(i8,id,"Altitude Hold: "..ih,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then gT[#gT+1]=c8(i8,id+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then gT[#gT+1]=c8(i8,id+20,"Aligning trajectory","warn")elseif ar<0.05 then gT[#gT+1]=c8(i8,id+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then gT[#gT+1]=c8(i8,id,b9,"warn")end end;if BrakeLanding then if StrongBrakes then gT[#gT+1]=c8(i8,id,"Brake-Landing","warnings")else gT[#gT+1]=c8(i8,id,"Coast-Landing","warnings")end end;if ProgradeIsOn then gT[#gT+1]=c8(i8,id,"Prograde Alignment","crit")end;if RetrogradeIsOn then gT[#gT+1]=c8(i8,id,"Retrograde Alignment","crit")end;if bM then local type;if string.find(bM,"COLLISION")then type="warnings"else type="crit"end;gT[#gT+1]=c8(i8,ie+20,bM,type)elseif ar==0 then local bR,bV=bP(br:normalize())if bV~=nil then local ih=cl(bV)local travelTime=aS.computeTravelTime(bs,0,bV)local ii="Collision"if bR.noAtmosphericDensityAltitude>0 then ii="Atmosphere"end;gT[#gT+1]=c8(i8,ie+20,bR.name.." "..ii.." "..cw(travelTime).." In "..ih,"crit")end end;if VectorToTarget and not IntoOrbit then gT[#gT+1]=c8(i8,id+35,VectorStatus,"warn")end;gT[#gT+1]="</g>"return gT end;local function ij(et)return e(A(et*3.6,0)+0.5).." km/h"end;local function ik(gT)local il=OrbitMapX;local im=OrbitMapY;local io=OrbitMapSize;local ip=4;local iq=15;local c9=0;local ca=0;local ir,is,it,iu;local function iv(type)local iw,E,et,ix;if type=="Periapsis"then iw=orbit.periapsis.altitude;E=orbit.timeToPeriapsis;et=orbit.periapsis.speed;ix=35 else iw=orbit.apoapsis.altitude;E=orbit.timeToApoapsis;et=orbit.apoapsis.speed;ix=-35 end;gT[#gT+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9+ix,ca-5,il+io/2-ir+iu,ca-5)gT[#gT+1]=c8(c9,ca,type)ca=ca+iq;local ih=cl(iw)gT[#gT+1]=c8(c9,ca,ih)ca=ca+iq;gT[#gT+1]=c8(c9,ca,cw(E))ca=ca+iq;gT[#gT+1]=c8(c9,ca,ij(et))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then im=im+ip;c9=il+io+il/2+ip;ca=im+io/2+5+ip;ir=io/4;iu=0;gT[#gT+1]=[[<g class="pbright txtorb txtmid">]]gT[#gT+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',io+il*2,io+im,ip,ip)if orbit.periapsis~=nil and orbit.apoapsis~=nil then it=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ir*2)is=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/it*(1-orbit.eccentricity)iu=ir-orbit.periapsis.altitude/it-planet.radius/it;local iy=""if orbit.periapsis.altitude<=0 then iy='redout'end;gT[#gT+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iy,il+io/2+iu+ip,im+io/2+ip,ir,is)gT[#gT+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',il+io/2+ip,im+io/2+ip,planet.radius/it)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then iv("Apoapsis")end;ca=im+io/2+5+ip;c9=il-il/2+10+ip;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then iv("Periapsis")end;gT[#gT+1]=c8(il+io/2+ip,planet.name,20+ip,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iz=orbit.timeToApoapsis/orbit.period*2*math.pi;local iA=ir*math.cos(iz)local iB=is*math.sin(iz)gT[#gT+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',il+io/2+iA+iu+ip,im+io/2+iB+ip)end;gT[#gT+1]=[[</g>]]return gT else return gT end end;local function iC(iD,iE)local iF;local iG=(iE-iD):normalize()local ey=(bv-iD):dot(iG)/iG:dot(iG)if ey<=0.then return(bv-iD):len()elseif ey>=(iE-iD):len()then return(bv-iE):len()end;local iH=iD+ey*iG;iF=(iH-bv):len()return iF end;local function iI()local iF;local iJ=nil;local iK=nil;local iL=nil;for cF,iM in pairs(b[0])do if iM.hasAtmosphere then local aj=iC(planet.center,iM.center)if iJ==nil or aj<iJ then iK=iM;iJ=aj;iL=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local dU=iC(ac.center,iM.center)if dU<iJ then iK=iM;iJ=dU;iL=ac end end end end;local iN=gf(1770)local iO=gg(330)if iJ then local iP="txttick "local iQ=500000;if iJ<iK.radius+iQ or iJ<iL.radius+iQ then if bH then iP="txttick red "else iP="txttick orange "end end;iF=cl(iJ,2)bI=c8(iN,iO,"Pipe ("..iL.name.."--"..iK.name.."): "..iF,iP.."pbright txtmid")end end;local iR={}function iR.HUDPrologue(gT)bH,g5=gd(bv)if not bH then H=PvPR;J=PvPG;I=PvPB else H=SafeR;J=SafeG;I=SafeB end;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local iS=ay;local iT=az;local iU=ay;local iV=az;if gh()and not brightHud then iS=[[rgb(]]..e(H*0.4+0.5)..","..e(J*0.4+0.5)..","..e(I*0.3+0.5)..[[)]]iT=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.2+0.5)..[[)]]end;gT[#gT+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],iS,iS,iU,iU,iT,iT,iV,iV,aG,aH)return gT end;function iR.DrawVerticalSpeed(gT,df)gS(gT,df)end;function iR.UpdateHud(gT)local hI=bB;local iW=bC;local h0=iW;local hf=hI;local h_=e(unit.getThrottle())local i4=bs*3.6;local i0=unit.getAxisCommandValue(0)local iX=gf(1770)local iY=gg(310)if AtmoSpeedAssist and bA then i0=K;h_=K*100 end;local gj=gi()local h1="ROLL"if h_==nil then h_=0 end;if not bL then if bs>5 then hI=hH(bq)iW=hJ(bq)else hI=0;iW=0 end;h1="YAW"end;if g5>50000 and not aq then local iZ;iZ=cl(g5)gT[#gT+1]=c8(iX,iY,"PvP Boundary: "..iZ,"pbright txtbig txtmid")end;gT[#gT+1]=ak;gT[#gT+1]=aD;gT[#gT+1]=gk;if bI~=""then gT[#gT+1]=bI end;if gl~=""then gT[#gT+1]=gl end;if gm~=""then gT[#gT+1]=gm end;gS(gT,as)if m()==0 or RemoteHud then if not gh()or brightHud then if bL then g_(gT,centerX,centerY,h0,h1,bL)he(gT,hf,h0,centerX,centerY,bL,e(hJ(bq)),bs)else g_(gT,centerX,centerY,iW,h1,bL)he(gT,hI,iW,centerX,centerY,bL,e(iW),bs)end;hl(gT,as,bL)hK(gT,bq,bs,centerX,centerY)end end;hZ(gT,gj,h_,i0)i3(gT,i4)i7(gT)ik(gT)return gT end;function iR.HUDEpilogue(gT)gT[#gT+1]="</svg>"return gT end;function iR.ExtraData(gT)local i_=gf(1240)local j0=gg(55)local j1=j0+10;local j2;local j3=0;local gj=gi()if VertTakeOffEngine then gj=gj.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bs>20 then gj=gj.."-COLLISION ON"end;if UseExtra~="Off"then gj="("..UseExtra..")-"..gj end;if TurnBurn then gj="TB-"..gj end;if not stablized then gj=gj.."-DeCoupled"end;local j4=vec3(core.getWorldAcceleration()):len()/9.80665;j2=core.g()gT[#gT+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then i_=gf(1120)j0=gg(55)j1=j0+10 elseif aq then local j5=gf(770)gT[#gT+1]=c8(j5,j0,"ATMOSPHERE","pdim txt txtend")gT[#gT+1]=c8(j5,j1,f("%.2f",ar),"pdim txt txtend","")end;gT[#gT+1]=c8(i_,j0,"GRAVITY","pdim txt txtend")gT[#gT+1]=c8(i_,j1,f("%.2f",j2/9.80665),"pdim txt txtend")gT[#gT+1]=c8(i_,j0+20,"ACCEL","pdim txt txtend")gT[#gT+1]=c8(i_,j1+20,f("%.2f",j4),"pdim txt txtend")gT[#gT+1]=c8(gf(960),gg(180),gj,"txtbig txtmid")end;function iR.DrawOdometer(gT,ad,TotalDistanceTravelled,ae)local j2;local j6=0;local j7=0;local j3=0;local j8=av>1000000 and A(av/1000000,2).." kTons"or A(av/1000,2).." Tons"if aq then j3=LastMaxBrakeInAtmo else j3=LastMaxBrake end;local j9,ja=aS.computeDistanceAndTime(bs,0,av,0,0,j3)j3=A(j3/(av*g6),2).." g"local jb=a:maxForceForward()j2=core.g()if j2>0.1 then j7=av*j2;j7=A(j7/(av*g6),2).." g"j6=0.5*jb/j2;j6=j6>1000000 and A(j6/1000000,2).." kTons"or A(j6/1000,2).." Tons"end;jb=A(jb/(av*g6),2).." g"gT[#gT+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gf(660),gf(700),gg(35),gf(960),gg(55),gf(1240),gg(35),gf(1280))if m()==0 or RemoteHud then gT[#gT+1]=c8(gf(700),gg(10),f("BrkTime: %s",cw(ja)),"txtstart")gT[#gT+1]=c8(gf(700),gg(20),f("Trip: %.2f km",ad),"txtstart")gT[#gT+1]=c8(gf(700),gg(30),f("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")gT[#gT+1]=c8(gf(830),gg(10),f("BrkDist: %s",cl(j9)),"txtstart")gT[#gT+1]=c8(gf(830),gg(20),"Trip Time: "..cw(ae),"txtstart")gT[#gT+1]=c8(gf(830),gg(30),"Total Time: "..cw(TotalFlightTime),"txtstart")gT[#gT+1]=c8(gf(970),gg(20),f("Mass: %s",j8),"txtstart")gT[#gT+1]=c8(gf(1240),gg(10),f("Max Brake: %s",j3),"txtend")gT[#gT+1]=c8(gf(1240),gg(30),f("Max Thrust: %s",jb),"txtend")if j2>0.1 then gT[#gT+1]=c8(gf(970),gg(30),f("Max Thrust Mass: %s",j6),"txtstart")gT[#gT+1]=c8(gf(1240),gg(20),f("Req Thrust: %s",j7),"txtend")else gT[#gT+1]=c8(gf(970),gg(30),"Max Mass: n/a","txtstart")gT[#gT+1]=c8(gf(1240),gg(20),"Req Thrust: n/a","txtend")end end;gT[#gT+1]="</g>"return gT end;function iR.DrawWarnings(gT)return i7(gT)end;function iR.DisplayOrbitScreen(gT)return ik(gT)end;function iR.DisplayMessage(gT,ih)if ih~="empty"then local ca=310;for jc in string.gmatch(ih,"([^\n]+)")do ca=ca+35;gT[#gT+1]=c8("50%",ca,jc,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function iR.DrawDeadZone(gT)gT[#gT+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function iR.UpdatePipe()if aq then bI=""return end;iI()end;function iR.DrawSettings(gT)if#bE>0 then local c9=gf(640)local ca=gg(200)gT[#gT+1]=[[<g class="pbright txtvspd txtstart">]]for cF,cG in pairs(bE)do gT[#gT+1]=c8(c9,ca,cG..": ".._G[cG])ca=ca+20;if cF%12==0 then c9=c9+gf(350)ca=gg(200)end end;gT[#gT+1]=c8(gf(640),gg(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")gT[#gT+1]="</g>"end;return gT end;local jd;local je=gf(1770)local jf=gg(350)local jg=gg(15)local jh=gf(1370)local bO,ji;local jj=0;function iR.DrawRadarInfo()local function jk()if radarPanelID~=nil and jj==0 then t(radarPanelID)radarPanelID=nil;if jd~=nil then t(jd)jd=nil end else if jj==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jd=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;jj=0 end end;local eZ,e_,eY,f0,f1,eV=aY.GetRadarHud()local B=f0 or 0;if eY>0 then if CollisionSystem then bO=B.."/"..f1 .." Plotted : "..eY-f1 .." Ignored"else bO="Radar Contacts: "..eY end;gk=c8(je,jf,bO,"pbright txtbig txtmid")if#eV>0 then gk=gk..c8(jh,jg,"Friendlies In Range","pbright txtbig txtmid")for cF,cG in pairs(eV)do jg=jg+20;gk=gk..c8(jh,jg,radar_1.getConstructName(cG),"pdim txtmid")end end;if eZ==nil and jd==nil then jj=1;jk()end;if eZ~=nil and jd~=nil then jk()end;if radarPanelID==nil then jk()end else if e_ then gk=c8(je,jf,"Radar: Jammed","pbright txtbig txtmid")else gk=c8(je,jf,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jj=0;jk()end end end;function iR.DrawTanks()if fuelX~=0 and fuelY~=0 then gl=c8(fuelX,fuelY,"","txtstart pdim txtfuel")gC(fuelX,"Atmospheric ","ATMO",aI,gA,gB)gC(fuelX+120,"Space fuel t","SPACE",aJ,gy,gz)gC(fuelX+240,"Rocket fuel ","ROCKET",aK,gw,gx)end end;function iR.DrawShield()local jl=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local jm=core.getPvPTimer()local jn=shield_1.getResistances()local jo="A: "..10+jn[1]*100 .."% / E: "..10+jn[2]*100 .."% / K:"..10+jn[3]*100 .."% / T: "..10+jn[4]*100 .."%"local c9,ca=shieldX-60,shieldY+30;local jp=e(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local gQ=e(jp*2.55)local gR=f("rgb(%d,%d,%d)",255-gQ,gQ,0)local cc=""gm=c8(c9,ca,"","txtmid pdim txtfuel")if jp<10 and jl~="Shield Disabled"then cc="red "end;jm=jm>0 and"   PvPTime: "..cw(jm)or""gm=gm..f([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],c9,ca,gR,jp*2,c9,ca,c9+2,ca+10,jp,jm)gm=gm..c8(c9,ca-5,jl,cc.."txtstart pbright txtbig")gm=gm..c8(c9,ca+30,jo,cc.."txtstart pbright txtsmall")end;return iR end;local function jq()local function jr(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function js()local function jt(ju,jv)return ju.name<jv.name end;bG={}for cF,cG in pairs(b[0])do bG[#bG+1]={name=cG.name,index=cF}end;table.sort(bG,jt)end;local function jw(jx)for cF,cG in pairs(jx)do if cG.name and cG.name==CustomTarget.name then return cF end end;return-1 end;local function jy()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local jz=bG[AutopilotTargetIndex].index;local jA=b[0][jz]if jA.center then AutopilotTargetName=jA.name;ac=aR[0][jz]if CustomTarget~=nil then if ar==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jA;for _,cG in pairs(aR[0])do if cG.name==CustomTarget.planetname then ac=cG;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jB(gX)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if gX==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then jy()else local jz=bG[AutopilotTargetIndex].index;local jA=b[0][jz]if jA~=nil and jA.name=="Space"or iphCondition=="Custom Only"and jA.center or iphCondition=="No Moons"and string.find(jA.name,"Moon")~=nil then if gX==nil then jB()else jB(1)end else jy()end end else a2="Disengage autopilot before changing Interplanetary Helper"bW("iph","AP")end end;local function jC()local fG=-1;fG=jw(b[0])if fG>-1 then table.remove(b[0],fG)end;fG=-1;fG=jw(SavedLocations)if fG~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fG)end;jB()js()end;local function jD(fV,position,hE,jE)if dbHud_1 or hE then local p=jr(position)local j2=p.gravity;if jE then j2=unit.getClosestPlanetInfluence()end;local jF={position=position,name=fV,planetname=p.name,gravity=j2,safe=jE}if not hE then SavedLocations[#SavedLocations+1]=jF else for cF,cG in pairs(b[0])do if cG.name and fV==cG.name then table.remove(b[0],cF)end end end;table.insert(b[0],jF)js()jy()a2="Location saved as "..fV.."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local jG={}function jG.UpdateAtlasLocationsList()js()end;function jG.UpdateAutopilotTarget()jy()end;function jG.adjustAutopilotTargetIndex(gX)jB(gX)end;function jG.findAtlasIndex(jx)jw(jx)end;function jG.UpdatePosition(jH)local fG=jw(SavedLocations)if fG~=-1 then if jH~=nil then SavedLocations[fG].name=jH;AutopilotTargetIndex=AutopilotTargetIndex-1;jB()else local jI=SavedLocations[fG]jI.gravity=unit.getClosestPlanetInfluence()jI.position=bv;jI.safe=true end;a2=SavedLocations[fG].name.." position updated ("..SavedLocations[fG].planetname..")"else a2="Name Not Found"end end;function jG.AddNewLocation(fV,position,hE,jE)jD(fV,position,hE,jE)end;function jG.ClearCurrentPosition()jC()end;for cF,cG in pairs(SavedLocations)do table.insert(b[0],cG)end;js()jG.UpdateAutopilotTarget()return jG end;local function jJ()local jK={}local function jL(et)local jM=AutopilotEndSpeed;if not Autopilot then jM=0 end;if not aq then return aS.computeDistanceAndTime(et,jM,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(et,jM,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function jN(et)local jM=AutopilotEndSpeed;if not Autopilot then jM=0 end;return aS.computeDistanceAndTime(et,jM,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local jO=false;function jK.GetAutopilotBrakeDistanceAndTime(et)return jL(et)end;function jK.GetAutopilotTBBrakeDistanceAndTime(et)return jN(et)end;local function jP(jQ,jR,jS)jR=jR:project_on_plane(jQ)jS=jS:project_on_plane(jQ)return n(jR:cross(jS):dot(jQ),jR:dot(jS))end;local function jT()local function jU()local jV=-1;local jW=-1;if vBooster then jV=vBooster.getDistance()end;if hover then jW=hover.getDistance()end;if jV~=-1 and jW~=-1 then if jV<jW then return jV else return jW end elseif jV~=-1 then return jV elseif jW~=-1 then return jW else return-1 end end;local jX=jU()local jY=-1;if telemeter_1 then jY=telemeter_1.getDistance()end;if jX~=-1 and jY~=-1 then if jX<jY then return jX else return jY end elseif jX~=-1 then return jX else return jY end end;local function jZ(planet,dQ,j_)local function k0(k1,d9)local dW=vec3(d9)if k1.id==0 then return setmetatable({latitude=dW.x,longitude=dW.y,altitude=dW.z,id=0,systemId=k1.systemId},MapPosition)end;local dX=dW-k1.center;local aj=dX:len()local df=aj-k1.radius;local dd=0;local de=0;if not ci(aj,0)then local dY=n(dX.y,dX.x)de=dY>=0 and dY or 2*math.pi+dY;dd=math.pi/2-math.acos(dX.z/aj)end;return setmetatable({latitude=math.deg(dd),longitude=math.deg(de),altitude=df,id=k1.id,systemId=k1.systemId},MapPosition)end;local k2=k0(planet,dQ)k2="::pos{"..k2.systemId..","..k2.id..","..k2.latitude..","..k2.longitude..","..k2.altitude.."}"if j_ then return k2 else system.setWaypoint(k2)return true end end;local k3=false;function jK.showWayPoint(planet,dQ,j_)return jZ(planet,dQ,j_)end;function jK.APTick()local function k4()if bN and not BrakeLanding then local bU=bN[1]local fW,fX=bN[2],bN[3]local k5=math.min(fW,fX or fW)local k6=k5/bs;local k7=AutoTakeoff and(bs<42 or ao~=-1)local k8=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if k8 and not k7 and(a8*1.5>k5 or k6<1)then BrakeIsOn=true;ce(0)if AltitudeHold then cq()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cr()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if k6<11 then bM=bU.name.." COLLISION "..cw(k6).." / "..cl(k5,2)else bM=bU.name.." collision "..cw(k6)end;if k6<6 then bW("alarm","AL",2)end else bM=false end end;local function k9(bQ,ka,kb)local function kc(bQ,dC)bQ=vec3(bQ)dC=vec3(dC):normalize()local cW=bQ*dC;return cW.x+cW.y+cW.z end;local kd=0.001;local ke=1;if not aq or not b2 or ao~=-1 or bs<Q then if kb==nil then kb=DampingMultiplier end;if ka==nil then ka=kd end;bQ=vec3(bQ):normalize()local kf=vec3()-bQ;local kg=-kc(kf,core.getConstructWorldOrientationRight())*ke;local kh=-kc(kf,core.getConstructWorldOrientationUp())*ke;if aB==0 then aB=kg/2 end;if aC==0 then aC=kh/2 end;if d(kg)<0.1 then V=V-kg*2 else V=V-(kg+(kg-aB)*kb)end;if d(kh)<0.1 then U=U+kh*2 else U=U+kh+(kh-aC)*kb end;aB=kg;aC=kh;if d(kg)<ka and d(kh)<ka then return true end;return false elseif b2 and ao==-1 then bQ=br;if kb==nil then kb=DampingMultiplier end;if ka==nil then ka=kd end;bQ=vec3(bQ):normalize()local kf=bo-bQ;local kg=-kc(kf,core.getConstructWorldOrientationRight())*ke;local kh=-kc(kf,core.getConstructWorldOrientationUp())*ke;if aB==0 then aB=kg/2 end;if aC==0 then aC=kh/2 end;if d(kg)<0.1 then V=V-kg*5 else V=V-(kg+(kg-aB)*kb)end;if d(kh)<0.1 then U=U+kh*5 else U=U+kh+(kh-aC)*kb end;aB=kg;aC=kh;if d(kg)<ka and d(kh)<ka then return true end;return false end end;aq=k()>0;ar=k()as=core.getAltitude()ao=jT()E=q()b3=E;if CollisionSystem then k4()end;if antigrav then by=antigrav.getState()==1 end;local ki=1;local kj=1;local kk=E-b3;local kl=-math.deg(jP(bn,br,bo))local km=math.deg(jP(bp,br,bo))local gX=bt*-1;b2=aq and kl<-YawStallAngle or kl>YawStallAngle or km<-PitchStallAngle or km>PitchStallAngle;local kn=system.getMouseDeltaX()local ko=system.getMouseDeltaY()if InvertMouse and not a1 then ko=-ko end;V=0;Z=0;U=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if as==0 then as=(bv-planet.center):len()-planet.radius end;bL=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local j2=planet:getGravity(core.getConstructWorldPos()):len()*av;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and a1 then if not aZ then ag=ag+kn;ah=ah+ko end else ag=0;ah=0 end else ag=ag+kn;ah=ah+ko;aj=y(ag*ag+ah*ah)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(ko,-100,100)+0.5)*2*ki;V=(-utils.smoothstep(kn,-100,100)+0.5)*2*kj end end end end;local kp=bs>8334;if bs>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not kp then a2="Space Speed Engine Shutoff reached"ce(0)end;if not kp and LastIsWarping then if not BrakeIsOn then ct()end;if Autopilot then cr()end end;LastIsWarping=kp;if aq and ar>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not jO then BrakeIsOn=true;jO=true elseif not AtmoSpeedAssist and jO then if bs<b7/3.6 then BrakeIsOn=false;jO=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local kq=false;if CustomTarget~=nil and al~=1 then kq=k9(CustomTarget.position-bv,0.1)else kq=k9(vec3(br),0.01)end;b0=true;if kq then ch(e(b7))if(d(bC)<2 or d(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cu()end elseif aq and AtmoSpeedAssist then ce(1)end elseif bs>Q then k9(vec3(br),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bs>Q then k9(-vec3(br))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cu()al=false;an=true else al=false;cr()end end;if an and CustomTarget~=nil and(as<HoldAltitude+250 and as>HoldAltitude-250)and bs*3.6>b7-250 and d(bu)<25 and ar>=0.1 and(CustomTarget.position-bv):len()>2000+as then cr()an=false end;if VertTakeOff then b0=true;local kr=HoldAltitude;if bu<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then kr=antigrav.getBaseAltitude()end;if as<kr-100 then b8=0;af=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;af=0 elseif bu<-30 then BrakeIsOn=true;af=15 elseif as>=kr then if by then if Autopilot or VectorToTarget then co()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"bW("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"bW("vtoc","VT")co()end;af=0 end else if ar>0.08 then b8=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bk then b8=0;af=20 else af=0;b8=36;ch(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=kr;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local ks=r(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(ks)local kt=r(vTpitchPID:get(),-1,1)U=kt end end;if IntoOrbit then local kf;local ku=false;local kv=cl(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ac end end;if not bf then bg=e(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=e(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget then kf=CustomTarget.position-bv end;local kw,kx=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local ky=bC;if not bc then local kz=false;local kA=false;ce(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..kv;if be.VectorToTarget then k9(kf:normalize():project_on_plane(bt))ku=bo:dot(kf:project_on_plane(bn):normalize())>0.95 else k9(br)ku=kl<0.5;if bs<150 then ku=true end end;U=0;ba=0;if bB<=ba+1 and bB>=ba-1 then kz=true else kz=false end;if ky<=bb+1 and ky>=bb-1 then kA=true else kA=false end;if kz and kA and ku then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then k9(kf:normalize():project_on_plane(bt))elseif bs>150 then k9(br)end;U=0;if be.VectorToTarget then local a8,_=aS.computeDistanceAndTime(bs,b7/3.6,av,0,0,LastMaxBrake)if bi and kf:len()>15000+a8+as then b9="Orbiting to Target"if as-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or kf:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"bW("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;be.VectorToTarget,be.AutopilotAlign=false,false;cp()cu()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bg*0.9 and as<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;ce(0)ba=0;if not be.VectorToTarget then a2="Orbit complete"bW("orCom","OB")cp()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..kv;bd=true;ch(kx*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kB=bu;local kC=as-bg;local kD=d(kC)if bu<10 and d(bB)<10 and kD<100 then kB=bu*2 end;if kB<10 and d(bB)<10 and kD<100 then kB=kB*2 end;if kB<5 and d(bB)<5 and kD<100 then kB=kB*4 end;VSpdPID:inject(kB)ba=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kC)ba=r(ba-r(OrbitAltPID:get(),-15,15),-90,90)end end else local kE=2.75;local kF=d(A(kw*kE))local kG=kF%50;if kG>0 then kF=kF-kG+50 end;BrakeIsOn=false;if as<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..kv;ba=utils.map(bu,200,0,-15,80)elseif as>=bg*0.8 and as<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..kv;kF=kF*0.75;ba=utils.map(bu,100,-100,-15,65)elseif as>=bg*1.15 and as<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..kv;kF=kF*0.75;if bu<0 or bd then ba=utils.map(as,bg*1.5,bg*1.01,-30,0)else ba=utils.map(as,bg*0.99,bg*1.5,0,30)end elseif as>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..kv;ba=-65;local kH=utils.map(bu,-150,-400,1,0.55)kF=kF*kH end;ch(e(kF))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kI=ba-bB;OrbitPitchPID:inject(kI)local kJ=r(OrbitPitchPID:get(),-0.5,0.5)U=kJ end end;if Autopilot and ar==0 and not al then local function kK(bO,orbit)system.print(bO)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ce(0)P=false;a2=bO;bW("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bg=as;bf=true end;cp()end end;local kL,kM=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kN=(CustomTarget.position-ac.center):normalize()local kO=kN:project_on_plane((ac.center-bv):normalize()):normalize()local kP=ac.center+kO*(ac.radius+AutopilotTargetOrbit)local kQ=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bv-kP):len()<(bv-kQ):len()then kL=kP else kL=kQ;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kL;aX.showWayPoint(ac,AutopilotTargetCoords)kM=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kM=true;TargetSet=true;AutopilotRealigned=true;kL=CustomTarget.position+(bv-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kN=(bv+br*100000-ac.center):normalize()local kO=kN:project_on_plane((ac.center-bv):normalize()):normalize()if kO:len()<1 then kN=(bv+bo*100000-ac.center):normalize()kO=kN:project_on_plane((ac.center-bv):normalize()):normalize()end;kL=ac.center+kO*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kL;TargetSet=true;kM=true;AutopilotRealigned=true;aX.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kL)-bv):len()local bR,bS,bT=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(bU)if bU.noAtmosphericDensityAltitude>0 then return bU.radius+bU.noAtmosphericDensityAltitude else return bU.radius+bU.surfaceMaxAltitude*1.5 end end)local bV=bS;if bT~=nil and bS~=nil then bV=math.min(bT,bS)end;if bV~=nil and bV<AutopilotDistance and bR.name==ac.name then AutopilotDistance=bV end;local kq=true;local kR=(ac.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ac.radius;local ih=cl(kR)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ih..'"}')local a8,a9;if not TurnBurn then a8,a9=jL(bs)else a8,a9=jN(bs)end;if bs>300 and AutopilotAccelerating then local kf=vec3(kL)-bv;local kS=r(math.deg(jP(bn,br:normalize(),kf:normalize()))*bs/500,-90,90)local kT=r(math.deg(jP(bp,br:normalize(),kf:normalize()))*bs/500,-90,90)if d(kS)<20 and d(kT)<20 then kS=kS*2;kT=kT*2 end;if d(kS)<2 and d(kT)<2 then kS=kS*2;kT=kT*2 end;local kl=-math.deg(jP(bn,bo,br:normalize()))local km=-math.deg(jP(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kT-km)local kU=r(apPitchPID:get(),-1,1)U=U+kU;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kS-kl)local kV=r(apYawPID:get(),-1,1)V=V+kV;kM=true;if d(kS)>2 or d(kT)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"bW("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end end end;if kR<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(kR)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bR,bV=bP((AutopilotTargetCoords-bv):normalize())if ac.name~=planet.name then if bR~=nil and ac.name~=bR.name then a2="Collision with "..bR.name.." in "..cl(bV).."\nClear LOS to continue."ai=5;k3=true else k3=false;a2=""end end end;if not k3 then if not AutopilotCruising and not AutopilotBraking and not kM then kq=k9((kL-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kq=k9(-vec3(br):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;ce(AutopilotInterplanetaryThrottle)K=A(AutopilotInterplanetaryThrottle,2)P=true end;local kW=unit.getThrottle()if AtmoSpeedAssist then kW=K end;if bq:len()>=MaxGameVelocity or kW==0 and P then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then bW("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;ce(0)end;local kX=AutopilotDistance;if ac.name=="Space"then kX=kX-AutopilotSpaceDistance end;if kX<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bW("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;ce(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then ce(1,true)end;local _,kx=aU(ac):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local kf;if CustomTarget~=nil then kf=CustomTarget.position-bv end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bs<50 then kK("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bs<=kx and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kK("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then bW("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=kx then if CustomTarget~=nil then if br:normalize():dot(kf:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then bW("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else kK("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else kK("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then kK("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local kX=AutopilotDistance;if ac.name=="Space"then kX=kX-AutopilotSpaceDistance end;if kX<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bW("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kW=unit.getThrottle()if AtmoSpeedAssist then kW=K end;if kW>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end;AutopilotCruising=false end else if kq then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif kq and not k3 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bW("apAcc","AP")end;if not P then ce(AutopilotInterplanetaryThrottle,true)K=A(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"bW("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;ce(0)P=false;ProgradeIsOn=true;al=true;aX.showWayPoint(ac,CustomTarget.position)end;if a0 then b0=true;local kT=0;local ex=bv+vec3(unit.getMasterPlayerRelativePosition())local kY=ex-bv;local kZ=vec3(kY):project_on(bo):len()local k_=vec3(kY):project_on(bp):len()local aj=y(kZ*kZ+k_*k_)k9(kY:normalize())local l0=40;local l1=aj<l0;local l2=100;local l3=r((aj-l0)/2,10,l2)U=0;local kq=d(V)<0.1;if kq and bs<l3 and not l1 then BrakeIsOn=false;kT=-20 else BrakeIsOn=true;kT=0 end;local l4=0;if d(kT-bB)>l4 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kT-bB)local kU=pitchPID:get()U=kU end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local l5=LastMaxBrakeInAtmo;if l5 then l5=l5*r(bs/100,0.1,1)*ar else l5=LastMaxBrake end;if ar<0.01 then l5=LastMaxBrake end;local l6=vec3(core.getWorldAirFrictionAcceleration())local l7=y(l6:len()-l6:project_on(gX):len())*av;if bs>100 then a8,a9=aS.computeDistanceAndTime(bs,100,av,0,0,l5+l7)local l8,l9=aS.computeDistanceAndTime(100,0,av,0,0,l5/2)a8=a8+l8 else a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,l5/2)end;local la=HoldAltitude-as;local lb=500+bs;local lc=1;if AutoTakeoff then lc=r(bs/100,0.1,1)end;local kT=(utils.smoothstep(la,-lb,lb)-0.5)*2*MaxPitch*lc;if not Reentry and not al and not VectorToTarget and bo:dot(br:normalize())<0.99 then kT=(utils.smoothstep(la,-lb*r(20-19*ar*10,1,20),lb*r(20-19*ar*10,1,20))-0.5)*2*MaxPitch*r(2-ar*10,1,2)*lc end;if not AltitudeHold then kT=0 end;if LockPitch~=nil then if bL and not IntoOrbit then kT=LockPitch else LockPitch=nil end end;b0=true;local ld=U;if Reentry then local le=e(b7)local lf,lg=aS.computeDistanceAndTime(bs,le/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)lf=lf==-1 and 5000 or lf;local lh=as-(planet.noAtmosphericDensityAltitude+lf)local li=as>planet.noAtmosphericDensityAltitude+lf*1.35;if li then kT=ReEntryPitch;if bs<=le/3.6 and bs>le/3.6-10 and d(br:normalize():dot(bo))>0.9 and not bA then O=false;ce(1)end elseif bA and not li and not aq then ch(le,true)end;if bA then if bs>le/3.6 and not li then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not R then kT=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kT=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and li then b0=true elseif not li then if not aq and(bA or s:getTargetSpeed(axisCommandId.longitudinal)~=le)then ch(le)end;if bs<le/3.6+1 then BrakeIsOn=false;R=false;Reentry=false;b0=true end end end;if bs>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then k9(vec3(br))end;if bJ or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local kf;if bJ then if type(bJ)=="table"then kf=bJ elseif bJ<3 and bJ>0 then kf=-bt:cross(br)*5000 elseif bJ>=3 then kf=bt:cross(br)*5000 elseif bJ<0 then kf=br*25000 end elseif CustomTarget~=nil then kf=CustomTarget.position-bv else kf=ac.center-bv end;local kS=math.deg(jP(bt:normalize(),br,kf))*2;local lj=math.rad(d(bC))if bs>minRollVelocity and ar>0.01 then local lk=r(90-kT*2,-90,90)b4=r(kS*2,-lk,lk)local ll=kS;kS=r(r(kS,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(lj)+4*(bB-kT)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)kT=r(r(kT*math.cos(lj),-PitchStallAngle*0.80,PitchStallAngle*0.80)+d(r(d(ll)*math.sin(lj),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;kS=r(kS,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lm=kl-kS;if bJ and d(lm)<=0.0001 and(type(bJ)=="table"or type(bJ)~="table"and bJ<0 and d(bC)<1)then if bJ==-2 then cq()end;bJ=nil;bW("180Off","BR")return end;if not b2 and bs>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lm)local kV=r(yawPID:get(),-1,1)V=V+kV elseif aq and ao>-1 or bs<minRollVelocity then k9(kf)elseif b2 and ar>0.01 then if(kl<-YawStallAngle or kl>YawStallAngle)and ar>0.01 then k9(br)end;if(km<-PitchStallAngle or km>PitchStallAngle)and ar>0.01 then kT=r(bB-km,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local kr=planet:getAltitude(CustomTarget.position)local lh=y(kf:len()^2-(as-kr)^2)local ln=br:len()-d(bu)StrongBrakes=true;if not am and not Reentry and lh<=a8+bs*kk/2 and(br:project_on_plane(bt):normalize():dot(kf:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"ce(0)if AltitudeHold then cq()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ln<0.1 or lh<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<lh)then if not by then bW("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bM=false end;LastDistanceToTarget=lh end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local kf=CustomTarget.position-bv;local kr=planet:getAltitude(CustomTarget.position)local lh=y(kf:len()^2-(as-kr)^2)local l5=LastMaxBrakeInAtmo;if l5 then a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,l5/2)StrongBrakes=true;if lh<=a8+bs*kk/2 and br:project_on_plane(bt):normalize():dot(kf:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cu()end end;LastDistanceToTarget=lh end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cp()VectorToTarget=false;bc=true end end;if b2 and ar>0.01 and ao==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then k9(br)kT=r(bB-km,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;U=ld;local jY=-1;if BrakeLanding then kT=0;local lo=false;local lp=30;if aT~=nil and aT>0 then local lq=r(ar,0.4,2)local l5=LastMaxBrakeInAtmo*r(bs/100,0.1,1)*lq;local lr=aT*lq+l5-j2;local ls=l5/2-j2;local lt=bs-y(d(ls/2)*20/(0.5*av))*utils.sign(ls)if lt<0 then lt=0 end;local lu;if bs>100 then local lv,_=aS.computeDistanceAndTime(bs,100,av,0,0,l5)local lw,_=aS.computeDistanceAndTime(100,0,av,0,0,y(l5))lu=lv+lw else lu=aS.computeDistanceAndTime(bs,0,av,0,0,y(l5))end;if lu<20 then BrakeIsOn=false else local lx=0;if lt>100 then local ly,_=aS.computeDistanceAndTime(lt,100,av,0,0,lr)local lz,_=aS.computeDistanceAndTime(100,0,av,0,0,aT*lq+y(l5)-j2)lx=ly+lz else lx,_=aS.computeDistanceAndTime(lt,0,av,0,0,aT*lq+y(l5)-j2)end;lx=(lx+15+bs*kk)*1.1;local lA=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lA then local kr=planet:getAltitude(CustomTarget.position)local lB=as-kr-100;local kf=CustomTarget.position-bv;local lC=y(kf:len()^2-(as-kr)^2)if lC>100 then lA=false elseif lB<=lx or lx==-1 then BrakeIsOn=true;lo=true else BrakeIsOn=false;lo=true end end;if not lA and CalculateBrakeLandingSpeed then if lx>=lp then BrakeIsOn=true else BrakeIsOn=false end;lo=true end end end;if not bA then ce(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)stablized=true;jY=ao;if jY>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()bW("grOut","LG",1)end;s:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-gX)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not lo then BrakeIsOn=true elseif not lo then BrakeIsOn=false end end;if AutoTakeoff or am then local bR,bT,bS;if AutopilotTargetCoords~=nil then bR,bT,bS=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(bU)return bU.radius+bU.noAtmosphericDensityAltitude end)end;if by then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;ce(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(kT)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bs<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;ce(0)elseif am then ce(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(bR==nil or bR.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bA then ce(0)end;AutopilotAccelerating=true end end;local lD=ao>-1;local lE=bB;if(VectorToTarget or am or bJ)and not lD and bs>minRollVelocity and ar>0.01 then local lj=math.rad(d(bC))lE=bB*d(math.cos(lj))+km*math.sin(lj)end;local lF=r(kT-lE,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then lF=r(kT-lE,-85,MaxPitch)elseif ar<0.01 then lF=r(kT-lE,-MaxPitch,MaxPitch)end;if d(bC)<5 or VectorToTarget or bJ or BrakeLanding or lD or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lF)local kU=pitchPID:get()U=U+kU end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=jT()return jK end;function script.onStart()local lG={}local lH={}local lI=false;local function lJ()local function lK(lL)local lM=dbHud_1.hasKey;for cF,cG in pairs(lL)do if lM(cG)then local cW=g(dbHud_1.getStringValue(cG))if cW~=nil then _G[cG]=cW;lI=true end end end end;if dbHud_1 then if not useTheseSettings then lK(c1())coroutine.yield()lK(c)else lK(c)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;lI=false end;coroutine.yield()if lI then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then a2="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function lN()local function lO(lP,lQ)if lP>lQ then lQ=lP end;local lR,lS=0,0;if ContainerOptimization>0 then lR=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lS=FuelTankOptimization*0.05 end;lQ=lQ*(1-(lR+lS))return lQ end;local lT=core.getElementNameById;local lU=fuelX~=0 and fuelY~=0;for cF in pairs(at)do local type=core.getElementTypeById(at[cF])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(at[cF])),'^.*vertical.*$')and core.getElementForwardById(at[cF])[3]>0 then bx=true;p("UpEngine")end end;if o(type,'^.*Space Engine$')then bl=true;if o(tostring(core.getElementTagsById(at[cF])),'^.*vertical.*$')then local lV=core.getElementForwardById(at[cF])if lV[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local lW=j(at[cF])if lW>10000 then G=110 elseif lW>1000 then G=55 elseif lW>150 then G=27 end end;aL=aL+j(at[cF])if lU and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lW=j(at[cF])local j8=l(at[cF])local lP=0;local gM=q()if type=="Atmospheric Fuel Tank"then local lQ=400;local lX=35.03;if lW>10000 then lQ=51200;lX=5480 elseif lW>1300 then lQ=6400;lX=988.67 elseif lW>150 then lQ=1600;lX=182.67 end;lP=j8-lX;if fuelTankHandlingAtmo>0 then lQ=lQ+lQ*fuelTankHandlingAtmo*0.2 end;lQ=lO(lP,lQ)aI[#aI+1]={at[cF],lT(at[cF]),lQ,lX,lP,gM}end;if type=="Rocket Fuel Tank"then local lQ=320;local lX=173.42;if lW>65000 then lQ=40000;lX=25740 elseif lW>6000 then lQ=5120;lX=4720 elseif lW>700 then lQ=640;lX=886.72 end;lP=j8-lX;if fuelTankHandlingRocket>0 then lQ=lQ+lQ*fuelTankHandlingRocket*0.1 end;lQ=lO(lP,lQ)aK[#aK+1]={at[cF],lT(at[cF]),lQ,lX,lP,gM}end;if type=="Space Fuel Tank"then local lQ=2400;local lX=182.67;if lW>10000 then lQ=76800;lX=5480 elseif lW>1300 then lQ=9600;lX=988.67 end;lP=j8-lX;if fuelTankHandlingSpace>0 then lQ=lQ+lQ*fuelTankHandlingSpace*0.2 end;lQ=lO(lP,lQ)aJ[#aJ+1]={at[cF],lT(at[cF]),lQ,lX,lP,gM}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function lY()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then s:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(aq or not aq and as<10000)then for _,cG in pairs(door)do cG.toggle()end end;if switch then for _,cG in pairs(switch)do cG.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cG in pairs(forcefield)do cG.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;s:setTargetGroundAltitude(b1)if aq and ao~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function lZ(l_,m0,m1,m2,c9,ca,m3,m4,m5,m6)local m7={enableName=l_,disableName=m0,width=m1,height=m2,x=c9,y=ca,toggleVar=m3,toggleFunction=m4,drawCondition=m5,hovered=false}if m6 then table.insert(lH,m7)else table.insert(lG,m7)end;return m7 end;local function m8(m9)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif m9=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif m9=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif m9=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=c1(m9)showHud=false else bE={}showHud=true end end;local function ma()bD=not bD;if bD then aF=lH;a2="Hold SHIFT to see Settings"bF=showHud else aF=lG;a2="Hold SHIFT to see Control Buttons"m8()showHud=bF end end;local function mb(cG)_G[cG]=not _G[cG]if _G[cG]then a2=cG.." set to true"else a2=cG.." set to false"end;if cG=="showHud"then bF=_G[cG]elseif cG=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cG=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function mc()local md=50;local me=340;local c9=500;local ca=aH/2-400;local mf=0;for cF,cG in pairs(c1("boolean"))do if type(_G[cG])=="boolean"then lZ(cG,cG,me,md,c9,ca,function()return _G[cG]end,function()mb(cG)end,function()return true end,true)ca=ca+md+20;if mf==9 then c9=c9+me+20;ca=aH/2-400;mf=0 else mf=mf+1 end end end;lZ("Control View","Control View",me,md,10,aH/2-500,function()return true end,ma,function()return true end,true)lZ("View Handling Settings",'Hide Handling Settings',me,md,10,aH/2-(500-md),function()return showHandlingVariables end,function()m8("handling")end,function()return true end,true)lZ("View Hud Settings",'Hide Hud Settings',me,md,10,aH/2-(500-md*2),function()return showHudVariables end,function()m8("hud")end,function()return true end,true)lZ("View Physics Settings",'Hide Physics Settings',me,md,10,aH/2-(500-md*3),function()return showPhysicsVariables end,function()m8("physics")end,function()return true end,true)end;local function mg()local function jD()local position=bv;local fV=planet.name..". "..#SavedLocations;if radar_1 then local d7,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if d7~=nil and d7~=""then fV=fV.." "..radar_1.getConstructName(d7)end end;return aW.AddNewLocation(fV,position,false,true)end;local function mh()TurnBurn=not TurnBurn end;local function mi(mj)if mj==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function mk()aW.UpdatePosition()end;local function jC()aW.ClearCurrentPosition()end;local function ml()local fV=AutopilotTargetName;if fV==nil then local ih=cl((bv-CustomTarget.position):len())fV=CustomTarget.name.." "..ih end;if fV==nil then fV="None"end;return"Engage Autopilot: "..fV end;local function mm()local fV=AutopilotTargetName;if fV==nil then fV=CustomTarget.name end;if fV==nil then fV="None"end;return"Disable Autopilot: "..fV end;local function mn()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)bW("folOn","F")else bW("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local md=50;local me=260;local mo=lZ("Enable Brake Toggle","Disable Brake Toggle",me,md,aG/2-me/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)lZ("Align Prograde","Disable Prograde",me,md,aG/2-me/2-50-mo.width,aH/2-md+380,function()return ProgradeIsOn end,function()mi(1)end)lZ("Align Retrograde","Disable Retrograde",me,md,aG/2-me/2+mo.width+50,aH/2-md+380,function()return RetrogradeIsOn end,mi,function()return ar==0 end)local mp=lZ(ml,mm,600,60,aG/2-600/2,aH/2-60/2-400,function()return Autopilot end,cr)lZ("Save Position","Save Position",200,mp.height,mp.x+mp.width+30,mp.y,function()return false end,jD,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)lZ("Update Position","Update Position",200,mp.height,mp.x+mp.width+30,mp.y,function()return false end,mk,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lZ("Clear Position","Clear Position",200,mp.height,mp.x-200-30,mp.y,function()return true end,jC,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)md=60;me=300;local c9=10;local ca=aH/2-500;ca=ca+md+20;lZ("View Settings","View Settings",me,md,c9,ca,function()return true end,ma)local ca=aH/2-300;lZ("Enable Turn and Burn","Disable Turn and Burn",me,md,c9,ca,function()return TurnBurn end,mh)lZ("Horizontal Takeoff Mode","Vertical Takeoff Mode",me,md,c9+me+20,ca,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bx end)ca=ca+md+20;lZ("Show Orbit Display","Hide Orbit Display",me,md,c9,ca,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)lZ("Engage Orbiting","Cancel Orbiting",me,md,c9+me+20,ca,function()return IntoOrbit end,cp,function()return ar==0 and bL end)ca=ca+md+20;lZ("Glide Re-Entry","Cancel Glide Re-Entry",me,md,c9,ca,function()return Reentry end,function()al=1;mi(1)end,function()return planet.hasAtmosphere and not aq end)lZ("Parachute Re-Entry","Cancel Parachute Re-Entry",me,md,c9+me+20,ca,function()return Reentry end,cu,function()return planet.hasAtmosphere and not aq end)ca=ca+md+20;lZ("Engage Follow Mode","Disable Follow Mode",me,md,c9,ca,function()return a0 end,mn,function()return m()==1 end)lZ("Enable Repair Arrows","Disable Repair Arrows",me,md,c9+me+20,ca,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)ca=ca+md+20;if not ExternalAGG then lZ("Enable AGG","Disable AGG",me,md,c9,ca,function()return by end,cv,function()return antigrav~=nil end)end;lZ(function()return f("Switch IPH Mode - Current: %s",iphCondition)end,function()return f("IPH Mode: %s",iphCondition)end,me*2,md,c9,ca,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)ca=ca+md+20;lZ(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,me*2,md,c9,ca,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)end;local function mq()local mr={}local function ms()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local mt={[1]=4480,[6]=4480,[7]=6270}for mu,mv in pairs(b)do b[mu][0]=ms()b[mu][0].systemId=mu;mr[mu]={}for mw,planet in pairs(b[mu])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=mt[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=mu;planet.bodyId=planet.id;mr[mu][mw]=planet end end;aQ=cH()aR=aQ(mr)aS=e1()aU=ev()aY=eT()aV=g4()aW=jq()end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lJ()coroutine.yield()lN()coroutine.yield()aX=jJ()lY()mc()mg()aF=lG;coroutine.yield()mq()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bW("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cG in pairs(door)do cG.toggle()end end;if switch then for _,cG in pairs(switch)do cG.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cG in pairs(forcefield)do cG.toggle()end end;cB()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;bW("stop","SU")end;function script.onTick(mx)local my=nil;if mx=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a2="Radar Contact"bW("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif mx=="tenthSecond"then local function mz()local mA=system.createData;local mB=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mB(panelInterplanetary,"value")interplanetaryHeaderText=mA('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mB(panelInterplanetary,"value")widgetDistanceText=mA('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=mB(panelInterplanetary,"value")widgetTravelTimeText=mA('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mB(panelInterplanetary,"value")widgetMaxMassText=mA('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mB(panelInterplanetary,"value")widgetTargetOrbitText=mA('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mB(panelInterplanetary,"value")widgetCurBrakeDistanceText=mA('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mB(panelInterplanetary,"value")widgetCurBrakeTimeText=mA('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mB(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mA('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mB(panelInterplanetary,"value")widgetMaxBrakeTimeText=mA('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mB(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mA('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mC()t(panelInterplanetary)panelInterplanetary=nil end;local function mD()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local et=bs;local kW=unit.getThrottle()/100;if AtmoSpeedAssist then kW=K end;local mE,mF=aS.computeDistanceAndTime(bs,MaxGameVelocity,av,a:maxForceForward()*kW,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,mG;if not TurnBurn and et>0 then _,mG=aX.GetAutopilotBrakeDistanceAndTime(et)else _,mG=aX.GetAutopilotTBBrakeDistanceAndTime(et)end;local mH=0;local mI=0;if AutopilotCruising or not Autopilot and et>5 then mI=aS.computeTravelTime(et,0,AutopilotDistance)elseif a8+mE<AutopilotDistance then mH=AutopilotDistance-(a8+mE)mI=aS.computeTravelTime(8333.0556,0,mH)else local mJ=(AutopilotDistance-a8)/mE;mE=AutopilotDistance-a8;mF=mF*mJ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mI elseif AutopilotBraking then return mG elseif AutopilotCruising then return mI+mG else return mF+a9+mI end end;local function mK(j2,mL)if j2==nil then j2=core.g()end;j2=A(j2,5)if mL~=nil and mL or(my==nil or my~=j2)then local et=bq:len()local mM=g(unit.getData()).maxBrake;if mM~=nil and mM>0 and aq then mM=mM/r(et/100,0.1,1)mM=mM/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mM)/2 else LastMaxBrakeInAtmo=mM end end end;if mM~=nil and mM>0 then LastMaxBrake=mM end;my=j2 end end;mK(nil,true)if bz~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bz then ch(bz,TRUE)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mz()end;if AutopilotTargetName~=nil then local mN=CustomTarget~=nil;local mO=0.5*LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()mO=mO>1000000 and A(mO/1000000,2).." kTons"or A(mO/1000,2).." Tons"u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mD()if mN and not Autopilot then aj=(bv-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local ih=cl(aj)u(widgetDistanceText,'{"label": "distance", "value": "'..ih..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cw(travelTime)..'", "unit":""}')ih=cl(a8)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ih..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cw(a9)..'", "unit":""}')ih=cl(aa)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ih..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cw(ab)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..f("%s",mO)..'", "unit":""}')ih=cl(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..ih..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then ce(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mC()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.DrawTanks()if shield_1 then aV.DrawShield()end elseif mx=="oneSecond"then local function mP(gT)local mQ=0;aD=""local mR=aL;local mS=0;local mT=0;local mU=0;local gQ=0;local gR=""local mV=core.getElementHitPointsById;for cF in pairs(at)do local lW=0;local mW=0;mW=j(at[cF])lW=mV(at[cF])mS=mS+lW;if lW<mW then if lW==0 then mU=mU+1 else mT=mT+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cF]))local c9=position.x;local ca=position.y;local fn=position.z;table.insert(aA,core.spawnArrowSticker(c9,ca,fn+1,"down"))table.insert(aA,core.spawnArrowSticker(c9,ca,fn+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(c9+1,ca,fn,"north"))table.insert(aA,core.spawnArrowSticker(c9+1,ca,fn,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(c9-1,ca,fn,"south"))table.insert(aA,core.spawnArrowSticker(c9-1,ca,fn,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(c9,ca-1,fn,"east"))table.insert(aA,core.spawnArrowSticker(c9,ca-1,fn,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(c9,ca+1,fn,"west"))table.insert(aA,core.spawnArrowSticker(c9,ca+1,fn,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cF])end elseif aM and#aA>0 and aA[11]==at[cF]then for gL in pairs(aA)do core.deleteSticker(aA[gL])end;aA={}end end;mQ=e(mS/mR*100)if mQ<100 then gT[#gT+1]=c8(0,0,"","pbright txt")gQ=e(mQ*2.55)gR=f("rgb(%d,%d,%d)",255-gQ,gQ,0)if mQ<100 then gT[#gT+1]=c8("50%",1035,"Elemental Integrity: "..mQ.."%","txtbig txtmid","fill:"..gR)if mU>0 then gT[#gT+1]=c8("50%",1055,"Disabled Modules: "..mU.." Damaged Modules: "..mT,"txtbig txtmid","fill:"..gR)elseif mT>0 then gT[#gT+1]=c8("50%",1055,"Damaged Modules: "..mT,"txtbig txtmid","fill:"..gR)end end end end;local function mX()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;local function mY()local gM=q()local i4=bs;local mZ=gM-au;if i4>1.38889 then i4=i4/1000;local m_=i4*(gM-au)TotalDistanceTravelled=TotalDistanceTravelled+m_;ad=ad+m_ end;ae=ae+mZ;TotalFlightTime=TotalFlightTime+mZ;au=gM end;mY()aV.UpdatePipe()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()mX()local gT={}aV.ExtraData(gT)if ShowOdometer then gT=aV.DrawOdometer(gT,ad,TotalDistanceTravelled,ae)end;if ShouldCheckDamage then mP(gT)end;ak=table.concat(gT,"")collectgarbage("collect")elseif mx=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local cW=g(dbHud_1.getStringValue("SavedLocations"))if cW~=nil then _G["SavedLocations"]=cW;local fG=-1;local jF;for cF,cG in pairs(SavedLocations)do if cG.name and cG.name=="SatNav Location"then fG=cF;break end end;if fG~=-1 then jF=SavedLocations[fG]fG=-1;for cF,cG in pairs(b[0])do if cG.name and cG.name=="SatNav Location"then fG=cF;break end end;if fG>-1 then b[0][fG]=jF end;aW.UpdateAtlasLocationsList()a2=jF.name.." position updated"end end;for i=1,#bG do if bG[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mx=="msgTick"then local gT={}aV.DisplayMessage(gT,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif mx=="animateTick"then a_=true;aZ=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif mx=="hudTick"then local function n0(gT)local n1=e(r(aj/(aG/4)*255,0,255))gT[#gT+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,e(H+0.5)+n1,e(J+0.5)-n1,e(I+0.5)-n1)end;local function n2()for _,cG in pairs(aF)do if cG.hovered then if not cG.drawCondition or cG.drawCondition()then cG.toggleFunction()end;cG.hovered=false end end end;local function n3()local function n4(n5,n6,c9,ca,m1,m2)if n5>c9 and n5<c9+m1 and n6>ca and n6<ca+m2 then return true else return false end end;local c9=ag+aG/2;local ca=ah+aH/2;for _,cG in pairs(aF)do cG.hovered=n4(c9,ca,cG.x,cG.y,cG.width,cG.height)end end;local function n7(gT)local function n8(gT,n9,hover,c9,ca,em,na,nb,nc,nd,ne)if type(nd)=="function"then nd=nd()end;if type(ne)=="function"then ne=ne()end;gT[#gT+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",c9,ca,em,na)if n9 then gT[#gT+1]=f("%s'",nb)else gT[#gT+1]=nc end;if hover then gT[#gT+1]=" style='stroke:white; stroke-width:2'"else gT[#gT+1]=" style='stroke:black; stroke-width:1'"end;gT[#gT+1]="></rect>"gT[#gT+1]=f("<text x='%f' y='%f' font-size='24' fill='",c9+em/2,ca+na/2+5)if n9 then gT[#gT+1]="black"else gT[#gT+1]="white"end;gT[#gT+1]="' text-anchor='middle' font-family='Montserrat'>"if n9 then gT[#gT+1]=f("%s</text>",nd)else gT[#gT+1]=f("%s</text>",ne)end end;local nf="rgb(50,50,50)'"local ng="rgb(210,200,200)"local nh=n8;for _,cG in pairs(aF)do local m0=cG.disableName;local l_=cG.enableName;if type(m0)=="function"then m0=m0()end;if type(l_)=="function"then l_=l_()end;if not cG.drawCondition or cG.drawCondition()then nh(gT,cG.toggleVar(),cG.hovered,cG.x,cG.y,cG.width,cG.height,ng,nf,m0,l_)end end end;local ni=A(ResolutionX/2,0)local nj=A(ResolutionY/2,0)local gT={}aV.HUDPrologue(gT)if showHud then aV.UpdateHud(gT)else if AlwaysVSpd then aV.DrawVerticalSpeed(gT,as)end;aV.DisplayOrbitScreen(gT)aV.DrawWarnings(gT)end;if bD and bE~={}then aV.DrawSettings(gT)end;if radar_1 then aV.DrawRadarInfo()end;aV.HUDEpilogue(gT)gT[#gT+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aV.DisplayMessage(gT,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(gT)end end;if x()==0 then if m()==1 and a1 then if not AltIsOn then n3()n7(gT)end;if not aZ and not a_ then local nk=table.concat(gT,"")gT={}gT[#gT+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)gT[#gT+1]=nk;gT[#gT+1]="</body>"aZ=true;gT[#gT+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(gT,"")system.setScreen(content)elseif a_ then local nk=table.concat(gT,"")gT={}gT[#gT+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)gT[#gT+1]=nk;gT[#gT+1]="</body>"end;if not aZ then gT[#gT+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ni,nj,ag,ah)end else n2()end else if not a1 and m()==0 then n2()if aj>DeadZone then if DisplayDeadZone then n0(gT)end end elseif not AltIsOn or AltIsOn and a1 then n3()n7(gT)end;gT[#gT+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],ni,nj,ag,ah)end;gT[#gT+1]=[[</svg></body>]]content=table.concat(gT,"")elseif mx=="apTick"then aX.APTick()elseif mx=="radarTick"then aY.UpdateRadar()elseif mx=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function nl(nm,l3)local nn=vec3()local no=vec3()if nm==axisCommandId.longitudinal then nn=vec3(core.getConstructOrientationForward())no=bo elseif nm==axisCommandId.vertical then nn=vec3(core.getConstructOrientationUp())no=bn elseif nm==axisCommandId.lateral then nn=vec3(core.getConstructOrientationRight())no=bp else return vec3()end;local np=vec3(core.getWorldGravity())local nq=np:dot(no)local nr=vec3(core.getWorldAirFrictionAcceleration())local ns=nr:dot(no)local nt=bq:dot(nn)local nu=l3*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nu-nt)local nw=targetSpeedPID2:get()local nx=(nw-ns-nq)*no;return nx end;local function ny(nm,l3)local nn=vec3()local no=vec3()if nm==axisCommandId.longitudinal then nn=vec3(core.getConstructOrientationForward())no=bo elseif nm==axisCommandId.vertical then nn=vec3(core.getConstructOrientationUp())no=bn elseif nm==axisCommandId.lateral then nn=vec3(core.getConstructOrientationRight())no=bp else return vec3()end;local np=vec3(core.getWorldGravity())local nq=np:dot(no)local nr=vec3(core.getWorldAirFrictionAcceleration())local ns=nr:dot(no)local nt=bq:dot(nn)local nu=l3*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nu-nt)local nw=targetSpeedPID:get()local nx=(nw-ns-nq)*no;return nx end;local function nz(nA,gW,jv)local nB=nA:cross(jv):normalize_inplace()local hI=math.acos(r(nB:dot(-gW),-1,1))*constants.rad2deg;if nB:cross(-gW):dot(jv)<0 then hI=-hI end;return hI end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and O then ce(0)O=false elseif not bA and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local nC=r(T+U+system.getControlDeviceForwardInput(),-1,1)local nD=r(W+Z+system.getControlDeviceYawInput(),-1,1)local nE=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local nF=Y;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())av=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local nG=bC/180*math.pi;local nH=math.cos(nG)local nI=math.sin(nG)bB=nz(bt,bo,bp*nH+bn*nI)local nJ=br:normalize()local nK=d(bC)local nL=utils.sign(bC)local nM=vec3(core.getWorldAngularVelocity())local nN=nC*pitchSpeedFactor*bp+nD*rollSpeedFactor*bo+nE*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local nO=d(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and nO>0 or ar>0.0 and nO<autoRollRollThreshold and autoRollPreference)and nD==0 and d(bB)<85 then local nP=b4;local nQ=autoRollFactor;if ar==0 then nQ=nQ/4;b4=0;nP=0 end;if rollPID==nil then rollPID=pid.new(nQ*0.01,0,nQ*0.1)end;rollPID:inject(nP-bC)local nR=rollPID:get()nN=nN+nR*bo end end;local nS=1;local nT=0;local nU=1;if system.getMouseWheel()>0 then if AltIsOn then if ar>0 or Reentry then b7=r(b7+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local nV=K;K=A(r(K+speedChangeLarge/100,-1,1),2)if K>=0 and nV<0 then K=0;aw=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ar>0 or Reentry then b7=r(b7-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local nV=K;K=A(r(K-speedChangeLarge/100,-1,1),2)if K<=0 and nV>0 then K=0;aw=false end end else aw=true end;L=0;if aq and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local nW=throttlePID:get()N=r(nW,-1,1)if N<K and ar>0.005 then M=true;s:setThrottleCommand(axisCommandId.longitudinal,r(N,0.01,1))else M=false;s:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local nX=r(brakePID:get(),0,1)if ar>0 and bu<-80 or ar>0.005 then L=nX end;if L>0 then if M and N==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else N=r(N,0.01,1)end;local nY=''local nZ=vec3()local n_=nl(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",n_,nT)local o0='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then o0=o0 ..ExtraLongitudeTags end;local o1=s:getAxisCommandType(axisCommandId.longitudinal)local o2=s:composeAxisAccelerationFromThrottle(o0,axisCommandId.longitudinal)local o3=ny(axisCommandId.lateral,LeftAmount*1000)nY=nY..' , '.."lateral airfoil , lateral ground "nZ=nZ+o3;if nZ:len()>constants.epsilon then a:setEngineForceCommand(nY,nZ,nT,'','','',nU)end;a:setEngineForceCommand(o0,o2,nS)local o4='thrust analog vertical fueled 'local o5='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then o5=o5 ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then o4=o4 ..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(o4,n_,nS)else a:setEngineForceCommand(o4,vec3(),nS)end;if LeftAmount~=0 then a:setEngineForceCommand(o5,o3,nS)else a:setEngineForceCommand(o5,vec3(),nS)end;if nF==0 then nF=L end;local o6=-nF*(brakeSpeedFactor*br+brakeFlatFactor*nJ)a:setEngineForceCommand('brake',o6)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,K)end;local l3=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-l3/3.6)local nX=r(brakePID:get(),0,1)nF=r(nF+nX,0,1)end;local o6=-nF*(brakeSpeedFactor*br+brakeFlatFactor*nJ)a:setEngineForceCommand('brake',o6)local nY=''local nZ=vec3()local o7=false;local o0='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then o0=o0 ..ExtraLongitudeTags end;local o1=s:getAxisCommandType(axisCommandId.longitudinal)if o1==axisCommandType.byThrottle then local o2=s:composeAxisAccelerationFromThrottle(o0,axisCommandId.longitudinal)a:setEngineForceCommand(o0,o2,nS)elseif o1==axisCommandType.byTargetSpeed then local o2=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nY=nY..' , '..o0;nZ=nZ+o2;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then o7=true end end;local o5='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then o5=o5 ..ExtraLateralTags end;local o8=s:getAxisCommandType(axisCommandId.lateral)if o8==axisCommandType.byThrottle then local o9=s:composeAxisAccelerationFromThrottle(o5,axisCommandId.lateral)a:setEngineForceCommand(o5,o9,nS)elseif o8==axisCommandType.byTargetSpeed then local o3=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nY=nY..' , '..o5;nZ=nZ+o3 end;local o4='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then o4=o4 ..ExtraVerticalTags end;local oa=s:getAxisCommandType(axisCommandId.vertical)if oa==axisCommandType.byThrottle then local n_=s:composeAxisAccelerationFromThrottle(o4,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(o4,n_,nS,'airfoil','ground','',nU)else a:setEngineForceCommand(o4,vec3(),nS)a:setEngineForceCommand('airfoil vertical',n_,nS,'airfoil','','',nU)a:setEngineForceCommand('ground vertical',n_,nS,'ground','','',nU)end elseif oa==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),nS)end;local ob=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nY=nY..' , '..o4;nZ=nZ+ob end;if nZ:len()>constants.epsilon then if Y~=0 or o7 or d(nJ:dot(bo))<0.8 then nY=nY..', brake'end;a:setEngineForceCommand(nY,nZ,nT,'','','',nU)end end;local oc=torqueFactor*(nN-nM)local od=vec3(core.getWorldAirFrictionAngularAcceleration())oc=oc-od;a:setEngineTorqueCommand('torque',oc,nS,'airfoil','','',nU)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local et=bq:len()local oe=0.15;if not bA then local of=s:getTargetSpeed(axisCommandId.longitudinal)if et*3.6>of*(1-oe)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif et*3.6<of*(1-oe)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kW=unit.getThrottle()if AtmoSpeedAssist then kW=K*100 end;local l3=kW/100;if k==0 then l3=l3*MaxGameVelocity;if et>=l3*(1-oe)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif et<l3*(1-oe)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local le=e(b7)l3=l3*le/3.6;if et>=l3*(1-oe)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif et<l3*(1-oe)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local g1=coroutine.status(beginSetup)if g1=="suspended"then local cf,g2=coroutine.resume(beginSetup)if g2 then system.print("ERROR STARTUP: "..g2)end elseif g1=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(og)local function oh(oi)local D=1;local function oj(ok,oi)local ol={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local om=ok;for _,cG in ipairs(ol)do if oi and om>cG then ok=cG elseif ok<cG and not oi then ok=cG;break end end;return ok end;if oi then D=-1 end;if not ExternalAGG and by then if a1 and oi then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bg=oj(bg,oi)else bg=bg+D*a3 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=oj(HoldAltitude,oi)else HoldAltitude=HoldAltitude+D*a3 end end else s:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function on(oi)local D=1;if oi then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if oi then D=1 else D=nil end;aW.adjustAutopilotTargetIndex(D)end end;local function oo(op)if not aq then a2="Flight Assist in Atmo only"return end;local cM=type(op)if bJ==nil then if cM=="table"then if Autopilot or VectorToTarget then cr()end;bW("180On","BR")elseif op==1 then bW("bnkLft","BR")else bW("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cq()if cM~="table"then op=op+1 end end;bJ=op else bW("180Off","BR")bJ=nil end end;if og=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;ce(0)if vBooster or hover then if aq and ao==-1 then bW("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if S then bW("grOut","LG",1)a.control.extendLandingGears()end;s:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then bW("grOut","LG",1)a.control.extendLandingGears()end else if S then bW("grIn","LG",1)a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif og=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif og=="forward"then T=T-1 elseif og=="backward"then if AltIsOn then oo(-br*5000)else T=T+1 end elseif og=="left"then if AltIsOn then oo(1)else W=W-1 end elseif og=="right"then if AltIsOn then oo(3)else W=W+1 end elseif og=="yawright"then X=X-1 elseif og=="yawleft"then X=X+1 elseif og=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif og=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif og=="up"then af=af+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif og=="down"then af=af-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif og=="groundaltitudeup"then oh()elseif og=="groundaltitudedown"then oh(true)elseif og=="option1"then toggleView=false;if AltIsOn and a1 then local oq=""for i=1,#passengers do oq=oq.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..A(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..oq)return end;aW.adjustAutopilotTargetIndex()elseif og=="option2"then toggleView=false;if AltIsOn and a1 then for i=1,#passengers do core.forceDeboard(passengers[i])end;a2="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif og=="option3"then local function os()aE=not aE;if not aE then bW("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else bW("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then t(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then t(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a1 then local oq=""for i=1,#ships do oq=oq.."| ID: "..ships[i].." Mass: "..A(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..oq)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;os()toggleView=false elseif og=="option4"then toggleView=false;if AltIsOn and a1 then for i=1,#ships do core.forceUndock(ships[i])end;a2="Undocked all ships"return end;bJ=nil;cr()elseif og=="option5"then toggleView=false;if AltIsOn and a1 then if shield_1 then shield_1.toggle()return else a2="No shield found"return end end;function ToggleLockPitch()if LockPitch==nil then bW("lkPOn","LP")if not a1 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bW("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif og=="option6"then toggleView=false;if AltIsOn and a1 then if shield_1 then local ot=shield_1.getVentingCooldown()if ot>0 then a2="Cannot vent again for "..ot.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a2="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a2="Shields already at max hitpoints"end;return else a2="No shield found"return end end;cq()elseif og=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end;toggleView=false elseif og=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"s:deactivateGroundEngineAltitudeStabilization()bW("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bW("gsOn","GS")end;toggleView=false elseif og=="option9"then if AltIsOn and a1 then s:resetCommand(axisCommandId.longitudinal)s:resetCommand(axisCommandId.lateral)s:resetCommand(axisCommandId.vertical)ce(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then bW("gyOn","GA")else bW("gyOff","GA")end end;toggleView=false elseif og=="lshift"then if AltIsOn then a1=true end;if x()==1 then a1=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;a_=false;aZ=false end elseif og=="brake"then if BrakeToggleStatus then ct()elseif not BrakeIsOn then ct()else BrakeIsOn=true end elseif og=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif og=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif og=="stopengines"then local function ou()if E-F<1.5 then bW("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bJ=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;ou()F=E;if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then s:resetCommand(axisCommandId.longitudinal)ce(0)else ce(100)end else if s:getTargetSpeed(axisCommandId.longitudinal)~=0 then s:resetCommand(axisCommandId.longitudinal)else if aq then ch(AtmoSpeedLimit)else ch(MaxGameVelocity*3.6)end end end elseif og=="speedup"then on()elseif og=="speeddown"then on(true)elseif og=="antigravity"and not ExternalAGG then if antigrav~=nil then cv()end end end;function script.onActionStop(og)local function ov()if not ExternalAGG and by then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if og=="forward"then T=0 elseif og=="backward"then T=0 elseif og=="left"then if bJ then if bJ==2 then bJ=-2 else bJ=-1 end end;W=0 elseif og=="right"then if bJ then if bJ==4 then bJ=-2 else bJ=-1 end end;W=0 elseif og=="yawright"then X=0 elseif og=="yawleft"then X=0 elseif og=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif og=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif og=="up"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif og=="down"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif og=="groundaltitudeup"then ov()toggleView=false elseif og=="groundaltitudedown"then ov()toggleView=false elseif og=="lshift"then if x()==1 then ag=0;ah=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a1=false elseif og=="brake"then if not BrakeToggleStatus then if BrakeIsOn then ct()else BrakeIsOn=false end end elseif og=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(og)local function ow(oi)local D=1;if oi then D=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=r(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+D*a5;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a5 end;a5=r(a5*1.05,a3,50)else s:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function ox(oi)local D=1;if oi then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if og=="groundaltitudeup"then if not a1 then ow()end elseif og=="groundaltitudedown"then if not a1 then ow(true)end elseif og=="speedup"then ox()elseif og=="speeddown"then ox(true)end end;function script.onInputText(cb)local function oy()for cF,cG in pairs(c1())do dbHud_1.setStringValue(cG,h(nil))end;for cF,cG in pairs(c)do if cG~="SavedLocations"then dbHud_1.setStringValue(cG,h(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ai=5 end;local function oz(oA,ex,hE)local function oB(ex)local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU='::pos{'..B..','..B..','..B..','..B..','..B..'}'local d6,d7,dd,de,df=o(ex,cU)if d6=="0"and d7=="0"then return vec3(z(dd),z(de),z(df))end;de=math.rad(de)dd=math.rad(dd)local planet=b[z(d6)][z(d7)]local dZ=math.cos(dd)local oC=vec3(dZ*math.cos(de),dZ*math.sin(de),math.sin(dd))return planet.center+(planet.radius+df)*oC end;local position=oB(ex)return aW.AddNewLocation(oA,position,hE)end;local i;local oD,oE=nil,nil;local oF="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute"i=string.find(cb," ")oD=cb;if i~=nil then oD=string.sub(cb,0,i-1)oE=string.sub(cb,i+1)end;if oD=="/help"or oD=="/commands"then for jc in string.gmatch(oF,"([^\n]+)")do system.print(jc)end;return elseif oD=="/setname"then if oE==nil or oE==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(oE)else a2="Select a saved target to rename first"end elseif shield_1 and oD=="/resist"then if oE==nil or shield_1.getResistancesCooldown()>0 then a2="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU=B..', '..B..', '..B..', '..B;local oG,oH,oI,oJ=o(oE,cU)if oJ==nil or oG+oH+oI+oJ>0.6 then a2="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(oG,oH,oI,oJ)==1 then a2="Shield Resistances set"else a2="Resistance setting failed."end elseif oD=="/addlocation"or string.find(cb,"::pos")~=nil then local hE=false;local oA="0-Temp"if oE==nil or oE==""then oE=oD;hE=true end;i=string.find(oE,"::")if not hE then oA=string.sub(oE,1,i-2)end;local ex=string.sub(oE,i)oz(oA,ex,hE)elseif oD=="/agg"then if oE==nil or oE==""then a2="Usage: /agg targetheight"return end;oE=z(oE)if oE<1000 then oE=1000 end;AntigravTargetAltitude=oE;a2="AGG Target Height set to "..oE elseif oD=="/G"then if oE==nil or oE==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if oE=="dump"then for cF,cG in pairs(c1())do if type(_G[cG])=="boolean"then if _G[cG]==true then system.print(cG.." true")else system.print(cG.." false")end elseif _G[cG]==nil then system.print(cG.." nil")else system.print(cG.." ".._G[cG])end end;return end;i=string.find(oE," ")local oK=string.sub(oE,0,i-1)local oL=string.sub(oE,i+1)for cF,cG in pairs(c1())do if cG==oK then a2="Variable "..oK.." changed to "..oL;local oM=type(_G[cG])if oM=="number"then oL=z(oL)elseif oM=="boolean"then if string.lower(oL)=="true"then oL=true else oL=false end end;_G[cG]=oL;return end end;a2="No such global variable: "..oK elseif oD=="/copydatabank"then if dbHud_2 then cB(true)else a2="Spare Databank required to copy databank"end elseif oD=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(d7)if radar_1 and not aq and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(d7)if radar_1 and CollisionSystem then if#bK>650 then d7=tostring(d7)bK[d7]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
