name: ArchHud - Archaegeo v1.137 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.137;local b={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local c={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=core.getConstructMass;local n=a.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local vec3=vec3;local s=utils.clamp;local t=a.axisCommandManager;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return e(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=false;local a6,a7=0;local a8,a9=0;local aa=nil;local ab=0;local ac=0;local ad=false;local ae=0;local af=0;local ag=0;local ah=3;local ai=0;local aj=""local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=false;local ar=""local as=k()>0;local at=k()local au=core.getAltitude()local av=core.getElementIdList()local aw=r()local ax=nil;local ay=false;local az=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]local aA=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH=ResolutionX;local aI=ResolutionY;local aJ=false;local aK=false;local aL=0;local aM=nil;local aN={}local aO={}local aP={}local aQ=0;local aR=false;local aS={}local aT={}local aU=e(1/apTickRate)*2;local aV={}local aW={}local aX={}local aY={}local aZ=false;local a_=16;local b0=0;local b1=nil;local b2=""local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=r()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;local bD=r()local bE=vec3(core.getConstructWorldOrientationUp())local bF=vec3(core.getConstructWorldOrientationForward())local bG=vec3(core.getConstructWorldOrientationRight())local bH=vec3(core.getWorldVelocity())local bI=vec3(bH):len()local bJ=vec3(core.getWorldVertical())local bK=vec3(core.getConstructWorldPos())local bL=false;local bM=false;local bN=nil;local bO=true;local bP=0;local bQ=0;local function bR(bS,bT)if t:getAxisCommandType(0)~=axisCommandType.byThrottle and not bT then a.control.cancelCurrentControlMasterMode()end;t:setThrottleCommand(axisCommandId.longitudinal,bS)I=s(z(bS*100,0)/100,-1,1)end;local function bU(bS,bT)if t:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bT then a.control.cancelCurrentControlMasterMode()end;t:setTargetSpeedCommand(axisCommandId.longitudinal,bS)bN=bS end;local function bV()AtlasOrdered={}for bW,bX in pairs(b1[0])do table.insert(AtlasOrdered,{name=bX.name,index=bW})end;local function bY(bZ,b_)return bZ.name<b_.name end;table.sort(AtlasOrdered,bY)end;local function c0(c1,c2)if c1==0 then return d(c2)<1e-09 end;if c2==0 then return d(c1)<1e-09 end;return d(c1-c2)<math.max(d(c1),d(c2))*epsilon end;local function c3(ai,c4)local c5=ai>100000;local c6,c7=""if c4==nil then c4=1 end;if c5 then c6,c7=z(ai/1000/200,c4),"SU"elseif ai<1000 then c6,c7=z(ai,c4),"M"else c6,c7=z(ai/1000,c4),"KM"end;return c6,c7 end;local function c8(c9)for bW,bX in pairs(c9)do if bX.name and bX.name==CustomTarget.name then return bW end end;return-1 end;local function ca()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;be=true;ae=0;if as and ap==-1 then BrakeLanding=false;AltitudeHold=true;ae=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bU(e(bn))end else VertTakeOff=true;AltitudeHold=false;by=false;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cb()by=false;bq=nil;br=nil;bC=0;if at==0 then if IntoOrbit then IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;be=true;if bx==nil then bx=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bs=false;bx=nil;be=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bu.VectorToTarget=false;bu.AutopilotAlign=false;bv=false end end;local function cc()if bD-bl<1.5 then if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;bw=HoldAltitude;bv=true;if not IntoOrbit then cb()end;bs=true end end;bl=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bl=bD end;if unit.getClosestPlanetInfluence()>0 and at==0 then bw=au;bv=true;bs=true;cb()if IntoOrbit then bl=bD else bl=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;be=true;LockPitch=nil;by=false;if ap==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=au end end;if VertTakeOff then ca()end else AutoTakeoff=true;if bl>-1 then HoldAltitude=au+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;t:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bL then ca()end end;if an then HoldAltitude=100000 end else if IntoOrbit then cb()end;if VertTakeOff then ca()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bl=0 end end;local function cd()if n()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function ce()if AutopilotTargetIndex==0 then AutopilotTargetName="None"aa=nil;CustomTarget=nil;return true end;local cf=AtlasOrdered[AutopilotTargetIndex].index;local cg=b1[0][cf]if cg.center then AutopilotTargetName=cg.name;aa=b7[0][cf]if CustomTarget~=nil then if at==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cg;for _,bX in pairs(b7[0])do if bX.name==CustomTarget.planetname then aa=bX;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(aa.center)else AutopilotTargetCoords=CustomTarget.position end;if aa.planetname~="Space"then if aa.hasAtmosphere then AutopilotTargetOrbit=e(aa.radius*(TargetOrbitRadius-1)+aa.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(aa.radius*(TargetOrbitRadius-1)+aa.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function ch(ci)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if ci==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then ce()else local cf=AtlasOrdered[AutopilotTargetIndex].index;local cg=b1[0][cf]if cg.name=="Space"then if ci==nil then ch()else ch(1)end else ce()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cj(planet,ck)local function cl(cm,cn)local co=vec3(cn)if cm.bodyId==0 then return setmetatable({latitude=co.x,longitude=co.y,altitude=co.z,bodyId=0,systemId=cm.planetarySystemId},MapPosition)end;local cp=co-cm.center;local ai=cp:len()local cq=ai-cm.radius;local cr=0;local cs=0;if not c0(ai,0)then local ct=o(cp.y,cp.x)cs=ct>=0 and ct or 2*math.pi+ct;cr=math.pi/2-math.acos(cp.z/ai)end;return setmetatable({latitude=math.deg(cr),longitude=math.deg(cs),altitude=cq,bodyId=cm.bodyId,systemId=cm.planetarySystemId},MapPosition)end;local cu=cl(aa,AutopilotTargetCoords)cu="::pos{"..cu.systemId..","..cu.bodyId..","..cu.latitude..","..cu.longitude..","..cu.altitude.."}"system.setWaypoint(cu)end;local function cv()local function cw(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cc()end end;VectorStatus="Proceeding to Waypoint"end;if bD-bm<1.5 and at>0 then if not bB then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if at>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bD end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an then ce()cj(aa,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if at~=0 then an=true;cc()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if at>0 then if not VectorToTarget then cw(SpaceTarget)end else if au>AutopilotTargetOrbit*1.5 or au==0 then by=false;Autopilot=true elseif not as then if IntoOrbit then cb()end;bw=planet.noAtmosphericDensityAltitude+1000;bv=true;bu.AutopilotAlign=true;bu.VectorToTarget=true;bs=false;if not IntoOrbit then cb()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if at~=0 then an=true;cc()else Autopilot=true end end elseif at==0 then local cx=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(aa.name==planet.name and cx)and not IntoOrbit then WaypointSet=false;by=false;bs=false;cb()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else an=true;cc()end else an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=au;TargetSet=false;Reentry=false;if IntoOrbit then cb()end end end;local function cy(cz)local cA=-1;local cB;cA=c8(SavedLocations)if cA~=-1 then local cC;if cz~=nil then cB={position=SavedLocations[cA].position,name=cz,atmosphere=SavedLocations[cA].atmosphere,planetname=SavedLocations[cA].planetname,gravity=SavedLocations[cA].gravity}else cB={position=bK,name=SavedLocations[cA].name,atmosphere=at,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cA]=cB;cA=-1;cA=c8(b1[0])if cA>-1 then b1[0][cA]=cB end;bV()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;ce()else a2="Name Not Found"end end;local function cD()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then ca()end;if IntoOrbit then cb()end;LockPitch=nil;be=autoRollPreference;am=false;ao=false;ae=0 end end;local function cE(cF,cG,cH)local function cI(cF,cJ)cF=vec3(cF)cJ=vec3(cJ):normalize()local c6=cF*cJ;return c6.x+c6.y+c6.z end;local cK=0.001;local cL=1;if not as or not bi or ap~=-1 or bI<Q then local cM=cH;if cM==nil then cM=DampingMultiplier end;if cG==nil then cG=cK end;cF=vec3(cF):normalize()local cN=vec3()-cF;local cO=-cI(cN,core.getConstructWorldOrientationRight())*cL;local cP=-cI(cN,core.getConstructWorldOrientationUp())*cL;if aC==0 then aC=cO/2 end;if aD==0 then aD=cP/2 end;if d(cO)<0.1 then V=V-cO*2 else V=V-(cO+(cO-aC)*cM)end;if d(cP)<0.1 then U=U+cP*2 else U=U+cP+(cP-aD)*cM end;aC=cO;aD=cP;if d(cO)<cG and d(cP)<cG then return true end;return false elseif bi and ap==-1 then cF=bH;local cM=cH;if cM==nil then cM=DampingMultiplier end;if cG==nil then cG=cK end;cF=vec3(cF):normalize()local cN=bF-cF;local cO=-cI(cN,core.getConstructWorldOrientationRight())*cL;local cP=-cI(cN,core.getConstructWorldOrientationUp())*cL;if aC==0 then aC=cO/2 end;if aD==0 then aD=cP/2 end;if d(cO)<0.1 then V=V-cO*5 else V=V-(cO+(cO-aC)*cM)end;if d(cP)<0.1 then U=U+cP*5 else U=U+cP+(cP-aD)*cM end;aC=cO;aD=cP;if d(cO)<cG and d(cP)<cG then return true end;return false end end;local function cQ()if Reentry then a2="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ah=5 elseif not R then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if t:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bn end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cR,cS=c3(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bn.." Target Altitude: "..cR..cS;bU(e(bn))end;AutoTakeoff=false end;local function cT()if antigrav and not ExternalAGG then if bM then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cU(cV)local cW=0;local cX=0;local cY=0;if cV<60 then cV=e(cV)elseif cV<3600 then cW=e(cV/60)cV=e(cV%60)elseif cV<86400 then cX=e(cV/3600)cW=e(cV%3600/60)else cY=e(cV/86400)cX=e(cV%86400/3600)end;if cY>0 then return cY.."d "..cX.."h "elseif cX>0 then return cX.."h "..cW.."m "elseif cW>0 then return cW.."m "..cV.."s"elseif cV>0 then return cV.."s"else return"0s"end end;local function cZ()local c_=-1;if telemeter_1 then c_=telemeter_1.getDistance()end;if ap~=-1 and c_~=-1 then if ap<c_ then return ap else return c_ end elseif ap~=-1 then return ap else return c_ end end;local function d0(d1)local function d2(d3)for bW,bX in pairs(d3)do dbHud_1.setStringValue(bX,h(_G[bX]))if d1 and dbHud_2 then dbHud_2.setStringValue(bX,h(_G[bX]))end end end;if dbHud_1 then if not ad then d2(c)d2(b)system.print("Saved Variables to Datacore")if d1 and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function d4()local d5={}local function d6(bX)if aH==1920 then return bX else return z(aH*bX/1920,0)end end;local function d7(bX)if aI==1080 then return bX else return z(aI*bX/1080,0)end end;local function d8()return y()==0 and userControlScheme~="keyboard"and n()==0 end;local function d9()local da=t:getAxisCommandType(0)local db="TRAVEL"if da==1 then db="CRUISE"end;if Autopilot then db="AUTOPILOT"end;return db end;local function dc(dd,aZ,de,df,dg,dh,di,dj)local dk=1;local dl=2;local dm=3;local dn=4;local dp=5;local dq=6;local dr=""local ds=0;local dt=fuelY;local du=fuelY+10;if n()==1 and not RemoteHud then dt=dt-50;du=du-50 end;dd[#dd+1]=[[<g class="pdim txtfuel">]]if dg=="ATMO"then dr="atmofueltank"elseif dg=="SPACE"then dr="spacefueltank"else dr="rocketfueltank"end;ds=_G[dr.."_size"]if#dh>0 then for i=1,#dh do local dv=string.sub(dh[i][dl],1,12)local dw=0;for dx=1,ds do if dh[i][dl]==g(unit[dr.."_"..dx].getData()).name then dw=dx;break end end;if aZ or di[i]==nil or dj[i]==nil then local dy=0;local dz=0;local dA=0;local dB=0;local dC=r()if dw~=0 then dj[i]=g(unit[dr.."_"..dw].getData()).percentage;di[i]=g(unit[dr.."_"..dw].getData()).timeLeft;if di[i]=="n/a"then di[i]=0 end else dA=l(dh[i][dk])-dh[i][dn]dy=dh[i][dm]dj[i]=e(0.5+dA*100/dy)dz=dh[i][dp]dB=dh[i][dq]if dz<=dA then di[i]=0 else di[i]=e(0.5+dA/((dz-dA)/(dC-dB)))end;dh[i][dp]=dA;dh[i][dq]=dC end end;if dv==df then dv=f("%s %d",dg,i)end;if dw==0 then dv=dv.." *"end;local dD;if di[i]==0 then dD="n/a"else dD=cU(di[i])end;if dj[i]~=nil then local dE=e(dj[i]*2.55)local dF=f("rgb(%d,%d,%d)",255-dE,dE,0)local dG=""if dD~="n/a"and di[i]<120 or dj[i]<5 then if aZ then dG=[[class="red"]]end end;dd[#dd+1]=f([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],de,dt,dG,dv,de,du,dF,dj[i],dD)dt=dt+30;du=du+30 end end end;dd[#dd+1]="</g>"end;local function dH(dd,cq)if cq<200000 and not as or cq and as then local dI=-bJ:dot(bH)local dJ=0;if d(dI)>1 then dJ=45*math.log(d(dI),10)if dI<0 then dJ=-dJ end end;dd[#dd+1]=f([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,e(dI),e(dJ))end;return dd end;local function dK(dL)local ci=-bJ;dL=dL-dL:project_on(ci)local dM=vec3(0,0,1)dM=dM-dM:project_on(ci)local dN=dM:cross(ci)local dJ=dM:angle_between(dL)*constants.rad2deg;if dL:dot(dN)<0 then dJ=360-dJ end;return dJ end;local function dO(dd,centerX,centerY,dP,dQ,cx)local dR=circleRad;local dS=20;dS=e(dS)local dT=e(dP)if cx then for i=-45,45,5 do local dU=i;dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],dU,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dd[#dd+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dR+dS-len,centerX,centerY+dR+dS)end;dd[#dd+1]=f([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+dR+dS-35,dQ,centerX,centerY+dR+dS-25,dT)dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dR+dS-20,centerX+5,centerY+dR+dS-20,centerX,centerY+dR+dS-15)dd[#dd+1]="</g>"end;local dV=dT;if cx then dV=dK(bF)end;local dW=20;local dX=e(dV)local dY=0;local dZ=centerY+dR+dS+20;local d_=centerX;if dQ~="YAW"then dZ=d7(130)d_=d6(960)end;local e0=[[<path class="txttick line" d="]]for i=e(dX-(dW+10)-dX%5+0.5),e(dX+dW+10+dX%5+0.5),5 do local de=d_+-i*5+dV*5;if i%10==0 then dY=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;dd[#dd+1]=f([[
                                    <text x="%f" y="%f">%d</text>]],de+5,dZ-12,A)elseif i%5==0 then dY=5 end;if dY==10 then e0=f([[%s M %f %f v %d]],e0,de,dZ-5,dY)else e0=f([[%s M %f %f v %d]],e0,de,dZ-2.5,dY)end end;dd[#dd+1]=e0 ..[["/>]]dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],d_-5,dZ+10,d_+5,dZ+10,d_,dZ+5)if cx then dQ="HDG"end;dd[#dd+1]=f([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],d_,dZ+25,dX,d_,dZ+35,dQ)end;local function e1(dd,e2,dP,centerX,centerY,cx,e3,e4)local dR=circleRad;local e5=e(dR*3/5)if dR>0 then local e6=e(e2)local len=0;local e0=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dP,centerX,centerY)if not as then e0=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dd[#dd+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dR-1,centerX,centerY)dd[#dd+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(e6-30-e6%5+0.5),e(e6+30+e6%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local e7=centerY+-i*5+e2*5;if len==30 then e0=f([[%s M %d %f h %d]],e0,centerX-e5-len,e7,len)if as then dd[#dd+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX-e5+10,e7,i)dd[#dd+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX+e5-10,e7,i)if i==0 or i==180 or i==-180 then dd[#dd+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-e5+20,e7,e5*2-40)end else dd[#dd+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e5+10,e7,i)dd[#dd+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e5-10,e7,i)end;e0=f([[%s M %d %f h %d]],e0,centerX+e5,e7,len)else e0=f([[%s M %d %f h %d]],e0,centerX-e5-len,e7,len)e0=f([[%s M %d %f h %d]],e0,centerX+e5,e7,len)end end;dd[#dd+1]=e0 ..[["/>]]local e8="PITCH"if not cx then e8="REL PITCH"end;if e2>90 and not as then e2=90-(e2-90)elseif e2<-90 and not as then e2=-90-(e2+90)end;if dR>200 then if as then if e4>Q then dd[#dd+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e3)end;dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)else dd[#dd+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e5+25,centerY-5,centerX-e5+20,centerY,centerX-e5+25,centerY+5,centerX-e5+50,centerY+4,e6)dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e5-25,centerY-5,centerX+e5-20,centerY,centerX+e5-25,centerY+5,centerX+e5-30,centerY+4,e6)dd[#dd+1]="</g>"end;local e9=e(dR/3)dd[#dd+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-e9,centerY,dR-e9)if not as and cx then dd[#dd+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-e5+10,centerY,e5*2-20)end;dd[#dd+1]="</g>"if dR<200 then if as and e4>Q then dd[#dd+1]=f([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dR,e8,centerX,centerY-dR+10,e6,centerX,centerY-15,"Yaw",centerX,centerY+20,e3)else dd[#dd+1]=f([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dR,e8,centerX,centerY-dR+15,e6)end end end end;local function ea(dd,cq,cx)local eb=altMeterX;local ec=altMeterY;local ed=78;local ee=19;local ef=cZ()if ef~=-1 then table.insert(dd,f([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],eb+ed,ec+ee+20,ef))end;if cx and(cq<200000 and not as or cq and as)then table.insert(dd,f([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],eb-1,ec-4,ed+2,ee+6,eb+1,ec-1,ed-4,ee))local cA=0;local eg=1;local eh=0;local ei=cq<0;local ej=9;if ei then ej=0 end;local cq=d(cq)while cA<6 do local ek=11;local el=16;local em=9;local en=14;local dG="altsm"if cA>2 then el=el+3;ek=ek+2;en=en+2;em=em-6;dG="altbig"end;if ei then dG=dG.." red"end;local eo=cq/eg%10;local ep=e(eo)local eq=e((ep+1)%10)local er=eh;if cA==0 then er=eo-ep;if ei then er=1-er end end;if ei and(cA==0 or eh~=0)then local es=eq;eq=ep;ep=es end;local et=el*(er-1)local eu=et+el;local de=eb+em+(6-cA)*ek;local e7=ec+en;table.insert(dd,f([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dG,de,e7+et,eq,de,e7+eu,ep))cA=cA+1;eg=eg*10;if ep==ej then eh=er else eh=0 end end;table.insert(dd,[[</g></g>]])end end;local function ev(ew)ew=vec3(ew)local ex=-math.deg(o(ew.y,ew.z))+180;ex=ex-90;if ex<0 then ex=360+ex end;if ex>180 then ex=-180+ex-180 end;return-ex end;local function ey(ew)ew=vec3(ew)local dV=math.deg(o(ew.y,ew.x))-90;if dV<-180 then dV=360+dV end;return dV end;local function ez(dd,ew,e4,centerX,centerY)if e4>5 and not as or e4>Q then local dR=circleRad;local eA=20;local eB=20;local eC=vec3(ew)local eD=ev(eC)local eE=ey(eC)local eF=14;local eG=eF/2;local eH=-eE/eB*dR;local eI=eD/eA*dR;local de=centerX+eH;local e7=centerY+eI;local ai=math.sqrt(eH^2+eI^2)local eJ=[[<circle
                        cx="]]..de..[["
                        cy="]]..e7 ..[["
                        r="]]..eG/eF..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..de..[["
                        cy="]]..e7 ..[["
                        r="]]..eG..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..de-eF..[[,]]..e7 ..[[ h ]]..eG..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..de+eG..[[,]]..e7 ..[[ h ]]..eG..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..de..[[,]]..e7-eF..[[ v ]]..eG..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ai<dR then dd[#dd+1]=eJ else local dJ=o(eI,eH)local eK=4;local eL=centerX+dR*math.cos(dJ)local eM=centerY+dR*math.sin(dJ)dd[#dd+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dJ*180/math.pi,eL,eM,eL-eK,eM-eK/2,eK*2,eK,eL+eK,eM-eK,eK,eK,-eK,eK)end;if not as then eD=ev(-eC)eE=ey(-eC)eH=-eE/eB*dR;eI=eD/eA*dR;de=centerX+eH;e7=centerY+eI;ai=math.sqrt(eH^2+eI^2)if ai<dR then local eN=[[<circle
                                cx="]]..de..[["
                                cy="]]..e7 ..[["
                                r="]]..eG..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..de..[[,]]..e7-eF..[[ v ]]..eG..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..de..[[,]]..e7 ..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..de..[[,]]..e7 ..[[)" />
                            <path
                                d="M ]]..de-eG..[[,]]..e7 ..[[ h ]]..eF..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..de..[[,]]..e7 ..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..de..[[,]]..e7 ..[[)"/>]]dd[#dd+1]=eN end end end end;local function eO(dd,db,eP,eQ)eP=e(eP+0.5)local dt=throtPosY+10;local du=throtPosY+20;if n()==1 and not RemoteHud then dt=55;du=65 end;local eR="CRUISE"local unit="km/h"local bS=eQ;if db=="TRAVEL"or db=="AUTOPILOT"then eR="THROT"unit="%"bS=eP;local eS="dim"if eP<0 then eS="red"end;dd[#dd+1]=f([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],eS,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(eP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dd[#dd+1]=f([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dt,eR,throtPosX+10,du,bS,unit)if as and AtmoSpeedAssist and bO and K then eP=e(L*100+0.5)local eS="red"if eP<0 then eS="red"end;dd[#dd+1]=f([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],eS,1-d(eP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dd[#dd+1]=f([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dt+40,"LIMIT",throtPosX+10,du+40,eP,"%")end;if as and AtmoSpeedAssist or Reentry then dd[#dd+1]=f([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dt-40,"LIMIT: ",bn.." km/h")elseif not as and Autopilot then dd[#dd+1]=f([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dt-40,"LIMIT: ",e(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eT(dd,eU)local eV=throtPosY-10;local eW=throtPosX+10;dd[#dd+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eV=75 end;dd[#dd+1]=f([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],eW,eV,e(eU))end;local function eX(dd)dd[#dd+1]=f([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],d6(1900),d7(1070),VERSION_NUMBER)dd[#dd+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dd[#dd+1]=f([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],d6(960),d7(550))dd[#dd+1]=f([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],d6(960),d7(600))dd[#dd+1]=f([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],d6(960),d7(650))end;local eY=d6(960)local eZ=d7(860)local e_=d7(880)local f0=d7(900)local f1=d7(960)local f2=d7(200)local f3=d7(150)local f4=d7(960)if n()==1 and not RemoteHud then eZ=d7(135)e_=d7(155)f0=d7(175)f2=d7(115)f3=d7(95)end;if BrakeIsOn then dd[#dd+1]=f([[<text x="%d" y="%d">Brake Engaged</text>]],eY,eZ)elseif J>0 then dd[#dd+1]=f([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eY,eZ,J)end;if as and bi and ap==-1 then dd[#dd+1]=f([[<text x="%d" y="%d">** STALL WARNING **</text>]],eY,f2+50)end;if ax then dd[#dd+1]=f([[<text x="%d" y="%d">Gyro Enabled</text>]],eY,f4)end;if GearExtended then if S then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eY,e_)else dd[#dd+1]=f([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eY,e_)end;local f5,c7=c3(a:getTargetGroundAltitude())dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eY,f0,f5 ..c7)end;if a5 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eY,f1+20)end;if antigrav and not ExternalAGG and bM and AntigravTargetAltitude~=nil then if d(au-antigrav.getBaseAltitude())<501 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],eY,f2+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))else dd[#dd+1]=f([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eY,f2+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eY,f2+20,AutopilotStatus)elseif LockPitch~=nil then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eY,f2+20,e(LockPitch))elseif a0 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eY,f2+20)elseif Reentry then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eY,f2+20)end;local f6,f7,f8=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(f9)if f9.noAtmosphericDensityAltitude>0 then return f9.radius+f9.noAtmosphericDensityAltitude else return f9.radius+f9.surfaceMaxAltitude*1.5 end end)local fa=f7;if f8~=nil and f7~=nil then fa=math.min(f8,f7)end;if AltitudeHold or VertTakeOff then local f5,c7=c3(HoldAltitude,2)if VertTakeOff then if bM then f5,c7=c3(antigrav.getBaseAltitude(),2)end;dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],eY,f2,f5 ..c7)elseif AutoTakeoff and not IntoOrbit then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],eY,f2,f5 ..c7)if BrakeIsOn and not VertTakeOff then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eY,f2+50)end else dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eY,f2,f5 ..c7)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if at>0.1 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],eY,f2)elseif at<0.09 and at>0.05 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],eY,f2)elseif at<0.05 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],eY,f2)end end;if IntoOrbit then if bp~=nil then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eY,f2,bp)end end;if BrakeLanding then if StrongBrakes then dd[#dd+1]=f([[<text x="%d" y="%d">Brake-Landing</text>]],eY,f2)else dd[#dd+1]=f([[<text x="%d" y="%d">Coast-Landing</text>]],eY,f2)end end;if ProgradeIsOn then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eY,f2)end;if RetrogradeIsOn then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eY,f2)end;if fa~=nil and at==0 then local f5,c7=c3(fa)local travelTime=b8.computeTravelTime(bI,0,fa)local fb="Collision"if f6.noAtmosphericDensityAltitude>0 then fb="Atmosphere"end;dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eY,f3,f6.name,fb,cU(travelTime),f5 ..c7)end;if VectorToTarget and not IntoOrbit then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eY,f2+35,VectorStatus)end;dd[#dd+1]="</g>"return dd end;local function fc(e4)return e(z(e4*3.6,0)+0.5).." km/h"end;local function fd(dd)if orbit~=nil and at<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fe=OrbitMapX;local ff=OrbitMapY;local fg=OrbitMapSize;local fh=4;ff=ff+fh;local fi=15;local de=fe+fg+fe/2+fh;local e7=ff+fg/2+5+fh;local fj,fk,fl,fm;fj=fg/4;fm=0;dd[#dd+1]=[[<g class="pbright txtorb txtmid">]]dd[#dd+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fg+fe*2,fg+ff,fh,fh)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fl=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fj*2)fk=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fl*(1-orbit.eccentricity)fm=fj-orbit.periapsis.altitude/fl-planet.radius/fl;local fn=""if orbit.periapsis.altitude<=0 then fn='redout'end;dd[#dd+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fn,fe+fg/2+fm+fh,ff+fg/2+fh,fj,fk)dd[#dd+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fe+fg/2+fh,ff+fg/2+fh,planet.radius/fl)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dd[#dd+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],de-35,e7-5,fe+fg/2+fj+fm,e7-5)dd[#dd+1]=f([[<text x="%f" y="%f">Apoapsis</text>]],de,e7)e7=e7+fi;local f5,c7=c3(orbit.apoapsis.altitude)dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,f5 ..c7)e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,cU(orbit.timeToApoapsis))e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,fc(orbit.apoapsis.speed))end;e7=ff+fg/2+5+fh;de=fe-fe/2+10+fh;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dd[#dd+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],de+35,e7-5,fe+fg/2-fj+fm,e7-5)dd[#dd+1]=f([[<text x="%f" y="%f">Periapsis</text>]],de,e7)e7=e7+fi;local f5,c7=c3(orbit.periapsis.altitude)dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,f5 ..c7)e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,cU(orbit.timeToPeriapsis))e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,fc(orbit.periapsis.speed))end;dd[#dd+1]=f([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fe+fg/2+fh,20+fh,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fo=orbit.timeToApoapsis/orbit.period*2*math.pi;local fp=fj*math.cos(fo)local fq=fk*math.sin(fo)dd[#dd+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fe+fg/2+fp+fm+fh,ff+fg/2+fq+fh)end;dd[#dd+1]=[[</g>]]return dd else return dd end end;local function fr(dd)local function fs(ft,fu)for i=1,#fu do table.insert(ft,fu[i])end;return ft end;local de=50;local e7=525;local fv={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fw={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fx={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fy={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if as then fs(fv,fw)table.insert(fv,"---------------------------------------")if VertTakeOff then table.insert(fv,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif ap~=-1 then if antigrav then if bM then table.insert(fv,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fv,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fv,"Alt-6: Begins Vertical Takeoff.")else table.insert(fv,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fv,"G: Begin BrakeLanding or Land")end else fs(fv,fx)end;if AltitudeHold then table.insert(fv,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fv,"---------------------------------------")fs(fv,fy)dd[#dd+1]=[[<g class="pdim txt txtstart">]]for i=1,#fv do e7=e7+10;dd[#dd+1]=f([[<text x=%d y="%d">%s</text>]],de,e7,fv[i])end;dd[#dd+1]="</g>"end;local function fz()if radarPanelID~=nil and al==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if al==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;function d5.HUDPrologue(dd)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;az=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aA=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local fA=az;local fB=aA;local fC=az;local fD=aA;if d8()and not brightHud then fA=[[rgb(]]..e(D*0.4+0.5)..","..e(F*0.4+0.5)..","..e(E*0.3+0.5)..[[)]]fB=[[rgb(]]..e(D*0.3+0.5)..","..e(F*0.3+0.5)..","..e(E*0.2+0.5)..[[)]]end;dd[#dd+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fA,fA,fC,fC,fB,fB,fD,fD,aH,aI)return dd end;function d5.UpdateHud(dd)local cq=au;local ew=core.getVelocity()local e4=vec3(ew):len()local ex=bP;local fE=bQ;local dP=fE;local e2=bP;local eP=e(unit.getThrottle())local eU=e4*3.6;local eQ=unit.getAxisCommandValue(0)local fF=d6(1770)local fG=d7(310)if AtmoSpeedAssist and bO then eQ=I;eP=I*100 end;local db=d9()local dQ="ROLL"local cx=unit.getClosestPlanetInfluence()>0;if eP==nil then eP=0 end;if not cx then if e4>5 then ex=ev(ew)fE=ey(ew)else ex=0;fE=0 end;dQ="YAW"end;if H>50000 and not as then local fH;if H>200000 then fH=z(H/200000,2).." su"else fH=z(H/1000,1).." km"end;dd[#dd+1]=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fF,fG,fH)end;dd[#dd+1]=ak;dd[#dd+1]=aE;dd[#dd+1]=aj;if b0%aU==0 then aZ=true end;if fuelX~=0 and fuelY~=0 then dc(dd,aZ,fuelX,"Atmospheric ","ATMO",aN,aX,aY)dc(dd,aZ,fuelX+100,"Space fuel t","SPACE",aO,aV,aW)dc(dd,aZ,fuelX+200,"Rocket fuel ","ROCKET",aP,aS,aT)end;if aZ then aZ=false;b0=0 end;b0=b0+1;dH(dd,cq)if n()==0 or RemoteHud then if not d8()or brightHud then if cx then dO(dd,centerX,centerY,dP,dQ,cx)e1(dd,e2,dP,centerX,centerY,cx,e(ey(ew)),e4)else dO(dd,centerX,centerY,fE,dQ,cx)e1(dd,ex,fE,centerX,centerY,cx,e(fE),e4)end;ea(dd,cq,cx)ez(dd,ew,e4,centerX,centerY)end end;eO(dd,db,eP,eQ)eT(dd,eU)eX(dd)fd(dd)if showHelp then fr(dd)end;if screen_2 then local fI=bK;local de=960+fI.x/b3;local e7=450+fI.y/b4;screen_2.moveContent(b5,(de-80)/19.2,(e7-80)/10.8)end;return dd end;function d5.HUDEpilogue(dd)dd[#dd+1]="</svg>"return dd end;function d5.DrawOdometer(dd,ab,TotalDistanceTravelled,ac,fJ)local fK=d6(1240)local fL=d7(55)local fM=fL+10;local fN=core.g()local fO=0;local fP=0;local fQ=0;local db=d9()if VertTakeOffEngine then db=db.."-VERTICAL"end;if TurnBurn then db="TB-"..db end;if as then fQ=LastMaxBrakeInAtmo else fQ=LastMaxBrake end;maxThrust=a:maxForceForward()aL=m()if not ShowOdometer then return end;local fR=vec3(core.getWorldAcceleration()):len()/9.80665;fN=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if fN>0.1 then fP=aL*fN;fO=maxThrust/fN end;dd[#dd+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then fK=d6(1120)fL=d7(55)fM=fL+10 elseif as then local fS=d6(770)dd[#dd+1]=f([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fS,fL,fS,fM,at)end;dd[#dd+1]=f([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fK,fL,fK,fM,fN/9.80665,fK,fL+20,fK,fM+20,fR)dd[#dd+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],d6(660),d6(700),d7(35),d6(960),d7(55),d6(1240),d7(35),d6(1280))if n()==0 or RemoteHud then dd[#dd+1]=f([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],d6(700),d7(20),ab,d6(700),d7(30),TotalDistanceTravelled/1000,d6(830),d7(20),cU(ac),d6(830),d7(30),cU(TotalFlightTime),d6(970),d7(20),aL/1000,d6(1240),d7(10),fQ/1000,d6(1240),d7(30),maxThrust/1000,d6(960),d7(180),db)if fN>0.1 then dd[#dd+1]=f([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],d6(970),d7(30),fO/1000,d6(1240),d7(20),fP/1000)else dd[#dd+1]=f([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],d6(970),d7(30),d6(1240),d7(20))end else dd[#dd+1]=f([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],d6(960),d7(33),db)end;dd[#dd+1]="</g>"return dd end;function d5.DrawWarnings(dd)return eX(dd)end;function d5.DisplayOrbitScreen(dd)return fd(dd)end;function d5.DisplayMessage(dd,f5)if f5~="empty"then dd[#dd+1]=[[<text class="msg" x="50%%" y="310" >]]for fT in string.gmatch(f5,"([^\n]+)")do dd[#dd+1]=f([[<tspan x="50%%" dy="35">%s</tspan>]],fT)end;dd[#dd+1]=[[</text>]]end;if ah~=0 then unit.setTimer("msgTick",ah)ah=0 end end;function d5.DrawDeadZone(dd)dd[#dd+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function d5.UpdateRadar()if radar_1 then local fU=radar_1.getEntries()local fV=radar_1.getData()local fW=d6(1770)local fX=d7(330)if#fU>0 then local fY=fV:find('identifiedConstructs":%[%]')if fY==nil and perisPanelID==nil then al=1;fz()end;if fY~=nil and perisPanelID~=nil then fz()end;if radarPanelID==nil then fz()end;aj=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fW,fX,#fU)local fZ={}for bW,bX in pairs(fU)do if radar_1.hasMatchingTransponder(bX)==1 then table.insert(fZ,bX)end end;if#fZ>0 then local e7=d7(15)local de=d6(1370)aj=f([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aj,de,e7)for bW,bX in pairs(fZ)do e7=e7+20;aj=f([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aj,de,e7,radar_1.getConstructName(bX))end end else local f_;f_=fV:find('worksInEnvironment":false')if f_ then aj=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fW,fX)else aj=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fW,fX)end;if radarPanelID~=nil then al=0;fz()end end end end;return d5 end;local function g0()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function g1()local function g2(g3)return type(g3)=='number'end;local function g4(g3)return type(tonumber(g3))=='number'end;local function g5(g6)return type(g6)=='table'end;local function g7(g8)return type(g8)=='string'end;local function g9(bX)return g5(bX)and g2(bX.x and bX.y and bX.z)end;local function ga(gb)return g5(gb)and g2(gb.latitude and gb.longitude and gb.altitude and gb.bodyId and gb.systemId)end;local gc=math.pi/180;local gd=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ge='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gf=s;local function c0(c1,c2)if c1==0 then return d(c2)<1e-09 end;if c2==0 then return d(c1)<1e-09 end;return d(c1-c2)<math.max(d(c1),d(c2))*epsilon end;local function gg(g3)local c6=string.gsub(string.reverse(f('%.4f',g3)),'^0*%.?','')return c6==''and'0'or string.reverse(c6)end;local function gh(gi)if g9(gi)then return f('{x=%.3f,y=%.3f,z=%.3f}',gi.x,gi.y,gi.z)end;if g5(gi)and not getmetatable(gi)then local gj={}local gk=next(gi)if type(gk)=='nil'or gk==1 then gj=gi else for bW,bX in pairs(gi)do local bS=gh(bX)if type(bW)=='number'then table.insert(gj,f('[%s]=%s',bW,bS))else table.insert(gj,f('%s=%s',bW,bS))end end end;return f('{%s}',table.concat(gj,','))end;if g7(gi)then return f("'%s'",gi:gsub("'",[[\']]))end;return tostring(gi)end;local gl={}gl.__index=gl;gl.__tostring=function(gi,gm)local gn={}for bW in pairs(gi)do table.insert(gn,bW)end;table.sort(gn)local gj={}for _,bW in ipairs(gn)do local bS=gh(gi[bW])if type(bW)=='number'then table.insert(gj,f('[%s]=%s',bW,bS))else table.insert(gj,f('%s=%s',bW,bS))end end;if gm then return f('%s%s',gm,table.concat(gj,',\n'..gm))end;return f('{%s}',table.concat(gj,','))end;gl.__eq=function(go,gp)return go.planetarySystemId==gp.planetarySystemId and go.bodyId==gp.bodyId and c0(go.radius,gp.radius)and c0(go.center.x,gp.center.x)and c0(go.center.y,gp.center.y)and c0(go.center.z,gp.center.z)and c0(go.GM,gp.GM)end;local function gq(gr,gs,gt,cn,gu)assert(g4(gr),'Argument 1 (planetarySystemId) must be a number:'..type(gr))assert(g4(gs),'Argument 2 (bodyId) must be a number:'..type(gs))assert(g4(gt),'Argument 3 (radius) must be a number:'..type(gt))assert(g5(cn),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cn))assert(g4(gu),'Argument 5 (GM) must be a number:'..type(gu))return setmetatable({planetarySystemId=tonumber(gr),bodyId=tonumber(gs),radius=tonumber(gt),center=vec3(cn),GM=tonumber(gu)},gl)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gv)return f('::pos{%d,%d,%s,%s,%s}',gv.systemId,gv.bodyId,gg(gv.latitude*gd),gg(gv.longitude*gd),gg(gv.altitude))end;MapPosition.__eq=function(go,gp)return go.bodyId==gp.bodyId and go.systemId==gp.systemId and c0(go.latitude,gp.latitude)and c0(go.altitude,gp.altitude)and(c0(go.longitude,gp.longitude)or c0(go.latitude,math.pi/2)or c0(go.latitude,-math.pi/2))end;local function gw(gx,gs,cr,cs,cq)local gr=gx;if g7(gx)and not cs and not cq and not gs and not cr then gr,gs,cr,cs,cq=p(gx,ge)assert(gr,'Argument 1 (position string) is malformed.')else assert(g4(gr),'Argument 1 (systemId) must be a number:'..type(gr))assert(g4(gs),'Argument 2 (bodyId) must be a number:'..type(gs))assert(g4(cr),'Argument 3 (latitude) must be in degrees:'..type(cr))assert(g4(cs),'Argument 4 (longitude) must be in degrees:'..type(cs))assert(g4(cq),'Argument 5 (altitude) must be in meters:'..type(cq))end;gr=tonumber(gr)gs=tonumber(gs)cr=tonumber(cr)cs=tonumber(cs)cq=tonumber(cq)if gs==0 then return setmetatable({latitude=cr,longitude=cs,altitude=cq,bodyId=gs,systemId=gr},MapPosition)end;return setmetatable({latitude=gc*gf(cr,-90,90),longitude=gc*(cs%360),altitude=cq,bodyId=gs,systemId=gr},MapPosition)end;local gy={}gy.__index=gy;gy.__tostring=function(gi,gm)local gz=gm and gm..'  'local gA={}local gn={}for bW in pairs(gi)do table.insert(gn,bW)end;table.sort(gn)for _,gB in ipairs(gn)do bdy=gi[gB]local gC=gl.__tostring(bdy,gz)if gm then table.insert(gA,f('[%s]={\n%s\n%s}',gB,gC,gm))else table.insert(gA,f('  [%s]=%s',gB,gC))end end;if gm then return f('\n%s%s%s',gm,table.concat(gA,',\n'..gm),gm)end;return f('{\n%s\n}',table.concat(gA,',\n'))end;local function gD(gE)local b1={}local pid;for _,bX in pairs(gE)do local gF=bX.planetarySystemId;if type(gF)~='number'then error('Invalid planetary system ID: '..tostring(gF))elseif pid and gF~=pid then error('Mistringmatch planetary system IDs: '..gF..' and '..pid)end;local gG=bX.bodyId;if type(gG)~='number'then error('Invalid body ID: '..tostring(gG))elseif b1[gG]then error('Duplicate body ID: '..tostring(gG))end;setmetatable(bX.center,getmetatable(vec3.unit_x))b1[gG]=setmetatable(bX,gl)pid=gF end;return setmetatable(b1,gy)end;b6={}local function gH(gE)return setmetatable({galaxyAtlas=gE or{}},b6)end;b6.__index=function(g6,i)if type(i)=='number'then local system=g6.galaxyAtlas[i]return gD(system)end;return rawget(b6,i)end;b6.__pairs=function(gi)return function(g6,bW)local gI,nv=next(g6,bW)return gI,nv and gD(nv)end,gi.galaxyAtlas,nil end;b6.__tostring=function(gi)local gJ={}for _,gK in pairs(gi or{})do local gL=gK:getPlanetarySystemId()local gM=gy.__tostring(gK,'    ')table.insert(gJ,f('  [%s]={%s\n  }',gL,gM))end;return f('{\n%s\n}\n',table.concat(gJ,',\n'))end;b6.BodyParameters=gq;b6.MapPosition=gw;b6.PlanetarySystem=gD;function b6.createBodyParameters(gN,gs,gO,gP,gQ,gR,gS)assert(g4(gN),'Argument 1 (planetarySystemId) must be a number:'..type(gN))assert(g4(gs),'Argument 2 (bodyId) must be a number:'..type(gs))assert(g4(gO),'Argument 3 (surfaceArea) must be a number:'..type(gO))assert(g5(gP),'Argument 4 (aPosition) must be an array or vec3:'..type(gP))assert(g5(gQ),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gQ))assert(g4(gR),'Argument 6 (altitude) must be in meters:'..type(gR))assert(g4(gS),'Argument 7 (gravityAtPosition) must be number:'..type(gS))local gt=math.sqrt(gO/4/math.pi)local ai=gt+gR;local gT=vec3(gP)+ai*vec3(gQ)local gu=gS*ai*ai;return gq(gN,gs,gt,gT,gu)end;b6.isMapPosition=ga;function b6:getPlanetarySystem(gx)if i==nil then i=0 end;if nv==nil then nv=0 end;local gN=gx;if ga(gx)then gN=gx.systemId end;if type(gN)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gy then system=gD(system)end;return system end end end;function gy:castIntersections(gU,cJ,gV,gW)local gV=gV or function(f9)return 1.05*f9.radius end;local gX={}if gW then for _,i in ipairs(gW)do gX[i]=self[i]end else gW={}for bW,f9 in pairs(self)do table.insert(gW,bW)gX[bW]=f9 end end;local function gY(gZ,g_)local h0=gX[gZ].center-gU;local h1=gX[g_].center-gU;return h0:len()<h1:len()end;table.sort(gW,gY)local h2=cJ:normalize()for i,gF in ipairs(gW)do local f9=gX[gF]local h3=f9.center-gU;local gt=gV(f9)local h4=h3:dot(h2)local h5=h4^2-(h3:len2()-gt^2)if h5>=0 then local h6=math.sqrt(h5)local f7=h4+h6;local f8=h4-h6;if f8>0 then return f9,f7,f8 elseif f7>0 then return f9,f7,nil end end end;return nil,nil,nil end;function gy:closestBody(ck)assert(type(ck)=='table','Invalid coordinates.')local h7,f9;local h8=vec3(ck)for _,h9 in pairs(self)do local ha=(h9.center-h8):len2()if(not f9 or ha<h7)and h9.name~="Space"then f9=h9;h7=ha end end;return f9 end;function gy:convertToBodyIdAndWorldCoordinates(gx)local hb=gx;if g7(gx)then hb=gw(gx)end;if hb.bodyId==0 then return 0,vec3(hb.latitude,hb.longitude,hb.altitude)end;local h9=self:getBodyParameters(hb)if h9 then return hb.bodyId,h9:convertToWorldCoordinates(hb)end end;function gy:getBodyParameters(gx)local gs=gx;if ga(gx)then gs=gx.bodyId end;assert(g4(gs),'Argument 1 (bodyId) must be a number:'..type(gs))return self[gs]end;function gy:getPlanetarySystemId()local _,bX=next(self)return bX and bX.planetarySystemId end;function gl:convertToMapPosition(cn)assert(g5(cn),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cn))local co=vec3(cn)if self.bodyId==0 then return setmetatable({latitude=co.x,longitude=co.y,altitude=co.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cp=co-self.center;local ai=cp:len()local cq=ai-self.radius;local cr=0;local cs=0;if not c0(ai,0)then local ct=o(cp.y,cp.x)cs=ct>=0 and ct or 2*math.pi+ct;cr=math.pi/2-math.acos(cp.z/ai)end;return setmetatable({latitude=cr,longitude=cs,altitude=cq,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gl:convertToWorldCoordinates(gx)local hb=g7(gx)and gw(gx)or gx;if hb.bodyId==0 then return vec3(hb.latitude,hb.longitude,hb.altitude)end;assert(ga(hb),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hb.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hb.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local hc=math.cos(hb.latitude)return self.center+(self.radius+hb.altitude)*vec3(hc*math.cos(hb.longitude),hc*math.sin(hb.longitude),math.sin(hb.latitude))end;function gl:getAltitude(cn)return(vec3(cn)-self.center):len()-self.radius end;function gl:getDistance(cn)return(vec3(cn)-self.center):len()end;function gl:getGravity(cn)local hd=self.center-vec3(cn)local he=hd:len2()return self.GM/he*hd/math.sqrt(he)end;return setmetatable(b6,{__call=function(_,...)return gH(...)end})end;function script.onStart()local function hf()local function hg(hh)local hi=dbHud_1.hasKey;for bW,bX in pairs(hh)do if hi(bX)then local c6=g(dbHud_1.getStringValue(bX))if c6~=nil then _G[bX]=c6;aJ=true end end end end;if dbHud_1 then local hi=dbHud_1.hasKey;if not useTheseSettings then hg(b)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ah=5 end;coroutine.yield()hg(c)if aJ then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bn=AtmoSpeedLimit;az=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aA=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bD then LastMaxBrakeInAtmo=0 end;LastStartTime=bD;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ah=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=au end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hj()local function hk(hl,hm)if hl>hm then hm=hl end;if ContainerOptimization>0 then hm=hm-hm*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hm=hm-hm*FuelTankOptimization*0.05 end;return hm end;local hn=core.getElementNameById;local ho=fuelX~=0 and fuelY~=0;for bW in pairs(av)do local type=core.getElementTypeById(av[bW])if p(type,'^.*Atmospheric Engine$')then if p(tostring(core.getElementTagsById(av[bW])),'^.*vertical.*$')then bL=true end end;if p(type,'^.*Space Engine$')then bB=true;if p(tostring(core.getElementTagsById(av[bW])),'^.*vertical.*$')then local hp=core.getElementRotationById(av[bW])if hp[4]<0 then if q(-hp[4],0.1)==0.5 then bz=true end else if q(hp[4],0.1)==0.5 then bA=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hq=j(av[bW])if hq>10000 then a_=128 elseif hq>1000 then a_=64 elseif hq>150 then a_=32 end end;aQ=aQ+j(av[bW])if ho and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hq=j(av[bW])local hr=l(av[bW])local hl=0;local dC=r()if type=="Atmospheric Fuel Tank"then local hm=400;local hs=35.03;if hq>10000 then hm=51200;hs=5480 elseif hq>1300 then hm=6400;hs=988.67 elseif hq>150 then hm=1600;hs=182.67 end;hl=hr-hs;if fuelTankHandlingAtmo>0 then hm=hm+hm*fuelTankHandlingAtmo*0.2 end;hm=hk(hl,hm)aN[#aN+1]={av[bW],hn(av[bW]),hm,hs,hl,dC}end;if type=="Rocket Fuel Tank"then local hm=320;local hs=173.42;if hq>65000 then hm=40000;hs=25740 elseif hq>6000 then hm=5120;hs=4720 elseif hq>700 then hm=640;hs=886.72 end;hl=hr-hs;if fuelTankHandlingRocket>0 then hm=hm+hm*fuelTankHandlingRocket*0.1 end;hm=hk(hl,hm)aP[#aP+1]={av[bW],hn(av[bW]),hm,hs,hl,dC}end;if type=="Space Fuel Tank"then local hm=2400;local hs=182.67;if hq>10000 then hm=76800;hs=5480 elseif hq>1300 then hm=9600;hs=988.67 end;hl=hr-hs;if fuelTankHandlingSpace>0 then hm=hm+hm*fuelTankHandlingSpace*0.2 end;hm=hk(hl,hm)aO[#aO+1]={av[bW],hn(av[bW]),hm,hs,hl,dC}end end end;if not bL then VertTakeOff,VertTakeOffEngine=false,false end end;local function ht()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(as or not as and au<10000)then for _,bX in pairs(door)do bX.toggle()end end;if switch then for _,bX in pairs(switch)do bX.toggle()end end;if forcefield and(as or not as==0 and au<10000)then for _,bX in pairs(forcefield)do bX.toggle()end end;if antigrav then bM=antigrav.getState()==1;if bM and not ExternalAGG then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;local hu=cZ()if hu~=-1 or not as and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then t:setTargetGroundAltitude(bf)if bf==0 and not S then GearExtended=true;BrakeIsOn=true end else bf=a:getTargetGroundAltitude()if GearExtended then t:setTargetGroundAltitude(LandingGearGroundHeight)else t:setTargetGroundAltitude(TargetHoverHeight)end end;if as and hu~=-1 then b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=as end;local function hv(hw,hx,hy,hz,de,e7,hA,hB,hC)local hD={enableName=hw,disableName=hx,width=hy,height=hz,x=de,y=e7,toggleVar=hA,toggleFunction=hB,drawCondition=hC,hovered=false}table.insert(aG,hD)return hD end;local function hE()local function hF()if dbHud_1 then local position=bK;local dv=planet.name..". "..#SavedLocations;if radar_1 then local gF,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gF~=nil and gF~=""then dv=dv.." "..radar_1.getConstructName(gF)end end;local cB={}cB={position=position,name=dv,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cB;table.insert(b1[0],cB)bV()a2="Location saved as "..dv else a2="Databank must be installed to save locations"end end;local function hG()TurnBurn=not TurnBurn end;local function hH(hI)if hI==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hJ()hH(1)end;local function hK()local cA=-1;cA=c8(b1[0])if cA>-1 then table.remove(b1[0],cA)end;cA=-1;cA=c8(SavedLocations)if cA~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cA)end;ch()bV()end;local function hL()local dv=AutopilotTargetName;if dv==nil then local f5,c7=c3((bK-CustomTarget.position):len())dv=CustomTarget.name.." "..f5 ..c7 end;if dv==nil then dv="None"end;return"Engage Autopilot: "..dv end;local function hM()local dv=AutopilotTargetName;if dv==nil then dv=CustomTarget.name end;if dv==nil then dv="None"end;return"Disable Autopilot: "..dv end;local hN=50;local hO=260;local hP=hv("Enable Brake Toggle","Disable Brake Toggle",hO,hN,aH/2-hO/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hv("Align Prograde","Disable Prograde",hO,hN,aH/2-hO/2-50-hP.width,aI/2-hN+380,function()return ProgradeIsOn end,hJ)hv("Align Retrograde","Disable Retrograde",hO,hN,aH/2-hO/2+hP.width+50,aI/2-hN+380,function()return RetrogradeIsOn end,hH,function()return at==0 end)local hQ=hv(hL,hM,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,cv)hv("Save Position","Save Position",200,hQ.height,hQ.x+hQ.width+30,hQ.y,function()return false end,hF,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hv("Update Position","Update Position",200,hQ.height,hQ.x+hQ.width+30,hQ.y,function()return false end,cy,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hv("Clear Position","Clear Position",200,hQ.height,hQ.x-200-30,hQ.y,function()return true end,hK,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hN=60;hO=300;local de=10;local e7=aI/2-500;hv("Show Help","Hide Help",hO,hN,de,e7,function()return showHelp end,function()showHelp=not showHelp end)local e7=aI/2-300;hv("Enable Turn and Burn","Disable Turn and Burn",hO,hN,de,e7,function()return TurnBurn end,hG)hv("Horizontal Takeoff Mode","Vertical Takeoff Mode",hO,hN,de+hO+20,e7,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bL end)e7=e7+hN+20;hv("Show Orbit Display","Hide Orbit Display",hO,hN,de,e7,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hv("Engage Orbiting","Cancel Orbiting",hO,hN,de+hO+20,e7,function()return IntoOrbit end,cb,function()return at==0 and unit.getClosestPlanetInfluence()>0 end)e7=e7+hN+20;hv("Glide Re-Entry","Cancel Glide Re-Entry",hO,hN,de,e7,function()return Reentry end,function()am=true;hJ()end,function()return planet.hasAtmosphere and not as end)hv("Parachute Re-Entry","Cancel Parachute Re-Entry",hO,hN,de+hO+20,e7,function()return Reentry end,cQ,function()return planet.hasAtmosphere and not as end)e7=e7+hN+20;hv("Engage Follow Mode","Disable Follow Mode",hO,hN,de,e7,function()return a0 end,cd,function()return n()==1 end)hv("Enable Repair Arrows","Disable Repair Arrows",hO,hN,de+hO+20,e7,function()return aR end,function()aR=not aR;if aR then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return n()==1 end)e7=e7+hN+20;if not ExternalAGG then hv("Enable AGG","Disable AGG",hO,hN,de,e7,function()return bM end,cT,function()return antigrav~=nil end)end;e7=e7+hN+20;hv(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,hO*2,hN,de,e7,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hR()local hS=nil;local hT=nil;local hU=nil;local hV=nil;b1=g0()for bW,bX in pairs(b1[0])do if hS==nil or bX.center.x<hS then hS=bX.center.x end;if hT==nil or bX.center.x>hT then hT=bX.center.x end;if hU==nil or bX.center.y<hU then hU=bX.center.y end;if hV==nil or bX.center.y>hV then hV=bX.center.y end end;b2=""local hW=1.1*(hT-hS)/1920;local hX=1.4*(hV-hU)/1080;for bW,bX in pairs(b1[0])do local de=960+bX.center.x/hW;local e7=540+bX.center.y/hX;b2=b2 ..'<circle cx="'..de..'" cy="'..e7 ..'" r="'..bX.radius/hW*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bX.name,"Moon")and not p(bX.name,"Sanctuary")and not p(bX.name,"Space")then b2=b2 .."<text x='"..de.."' y='"..e7+bX.radius/hW*30+20 .."' font-size='28' fill="..az.." text-anchor='middle' font-family='Montserrat'>"..bX.name.."</text>"end end;local fI=bK;local de=960+fI.x/hW;local e7=540+fI.y/hX;b2=b2 ..'<circle cx="'..de..'" cy="'..e7 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='"..de.."' y='"..e7-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b2=b2 ..[[</svg>]]b3=hW;b4=hX;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b2)local fI=bK;local de=960+fI.x/hW;local e7=540+fI.y/hX;b2='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b2=b2 .."<text x='80' y='105' font-size='18' fill="..az.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b5=screen_2.addContent((de-80)/19.20,(e7-80)/10.80,b2)end end;local function hY()for bW,bX in pairs(SavedLocations)do table.insert(b1[0],bX)end;bV()end;local function hZ()local b8={}local h_=30000000/3600;local i0=h_*h_;local i1=100;local function i2(bX)return 1/math.sqrt(1-bX*bX/i0)end;function b8.computeAccelerationTime(i3,i4,i5)local i6=h_*math.asin(i3/h_)return(h_*math.asin(i5/h_)-i6)/i4 end;function b8.computeDistanceAndTime(i3,i5,i7,i8,i9,ia)i9=i9 or 0;ia=ia or 0;local ib=i3<=i5;local ic=i8*(ib and 1 or-1)/i7;local id=-ia/i7;local ie=ic+id;if ib and ie<=0 or not ib and ie>=0 then return-1,-1 end;local ig,ih=0,0;if ic~=0 and i9>0 then local i6=math.asin(i3/h_)local ii=math.pi*(ic/2+id)local ij=ic*i9;local ik=h_*math.pi;local bX=function(g6)local il=(ii*g6-ij*math.sin(math.pi*g6/2/i9)+ik*i6)/ik;local im=math.tan(il)return h_*im/math.sqrt(im*im+1)end;local io=ib and function(g8)return g8>=i5 end or function(g8)return g8<=i5 end;ih=2*i9;if io(bX(ih))then local ip=0;while d(ih-ip)>0.5 do local g6=(ih+ip)/2;if io(bX(g6))then ih=g6 else ip=g6 end end end;local iq=i3;local ir=ih/i1;for is=1,i1 do local e4=bX(is*ir)ig=ig+(e4+iq)*ir/2;iq=e4 end;if ih<2*i9 then return ig,ih end;i3=iq end;local i6=h_*math.asin(i3/h_)local bD=(h_*math.asin(i5/h_)-i6)/ie;local it=i0*math.cos(i6/h_)/ie;local ai=it-i0*math.cos((ie*bD+i6)/h_)/ie;return ai+ig,bD+ih end;function b8.computeTravelTime(i3,i4,ai)if ai==0 then return 0 end;if i4>0 then local i6=h_*math.asin(i3/h_)local it=i0*math.cos(i6/h_)/i4;return(h_*math.acos(i4*(it-ai)/i0)-i6)/i4 end;if i3==0 then return-1 end;assert(i3>0,'Acceleration and initial speed are both zero.')return ai/i3 end;function b8.lorentz(bX)return i2(bX)end;return b8 end;local function iu()local vec3=require('cpml.vec3')local g1=g1()local function g7(g8)return type(g8)=='string'end;local function g5(g6)return type(g6)=='table'end;local function c0(c1,c2)if c1==0 then return d(c2)<1e-09 end;if c2==0 then return d(c1)<1e-09 end;return d(c1-c2)<math.max(d(c1),d(c2))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cq)assert(self.body)local ai=cq+self.body.radius;if not c0(ai,0)then local orbit=math.sqrt(self.body.GM/ai)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gx,ew)assert(self.body)assert(g5(gx)or g7(gx))assert(g5(ew))local fI=(g7(gx)or g1.isMapPosition(gx))and self.body:convertToWorldCoordinates(gx)or vec3(gx)local bX=vec3(ew)local iv=fI-self.body.center;local h1=bX:len2()local iw=iv:len()local ix=self.body.GM;local iy=((h1-ix/iw)*iv-iv:dot(bX)*bX)/ix;local c1=ix/(2*ix/iw-h1)local iz=iy:len()local h2=iy:normalize()local iA=c1*(1-iz)local iB=c1*(1+iz)local iC=iA*h2+self.body.center;local iD=iz<=1 and-iB*h2+self.body.center or nil;local iE=math.sqrt(c1*ix*(1-iz*iz))local iF=iD and 2*math.pi*math.sqrt(c1^3/ix)local iG=math.acos(iy:dot(iv)/(iz*iw))if iv:dot(bX)<0 then iG=-(iG-2*math.pi)end;local iH=math.acos((math.cos(iG)+iz)/(1+iz*math.cos(iG)))local iI=iH;if iI<0 then iI=iI+2*math.pi end;local iJ=iI-iz*math.sin(iI)local iK=0;local iL=0;local iM=0;if iF~=nil then iK=iJ/(2*math.pi/iF)iL=iF-iK;iM=iL+iF/2;if iG-math.pi>0 then iL=iK;iM=iL+iF/2 end;if iM>iF then iM=iM-iF end end;return{periapsis={position=iC,speed=iE/iA,circularOrbitSpeed=math.sqrt(ix/iA),altitude=iA-self.body.radius},apoapsis=iD and{position=iD,speed=iE/iB,circularOrbitSpeed=math.sqrt(ix/iB),altitude=iB-self.body.radius},currentVelocity=bX,currentPosition=fI,eccentricity=iz,period=iF,eccentricAnomaly=iH,meanAnomaly=iJ,timeToPeriapsis=iL,timeToApoapsis=iM}end;local function iN(iO)local h9=g1.BodyParameters(iO.planetarySystemId,iO.bodyId,iO.radius,iO.center,iO.GM)return setmetatable({body=h9},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iN(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()t:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hf()coroutine.yield()hj()coroutine.yield()ht()hE()coroutine.yield()hR()b6=g1()b7=b6(g0())b8=hZ()ba=iu()bb=d4()hY()bV()ce()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(at>0 or at==0 and au<10000)then for _,bX in pairs(door)do bX.toggle()end end;if switch then for _,bX in pairs(switch)do bX.toggle()end end;if forcefield and(at>0 or at==0 and au<10000)then for _,bX in pairs(forcefield)do bX.toggle()end end;d0()if button then button.activate()end;cj(planet,bK)end;function script.onTick(iP)local function iQ(e4)if not as then return b8.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b8.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function iR(e4)return b8.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;if iP=="tenthSecond"then local function iS()local iT=system.createData;local iU=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=iU(panelInterplanetary,"value")interplanetaryHeaderText=iT('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=iU(panelInterplanetary,"value")widgetDistanceText=iT('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=iU(panelInterplanetary,"value")widgetTravelTimeText=iT('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=iU(panelInterplanetary,"value")widgetMaxMassText=iT('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=iU(panelInterplanetary,"value")widgetTargetOrbitText=iT('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=iU(panelInterplanetary,"value")widgetCurBrakeDistanceText=iT('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=iU(panelInterplanetary,"value")widgetCurBrakeTimeText=iT('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=iU(panelInterplanetary,"value")widgetMaxBrakeDistanceText=iT('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=iU(panelInterplanetary,"value")widgetMaxBrakeTimeText=iT('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=iU(panelInterplanetary,"value")widgetTrajectoryAltitudeText=iT('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not as then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iV()u(panelInterplanetary)panelInterplanetary=nil end;local function iW()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(aa.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local e4=bI;local iX=unit.getThrottle()/100;if AtmoSpeedAssist then iX=I end;local iY,iZ=b8.computeDistanceAndTime(bI,MaxGameVelocity,m(),a:maxForceForward()*iX,warmup,0)local a6,a7;if not TurnBurn then a6,a7=iQ(MaxGameVelocity)else a6,a7=iR(MaxGameVelocity)end;local _,i_;if not TurnBurn and e4>0 then _,i_=iQ(e4)else _,i_=iR(e4)end;local j0=0;local j1=0;if AutopilotCruising or not Autopilot and e4>5 then j1=b8.computeTravelTime(e4,0,AutopilotDistance)elseif a6+iY<AutopilotDistance then j0=AutopilotDistance-(a6+iY)j1=b8.computeTravelTime(8333.0556,0,j0)else local j2=(AutopilotDistance-a6)/iY;iY=AutopilotDistance-a6;iZ=iZ*j2 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return j1 elseif AutopilotBraking then return i_ elseif AutopilotCruising then return j1+i_ else return iZ+a7+j1 end end;local function j3()local j4=LastMaxBrakeInAtmo/aa:getGravity(aa.center+vec3(0,0,1)*aa.radius):len()return j4 end;if at>0 and not WasInAtmo then if not bO and AtmoSpeedAssist and(AltitudeHold or Reentry)then bR(1)M=false end end;if bN~=nil then if t:getTargetSpeed(axisCommandId.longitudinal)~=bN then bU(bN,TRUE)else bN=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iS()end;if AutopilotTargetName~=nil then local j5=CustomTarget~=nil;planetMaxMass=j3()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=iW()if j5 and not Autopilot then ai=(bK-CustomTarget.position):len()else ai=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a6,a7=iQ(bI)a8,a9=iQ(MaxGameVelocity)else a6,a7=iR(bI)a8,a9=iR(MaxGameVelocity)end;local f5,c7=c3(ai)v(widgetDistanceText,'{"label": "distance", "value": "'..f5 ..'", "unit":"'..c7 ..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cU(travelTime)..'", "unit":""}')f5,c7=c3(a6)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f5 ..'", "unit":"'..c7 ..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cU(a7)..'", "unit":""}')f5,c7=c3(a8)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f5 ..'", "unit":"'..c7 ..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cU(a9)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..f("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f5,c7=c3(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..f("%.2f",f5)..'", "unit":"'..c7 ..'"}')if at>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if k()==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iV()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iP=="oneSecond"then local function j6(fN,j7)if fN==nil then fN=core.g()end;fN=z(fN,5)if j7~=nil and j7 or(aM==nil or aM~=fN)then local ew=core.getVelocity()local e4=vec3(ew):len()local j8=g(unit.getData()).maxBrake;if j8~=nil and j8>0 and as then j8=j8/s(e4/100,0.1,1)j8=j8/at;if at>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+j8)/2 else LastMaxBrakeInAtmo=j8 end end end;if j8~=nil and j8>0 then LastMaxBrake=j8 end;aM=fN end end;local function j9(dd)local ja=0;aE=""local jb=aQ;local jc=0;local jd=0;local je=0;local dE=0;local dF=""local jf=core.getElementHitPointsById;for bW in pairs(av)do local hq=0;local jg=0;jg=j(av[bW])hq=jf(av[bW])jc=jc+hq;if hq<jg then if hq==0 then je=je+1 else jd=jd+1 end;if aR and#aB==0 then position=vec3(core.getElementPositionById(av[bW]))local de=position.x-a_;local e7=position.y-a_;local jh=position.z-a_;table.insert(aB,core.spawnArrowSticker(de,e7,jh+1,"down"))table.insert(aB,core.spawnArrowSticker(de,e7,jh+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(de+1,e7,jh,"north"))table.insert(aB,core.spawnArrowSticker(de+1,e7,jh,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(de-1,e7,jh,"south"))table.insert(aB,core.spawnArrowSticker(de-1,e7,jh,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(de,e7-1,jh,"east"))table.insert(aB,core.spawnArrowSticker(de,e7-1,jh,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(de,e7+1,jh,"west"))table.insert(aB,core.spawnArrowSticker(de,e7+1,jh,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,av[bW])end elseif aR and#aB>0 and aB[11]==av[bW]then for dx in pairs(aB)do core.deleteSticker(aB[dx])end;aB={}end end;ja=e(jc/jb*100)if ja<100 then dd[#dd+1]=[[<g class="pbright txt">]]dE=e(ja*2.55)dF=f("rgb(%d,%d,%d)",255-dE,dE,0)if ja<100 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dF,ja)if je>0 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dF,je,jd)elseif jd>0 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dF,jd)end end;dd[#dd+1]=[[<\g>]]end end;local function ji()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jj()local dC=r()local eU=bI;local jk=dC-aw;if eU>1.38889 then eU=eU/1000;local jl=eU*(dC-aw)TotalDistanceTravelled=TotalDistanceTravelled+jl;ab=ab+jl end;ac=ac+jk;TotalFlightTime=TotalFlightTime+jk;aw=dC end;aq=false;j6(nil,true)jj()bb.UpdateRadar()ji()local dd={}dd=bb.DrawOdometer(dd,ab,TotalDistanceTravelled,ac)if ShouldCheckDamage then j9(dd)end;ak=table.concat(dd,"")collectgarbage("collect")elseif iP=="fiveSecond"then ar=dbHud_1.getStringValue("SPBAutopilotTargetName")if ar~=nil and ar~=""and ar~="SatNavNotChanged"then local c6=g(dbHud_1.getStringValue("SavedLocations"))if c6~=nil then _G["SavedLocations"]=c6;local cA=-1;local cB;for bW,bX in pairs(SavedLocations)do if bX.name and bX.name=="SatNav Location"then cA=bW;break end end;if cA~=-1 then cB=SavedLocations[cA]cA=-1;for bW,bX in pairs(b1[0])do if bX.name and bX.name=="SatNav Location"then cA=bW;break end end;if cA>-1 then b1[0][cA]=cB end;bV()a2=cB.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ar then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ce()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iP=="msgTick"then local dd={}bb.DisplayMessage(dd,"empty")a2="empty"unit.stopTimer("msgTick")ah=3 elseif iP=="animateTick"then bd=true;bc=false;af=0;ag=0;unit.stopTimer("animateTick")elseif iP=="hudTick"then local function jm(dd)local jn=e(s(ai/(aH/4)*255,0,255))dd[#dd+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",af,ag,e(D+0.5)+jn,e(F+0.5)-jn,e(E+0.5)-jn)end;local function jo()for _,bX in pairs(aG)do if bX.hovered then if not bX.drawCondition or bX.drawCondition()then bX.toggleFunction()end;bX.hovered=false end end end;local function jp()local function jq(jr,js,de,e7,hy,hz)if jr>de and jr<de+hy and js>e7 and js<e7+hz then return true else return false end end;local de=af+aH/2;local e7=ag+aI/2;for _,bX in pairs(aG)do bX.hovered=jq(de,e7,bX.x,bX.y,bX.width,bX.height)end end;local function jt(dd)local function ju(dd,jv,hover,de,e7,il,jw,jx,jy,jz,jA)if type(jz)=="function"then jz=jz()end;if type(jA)=="function"then jA=jA()end;dd[#dd+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",de,e7,il,jw)if jv then dd[#dd+1]=f("%s'",jx)else dd[#dd+1]=jy end;if hover then dd[#dd+1]=" style='stroke:white; stroke-width:2'"else dd[#dd+1]=" style='stroke:black; stroke-width:1'"end;dd[#dd+1]="></rect>"dd[#dd+1]=f("<text x='%f' y='%f' font-size='24' fill='",de+il/2,e7+jw/2+5)if jv then dd[#dd+1]="black"else dd[#dd+1]="white"end;dd[#dd+1]="' text-anchor='middle' font-family='Montserrat'>"if jv then dd[#dd+1]=f("%s</text>",jz)else dd[#dd+1]=f("%s</text>",jA)end end;local jB="rgb(50,50,50)'"local jC="rgb(210,200,200)"local jD=ju;for _,bX in pairs(aG)do local hx=bX.disableName;local hw=bX.enableName;if type(hx)=="function"then hx=hx()end;if type(hw)=="function"then hw=hw()end;if not bX.drawCondition or bX.drawCondition()then jD(dd,bX.toggleVar(),bX.hovered,bX.x,bX.y,bX.width,bX.height,jC,jB,hx,hw)end end end;local dd={}bb.HUDPrologue(dd)if showHud then bb.UpdateHud(dd)else bb.DisplayOrbitScreen(dd)bb.DrawWarnings(dd)end;bb.HUDEpilogue(dd)dd[#dd+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aH,aI)if a2~="empty"then bb.DisplayMessage(dd,a2)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bb.DrawDeadZone(dd)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then jp()jt(dd)if screen_1.getMouseState()==1 then jo()end;dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)elseif y()==0 then if n()==1 and a1 then jp()jt(dd)if not bc and not bd then local jE=table.concat(dd,"")dd={}dd[#dd+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dd[#dd+1]=b2;dd[#dd+1]=jE;dd[#dd+1]="</body>"bc=true;dd[#dd+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dd,"")system.setScreen(content)elseif bd then local jE=table.concat(dd,"")dd={}dd[#dd+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aH,aI)dd[#dd+1]=b2;dd[#dd+1]=jE;dd[#dd+1]="</body>"end;if not bc then dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end else jo()end else if not a1 and n()==0 then jo()if ai>DeadZone then if DisplayDeadZone then jm(dd)end end else jp()jt(dd)end;dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,af,ag)end;dd[#dd+1]=[[</svg></body>]]content=table.concat(dd,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iP=="apTick"then local function jF(jG)local gt=500000;local jH,jI,jJ=math.huge;local jK=false;local jL=vec3({13771471,7435803,-128971})local jM=18000000;jH=vec3(jG):dist(jL)if jH<jM then return true,d(jH-jM),"Safe Zone",0 end;jI=vec3(jG):dist(vec3(planet.center))if jI<gt then jK=true end;if d(jI-gt)<d(jH-jM)then return jK,d(jI-gt),planet.name,planet.bodyId else return jK,d(jH-jM),"Safe Zone",0 end end;local function jN()local jO=-1;local jP=-1;if vBooster then jO=vBooster.distance()end;if hover then jP=hover.distance()end;if jO~=-1 and jP~=-1 then if jO<jP then return jO else return jP end elseif jO~=-1 then return jO elseif jP~=-1 then return jP else return-1 end end;local function jQ(jR,jS,jT)jS=jS:project_on_plane(jR)jT=jT:project_on_plane(jR)return o(jS:cross(jT):dot(jR),jS:dot(jT))end;as=k()>0;at=k()au=core.getAltitude()ap=jN()bD=r()bj=bD;if antigrav then bM=antigrav.getState()==1 end;local jU=1;local jV=1;local jW=bD-bj;local jX=-math.deg(jQ(bE,bH,bF))local jY=math.deg(jQ(bG,bH,bF))bi=as and jX<-YawStallAngle or jX>YawStallAngle or jY<-PitchStallAngle or jY>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not a1 then bh=-bh end;V=0;Z=0;U=0;sys=b7[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=ba(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bH)if au==0 then au=(bK-planet.center):len()-planet.radius end;local fN=planet:getGravity(core.getConstructWorldPos()):len()*m()bk=0;b9=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not as then G,H,_,_=jF(bK)else G=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then af=screen_1.getMouseX()*aH;ag=screen_1.getMouseY()*aI elseif y()==0 then if n()==1 and a1 then if not bc then af=af+bg;ag=ag+bh end else af=0;ag=0 end else af=af+bg;ag=ag+bh;ai=math.sqrt(af*af+ag*ag)if not a1 and n()==0 then if userControlScheme=="virtual joystick"then if af>0 and af>DeadZone then V=V-(af-DeadZone)*MouseXSensitivity elseif af<0 and af<DeadZone*-1 then V=V-(af+DeadZone)*MouseXSensitivity else V=0 end;if ag>0 and ag>DeadZone then U=U-(ag-DeadZone)*MouseYSensitivity elseif ag<0 and ag<DeadZone*-1 then U=U-(ag+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then af=0;ag=0;U=(-utils.smoothstep(bh,-100,100)+0.5)*2*jU;V=(-utils.smoothstep(bg,-100,100)+0.5)*2*jV else af=0;ag=0 end end end;local jZ=bI>8334;if bI>SpaceSpeedLimit/3.6 and not as and not Autopilot and not jZ then a2="Space Speed Engine Shutoff reached"bR(0)end;if not jZ and LastIsWarping then if not BrakeIsOn then cD()end;if Autopilot then cv()end end;LastIsWarping=jZ;if as and at>0.09 then if bI>bn/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bI<bn/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local j_=false;if CustomTarget~=nil then j_=cE(CustomTarget.position-bK,0.01)else j_=cE(vec3(bH),0.01)end;be=true;if j_ and(d(bQ)<2 or d(bP)>85)and bI>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;cQ()elseif as and AtmoSpeedAssist then bR(1)else bU(e(bn))end elseif bI>Q then cE(vec3(bH),0.01)end end;if RetrogradeIsOn then if as then RetrogradeIsOn=false elseif bI>Q then cE(-vec3(bH))end end;if not ProgradeIsOn and am and not IntoOrbit then if at==0 then R=true;cQ()am=false;ao=true else am=false;cv()end end;local ci=bJ*-1;local dI=bH.x*ci.x+bH.y*ci.y+bH.z*ci.z;if ao and CustomTarget~=nil and(au<HoldAltitude+200 and au>HoldAltitude-200)and bI*3.6>bn-100 and d(dI)<20 and at>=0.1 and(CustomTarget.position-bK):len()>2000+au then cv()ao=false end;if VertTakeOff then be=true;local k0=HoldAltitude;if dI<-30 then a2="Unable to achieve lift. Safety Landing."ae=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bM or HoldAltitude<planet.spaceEngineMinAltitude then if bM then k0=antigrav.getBaseAltitude()end;if au<k0-100 then bo=0;ae=15;BrakeIsOn=false elseif dI>0 then BrakeIsOn=true;ae=0 elseif dI<-30 then BrakeIsOn=true;ae=15 elseif au>=k0 then if bM then if Autopilot or VectorToTarget then ca()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"ca()end;ae=0 end else if at>0.08 then bo=0;BrakeIsOn=false;ae=20 elseif at<0.08 and at>0 then BrakeIsOn=false;if bA then bo=0;ae=20 else ae=0;bo=36;bU(3500)end else be=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;bw=k0;bv=true;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k1=s(bo-bP,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k1)local k2=s(vTpitchPID:get(),-1,1)U=k2 end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=aa else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius+bx.noAtmosphericDensityAltitude+1000)else bw=math.floor(bx.radius+bx.surfaceMaxAltitude+1000)end;bv=true end;local cN;local k3=false;local k4,k5=c3(bw)local k6=k4 ..k5;if bu.VectorToTarget then cN=CustomTarget.position-bK end;local k7,k8=ba(bx):escapeAndOrbitalSpeed((bK-bx.center):len()-bx.radius)local k9=bQ;if not bs then bR(0)br=0;bp="Aligning to orbital path - OrbitHeight: "..k6;local ka=false;local kb=false;if bu.VectorToTarget then cE(cN:normalize():project_on_plane(bJ))k3=bF:dot(cN:project_on_plane(bE):normalize())>0.95 else cE(bH)k3=jX<0.5;if bI<150 then k3=true end end;U=0;bq=0;if bP<=bq+1 and bP>=bq-1 then ka=true else ka=false end;if k9<=br+1 and k9>=br-1 then kb=true else kb=false end;if ka and kb and k3 then bq=nil;br=nil;bs=true end else if bu.VectorToTarget then cE(cN:normalize():project_on_plane(bJ))elseif bI>150 then cE(bH)end;U=0;if bu.VectorToTarget then local a6,_=b8.computeDistanceAndTime(bI,bn/3.6,m(),0,0,LastMaxBrake)if by and cN:len()>15000+a6+au then bp="Orbiting to Target"elseif by or cN:len()<15000+a6+au then a2="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;R=true;ao=true;bu.VectorToTarget,bu.AutopilotAlign=false,false;cb()cQ()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and au>bw*0.9 and au<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;bR(0)by=true;bq=0;if not bu.VectorToTarget then a2="Orbit complete"cb()end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..k6;bt=true;bU(k8*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kc=dI;local kd=au-bw;local ke=d(kd)if dI<10 and d(bP)<10 and ke<100 then kc=dI*2 end;if kc<10 and d(bP)<10 and ke<100 then kc=kc*2 end;if kc<5 and d(bP)<5 and ke<100 then kc=kc*4 end;VSpdPID:inject(kc)bq=s(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kd)bq=s(bq-s(OrbitAltPID:get(),-15,15),-90,90)end end else local kf=2.75;local kg=d(q(k7*kf))local kh=kg%50;if kh>0 then kg=kg-kh+50 end;BrakeIsOn=false;if au<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..k6;bq=utils.map(dI,200,0,-15,80)elseif au>=bw*0.8 and au<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..k6;kg=kg*0.75;bq=utils.map(dI,100,-100,-15,65)elseif au>=bw*1.15 and au<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..k6;kg=kg*0.75;if dI<0 or bt then bq=utils.map(au,bw*1.5,bw*1.01,-30,0)else bq=utils.map(au,bw*0.99,bw*1.5,0,30)end elseif au>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..k6;bq=-85;local ki=utils.map(dI,-150,-400,1,0.55)kg=kg*ki end;bU(e(kg))end end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kj=bq-bP;OrbitPitchPID:inject(kj)local kk=s(OrbitPitchPID:get(),-0.5,0.5)U=kk end end;if Autopilot and at==0 and not am then local kl,km=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kn=(CustomTarget.position-aa.center):normalize()local ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()local kp=aa.center+ko*(aa.radius+AutopilotTargetOrbit)local kq=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))if(bK-kp):len()<(bK-kq):len()then kl=kp;AutopilotTargetCoords=kl else kl=CustomTarget.position+(CustomTarget.position-aa.center):normalize()*(AutopilotTargetOrbit-aa:getAltitude(CustomTarget.position))AutopilotTargetCoords=kl end;cj(aa,AutopilotTargetCoords)km=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;km=true;TargetSet=true;AutopilotRealigned=true;kl=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kn=(bK+bH*100000-aa.center):normalize()local ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()if ko:len()<1 then kn=(bK+bF*100000-aa.center):normalize()ko=kn:project_on_plane((aa.center-bK):normalize()):normalize()end;kl=aa.center+ko*(aa.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kl;TargetSet=true;km=true;AutopilotRealigned=true;cj(aa,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kl)-bK):len()local f6,f7,f8=b7:getPlanetarySystem(0):castIntersections(bK,bH:normalize(),function(f9)if f9.noAtmosphericDensityAltitude>0 then return f9.radius+f9.noAtmosphericDensityAltitude else return f9.radius+f9.surfaceMaxAltitude*1.5 end end)local fa=f7;if f8~=nil and f7~=nil then fa=math.min(f8,f7)end;if fa~=nil and fa<AutopilotDistance and f6.name==aa.name then AutopilotDistance=fa end;local j_=true;local kr=(aa.center-(bK+vec3(bH):normalize()*AutopilotDistance)):len()-aa.radius;local f5,c7=c3(kr)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f5 ..'", "unit":"'..c7 ..'"}')local a6,a7;if not TurnBurn then a6,a7=iQ(bI)else a6,a7=iR(bI)end;if bI>300 and AutopilotAccelerating then local cN=vec3(kl)-bK;local ks=s(math.deg(jQ(bE,bH:normalize(),cN:normalize()))*bI/500,-90,90)local kt=s(math.deg(jQ(bG,bH:normalize(),cN:normalize()))*bI/500,-90,90)if d(ks)<20 and d(kt)<20 then ks=ks*2;kt=kt*2 end;if d(ks)<2 and d(kt)<2 then ks=ks*2;kt=kt*2 end;local jX=-math.deg(jQ(bE,bF,bH:normalize()))local jY=-math.deg(jQ(bG,bF,bH:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kt-jY)local ku=s(apPitchPID:get(),-1,1)U=U+ku;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ks-jX)local kv=s(apYawPID:get(),-1,1)V=V+kv;km=true;if d(ks)>2 or d(kt)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kr<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=ba(aa):escapeAndOrbitalSpeed(kr)end end;if not AutopilotCruising and not AutopilotBraking and not km then j_=cE((kl-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then j_=cE(-vec3(bH):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bR(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local iX=unit.getThrottle()if AtmoSpeedAssist then iX=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or iX==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bR(0)end;if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bR(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bR(1,true)end;local _,k8=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local cN;if CustomTarget~=nil then cN=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bI<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bI<=k8 and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bR(0)P=false;ProgradeIsOn=true;am=true;cj(aa,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,k8=ba(aa):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)if bI<=k8 then if CustomTarget~=nil then if bH:normalize():dot(cN:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;cj(aa,CustomTarget.position)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bR(0)P=false;ProgradeIsOn=true;am=true;BrakeIsOn=false;cj(aa,CustomTarget.position)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bR(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;am=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a6 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local iX=unit.getThrottle()if AtmoSpeedAssist then iX=I end;if iX>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if j_ then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(aa.center)+(AutopilotTargetOrbit+aa.radius)*bG;AutopilotShipUp=bE;AutopilotShipRight=bG end;AutopilotRealigned=true elseif j_ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bR(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and at>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bR(0)P=false;ProgradeIsOn=true;am=true;cj(aa,CustomTarget.position)end;if a0 then be=true;local kt=0;local fI=bK+vec3(unit.getMasterPlayerRelativePosition())local kw=fI-bK;local kx=vec3(kw):project_on(bF):len()local ky=vec3(kw):project_on(bG):len()local ai=math.sqrt(kx*kx+ky*ky)cE(kw:normalize())local kz=40;local kA=ai<kz;local kB=100;local kC=s((ai-kz)/2,10,kB)U=0;local j_=d(V)<0.1;if j_ and bI<kC and not kA then BrakeIsOn=false;kt=-20 else BrakeIsOn=true;kt=0 end;local kD=0;if d(kt-bP)>kD then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kt-bP)local ku=pitchPID:get()U=ku end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cx=unit.getClosestPlanetInfluence()>0;local kE=HoldAltitude-au;local kF=500+bI;local kG=1;if AutoTakeoff then kG=s(bI/100,0.1,1)end;local kt=(utils.smoothstep(kE,-kF,kF)-0.5)*2*MaxPitch*kG;if not Reentry and not am and not VectorToTarget and bF:dot(bH:normalize())<0.99 then kt=(utils.smoothstep(kE,-kF*s(20-19*at*10,1,20),kF*s(20-19*at*10,1,20))-0.5)*2*MaxPitch*s(2-at*10,1,2)*kG end;if not AltitudeHold then kt=0 end;if LockPitch~=nil then if cx and not IntoOrbit then kt=LockPitch else LockPitch=nil end end;be=true;local kH=U;if Reentry then local kI=e(bn)local kJ,kK=b8.computeDistanceAndTime(bI,kI/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kL=au-(planet.noAtmosphericDensityAltitude+5000)if not bO and au>planet.noAtmosphericDensityAltitude+5000 and bI<=kI/3.6 and bI>kI/3.6-10 and d(bH:normalize():dot(bF))>0.9 then bR(0)elseif bO and(kJ>-1 and kL<=kJ or au<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bU(kI,true)if not R then kt=-80;if at>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kt=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and au>planet.noAtmosphericDensityAltitude+5000 then be=true elseif au<=planet.noAtmosphericDensityAltitude+5000 then bU(kI)if not bO and t:getTargetSpeed(axisCommandId.longitudinal)==bn then R=false;Reentry=false;be=true end end end;if bI>Q and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cE(vec3(bH))end;if(VectorToTarget or an)and AutopilotTargetIndex>0 and at>0.01 then local cN;if CustomTarget~=nil then cN=CustomTarget.position-bK else cN=aa.center-bK end;local ks=math.deg(jQ(bJ:normalize(),bH,cN))*2;local kM=math.rad(d(bQ))if bI>minRollVelocity and at>0.01 then local kN=s(90-kt*2,-90,90)bk=s(ks*2,-kN,kN)local kO=ks;ks=s(s(ks,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kM)+4*(bP-kt)*math.sin(math.rad(bQ)),-YawStallAngle*0.80,YawStallAngle*0.80)kt=s(s(kt*math.cos(kM),-PitchStallAngle*0.80,PitchStallAngle*0.80)+d(s(d(kO)*math.sin(kM),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bk=0;ks=s(ks,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kP=jX-ks;if not bi and bI>minRollVelocity and at>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kP)local kv=s(yawPID:get(),-1,1)V=V+kv elseif as and ap>-1 or bI<minRollVelocity then cE(cN)elseif bi and at>0.01 then if(jX<-YawStallAngle or jX>YawStallAngle)and at>0.01 then cE(bH)end;if(jY<-PitchStallAngle or jY>PitchStallAngle)and at>0.01 then kt=s(bP-jY,bP-PitchStallAngle*0.80,bP+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local k0=planet:getAltitude(CustomTarget.position)local kL=math.sqrt(cN:len()^2-(au-k0)^2)local kQ=LastMaxBrakeInAtmo;if kQ then kQ=kQ*s(bI/100,0.1,1)*at else kQ=LastMaxBrake end;if at<0.01 then kQ=LastMaxBrake end;local kR=bH:len()-d(dI)local kS=vec3(core.getWorldAirFrictionAcceleration())local kT=math.sqrt(kS:len()-kS:project_on(ci):len())*m()if bI>100 then a6,a7=b8.computeDistanceAndTime(bI,100,m(),0,0,kQ+kT)local kU,kV=b8.computeDistanceAndTime(100,0,m(),0,0,kQ/2)a6=a6+kU else a6,a7=b8.computeDistanceAndTime(bI,0,m(),0,0,kQ/2)end;StrongBrakes=true;if not an and not Reentry and kL<=a6+bI*jW/2 and(bH:project_on_plane(bJ):normalize():dot(cN:project_on_plane(bJ):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bR(0)if AltitudeHold then cc()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kR<0.1 or kL<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kL)then if not bM then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kL end elseif VectorToTarget and at==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and aa.name==planet.name then local cN=CustomTarget.position-bK;local k0=planet:getAltitude(CustomTarget.position)local kL=math.sqrt(cN:len()^2-(au-k0)^2)local kQ=LastMaxBrakeInAtmo;if kQ then a6,a7=b8.computeDistanceAndTime(bI,0,m(),0,0,kQ/2)StrongBrakes=true;if kL<=a6+bI*jW/2 and bH:project_on_plane(bJ):normalize():dot(cN:project_on_plane(bJ):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;cQ()end end;LastDistanceToTarget=kL end end end;if at==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or IntoOrbit or Reentry)then if not by and not IntoOrbit then bw=HoldAltitude;bv=true;if VectorToTarget then bu.VectorToTarget=true end;cb()VectorToTarget=false;bs=true end end;if bi and at>0.01 and ap==-1 and bI>minRollVelocity and VectorStatus~="Finalizing Approach"then cE(bH)kt=s(bP-jY,bP-PitchStallAngle*0.80,bP+PitchStallAngle*0.80)end;U=kH;local c_=-1;if BrakeLanding then kt=0;local kW=false;local kX=30;if b9~=nil and b9>0 then local kT=0;local fJ=s(at,0.4,2)local kQ=LastMaxBrakeInAtmo*s(bI/100,0.1,1)*fJ;local kY=b9*fJ+kQ+kT-fN;local kZ=kQ/2+kT-fN;local k_=bI-math.sqrt(d(kZ/2)*20/(0.5*m()))*utils.sign(kZ)if k_<0 then k_=0 end;local l0;if bI>100 then local l1,_=b8.computeDistanceAndTime(bI,100,m(),0,0,kQ)local l2,_=b8.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kQ))l0=l1+l2 else l0=b8.computeDistanceAndTime(bI,0,m(),0,0,math.sqrt(kQ))end;if l0<20 then BrakeIsOn=false else local l3=0;if k_>100 then local l4,_=b8.computeDistanceAndTime(k_,100,m(),0,0,kY)local l5,_=b8.computeDistanceAndTime(100,0,m(),0,0,b9*fJ+math.sqrt(kQ)+kT-fN)l3=l4+l5 else l3,_=b8.computeDistanceAndTime(k_,0,m(),0,0,b9*fJ+math.sqrt(kQ)+kT-fN)end;l3=(l3+15+bI*jW)*1.1;local l6=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if l6 then local k0=planet:getAltitude(CustomTarget.position)local l7=au-k0-100;local cN=CustomTarget.position-bK;local l8=math.sqrt(cN:len()^2-(au-k0)^2)if l8>100 then l6=false elseif l7<=l3 or l3==-1 then BrakeIsOn=true;kW=true else BrakeIsOn=false;kW=true end end;if not l6 and CalculateBrakeLandingSpeed then if l3>=kX then BrakeIsOn=true else BrakeIsOn=false end;kW=true end end end;if not bO then bR(0)end;t:setTargetGroundAltitude(500)t:activateGroundEngineAltitudeStabilization(500)c_=ap;if c_>-1 then be=autoRollPreference;if bI<1 or bH:normalize():dot(bJ)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)ae=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bH:normalize():dot(-ci)<0.999 then BrakeIsOn=true elseif dI<-brakeLandingRate and not kW then BrakeIsOn=true elseif not kW then BrakeIsOn=false end end;if AutoTakeoff or an then local f6,f8,f7;if AutopilotTargetCoords~=nil then f6,f8,f7=b7:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(f9)return f9.radius+f9.noAtmosphericDensityAltitude end)end;if bM then if au>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;bR(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(kt)<15 and au/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bO and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif an and bI<Q then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;bR(0)elseif an then bR(0)BrakeIsOn=true end elseif an and at==0 and aa~=nil and(f6==nil or f6.name==aa.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bO then bR(0)end;AutopilotAccelerating=true end end;local l9=ap>-1;local la=bP;if(VectorToTarget or an)and not l9 and bI>minRollVelocity and at>0.01 then local kM=math.rad(d(bQ))la=bP*d(math.cos(kM))+jY*math.sin(kM)end;local lb=s(kt-la,-PitchStallAngle*0.80,PitchStallAngle*0.80)if at<0.01 and VectorToTarget then lb=s(kt-la,-85,MaxPitch)elseif at<0.01 then lb=s(kt-la,-MaxPitch,MaxPitch)end;if d(bQ)<5 or VectorToTarget or BrakeLanding or l9 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lb)local ku=pitchPID:get()U=U+ku end end;if antigrav~=nil and(antigrav and not ExternalAGG and au<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function lc(ld,kC)local le=vec3()local lf=vec3()if ld==axisCommandId.longitudinal then le=vec3(core.getConstructOrientationForward())lf=bF elseif ld==axisCommandId.vertical then le=vec3(core.getConstructOrientationUp())lf=bE elseif ld==axisCommandId.lateral then le=vec3(core.getConstructOrientationRight())lf=bG else return vec3()end;local lg=vec3(core.getWorldGravity())local lh=lg:dot(lf)local li=vec3(core.getWorldAirFrictionAcceleration())local lj=li:dot(lf)local lk=vec3(core.getVelocity())local ll=lk:dot(le)local lm=kC*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lm-ll)local ln=targetSpeedPID2:get()local lo=(ln-lj-lh)*lf;return lo end;local function lp(ld,kC)local le=vec3()local lf=vec3()if ld==axisCommandId.longitudinal then le=vec3(core.getConstructOrientationForward())lf=bF elseif ld==axisCommandId.vertical then le=vec3(core.getConstructOrientationUp())lf=bE elseif ld==axisCommandId.lateral then le=vec3(core.getConstructOrientationRight())lf=bG else return vec3()end;local lg=vec3(core.getWorldGravity())local lh=lg:dot(lf)local li=vec3(core.getWorldAirFrictionAcceleration())local lj=li:dot(lf)local lk=vec3(core.getVelocity())local ll=lk:dot(le)local lm=kC*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lm-ll)local ln=targetSpeedPID:get()local lo=(ln-lj-lh)*lf;return lo end;local function lq(lr,dL,b_)local ls=lr:cross(b_):normalize_inplace()local ex=math.acos(s(ls:dot(-dL),-1,1))*constants.rad2deg;if ls:cross(-dL):dot(b_)<0 then ex=-ex end;return ex end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bM and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bO=t:getAxisCommandType(0)==axisCommandType.byThrottle;if bO and M then bR(0)M=false elseif not bO and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lt=s(T+U+system.getControlDeviceForwardInput(),-1,1)local lu=s(W+Z+system.getControlDeviceYawInput(),-1,1)local lv=s(X+V-system.getControlDeviceLeftRightInput(),-1,1)local lw=Y;bJ=vec3(core.getWorldVertical())if bJ==nil or bJ:len()==0 then bJ=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bE=vec3(core.getConstructWorldOrientationUp())bF=vec3(core.getConstructWorldOrientationForward())bG=vec3(core.getConstructWorldOrientationRight())bH=vec3(core.getWorldVelocity())bI=vec3(bH):len()bQ=getRoll(bJ,bF,bG)local lx=bQ/180*math.pi;local ly=math.cos(lx)local lz=math.sin(lx)bP=lq(bJ,bF,bG*ly+bE*lz)local lA=bH:normalize()local lB=getRoll(bJ,bF,bG)local lC=d(lB)local lD=utils.sign(lB)local lE=vec3(core.getWorldAngularVelocity())local lF=lt*pitchSpeedFactor*bG+lu*rollSpeedFactor*bF+lv*yawSpeedFactor*bE;if bJ:len()>0.01 and(at>0.0 or ProgradeIsOn or Reentry or am or AltitudeHold or IntoOrbit)then if be==true and d(bk-lB)>autoRollRollThreshold and lu==0 and d(bP)<85 then local lG=bk;local lH=autoRollFactor;if at==0 then lH=lH/4;bk=0;lG=0 end;if rollPID==nil then rollPID=pid.new(lH*0.01,0,lH*0.1)end;rollPID:inject(lG-lB)local lI=rollPID:get()lF=lF+lI*bF end end;if bJ:len()>0.01 and at>0.0 then local lJ=20.0;if turnAssist==true and lC>lJ and lt==0 and lv==0 then local lK=turnAssistFactor*0.1;local lL=turnAssistFactor*0.025;local lM=(lC-lJ)/(180-lJ)*180;local lN=0;if lM<90 then lN=lM/90 elseif lM<180 then lN=(180-lM)/90 end;lN=lN*lN;local lO=-lD*lL*(1.0-lN)local lP=lK*lN;lF=lF+lP*bG+lO*bE end end;local lQ=1;local lR=0;local lS=1;if system.getMouseWheel()>0 then if AltIsOn then if at>0 or Reentry then bn=s(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if at>0 or Reentry then bn=s(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I-speedChangeLarge/100,-1,1),2)end end;J=0;local dI=-bJ:dot(bH)if as and AtmoSpeedAssist and bO then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-bH:dot(bF))local lT=throttlePID:get()L=s(lT,-1,1)if L<I and at>0.005 then K=true;t:setThrottleCommand(axisCommandId.longitudinal,s(L,0.01,1))else K=false;t:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-bn/3.6)local lU=s(brakePID:get(),0,1)if at>0 and dI<-80 or at>0.005 then J=lU end;if J>0 then if K and L==0.01 then t:setThrottleCommand(axisCommandId.longitudinal,0)end else L=s(L,0.01,1)end;local lV=''local lW=vec3()local lX=lc(axisCommandId.vertical,ae*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",lX,lR)local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=t:getAxisCommandType(axisCommandId.longitudinal)local l_=t:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)local m0=lp(axisCommandId.lateral,LeftAmount*1000)lV=lV..' , '.."lateral airfoil , lateral ground "lW=lW+m0;if lW:len()>constants.epsilon then a:setEngineForceCommand(lV,lW,lR,'','','',lS)end;a:setEngineForceCommand(lY,l_,lQ)local m1='thrust analog vertical fueled 'local m2='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m1,lX,lQ)else a:setEngineForceCommand(m1,vec3(),lQ)end;if LeftAmount~=0 then a:setEngineForceCommand(m2,m0,lQ)else a:setEngineForceCommand(m2,vec3(),lQ)end;if lw==0 then lw=J end;local m3=-lw*(brakeSpeedFactor*bH+brakeFlatFactor*lA)a:setEngineForceCommand('brake',m3)else if AtmoSpeedAssist then t:setThrottleCommand(axisCommandId.longitudinal,I)end;local kC=unit.getAxisCommandValue(0)if not bO then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bH:len()-kC/3.6)local lU=s(brakePID:get(),0,1)lw=s(lw+lU,0,1)end;local m3=-lw*(brakeSpeedFactor*bH+brakeFlatFactor*lA)a:setEngineForceCommand('brake',m3)local lV=''local lW=vec3()local m4=false;local lY='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lY=lY..ExtraLongitudeTags end;local lZ=t:getAxisCommandType(axisCommandId.longitudinal)if lZ==axisCommandType.byThrottle then local l_=t:composeAxisAccelerationFromThrottle(lY,axisCommandId.longitudinal)a:setEngineForceCommand(lY,l_,lQ)elseif lZ==axisCommandType.byTargetSpeed then local l_=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lV=lV..' , '..lY;lW=lW+l_;if t:getTargetSpeed(axisCommandId.longitudinal)==0 or t:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-t:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m4=true end end;local m2='thrust analog lateral 'if ExtraLateralTags~="none"then m2=m2 ..ExtraLateralTags end;local m5=t:getAxisCommandType(axisCommandId.lateral)if m5==axisCommandType.byThrottle then local m6=t:composeAxisAccelerationFromThrottle(m2,axisCommandId.lateral)a:setEngineForceCommand(m2,m6,lQ)elseif m5==axisCommandType.byTargetSpeed then local m0=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lV=lV..' , '..m2;lW=lW+m0 end;local m1='thrust analog vertical 'if ExtraVerticalTags~="none"then m1=m1 ..ExtraVerticalTags end;local m7=t:getAxisCommandType(axisCommandId.vertical)if m7==axisCommandType.byThrottle then local lX=t:composeAxisAccelerationFromThrottle(m1,axisCommandId.vertical)if ae~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m1,lX,lQ,'airfoil','ground','',lS)else a:setEngineForceCommand(m1,vec3(),lQ)a:setEngineForceCommand('airfoil vertical',lX,lQ,'airfoil','','',lS)a:setEngineForceCommand('ground vertical',lX,lQ,'ground','','',lS)end elseif m7==axisCommandType.byTargetSpeed then if ae<0 then a:setEngineForceCommand('hover',vec3(),lQ)end;local m8=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lV=lV..' , '..m1;lW=lW+m8 end;if lW:len()>constants.epsilon then if Y~=0 or m4 or d(lA:dot(bF))<0.8 then lV=lV..', brake'end;a:setEngineForceCommand(lV,lW,lR,'','','',lS)end end;local m9=torqueFactor*(lF-lE)local ma=vec3(core.getWorldAirFrictionAngularAcceleration())m9=m9-ma;a:setEngineTorqueCommand('torque',m9,lQ,'airfoil','','',lS)a:setBoosterCommand('rocket_engine')if a5 and not VanillaRockets then local e4=vec3(core.getVelocity()):len()local mb=0.15;if not bO then local mc=t:getTargetSpeed(axisCommandId.longitudinal)if e4*3.6>mc*(1-mb)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4*3.6<mc*(1-mb)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local iX=unit.getThrottle()if AtmoSpeedAssist then iX=I*100 end;local kC=iX/100;if k==0 then kC=kC*MaxGameVelocity;if e4>=kC*(1-mb)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4<kC*(1-mb)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kI=e(bn)kC=kC*kI/3.6;if e4>=kC*(1-mb)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4<kC*(1-mb)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c6=coroutine.resume(beginSetup)if c6 then SetupComplete=true end else a:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(md)if md=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bR(0)if(vBooster or hover)and ap==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then a.control.extendLandingGears()end else if S then a.control.retractLandingGears()end;t:setTargetGroundAltitude(TargetHoverHeight)end elseif md=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif md=="forward"then T=T-1 elseif md=="backward"then T=T+1 elseif md=="left"then W=W-1 elseif md=="right"then W=W+1 elseif md=="yawright"then X=X-1 elseif md=="yawleft"then X=X+1 elseif md=="straferight"then t:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif md=="strafeleft"then t:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif md=="up"then ae=ae+1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif md=="down"then ae=ae-1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif md=="groundaltitudeup"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end else t:updateTargetGroundAltitudeFromActionStart(1.0)end elseif md=="groundaltitudedown"then OldButtonMod=a3;OldAntiMod=a4;if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end else t:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif md=="option1"then ch()toggleView=false elseif md=="option2"then ch(1)toggleView=false elseif md=="option3"then local function me()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;me()toggleView=false elseif md=="option4"then cv()toggleView=false elseif md=="option5"then local function mf()if LockPitch==nil then LockPitch=bP;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mf()toggleView=false elseif md=="option6"then cc()toggleView=false elseif md=="option7"then toggleView=false elseif md=="option8"then cd()toggleView=false elseif md=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif md=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif n()==1 and ShiftShowsRemoteButtons then a1=true;bd=false;bc=false end elseif md=="brake"then if BrakeToggleStatus then cD()elseif not BrakeIsOn then cD()else BrakeIsOn=true end elseif md=="lalt"then AltIsOn=true;if n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif md=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a5 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a5=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a5=false end elseif md=="stopengines"then local function mg()if aq then aq=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;am=false;an=false;R=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else aq=true end end;t:resetCommand(axisCommandId.longitudinal)mg()I=0 elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+speedChangeLarge/100,-1,1)else t:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else ch()end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I-speedChangeLarge/100,-1,1)else t:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else ch(1)end elseif md=="antigravity"and not ExternalAGG then if antigrav~=nil then cT()end end end;function script.onActionStop(md)if md=="forward"then T=0 elseif md=="backward"then T=0 elseif md=="left"then W=0 elseif md=="right"then W=0 elseif md=="yawright"then X=0 elseif md=="yawleft"then X=0 elseif md=="straferight"then t:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif md=="strafeleft"then t:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif md=="up"then ae=0;t:updateCommandFromActionStop(axisCommandId.vertical,-1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif md=="down"then ae=0;t:updateCommandFromActionStop(axisCommandId.vertical,1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif md=="groundaltitudeup"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then a4=OldAntiMod end;if AltitudeHold or VertTakeOff or IntoOrbit then a3=OldButtonMod end elseif md=="lshift"then if y()==1 then a1=false;af=0;ag=0;x(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then a1=false;bd=false;bc=false end elseif md=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cD()else BrakeIsOn=false end end elseif md=="lalt"then if n()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(md)if md=="groundaltitudeup"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a4;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a4 end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw+a3 else HoldAltitude=HoldAltitude+a3 end;a3=a3*1.05 else t:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif md=="groundaltitudedown"then if not ExternalAGG and bM then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a4=a4*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bw=bw-a3 else HoldAltitude=HoldAltitude-a3 end;a3=a3*1.05 else t:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif md=="speedup"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+speedChangeSmall/100,-1,1)else t:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif md=="speeddown"then if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I-speedChangeSmall/100,-1,1)else t:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(cR)local function mh()for bW,bX in pairs(b)do dbHud_1.setStringValue(bX,h(nil))end;for bW,bX in pairs(c)do if bX~="SavedLocations"then dbHud_1.setStringValue(bX,h(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ah=5;aJ=false;ad=true end;local function mi(mj,planet,fI)local function mk(fI)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ge='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gr,gs,cr,cs,cq=p(fI,ge)if gr=="0"and gs=="0"then return vec3(tonumber(cr),tonumber(cs),tonumber(cq))end;cs=math.rad(cs)cr=math.rad(cr)local planet=b1[tonumber(gr)][tonumber(gs)]local hc=math.cos(cr)local ml=vec3(hc*math.cos(cs),hc*math.sin(cs),math.sin(cr))return planet.center+(planet.radius+cq)*ml end;if dbHud_1 then local cB={}local position=mk(fI)if planet.name=="Space"then cB={position=position,name=mj,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cB={position=position,name=mj,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cB;table.insert(b1[0],cB)bV()else a2="Databank must be installed to save locations"end end;local i;local mm="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mn,mo=nil,nil;local mp="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cR," ")mn=cR;if i~=nil then mn=string.sub(cR,0,i-1)mo=string.sub(cR,i+1)end;if mn=="/help"or mn=="/commands"then for fT in string.gmatch(mp,"([^\n]+)")do system.print(fT)end;return elseif mn=="/setname"then if mo==nil or mo==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cy(mo)else a2="Select a saved target to rename first"end elseif mn=="/addlocation"then if mo==nil or mo==""or string.find(mo,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mo,"::")local mj=string.sub(mo,1,i-2)local fI=string.sub(mo,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ge='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gr,gs,cr,cs,cq=p(fI,ge)local planet=b1[tonumber(gr)][tonumber(gs)]mi(mj,planet,fI)a2="Added "..mj.." to saved locations,\nplanet "..planet.name.." at "..fI;ah=5 elseif mn=="/agg"then if mo==nil or mo==""then a2="Usage: ah-agg targetheight"return end;mo=tonumber(mo)if mo<1000 then mo=1000 end;AntigravTargetAltitude=mo;a2="AGG Target Height set to "..mo elseif mn=="/G"then if mo==nil or mo==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mo=="dump"then for bW,bX in pairs(b)do if type(_G[bX])=="boolean"then if _G[bX]==true then system.print(bX.." true")else system.print(bX.." false")end elseif _G[bX]==nil then system.print(bX.." nil")else system.print(bX.." ".._G[bX])end end;return end;i=string.find(mo," ")local mq=string.sub(mo,0,i-1)local mr=string.sub(mo,i+1)for bW,bX in pairs(b)do if bX==mq then a2="Variable "..mq.." changed to "..mr;local ms=type(_G[bX])if ms=="number"then mr=tonumber(mr)elseif ms=="boolean"then if string.lower(mr)=="true"then mr=true else mr=false end end;_G[bX]=mr;return end end;a2="No such global variable: "..mq elseif mn=="/copydatabank"then if dbHud_2 then d0(true)else a2="Spare Databank required to copy databank"end elseif mn=="/wipedatabank"then if dbHud_1 then mh()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
