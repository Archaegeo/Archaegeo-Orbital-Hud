name: ArchHud - Archaegeo v1.110 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.110;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;local m=math.atan;local n=string.match;local tostring=tostring;local o=utils.round;local p=system.getTime;local function q(r,s)local t=10^(s or 0)return c(r*t+0.5)/t end;local u=SafeR;local v=SafeB;local w=SafeG;local x=false;local y=0;local z=0;local A=0;local B=false;local C=0;local D=false;local E=q(ResolutionX/2,0)local F=q(ResolutionY/2,0)local G=false;local H=55;local I=false;local J=false;local K=0;local L=0;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=false;local S=false;local T="empty"local U=5;local V=5;local W=false;local X,Y=0;local Z,a0=0;local a1=nil;local a2=0;local a3=0;local a4=false;local a5=0;local a6=0;local a7=0;local a8=3;local a9=0;local aa=""local ab=""local ac=0;local ad=false;local ae=false;local af=false;local ag=-1;local ah=false;local ai=""local aj=h()>0;local ak=h()local al=core.getAltitude()local am=core.getElementIdList()local an=p()local ao=nil;local ap=false;local aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]local ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local as={}local at=0;local au=0;local av=""local aw=true;local ax={}local ay=ResolutionX;local az=ResolutionY;local aA=false;local aB=false;local aC=0;local aD=nil;local aE={}local aF={}local aG={}local aH=0;local aI=false;local aJ={}local aK={}local aL=c(1/apTickRate)*2;local aM={}local aN={}local aO={}local aP={}local aQ=false;local aR=16;local aS=0;local aT=nil;local aU=""local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=false;local b4=false;local b5=autoRollPreference;local b6=LandingGearGroundHeight;local b7=system.getMouseDeltaX()local b8=system.getMouseDeltaY()local b9=false;local ba=p()local bb=0;local bc=0;local bd=0;local be=AtmoSpeedLimit;local bf=0;local bg=nil;local bh=0;local bi=0;local bj=false;local bk=false;local bl={VectorToTarget=false}local bm=false;local bn=0;local bo=nil;local bp=false;local bq=false;local br=false;local bs=false;local bt=0;local bu=p()local bv=vec3(core.getConstructWorldOrientationUp())local bw=vec3(core.getConstructWorldOrientationForward())local bx=vec3(core.getConstructWorldOrientationRight())local by=vec3(core.getWorldVelocity())local bz=vec3(by):len()local bA=vec3(core.getWorldVertical())local bB=vec3(core.getConstructWorldPos())local bC=false;local function bD(bE,bF)if bF==nil then bF=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not bF then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bE)z=q(bE*100,0)end;local function bG(bE,bF)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bF then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bE)end;local function bH(bI)if ay==1920 then return bI else return q(ay*bI/1920,0)end end;local function bJ(bI)if az==1080 then return bI else return q(az*bI/1080,0)end end;local function bK(bL,bM)if bL==nil then bL=core.g()end;bL=q(bL,5)if bM~=nil and bM or(aD==nil or aD~=bL)then local bN=core.getVelocity()local bO=vec3(bN):len()local bP=e(unit.getData()).maxBrake;if bP~=nil and bP>0 and aj then bP=bP/utils.clamp(bO/100,0.1,1)bP=bP/ak;if ak>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bP)/2 else LastMaxBrakeInAtmo=bP end end end;if bP~=nil and bP>0 then LastMaxBrake=bP end;aD=bL end end;local function bQ()AtlasOrdered={}for bR,bI in pairs(aT[0])do table.insert(AtlasOrdered,{name=bI.name,index=bR})end;local function bS(bT,bU)return bT.name<bU.name end;table.sort(AtlasOrdered,bS)end;local function bV(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*epsilon end;local function bY(bZ,b_)local c0=vec3(b_)if bZ.bodyId==0 then return setmetatable({latitude=c0.x,longitude=c0.y,altitude=c0.z,bodyId=0,systemId=bZ.planetarySystemId},MapPosition)end;local c1=c0-bZ.center;local a9=c1:len()local c2=a9-bZ.radius;local c3=0;local c4=0;if not bV(a9,0)then local c5=m(c1.y,c1.x)c4=c5>=0 and c5 or 2*math.pi+c5;c3=math.pi/2-math.acos(c1.z/a9)end;return setmetatable({latitude=math.deg(c3),longitude=math.deg(c4),altitude=c2,bodyId=bZ.bodyId,systemId=bZ.planetarySystemId},MapPosition)end;local function c6(a9,c7)local c8=a9>100000;local c9,ca=""if c7==nil then c7=1 end;if c8 then c9,ca=q(a9/1000/200,c7),"SU"elseif a9<1000 then c9,ca=q(a9,c7),"M"else c9,ca=q(a9/1000,c7),"KM"end;return c9,ca end;local function cb(cc)for bR,bI in pairs(cc)do if bI.name and bI.name==CustomTarget.name then return bR end end;return-1 end;local function cd()if radarPanelID~=nil and ac==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ac==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ac=0 end end;local function ce()local cf=-1;local cg=-1;if vBooster then cf=vBooster.distance()end;if hover then cg=hover.distance()end;if cf~=-1 and cg~=-1 then if cf<cg then return cf else return cg end elseif cf~=-1 then return cf elseif cg~=-1 then return cg else return-1 end end;local function ch()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b5=true;a5=0;if aj and ag==-1 then BrakeLanding=false;bD(1,true)z=1;AltitudeHold=true;HoldAltitude=al;a5=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)end else VertTakeOff=true;AltitudeHold=false;bp=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function ci()if bu-bc<1.5 then if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bc=-1;if AltitudeHold then return end end else bc=bu end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;R=false;b5=true;LockPitch=nil;bp=false;if ag==-1 then if VertTakeOff then ch()end;AutoTakeoff=false;if bc>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=al end end;if not aj then bp=false;bm=true;IntoOrbit=true;if not ae and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end elseif VertTakeOffEngine and bC then ch()else AutoTakeoff=true;if bc>-1 then HoldAltitude=al+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ae then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;if VertTakeOff then ch()end;b5=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bj=false;bh=nil;bi=nil;bt=0;if IntoOrbit then if bp then CancelIntoOrbit=false else CancelIntoOrbit=true end;bp=false;IntoOrbit=false;bo=nil elseif unit.getClosestPlanetInfluence()>0 and ak==0 then IntoOrbit=true;bp=false;CancelIntoOrbit=false;if bo==nil then bo=planet end else T="Unable to engage orbiting, not near planet or in atmosphere"end end;local function cj()if l()==1 then R=not R;if R then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b5=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else T="Follow Mode only works with Remote controller"R=false end end;local function ck()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a1=nil;CustomTarget=nil;return true end;local cl=AtlasOrdered[AutopilotTargetIndex].index;local cm=aT[0][cl]if cm.center then AutopilotTargetName=cm.name;a1=aZ[0][cl]if CustomTarget~=nil then if ak==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cm;for _,bI in pairs(aZ[0])do if bI.name==CustomTarget.planetname then a1=bI;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a1.center)else AutopilotTargetCoords=CustomTarget.position end;if a1.planetname~="Space"then if a1.hasAtmosphere then AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cn(co)if not Autopilot and not VectorToTarget and not ae and not IntoOrbit then if co==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then ck()else local cl=AtlasOrdered[AutopilotTargetIndex].index;local cm=aT[0][cl]if cm.name=="Space"then if co==nil then cn()else cn(1)end else ck()end end else T="Disengage autopilot before changing Interplanetary Helper"end end;local function cp()local function cq(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ci()end end;VectorStatus="Proceeding to Waypoint"end;if ag~=-1 and VertTakeOffEngine or VertTakeOff then T="Vertical Takeoff autopilot not supported.\nFinish or Disable Vertical Takeoff"return end;if bu-bd<1.5 and ak>0 then if not bs then T="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bd=-1;if Autopilot or VectorToTarget then return end end else bd=bu end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ae and not IntoOrbit then ck()local cr=bY(a1,AutopilotTargetCoords)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ak~=0 then ae=true;ci()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ak>0 then bp=false;if not VectorToTarget then cq(SpaceTarget)end else if al>100000 or al==0 then bp=false;Autopilot=true elseif not aj then ad=true;ProgradeIsOn=true;bn=planet.noAtmosphericDensityAltitude+1000;bm=true;if AltitudeHold then ci()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ak~=0 then ae=true;ci()else Autopilot=true end end elseif ak==0 then local cs=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a1.name==planet.name and cs)then bp=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;R=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ae=true;ci()end else ae=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=al;TargetSet=false;Reentry=false;if IntoOrbit then if not bl.VectorToTarget then IntoOrbit=false else bl.VectorToTarget=false end end end end;local function ct(cu)local cv=-1;local cw;cv=cb(SavedLocations)if cv~=-1 then local cx;if cu~=nil then cw={position=SavedLocations[cv].position,name=cu,atmosphere=SavedLocations[cv].atmosphere,planetname=SavedLocations[cv].planetname,gravity=SavedLocations[cv].gravity}else cw={position=bB,name=SavedLocations[cv].name,atmosphere=ak,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cv]=cw;cv=-1;cv=cb(aT[0])if cv>-1 then aT[0][cv]=cw end;bQ()T=CustomTarget.name.." position updated"AutopilotTargetIndex=0;ck()else T="Name Not Found"end end;local function cy(cz,cA,bU)local cB=cz:cross(bU):normalize_inplace()local cC=math.acos(utils.clamp(cB:dot(-cA),-1,1))*constants.rad2deg;if cB:cross(-cA):dot(bU)<0 then cC=-cC end;return cC end;local function cD(cE,cF,cG)cF=cF:project_on_plane(cE)cG=cG:project_on_plane(cE)return m(cF:cross(cG):dot(cE),cF:dot(cG))end;local function ce()local cf=-1;local cg=-1;if vBooster then cf=vBooster.distance()end;if hover then cg=hover.distance()end;if cf~=-1 and cg~=-1 then if cf<cg then return cf else return cg end elseif cf~=-1 then return cf elseif cg~=-1 then return cg else return-1 end end;local function cH()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b5=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then ch()end;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;b5=autoRollPreference;ad=false;af=false;a5=0 end end;local function cI(cJ,cK)cJ=vec3(cJ)cK=vec3(cK):normalize()local c9=cJ*cK;return c9.x+c9.y+c9.z end;local function cL(cJ,cM,cN)local cO=0.001;local cP=1;if not aj or not b9 or ag~=-1 or bz<H then local cQ=cN;if cQ==nil then cQ=DampingMultiplier end;if cM==nil then cM=cO end;cJ=vec3(cJ):normalize()local cR=vec3()-cJ;local cS=-cI(cR,core.getConstructWorldOrientationRight())*cP;local cT=-cI(cR,core.getConstructWorldOrientationUp())*cP;if at==0 then at=cS/2 end;if au==0 then au=cT/2 end;if math.abs(cS)<0.1 then M=M-cS*2 else M=M-(cS+(cS-at)*cQ)end;if math.abs(cT)<0.1 then L=L+cT*2 else L=L+cT+(cT-au)*cQ end;at=cS;au=cT;if math.abs(cS)<cM and math.abs(cT)<cM then return true end;return false elseif b9 and ag==-1 then cJ=by;local cQ=cN;if cQ==nil then cQ=DampingMultiplier end;if cM==nil then cM=cO end;cJ=vec3(cJ):normalize()local cR=bw-cJ;local cS=-cI(cR,core.getConstructWorldOrientationRight())*cP;local cT=-cI(cR,core.getConstructWorldOrientationUp())*cP;if at==0 then at=cS/2 end;if au==0 then au=cT/2 end;if math.abs(cS)<0.1 then M=M-cS*5 else M=M-(cS+(cS-at)*cQ)end;if math.abs(cT)<0.1 then L=L+cT*5 else L=L+cT+(cT-au)*cQ end;at=cS;au=cT;if math.abs(cS)<cM and math.abs(cT)<cM then return true end;return false end end;local function cU()if Reentry then T="Re-Entry cancelled"Reentry=false;b5=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then T="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a8=5 elseif not I then StrongBrakes=planet.gravity*9.80665*k()<LastMaxBrakeInAtmo;if not StrongBrakes then T="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b5=true;BrakeIsOn=false;T="Beginning Parachute Re-Entry - Strap In.  Target speed: "..be end else Reentry=true;AltitudeHold=true;b5=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cV,cW=c6(HoldAltitude)T="Beginning Re-entry.  Target speed: "..be.." Target Altitude: "..cV..cW;bG(c(be))end;AutoTakeoff=false end;local function cX(bO)if not aj then bK()return a_.computeDistanceAndTime(bO,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return a_.computeDistanceAndTime(bO,AutopilotEndSpeed,k(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*k())else return 0,0 end end end;local function cY(bO)bK()return a_.computeDistanceAndTime(bO,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;local function cZ()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function c_(d0)local d1=0;local d2=0;local d3=0;if d0<60 then d0=c(d0)elseif d0<3600 then d1=c(d0/60)d0=c(d0%60)elseif d0<86400 then d2=c(d0/3600)d1=c(d0%3600/60)else d3=c(d0/86400)d2=c(d0%86400/3600)end;if d3>0 then return d3 .."d "..d2 .."h "elseif d2>0 then return d2 .."h "..d1 .."m "elseif d1>0 then return d1 .."m "..d0 .."s"elseif d0>0 then return d0 .."s"else return"0s"end end;local function d4()local d5=-1;local d6=ce()if telemeter_1 then d5=telemeter_1.getDistance()end;if d6~=-1 and d5~=-1 then if d6<d5 then return d6 else return d5 end elseif d6~=-1 then return d6 else return d5 end end;local function d7(d8)if dbHud_1 then if not a4 then for bR,bI in pairs(b)do dbHud_1.setStringValue(bI,f(_G[bI]))if d8 and dbHud_2 then dbHud_2.setStringValue(bI,f(_G[bI]))end end;for bR,bI in pairs(a)do dbHud_1.setStringValue(bI,f(_G[bI]))if d8 and dbHud_2 then dbHud_2.setStringValue(bI,f(_G[bI]))end end;system.print("Saved Variables to Datacore")if d8 and dbHud_2 then T="Databank copied.  Remove copy when ready."end end end end;local function d9()local da={}local function db()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;local function dc()local dd=Nav.axisCommandManager:getAxisCommandType(0)local de="TRAVEL"if dd==1 then de="CRUISE"end;if Autopilot then de="AUTOPILOT"end;return de end;local function df(dg,aQ,dh,di,dj,dk,dl,dm)local dn=1;local dp=2;local dq=3;local dr=4;local ds=5;local dt=6;local du=""local dv=0;local dw=fuelY;local dx=fuelY+10;if l()==1 and not RemoteHud then dw=dw-50;dx=dx-50 end;dg[#dg+1]=[[<g class="pdim txtfuel">]]if dj=="ATMO"then du="atmofueltank"elseif dj=="SPACE"then du="spacefueltank"else du="rocketfueltank"end;dv=_G[du.."_size"]if#dk>0 then for i=1,#dk do local dy=string.sub(dk[i][dp],1,12)local dz=0;for dA=1,dv do if dk[i][dp]==e(unit[du.."_"..dA].getData()).name then dz=dA;break end end;if aQ or dl[i]==nil or dm[i]==nil then local dB=0;local dC=0;local dD=0;local dE=0;local dF=p()if dz~=0 then dm[i]=e(unit[du.."_"..dz].getData()).percentage;dl[i]=e(unit[du.."_"..dz].getData()).timeLeft;if dl[i]=="n/a"then dl[i]=0 end else dD=j(dk[i][dn])-dk[i][dr]dB=dk[i][dq]dm[i]=c(0.5+dD*100/dB)dC=dk[i][ds]dE=dk[i][dt]if dC<=dD then dl[i]=0 else dl[i]=c(0.5+dD/((dC-dD)/(dF-dE)))end;dk[i][ds]=dD;dk[i][dt]=dF end end;if dy==di then dy=d("%s %d",dj,i)end;if dz==0 then dy=dy.." *"end;local dG;if dl[i]==0 then dG="n/a"else dG=c_(dl[i])end;if dm[i]~=nil then local dH=c(dm[i]*2.55)local dI=d("rgb(%d,%d,%d)",255-dH,dH,0)local dJ=""if dG~="n/a"and dl[i]<120 or dm[i]<5 then if aQ then dJ=[[class="red"]]end end;dg[#dg+1]=d([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dh,dw,dJ,dy,dh,dx,dI,dm[i],dG)dw=dw+30;dx=dx+30 end end end;dg[#dg+1]="</g>"end;local function dK(dg,c2)if c2<200000 and not aj or c2 and aj then local dL=-bA:dot(by)local dM=0;if math.abs(dL)>1 then dM=45*math.log(math.abs(dL),10)if dL<0 then dM=-dM end end;dg[#dg+1]=d([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,c(dL),c(dM))end;return dg end;local function dN(cA)local co=-bA;cA=cA-cA:project_on(co)local dO=vec3(0,0,1)dO=dO-dO:project_on(co)local dP=dO:cross(co)local dM=dO:angle_between(cA)*constants.rad2deg;if cA:dot(dP)<0 then dM=360-dM end;return dM end;local function dQ(dg,centerX,centerY,dR,dS,cs)local dT=circleRad;local dU=20;dU=c(dU)local dV=c(dR)if cs then for i=-45,45,5 do local dW=i;dg[#dg+1]=d([[<g transform="rotate(%f,%d,%d)">]],dW,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dg[#dg+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dT+dU-len,centerX,centerY+dT+dU)end;dg[#dg+1]=d([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+dT+dU-35,dS,centerX,centerY+dT+dU-25,dV)dg[#dg+1]=d([[<g transform="rotate(%f,%d,%d)">]],-dR,centerX,centerY)dg[#dg+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dT+dU-20,centerX+5,centerY+dT+dU-20,centerX,centerY+dT+dU-15)dg[#dg+1]="</g>"end;local dX=dV;if cs then dX=dN(bw)end;local dY=20;local dZ=c(dX)local d_=0;local e0=centerY+dT+dU+20;local e1=centerX;if dS~="YAW"then e0=bJ(130)e1=bH(960)end;local e2=[[<path class="txttick line" d="]]for i=c(dZ-(dY+10)-dZ%5+0.5),c(dZ+dY+10+dZ%5+0.5),5 do local dh=e1+-i*5+dX*5;if i%10==0 then d_=10;local r=i;if r==360 then r=0 elseif r>360 then r=r-360 elseif r<0 then r=r+360 end;dg[#dg+1]=d([[
                                    <text x="%f" y="%f">%d</text>]],dh+5,e0-12,r)elseif i%5==0 then d_=5 end;if d_==10 then e2=d([[%s M %f %f v %d]],e2,dh,e0-5,d_)else e2=d([[%s M %f %f v %d]],e2,dh,e0-2.5,d_)end end;dg[#dg+1]=e2 ..[["/>]]dg[#dg+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e1-5,e0+10,e1+5,e0+10,e1,e0+5)if cs then dS="HDG"end;dg[#dg+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],e1,e0+25,dZ,e1,e0+35,dS)end;local function e3(dg,e4,dR,centerX,centerY,cs,e5,bO)local dT=circleRad;local e6=c(dT*3/5)if dT>0 then local e7=c(e4)local len=0;local e2=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dR,centerX,centerY)if not aj then e2=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dg[#dg+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dT-1,centerX,centerY)dg[#dg+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(e7-30-e7%5+0.5),c(e7+30+e7%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local e8=centerY+-i*5+e4*5;if len==30 then e2=d([[%s M %d %f h %d]],e2,centerX-e6-len,e8,len)if aj then dg[#dg+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dR,centerX,centerY,centerX-e6+10,e8,i)dg[#dg+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dR,centerX,centerY,centerX+e6-10,e8,i)if i==0 or i==180 or i==-180 then dg[#dg+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dR,centerX,centerY,centerX-e6+20,e8,e6*2-40)end else dg[#dg+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e6+10,e8,i)dg[#dg+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e6-10,e8,i)end;e2=d([[%s M %d %f h %d]],e2,centerX+e6,e8,len)else e2=d([[%s M %d %f h %d]],e2,centerX-e6-len,e8,len)e2=d([[%s M %d %f h %d]],e2,centerX+e6,e8,len)end end;dg[#dg+1]=e2 ..[["/>]]local e9="PITCH"if not cs then e9="REL PITCH"end;if e4>90 and not aj then e4=90-(e4-90)elseif e4<-90 and not aj then e4=-90-(e4+90)end;if dT>200 then if aj then if bO>H then dg[#dg+1]=d([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e5)end;dg[#dg+1]=d([[<g transform="rotate(%f,%d,%d)">]],-dR,centerX,centerY)else dg[#dg+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dg[#dg+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e6+25,centerY-5,centerX-e6+20,centerY,centerX-e6+25,centerY+5,centerX-e6+50,centerY+4,e7)dg[#dg+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e6-25,centerY-5,centerX+e6-20,centerY,centerX+e6-25,centerY+5,centerX+e6-30,centerY+4,e7)dg[#dg+1]="</g>"end;local ea=c(dT/3)dg[#dg+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ea,centerY,dT-ea)if not aj and cs then dg[#dg+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dR,centerX,centerY,centerX-e6+10,centerY,e6*2-20)end;dg[#dg+1]="</g>"if dT<200 then if aj and bO>H then dg[#dg+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dT,e9,centerX,centerY-dT+10,e7,centerX,centerY-15,"Yaw",centerX,centerY+20,e5)else dg[#dg+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dT,e9,centerX,centerY-dT+15,e7)end end end end;local function eb(dg,c2,cs)local ec=altMeterX;local ed=altMeterY;local ee=78;local ef=19;local eg=d4()if eg~=-1 then table.insert(dg,d([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],ec+ee,ed+ef+20,eg))end;if cs and(c2<200000 and not aj or c2 and aj)then table.insert(dg,d([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],ec-1,ed-4,ee+2,ef+6,ec+1,ed-1,ee-4,ef))local cv=0;local eh=1;local ei=0;local ej=c2<0;local ek=9;if ej then ek=0 end;local c2=math.abs(c2)while cv<6 do local el=11;local em=16;local en=9;local eo=14;local dJ="altsm"if cv>2 then em=em+3;el=el+2;eo=eo+2;en=en-6;dJ="altbig"end;if ej then dJ=dJ.." red"end;local ep=c2/eh%10;local eq=c(ep)local er=c((eq+1)%10)local es=ei;if cv==0 then es=ep-eq;if ej then es=1-es end end;if ej and(cv==0 or ei~=0)then local et=er;er=eq;eq=et end;local eu=em*(es-1)local ev=eu+em;local dh=ec+en+(6-cv)*el;local e8=ed+eo;table.insert(dg,d([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dJ,dh,e8+eu,er,dh,e8+ev,eq))cv=cv+1;eh=eh*10;if eq==ek then ei=es else ei=0 end end;table.insert(dg,[[</g></g>]])end end;local function ew(bN)bN=vec3(bN)local cC=-math.deg(m(bN.y,bN.z))+180;cC=cC-90;if cC<0 then cC=360+cC end;if cC>180 then cC=-180+cC-180 end;return-cC end;local function ex(bN)bN=vec3(bN)local dX=math.deg(m(bN.y,bN.x))-90;if dX<-180 then dX=360+dX end;return dX end;local function ey(dg,bN,bO,centerX,centerY)if bO>5 and not aj or bO>H then local dT=circleRad;local ez=20;local eA=20;local eB=vec3(bN)local eC=ew(eB)local eD=ex(eB)local eE=14;local eF=eE/2;local eG=-eD/eA*dT;local eH=eC/ez*dT;local dh=centerX+eG;local e8=centerY+eH;local a9=math.sqrt(eG^2+eH^2)local eI=[[<circle
                        cx="]]..dh..[["
                        cy="]]..e8 ..[["
                        r="]]..eF/eE..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dh..[["
                        cy="]]..e8 ..[["
                        r="]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dh-eE..[[,]]..e8 ..[[ h ]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dh+eF..[[,]]..e8 ..[[ h ]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dh..[[,]]..e8-eE..[[ v ]]..eF..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if a9<dT then dg[#dg+1]=eI else local dM=m(eH,eG)local eJ=4;local eK=centerX+dT*math.cos(dM)local eL=centerY+dT*math.sin(dM)dg[#dg+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dM*180/math.pi,eK,eL,eK-eJ,eL-eJ/2,eJ*2,eJ,eK+eJ,eL-eJ,eJ,eJ,-eJ,eJ)end;if not aj then eC=ew(-eB)eD=ex(-eB)eG=-eD/eA*dT;eH=eC/ez*dT;dh=centerX+eG;e8=centerY+eH;a9=math.sqrt(eG^2+eH^2)if a9<dT then local eM=[[<circle
                                cx="]]..dh..[["
                                cy="]]..e8 ..[["
                                r="]]..eF..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dh..[[,]]..e8-eE..[[ v ]]..eF..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dh..[[,]]..e8 ..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dh..[[,]]..e8 ..[[)" />
                            <path
                                d="M ]]..dh-eF..[[,]]..e8 ..[[ h ]]..eE..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dh..[[,]]..e8 ..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dh..[[,]]..e8 ..[[)"/>]]dg[#dg+1]=eM end end end end;local function eN(dg,de,eO,eP)eO=c(eO+0.5)local dw=throtPosY+10;local dx=throtPosY+20;if l()==1 and not RemoteHud then dw=55;dx=65 end;local eQ="CRUISE"local unit="km/h"local bE=eP;if de=="TRAVEL"or de=="AUTOPILOT"then eQ="THROT"unit="%"bE=eO;local eR="dim"if eO<0 then eR="red"end;dg[#dg+1]=d([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],eR,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eO),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dg[#dg+1]=d([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dw,eQ,throtPosX+10,dx,bE,unit)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then eO=c(C*100+0.5)local eR="red"if eO<0 then eR="red"end;dg[#dg+1]=d([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],eR,1-math.abs(eO),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dg[#dg+1]=d([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dw+40,"LIMIT",throtPosX+10,dx+40,eO,"%")end;if aj and AtmoSpeedAssist or Reentry then dg[#dg+1]=d([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dw-40,"LIMIT: ",be.." km/h")elseif not aj and Autopilot then dg[#dg+1]=d([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dw-40,"LIMIT: ",c(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eS(dg,eT)local eU=throtPosY-10;local eV=throtPosX+10;dg[#dg+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then eU=75 end;dg[#dg+1]=d([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],eV,eU,c(eT))end;local function eW(dg)dg[#dg+1]=d([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],bH(1900),bJ(1070),VERSION_NUMBER)dg[#dg+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dg[#dg+1]=d([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bH(960),bJ(550))dg[#dg+1]=d([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bH(960),bJ(600))dg[#dg+1]=d([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bH(960),bJ(650))end;local eX=bH(960)local eY=bJ(860)local eZ=bJ(880)local e_=bJ(900)local f0=bJ(960)local f1=bJ(200)local f2=bJ(150)local f3=bJ(960)if l()==1 and not RemoteHud then eY=bJ(135)eZ=bJ(155)e_=bJ(175)f1=bJ(115)f2=bJ(95)end;if BrakeIsOn then dg[#dg+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],eX,eY)elseif A>0 then dg[#dg+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eX,eY,A)end;if aj and b9 and ce()==-1 then dg[#dg+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],eX,f1+50)end;if ao then dg[#dg+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],eX,f3)end;if GearExtended then if J then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eX,eZ)else dg[#dg+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eX,eZ)end;local f4,ca=c6(Nav:getTargetGroundAltitude())dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eX,e_,f4 ..ca)end;if W then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eX,f0+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(al-antigrav.getBaseAltitude())<501 then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eX,f1+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else dg[#dg+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eX,f1+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eX,f1+20,AutopilotStatus)elseif LockPitch~=nil then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eX,f1+20,c(LockPitch))elseif R then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eX,f1+20)elseif Reentry then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eX,f1+20)end;local f5,f6,f7=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(f8)if f8.noAtmosphericDensityAltitude>0 then return f8.radius+f8.noAtmosphericDensityAltitude else return f8.radius+f8.surfaceMaxAltitude*1.5 end end)local f9=f6;if f7~=nil and f6~=nil then f9=math.min(f7,f6)end;if AltitudeHold or VertTakeOff then local f4,ca=c6(HoldAltitude,2)if AutoTakeoff and not IntoOrbit then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eX,f1,f4 ..ca)if BrakeIsOn then dg[#dg+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eX,f1+50)end elseif VertTakeOff then if antigrav and antigrav.getState()==1 then f4,ca=c6(antigrav.getBaseAltitude(),2)else f4,ca="Orbit",""end;dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eX,f1,f4 ..ca)else dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eX,f1,f4 ..ca)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ak>0.1 then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],eX,f1)elseif ak<0.09 and ak>0.05 then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],eX,f1)elseif ak<0.05 then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],eX,f1)end end;if IntoOrbit then if bg~=nil then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],eX,f1,bg)end end;if BrakeLanding then if StrongBrakes then dg[#dg+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],eX,f1)else dg[#dg+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],eX,f1)end end;if ProgradeIsOn then dg[#dg+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eX,f1)end;if RetrogradeIsOn then dg[#dg+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eX,f1)end;if TurnBurn then dg[#dg+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eX,f2)elseif f9~=nil and ak==0 then local f4,ca=c6(f9)local travelTime=a_.computeTravelTime(bz,0,f9)local fa="Collision"if f5.noAtmosphericDensityAltitude>0 then fa="Atmosphere"end;dg[#dg+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eX,f2,f5.name,fa,c_(travelTime),f4 ..ca)end;if VectorToTarget and not IntoOrbit then dg[#dg+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],eX,f1+30,VectorStatus)end;dg[#dg+1]="</g>"return dg end;local function fb(bO)return c(q(bO*3.6,0)+0.5).." km/h"end;local function fc(dg)if orbit~=nil and ak<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fd=OrbitMapX;local fe=OrbitMapY;local ff=OrbitMapSize;local fg=4;fe=fe+fg;local fh=15;local dh=fd+ff+fd/2+fg;local e8=fe+ff/2+5+fg;local fi,fj,fk,fl;fi=ff/4;fl=0;dg[#dg+1]=[[<g class="pbright txtorb txtmid">]]dg[#dg+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ff+fd*2,ff+fe,fg,fg)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fk=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fi*2)fj=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fk*(1-orbit.eccentricity)fl=fi-orbit.periapsis.altitude/fk-planet.radius/fk;local fm=""if orbit.periapsis.altitude<=0 then fm='redout'end;dg[#dg+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fm,fd+ff/2+fl+fg,fe+ff/2+fg,fi,fj)dg[#dg+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fd+ff/2+fg,fe+ff/2+fg,planet.radius/fk)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dg[#dg+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dh-35,e8-5,fd+ff/2+fi+fl,e8-5)dg[#dg+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],dh,e8)e8=e8+fh;local f4,ca=c6(orbit.apoapsis.altitude)dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,f4 ..ca)e8=e8+fh;dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,c_(orbit.timeToApoapsis))e8=e8+fh;dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,fb(orbit.apoapsis.speed))end;e8=fe+ff/2+5+fg;dh=fd-fd/2+10+fg;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dg[#dg+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dh+35,e8-5,fd+ff/2-fi+fl,e8-5)dg[#dg+1]=d([[<text x="%f" y="%f">Periapsis</text>]],dh,e8)e8=e8+fh;local f4,ca=c6(orbit.periapsis.altitude)dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,f4 ..ca)e8=e8+fh;dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,c_(orbit.timeToPeriapsis))e8=e8+fh;dg[#dg+1]=d([[<text x="%f" y="%f">%s</text>]],dh,e8,fb(orbit.periapsis.speed))end;dg[#dg+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fd+ff/2+fg,20+fg,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fn=orbit.timeToApoapsis/orbit.period*2*math.pi;local fo=fi*math.cos(fn)local fp=fj*math.sin(fn)dg[#dg+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fd+ff/2+fo+fl+fg,fe+ff/2+fp+fg)end;dg[#dg+1]=[[</g>]]return dg else return dg end end;local function fq(dg)local function fr(fs,ft)for i=1,#ft do table.insert(fs,ft[i])end;return fs end;local dh=50;local e8=525;local fu={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fv={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fw={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fx={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if aj then fr(fu,fv)table.insert(fu,"---------------------------------------")if VertTakeOff then table.insert(fu,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif ag~=-1 then if antigrav then if antigrav.getState()==1 then table.insert(fu,"Alt-6: AGG on, will takeoff to AGG Height")else table.insert(fu,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fu,"Alt-6: Vertital Engines On, begins Vertical Takeoff.")else table.insert(fu,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fu,"G: Begin BrakeLanding or Land")end else fr(fu,fw)end;if AltitudeHold then table.insert(fu,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fu,"---------------------------------------")fr(fu,fx)dg[#dg+1]=[[<g class="pdim txt txtstart">]]for i=1,#fu do e8=e8+10;dg[#dg+1]=d([[<text x=%d y="%d">%s</text>]],dh,e8,fu[i])end;dg[#dg+1]="</g>"end;function da.HUDPrologue(dg)if not x then u=PvPR;w=PvPG;v=PvPB else u=SafeR;w=SafeG;v=SafeB end;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local fy=aq;local fz=ar;local fA=aq;local fB=ar;if db()and not brightHud then fy=[[rgb(]]..c(u*0.4+0.5)..","..c(w*0.4+0.5)..","..c(v*0.3+0.5)..[[)]]fz=[[rgb(]]..c(u*0.3+0.5)..","..c(w*0.3+0.5)..","..c(v*0.2+0.5)..[[)]]end;dg[#dg+1]=d([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fy,fy,fA,fA,fz,fz,fB,fB,ay,az)return dg end;function da.UpdateHud(dg)local c2=al;local bN=core.getVelocity()local bO=vec3(bN):len()local fC=getRoll(bA,bw,bx)local fD=fC/180*math.pi;local fE=math.cos(fD)local fF=math.sin(fD)local cC=cy(bA,bw,bx*fE+bv*fF)local dR=fC;local e4=cC;local eO=c(unit.getThrottle())local eT=bO*3.6;local eP=unit.getAxisCommandValue(0)local fG=bH(1770)local fH=bJ(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eP=z;eO=z*100 end;local de=dc()local dS="ROLL"local cs=unit.getClosestPlanetInfluence()>0;if eO==nil then eO=0 end;if not cs then if bO>5 then cC=ew(bN)fC=ex(bN)else cC=0;fC=0 end;dS="YAW"end;if y>50000 and not aj then local fI;if y>200000 then fI=q(y/200000,2).." su"else fI=q(y/1000,1).." km"end;dg[#dg+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fG,fH,fI)end;dg[#dg+1]=ab;dg[#dg+1]=av;dg[#dg+1]=aa;if aS%aL==0 then aQ=true end;if fuelX~=0 and fuelY~=0 then df(dg,aQ,fuelX,"Atmospheric ","ATMO",aE,aO,aP)df(dg,aQ,fuelX+100,"Space fuel t","SPACE",aF,aM,aN)df(dg,aQ,fuelX+200,"Rocket fuel ","ROCKET",aG,aJ,aK)end;if aQ then aQ=false;aS=0 end;aS=aS+1;dK(dg,c2)if l()==0 or RemoteHud then if not db()or brightHud then if cs then dQ(dg,centerX,centerY,dR,dS,cs)e3(dg,e4,dR,centerX,centerY,cs,c(ex(bN)),bO)else dQ(dg,centerX,centerY,fC,dS,cs)e3(dg,cC,fC,centerX,centerY,cs,c(fC),bO)end;eb(dg,c2,cs)ey(dg,bN,bO,centerX,centerY)end end;eN(dg,de,eO,eP)eS(dg,eT)eW(dg)fc(dg)if showHelp then fq(dg)end;if screen_2 then local fJ=bB;local dh=960+fJ.x/aV;local e8=450+fJ.y/aW;screen_2.moveContent(aX,(dh-80)/19.2,(e8-80)/10.8)end;return dg end;function da.HUDEpilogue(dg)dg[#dg+1]="</svg>"return dg end;function da.DrawOdometer(dg,a2,TotalDistanceTravelled,a3,fK)local fL=bH(1240)local fM=bJ(55)local fN=fM+10;local bL=core.g()local fO=0;local fP=0;local fQ=0;local de=dc()bK(bL)if aj then fQ=LastMaxBrakeInAtmo else fQ=LastMaxBrake end;maxThrust=Nav:maxForceForward()aC=k()if not ShowOdometer then return end;local fR=vec3(core.getWorldAcceleration()):len()/9.80665;bL=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bL>0.1 then fP=aC*bL;fO=maxThrust/bL end;dg[#dg+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then fL=bH(1120)fM=bJ(55)fN=fM+10 elseif aj then local fS=bH(770)dg[#dg+1]=d([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fS,fM,fS,fN,ak)end;dg[#dg+1]=d([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fL,fM,fL,fN,bL/9.80665,fL,fM+20,fL,fN+20,fR)dg[#dg+1]=d([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bH(660),bH(700),bJ(35),bH(960),bJ(55),bH(1240),bJ(35),bH(1280))if l()==0 or RemoteHud then dg[#dg+1]=d([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bH(700),bJ(20),a2,bH(700),bJ(30),TotalDistanceTravelled/1000,bH(830),bJ(20),c_(a3),bH(830),bJ(30),c_(TotalFlightTime),bH(970),bJ(20),aC/1000,bH(1240),bJ(10),fQ/1000,bH(1240),bJ(30),maxThrust/1000,bH(960),bJ(180),de)if bL>0.1 then dg[#dg+1]=d([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bH(970),bJ(30),fO/1000,bH(1240),bJ(20),fP/1000)else dg[#dg+1]=d([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bH(970),bJ(30),bH(1240),bJ(20))end else dg[#dg+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bH(960),bJ(33),de)end;dg[#dg+1]="</g>"return dg end;function da.DrawWarnings(dg)return eW(dg)end;function da.DisplayOrbitScreen(dg)return fc(dg)end;function da.DisplayMessage(dg,f4)if f4~="empty"then dg[#dg+1]=[[<text class="msg" x="50%%" y="310" >]]for fT in string.gmatch(f4,"([^\n]+)")do dg[#dg+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],fT)end;dg[#dg+1]=[[</text>]]end;if a8~=0 then unit.setTimer("msgTick",a8)a8=0 end end;function da.DrawDeadZone(dg)dg[#dg+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return da end;local function fU()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function fV()local function fW(fX)return type(fX)=='number'end;local function fY(fX)return type(tonumber(fX))=='number'end;local function fZ(f_)return type(f_)=='table'end;local function g0(g1)return type(g1)=='string'end;local function g2(bI)return fZ(bI)and fW(bI.x and bI.y and bI.z)end;local function g3(g4)return fZ(g4)and fW(g4.latitude and g4.longitude and g4.altitude and g4.bodyId and g4.systemId)end;local g5=math.pi/180;local g6=180/math.pi;local epsilon=1e-10;local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local g7='::pos{'..r..','..r..','..r..','..r..','..r..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local g8=utils.clamp;local function bV(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*epsilon end;local function g9(fX)local c9=string.gsub(string.reverse(d('%.4f',fX)),'^0*%.?','')return c9==''and'0'or string.reverse(c9)end;local function ga(gb)if g2(gb)then return d('{x=%.3f,y=%.3f,z=%.3f}',gb.x,gb.y,gb.z)end;if fZ(gb)and not getmetatable(gb)then local gc={}local gd=next(gb)if type(gd)=='nil'or gd==1 then gc=gb else for bR,bI in pairs(gb)do local bE=ga(bI)if type(bR)=='number'then table.insert(gc,d('[%s]=%s',bR,bE))else table.insert(gc,d('%s=%s',bR,bE))end end end;return d('{%s}',table.concat(gc,','))end;if g0(gb)then return d("'%s'",gb:gsub("'",[[\']]))end;return tostring(gb)end;local ge={}ge.__index=ge;ge.__tostring=function(gb,gf)local gg={}for bR in pairs(gb)do table.insert(gg,bR)end;table.sort(gg)local gc={}for _,bR in ipairs(gg)do local bE=ga(gb[bR])if type(bR)=='number'then table.insert(gc,d('[%s]=%s',bR,bE))else table.insert(gc,d('%s=%s',bR,bE))end end;if gf then return d('%s%s',gf,table.concat(gc,',\n'..gf))end;return d('{%s}',table.concat(gc,','))end;ge.__eq=function(gh,gi)return gh.planetarySystemId==gi.planetarySystemId and gh.bodyId==gi.bodyId and bV(gh.radius,gi.radius)and bV(gh.center.x,gi.center.x)and bV(gh.center.y,gi.center.y)and bV(gh.center.z,gi.center.z)and bV(gh.GM,gi.GM)end;local function gj(gk,gl,gm,b_,gn)assert(fY(gk),'Argument 1 (planetarySystemId) must be a number:'..type(gk))assert(fY(gl),'Argument 2 (bodyId) must be a number:'..type(gl))assert(fY(gm),'Argument 3 (radius) must be a number:'..type(gm))assert(fZ(b_),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(b_))assert(fY(gn),'Argument 5 (GM) must be a number:'..type(gn))return setmetatable({planetarySystemId=tonumber(gk),bodyId=tonumber(gl),radius=tonumber(gm),center=vec3(b_),GM=tonumber(gn)},ge)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(go)return d('::pos{%d,%d,%s,%s,%s}',go.systemId,go.bodyId,g9(go.latitude*g6),g9(go.longitude*g6),g9(go.altitude))end;MapPosition.__eq=function(gh,gi)return gh.bodyId==gi.bodyId and gh.systemId==gi.systemId and bV(gh.latitude,gi.latitude)and bV(gh.altitude,gi.altitude)and(bV(gh.longitude,gi.longitude)or bV(gh.latitude,math.pi/2)or bV(gh.latitude,-math.pi/2))end;local function gp(gq,gl,c3,c4,c2)local gk=gq;if g0(gq)and not c4 and not c2 and not gl and not c3 then gk,gl,c3,c4,c2=n(gq,g7)assert(gk,'Argument 1 (position string) is malformed.')else assert(fY(gk),'Argument 1 (systemId) must be a number:'..type(gk))assert(fY(gl),'Argument 2 (bodyId) must be a number:'..type(gl))assert(fY(c3),'Argument 3 (latitude) must be in degrees:'..type(c3))assert(fY(c4),'Argument 4 (longitude) must be in degrees:'..type(c4))assert(fY(c2),'Argument 5 (altitude) must be in meters:'..type(c2))end;gk=tonumber(gk)gl=tonumber(gl)c3=tonumber(c3)c4=tonumber(c4)c2=tonumber(c2)if gl==0 then return setmetatable({latitude=c3,longitude=c4,altitude=c2,bodyId=gl,systemId=gk},MapPosition)end;return setmetatable({latitude=g5*g8(c3,-90,90),longitude=g5*(c4%360),altitude=c2,bodyId=gl,systemId=gk},MapPosition)end;local gr={}gr.__index=gr;gr.__tostring=function(gb,gf)local gs=gf and gf..'  'local gt={}local gg={}for bR in pairs(gb)do table.insert(gg,bR)end;table.sort(gg)for _,gu in ipairs(gg)do bdy=gb[gu]local gv=ge.__tostring(bdy,gs)if gf then table.insert(gt,d('[%s]={\n%s\n%s}',gu,gv,gf))else table.insert(gt,d('  [%s]=%s',gu,gv))end end;if gf then return d('\n%s%s%s',gf,table.concat(gt,',\n'..gf),gf)end;return d('{\n%s\n}',table.concat(gt,',\n'))end;local function gw(gx)local aT={}local pid;for _,bI in pairs(gx)do local gy=bI.planetarySystemId;if type(gy)~='number'then error('Invalid planetary system ID: '..tostring(gy))elseif pid and gy~=pid then error('Mistringmatch planetary system IDs: '..gy..' and '..pid)end;local gz=bI.bodyId;if type(gz)~='number'then error('Invalid body ID: '..tostring(gz))elseif aT[gz]then error('Duplicate body ID: '..tostring(gz))end;setmetatable(bI.center,getmetatable(vec3.unit_x))aT[gz]=setmetatable(bI,ge)pid=gy end;return setmetatable(aT,gr)end;aY={}local function gA(gx)return setmetatable({galaxyAtlas=gx or{}},aY)end;aY.__index=function(f_,i)if type(i)=='number'then local system=f_.galaxyAtlas[i]return gw(system)end;return rawget(aY,i)end;aY.__pairs=function(gb)return function(f_,bR)local gB,nv=next(f_,bR)return gB,nv and gw(nv)end,gb.galaxyAtlas,nil end;aY.__tostring=function(gb)local gC={}for _,gD in pairs(gb or{})do local gE=gD:getPlanetarySystemId()local gF=gr.__tostring(gD,'    ')table.insert(gC,d('  [%s]={%s\n  }',gE,gF))end;return d('{\n%s\n}\n',table.concat(gC,',\n'))end;aY.BodyParameters=gj;aY.MapPosition=gp;aY.PlanetarySystem=gw;function aY.createBodyParameters(gG,gl,gH,gI,gJ,gK,gL)assert(fY(gG),'Argument 1 (planetarySystemId) must be a number:'..type(gG))assert(fY(gl),'Argument 2 (bodyId) must be a number:'..type(gl))assert(fY(gH),'Argument 3 (surfaceArea) must be a number:'..type(gH))assert(fZ(gI),'Argument 4 (aPosition) must be an array or vec3:'..type(gI))assert(fZ(gJ),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gJ))assert(fY(gK),'Argument 6 (altitude) must be in meters:'..type(gK))assert(fY(gL),'Argument 7 (gravityAtPosition) must be number:'..type(gL))local gm=math.sqrt(gH/4/math.pi)local a9=gm+gK;local gM=vec3(gI)+a9*vec3(gJ)local gn=gL*a9*a9;return gj(gG,gl,gm,gM,gn)end;aY.isMapPosition=g3;function aY:getPlanetarySystem(gq)if i==nil then i=0 end;if nv==nil then nv=0 end;local gG=gq;if g3(gq)then gG=gq.systemId end;if type(gG)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gr then system=gw(system)end;return system end end end;function gr:castIntersections(gN,cK,gO,gP)local gO=gO or function(f8)return 1.05*f8.radius end;local gQ={}if gP then for _,i in ipairs(gP)do gQ[i]=self[i]end else gP={}for bR,f8 in pairs(self)do table.insert(gP,bR)gQ[bR]=f8 end end;local function gR(gS,gT)local gU=gQ[gS].center-gN;local gV=gQ[gT].center-gN;return gU:len()<gV:len()end;table.sort(gP,gR)local gW=cK:normalize()for i,gy in ipairs(gP)do local f8=gQ[gy]local gX=f8.center-gN;local gm=gO(f8)local gY=gX:dot(gW)local gZ=gY^2-(gX:len2()-gm^2)if gZ>=0 then local g_=math.sqrt(gZ)local f6=gY+g_;local f7=gY-g_;if f7>0 then return f8,f6,f7 elseif f6>0 then return f8,f6,nil end end end;return nil,nil,nil end;function gr:closestBody(h0)assert(type(h0)=='table','Invalid coordinates.')local h1,f8;local h2=vec3(h0)for _,h3 in pairs(self)do local h4=(h3.center-h2):len2()if(not f8 or h4<h1)and h3.name~="Space"then f8=h3;h1=h4 end end;return f8 end;function gr:convertToBodyIdAndWorldCoordinates(gq)local h5=gq;if g0(gq)then h5=gp(gq)end;if h5.bodyId==0 then return 0,vec3(h5.latitude,h5.longitude,h5.altitude)end;local h3=self:getBodyParameters(h5)if h3 then return h5.bodyId,h3:convertToWorldCoordinates(h5)end end;function gr:getBodyParameters(gq)local gl=gq;if g3(gq)then gl=gq.bodyId end;assert(fY(gl),'Argument 1 (bodyId) must be a number:'..type(gl))return self[gl]end;function gr:getPlanetarySystemId()local _,bI=next(self)return bI and bI.planetarySystemId end;function ge:convertToMapPosition(b_)assert(fZ(b_),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(b_))local c0=vec3(b_)if self.bodyId==0 then return setmetatable({latitude=c0.x,longitude=c0.y,altitude=c0.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c1=c0-self.center;local a9=c1:len()local c2=a9-self.radius;local c3=0;local c4=0;if not bV(a9,0)then local c5=m(c1.y,c1.x)c4=c5>=0 and c5 or 2*math.pi+c5;c3=math.pi/2-math.acos(c1.z/a9)end;return setmetatable({latitude=c3,longitude=c4,altitude=c2,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function ge:convertToWorldCoordinates(gq)local h5=g0(gq)and gp(gq)or gq;if h5.bodyId==0 then return vec3(h5.latitude,h5.longitude,h5.altitude)end;assert(g3(h5),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(h5.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(h5.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local h6=math.cos(h5.latitude)return self.center+(self.radius+h5.altitude)*vec3(h6*math.cos(h5.longitude),h6*math.sin(h5.longitude),math.sin(h5.latitude))end;function ge:getAltitude(b_)return(vec3(b_)-self.center):len()-self.radius end;function ge:getDistance(b_)return(vec3(b_)-self.center):len()end;function ge:getGravity(b_)local h7=self.center-vec3(b_)local h8=h7:len2()return self.GM/h8*h7/math.sqrt(h8)end;return setmetatable(aY,{__call=function(_,...)return gA(...)end})end;function script.onStart()local function h9()local function ha(hb)local hc=dbHud_1.hasKey;for bR,bI in pairs(hb)do if hc(bI)then local c9=e(dbHud_1.getStringValue(bI))if c9~=nil then _G[bI]=c9;aA=true end end end end;if dbHud_1 then local hc=dbHud_1.hasKey;if not useTheseSettings then ha(a)else T="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a8=5 end;coroutine.yield()ha(b)if aA then T="Loaded Saved Variables (see Lua Chat Tab for list)"E=q(ResolutionX/2,0)F=q(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b5=autoRollPreference;be=AtmoSpeedLimit;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]else T="No Saved Variables Found - Stand up / leave remote to save settings"end else T="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bu then LastMaxBrakeInAtmo=0 end;LastStartTime=bu;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then T="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a8=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hd()local function he(hf,hg)if hf>hg then hg=hf end;if ContainerOptimization>0 then hg=hg-hg*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hg=hg-hg*FuelTankOptimization*0.05 end;return hg end;local hh=core.getElementNameById;local hi=fuelX~=0 and fuelY~=0;for bR in pairs(am)do local type=core.getElementTypeById(am[bR])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(am[bR])),'^.*vertical.*$')then bC=true end end;if n(type,'^.*Space Engine$')then bs=true;if n(tostring(core.getElementTagsById(am[bR])),'^.*vertical.*$')then local hj=core.getElementRotationById(am[bR])if hj[4]<0 then if o(-hj[4],0.1)==0.5 then bq=true end else if o(hj[4],0.1)==0.5 then br=true end end end end;if type=="Landing Gear"then J=true end;if type=="Dynamic Core Unit"then local hk=g(am[bR])if hk>10000 then aR=128 elseif hk>1000 then aR=64 elseif hk>150 then aR=32 end end;aH=aH+g(am[bR])if hi and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hk=g(am[bR])local hl=j(am[bR])local hf=0;local dF=p()if type=="Atmospheric Fuel Tank"then local hg=400;local hm=35.03;if hk>10000 then hg=51200;hm=5480 elseif hk>1300 then hg=6400;hm=988.67 elseif hk>150 then hg=1600;hm=182.67 end;hf=hl-hm;if fuelTankHandlingAtmo>0 then hg=hg+hg*fuelTankHandlingAtmo*0.2 end;hg=he(hf,hg)aE[#aE+1]={am[bR],hh(am[bR]),hg,hm,hf,dF}end;if type=="Rocket Fuel Tank"then local hg=320;local hm=173.42;if hk>65000 then hg=40000;hm=25740 elseif hk>6000 then hg=5120;hm=4720 elseif hk>700 then hg=640;hm=886.72 end;hf=hl-hm;if fuelTankHandlingRocket>0 then hg=hg+hg*fuelTankHandlingRocket*0.1 end;hg=he(hf,hg)aG[#aG+1]={am[bR],hh(am[bR]),hg,hm,hf,dF}end;if type=="Space Fuel Tank"then local hg=2400;local hm=182.67;if hk>10000 then hg=76800;hm=5480 elseif hk>1300 then hg=9600;hm=988.67 end;hf=hl-hm;if fuelTankHandlingSpace>0 then hg=hg+hg*fuelTankHandlingSpace*0.2 end;hg=he(hf,hg)aF[#aF+1]={am[bR],hh(am[bR]),hg,hm,hf,dF}end end end end;local function hn()if gyro~=nil then ao=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(aj or not aj and al<10000)then for _,bI in pairs(door)do bI.toggle()end end;if switch then for _,bI in pairs(switch)do bI.toggle()end end;if forcefield and(aj or not aj==0 and al<10000)then for _,bI in pairs(forcefield)do bI.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if J then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local ho=d4()if ho~=-1 or not aj and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not J then GearExtended=true end else BrakeIsOn=false end;if b6~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b6)if b6==0 and not J then GearExtended=true;BrakeIsOn=true end else b6=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if aj and ho~=-1 then b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aj end;local function hp(hq,hr,hs,ht,dh,e8,hu,hv,hw)local hx={enableName=hq,disableName=hr,width=hs,height=ht,x=dh,y=e8,toggleVar=hu,toggleFunction=hv,drawCondition=hw,hovered=false}table.insert(ax,hx)return hx end;local function hy()local function hz()if dbHud_1 then local position=bB;local dy=planet.name..". "..#SavedLocations;if radar_1 then local gy,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gy~=nil and gy~=""then dy=dy.." "..radar_1.getConstructName(gy)end end;local cw={}local hA=false;if planet.hasAtmosphere then hA=true end;cw={position=position,name=dy,atmosphere=hA,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cw;table.insert(aT[0],cw)bQ()T="Location saved as "..dy else T="Databank must be installed to save locations"end end;local function hB()TurnBurn=not TurnBurn end;local function hC(hD)if hD==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;R=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hE()hC(1)end;local function hF()local cv=-1;cv=cb(aT[0])if cv>-1 then table.remove(aT[0],cv)end;cv=-1;cv=cb(SavedLocations)if cv~=-1 then T=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cv)end;cn()bQ()end;local function hG()local dy=AutopilotTargetName;if dy==nil then local f4,ca=c6((bB-CustomTarget.position):len())dy=CustomTarget.name.." "..f4 ..ca end;if dy==nil then dy="None"end;return"Engage Autopilot: "..dy end;local function hH()local dy=AutopilotTargetName;if dy==nil then dy=CustomTarget.name end;if dy==nil then dy="None"end;return"Disable Autopilot: "..dy end;local hI=50;local hJ=260;local hK=hp("Enable Brake Toggle","Disable Brake Toggle",hJ,hI,ay/2-hJ/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then T="Brakes in Toggle Mode"else T="Brakes in Default Mode"end end)hp("Align Prograde","Disable Prograde",hJ,hI,ay/2-hJ/2-50-hK.width,az/2-hI+380,function()return ProgradeIsOn end,hE)hp("Align Retrograde","Disable Retrograde",hJ,hI,ay/2-hJ/2+hK.width+50,az/2-hI+380,function()return RetrogradeIsOn end,hC,function()return ak==0 end)local hL=hp(hG,hH,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,cp)hp("Save Position","Save Position",200,hL.height,hL.x+hL.width+30,hL.y,function()return false end,hz,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hp("Update Position","Update Position",200,hL.height,hL.x+hL.width+30,hL.y,function()return false end,ct,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hp("Clear Position","Clear Position",200,hL.height,hL.x-200-30,hL.y,function()return true end,hF,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hI=60;hJ=300;local dh=10;local e8=az/2-500;hp("Show Help","Hide Help",hJ,hI,dh,e8,function()return showHelp end,function()showHelp=not showHelp end)local e8=az/2-300;hp("Enable Turn and Burn","Disable Turn and Burn",hJ,hI,dh,e8,function()return TurnBurn end,hB)hp("Horizontal Takeoff Mode","Vertical Takeoff Mode",hJ,hI,dh+hJ+20,e8,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then T="Vertical Takeoff Mode"else T="Horizontal Takeoff Mode"end end,function()return bC end)e8=e8+hI+20;hp("Show Orbit Display","Hide Orbit Display",hJ,hI,dh,e8,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then T="Orbit Display Enabled"else T="Orbit Display Disabled"end end)hp("Engage Orbiting","Cancel Orbiting",hJ,hI,dh+hJ+20,e8,function()return IntoOrbit end,ToggleIntoOrbit,function()return ak==0 and unit.getClosestPlanetInfluence()>0 end)e8=e8+hI+20;hp("Glide Re-Entry","Cancel Glide Re-Entry",hJ,hI,dh,e8,function()return Reentry end,function()ad=true;hE()end,function()return planet.hasAtmosphere and not aj end)hp("Parachute Re-Entry","Cancel Parachute Re-Entry",hJ,hI,dh+hJ+20,e8,function()return Reentry end,cU,function()return planet.hasAtmosphere and not aj end)e8=e8+hI+20;hp("Engage Follow Mode","Disable Follow Mode",hJ,hI,dh,e8,function()return R end,cj,function()return l()==1 end)hp("Enable Repair Arrows","Disable Repair Arrows",hJ,hI,dh+hJ+20,e8,function()return aI end,function()aI=not aI;if aI then T="Repair Arrows Enabled"else T="Repair Arrows Diabled"end end,function()return l()==1 end)e8=e8+hI+20;if not ExternalAGG then hp("Enable AGG","Disable AGG",hJ,hI,dh,e8,function()return antigrav.getState()==1 end,cZ,function()return antigrav~=nil end)end;e8=e8+hI+20;hp(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,hJ*2,hI,dh,e8,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hM()local hN=nil;local hO=nil;local hP=nil;local hQ=nil;aT=fU()for bR,bI in pairs(aT[0])do if hN==nil or bI.center.x<hN then hN=bI.center.x end;if hO==nil or bI.center.x>hO then hO=bI.center.x end;if hP==nil or bI.center.y<hP then hP=bI.center.y end;if hQ==nil or bI.center.y>hQ then hQ=bI.center.y end end;aU=""local hR=1.1*(hO-hN)/1920;local hS=1.4*(hQ-hP)/1080;for bR,bI in pairs(aT[0])do local dh=960+bI.center.x/hR;local e8=540+bI.center.y/hS;aU=aU..'<circle cx="'..dh..'" cy="'..e8 ..'" r="'..bI.radius/hR*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not n(bI.name,"Moon")and not n(bI.name,"Sanctuary")and not n(bI.name,"Space")then aU=aU.."<text x='"..dh.."' y='"..e8+bI.radius/hR*30+20 .."' font-size='28' fill="..aq.." text-anchor='middle' font-family='Montserrat'>"..bI.name.."</text>"end end;local fJ=bB;local dh=960+fJ.x/hR;local e8=540+fJ.y/hS;aU=aU..'<circle cx="'..dh..'" cy="'..e8 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='"..dh.."' y='"..e8-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aU=aU..[[</svg>]]aV=hR;aW=hS;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aU)local fJ=bB;local dh=960+fJ.x/hR;local e8=540+fJ.y/hS;aU='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='80' y='105' font-size='18' fill="..aq.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aX=screen_2.addContent((dh-80)/19.20,(e8-80)/10.80,aU)end end;local function hT()for bR,bI in pairs(SavedLocations)do table.insert(aT[0],bI)end;bQ()end;local function hU()local a_={}local hV=30000000/3600;local hW=hV*hV;local hX=100;local function hY(bI)return 1/math.sqrt(1-bI*bI/hW)end;function a_.computeAccelerationTime(hZ,h_,i0)local i1=hV*math.asin(hZ/hV)return(hV*math.asin(i0/hV)-i1)/h_ end;function a_.computeDistanceAndTime(hZ,i0,i2,i3,i4,i5)i4=i4 or 0;i5=i5 or 0;local i6=hZ<=i0;local i7=i3*(i6 and 1 or-1)/i2;local i8=-i5/i2;local i9=i7+i8;if i6 and i9<=0 or not i6 and i9>=0 then return-1,-1 end;local ia,ib=0,0;if i7~=0 and i4>0 then local i1=math.asin(hZ/hV)local ic=math.pi*(i7/2+i8)local id=i7*i4;local ie=hV*math.pi;local bI=function(f_)local ig=(ic*f_-id*math.sin(math.pi*f_/2/i4)+ie*i1)/ie;local ih=math.tan(ig)return hV*ih/math.sqrt(ih*ih+1)end;local ii=i6 and function(g1)return g1>=i0 end or function(g1)return g1<=i0 end;ib=2*i4;if ii(bI(ib))then local ij=0;while math.abs(ib-ij)>0.5 do local f_=(ib+ij)/2;if ii(bI(f_))then ib=f_ else ij=f_ end end end;local ik=hZ;local il=ib/hX;for im=1,hX do local bO=bI(im*il)ia=ia+(bO+ik)*il/2;ik=bO end;if ib<2*i4 then return ia,ib end;hZ=ik end;local i1=hV*math.asin(hZ/hV)local bu=(hV*math.asin(i0/hV)-i1)/i9;local io=hW*math.cos(i1/hV)/i9;local a9=io-hW*math.cos((i9*bu+i1)/hV)/i9;return a9+ia,bu+ib end;function a_.computeTravelTime(hZ,h_,a9)if a9==0 then return 0 end;if h_>0 then local i1=hV*math.asin(hZ/hV)local io=hW*math.cos(i1/hV)/h_;return(hV*math.acos(h_*(io-a9)/hW)-i1)/h_ end;if hZ==0 then return-1 end;assert(hZ>0,'Acceleration and initial speed are both zero.')return a9/hZ end;function a_.lorentz(bI)return hY(bI)end;return a_ end;local function ip()local vec3=require('cpml.vec3')local fV=fV()local function g0(g1)return type(g1)=='string'end;local function fZ(f_)return type(f_)=='table'end;local function bV(bW,bX)if bW==0 then return math.abs(bX)<1e-09 end;if bX==0 then return math.abs(bW)<1e-09 end;return math.abs(bW-bX)<math.max(math.abs(bW),math.abs(bX))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c2)assert(self.body)local a9=c2+self.body.radius;if not bV(a9,0)then local orbit=math.sqrt(self.body.GM/a9)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gq,bN)assert(self.body)assert(fZ(gq)or g0(gq))assert(fZ(bN))local fJ=(g0(gq)or fV.isMapPosition(gq))and self.body:convertToWorldCoordinates(gq)or vec3(gq)local bI=vec3(bN)local iq=fJ-self.body.center;local gV=bI:len2()local ir=iq:len()local is=self.body.GM;local it=((gV-is/ir)*iq-iq:dot(bI)*bI)/is;local bW=is/(2*is/ir-gV)local iu=it:len()local gW=it:normalize()local iv=bW*(1-iu)local iw=bW*(1+iu)local ix=iv*gW+self.body.center;local iy=iu<=1 and-iw*gW+self.body.center or nil;local iz=math.sqrt(bW*is*(1-iu*iu))local iA=iy and 2*math.pi*math.sqrt(bW^3/is)local iB=math.acos(it:dot(iq)/(iu*ir))if iq:dot(bI)<0 then iB=-(iB-2*math.pi)end;local iC=math.acos((math.cos(iB)+iu)/(1+iu*math.cos(iB)))local iD=iC;if iD<0 then iD=iD+2*math.pi end;local iE=iD-iu*math.sin(iD)local iF=0;local iG=0;local iH=0;if iA~=nil then iF=iE/(2*math.pi/iA)iG=iA-iF;iH=iG+iA/2;if iB-math.pi>0 then iG=iF;iH=iG+iA/2 end;if iH>iA then iH=iH-iA end end;return{periapsis={position=ix,speed=iz/iv,circularOrbitSpeed=math.sqrt(is/iv),altitude=iv-self.body.radius},apoapsis=iy and{position=iy,speed=iz/iw,circularOrbitSpeed=math.sqrt(is/iw),altitude=iw-self.body.radius},currentVelocity=bI,currentPosition=fJ,eccentricity=iu,period=iA,eccentricAnomaly=iC,meanAnomaly=iE,timeToPeriapsis=iG,timeToApoapsis=iH}end;local function iI(iJ)local h3=fV.BodyParameters(iJ.planetarySystemId,iJ.bodyId,iJ.radius,iJ.center,iJ.GM)return setmetatable({body=h3},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iI(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})h9()coroutine.yield()hd()coroutine.yield()hn()hy()coroutine.yield()hM()aY=fV()aZ=aY(fU())a_=hU()b1=ip()b2=d9()hT()bQ()ck()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ak>0 or ak==0 and al<10000)then for _,bI in pairs(door)do bI.toggle()end end;if switch then for _,bI in pairs(switch)do bI.toggle()end end;if forcefield and(ak>0 or ak==0 and al<10000)then for _,bI in pairs(forcefield)do bI.toggle()end end;d7()if button then button.activate()end end;function script.onTick(iK)local function iL()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aj then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iM()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iN(iO)local gm=500000;local iP,iQ,iR=math.huge;local iS=false;local iT=vec3({13771471,7435803,-128971})local iU=18000000;iP=vec3(iO):dist(iT)if iP<iU then return true,math.abs(iP-iU),"Safe Zone",0 end;iQ=vec3(iO):dist(vec3(planet.center))if iQ<gm then iS=true end;if math.abs(iQ-gm)<math.abs(iP-iU)then return iS,math.abs(iQ-gm),planet.name,planet.bodyId else return iS,math.abs(iP-iU),"Safe Zone",0 end end;local function iV(dg)local iW=0;av=""local iX=aH;local iY=0;local iZ=0;local i_=0;local dH=0;local dI=""local j0=core.getElementHitPointsById;for bR in pairs(am)do local hk=0;local j1=0;j1=g(am[bR])hk=j0(am[bR])iY=iY+hk;if hk<j1 then if hk==0 then i_=i_+1 else iZ=iZ+1 end;if aI and#as==0 then position=vec3(core.getElementPositionById(am[bR]))local dh=position.x-aR;local e8=position.y-aR;local j2=position.z-aR;table.insert(as,core.spawnArrowSticker(dh,e8,j2+1,"down"))table.insert(as,core.spawnArrowSticker(dh,e8,j2+1,"down"))core.rotateSticker(as[2],0,0,90)table.insert(as,core.spawnArrowSticker(dh+1,e8,j2,"north"))table.insert(as,core.spawnArrowSticker(dh+1,e8,j2,"north"))core.rotateSticker(as[4],90,90,0)table.insert(as,core.spawnArrowSticker(dh-1,e8,j2,"south"))table.insert(as,core.spawnArrowSticker(dh-1,e8,j2,"south"))core.rotateSticker(as[6],90,-90,0)table.insert(as,core.spawnArrowSticker(dh,e8-1,j2,"east"))table.insert(as,core.spawnArrowSticker(dh,e8-1,j2,"east"))core.rotateSticker(as[8],90,0,90)table.insert(as,core.spawnArrowSticker(dh,e8+1,j2,"west"))table.insert(as,core.spawnArrowSticker(dh,e8+1,j2,"west"))core.rotateSticker(as[10],-90,0,90)table.insert(as,am[bR])end elseif aI and#as>0 and as[11]==am[bR]then for dA in pairs(as)do core.deleteSticker(as[dA])end;as={}end end;iW=c(iY/iX*100)if iW<100 then dg[#dg+1]=[[<g class="pbright txt">]]dH=c(iW*2.55)dI=d("rgb(%d,%d,%d)",255-dH,dH,0)if iW<100 then dg[#dg+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dI,iW)if i_>0 then dg[#dg+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dI,i_,iZ)elseif iZ>0 then dg[#dg+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dI,iZ)end end;dg[#dg+1]=[[<\g>]]end end;local function j3(dg)local j4=c(utils.clamp(a9/(ay/4)*255,0,255))dg[#dg+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a6,a7,c(u+0.5)+j4,c(w+0.5)-j4,c(v+0.5)-j4)end;local function j5()local j6=LastMaxBrakeInAtmo/a1:getGravity(a1.center+vec3(0,0,1)*a1.radius):len()return j6 end;local function j7()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a1.center-bB):len()else AutopilotDistance=(CustomTarget.position-bB):len()end end;local bO=bz;local j8=unit.getThrottle()/100;if AtmoSpeedAssist then j8=z end;local j9,ja=a_.computeDistanceAndTime(bz,MaxGameVelocity,k(),Nav:maxForceForward()*j8,warmup,0)local X,Y;if not TurnBurn then X,Y=cX(MaxGameVelocity)else X,Y=cY(MaxGameVelocity)end;local _,jb;if not TurnBurn and bO>0 then _,jb=cX(bO)else _,jb=cY(bO)end;local jc=0;local jd=0;if AutopilotCruising or not Autopilot and bO>5 then jd=a_.computeTravelTime(bO,0,AutopilotDistance)elseif X+j9<AutopilotDistance then jc=AutopilotDistance-(X+j9)jd=a_.computeTravelTime(8333.0556,0,jc)else local je=(AutopilotDistance-X)/j9;j9=AutopilotDistance-X;ja=ja*je end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return jd elseif AutopilotBraking then return jb elseif AutopilotCruising then return jd+jb else return ja+Y+jd end end;local function jf()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function jg()if radar_1 then local jh=radar_1.getEntries()local ji=radar_1.getData()local jj=bH(1770)local jk=bJ(330)if#jh>0 then local jl=ji:find('identifiedConstructs":%[%]')if jl==nil and perisPanelID==nil then ac=1;cd()end;if jl~=nil and perisPanelID~=nil then cd()end;if radarPanelID==nil then cd()end;aa=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jj,jk,#jh)local jm={}for bR,bI in pairs(jh)do if radar_1.hasMatchingTransponder(bI)==1 then table.insert(jm,bI)end end;if#jm>0 then local e8=bJ(15)local dh=bH(1370)aa=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aa,dh,e8)for bR,bI in pairs(jm)do e8=e8+20;aa=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aa,dh,e8,radar_1.getConstructName(bI))end end else local jn;jn=ji:find('worksInEnvironment":false')if jn then aa=d([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jj,jk)else aa=d([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jj,jk)end;if radarPanelID~=nil then ac=0;cd()end end end end;local function jo()local dF=p()local eT=bz;local jp=dF-an;if eT>1.38889 then eT=eT/1000;local jq=eT*(dF-an)TotalDistanceTravelled=TotalDistanceTravelled+jq;a2=a2+jq end;a3=a3+jp;TotalFlightTime=TotalFlightTime+jp;an=dF end;local function jr()for _,bI in pairs(ax)do if bI.hovered then if not bI.drawCondition or bI.drawCondition()then bI.toggleFunction()end;bI.hovered=false end end end;local function js()local function jt(ju,jv,dh,e8,hs,ht)if ju>dh and ju<dh+hs and jv>e8 and jv<e8+ht then return true else return false end end;local dh=a6+ay/2;local e8=a7+az/2;for _,bI in pairs(ax)do bI.hovered=jt(dh,e8,bI.x,bI.y,bI.width,bI.height)end end;local function jw(dg)local function jx(dg,jy,hover,dh,e8,ig,jz,jA,jB,jC,jD)if type(jC)=="function"then jC=jC()end;if type(jD)=="function"then jD=jD()end;dg[#dg+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",dh,e8,ig,jz)if jy then dg[#dg+1]=d("%s'",jA)else dg[#dg+1]=jB end;if hover then dg[#dg+1]=" style='stroke:white; stroke-width:2'"else dg[#dg+1]=" style='stroke:black; stroke-width:1'"end;dg[#dg+1]="></rect>"dg[#dg+1]=d("<text x='%f' y='%f' font-size='24' fill='",dh+ig/2,e8+jz/2+5)if jy then dg[#dg+1]="black"else dg[#dg+1]="white"end;dg[#dg+1]="' text-anchor='middle' font-family='Montserrat'>"if jy then dg[#dg+1]=d("%s</text>",jC)else dg[#dg+1]=d("%s</text>",jD)end end;local jE="rgb(50,50,50)'"local jF="rgb(210,200,200)"local jG=jx;for _,bI in pairs(ax)do local hr=bI.disableName;local hq=bI.enableName;if type(hr)=="function"then hr=hr()end;if type(hq)=="function"then hq=hq()end;if not bI.drawCondition or bI.drawCondition()then jG(dg,bI.toggleVar(),bI.hovered,bI.x,bI.y,bI.width,bI.height,jF,jE,hr,hq)end end end;if iK=="tenthSecond"then if ak>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iL()end;if AutopilotTargetName~=nil then local jH=CustomTarget~=nil;planetMaxMass=j5()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=j7()if jH and not Autopilot then a9=(bB-CustomTarget.position):len()else a9=(AutopilotTargetCoords-bB):len()end;if not TurnBurn then X,Y=cX(bz)Z,a0=cX(MaxGameVelocity)else X,Y=cY(bz)Z,a0=cY(MaxGameVelocity)end;local f4,ca=c6(a9)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..f4 ..'", "unit":"'..ca..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..c_(travelTime)..'", "unit":""}')f4,ca=c6(X)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f4 ..'", "unit":"'..ca..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..c_(Y)..'", "unit":""}')f4,ca=c6(Z)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f4 ..'", "unit":"'..ca..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..c_(a0)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f4,ca=c6(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",f4)..'", "unit":"'..ca..'"}')if ak>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iM()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iK=="oneSecond"then ah=false;bK(nil,true)jo()jg()jf()local dg={}dg=b2.DrawOdometer(dg,a2,TotalDistanceTravelled,a3)if ShouldCheckDamage then iV(dg)end;ab=table.concat(dg,"")collectgarbage("collect")elseif iK=="fiveSecond"then ai=dbHud_1.getStringValue("SPBAutopilotTargetName")if ai~=nil and ai~=""and ai~="SatNavNotChanged"then local c9=e(dbHud_1.getStringValue("SavedLocations"))if c9~=nil then _G["SavedLocations"]=c9;local cv=-1;local cw;for bR,bI in pairs(SavedLocations)do if bI.name and bI.name=="SatNav Location"then cv=bR;break end end;if cv~=-1 then cw=SavedLocations[cv]cv=-1;for bR,bI in pairs(aT[0])do if bI.name and bI.name=="SatNav Location"then cv=bR;break end end;if cv>-1 then aT[0][cv]=cw end;bQ()T=cw.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ai then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ck()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iK=="msgTick"then local dg={}b2.DisplayMessage(dg,"empty")T="empty"unit.stopTimer("msgTick")a8=3 elseif iK=="animateTick"then b4=true;b3=false;a6=0;a7=0;unit.stopTimer("animateTick")elseif iK=="hudTick"then local dg={}b2.HUDPrologue(dg)if showHud then b2.UpdateHud(dg)else b2.DisplayOrbitScreen(dg)b2.DrawWarnings(dg)end;b2.HUDEpilogue(dg)dg[#dg+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ay,az)if T~="empty"then b2.DisplayMessage(dg,T)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b2.DrawDeadZone(dg)end end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then js()jw(dg)if screen_1.getMouseState()==1 then jr()end;dg[#dg+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)elseif system.isViewLocked()==0 then if l()==1 and S then js()jw(dg)if not b3 and not b4 then local jI=table.concat(dg,"")dg={}dg[#dg+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)dg[#dg+1]=aU;dg[#dg+1]=jI;dg[#dg+1]="</body>"b3=true;dg[#dg+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dg,"")system.setScreen(content)elseif b4 then local jI=table.concat(dg,"")dg={}dg[#dg+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)dg[#dg+1]=aU;dg[#dg+1]=jI;dg[#dg+1]="</body>"end;if not b3 then dg[#dg+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end else jr()end else if not S and l()==0 then jr()if a9>DeadZone then if DisplayDeadZone then j3(dg)end end else js()jw(dg)end;dg[#dg+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end;dg[#dg+1]=[[</svg></body>]]content=table.concat(dg,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iK=="apTick"then aj=h()>0;ak=h()al=core.getAltitude()bu=p()local jJ=bu-ba;ba=bu;local fC=getRoll(bA,bw,bx)local fD=fC/180*math.pi;local fE=math.cos(fD)local fF=math.sin(fD)local jK=cy(bA,bw,bx*fE+bv*fF)local jL=-math.deg(cD(bv,by,bw))local jM=math.deg(cD(bx,by,bw))local jN=1;local jO=1;b9=aj and jL<-YawStallAngle or jL>YawStallAngle or jM<-PitchStallAngle or jM>PitchStallAngle;b7=system.getMouseDeltaX()b8=system.getMouseDeltaY()if InvertMouse and not S then b8=-b8 end;M=0;Q=0;L=0;sys=aZ[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b1(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),by)if al==0 then al=(bB-planet.center):len()-planet.radius end;ag=ce()local bL=planet:getGravity(core.getConstructWorldPos()):len()*k()bb=0;b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not aj then x,y,_,_=iN(bB)else x=true end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then a6=screen_1.getMouseX()*ay;a7=screen_1.getMouseY()*az elseif system.isViewLocked()==0 then if l()==1 and S then if not b3 then a6=a6+b7;a7=a7+b8 end else a6=0;a7=0 end else a6=a6+b7;a7=a7+b8;a9=math.sqrt(a6*a6+a7*a7)if not S and l()==0 then if userControlScheme=="virtual joystick"then if a6>0 and a6>DeadZone then M=M-(a6-DeadZone)*MouseXSensitivity elseif a6<0 and a6<DeadZone*-1 then M=M-(a6+DeadZone)*MouseXSensitivity else M=0 end;if a7>0 and a7>DeadZone then L=L-(a7-DeadZone)*MouseYSensitivity elseif a7<0 and a7<DeadZone*-1 then L=L-(a7+DeadZone)*MouseYSensitivity else L=0 end elseif userControlScheme=="mouse"then a6=0;a7=0;L=(-utils.smoothstep(b8,-100,100)+0.5)*2*jN;M=(-utils.smoothstep(b7,-100,100)+0.5)*2*jO else a6=0;a7=0 end end end;local jP=bz>8334;if bz>SpaceSpeedLimit/3.6 and not aj and not Autopilot and not jP then T="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not jP and LastIsWarping then if not BrakeIsOn then cH()end;if Autopilot then cp()end end;LastIsWarping=jP;if aj and ak>0.09 then if bz>be/3.6 and not AtmoSpeedAssist and not ap then BrakeIsOn=true;ap=true elseif not AtmoSpeedAssist and ap then if bz<be/3.6 then BrakeIsOn=false;ap=false end end end;if BrakeIsOn then P=1 else P=0 end;if ProgradeIsOn then if ad then BrakeIsOn=false;local jQ=false;if CustomTarget~=nil then jQ=cL(CustomTarget.position-bB,0.01)else jQ=cL(vec3(by),0.01)end;b5=true;if jQ and(math.abs(fC)<2 or math.abs(jK)>85)and bz>=be/3.6-1 then if(vec3(targetCoords)-bB):len()>40000 then ProgradeIsOn=false;IntoOrbit=true else BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cU()end elseif aj and AtmoSpeedAssist then bD(1)else bG(c(be))z=0 end elseif bz>H then cL(vec3(by),0.01)end end;if RetrogradeIsOn then if aj then RetrogradeIsOn=false elseif bz>H then cL(-vec3(by))end end;if not ProgradeIsOn and ad and not IntoOrbit then if ak==0 then I=true;cU()ad=false;af=true else ad=false;cp()end end;local co=bA*-1;local dL=by.x*co.x+by.y*co.y+by.z*co.z;if af and CustomTarget~=nil and(al<HoldAltitude+200 and al>HoldAltitude-200)and bz*3.6>be-100 and math.abs(dL)<20 and ak>=0.1 and(CustomTarget.position-bB):len()>2000+al then cp()af=false end;if VertTakeOff then b5=true;if dL<-30 then T="Unable to achieve lift. Safety Landing."a5=0;b5=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if al<antigrav.getBaseAltitude()-100 then bf=0;a5=15;BrakeIsOn=false elseif dL>0 then BrakeIsOn=true;a5=0 elseif dL<-30 then BrakeIsOn=true;a5=15 elseif al>=antigrav.getBaseAltitude()then BrakeIsOn=true;a5=0;VertTakeOff=false;T="Takeoff complete. Singularity engaged"end else if ak>0.08 then bf=0;BrakeIsOn=false;a5=20 elseif ak<0.08 and ak>0 then BrakeIsOn=false;if br then bf=0;a5=20 else a5=0;bf=36;bG(3500)end else b5=autoRollPreference;IntoOrbit=true;bp=false;CancelIntoOrbit=false;bj=false;bh=nil;bi=nil;if bo==nil then bo=planet end;VertTakeOff=false end end;if bf~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jR=utils.clamp(bf-jK,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jR)local jS=utils.clamp(vTpitchPID:get(),-1,1)L=jS end end;if IntoOrbit then if bo==nil then if VectorToTarget then bo=a1 else bo=planet end end;if not bm then if bo.hasAtmosphere then bn=c(bo.radius*(TargetOrbitRadius-1)+bo.noAtmosphericDensityAltitude)else bn=c(bo.radius*(TargetOrbitRadius-1)+bo.surfaceMaxAltitude)end;bm=true end;if AltitudeHold or VectorToTarget then if not ae then bn=q(HoldAltitude,1)bj=true;AltitudeHold=false end;if VectorToTarget then bl.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jT,jU=c6(bn,2)local jV=jT..jU;local jW,jX=b1(bo):escapeAndOrbitalSpeed((bB-bo.center):len()-bo.radius)local jY=fC;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and al>bn*0.9 and al<bn*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bn*0.99 and orbit.apoapsis.altitude>=bn*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bp then if bp then BrakeIsOn=false;z=0;bD(0)bp=true;bh=0;if bl.VectorToTarget or ad then local cR=CustomTarget.position-bB;local X,_=a_.computeDistanceAndTime(bz,be/3.6,k(),0,0,LastMaxBrake)if by:normalize():dot(cR:normalize())>0.5 and cR:len()>15000+X+al then bg="Orbiting to Target"else T="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;I=true;ad=false;af=true;cU()bl.VectorToTarget=false end end;if not bl.VectorToTarget and not ad then bg=nil;bk=false;bm=false;bo=nil;b5=autoRollPreference;if not af then T="Orbit established"end;bl.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bj=false;bh=nil;bi=nil;bo=nil;bp=false;bt=0 end else bt=bt+1;if bt>=2 then bp=true end end else bg="Adjusting Orbit - OrbitHeight: "..jV;bk=true;bG(jX*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jZ=dL;local j_=al-bn;local k0=math.abs(j_)if dL<10 and math.abs(jK)<10 and k0<100 then jZ=dL*2 end;if jZ<10 and math.abs(jK)<10 and k0<100 then jZ=jZ*2 end;if jZ<5 and math.abs(jK)<5 and k0<100 then jZ=jZ*4 end;VSpdPID:inject(jZ)bh=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(j_)bh=utils.clamp(bh-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local k1=2.75;local k2=math.abs(o(jW*k1))local k3=k2%50;if k3>0 then k2=k2-k3+50 end;BrakeIsOn=false;if not bj then local k4=false;local k5=false;if al<bn then bg="Aligning to orbital path - OrbitHeight: "..jV else bg="Aligning to orbital point - OrbitHeight: "..jV end;bh=0;bi=0;if jK<=bh+1 and jK>=bh-1 then k4=true else k4=false end;if jY<=bi+1 and jY>=bi-1 then k5=true else k5=false end;if k4 and k5 then bh=nil;bi=nil;bj=true end else if al<bn*0.8 then bg="Escaping planet gravity - OrbitHeight: "..jV;bh=utils.map(dL,200,0,-15,80)elseif al>=bn*0.8 and al<bn*1.15 then bg="Approaching orbital corridor - OrbitHeight: "..jV;k2=k2*0.75;bh=utils.map(dL,100,-100,-15,65)elseif al>=bn*1.15 and al<bn*1.5 then bg="Approaching orbital corridor - OrbitHeight: "..jV;k2=k2*0.75;if dL<0 or bk then bh=utils.map(al,bn*1.5,bn*1.01,-30,0)else bh=utils.map(al,bn*0.99,bn*1.5,0,30)end elseif al>bn*1.5 then bg="Reentering orbital corridor - OrbitHeight: "..jV;bh=utils.map(dL,100,-100,-65,0)k2=k2*0.75 end end;bG(c(k2))end;if bh~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local k6=bh-jK;OrbitPitchPID:inject(k6)local k7=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)L=k7 end;if bi~=nil then if jK<85 then local k8=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(k8*0.01,0,k8*0.1)end;local k9=bi-jY;OrbitRollPID:inject(k9)local ka=utils.clamp(OrbitRollPID:get(),-0.5,0.5)Q=ka end end elseif CancelIntoOrbit then bm=false;bo=nil;bD(0)CancelIntoOrbit=false end;if Autopilot and ak==0 and not ad then local targetCoords,kb=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kc=(CustomTarget.position-a1.center):normalize()local kd=kc:project_on_plane((a1.center-bB):normalize()):normalize()local ke=a1.center+kd*(a1.radius+AutopilotTargetOrbit)local kf=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))if(bB-ke):len()<(bB-kf):len()then targetCoords=ke;AutopilotTargetCoords=targetCoords else targetCoords=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))AutopilotTargetCoords=targetCoords end;local cr=bY(a1,AutopilotTargetCoords)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)kb=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kb=true;TargetSet=true;AutopilotRealigned=true;targetCoords=CustomTarget.position+(bB-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kc=(bB+by*100000-a1.center):normalize()local kd=kc:project_on_plane((a1.center-bB):normalize()):normalize()if kd:len()<1 then kc=(bB+bw*100000-a1.center):normalize()kd=kc:project_on_plane((a1.center-bB):normalize()):normalize()end;targetCoords=a1.center+kd*(a1.radius+AutopilotTargetOrbit)AutopilotTargetCoords=targetCoords;TargetSet=true;kb=true;AutopilotRealigned=true;local cr=bY(a1,AutopilotTargetCoords)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)end end;AutopilotDistance=(vec3(targetCoords)-bB):len()local f5,f6,f7=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(f8)if f8.noAtmosphericDensityAltitude>0 then return f8.radius+f8.noAtmosphericDensityAltitude else return f8.radius+f8.surfaceMaxAltitude*1.5 end end)local f9=f6;if f7~=nil and f6~=nil then f9=math.min(f7,f6)end;if f9~=nil and f9<AutopilotDistance and f5.name==a1.name then AutopilotDistance=f9 end;local jQ=true;local kg=(a1.center-(bB+vec3(by):normalize()*AutopilotDistance)):len()-a1.radius;local f4,ca=c6(kg)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f4 ..'", "unit":"'..ca..'"}')local X,Y;if not TurnBurn then X,Y=cX(bz)else X,Y=cY(bz)end;if bz>300 and AutopilotAccelerating then local cR=vec3(targetCoords)-bB;local kh=utils.clamp(math.deg(cD(bv,by:normalize(),cR:normalize()))*bz/500,-90,90)local ki=utils.clamp(math.deg(cD(bx,by:normalize(),cR:normalize()))*bz/500,-90,90)if math.abs(kh)<20 and math.abs(ki)<20 then kh=kh*2;ki=ki*2 end;if math.abs(kh)<2 and math.abs(ki)<2 then kh=kh*2;ki=ki*2 end;local jL=-math.deg(cD(bv,bw,by:normalize()))local jM=-math.deg(cD(bx,bw,by:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ki-jM)local kj=utils.clamp(apPitchPID:get(),-1,1)L=L+kj;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kh-jL)local kk=utils.clamp(apYawPID:get(),-1,1)M=M+kk;kb=true;if math.abs(kh)>2 or math.abs(ki)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kg<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(kg)end end;if not AutopilotCruising and not AutopilotBraking and not kb then jQ=cL((targetCoords-bB):normalize())elseif TurnBurn then jQ=cL(-vec3(by):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;bD(AutopilotInterplanetaryThrottle)z=q(AutopilotInterplanetaryThrottle,2)G=true end;local j8=unit.getThrottle()if AtmoSpeedAssist then j8=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or j8==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bD(0)z=0 end;if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bD(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;P=1 end;if TurnBurn then bD(100,true)z=1 end;local _,jX=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)local cR;if CustomTarget~=nil then cR=CustomTarget.position-bB end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bz<50 then T="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bz<=jX and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bD(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cr=bY(a1,AutopilotTargetCoords)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jX=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)if bz<=jX then if CustomTarget~=nil then if by:normalize():dot(cR:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cr=bY(a1,CustomTarget.position)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)WaypointSet=true end else T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bD(0)z=0;G=false;ProgradeIsOn=true;ad=true;BrakeIsOn=false;local cr=bY(a1,CustomTarget.position)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T="Autopilot completed, orbit established"P=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ad=true end end end end elseif AutopilotCruising then if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local j8=unit.getThrottle()if AtmoSpeedAssist then j8=z end;if j8>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jQ then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ad then AutopilotTargetCoords=vec3(a1.center)+(AutopilotTargetOrbit+a1.radius)*bx;AutopilotShipUp=bv;AutopilotShipRight=bx end;AutopilotRealigned=true elseif jQ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then bD(AutopilotInterplanetaryThrottle,true)z=q(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ak>0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"P=0;bD(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cr=bY(a1,CustomTarget.position)cr="::pos{"..cr.systemId..","..cr.bodyId..","..cr.latitude..","..cr.longitude..","..cr.altitude.."}"system.setWaypoint(cr)end;if R then b5=true;local ki=0;local fJ=bB+vec3(unit.getMasterPlayerRelativePosition())local kl=fJ-bB;local km=vec3(kl):project_on(bw):len()local kn=vec3(kl):project_on(bx):len()local a9=math.sqrt(km*km+kn*kn)cL(kl:normalize())local ko=40;local kp=a9<ko;local kq=100;local kr=utils.clamp((a9-ko)/2,10,kq)L=0;local jQ=math.abs(M)<0.1;if jQ and bz<kr and not kp then BrakeIsOn=false;ki=-20 else BrakeIsOn=true;ki=0 end;local ks=0;if math.abs(ki-jK)>ks then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ki-jK)local kj=pitchPID:get()L=kj end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cs=unit.getClosestPlanetInfluence()>0;local kt=HoldAltitude-al;local ku=500+bz;local kv=1;if AutoTakeoff then kv=utils.clamp(bz/100,0.1,1)end;local ki=(utils.smoothstep(kt,-ku,ku)-0.5)*2*MaxPitch*kv;if not Reentry and not ad and not VectorToTarget and bw:dot(by:normalize())<0.99 then ki=(utils.smoothstep(kt,-ku*utils.clamp(20-19*ak*10,1,20),ku*utils.clamp(20-19*ak*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ak*10,1,2)*kv end;if not AltitudeHold then ki=0 end;if LockPitch~=nil then if aj and not IntoOrbit then ki=LockPitch else LockPitch=nil end end;b5=true;local kw=L;if Reentry then local kx=c(be)local ky,kz=a_.computeDistanceAndTime(bz,kx/3.6,k(),0,0,LastMaxBrake-planet.gravity*9.8*k())local kA=al-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and al>planet.noAtmosphericDensityAltitude+5000 and bz<=kx/3.6 and bz>kx/3.6-10 and math.abs(by:normalize():dot(bw))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(ky>-1 and kA<=ky or al<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bG(kx,true)if not I then ki=-80;if ak>0.02 then T="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ki=0;b5=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and al>planet.noAtmosphericDensityAltitude+5000 then b5=true elseif al<=planet.noAtmosphericDensityAltitude+5000 then bG(kx)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==be then I=false;Reentry=false;b5=true end end end;if bz>H and not ae and not VectorToTarget and not BrakeLanding and ForceAlignment then cL(vec3(by))end;if(VectorToTarget or ae)and AutopilotTargetIndex>0 and ak>0.01 then local cR;if CustomTarget~=nil then cR=CustomTarget.position-bB else cR=a1.center-bB end;local kh=math.deg(cD(bA:normalize(),by,cR))*2;local kB=math.rad(math.abs(fC))if bz>minRollVelocity and ak>0.01 then local kC=utils.clamp(90-ki*2,-90,90)bb=utils.clamp(kh*2,-kC,kC)local kD=kh;kh=utils.clamp(utils.clamp(kh,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kB)+4*(jK-ki)*math.sin(math.rad(fC)),-YawStallAngle*0.85,YawStallAngle*0.85)ki=utils.clamp(utils.clamp(ki*math.cos(kB),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(kD)*math.sin(kB),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bb=0;kh=utils.clamp(kh,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kE=jL-kh;if not b9 and bz>minRollVelocity and ak>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kE)local kk=utils.clamp(yawPID:get(),-1,1)M=M+kk elseif aj and ag>-1 or bz<minRollVelocity then cL(cR)elseif b9 and ak>0.01 then if(jL<-YawStallAngle or jL>YawStallAngle)and ak>0.01 then cL(by)end;if(jM<-PitchStallAngle or jM>PitchStallAngle)and ak>0.01 then ki=utils.clamp(jK-jM,jK-PitchStallAngle*0.85,jK+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ae then local kF=planet:getAltitude(CustomTarget.position)local kA=math.sqrt(cR:len()^2-(al-kF)^2)local kG=LastMaxBrakeInAtmo;if kG then kG=kG*utils.clamp(bz/100,0.1,1)*ak else kG=LastMaxBrake end;if ak<0.01 then kG=LastMaxBrake end;local kH=by:len()-math.abs(dL)local kI=vec3(core.getWorldAirFrictionAcceleration())local kJ=math.sqrt(kI:len()-kI:project_on(co):len())*k()if bz>100 then X,Y=a_.computeDistanceAndTime(bz,100,k(),0,0,kG+kJ)local kK,kL=a_.computeDistanceAndTime(100,0,k(),0,0,kG/2)X=X+kK else X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,kG/2)end;StrongBrakes=true;if not ae and not Reentry and kA<=X+bz*jJ/2 and(by:project_on_plane(bA):normalize():dot(cR:project_on_plane(bA):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bD(0)z=0;if AltitudeHold then ci()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kH<0.1 or kA<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kA)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kA end elseif VectorToTarget and ak==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ae or Reentry)then if CustomTarget~=nil and a1.name==planet.name then local cR=CustomTarget.position-bB;local kF=planet:getAltitude(CustomTarget.position)local kA=math.sqrt(cR:len()^2-(al-kF)^2)local kG=LastMaxBrakeInAtmo;if not bp then bm=false;IntoOrbit=true else kG=LastMaxBrake;X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,kG/2)StrongBrakes=true;if kA<=X+bz*jJ/2 and by:project_on_plane(bA):normalize():dot(cR:project_on_plane(bA):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cU()end end;LastDistanceToTarget=kA end end end;if ak==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ae or VectorToTarget or IntoOrbit or Reentry)then if not bp then IntoOrbit=true end end;if b9 and ak>0.01 and ag==-1 and bz>minRollVelocity and VectorStatus~="Finalizing Approach"then cL(by)ki=utils.clamp(jK-jM,jK-PitchStallAngle*0.85,jK+PitchStallAngle*0.85)end;L=kw;local d5=-1;if BrakeLanding then ki=0;local kM=false;local kN=30;if b0~=nil and b0>0 then local kJ=0;local fK=utils.clamp(ak,0.4,2)local kG=LastMaxBrakeInAtmo*utils.clamp(bz/100,0.1,1)*fK;local kO=b0*fK+kG+kJ-bL;local kP=kG/2+kJ-bL;local kQ=bz-math.sqrt(math.abs(kP/2)*20/(0.5*k()))*utils.sign(kP)if kQ<0 then kQ=0 end;local kR;if bz>100 then local kS,_=a_.computeDistanceAndTime(bz,100,k(),0,0,kG)local kT,_=a_.computeDistanceAndTime(100,0,k(),0,0,math.sqrt(kG))kR=kS+kT else kR=a_.computeDistanceAndTime(bz,0,k(),0,0,math.sqrt(kG))end;if kR<20 then BrakeIsOn=false else local kU=0;if kQ>100 then local kV,_=a_.computeDistanceAndTime(kQ,100,k(),0,0,kO)local kW,_=a_.computeDistanceAndTime(100,0,k(),0,0,b0*fK+math.sqrt(kG)+kJ-bL)kU=kV+kW else kU,_=a_.computeDistanceAndTime(kQ,0,k(),0,0,b0*fK+math.sqrt(kG)+kJ-bL)end;kU=(kU+15+bz*jJ)*1.1;local kX=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kX then local kF=planet:getAltitude(CustomTarget.position)local kY=al-kF-100;local cR=CustomTarget.position-bB;local kZ=math.sqrt(cR:len()^2-(al-kF)^2)if kZ>100 then kX=false elseif kY<=kU or kU==-1 then BrakeIsOn=true;kM=true else BrakeIsOn=false;kM=true end end;if not kX and CalculateBrakeLandingSpeed then if kU>=kN then BrakeIsOn=true else BrakeIsOn=false end;kM=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)d5=ag;if d5>-1 then b5=autoRollPreference;if bz<1 or by:normalize():dot(bA)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a5=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and by:normalize():dot(-co)<0.999 then BrakeIsOn=true elseif dL<-brakeLandingRate and not kM then BrakeIsOn=true elseif not kM then BrakeIsOn=false end end;if AutoTakeoff or ae then local f5,f7,f6;if AutopilotTargetCoords~=nil then f5,f7,f6=aZ:getPlanetarySystem(0):castIntersections(bB,(AutopilotTargetCoords-bB):normalize(),function(f8)return f8.radius+f8.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if al>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bD(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(ki)<15 and al/HoldAltitude>0.75 then AutoTakeoff=false;if not ae then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ae and bz<H then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;bD(0)z=0 elseif ae then bD(0)z=0;BrakeIsOn=true end elseif ae and ak==0 and a1~=nil and(f5==nil or f5.name==a1.name)then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local k_=ce()>-1;local l0=jK;if(VectorToTarget or ae)and not k_ and bz>minRollVelocity and ak>0.01 then local kB=math.rad(math.abs(fC))l0=jK*math.abs(math.cos(kB))+jM*math.sin(kB)end;local l1=utils.clamp(ki-l0,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ak<0.01 and VectorToTarget then l1=utils.clamp(ki-l0,-85,MaxPitch)elseif ak<0.01 then l1=utils.clamp(ki-l0,-MaxPitch,MaxPitch)end;if math.abs(fC)<5 or VectorToTarget or BrakeLanding or k_ or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(l1)local kj=pitchPID:get()L=L+kj end end;if antigrav~=nil and(antigrav and not ExternalAGG and al<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function l2(l3,kr)local l4=vec3()local l5=vec3()if l3==axisCommandId.longitudinal then l4=vec3(core.getConstructOrientationForward())l5=bw elseif l3==axisCommandId.vertical then l4=vec3(core.getConstructOrientationUp())l5=bv elseif l3==axisCommandId.lateral then l4=vec3(core.getConstructOrientationRight())l5=bx else return vec3()end;local l6=vec3(core.getWorldGravity())local l7=l6:dot(l5)local l8=vec3(core.getWorldAirFrictionAcceleration())local l9=l8:dot(l5)local la=vec3(core.getVelocity())local lb=la:dot(l4)local lc=kr*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lc-lb)local ld=targetSpeedPID2:get()local le=(ld-l9-l7)*l5;return le end;local function lf(l3,kr)local l4=vec3()local l5=vec3()if l3==axisCommandId.longitudinal then l4=vec3(core.getConstructOrientationForward())l5=bw elseif l3==axisCommandId.vertical then l4=vec3(core.getConstructOrientationUp())l5=bv elseif l3==axisCommandId.lateral then l4=vec3(core.getConstructOrientationRight())l5=bx else return vec3()end;local l6=vec3(core.getWorldGravity())local l7=l6:dot(l5)local l8=vec3(core.getWorldAirFrictionAcceleration())local l9=l8:dot(l5)local la=vec3(core.getVelocity())local lb=la:dot(l4)local lc=kr*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lc-lb)local ld=targetSpeedPID:get()local le=(ld-l9-l7)*l5;return le end;if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lg=utils.clamp(K+L+system.getControlDeviceForwardInput(),-1,1)local lh=utils.clamp(N+Q+system.getControlDeviceYawInput(),-1,1)local li=utils.clamp(O+M-system.getControlDeviceLeftRightInput(),-1,1)local lj=P;bA=vec3(core.getWorldVertical())if bA==nil or bA:len()==0 then bA=(planet.center-bB):normalize()end;bB=vec3(core.getConstructWorldPos())bv=vec3(core.getConstructWorldOrientationUp())bw=vec3(core.getConstructWorldOrientationForward())bx=vec3(core.getConstructWorldOrientationRight())by=vec3(core.getWorldVelocity())bz=vec3(by):len()local lk=by:normalize()local ll=getRoll(bA,bw,bx)local lm=math.abs(ll)local ln=utils.sign(ll)local lo=vec3(core.getWorldAngularVelocity())local lp=lg*pitchSpeedFactor*bx+lh*rollSpeedFactor*bw+li*yawSpeedFactor*bv;if bA:len()>0.01 and(ak>0.0 or ProgradeIsOn or Reentry or ad or AltitudeHold)then local fC=getRoll(bA,bw,bx)local fD=fC/180*math.pi;local fE=math.cos(fD)local fF=math.sin(fD)local jK=cy(bA,bw,bx*fE+bv*fF)if b5==true and math.abs(bb-ll)>autoRollRollThreshold and lh==0 and math.abs(jK)<85 then local lq=bb;local k8=autoRollFactor;if ak==0 then k8=k8/4;bb=0;lq=0 end;if rollPID==nil then rollPID=pid.new(k8*0.01,0,k8*0.1)end;rollPID:inject(lq-ll)local lr=rollPID:get()lp=lp+lr*bw end end;if bA:len()>0.01 and ak>0.0 then local ls=20.0;if turnAssist==true and lm>ls and lg==0 and li==0 then local lt=turnAssistFactor*0.1;local lu=turnAssistFactor*0.025;local lv=(lm-ls)/(180-ls)*180;local lw=0;if lv<90 then lw=lv/90 elseif lv<180 then lw=(180-lv)/90 end;lw=lw*lw;local lx=-ln*lu*(1.0-lw)local ly=lt*lw;lp=lp+ly*bx+lx*bv end end;local lz=1;local lA=0;local lB=1;if system.getMouseWheel()>0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local dL=-bA:dot(by)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(be/3.6-by:dot(bw))local lC=throttlePID:get()C=utils.clamp(lC,-1,1)if C<z and ak>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-be/3.6)local lD=utils.clamp(brakePID:get(),0,1)if ak>0 and dL<-80 or ak>0.005 then A=lD end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local lE=''local lF=vec3()local lG=l2(axisCommandId.vertical,a5*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lG,lA)local lH='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lH=lH..ExtraLongitudeTags end;local lI=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local lJ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lH,axisCommandId.longitudinal)local lK=lf(axisCommandId.lateral,LeftAmount*1000)lE=lE..' , '.."lateral airfoil , lateral ground "lF=lF+lK;if lF:len()>constants.epsilon then Nav:setEngineForceCommand(lE,lF,lA,'','','',lB)end;Nav:setEngineForceCommand(lH,lJ,lz)local lL='thrust analog vertical fueled 'local lM='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lM=lM..ExtraLateralTags end;if ExtraVerticalTags~="none"then lL=lL..ExtraVerticalTags end;if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lL,lG,lz)else Nav:setEngineForceCommand(lL,vec3(),lz)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lM,lK,lz)else Nav:setEngineForceCommand(lM,vec3(),lz)end;if lj==0 then lj=A end;local lN=-lj*(brakeSpeedFactor*by+brakeFlatFactor*lk)Nav:setEngineForceCommand('brake',lN)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kr=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-kr/3.6)local lD=utils.clamp(brakePID:get(),0,1)lj=utils.clamp(lj+lD,0,1)end;local lN=-lj*(brakeSpeedFactor*by+brakeFlatFactor*lk)Nav:setEngineForceCommand('brake',lN)local lE=''local lF=vec3()local lO=false;local lH='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lH=lH..ExtraLongitudeTags end;local lI=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if lI==axisCommandType.byThrottle then local lJ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lH,axisCommandId.longitudinal)Nav:setEngineForceCommand(lH,lJ,lz)elseif lI==axisCommandType.byTargetSpeed then local lJ=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lE=lE..' , '..lH;lF=lF+lJ;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lO=true end end;local lM='thrust analog lateral 'if ExtraLateralTags~="none"then lM=lM..ExtraLateralTags end;local lP=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if lP==axisCommandType.byThrottle then local lQ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lM,axisCommandId.lateral)Nav:setEngineForceCommand(lM,lQ,lz)elseif lP==axisCommandType.byTargetSpeed then local lK=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lE=lE..' , '..lM;lF=lF+lK end;local lL='thrust analog vertical 'if ExtraVerticalTags~="none"then lL=lL..ExtraVerticalTags end;local lR=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lR==axisCommandType.byThrottle then local lG=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lL,axisCommandId.vertical)if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lL,lG,lz,'airfoil','ground','',lB)else Nav:setEngineForceCommand(lL,vec3(),lz)Nav:setEngineForceCommand('airfoil vertical',lG,lz,'airfoil','','',lB)Nav:setEngineForceCommand('ground vertical',lG,lz,'ground','','',lB)end elseif lR==axisCommandType.byTargetSpeed then if a5<0 then Nav:setEngineForceCommand('hover',vec3(),lz)end;local lS=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lE=lE..' , '..lL;lF=lF+lS end;if lF:len()>constants.epsilon then if P~=0 or lO or math.abs(lk:dot(bw))<0.8 then lE=lE..', brake'end;Nav:setEngineForceCommand(lE,lF,lA,'','','',lB)end end;local lT=torqueFactor*(lp-lo)local lU=vec3(core.getWorldAirFrictionAngularAcceleration())lT=lT-lU;Nav:setEngineTorqueCommand('torque',lT,lz,'airfoil','','',lB)Nav:setBoosterCommand('rocket_engine')if W and not VanillaRockets then local bO=vec3(core.getVelocity()):len()local lV=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lW=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bO*3.6>lW*(1-lV)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO*3.6<lW*(1-lV)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local j8=unit.getThrottle()if AtmoSpeedAssist then j8=z*100 end;local kr=j8/100;if h==0 then kr=kr*MaxGameVelocity;if bO>=kr*(1-lV)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO<kr*(1-lV)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kx=c(be)kr=kr*kx/3.6;if bO>=kr*(1-lV)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bO<kr*(1-lV)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c9=coroutine.resume(beginSetup)if c9 then SetupComplete=true end else Nav:update()if not b3 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lX)local function lY()aw=not aw;if not aw then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function lZ()if LockPitch==nil and aj then LockPitch=cy(bA,bw,bx)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function l_()if ah then ah=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;R=false;G=false;ad=false;ae=false;I=false;b5=autoRollPreference;VectorToTarget=false;TurnBurn=false;ao=false;LockPitch=nil;IntoOrbit=false else ah=true end end;if lX=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and ag==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b5=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if J and not BrakeLanding then Nav.control.extendLandingGears()end else if J then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lX=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lX=="forward"then K=K-1 elseif lX=="backward"then K=K+1 elseif lX=="left"then N=N-1 elseif lX=="right"then N=N+1 elseif lX=="yawright"then O=O-1 elseif lX=="yawleft"then O=O+1 elseif lX=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lX=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lX=="up"then a5=a5+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lX=="down"then a5=a5-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lX=="groundaltitudeup"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lX=="groundaltitudedown"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lX=="option1"then cn()toggleView=false elseif lX=="option2"then cn(1)toggleView=false elseif lX=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;lY()toggleView=false elseif lX=="option4"then cp()toggleView=false elseif lX=="option5"then lZ()toggleView=false elseif lX=="option6"then ci()toggleView=false elseif lX=="option7"then toggleView=false elseif lX=="option8"then cj()toggleView=false elseif lX=="option9"then if gyro~=nil then gyro.toggle()ao=gyro.getState()==1 end;toggleView=false elseif lX=="lshift"then if system.isViewLocked()==1 then S=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif l()==1 and ShiftShowsRemoteButtons then S=true;b4=false;b3=false end elseif lX=="brake"then if BrakeToggleStatus then cH()elseif not BrakeIsOn then cH()else BrakeIsOn=true end elseif lX=="lalt"then AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif lX=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not W then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;W=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;W=false end elseif lX=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)l_()z=0 elseif lX=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cn()end elseif lX=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cn(1)end elseif lX=="antigravity"and not ExternalAGG then if antigrav~=nil then cZ()end end end;function script.onActionStop(lX)if lX=="forward"then K=0 elseif lX=="backward"then K=0 elseif lX=="left"then N=0 elseif lX=="right"then N=0 elseif lX=="yawright"then O=0 elseif lX=="yawleft"then O=0 elseif lX=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lX=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lX=="up"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lX=="down"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lX=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lX=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lX=="lshift"then if system.isViewLocked()==1 then S=false;a6=0;a7=0;system.lockView(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then S=false;b4=false;b3=false end elseif lX=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cH()else BrakeIsOn=false end end elseif lX=="lalt"then if l()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(lX)if lX=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lX=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lX=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lX=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(cV)local function m0()for bR,bI in pairs(a)do dbHud_1.setStringValue(bI,f(nil))end;for bR,bI in pairs(b)do if bI~="SavedLocations"then dbHud_1.setStringValue(bI,f(nil))end end;T="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"a8=5;aA=false;a4=true end;local function m1(m2,planet,fJ)local function m3(fJ)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local g7='::pos{'..r..','..r..','..r..','..r..','..r..'}'local gk,gl,c3,c4,c2=n(fJ,g7)if gk=="0"and gl=="0"then return vec3(tonumber(c3),tonumber(c4),tonumber(c2))end;c4=math.rad(c4)c3=math.rad(c3)local planet=aT[tonumber(gk)][tonumber(gl)]local h6=math.cos(c3)local m4=vec3(h6*math.cos(c4),h6*math.sin(c4),math.sin(c3))return planet.center+(planet.radius+c2)*m4 end;if dbHud_1 then local cw={}local position=m3(fJ)if planet.name=="Space"then cw={position=position,name=m2,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hA=false;if planet.hasAtmosphere then hA=true else hA=false end;cw={position=position,name=m2,atmosphere=hA,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cw;table.insert(aT[0],cw)bQ()else T="Databank must be installed to save locations"end end;local i;local m5="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local m6,m7=nil,nil;local m8="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cV," ")m6=cV;if i~=nil then m6=string.sub(cV,0,i-1)m7=string.sub(cV,i+1)elseif not string.find(m5,m6)then for fT in string.gmatch(m8,"([^\n]+)")do system.print(fT)end;return end;if m6=="ah-setname"then if m7==nil or m7==""then T="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then ct(m7)else T="Select a saved target to rename first"end elseif m6=="ah-addlocation"then if m7==nil or m7==""or string.find(m7,"::")==nil then T="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(m7,"::")local m2=string.sub(m7,1,i-2)local fJ=string.sub(m7,i)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local g7='::pos{'..r..','..r..','..r..','..r..','..r..'}'local gk,gl,c3,c4,c2=n(fJ,g7)local planet=aT[tonumber(gk)][tonumber(gl)]m1(m2,planet,fJ)T="Added "..m2 .." to saved locations,\nplanet "..planet.name.." at "..fJ;a8=5 elseif m6=="ah-agg"then if m7==nil or m7==""then T="Usage: ah-agg targetheight"return end;m7=tonumber(m7)if m7<1000 then m7=1000 end;AntigravTargetAltitude=m7;T="AGG Target Height set to "..m7 elseif m6=="ah-G"then if m7==nil or m7==""then T="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if m7=="dump"then for bR,bI in pairs(a)do if type(_G[bI])=="boolean"then if _G[bI]==true then system.print(bI.." true")else system.print(bI.." false")end elseif _G[bI]==nil then system.print(bI.." nil")else system.print(bI.." ".._G[bI])end end;return end;i=string.find(m7," ")local m9=string.sub(m7,0,i-1)local ma=string.sub(m7,i+1)for bR,bI in pairs(a)do if bI==m9 then T="Variable "..m9 .." changed to "..ma;local mb=type(_G[bI])if mb=="number"then ma=tonumber(ma)elseif mb=="boolean"then if string.lower(ma)=="true"then ma=true else ma=false end end;_G[bI]=ma;return end end;T="No such global variable: "..m9 elseif m6=="ah-copydatabank"then if dbHud_2 then d7(true)else T="Spare Databank required to copy databank"end elseif m6=="ah-wipedatabank"then if dbHud_1 then m0()else T="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
