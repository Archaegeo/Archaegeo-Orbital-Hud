name: ArchHud - Archaegeo v1.130 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.130;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=core.getConstructMass;local m=Nav.control.isRemoteControlled;local n=math.atan;local o=string.match;local tostring=tostring;local p=utils.round;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=Nav.axisCommandManager;local function t(u,v)local w=10^(v or 0)return d(u*w+0.5)/w end;local x=SafeR;local y=SafeB;local z=SafeG;local A=false;local B=0;local C=0;local D=0;local E=false;local F=0;local G=false;local H=t(ResolutionX/2,0)local I=t(ResolutionY/2,0)local J=false;local K=55;local L=false;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=j()>0;local an=j()local ao=core.getAltitude()local ap=core.getElementIdList()local aq=q()local ar=nil;local as=false;local at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]local au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]local av={}local aw=0;local ax=0;local ay=""local az=true;local aA={}local aB=ResolutionX;local aC=ResolutionY;local aD=false;local aE=false;local aF=0;local aG=nil;local aH={}local aI={}local aJ={}local aK=0;local aL=false;local aM={}local aN={}local aO=d(1/apTickRate)*2;local aP={}local aQ={}local aR={}local aS={}local aT=false;local aU=16;local aV=0;local aW=nil;local aX=""local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=LandingGearGroundHeight;local ba=system.getMouseDeltaX()local bb=system.getMouseDeltaY()local bc=false;local bd=q()local be=0;local bf=0;local bg=0;local bh=AtmoSpeedLimit;local bi=0;local bj=nil;local bk=0;local bl=0;local bm=false;local bn=false;local bo={VectorToTarget=false}local bp=false;local bq=0;local br=nil;local bs=false;local bt=false;local bu=false;local bv=false;local bw=0;local bx=q()local by=vec3(core.getConstructWorldOrientationUp())local bz=vec3(core.getConstructWorldOrientationForward())local bA=vec3(core.getConstructWorldOrientationRight())local bB=vec3(core.getWorldVelocity())local bC=vec3(bB):len()local bD=vec3(core.getWorldVertical())local bE=vec3(core.getConstructWorldPos())local bF=false;local bG=false;local bH=nil;local function bI(bJ,bK)if bK==nil then bK=false end;if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not bK then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,bJ)C=t(bJ*100,0)end;local function bL(bJ,bK)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bK then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,bJ)bH=bJ end;local function bM(bN)if aB==1920 then return bN else return t(aB*bN/1920,0)end end;local function bO(bN)if aC==1080 then return bN else return t(aC*bN/1080,0)end end;local function bP(bQ,bR)if bQ==nil then bQ=core.g()end;bQ=t(bQ,5)if bR~=nil and bR or(aG==nil or aG~=bQ)then local bS=core.getVelocity()local bT=vec3(bS):len()local bU=f(unit.getData()).maxBrake;if bU~=nil and bU>0 and am then bU=bU/r(bT/100,0.1,1)bU=bU/an;if an>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bU)/2 else LastMaxBrakeInAtmo=bU end end end;if bU~=nil and bU>0 then LastMaxBrake=bU end;aG=bQ end end;local function bV()AtlasOrdered={}for bW,bN in pairs(aW[0])do table.insert(AtlasOrdered,{name=bN.name,index=bW})end;local function bX(bY,bZ)return bY.name<bZ.name end;table.sort(AtlasOrdered,bX)end;local function b_(c0,c1)if c0==0 then return c(c1)<1e-09 end;if c1==0 then return c(c0)<1e-09 end;return c(c0-c1)<math.max(c(c0),c(c1))*epsilon end;local function c2(c3,c4)local c5=vec3(c4)if c3.bodyId==0 then return setmetatable({latitude=c5.x,longitude=c5.y,altitude=c5.z,bodyId=0,systemId=c3.planetarySystemId},MapPosition)end;local c6=c5-c3.center;local ac=c6:len()local c7=ac-c3.radius;local c8=0;local c9=0;if not b_(ac,0)then local ca=n(c6.y,c6.x)c9=ca>=0 and ca or 2*math.pi+ca;c8=math.pi/2-math.acos(c6.z/ac)end;return setmetatable({latitude=math.deg(c8),longitude=math.deg(c9),altitude=c7,bodyId=c3.bodyId,systemId=c3.planetarySystemId},MapPosition)end;local function cb(ac,cc)local cd=ac>100000;local ce,cf=""if cc==nil then cc=1 end;if cd then ce,cf=t(ac/1000/200,cc),"SU"elseif ac<1000 then ce,cf=t(ac,cc),"M"else ce,cf=t(ac/1000,cc),"KM"end;return ce,cf end;local function cg(ch)for bW,bN in pairs(ch)do if bN.name and bN.name==CustomTarget.name then return bW end end;return-1 end;local function ci()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;local function cj()local ck=-1;local cl=-1;if vBooster then ck=vBooster.distance()end;if hover then cl=hover.distance()end;if ck~=-1 and cl~=-1 then if ck<cl then return ck else return cl end elseif ck~=-1 then return ck elseif cl~=-1 then return cl else return-1 end end;local function cm()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;b8=true;a8=0;if am and aj==-1 then BrakeLanding=false;AltitudeHold=true;a8=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bL(d(bh))end else VertTakeOff=true;AltitudeHold=false;bs=false;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cn()if bx-bf<1.5 then if planet.hasAtmosphere then if an>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bf=-1;if AltitudeHold or VertTakeOff then return end end else bf=bx end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;b8=true;LockPitch=nil;bs=false;if aj==-1 then AutoTakeoff=false;if bf>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ao end end;if not am then bs=false;bp=true;bq=HoldAltitude;IntoOrbit=true;if not ah and s:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end;if VertTakeOff then cm()end else AutoTakeoff=true;if bf>-1 then HoldAltitude=ao+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bF then cm()end end;if ah then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;if VertTakeOff then cm()end;b8=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bm=false;bk=nil;bl=nil;bw=0;if IntoOrbit then if bs then CancelIntoOrbit=false else CancelIntoOrbit=true end;bs=false;IntoOrbit=false;br=nil elseif unit.getClosestPlanetInfluence()>0 and an==0 then IntoOrbit=true;bs=false;CancelIntoOrbit=false;if br==nil then br=planet end;bq=HoldAltitude;bp=true else W="Unable to engage orbiting, not near planet or in atmosphere"end end;local function co()if m()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;local function cp()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local cq=AtlasOrdered[AutopilotTargetIndex].index;local cr=aW[0][cq]if cr.center then AutopilotTargetName=cr.name;a4=b1[0][cq]if CustomTarget~=nil then if an==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cr;for _,bN in pairs(b1[0])do if bN.name==CustomTarget.planetname then a4=bN;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=d(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b4(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cs(ct)if not Autopilot and not VectorToTarget and not ah and not IntoOrbit then if ct==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cp()else local cq=AtlasOrdered[AutopilotTargetIndex].index;local cr=aW[0][cq]if cr.name=="Space"then if ct==nil then cs()else cs(1)end else cp()end end else W="Disengage autopilot before changing Interplanetary Helper"end end;local function cu()local function cv(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cn()end end;VectorStatus="Proceeding to Waypoint"end;if bx-bg<1.5 and an>0 then if not bv then W="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if an>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bg=-1;if Autopilot or VectorToTarget then return end end else bg=bx end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah and not IntoOrbit then cp()local cw=c2(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if an~=0 then ah=true;cn()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if an>0 then bs=false;if not VectorToTarget then cv(SpaceTarget)end else if ao>100000 or ao==0 then bs=false;Autopilot=true elseif not am then ag=true;ProgradeIsOn=true;bq=planet.noAtmosphericDensityAltitude+1000;bp=true;if AltitudeHold then cn()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if an~=0 then ah=true;cn()else Autopilot=true end end elseif an==0 then local cx=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a4.name==planet.name and cx)then bs=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;J=false;LockPitch=nil;WaypointSet=false end else ah=true;cn()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;J=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ao;TargetSet=false;Reentry=false;if IntoOrbit then if not bo.VectorToTarget then IntoOrbit=false else bo.VectorToTarget=false end end end end;local function cy(cz)local cA=-1;local cB;cA=cg(SavedLocations)if cA~=-1 then local cC;if cz~=nil then cB={position=SavedLocations[cA].position,name=cz,atmosphere=SavedLocations[cA].atmosphere,planetname=SavedLocations[cA].planetname,gravity=SavedLocations[cA].gravity}else cB={position=bE,name=SavedLocations[cA].name,atmosphere=an,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cA]=cB;cA=-1;cA=cg(aW[0])if cA>-1 then aW[0][cA]=cB end;bV()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cp()else W="Name Not Found"end end;local function cD(cE,cF,bZ)local cG=cE:cross(bZ):normalize_inplace()local cH=math.acos(r(cG:dot(-cF),-1,1))*constants.rad2deg;if cG:cross(-cF):dot(bZ)<0 then cH=-cH end;return cH end;local function cI(cJ,cK,cL)cK=cK:project_on_plane(cJ)cL=cL:project_on_plane(cJ)return n(cK:cross(cL):dot(cJ),cK:dot(cL))end;local function cj()local ck=-1;local cl=-1;if vBooster then ck=vBooster.distance()end;if hover then cl=hover.distance()end;if ck~=-1 and cl~=-1 then if ck<cl then return ck else return cl end elseif ck~=-1 then return ck elseif cl~=-1 then return cl else return-1 end end;local function cM()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then cm()end;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;b8=autoRollPreference;ag=false;ai=false;a8=0 end end;local function cN(cO,cP)cO=vec3(cO)cP=vec3(cP):normalize()local ce=cO*cP;return ce.x+ce.y+ce.z end;local function cQ(cO,cR,cS)local cT=0.001;local cU=1;if not am or not bc or aj~=-1 or bC<K then local cV=cS;if cV==nil then cV=DampingMultiplier end;if cR==nil then cR=cT end;cO=vec3(cO):normalize()local cW=vec3()-cO;local cX=-cN(cW,core.getConstructWorldOrientationRight())*cU;local cY=-cN(cW,core.getConstructWorldOrientationUp())*cU;if aw==0 then aw=cX/2 end;if ax==0 then ax=cY/2 end;if c(cX)<0.1 then P=P-cX*2 else P=P-(cX+(cX-aw)*cV)end;if c(cY)<0.1 then O=O+cY*2 else O=O+cY+(cY-ax)*cV end;aw=cX;ax=cY;if c(cX)<cR and c(cY)<cR then return true end;return false elseif bc and aj==-1 then cO=bB;local cV=cS;if cV==nil then cV=DampingMultiplier end;if cR==nil then cR=cT end;cO=vec3(cO):normalize()local cW=bz-cO;local cX=-cN(cW,core.getConstructWorldOrientationRight())*cU;local cY=-cN(cW,core.getConstructWorldOrientationUp())*cU;if aw==0 then aw=cX/2 end;if ax==0 then ax=cY/2 end;if c(cX)<0.1 then P=P-cX*5 else P=P-(cX+(cX-aw)*cV)end;if c(cY)<0.1 then O=O+cY*5 else O=O+cY+(cY-ax)*cV end;aw=cX;ax=cY;if c(cX)<cR and c(cY)<cR then return true end;return false end end;local function cZ()if Reentry then W="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ab=5 elseif not L then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bh end else Reentry=true;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local c_,d0=cb(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bh.." Target Altitude: "..c_..d0;bL(d(bh))end;AutoTakeoff=false end;local function d1(bT)if not am then bP()return b2.computeDistanceAndTime(bT,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b2.computeDistanceAndTime(bT,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;local function d2(bT)bP()return b2.computeDistanceAndTime(bT,AutopilotEndSpeed,l(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;local function d3()if antigrav and not ExternalAGG then if bG then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ao end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function d4(d5)local d6=0;local d7=0;local d8=0;if d5<60 then d5=d(d5)elseif d5<3600 then d6=d(d5/60)d5=d(d5%60)elseif d5<86400 then d7=d(d5/3600)d6=d(d5%3600/60)else d8=d(d5/86400)d7=d(d5%86400/3600)end;if d8>0 then return d8 .."d "..d7 .."h "elseif d7>0 then return d7 .."h "..d6 .."m "elseif d6>0 then return d6 .."m "..d5 .."s"elseif d5>0 then return d5 .."s"else return"0s"end end;local function d9()local da=-1;local db=cj()if telemeter_1 then da=telemeter_1.getDistance()end;if db~=-1 and da~=-1 then if db<da then return db else return da end elseif db~=-1 then return db else return da end end;local function dc(dd)if dbHud_1 then if not a7 then for bW,bN in pairs(b)do dbHud_1.setStringValue(bN,g(_G[bN]))if dd and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;for bW,bN in pairs(a)do dbHud_1.setStringValue(bN,g(_G[bN]))if dd and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;system.print("Saved Variables to Datacore")if dd and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;local function de()local df={}local function dg()return system.isViewLocked()==0 and userControlScheme~="keyboard"and m()==0 end;local function dh()local di=s:getAxisCommandType(0)local dj="TRAVEL"if di==1 then dj="CRUISE"end;if Autopilot then dj="AUTOPILOT"end;return dj end;local function dk(dl,aT,dm,dn,dp,dq,dr,ds)local dt=1;local du=2;local dv=3;local dw=4;local dx=5;local dy=6;local dz=""local dA=0;local dB=fuelY;local dC=fuelY+10;if m()==1 and not RemoteHud then dB=dB-50;dC=dC-50 end;dl[#dl+1]=[[<g class="pdim txtfuel">]]if dp=="ATMO"then dz="atmofueltank"elseif dp=="SPACE"then dz="spacefueltank"else dz="rocketfueltank"end;dA=_G[dz.."_size"]if#dq>0 then for i=1,#dq do local dD=string.sub(dq[i][du],1,12)local dE=0;for dF=1,dA do if dq[i][du]==f(unit[dz.."_"..dF].getData()).name then dE=dF;break end end;if aT or dr[i]==nil or ds[i]==nil then local dG=0;local dH=0;local dI=0;local dJ=0;local dK=q()if dE~=0 then ds[i]=f(unit[dz.."_"..dE].getData()).percentage;dr[i]=f(unit[dz.."_"..dE].getData()).timeLeft;if dr[i]=="n/a"then dr[i]=0 end else dI=k(dq[i][dt])-dq[i][dw]dG=dq[i][dv]ds[i]=d(0.5+dI*100/dG)dH=dq[i][dx]dJ=dq[i][dy]if dH<=dI then dr[i]=0 else dr[i]=d(0.5+dI/((dH-dI)/(dK-dJ)))end;dq[i][dx]=dI;dq[i][dy]=dK end end;if dD==dn then dD=e("%s %d",dp,i)end;if dE==0 then dD=dD.." *"end;local dL;if dr[i]==0 then dL="n/a"else dL=d4(dr[i])end;if ds[i]~=nil then local dM=d(ds[i]*2.55)local dN=e("rgb(%d,%d,%d)",255-dM,dM,0)local dO=""if dL~="n/a"and dr[i]<120 or ds[i]<5 then if aT then dO=[[class="red"]]end end;dl[#dl+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dm,dB,dO,dD,dm,dC,dN,ds[i],dL)dB=dB+30;dC=dC+30 end end end;dl[#dl+1]="</g>"end;local function dP(dl,c7)if c7<200000 and not am or c7 and am then local dQ=-bD:dot(bB)local dR=0;if c(dQ)>1 then dR=45*math.log(c(dQ),10)if dQ<0 then dR=-dR end end;dl[#dl+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(dQ),d(dR))end;return dl end;local function dS(cF)local ct=-bD;cF=cF-cF:project_on(ct)local dT=vec3(0,0,1)dT=dT-dT:project_on(ct)local dU=dT:cross(ct)local dR=dT:angle_between(cF)*constants.rad2deg;if cF:dot(dU)<0 then dR=360-dR end;return dR end;local function dV(dl,centerX,centerY,dW,dX,cx)local dY=circleRad;local dZ=20;dZ=d(dZ)local d_=d(dW)if cx then for i=-45,45,5 do local e0=i;dl[#dl+1]=e([[<g transform="rotate(%f,%d,%d)">]],e0,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dl[#dl+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dY+dZ-len,centerX,centerY+dY+dZ)end;dl[#dl+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+dY+dZ-35,dX,centerX,centerY+dY+dZ-25,d_)dl[#dl+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dW,centerX,centerY)dl[#dl+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dY+dZ-20,centerX+5,centerY+dY+dZ-20,centerX,centerY+dY+dZ-15)dl[#dl+1]="</g>"end;local e1=d_;if cx then e1=dS(bz)end;local e2=20;local e3=d(e1)local e4=0;local e5=centerY+dY+dZ+20;local e6=centerX;if dX~="YAW"then e5=bO(130)e6=bM(960)end;local e7=[[<path class="txttick line" d="]]for i=d(e3-(e2+10)-e3%5+0.5),d(e3+e2+10+e3%5+0.5),5 do local dm=e6+-i*5+e1*5;if i%10==0 then e4=10;local u=i;if u==360 then u=0 elseif u>360 then u=u-360 elseif u<0 then u=u+360 end;dl[#dl+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],dm+5,e5-12,u)elseif i%5==0 then e4=5 end;if e4==10 then e7=e([[%s M %f %f v %d]],e7,dm,e5-5,e4)else e7=e([[%s M %f %f v %d]],e7,dm,e5-2.5,e4)end end;dl[#dl+1]=e7 ..[["/>]]dl[#dl+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e6-5,e5+10,e6+5,e5+10,e6,e5+5)if cx then dX="HDG"end;dl[#dl+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],e6,e5+25,e3,e6,e5+35,dX)end;local function e8(dl,e9,dW,centerX,centerY,cx,ea,bT)local dY=circleRad;local eb=d(dY*3/5)if dY>0 then local ec=d(e9)local len=0;local e7=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dW,centerX,centerY)if not am then e7=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dl[#dl+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dY-1,centerX,centerY)dl[#dl+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(ec-30-ec%5+0.5),d(ec+30+ec%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ed=centerY+-i*5+e9*5;if len==30 then e7=e([[%s M %d %f h %d]],e7,centerX-eb-len,ed,len)if am then dl[#dl+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dW,centerX,centerY,centerX-eb+10,ed,i)dl[#dl+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dW,centerX,centerY,centerX+eb-10,ed,i)if i==0 or i==180 or i==-180 then dl[#dl+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dW,centerX,centerY,centerX-eb+20,ed,eb*2-40)end else dl[#dl+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eb+10,ed,i)dl[#dl+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eb-10,ed,i)end;e7=e([[%s M %d %f h %d]],e7,centerX+eb,ed,len)else e7=e([[%s M %d %f h %d]],e7,centerX-eb-len,ed,len)e7=e([[%s M %d %f h %d]],e7,centerX+eb,ed,len)end end;dl[#dl+1]=e7 ..[["/>]]local ee="PITCH"if not cx then ee="REL PITCH"end;if e9>90 and not am then e9=90-(e9-90)elseif e9<-90 and not am then e9=-90-(e9+90)end;if dY>200 then if am then if bT>K then dl[#dl+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ea)end;dl[#dl+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dW,centerX,centerY)else dl[#dl+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dl[#dl+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eb+25,centerY-5,centerX-eb+20,centerY,centerX-eb+25,centerY+5,centerX-eb+50,centerY+4,ec)dl[#dl+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eb-25,centerY-5,centerX+eb-20,centerY,centerX+eb-25,centerY+5,centerX+eb-30,centerY+4,ec)dl[#dl+1]="</g>"end;local ef=d(dY/3)dl[#dl+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ef,centerY,dY-ef)if not am and cx then dl[#dl+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dW,centerX,centerY,centerX-eb+10,centerY,eb*2-20)end;dl[#dl+1]="</g>"if dY<200 then if am and bT>K then dl[#dl+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dY,ee,centerX,centerY-dY+10,ec,centerX,centerY-15,"Yaw",centerX,centerY+20,ea)else dl[#dl+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dY,ee,centerX,centerY-dY+15,ec)end end end end;local function eg(dl,c7,cx)local eh=altMeterX;local ei=altMeterY;local ej=78;local ek=19;local el=d9()if el~=-1 then table.insert(dl,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],eh+ej,ei+ek+20,el))end;if cx and(c7<200000 and not am or c7 and am)then table.insert(dl,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],eh-1,ei-4,ej+2,ek+6,eh+1,ei-1,ej-4,ek))local cA=0;local em=1;local en=0;local eo=c7<0;local ep=9;if eo then ep=0 end;local c7=c(c7)while cA<6 do local eq=11;local er=16;local es=9;local et=14;local dO="altsm"if cA>2 then er=er+3;eq=eq+2;et=et+2;es=es-6;dO="altbig"end;if eo then dO=dO.." red"end;local eu=c7/em%10;local ev=d(eu)local ew=d((ev+1)%10)local ex=en;if cA==0 then ex=eu-ev;if eo then ex=1-ex end end;if eo and(cA==0 or en~=0)then local ey=ew;ew=ev;ev=ey end;local ez=er*(ex-1)local eA=ez+er;local dm=eh+es+(6-cA)*eq;local ed=ei+et;table.insert(dl,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dO,dm,ed+ez,ew,dm,ed+eA,ev))cA=cA+1;em=em*10;if ev==ep then en=ex else en=0 end end;table.insert(dl,[[</g></g>]])end end;local function eB(bS)bS=vec3(bS)local cH=-math.deg(n(bS.y,bS.z))+180;cH=cH-90;if cH<0 then cH=360+cH end;if cH>180 then cH=-180+cH-180 end;return-cH end;local function eC(bS)bS=vec3(bS)local e1=math.deg(n(bS.y,bS.x))-90;if e1<-180 then e1=360+e1 end;return e1 end;local function eD(dl,bS,bT,centerX,centerY)if bT>5 and not am or bT>K then local dY=circleRad;local eE=20;local eF=20;local eG=vec3(bS)local eH=eB(eG)local eI=eC(eG)local eJ=14;local eK=eJ/2;local eL=-eI/eF*dY;local eM=eH/eE*dY;local dm=centerX+eL;local ed=centerY+eM;local ac=math.sqrt(eL^2+eM^2)local eN=[[<circle
                        cx="]]..dm..[["
                        cy="]]..ed..[["
                        r="]]..eK/eJ..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dm..[["
                        cy="]]..ed..[["
                        r="]]..eK..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dm-eJ..[[,]]..ed..[[ h ]]..eK..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dm+eK..[[,]]..ed..[[ h ]]..eK..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dm..[[,]]..ed-eJ..[[ v ]]..eK..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ac<dY then dl[#dl+1]=eN else local dR=n(eM,eL)local eO=4;local eP=centerX+dY*math.cos(dR)local eQ=centerY+dY*math.sin(dR)dl[#dl+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dR*180/math.pi,eP,eQ,eP-eO,eQ-eO/2,eO*2,eO,eP+eO,eQ-eO,eO,eO,-eO,eO)end;if not am then eH=eB(-eG)eI=eC(-eG)eL=-eI/eF*dY;eM=eH/eE*dY;dm=centerX+eL;ed=centerY+eM;ac=math.sqrt(eL^2+eM^2)if ac<dY then local eR=[[<circle
                                cx="]]..dm..[["
                                cy="]]..ed..[["
                                r="]]..eK..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dm..[[,]]..ed-eJ..[[ v ]]..eK..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dm..[[,]]..ed..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dm..[[,]]..ed..[[)" />
                            <path
                                d="M ]]..dm-eK..[[,]]..ed..[[ h ]]..eJ..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dm..[[,]]..ed..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dm..[[,]]..ed..[[)"/>]]dl[#dl+1]=eR end end end end;local function eS(dl,dj,eT,eU)eT=d(eT+0.5)local dB=throtPosY+10;local dC=throtPosY+20;if m()==1 and not RemoteHud then dB=55;dC=65 end;local eV="CRUISE"local unit="km/h"local bJ=eU;if dj=="TRAVEL"or dj=="AUTOPILOT"then eV="THROT"unit="%"bJ=eT;local eW="dim"if eT<0 then eW="red"end;dl[#dl+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],eW,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(eT),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dl[#dl+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dB,eV,throtPosX+10,dC,bJ,unit)if am and AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle and E then eT=d(F*100+0.5)local eW="red"if eT<0 then eW="red"end;dl[#dl+1]=e([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],eW,1-c(eT),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dl[#dl+1]=e([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dB+40,"LIMIT",throtPosX+10,dC+40,eT,"%")end;if am and AtmoSpeedAssist or Reentry then dl[#dl+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dB-40,"LIMIT: ",bh.." km/h")elseif not am and Autopilot then dl[#dl+1]=e([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dB-40,"LIMIT: ",d(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eX(dl,eY)local eZ=throtPosY-10;local e_=throtPosX+10;dl[#dl+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then eZ=75 end;dl[#dl+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],e_,eZ,d(eY))end;local function f0(dl)dl[#dl+1]=e([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],bM(1900),bO(1070),VERSION_NUMBER)dl[#dl+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dl[#dl+1]=e([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bM(960),bO(550))dl[#dl+1]=e([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bM(960),bO(600))dl[#dl+1]=e([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bM(960),bO(650))end;local f1=bM(960)local f2=bO(860)local f3=bO(880)local f4=bO(900)local f5=bO(960)local f6=bO(200)local f7=bO(150)local f8=bO(960)if m()==1 and not RemoteHud then f2=bO(135)f3=bO(155)f4=bO(175)f6=bO(115)f7=bO(95)end;if BrakeIsOn then dl[#dl+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],f1,f2)elseif D>0 then dl[#dl+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f1,f2,D)end;if am and bc and cj()==-1 then dl[#dl+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],f1,f6+50)end;if ar then dl[#dl+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],f1,f8)end;if GearExtended then if M then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f1,f3)else dl[#dl+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f1,f3)end;local f9,cf=cb(Nav:getTargetGroundAltitude())dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f1,f4,f9 ..cf)end;if Z then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f1,f5+20)end;if antigrav and not ExternalAGG and bG and AntigravTargetAltitude~=nil then if c(ao-antigrav.getBaseAltitude())<501 then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f1,f6+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else dl[#dl+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f1,f6+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f1,f6+20,AutopilotStatus)elseif LockPitch~=nil then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f1,f6+20,d(LockPitch))elseif U then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f1,f6+20)elseif Reentry then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f1,f6+20)end;local fa,fb,fc=b1:getPlanetarySystem(0):castIntersections(bE,bB:normalize(),function(fd)if fd.noAtmosphericDensityAltitude>0 then return fd.radius+fd.noAtmosphericDensityAltitude else return fd.radius+fd.surfaceMaxAltitude*1.5 end end)local fe=fb;if fc~=nil and fb~=nil then fe=math.min(fc,fb)end;if AltitudeHold or VertTakeOff then local f9,cf=cb(HoldAltitude,2)if VertTakeOff then if bG then f9,cf=cb(antigrav.getBaseAltitude(),2)end;dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],f1,f6,f9 ..cf)elseif AutoTakeoff and not IntoOrbit then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],f1,f6,f9 ..cf)if BrakeIsOn and not VertTakeOff then dl[#dl+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f1,f6+50)end else dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f1,f6,f9 ..cf)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if an>0.1 then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f1,f6)elseif an<0.09 and an>0.05 then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f1,f6)elseif an<0.05 then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f1,f6)end end;if IntoOrbit then if bj~=nil then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f1,f6,bj)end end;if BrakeLanding then if StrongBrakes then dl[#dl+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],f1,f6)else dl[#dl+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],f1,f6)end end;if ProgradeIsOn then dl[#dl+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f1,f6)end;if RetrogradeIsOn then dl[#dl+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f1,f6)end;if TurnBurn then dl[#dl+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f1,f7)elseif fe~=nil and an==0 then local f9,cf=cb(fe)local travelTime=b2.computeTravelTime(bC,0,fe)local ff="Collision"if fa.noAtmosphericDensityAltitude>0 then ff="Atmosphere"end;dl[#dl+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f1,f7,fa.name,ff,d4(travelTime),f9 ..cf)end;if VectorToTarget and not IntoOrbit then dl[#dl+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],f1,f6+30,VectorStatus)end;dl[#dl+1]="</g>"return dl end;local function fg(bT)return d(t(bT*3.6,0)+0.5).." km/h"end;local function fh(dl)if orbit~=nil and an<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fi=OrbitMapX;local fj=OrbitMapY;local fk=OrbitMapSize;local fl=4;fj=fj+fl;local fm=15;local dm=fi+fk+fi/2+fl;local ed=fj+fk/2+5+fl;local fn,fo,fp,fq;fn=fk/4;fq=0;dl[#dl+1]=[[<g class="pbright txtorb txtmid">]]dl[#dl+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fk+fi*2,fk+fj,fl,fl)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fp=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fn*2)fo=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fp*(1-orbit.eccentricity)fq=fn-orbit.periapsis.altitude/fp-planet.radius/fp;local fr=""if orbit.periapsis.altitude<=0 then fr='redout'end;dl[#dl+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fr,fi+fk/2+fq+fl,fj+fk/2+fl,fn,fo)dl[#dl+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fi+fk/2+fl,fj+fk/2+fl,planet.radius/fp)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dl[#dl+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dm-35,ed-5,fi+fk/2+fn+fq,ed-5)dl[#dl+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],dm,ed)ed=ed+fm;local f9,cf=cb(orbit.apoapsis.altitude)dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,f9 ..cf)ed=ed+fm;dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,d4(orbit.timeToApoapsis))ed=ed+fm;dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,fg(orbit.apoapsis.speed))end;ed=fj+fk/2+5+fl;dm=fi-fi/2+10+fl;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dl[#dl+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dm+35,ed-5,fi+fk/2-fn+fq,ed-5)dl[#dl+1]=e([[<text x="%f" y="%f">Periapsis</text>]],dm,ed)ed=ed+fm;local f9,cf=cb(orbit.periapsis.altitude)dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,f9 ..cf)ed=ed+fm;dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,d4(orbit.timeToPeriapsis))ed=ed+fm;dl[#dl+1]=e([[<text x="%f" y="%f">%s</text>]],dm,ed,fg(orbit.periapsis.speed))end;dl[#dl+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fi+fk/2+fl,20+fl,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fs=orbit.timeToApoapsis/orbit.period*2*math.pi;local ft=fn*math.cos(fs)local fu=fo*math.sin(fs)dl[#dl+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fi+fk/2+ft+fq+fl,fj+fk/2+fu+fl)end;dl[#dl+1]=[[</g>]]return dl else return dl end end;local function fv(dl)local function fw(fx,fy)for i=1,#fy do table.insert(fx,fy[i])end;return fx end;local dm=50;local ed=525;local fz={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fA={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fB={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fC={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if am then fw(fz,fA)table.insert(fz,"---------------------------------------")if VertTakeOff then table.insert(fz,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif aj~=-1 then if antigrav then if bG then table.insert(fz,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fz,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fz,"Alt-6: Begins Vertical Takeoff.")else table.insert(fz,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fz,"G: Begin BrakeLanding or Land")end else fw(fz,fB)end;if AltitudeHold then table.insert(fz,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fz,"---------------------------------------")fw(fz,fC)dl[#dl+1]=[[<g class="pdim txt txtstart">]]for i=1,#fz do ed=ed+10;dl[#dl+1]=e([[<text x=%d y="%d">%s</text>]],dm,ed,fz[i])end;dl[#dl+1]="</g>"end;function df.HUDPrologue(dl)if not A then x=PvPR;z=PvPG;y=PvPB else x=SafeR;z=SafeG;y=SafeB end;at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]local fD=at;local fE=au;local fF=at;local fG=au;if dg()and not brightHud then fD=[[rgb(]]..d(x*0.4+0.5)..","..d(z*0.4+0.5)..","..d(y*0.3+0.5)..[[)]]fE=[[rgb(]]..d(x*0.3+0.5)..","..d(z*0.3+0.5)..","..d(y*0.2+0.5)..[[)]]end;dl[#dl+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fD,fD,fF,fF,fE,fE,fG,fG,aB,aC)return dl end;function df.UpdateHud(dl)local c7=ao;local bS=core.getVelocity()local bT=vec3(bS):len()local fH=getRoll(bD,bz,bA)local fI=fH/180*math.pi;local fJ=math.cos(fI)local fK=math.sin(fI)local cH=cD(bD,bz,bA*fJ+by*fK)local dW=fH;local e9=cH;local eT=d(unit.getThrottle())local eY=bT*3.6;local eU=unit.getAxisCommandValue(0)local fL=bM(1770)local fM=bO(310)if AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle then eU=C;eT=C*100 end;local dj=dh()local dX="ROLL"local cx=unit.getClosestPlanetInfluence()>0;if eT==nil then eT=0 end;if not cx then if bT>5 then cH=eB(bS)fH=eC(bS)else cH=0;fH=0 end;dX="YAW"end;if B>50000 and not am then local fN;if B>200000 then fN=t(B/200000,2).." su"else fN=t(B/1000,1).." km"end;dl[#dl+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fL,fM,fN)end;dl[#dl+1]=ae;dl[#dl+1]=ay;dl[#dl+1]=ad;if aV%aO==0 then aT=true end;if fuelX~=0 and fuelY~=0 then dk(dl,aT,fuelX,"Atmospheric ","ATMO",aH,aR,aS)dk(dl,aT,fuelX+100,"Space fuel t","SPACE",aI,aP,aQ)dk(dl,aT,fuelX+200,"Rocket fuel ","ROCKET",aJ,aM,aN)end;if aT then aT=false;aV=0 end;aV=aV+1;dP(dl,c7)if m()==0 or RemoteHud then if not dg()or brightHud then if cx then dV(dl,centerX,centerY,dW,dX,cx)e8(dl,e9,dW,centerX,centerY,cx,d(eC(bS)),bT)else dV(dl,centerX,centerY,fH,dX,cx)e8(dl,cH,fH,centerX,centerY,cx,d(fH),bT)end;eg(dl,c7,cx)eD(dl,bS,bT,centerX,centerY)end end;eS(dl,dj,eT,eU)eX(dl,eY)f0(dl)fh(dl)if showHelp then fv(dl)end;if screen_2 then local fO=bE;local dm=960+fO.x/aY;local ed=450+fO.y/aZ;screen_2.moveContent(a_,(dm-80)/19.2,(ed-80)/10.8)end;return dl end;function df.HUDEpilogue(dl)dl[#dl+1]="</svg>"return dl end;function df.DrawOdometer(dl,a5,TotalDistanceTravelled,a6,fP)local fQ=bM(1240)local fR=bO(55)local fS=fR+10;local bQ=core.g()local fT=0;local fU=0;local fV=0;local dj=dh()if VertTakeOffEngine then dj=dj.."-VERTICAL"end;bP(bQ)if am then fV=LastMaxBrakeInAtmo else fV=LastMaxBrake end;maxThrust=Nav:maxForceForward()aF=l()if not ShowOdometer then return end;local fW=vec3(core.getWorldAcceleration()):len()/9.80665;bQ=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bQ>0.1 then fU=aF*bQ;fT=maxThrust/bQ end;dl[#dl+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then fQ=bM(1120)fR=bO(55)fS=fR+10 elseif am then local fX=bM(770)dl[#dl+1]=e([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fX,fR,fX,fS,an)end;dl[#dl+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fQ,fR,fQ,fS,bQ/9.80665,fQ,fR+20,fQ,fS+20,fW)dl[#dl+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bM(660),bM(700),bO(35),bM(960),bO(55),bM(1240),bO(35),bM(1280))if m()==0 or RemoteHud then dl[#dl+1]=e([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bM(700),bO(20),a5,bM(700),bO(30),TotalDistanceTravelled/1000,bM(830),bO(20),d4(a6),bM(830),bO(30),d4(TotalFlightTime),bM(970),bO(20),aF/1000,bM(1240),bO(10),fV/1000,bM(1240),bO(30),maxThrust/1000,bM(960),bO(180),dj)if bQ>0.1 then dl[#dl+1]=e([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bM(970),bO(30),fT/1000,bM(1240),bO(20),fU/1000)else dl[#dl+1]=e([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bM(970),bO(30),bM(1240),bO(20))end else dl[#dl+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bM(960),bO(33),dj)end;dl[#dl+1]="</g>"return dl end;function df.DrawWarnings(dl)return f0(dl)end;function df.DisplayOrbitScreen(dl)return fh(dl)end;function df.DisplayMessage(dl,f9)if f9~="empty"then dl[#dl+1]=[[<text class="msg" x="50%%" y="310" >]]for fY in string.gmatch(f9,"([^\n]+)")do dl[#dl+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fY)end;dl[#dl+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function df.DrawDeadZone(dl)dl[#dl+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return df end;local function fZ()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function f_()local function g0(g1)return type(g1)=='number'end;local function g2(g1)return type(tonumber(g1))=='number'end;local function g3(g4)return type(g4)=='table'end;local function g5(g6)return type(g6)=='string'end;local function g7(bN)return g3(bN)and g0(bN.x and bN.y and bN.z)end;local function g8(g9)return g3(g9)and g0(g9.latitude and g9.longitude and g9.altitude and g9.bodyId and g9.systemId)end;local ga=math.pi/180;local gb=180/math.pi;local epsilon=1e-10;local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gc='::pos{'..u..','..u..','..u..','..u..','..u..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gd=r;local function b_(c0,c1)if c0==0 then return c(c1)<1e-09 end;if c1==0 then return c(c0)<1e-09 end;return c(c0-c1)<math.max(c(c0),c(c1))*epsilon end;local function ge(g1)local ce=string.gsub(string.reverse(e('%.4f',g1)),'^0*%.?','')return ce==''and'0'or string.reverse(ce)end;local function gf(gg)if g7(gg)then return e('{x=%.3f,y=%.3f,z=%.3f}',gg.x,gg.y,gg.z)end;if g3(gg)and not getmetatable(gg)then local gh={}local gi=next(gg)if type(gi)=='nil'or gi==1 then gh=gg else for bW,bN in pairs(gg)do local bJ=gf(bN)if type(bW)=='number'then table.insert(gh,e('[%s]=%s',bW,bJ))else table.insert(gh,e('%s=%s',bW,bJ))end end end;return e('{%s}',table.concat(gh,','))end;if g5(gg)then return e("'%s'",gg:gsub("'",[[\']]))end;return tostring(gg)end;local gj={}gj.__index=gj;gj.__tostring=function(gg,gk)local gl={}for bW in pairs(gg)do table.insert(gl,bW)end;table.sort(gl)local gh={}for _,bW in ipairs(gl)do local bJ=gf(gg[bW])if type(bW)=='number'then table.insert(gh,e('[%s]=%s',bW,bJ))else table.insert(gh,e('%s=%s',bW,bJ))end end;if gk then return e('%s%s',gk,table.concat(gh,',\n'..gk))end;return e('{%s}',table.concat(gh,','))end;gj.__eq=function(gm,gn)return gm.planetarySystemId==gn.planetarySystemId and gm.bodyId==gn.bodyId and b_(gm.radius,gn.radius)and b_(gm.center.x,gn.center.x)and b_(gm.center.y,gn.center.y)and b_(gm.center.z,gn.center.z)and b_(gm.GM,gn.GM)end;local function go(gp,gq,gr,c4,gs)assert(g2(gp),'Argument 1 (planetarySystemId) must be a number:'..type(gp))assert(g2(gq),'Argument 2 (bodyId) must be a number:'..type(gq))assert(g2(gr),'Argument 3 (radius) must be a number:'..type(gr))assert(g3(c4),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c4))assert(g2(gs),'Argument 5 (GM) must be a number:'..type(gs))return setmetatable({planetarySystemId=tonumber(gp),bodyId=tonumber(gq),radius=tonumber(gr),center=vec3(c4),GM=tonumber(gs)},gj)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gt)return e('::pos{%d,%d,%s,%s,%s}',gt.systemId,gt.bodyId,ge(gt.latitude*gb),ge(gt.longitude*gb),ge(gt.altitude))end;MapPosition.__eq=function(gm,gn)return gm.bodyId==gn.bodyId and gm.systemId==gn.systemId and b_(gm.latitude,gn.latitude)and b_(gm.altitude,gn.altitude)and(b_(gm.longitude,gn.longitude)or b_(gm.latitude,math.pi/2)or b_(gm.latitude,-math.pi/2))end;local function gu(gv,gq,c8,c9,c7)local gp=gv;if g5(gv)and not c9 and not c7 and not gq and not c8 then gp,gq,c8,c9,c7=o(gv,gc)assert(gp,'Argument 1 (position string) is malformed.')else assert(g2(gp),'Argument 1 (systemId) must be a number:'..type(gp))assert(g2(gq),'Argument 2 (bodyId) must be a number:'..type(gq))assert(g2(c8),'Argument 3 (latitude) must be in degrees:'..type(c8))assert(g2(c9),'Argument 4 (longitude) must be in degrees:'..type(c9))assert(g2(c7),'Argument 5 (altitude) must be in meters:'..type(c7))end;gp=tonumber(gp)gq=tonumber(gq)c8=tonumber(c8)c9=tonumber(c9)c7=tonumber(c7)if gq==0 then return setmetatable({latitude=c8,longitude=c9,altitude=c7,bodyId=gq,systemId=gp},MapPosition)end;return setmetatable({latitude=ga*gd(c8,-90,90),longitude=ga*(c9%360),altitude=c7,bodyId=gq,systemId=gp},MapPosition)end;local gw={}gw.__index=gw;gw.__tostring=function(gg,gk)local gx=gk and gk..'  'local gy={}local gl={}for bW in pairs(gg)do table.insert(gl,bW)end;table.sort(gl)for _,gz in ipairs(gl)do bdy=gg[gz]local gA=gj.__tostring(bdy,gx)if gk then table.insert(gy,e('[%s]={\n%s\n%s}',gz,gA,gk))else table.insert(gy,e('  [%s]=%s',gz,gA))end end;if gk then return e('\n%s%s%s',gk,table.concat(gy,',\n'..gk),gk)end;return e('{\n%s\n}',table.concat(gy,',\n'))end;local function gB(gC)local aW={}local pid;for _,bN in pairs(gC)do local gD=bN.planetarySystemId;if type(gD)~='number'then error('Invalid planetary system ID: '..tostring(gD))elseif pid and gD~=pid then error('Mistringmatch planetary system IDs: '..gD..' and '..pid)end;local gE=bN.bodyId;if type(gE)~='number'then error('Invalid body ID: '..tostring(gE))elseif aW[gE]then error('Duplicate body ID: '..tostring(gE))end;setmetatable(bN.center,getmetatable(vec3.unit_x))aW[gE]=setmetatable(bN,gj)pid=gD end;return setmetatable(aW,gw)end;b0={}local function gF(gC)return setmetatable({galaxyAtlas=gC or{}},b0)end;b0.__index=function(g4,i)if type(i)=='number'then local system=g4.galaxyAtlas[i]return gB(system)end;return rawget(b0,i)end;b0.__pairs=function(gg)return function(g4,bW)local gG,nv=next(g4,bW)return gG,nv and gB(nv)end,gg.galaxyAtlas,nil end;b0.__tostring=function(gg)local gH={}for _,gI in pairs(gg or{})do local gJ=gI:getPlanetarySystemId()local gK=gw.__tostring(gI,'    ')table.insert(gH,e('  [%s]={%s\n  }',gJ,gK))end;return e('{\n%s\n}\n',table.concat(gH,',\n'))end;b0.BodyParameters=go;b0.MapPosition=gu;b0.PlanetarySystem=gB;function b0.createBodyParameters(gL,gq,gM,gN,gO,gP,gQ)assert(g2(gL),'Argument 1 (planetarySystemId) must be a number:'..type(gL))assert(g2(gq),'Argument 2 (bodyId) must be a number:'..type(gq))assert(g2(gM),'Argument 3 (surfaceArea) must be a number:'..type(gM))assert(g3(gN),'Argument 4 (aPosition) must be an array or vec3:'..type(gN))assert(g3(gO),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gO))assert(g2(gP),'Argument 6 (altitude) must be in meters:'..type(gP))assert(g2(gQ),'Argument 7 (gravityAtPosition) must be number:'..type(gQ))local gr=math.sqrt(gM/4/math.pi)local ac=gr+gP;local gR=vec3(gN)+ac*vec3(gO)local gs=gQ*ac*ac;return go(gL,gq,gr,gR,gs)end;b0.isMapPosition=g8;function b0:getPlanetarySystem(gv)if i==nil then i=0 end;if nv==nil then nv=0 end;local gL=gv;if g8(gv)then gL=gv.systemId end;if type(gL)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gw then system=gB(system)end;return system end end end;function gw:castIntersections(gS,cP,gT,gU)local gT=gT or function(fd)return 1.05*fd.radius end;local gV={}if gU then for _,i in ipairs(gU)do gV[i]=self[i]end else gU={}for bW,fd in pairs(self)do table.insert(gU,bW)gV[bW]=fd end end;local function gW(gX,gY)local gZ=gV[gX].center-gS;local g_=gV[gY].center-gS;return gZ:len()<g_:len()end;table.sort(gU,gW)local h0=cP:normalize()for i,gD in ipairs(gU)do local fd=gV[gD]local h1=fd.center-gS;local gr=gT(fd)local h2=h1:dot(h0)local h3=h2^2-(h1:len2()-gr^2)if h3>=0 then local h4=math.sqrt(h3)local fb=h2+h4;local fc=h2-h4;if fc>0 then return fd,fb,fc elseif fb>0 then return fd,fb,nil end end end;return nil,nil,nil end;function gw:closestBody(h5)assert(type(h5)=='table','Invalid coordinates.')local h6,fd;local h7=vec3(h5)for _,h8 in pairs(self)do local h9=(h8.center-h7):len2()if(not fd or h9<h6)and h8.name~="Space"then fd=h8;h6=h9 end end;return fd end;function gw:convertToBodyIdAndWorldCoordinates(gv)local ha=gv;if g5(gv)then ha=gu(gv)end;if ha.bodyId==0 then return 0,vec3(ha.latitude,ha.longitude,ha.altitude)end;local h8=self:getBodyParameters(ha)if h8 then return ha.bodyId,h8:convertToWorldCoordinates(ha)end end;function gw:getBodyParameters(gv)local gq=gv;if g8(gv)then gq=gv.bodyId end;assert(g2(gq),'Argument 1 (bodyId) must be a number:'..type(gq))return self[gq]end;function gw:getPlanetarySystemId()local _,bN=next(self)return bN and bN.planetarySystemId end;function gj:convertToMapPosition(c4)assert(g3(c4),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c4))local c5=vec3(c4)if self.bodyId==0 then return setmetatable({latitude=c5.x,longitude=c5.y,altitude=c5.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c6=c5-self.center;local ac=c6:len()local c7=ac-self.radius;local c8=0;local c9=0;if not b_(ac,0)then local ca=n(c6.y,c6.x)c9=ca>=0 and ca or 2*math.pi+ca;c8=math.pi/2-math.acos(c6.z/ac)end;return setmetatable({latitude=c8,longitude=c9,altitude=c7,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gj:convertToWorldCoordinates(gv)local ha=g5(gv)and gu(gv)or gv;if ha.bodyId==0 then return vec3(ha.latitude,ha.longitude,ha.altitude)end;assert(g8(ha),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ha.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ha.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local hb=math.cos(ha.latitude)return self.center+(self.radius+ha.altitude)*vec3(hb*math.cos(ha.longitude),hb*math.sin(ha.longitude),math.sin(ha.latitude))end;function gj:getAltitude(c4)return(vec3(c4)-self.center):len()-self.radius end;function gj:getDistance(c4)return(vec3(c4)-self.center):len()end;function gj:getGravity(c4)local hc=self.center-vec3(c4)local hd=hc:len2()return self.GM/hd*hc/math.sqrt(hd)end;return setmetatable(b0,{__call=function(_,...)return gF(...)end})end;function script.onStart()local function he()local function hf(hg)local hh=dbHud_1.hasKey;for bW,bN in pairs(hg)do if hh(bN)then local ce=f(dbHud_1.getStringValue(bN))if ce~=nil then _G[bN]=ce;aD=true end end end end;if dbHud_1 then local hh=dbHud_1.hasKey;if not useTheseSettings then hf(a)else W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 end;coroutine.yield()hf(b)if aD then W="Loaded Saved Variables (see Lua Chat Tab for list)"H=t(ResolutionX/2,0)I=t(ResolutionY/2,0)aB=ResolutionX;aC=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference;bh=AtmoSpeedLimit;at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bx then LastMaxBrakeInAtmo=0 end;LastStartTime=bx;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ao end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hi()local function hj(hk,hl)if hk>hl then hl=hk end;if ContainerOptimization>0 then hl=hl-hl*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hl=hl-hl*FuelTankOptimization*0.05 end;return hl end;local hm=core.getElementNameById;local hn=fuelX~=0 and fuelY~=0;for bW in pairs(ap)do local type=core.getElementTypeById(ap[bW])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(ap[bW])),'^.*vertical.*$')then bF=true end end;if o(type,'^.*Space Engine$')then bv=true;if o(tostring(core.getElementTagsById(ap[bW])),'^.*vertical.*$')then local ho=core.getElementRotationById(ap[bW])if ho[4]<0 then if p(-ho[4],0.1)==0.5 then bt=true end else if p(ho[4],0.1)==0.5 then bu=true end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local hp=h(ap[bW])if hp>10000 then aU=128 elseif hp>1000 then aU=64 elseif hp>150 then aU=32 end end;aK=aK+h(ap[bW])if hn and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hp=h(ap[bW])local hq=k(ap[bW])local hk=0;local dK=q()if type=="Atmospheric Fuel Tank"then local hl=400;local hr=35.03;if hp>10000 then hl=51200;hr=5480 elseif hp>1300 then hl=6400;hr=988.67 elseif hp>150 then hl=1600;hr=182.67 end;hk=hq-hr;if fuelTankHandlingAtmo>0 then hl=hl+hl*fuelTankHandlingAtmo*0.2 end;hl=hj(hk,hl)aH[#aH+1]={ap[bW],hm(ap[bW]),hl,hr,hk,dK}end;if type=="Rocket Fuel Tank"then local hl=320;local hr=173.42;if hp>65000 then hl=40000;hr=25740 elseif hp>6000 then hl=5120;hr=4720 elseif hp>700 then hl=640;hr=886.72 end;hk=hq-hr;if fuelTankHandlingRocket>0 then hl=hl+hl*fuelTankHandlingRocket*0.1 end;hl=hj(hk,hl)aJ[#aJ+1]={ap[bW],hm(ap[bW]),hl,hr,hk,dK}end;if type=="Space Fuel Tank"then local hl=2400;local hr=182.67;if hp>10000 then hl=76800;hr=5480 elseif hp>1300 then hl=9600;hr=988.67 end;hk=hq-hr;if fuelTankHandlingSpace>0 then hl=hl+hl*fuelTankHandlingSpace*0.2 end;hl=hj(hk,hl)aI[#aI+1]={ap[bW],hm(ap[bW]),hl,hr,hk,dK}end end end;if not bF then VertTakeOff,VertTakeOffEngine=false,false end end;local function hs()if gyro~=nil then ar=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(am or not am and ao<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(am or not am==0 and ao<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;if antigrav then bG=antigrav.getState()==1;if bG and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local ht=d9()if ht~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if b9~=nil then s:setTargetGroundAltitude(b9)if b9==0 and not M then GearExtended=true;BrakeIsOn=true end else b9=Nav:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if am and ht~=-1 then b3=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=am end;local function hu(hv,hw,hx,hy,dm,ed,hz,hA,hB)local hC={enableName=hv,disableName=hw,width=hx,height=hy,x=dm,y=ed,toggleVar=hz,toggleFunction=hA,drawCondition=hB,hovered=false}table.insert(aA,hC)return hC end;local function hD()local function hE()if dbHud_1 then local position=bE;local dD=planet.name..". "..#SavedLocations;if radar_1 then local gD,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gD~=nil and gD~=""then dD=dD.." "..radar_1.getConstructName(gD)end end;local cB={}local hF=false;if planet.hasAtmosphere then hF=true end;cB={position=position,name=dD,atmosphere=hF,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cB;table.insert(aW[0],cB)bV()W="Location saved as "..dD else W="Databank must be installed to save locations"end end;local function hG()TurnBurn=not TurnBurn end;local function hH(hI)if hI==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hJ()hH(1)end;local function hK()local cA=-1;cA=cg(aW[0])if cA>-1 then table.remove(aW[0],cA)end;cA=-1;cA=cg(SavedLocations)if cA~=-1 then W=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cA)end;cs()bV()end;local function hL()local dD=AutopilotTargetName;if dD==nil then local f9,cf=cb((bE-CustomTarget.position):len())dD=CustomTarget.name.." "..f9 ..cf end;if dD==nil then dD="None"end;return"Engage Autopilot: "..dD end;local function hM()local dD=AutopilotTargetName;if dD==nil then dD=CustomTarget.name end;if dD==nil then dD="None"end;return"Disable Autopilot: "..dD end;local hN=50;local hO=260;local hP=hu("Enable Brake Toggle","Disable Brake Toggle",hO,hN,aB/2-hO/2,aC/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)hu("Align Prograde","Disable Prograde",hO,hN,aB/2-hO/2-50-hP.width,aC/2-hN+380,function()return ProgradeIsOn end,hJ)hu("Align Retrograde","Disable Retrograde",hO,hN,aB/2-hO/2+hP.width+50,aC/2-hN+380,function()return RetrogradeIsOn end,hH,function()return an==0 end)local hQ=hu(hL,hM,600,60,aB/2-600/2,aC/2-60/2-400,function()return Autopilot end,cu)hu("Save Position","Save Position",200,hQ.height,hQ.x+hQ.width+30,hQ.y,function()return false end,hE,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hu("Update Position","Update Position",200,hQ.height,hQ.x+hQ.width+30,hQ.y,function()return false end,cy,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hu("Clear Position","Clear Position",200,hQ.height,hQ.x-200-30,hQ.y,function()return true end,hK,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hN=60;hO=300;local dm=10;local ed=aC/2-500;hu("Show Help","Hide Help",hO,hN,dm,ed,function()return showHelp end,function()showHelp=not showHelp end)local ed=aC/2-300;hu("Enable Turn and Burn","Disable Turn and Burn",hO,hN,dm,ed,function()return TurnBurn end,hG)hu("Horizontal Takeoff Mode","Vertical Takeoff Mode",hO,hN,dm+hO+20,ed,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then W="Vertical Takeoff Mode"else W="Horizontal Takeoff Mode"end end,function()return bF end)ed=ed+hN+20;hu("Show Orbit Display","Hide Orbit Display",hO,hN,dm,ed,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)hu("Engage Orbiting","Cancel Orbiting",hO,hN,dm+hO+20,ed,function()return IntoOrbit end,ToggleIntoOrbit,function()return an==0 and unit.getClosestPlanetInfluence()>0 end)ed=ed+hN+20;hu("Glide Re-Entry","Cancel Glide Re-Entry",hO,hN,dm,ed,function()return Reentry end,function()ag=true;hJ()end,function()return planet.hasAtmosphere and not am end)hu("Parachute Re-Entry","Cancel Parachute Re-Entry",hO,hN,dm+hO+20,ed,function()return Reentry end,cZ,function()return planet.hasAtmosphere and not am end)ed=ed+hN+20;hu("Engage Follow Mode","Disable Follow Mode",hO,hN,dm,ed,function()return U end,co,function()return m()==1 end)hu("Enable Repair Arrows","Disable Repair Arrows",hO,hN,dm+hO+20,ed,function()return aL end,function()aL=not aL;if aL then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return m()==1 end)ed=ed+hN+20;if not ExternalAGG then hu("Enable AGG","Disable AGG",hO,hN,dm,ed,function()return bG end,d3,function()return antigrav~=nil end)end;ed=ed+hN+20;hu(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,hO*2,hN,dm,ed,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hR()local hS=nil;local hT=nil;local hU=nil;local hV=nil;aW=fZ()for bW,bN in pairs(aW[0])do if hS==nil or bN.center.x<hS then hS=bN.center.x end;if hT==nil or bN.center.x>hT then hT=bN.center.x end;if hU==nil or bN.center.y<hU then hU=bN.center.y end;if hV==nil or bN.center.y>hV then hV=bN.center.y end end;aX=""local hW=1.1*(hT-hS)/1920;local hX=1.4*(hV-hU)/1080;for bW,bN in pairs(aW[0])do local dm=960+bN.center.x/hW;local ed=540+bN.center.y/hX;aX=aX..'<circle cx="'..dm..'" cy="'..ed..'" r="'..bN.radius/hW*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not o(bN.name,"Moon")and not o(bN.name,"Sanctuary")and not o(bN.name,"Space")then aX=aX.."<text x='"..dm.."' y='"..ed+bN.radius/hW*30+20 .."' font-size='28' fill="..at.." text-anchor='middle' font-family='Montserrat'>"..bN.name.."</text>"end end;local fO=bE;local dm=960+fO.x/hW;local ed=540+fO.y/hX;aX=aX..'<circle cx="'..dm..'" cy="'..ed..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aX=aX.."<text x='"..dm.."' y='"..ed-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aX=aX..[[</svg>]]aY=hW;aZ=hX;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aX)local fO=bE;local dm=960+fO.x/hW;local ed=540+fO.y/hX;aX='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aX=aX.."<text x='80' y='105' font-size='18' fill="..at.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"a_=screen_2.addContent((dm-80)/19.20,(ed-80)/10.80,aX)end end;local function hY()for bW,bN in pairs(SavedLocations)do table.insert(aW[0],bN)end;bV()end;local function hZ()local b2={}local h_=30000000/3600;local i0=h_*h_;local i1=100;local function i2(bN)return 1/math.sqrt(1-bN*bN/i0)end;function b2.computeAccelerationTime(i3,i4,i5)local i6=h_*math.asin(i3/h_)return(h_*math.asin(i5/h_)-i6)/i4 end;function b2.computeDistanceAndTime(i3,i5,i7,i8,i9,ia)i9=i9 or 0;ia=ia or 0;local ib=i3<=i5;local ic=i8*(ib and 1 or-1)/i7;local id=-ia/i7;local ie=ic+id;if ib and ie<=0 or not ib and ie>=0 then return-1,-1 end;local ig,ih=0,0;if ic~=0 and i9>0 then local i6=math.asin(i3/h_)local ii=math.pi*(ic/2+id)local ij=ic*i9;local ik=h_*math.pi;local bN=function(g4)local il=(ii*g4-ij*math.sin(math.pi*g4/2/i9)+ik*i6)/ik;local im=math.tan(il)return h_*im/math.sqrt(im*im+1)end;local io=ib and function(g6)return g6>=i5 end or function(g6)return g6<=i5 end;ih=2*i9;if io(bN(ih))then local ip=0;while c(ih-ip)>0.5 do local g4=(ih+ip)/2;if io(bN(g4))then ih=g4 else ip=g4 end end end;local iq=i3;local ir=ih/i1;for is=1,i1 do local bT=bN(is*ir)ig=ig+(bT+iq)*ir/2;iq=bT end;if ih<2*i9 then return ig,ih end;i3=iq end;local i6=h_*math.asin(i3/h_)local bx=(h_*math.asin(i5/h_)-i6)/ie;local it=i0*math.cos(i6/h_)/ie;local ac=it-i0*math.cos((ie*bx+i6)/h_)/ie;return ac+ig,bx+ih end;function b2.computeTravelTime(i3,i4,ac)if ac==0 then return 0 end;if i4>0 then local i6=h_*math.asin(i3/h_)local it=i0*math.cos(i6/h_)/i4;return(h_*math.acos(i4*(it-ac)/i0)-i6)/i4 end;if i3==0 then return-1 end;assert(i3>0,'Acceleration and initial speed are both zero.')return ac/i3 end;function b2.lorentz(bN)return i2(bN)end;return b2 end;local function iu()local vec3=require('cpml.vec3')local f_=f_()local function g5(g6)return type(g6)=='string'end;local function g3(g4)return type(g4)=='table'end;local function b_(c0,c1)if c0==0 then return c(c1)<1e-09 end;if c1==0 then return c(c0)<1e-09 end;return c(c0-c1)<math.max(c(c0),c(c1))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c7)assert(self.body)local ac=c7+self.body.radius;if not b_(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gv,bS)assert(self.body)assert(g3(gv)or g5(gv))assert(g3(bS))local fO=(g5(gv)or f_.isMapPosition(gv))and self.body:convertToWorldCoordinates(gv)or vec3(gv)local bN=vec3(bS)local iv=fO-self.body.center;local g_=bN:len2()local iw=iv:len()local ix=self.body.GM;local iy=((g_-ix/iw)*iv-iv:dot(bN)*bN)/ix;local c0=ix/(2*ix/iw-g_)local iz=iy:len()local h0=iy:normalize()local iA=c0*(1-iz)local iB=c0*(1+iz)local iC=iA*h0+self.body.center;local iD=iz<=1 and-iB*h0+self.body.center or nil;local iE=math.sqrt(c0*ix*(1-iz*iz))local iF=iD and 2*math.pi*math.sqrt(c0^3/ix)local iG=math.acos(iy:dot(iv)/(iz*iw))if iv:dot(bN)<0 then iG=-(iG-2*math.pi)end;local iH=math.acos((math.cos(iG)+iz)/(1+iz*math.cos(iG)))local iI=iH;if iI<0 then iI=iI+2*math.pi end;local iJ=iI-iz*math.sin(iI)local iK=0;local iL=0;local iM=0;if iF~=nil then iK=iJ/(2*math.pi/iF)iL=iF-iK;iM=iL+iF/2;if iG-math.pi>0 then iL=iK;iM=iL+iF/2 end;if iM>iF then iM=iM-iF end end;return{periapsis={position=iC,speed=iE/iA,circularOrbitSpeed=math.sqrt(ix/iA),altitude=iA-self.body.radius},apoapsis=iD and{position=iD,speed=iE/iB,circularOrbitSpeed=math.sqrt(ix/iB),altitude=iB-self.body.radius},currentVelocity=bN,currentPosition=fO,eccentricity=iz,period=iF,eccentricAnomaly=iH,meanAnomaly=iJ,timeToPeriapsis=iL,timeToApoapsis=iM}end;local function iN(iO)local h8=f_.BodyParameters(iO.planetarySystemId,iO.bodyId,iO.radius,iO.center,iO.GM)return setmetatable({body=h8},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iN(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})he()coroutine.yield()hi()coroutine.yield()hs()hD()coroutine.yield()hR()b0=f_()b1=b0(fZ())b2=hZ()b4=iu()b5=de()hY()bV()cp()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(an>0 or an==0 and ao<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(an>0 or an==0 and ao<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;dc()if button then button.activate()end;local cw=c2(planet,bE)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end;function script.onTick(iP)local function iQ()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iR()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iS(iT)local gr=500000;local iU,iV,iW=math.huge;local iX=false;local iY=vec3({13771471,7435803,-128971})local iZ=18000000;iU=vec3(iT):dist(iY)if iU<iZ then return true,c(iU-iZ),"Safe Zone",0 end;iV=vec3(iT):dist(vec3(planet.center))if iV<gr then iX=true end;if c(iV-gr)<c(iU-iZ)then return iX,c(iV-gr),planet.name,planet.bodyId else return iX,c(iU-iZ),"Safe Zone",0 end end;local function i_(dl)local j0=0;ay=""local j1=aK;local j2=0;local j3=0;local j4=0;local dM=0;local dN=""local j5=core.getElementHitPointsById;for bW in pairs(ap)do local hp=0;local j6=0;j6=h(ap[bW])hp=j5(ap[bW])j2=j2+hp;if hp<j6 then if hp==0 then j4=j4+1 else j3=j3+1 end;if aL and#av==0 then position=vec3(core.getElementPositionById(ap[bW]))local dm=position.x-aU;local ed=position.y-aU;local j7=position.z-aU;table.insert(av,core.spawnArrowSticker(dm,ed,j7+1,"down"))table.insert(av,core.spawnArrowSticker(dm,ed,j7+1,"down"))core.rotateSticker(av[2],0,0,90)table.insert(av,core.spawnArrowSticker(dm+1,ed,j7,"north"))table.insert(av,core.spawnArrowSticker(dm+1,ed,j7,"north"))core.rotateSticker(av[4],90,90,0)table.insert(av,core.spawnArrowSticker(dm-1,ed,j7,"south"))table.insert(av,core.spawnArrowSticker(dm-1,ed,j7,"south"))core.rotateSticker(av[6],90,-90,0)table.insert(av,core.spawnArrowSticker(dm,ed-1,j7,"east"))table.insert(av,core.spawnArrowSticker(dm,ed-1,j7,"east"))core.rotateSticker(av[8],90,0,90)table.insert(av,core.spawnArrowSticker(dm,ed+1,j7,"west"))table.insert(av,core.spawnArrowSticker(dm,ed+1,j7,"west"))core.rotateSticker(av[10],-90,0,90)table.insert(av,ap[bW])end elseif aL and#av>0 and av[11]==ap[bW]then for dF in pairs(av)do core.deleteSticker(av[dF])end;av={}end end;j0=d(j2/j1*100)if j0<100 then dl[#dl+1]=[[<g class="pbright txt">]]dM=d(j0*2.55)dN=e("rgb(%d,%d,%d)",255-dM,dM,0)if j0<100 then dl[#dl+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dN,j0)if j4>0 then dl[#dl+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dN,j4,j3)elseif j3>0 then dl[#dl+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dN,j3)end end;dl[#dl+1]=[[<\g>]]end end;local function j8(dl)local j9=d(r(ac/(aB/4)*255,0,255))dl[#dl+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(x+0.5)+j9,d(z+0.5)-j9,d(y+0.5)-j9)end;local function ja()local jb=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return jb end;local function jc()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-bE):len()else AutopilotDistance=(CustomTarget.position-bE):len()end end;local bT=bC;local jd=unit.getThrottle()/100;if AtmoSpeedAssist then jd=C end;local je,jf=b2.computeDistanceAndTime(bC,MaxGameVelocity,l(),Nav:maxForceForward()*jd,warmup,0)local a0,a1;if not TurnBurn then a0,a1=d1(MaxGameVelocity)else a0,a1=d2(MaxGameVelocity)end;local _,jg;if not TurnBurn and bT>0 then _,jg=d1(bT)else _,jg=d2(bT)end;local jh=0;local ji=0;if AutopilotCruising or not Autopilot and bT>5 then ji=b2.computeTravelTime(bT,0,AutopilotDistance)elseif a0+je<AutopilotDistance then jh=AutopilotDistance-(a0+je)ji=b2.computeTravelTime(8333.0556,0,jh)else local jj=(AutopilotDistance-a0)/je;je=AutopilotDistance-a0;jf=jf*jj end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ji elseif AutopilotBraking then return jg elseif AutopilotCruising then return ji+jg else return jf+a1+ji end end;local function jk()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function jl()if radar_1 then local jm=radar_1.getEntries()local jn=radar_1.getData()local jo=bM(1770)local jp=bO(330)if#jm>0 then local jq=jn:find('identifiedConstructs":%[%]')if jq==nil and perisPanelID==nil then af=1;ci()end;if jq~=nil and perisPanelID~=nil then ci()end;if radarPanelID==nil then ci()end;ad=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jo,jp,#jm)local jr={}for bW,bN in pairs(jm)do if radar_1.hasMatchingTransponder(bN)==1 then table.insert(jr,bN)end end;if#jr>0 then local ed=bO(15)local dm=bM(1370)ad=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,dm,ed)for bW,bN in pairs(jr)do ed=ed+20;ad=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,dm,ed,radar_1.getConstructName(bN))end end else local js;js=jn:find('worksInEnvironment":false')if js then ad=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jo,jp)else ad=e([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jo,jp)end;if radarPanelID~=nil then af=0;ci()end end end end;local function jt()local dK=q()local eY=bC;local ju=dK-aq;if eY>1.38889 then eY=eY/1000;local jv=eY*(dK-aq)TotalDistanceTravelled=TotalDistanceTravelled+jv;a5=a5+jv end;a6=a6+ju;TotalFlightTime=TotalFlightTime+ju;aq=dK end;local function jw()for _,bN in pairs(aA)do if bN.hovered then if not bN.drawCondition or bN.drawCondition()then bN.toggleFunction()end;bN.hovered=false end end end;local function jx()local function jy(jz,jA,dm,ed,hx,hy)if jz>dm and jz<dm+hx and jA>ed and jA<ed+hy then return true else return false end end;local dm=a9+aB/2;local ed=aa+aC/2;for _,bN in pairs(aA)do bN.hovered=jy(dm,ed,bN.x,bN.y,bN.width,bN.height)end end;local function jB(dl)local function jC(dl,jD,hover,dm,ed,il,jE,jF,jG,jH,jI)if type(jH)=="function"then jH=jH()end;if type(jI)=="function"then jI=jI()end;dl[#dl+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",dm,ed,il,jE)if jD then dl[#dl+1]=e("%s'",jF)else dl[#dl+1]=jG end;if hover then dl[#dl+1]=" style='stroke:white; stroke-width:2'"else dl[#dl+1]=" style='stroke:black; stroke-width:1'"end;dl[#dl+1]="></rect>"dl[#dl+1]=e("<text x='%f' y='%f' font-size='24' fill='",dm+il/2,ed+jE/2+5)if jD then dl[#dl+1]="black"else dl[#dl+1]="white"end;dl[#dl+1]="' text-anchor='middle' font-family='Montserrat'>"if jD then dl[#dl+1]=e("%s</text>",jH)else dl[#dl+1]=e("%s</text>",jI)end end;local jJ="rgb(50,50,50)'"local jK="rgb(210,200,200)"local jL=jC;for _,bN in pairs(aA)do local hw=bN.disableName;local hv=bN.enableName;if type(hw)=="function"then hw=hw()end;if type(hv)=="function"then hv=hv()end;if not bN.drawCondition or bN.drawCondition()then jL(dl,bN.toggleVar(),bN.hovered,bN.x,bN.y,bN.width,bN.height,jK,jJ,hw,hv)end end end;if iP=="tenthSecond"then if an>0 and not WasInAtmo then if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then C=1;Nav.control.cancelCurrentControlMasterMode()G=false end end;if bH~=nil then if s:getTargetSpeed(axisCommandId.longitudinal)~=bH then bL(bH,TRUE)else bH=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iQ()end;if AutopilotTargetName~=nil then local jM=CustomTarget~=nil;planetMaxMass=ja()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=jc()if jM and not Autopilot then ac=(bE-CustomTarget.position):len()else ac=(AutopilotTargetCoords-bE):len()end;if not TurnBurn then a0,a1=d1(bC)a2,a3=d1(MaxGameVelocity)else a0,a1=d2(bC)a2,a3=d2(MaxGameVelocity)end;local f9,cf=cb(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..f9 ..'", "unit":"'..cf..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..d4(travelTime)..'", "unit":""}')f9,cf=cb(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f9 ..'", "unit":"'..cf..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..d4(a1)..'", "unit":""}')f9,cf=cb(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f9 ..'", "unit":"'..cf..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..d4(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f9,cf=cb(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",f9)..'", "unit":"'..cf..'"}')if an>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iR()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iP=="oneSecond"then ak=false;bP(nil,true)jt()jl()jk()local dl={}dl=b5.DrawOdometer(dl,a5,TotalDistanceTravelled,a6)if ShouldCheckDamage then i_(dl)end;ae=table.concat(dl,"")collectgarbage("collect")elseif iP=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local ce=f(dbHud_1.getStringValue("SavedLocations"))if ce~=nil then _G["SavedLocations"]=ce;local cA=-1;local cB;for bW,bN in pairs(SavedLocations)do if bN.name and bN.name=="SatNav Location"then cA=bW;break end end;if cA~=-1 then cB=SavedLocations[cA]cA=-1;for bW,bN in pairs(aW[0])do if bN.name and bN.name=="SatNav Location"then cA=bW;break end end;if cA>-1 then aW[0][cA]=cB end;bV()W=cB.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cp()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iP=="msgTick"then local dl={}b5.DisplayMessage(dl,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif iP=="animateTick"then b7=true;b6=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif iP=="hudTick"then local dl={}b5.HUDPrologue(dl)if showHud then b5.UpdateHud(dl)else b5.DisplayOrbitScreen(dl)b5.DrawWarnings(dl)end;b5.HUDEpilogue(dl)dl[#dl+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aB,aC)if W~="empty"then b5.DisplayMessage(dl,W)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b5.DrawDeadZone(dl)end end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then jx()jB(dl)if screen_1.getMouseState()==1 then jw()end;dl[#dl+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)elseif system.isViewLocked()==0 then if m()==1 and V then jx()jB(dl)if not b6 and not b7 then local jN=table.concat(dl,"")dl={}dl[#dl+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aB,aC)dl[#dl+1]=aX;dl[#dl+1]=jN;dl[#dl+1]="</body>"b6=true;dl[#dl+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dl,"")system.setScreen(content)elseif b7 then local jN=table.concat(dl,"")dl={}dl[#dl+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aB,aC)dl[#dl+1]=aX;dl[#dl+1]=jN;dl[#dl+1]="</body>"end;if not b6 then dl[#dl+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)end else jw()end else if not V and m()==0 then jw()if ac>DeadZone then if DisplayDeadZone then j8(dl)end end else jx()jB(dl)end;dl[#dl+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)end;dl[#dl+1]=[[</svg></body>]]content=table.concat(dl,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iP=="apTick"then am=j()>0;an=j()ao=core.getAltitude()if antigrav then bG=antigrav.getState()==1 end;bx=q()local jO=bx-bd;bd=bx;local fH=getRoll(bD,bz,bA)local fI=fH/180*math.pi;local fJ=math.cos(fI)local fK=math.sin(fI)local jP=cD(bD,bz,bA*fJ+by*fK)local jQ=-math.deg(cI(by,bB,bz))local jR=math.deg(cI(bA,bB,bz))local jS=1;local jT=1;bc=am and jQ<-YawStallAngle or jQ>YawStallAngle or jR<-PitchStallAngle or jR>PitchStallAngle;ba=system.getMouseDeltaX()bb=system.getMouseDeltaY()if InvertMouse and not V then bb=-bb end;P=0;T=0;O=0;sys=b1[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b4(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bB)if ao==0 then ao=(bE-planet.center):len()-planet.radius end;aj=cj()local bQ=planet:getGravity(core.getConstructWorldPos()):len()*l()be=0;b3=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not am then A,B,_,_=iS(bE)else A=true end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*aB;aa=screen_1.getMouseY()*aC elseif system.isViewLocked()==0 then if m()==1 and V then if not b6 then a9=a9+ba;aa=aa+bb end else a9=0;aa=0 end else a9=a9+ba;aa=aa+bb;ac=math.sqrt(a9*a9+aa*aa)if not V and m()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bb,-100,100)+0.5)*2*jS;P=(-utils.smoothstep(ba,-100,100)+0.5)*2*jT else a9=0;aa=0 end end end;local jU=bC>8334;if bC>SpaceSpeedLimit/3.6 and not am and not Autopilot and not jU then W="Space Speed Engine Shutoff reached"if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,0)C=0 end;if not jU and LastIsWarping then if not BrakeIsOn then cM()end;if Autopilot then cu()end end;LastIsWarping=jU;if am and an>0.09 then if bC>bh/3.6 and not AtmoSpeedAssist and not as then BrakeIsOn=true;as=true elseif not AtmoSpeedAssist and as then if bC<bh/3.6 then BrakeIsOn=false;as=false end end end;if BrakeIsOn then S=1 else S=0 end;if ProgradeIsOn then if ag then BrakeIsOn=false;local jV=false;if CustomTarget~=nil then jV=cQ(CustomTarget.position-bE,0.01)else jV=cQ(vec3(bB),0.01)end;b8=true;if jV and(c(fH)<2 or c(jP)>80)and bC>=bh/3.6-1 then if(vec3(targetCoords)-bE):len()>40000 then ProgradeIsOn=false;IntoOrbit=true else BrakeIsOn=false;ProgradeIsOn=false;L=true;ag=false;ai=true;Autopilot=false;cZ()end elseif am and AtmoSpeedAssist then bI(1)else bL(d(bh))C=0 end elseif bC>K then cQ(vec3(bB),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif bC>K then cQ(-vec3(bB))end end;if not ProgradeIsOn and ag and not IntoOrbit then if an==0 then L=true;cZ()ag=false;ai=true else ag=false;cu()end end;local ct=bD*-1;local dQ=bB.x*ct.x+bB.y*ct.y+bB.z*ct.z;if ai and CustomTarget~=nil and(ao<HoldAltitude+200 and ao>HoldAltitude-200)and bC*3.6>bh-100 and c(dQ)<20 and an>=0.1 and(CustomTarget.position-bE):len()>2000+ao then cu()ai=false end;if VertTakeOff then b8=true;local jW=HoldAltitude;if dQ<-30 then W="Unable to achieve lift. Safety Landing."a8=0;b8=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bG or HoldAltitude<planet.spaceEngineMinAltitude then if bG then jW=antigrav.getBaseAltitude()end;if ao<jW-100 then bi=0;a8=15;BrakeIsOn=false elseif dQ>0 then BrakeIsOn=true;a8=0 elseif dQ<-30 then BrakeIsOn=true;a8=15 elseif ao>=jW then if bG then BrakeIsOn=true;W="Takeoff complete. Singularity engaged"VertTakeOff=false else BrakeIsOn=false;W="VTO complete. Engaging Horizontal Flight"cm()end;a8=0 end else if an>0.08 then bi=0;BrakeIsOn=false;a8=20 elseif an<0.08 and an>0 then BrakeIsOn=false;if bu then bi=0;a8=20 else a8=0;bi=36;bL(3500)end else b8=autoRollPreference;IntoOrbit=true;bs=false;CancelIntoOrbit=false;bm=false;bk=nil;bl=nil;if br==nil then br=planet end;bq=jW;bp=true;VertTakeOff=false end end;if bi~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jX=r(bi-jP,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(jX)local jY=r(vTpitchPID:get(),-1,1)O=jY end end;if IntoOrbit then if br==nil then if VectorToTarget then br=a4 else br=planet end end;local jZ,j_=cb(bq,2)local k0=jZ..j_;local k1,k2=b4(br):escapeAndOrbitalSpeed((bE-br.center):len()-br.radius)local k3=fH;local function k4(k5)local cW=CustomTarget.position-bE;local a0,_=b2.computeDistanceAndTime(bC,bh/3.6,l(),0,0,LastMaxBrake)if k5 and cW:len()>25000+a0+ao then return false elseif bB:normalize():dot(cW:normalize())>0.5 and cW:len()>25000+a0+ao then return false end;AutopilotTargetCoords=CustomTarget.position;L=true;ag=false;ai=true;cZ()bo.VectorToTarget=false;return true end;local function k6()if not bo.VectorToTarget and not ag then bj=nil;bn=false;bp=false;br=nil;b8=autoRollPreference;if not ai then W="Orbit established"end;bo.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bm=false;bk=nil;bl=nil;br=nil;bs=false;bw=0 end end;if not bp then if br.hasAtmosphere then bq=d(br.radius*(TargetOrbitRadius-1)+br.noAtmosphericDensityAltitude)else bq=d(br.radius*(TargetOrbitRadius-1)+br.surfaceMaxAltitude)end;bp=true end;if AltitudeHold or VectorToTarget then if not ah then bq=t(HoldAltitude,1)bm=true;AltitudeHold=false end;if VectorToTarget then bo.VectorToTarget=VectorToTarget;VectorToTarget=false end end;if bo.VectorToTarget or ag then if k4(true)then k6()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ao>bq*0.9 and ao<bq*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bq*0.99 and orbit.apoapsis.altitude>=bq*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bs then if bs then BrakeIsOn=false;C=0;bI(0)bs=true;bk=0;if bo.VectorToTarget or ag then if not k4()then bj="Orbiting to Target"else W="In Range, proceeding with reentry"end end;k6()else bw=bw+1;if bw>=2 then bs=true end end else bj="Adjusting Orbit - OrbitHeight: "..k0;bn=true;bL(k2*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local k7=dQ;local k8=ao-bq;local k9=c(k8)if dQ<10 and c(jP)<10 and k9<100 then k7=dQ*2 end;if k7<10 and c(jP)<10 and k9<100 then k7=k7*2 end;if k7<5 and c(jP)<5 and k9<100 then k7=k7*4 end;VSpdPID:inject(k7)bk=r(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(k8)bk=r(bk-r(OrbitAltPID:get(),-15,15),-90,90)end end else local ka=2.75;local kb=c(p(k1*ka))local kc=kb%50;if kc>0 then kb=kb-kc+50 end;BrakeIsOn=false;if not bm then local kd=false;local ke=false;if ao<bq then bj="Aligning to orbital path - OrbitHeight: "..k0 else bj="Aligning to orbital point - OrbitHeight: "..k0 end;bk=0;bl=0;if jP<=bk+1 and jP>=bk-1 then kd=true else kd=false end;if k3<=bl+1 and k3>=bl-1 then ke=true else ke=false end;if kd and ke then bk=nil;bl=nil;bm=true end else if ao<bq*0.8 then bj="Escaping planet gravity - OrbitHeight: "..k0;bk=utils.map(dQ,200,0,-15,80)elseif ao>=bq*0.8 and ao<bq*1.15 then bj="Approaching orbital corridor - OrbitHeight: "..k0;kb=kb*0.75;bk=utils.map(dQ,100,-100,-15,65)elseif ao>=bq*1.15 and ao<bq*1.5 then bj="Approaching orbital corridor - OrbitHeight: "..k0;kb=kb*0.75;if dQ<0 or bn then bk=utils.map(ao,bq*1.5,bq*1.01,-30,0)else bk=utils.map(ao,bq*0.99,bq*1.5,0,30)end elseif ao>bq*1.5 then bj="Reentering orbital corridor - OrbitHeight: "..k0;bk=utils.map(dQ,100,-100,-65,0)kb=kb*0.75 end end;bL(d(kb))end;if bk~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local kf=bk-jP;OrbitPitchPID:inject(kf)local kg=r(OrbitPitchPID:get(),-0.5,0.5)O=kg end;if bl~=nil then if jP<80 then local kh=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(kh*0.01,0,kh*0.1)end;local ki=bl-k3;OrbitRollPID:inject(ki)local kj=r(OrbitRollPID:get(),-0.5,0.5)T=kj end end elseif CancelIntoOrbit then bp=false;br=nil;bI(0)CancelIntoOrbit=false end;if Autopilot and an==0 and not ag then local targetCoords,kk=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kl=(CustomTarget.position-a4.center):normalize()local km=kl:project_on_plane((a4.center-bE):normalize()):normalize()local kn=a4.center+km*(a4.radius+AutopilotTargetOrbit)local ko=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(bE-kn):len()<(bE-ko):len()then targetCoords=kn;AutopilotTargetCoords=targetCoords else targetCoords=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=targetCoords end;local cw=c2(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)kk=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kk=true;TargetSet=true;AutopilotRealigned=true;targetCoords=CustomTarget.position+(bE-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kl=(bE+bB*100000-a4.center):normalize()local km=kl:project_on_plane((a4.center-bE):normalize()):normalize()if km:len()<1 then kl=(bE+bz*100000-a4.center):normalize()km=kl:project_on_plane((a4.center-bE):normalize()):normalize()end;targetCoords=a4.center+km*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=targetCoords;TargetSet=true;kk=true;AutopilotRealigned=true;local cw=c2(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end end;AutopilotDistance=(vec3(targetCoords)-bE):len()local fa,fb,fc=b1:getPlanetarySystem(0):castIntersections(bE,bB:normalize(),function(fd)if fd.noAtmosphericDensityAltitude>0 then return fd.radius+fd.noAtmosphericDensityAltitude else return fd.radius+fd.surfaceMaxAltitude*1.5 end end)local fe=fb;if fc~=nil and fb~=nil then fe=math.min(fc,fb)end;if fe~=nil and fe<AutopilotDistance and fa.name==a4.name then AutopilotDistance=fe end;local jV=true;local kp=(a4.center-(bE+vec3(bB):normalize()*AutopilotDistance)):len()-a4.radius;local f9,cf=cb(kp)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f9 ..'", "unit":"'..cf..'"}')local a0,a1;if not TurnBurn then a0,a1=d1(bC)else a0,a1=d2(bC)end;if bC>300 and AutopilotAccelerating then local cW=vec3(targetCoords)-bE;local kq=r(math.deg(cI(by,bB:normalize(),cW:normalize()))*bC/500,-90,90)local kr=r(math.deg(cI(bA,bB:normalize(),cW:normalize()))*bC/500,-90,90)if c(kq)<20 and c(kr)<20 then kq=kq*2;kr=kr*2 end;if c(kq)<2 and c(kr)<2 then kq=kq*2;kr=kr*2 end;local jQ=-math.deg(cI(by,bz,bB:normalize()))local jR=-math.deg(cI(bA,bz,bB:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kr-jR)local ks=r(apPitchPID:get(),-1,1)O=O+ks;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kq-jQ)local kt=r(apYawPID:get(),-1,1)P=P+kt;kk=true;if c(kq)>2 or c(kr)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kp<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b4(a4):escapeAndOrbitalSpeed(kp)end end;if not AutopilotCruising and not AutopilotBraking and not kk then jV=cQ((targetCoords-bE):normalize())elseif TurnBurn then jV=cQ(-vec3(bB):normalize())end;if AutopilotAccelerating then if not J then BrakeIsOn=false;bI(AutopilotInterplanetaryThrottle)C=t(AutopilotInterplanetaryThrottle,2)J=true end;local jd=unit.getThrottle()if AtmoSpeedAssist then jd=C end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jd==0 and J then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bI(0)C=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bI(0)C=0;J=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then bI(100,true)C=1 end;local _,k2=b4(a4):escapeAndOrbitalSpeed((bE-planet.center):len()-planet.radius)local cW;if CustomTarget~=nil then cW=CustomTarget.position-bE end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bC<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bC<=k2 and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bI(0)C=0;J=false;ProgradeIsOn=true;ag=true;local cw=c2(a4,AutopilotTargetCoords)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,k2=b4(a4):escapeAndOrbitalSpeed((bE-planet.center):len()-planet.radius)if bC<=k2 then if CustomTarget~=nil then if bB:normalize():dot(cW:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cw=c2(a4,CustomTarget.position)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bI(0)C=0;J=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cw=c2(a4,CustomTarget.position)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;C=0;J=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ag=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jd=unit.getThrottle()if AtmoSpeedAssist then jd=C end;if jd>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jV then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*bA;AutopilotShipUp=by;AutopilotShipRight=bA end;AutopilotRealigned=true elseif jV then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not J then bI(AutopilotInterplanetaryThrottle,true)C=t(AutopilotInterplanetaryThrottle,2)J=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and an>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;bI(0)C=0;J=false;ProgradeIsOn=true;ag=true;local cw=c2(a4,CustomTarget.position)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end;if U then b8=true;local kr=0;local fO=bE+vec3(unit.getMasterPlayerRelativePosition())local ku=fO-bE;local kv=vec3(ku):project_on(bz):len()local kw=vec3(ku):project_on(bA):len()local ac=math.sqrt(kv*kv+kw*kw)cQ(ku:normalize())local kx=40;local ky=ac<kx;local kz=100;local kA=r((ac-kx)/2,10,kz)O=0;local jV=c(P)<0.1;if jV and bC<kA and not ky then BrakeIsOn=false;kr=-20 else BrakeIsOn=true;kr=0 end;local kB=0;if c(kr-jP)>kB then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kr-jP)local ks=pitchPID:get()O=ks end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cx=unit.getClosestPlanetInfluence()>0;local kC=HoldAltitude-ao;local kD=500+bC;local kE=1;if AutoTakeoff then kE=r(bC/100,0.1,1)end;local kr=(utils.smoothstep(kC,-kD,kD)-0.5)*2*MaxPitch*kE;if not Reentry and not ag and not VectorToTarget and bz:dot(bB:normalize())<0.99 then kr=(utils.smoothstep(kC,-kD*r(20-19*an*10,1,20),kD*r(20-19*an*10,1,20))-0.5)*2*MaxPitch*r(2-an*10,1,2)*kE end;if not AltitudeHold then kr=0 end;if LockPitch~=nil then if am and not IntoOrbit then kr=LockPitch else LockPitch=nil end end;b8=true;local kF=O;if Reentry then local kG=d(bh)local kH,kI=b2.computeDistanceAndTime(bC,kG/3.6,l(),0,0,LastMaxBrake-planet.gravity*9.8*l())local kJ=ao-(planet.noAtmosphericDensityAltitude+5000)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ao>planet.noAtmosphericDensityAltitude+5000 and bC<=kG/3.6 and bC>kG/3.6-10 and c(bB:normalize():dot(bz))>0.9 then Nav.control.cancelCurrentControlMasterMode()C=0 elseif s:getAxisCommandType(0)==axisCommandType.byThrottle and(kH>-1 and kJ<=kH or ao<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;if not L then kr=-80;if an>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kr=0;b8=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ao>planet.noAtmosphericDensityAltitude+5000 then b8=true elseif ao<=planet.noAtmosphericDensityAltitude+5000 then bL(kG)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and s:getTargetSpeed(axisCommandId.longitudinal)==bh then L=false;Reentry=false;b8=true end end end;if bC>K and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then cQ(vec3(bB))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and an>0.01 then local cW;if CustomTarget~=nil then cW=CustomTarget.position-bE else cW=a4.center-bE end;local kq=math.deg(cI(bD:normalize(),bB,cW))*2;local kK=math.rad(c(fH))if bC>minRollVelocity and an>0.01 then local kL=r(90-kr*2,-90,90)be=r(kq*2,-kL,kL)local kM=kq;kq=r(r(kq,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kK)+4*(jP-kr)*math.sin(math.rad(fH)),-YawStallAngle*0.80,YawStallAngle*0.80)kr=r(r(kr*math.cos(kK),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(r(c(kM)*math.sin(kK),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else be=0;kq=r(kq,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kN=jQ-kq;if not bc and bC>minRollVelocity and an>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kN)local kt=r(yawPID:get(),-1,1)P=P+kt elseif am and aj>-1 or bC<minRollVelocity then cQ(cW)elseif bc and an>0.01 then if(jQ<-YawStallAngle or jQ>YawStallAngle)and an>0.01 then cQ(bB)end;if(jR<-PitchStallAngle or jR>PitchStallAngle)and an>0.01 then kr=r(jP-jR,jP-PitchStallAngle*0.80,jP+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not ah then local jW=planet:getAltitude(CustomTarget.position)local kJ=math.sqrt(cW:len()^2-(ao-jW)^2)local kO=LastMaxBrakeInAtmo;if kO then kO=kO*r(bC/100,0.1,1)*an else kO=LastMaxBrake end;if an<0.01 then kO=LastMaxBrake end;local kP=bB:len()-c(dQ)local kQ=vec3(core.getWorldAirFrictionAcceleration())local kR=math.sqrt(kQ:len()-kQ:project_on(ct):len())*l()if bC>100 then a0,a1=b2.computeDistanceAndTime(bC,100,l(),0,0,kO+kR)local kS,kT=b2.computeDistanceAndTime(100,0,l(),0,0,kO/2)a0=a0+kS else a0,a1=b2.computeDistanceAndTime(bC,0,l(),0,0,kO/2)end;StrongBrakes=true;if not ah and not Reentry and kJ<=a0+bC*jO/2 and(bB:project_on_plane(bD):normalize():dot(cW:project_on_plane(bD):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bI(0)C=0;if AltitudeHold then cn()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kP<0.1 or kJ<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kJ)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kJ end elseif VectorToTarget and an==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ah or Reentry)then if CustomTarget~=nil and a4.name==planet.name then local cW=CustomTarget.position-bE;local jW=planet:getAltitude(CustomTarget.position)local kJ=math.sqrt(cW:len()^2-(ao-jW)^2)local kO=LastMaxBrakeInAtmo;if not bs then bp=false;IntoOrbit=true else kO=LastMaxBrake;a0,a1=b2.computeDistanceAndTime(bC,0,l(),0,0,kO/2)StrongBrakes=true;if kJ<=a0+bC*jO/2 and bB:project_on_plane(bD):normalize():dot(cW:project_on_plane(bD):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;L=true;ag=false;ai=true;Autopilot=false;cZ()end end;LastDistanceToTarget=kJ end end end;if an==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ah or VectorToTarget or IntoOrbit or Reentry)then if not bs then IntoOrbit=true end end;if bc and an>0.01 and aj==-1 and bC>minRollVelocity and VectorStatus~="Finalizing Approach"then cQ(bB)kr=r(jP-jR,jP-PitchStallAngle*0.80,jP+PitchStallAngle*0.80)end;O=kF;local da=-1;if BrakeLanding then kr=0;local kU=false;local kV=30;if b3~=nil and b3>0 then local kR=0;local fP=r(an,0.4,2)local kO=LastMaxBrakeInAtmo*r(bC/100,0.1,1)*fP;local kW=b3*fP+kO+kR-bQ;local kX=kO/2+kR-bQ;local kY=bC-math.sqrt(c(kX/2)*20/(0.5*l()))*utils.sign(kX)if kY<0 then kY=0 end;local kZ;if bC>100 then local k_,_=b2.computeDistanceAndTime(bC,100,l(),0,0,kO)local l0,_=b2.computeDistanceAndTime(100,0,l(),0,0,math.sqrt(kO))kZ=k_+l0 else kZ=b2.computeDistanceAndTime(bC,0,l(),0,0,math.sqrt(kO))end;if kZ<20 then BrakeIsOn=false else local l1=0;if kY>100 then local l2,_=b2.computeDistanceAndTime(kY,100,l(),0,0,kW)local l3,_=b2.computeDistanceAndTime(100,0,l(),0,0,b3*fP+math.sqrt(kO)+kR-bQ)l1=l2+l3 else l1,_=b2.computeDistanceAndTime(kY,0,l(),0,0,b3*fP+math.sqrt(kO)+kR-bQ)end;l1=(l1+15+bC*jO)*1.1;local l4=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if l4 then local jW=planet:getAltitude(CustomTarget.position)local l5=ao-jW-100;local cW=CustomTarget.position-bE;local l6=math.sqrt(cW:len()^2-(ao-jW)^2)if l6>100 then l4=false elseif l5<=l1 or l1==-1 then BrakeIsOn=true;kU=true else BrakeIsOn=false;kU=true end end;if not l4 and CalculateBrakeLandingSpeed then if l1>=kV then BrakeIsOn=true else BrakeIsOn=false end;kU=true end end end;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)da=aj;if da>-1 then b8=autoRollPreference;if bC<1 or bB:normalize():dot(bD)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bB:normalize():dot(-ct)<0.999 then BrakeIsOn=true elseif dQ<-brakeLandingRate and not kU then BrakeIsOn=true elseif not kU then BrakeIsOn=false end end;if AutoTakeoff or ah then local fa,fc,fb;if AutopilotTargetCoords~=nil then fa,fc,fb=b1:getPlanetarySystem(0):castIntersections(bE,(AutopilotTargetCoords-bE):normalize(),function(fd)return fd.radius+fd.noAtmosphericDensityAltitude end)end;if bG then if ao>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bI(0)C=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kr)<15 and ao/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if s:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and bC<K then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;bI(0)C=0 elseif ah then bI(0)C=0;BrakeIsOn=true end elseif ah and an==0 and a4~=nil and(fa==nil or fa.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local l7=cj()>-1;local l8=jP;if(VectorToTarget or ah)and not l7 and bC>minRollVelocity and an>0.01 then local kK=math.rad(c(fH))l8=jP*c(math.cos(kK))+jR*math.sin(kK)end;local l9=r(kr-l8,-PitchStallAngle*0.80,PitchStallAngle*0.80)if an<0.01 and VectorToTarget then l9=r(kr-l8,-85,MaxPitch)elseif an<0.01 then l9=r(kr-l8,-MaxPitch,MaxPitch)end;if c(fH)<5 or VectorToTarget or BrakeLanding or l7 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(l9)local ks=pitchPID:get()O=O+ks end end;if antigrav~=nil and(antigrav and not ExternalAGG and ao<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function la(lb,kA)local lc=vec3()local ld=vec3()if lb==axisCommandId.longitudinal then lc=vec3(core.getConstructOrientationForward())ld=bz elseif lb==axisCommandId.vertical then lc=vec3(core.getConstructOrientationUp())ld=by elseif lb==axisCommandId.lateral then lc=vec3(core.getConstructOrientationRight())ld=bA else return vec3()end;local le=vec3(core.getWorldGravity())local lf=le:dot(ld)local lg=vec3(core.getWorldAirFrictionAcceleration())local lh=lg:dot(ld)local li=vec3(core.getVelocity())local lj=li:dot(lc)local lk=kA*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lk-lj)local ll=targetSpeedPID2:get()local lm=(ll-lh-lf)*ld;return lm end;local function ln(lb,kA)local lc=vec3()local ld=vec3()if lb==axisCommandId.longitudinal then lc=vec3(core.getConstructOrientationForward())ld=bz elseif lb==axisCommandId.vertical then lc=vec3(core.getConstructOrientationUp())ld=by elseif lb==axisCommandId.lateral then lc=vec3(core.getConstructOrientationRight())ld=bA else return vec3()end;local le=vec3(core.getWorldGravity())local lf=le:dot(ld)local lg=vec3(core.getWorldAirFrictionAcceleration())local lh=lg:dot(ld)local li=vec3(core.getVelocity())local lj=li:dot(lc)local lk=kA*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lk-lj)local ll=targetSpeedPID:get()local lm=(ll-lh-lf)*ld;return lm end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bG and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if s:getAxisCommandType(0)==axisCommandType.byThrottle and G then C=0;s:setThrottleCommand(axisCommandId.longitudinal,C)G=false elseif s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not G then C=0;G=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lo=r(N+O+system.getControlDeviceForwardInput(),-1,1)local lp=r(Q+T+system.getControlDeviceYawInput(),-1,1)local lq=r(R+P-system.getControlDeviceLeftRightInput(),-1,1)local lr=S;bD=vec3(core.getWorldVertical())if bD==nil or bD:len()==0 then bD=(planet.center-bE):normalize()end;bE=vec3(core.getConstructWorldPos())by=vec3(core.getConstructWorldOrientationUp())bz=vec3(core.getConstructWorldOrientationForward())bA=vec3(core.getConstructWorldOrientationRight())bB=vec3(core.getWorldVelocity())bC=vec3(bB):len()local ls=bB:normalize()local lt=getRoll(bD,bz,bA)local lu=c(lt)local lv=utils.sign(lt)local lw=vec3(core.getWorldAngularVelocity())local lx=lo*pitchSpeedFactor*bA+lp*rollSpeedFactor*bz+lq*yawSpeedFactor*by;if bD:len()>0.01 and(an>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local fH=getRoll(bD,bz,bA)local fI=fH/180*math.pi;local fJ=math.cos(fI)local fK=math.sin(fI)local jP=cD(bD,bz,bA*fJ+by*fK)if b8==true and c(be-lt)>autoRollRollThreshold and lp==0 and c(jP)<85 then local ly=be;local kh=autoRollFactor;if an==0 then kh=kh/4;be=0;ly=0 end;if rollPID==nil then rollPID=pid.new(kh*0.01,0,kh*0.1)end;rollPID:inject(ly-lt)local lz=rollPID:get()lx=lx+lz*bz end end;if bD:len()>0.01 and an>0.0 then local lA=20.0;if turnAssist==true and lu>lA and lo==0 and lq==0 then local lB=turnAssistFactor*0.1;local lC=turnAssistFactor*0.025;local lD=(lu-lA)/(180-lA)*180;local lE=0;if lD<90 then lE=lD/90 elseif lD<180 then lE=(180-lD)/90 end;lE=lE*lE;local lF=-lv*lC*(1.0-lE)local lG=lB*lE;lx=lx+lG*bA+lF*by end end;local lH=1;local lI=0;local lJ=1;if system.getMouseWheel()>0 then if AltIsOn then if an>0 or Reentry then bh=r(bh+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else C=t(r(C+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if an>0 or Reentry then bh=r(bh-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else C=t(r(C-speedChangeLarge/100,-1,1),2)end end;D=0;local dQ=-bD:dot(bB)if am and AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bh/3.6-bB:dot(bz))local lK=throttlePID:get()F=r(lK,-1,1)if F<C and an>0.005 then E=true;s:setThrottleCommand(axisCommandId.longitudinal,r(F,0.01,1))else E=false;s:setThrottleCommand(axisCommandId.longitudinal,C)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-bh/3.6)local lL=r(brakePID:get(),0,1)if an>0 and dQ<-80 or an>0.005 then D=lL end;if D>0 then if E and F==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else F=r(F,0.01,1)end;local lM=''local lN=vec3()local lO=la(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lO,lI)local lP='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lP=lP..ExtraLongitudeTags end;local lQ=s:getAxisCommandType(axisCommandId.longitudinal)local lR=s:composeAxisAccelerationFromThrottle(lP,axisCommandId.longitudinal)local lS=ln(axisCommandId.lateral,LeftAmount*1000)lM=lM..' , '.."lateral airfoil , lateral ground "lN=lN+lS;if lN:len()>constants.epsilon then Nav:setEngineForceCommand(lM,lN,lI,'','','',lJ)end;Nav:setEngineForceCommand(lP,lR,lH)local lT='thrust analog vertical fueled 'local lU='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lU=lU..ExtraLateralTags end;if ExtraVerticalTags~="none"then lT=lT..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lT,lO,lH)else Nav:setEngineForceCommand(lT,vec3(),lH)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lU,lS,lH)else Nav:setEngineForceCommand(lU,vec3(),lH)end;if lr==0 then lr=D end;local lV=-lr*(brakeSpeedFactor*bB+brakeFlatFactor*ls)Nav:setEngineForceCommand('brake',lV)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,C)end;local kA=unit.getAxisCommandValue(0)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-kA/3.6)local lL=r(brakePID:get(),0,1)lr=r(lr+lL,0,1)end;local lV=-lr*(brakeSpeedFactor*bB+brakeFlatFactor*ls)Nav:setEngineForceCommand('brake',lV)local lM=''local lN=vec3()local lW=false;local lP='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lP=lP..ExtraLongitudeTags end;local lQ=s:getAxisCommandType(axisCommandId.longitudinal)if lQ==axisCommandType.byThrottle then local lR=s:composeAxisAccelerationFromThrottle(lP,axisCommandId.longitudinal)Nav:setEngineForceCommand(lP,lR,lH)elseif lQ==axisCommandType.byTargetSpeed then local lR=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lM=lM..' , '..lP;lN=lN+lR;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lW=true end end;local lU='thrust analog lateral 'if ExtraLateralTags~="none"then lU=lU..ExtraLateralTags end;local lX=s:getAxisCommandType(axisCommandId.lateral)if lX==axisCommandType.byThrottle then local lY=s:composeAxisAccelerationFromThrottle(lU,axisCommandId.lateral)Nav:setEngineForceCommand(lU,lY,lH)elseif lX==axisCommandType.byTargetSpeed then local lS=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lM=lM..' , '..lU;lN=lN+lS end;local lT='thrust analog vertical 'if ExtraVerticalTags~="none"then lT=lT..ExtraVerticalTags end;local lZ=s:getAxisCommandType(axisCommandId.vertical)if lZ==axisCommandType.byThrottle then local lO=s:composeAxisAccelerationFromThrottle(lT,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lT,lO,lH,'airfoil','ground','',lJ)else Nav:setEngineForceCommand(lT,vec3(),lH)Nav:setEngineForceCommand('airfoil vertical',lO,lH,'airfoil','','',lJ)Nav:setEngineForceCommand('ground vertical',lO,lH,'ground','','',lJ)end elseif lZ==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),lH)end;local l_=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lM=lM..' , '..lT;lN=lN+l_ end;if lN:len()>constants.epsilon then if S~=0 or lW or c(ls:dot(bz))<0.8 then lM=lM..', brake'end;Nav:setEngineForceCommand(lM,lN,lI,'','','',lJ)end end;local m0=torqueFactor*(lx-lw)local m1=vec3(core.getWorldAirFrictionAngularAcceleration())m0=m0-m1;Nav:setEngineTorqueCommand('torque',m0,lH,'airfoil','','',lJ)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bT=vec3(core.getVelocity()):len()local m2=0.15;if s:getAxisCommandType(0)==1 then local m3=s:getTargetSpeed(axisCommandId.longitudinal)if bT*3.6>m3*(1-m2)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT*3.6<m3*(1-m2)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jd=unit.getThrottle()if AtmoSpeedAssist then jd=C*100 end;local kA=jd/100;if j==0 then kA=kA*MaxGameVelocity;if bT>=kA*(1-m2)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT<kA*(1-m2)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kG=d(bh)kA=kA*kG/3.6;if bT>=kA*(1-m2)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bT<kA*(1-m2)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,ce=coroutine.resume(beginSetup)if ce then SetupComplete=true end else Nav:update()if not b6 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(m4)local function m5()az=not az;if not az then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function m6()if LockPitch==nil and am then LockPitch=cD(bD,bz,bA)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function m7()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;J=false;ag=false;ah=false;L=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;ar=false;LockPitch=nil;IntoOrbit=false else ak=true end end;if m4=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,0)C=0;if(vBooster or hover)and aj==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b8=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif m4=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif m4=="forward"then N=N-1 elseif m4=="backward"then N=N+1 elseif m4=="left"then Q=Q-1 elseif m4=="right"then Q=Q+1 elseif m4=="yawright"then R=R-1 elseif m4=="yawleft"then R=R+1 elseif m4=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif m4=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif m4=="up"then a8=a8+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif m4=="down"then a8=a8-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif m4=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+X else s:updateTargetGroundAltitudeFromActionStart(1.0)end elseif m4=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-X else s:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif m4=="option1"then cs()toggleView=false elseif m4=="option2"then cs(1)toggleView=false elseif m4=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;m5()toggleView=false elseif m4=="option4"then cu()toggleView=false elseif m4=="option5"then m6()toggleView=false elseif m4=="option6"then cn()toggleView=false elseif m4=="option7"then toggleView=false elseif m4=="option8"then co()toggleView=false elseif m4=="option9"then if gyro~=nil then gyro.toggle()ar=gyro.getState()==1 end;toggleView=false elseif m4=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif m()==1 and ShiftShowsRemoteButtons then V=true;b7=false;b6=false end elseif m4=="brake"then if BrakeToggleStatus then cM()elseif not BrakeIsOn then cM()else BrakeIsOn=true end elseif m4=="lalt"then AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif m4=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif m4=="stopengines"then s:resetCommand(axisCommandId.longitudinal)m7()C=0 elseif m4=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then C=r(C+speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cs()end elseif m4=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then C=r(C-speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cs(1)end elseif m4=="antigravity"and not ExternalAGG then if antigrav~=nil then d3()end end end;function script.onActionStop(m4)if m4=="forward"then N=0 elseif m4=="backward"then N=0 elseif m4=="left"then Q=0 elseif m4=="right"then Q=0 elseif m4=="yawright"then R=0 elseif m4=="yawleft"then R=0 elseif m4=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif m4=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif m4=="up"then a8=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif m4=="down"then a8=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif m4=="groundaltitudeup"then if not ExternalAGG and bG then Y=OldAntiMod end;if AltitudeHold or VertTakeOff then X=OldButtonMod end elseif m4=="groundaltitudedown"then if not ExternalAGG and bG then Y=OldAntiMod end;if AltitudeHold or VertTakeOff then X=OldButtonMod end elseif m4=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then V=false;b7=false;b6=false end elseif m4=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cM()else BrakeIsOn=false end end elseif m4=="lalt"then if m()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(m4)if m4=="groundaltitudeup"then if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+X;X=X*1.05 else s:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif m4=="groundaltitudedown"then if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-X;X=X*1.05 else s:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif m4=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then C=r(C+speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif m4=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then C=r(C-speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(c_)local function m8()for bW,bN in pairs(a)do dbHud_1.setStringValue(bN,g(nil))end;for bW,bN in pairs(b)do if bN~="SavedLocations"then dbHud_1.setStringValue(bN,g(nil))end end;W="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ab=5;aD=false;a7=true end;local function m9(ma,planet,fO)local function mb(fO)local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gc='::pos{'..u..','..u..','..u..','..u..','..u..'}'local gp,gq,c8,c9,c7=o(fO,gc)if gp=="0"and gq=="0"then return vec3(tonumber(c8),tonumber(c9),tonumber(c7))end;c9=math.rad(c9)c8=math.rad(c8)local planet=aW[tonumber(gp)][tonumber(gq)]local hb=math.cos(c8)local mc=vec3(hb*math.cos(c9),hb*math.sin(c9),math.sin(c8))return planet.center+(planet.radius+c7)*mc end;if dbHud_1 then local cB={}local position=mb(fO)if planet.name=="Space"then cB={position=position,name=ma,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hF=false;if planet.hasAtmosphere then hF=true else hF=false end;cB={position=position,name=ma,atmosphere=hF,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cB;table.insert(aW[0],cB)bV()else W="Databank must be installed to save locations"end end;local i;local md="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local me,mf=nil,nil;local mg="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(c_," ")me=c_;if i~=nil then me=string.sub(c_,0,i-1)mf=string.sub(c_,i+1)elseif not string.find(md,me)then for fY in string.gmatch(mg,"([^\n]+)")do system.print(fY)end;return end;if me=="ah-setname"then if mf==nil or mf==""then W="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cy(mf)else W="Select a saved target to rename first"end elseif me=="ah-addlocation"then if mf==nil or mf==""or string.find(mf,"::")==nil then W="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mf,"::")local ma=string.sub(mf,1,i-2)local fO=string.sub(mf,i)local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gc='::pos{'..u..','..u..','..u..','..u..','..u..'}'local gp,gq,c8,c9,c7=o(fO,gc)local planet=aW[tonumber(gp)][tonumber(gq)]m9(ma,planet,fO)W="Added "..ma.." to saved locations,\nplanet "..planet.name.." at "..fO;ab=5 elseif me=="ah-agg"then if mf==nil or mf==""then W="Usage: ah-agg targetheight"return end;mf=tonumber(mf)if mf<1000 then mf=1000 end;AntigravTargetAltitude=mf;W="AGG Target Height set to "..mf elseif me=="ah-G"then if mf==nil or mf==""then W="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mf=="dump"then for bW,bN in pairs(a)do if type(_G[bN])=="boolean"then if _G[bN]==true then system.print(bN.." true")else system.print(bN.." false")end elseif _G[bN]==nil then system.print(bN.." nil")else system.print(bN.." ".._G[bN])end end;return end;i=string.find(mf," ")local mh=string.sub(mf,0,i-1)local mi=string.sub(mf,i+1)for bW,bN in pairs(a)do if bN==mh then W="Variable "..mh.." changed to "..mi;local mj=type(_G[bN])if mj=="number"then mi=tonumber(mi)elseif mj=="boolean"then if string.lower(mi)=="true"then mi=true else mi=false end end;_G[bN]=mi;return end end;W="No such global variable: "..mh elseif me=="ah-copydatabank"then if dbHud_2 then dc(true)else W="Spare Databank required to copy databank"end elseif me=="ah-wipedatabank"then if dbHud_1 then m8()else W="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
