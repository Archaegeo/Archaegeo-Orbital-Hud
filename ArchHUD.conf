name: ArchHud - Archaegeo v1.358 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        turnAssist = true --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        IntruderAlertSystem = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        showHelp = true --export:
        Cockpit = false --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        LockPitchTarget = 0 --export:
        TargetOrbitRadius = 1.4 --export:
        LowOrbitHeight = 1000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 5000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        turnAssistFactor = 2 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.358;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;safeMass=0;iphCondition="All"stablized=true;local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass","iphCondition","stablized"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=utils.round;local p=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local z=math.sqrt;local A=tonumber;local core=core;local function B(num,C)local mult=10^(C or 0)return d(num*mult+0.5)/mult end;local D=p()local E=p()local F=16;local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8,a9=0;local aa,ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=0;local am=false;local an=false;local ao=false;local ap=-1;local aq=""local ar=j()>0;local as=j()local at=core.getAltitude()local au=core.getElementIdList()local av=p()local aw=core.getConstructMass()local ax=false;local ay=nil;local az=false;local aA=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]local aB=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]local aC={}local aD=0;local aE=0;local aF=""local aG=true;local aH={}local aI=ResolutionX;local aJ=ResolutionY;local aK={}local aL={}local aM={}local aN=0;local aO=false;local aP={}local aQ={}local aR=d(1/apTickRate)*2;local aS={}local aT={}local aU={}local aV={}local aW=false;local aX=0;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=false;local ba=false;local bb=autoRollPreference;local bc=LandingGearGroundHeight;local bd=false;local be=p()local bf=0;local bg=0;local bh=0;local bi=AtmoSpeedLimit;local bj=0;local bk=nil;local bl=0;local bm=0;local bn=false;local bo=false;local bp={VectorToTarget=false}local bq=false;local br=0;local bs=nil;local bt=false;local bu=false;local bv=false;local bw=false;local bx=0;local by=vec3(core.getConstructWorldOrientationUp())local bz=vec3(core.getConstructWorldOrientationForward())local bA=vec3(core.getConstructWorldOrientationRight())local bB=vec3(core.getWorldVelocity())local bC=vec3(bB):len()local bD=vec3(core.getWorldVertical())local bE=-bD:dot(bB)local bF=vec3(core.getConstructWorldPos())local bG=0;local bH=false;local bI=false;local bJ=nil;local bK=true;local bL=0;local bM=0;local bN=false;local bO={}local bP=showHud;local bQ={}local bR=false;local bS=""local bT=""local bU=nil;local bV={}local bW=unit.getClosestPlanetInfluence()>0;local bX=false;local bY=nil;timeCount=0;totalTime=0;local function bZ(b_,c0,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..b_.."|"..c0 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..b_.."|"..c0 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..b_.."|"..c0 .."|"..soundVolume)end end;local function c1(c2,c3)for i=1,#c3 do c2[#c2+1]=c3[i]end;return c2 end;local function c4(c5)local c6={}local c7={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd","BarFuelDisplay","showHelp","Cockpit","voices","alerts","CollisionSystem"}local c8={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","LockPitchTarget","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c9={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local ca={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c5 then c1(c6,c7)c1(c6,c8)c1(c6,c9)c1(c6,ca)return c6 elseif c5=="boolean"then return c7 elseif c5=="handling"then return c8 elseif c5=="hud"then return c9 elseif c5=="physics"then return ca end end;local function cb(x,y,cc,cd,ce)if cd==nil then cd=""end;if ce==nil then ce=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cd,x,y,ce,cc)end;local function cf(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not ch then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cg)K=q(B(cg*100,0)/100,-1,1)end;local function ci(cg,ch)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not ch then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cg)bJ=cg end;local function cj(ck,cl)if ck==0 then return c(cl)<1e-09 end;if cl==0 then return c(ck)<1e-09 end;return c(ck-cl)<math.max(c(ck),c(cl))*epsilon end;local function cm(aj,cn)local co=aj>100000;if cn==nil then cn=1 end;if co then return B(aj/1000/200,cn).."SU"elseif aj<1000 then return B(aj,cn).."M"else return B(aj/1000,cn).."KM"end end;local function cp()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;bb=true;af=0;if ar and ap==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ci(d(bi))end else bt=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cq()bt=false;bl=nil;bm=nil;bx=0;if as==0 then if IntoOrbit then bZ("orOff","AP")IntoOrbit=false;bn=false;bs=nil;bb=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bp.VectorToTarget=false;bp.AutopilotAlign=false;bq=false elseif bW then bZ("orOn","AP")IntoOrbit=true;bb=true;if bs==nil then bs=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bn=false;bs=nil;bb=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bp.VectorToTarget=false;bp.AutopilotAlign=false;bq=false end end;local function cr()if D-bg<1.5 then if planet.hasAtmosphere then if as>0 then HoldAltitude=planet.spaceEngineMinAltitude-50;bZ("11","EP")else if bW then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;br=HoldAltitude;bq=true;if not IntoOrbit then cq()end;bn=true end end;bg=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bg=D end;if bW and as==0 then br=at;bq=true;bn=true;cq()if IntoOrbit then bg=D else bg=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;bb=true;LockPitch=nil;bt=false;if ap==-1 then bZ("altOn","AH")AutoTakeoff=false;if bg>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=at end end;if VertTakeOff then cp()end else bZ("lfs","LS")AutoTakeoff=true;if bg>-1 then HoldAltitude=at+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bH then cp()end end;if an then HoldAltitude=100000 end else bZ("altOff","AH")if IntoOrbit then cq()end;if VertTakeOff then cp()end;bb=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bg=0 end end;local function cs()local function ct(SpaceTarget)bX=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cr()end end;VectorStatus="Proceeding to Waypoint"end;if D-bh<1.5 and as>0 then if not bw then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if as>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bZ("orH","OH")end;bh=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else bh=D end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not an and not IntoOrbit then b7.UpdateAutopilotTarget()b8.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then bZ("apSpc","AP")if as~=0 then an=true;cr()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if as>0 then if not VectorToTarget then bZ("vtt","AP")ct(SpaceTarget)end else bZ("apOn","AP")if not(ac.name==planet.name and bW)then bt=false;Autopilot=true elseif not ar then if IntoOrbit then cq()end;br=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bq=true;bp.AutopilotAlign=true;bp.VectorToTarget=true;bn=false;if not IntoOrbit then cq()end end end else bZ("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if as~=0 then an=true;cr()else Autopilot=true end end elseif as==0 then if CustomTarget==nil and(ac.name==planet.name and bW)and not IntoOrbit then WaypointSet=false;bt=false;bn=false;cq()else bZ("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else bZ("apP","AP")an=true;cr()end else bZ("apOff","AP")an=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=at;TargetSet=false;Reentry=false;if IntoOrbit then cq()end end end;local function cu(cv)local cw=-1;local cx;cw=b7.findAtlasIndex(SavedLocations)if cw~=-1 then local cy;if cv~=nil then cx={position=SavedLocations[cw].position,name=cv,atmosphere=SavedLocations[cw].atmosphere,planetname=SavedLocations[cw].planetname,gravity=SavedLocations[cw].gravity}else cx={position=bF,name=SavedLocations[cw].name,atmosphere=as,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cw]=cx;cw=-1;cw=b7.findAtlasIndex(aY[0])if cw>-1 then aY[0][cw]=cx end;b7.UpdateAtlasLocationsList()a2=CustomTarget.name.." position updated"b7.UpdateAutopilotTarget()else a2="Name Not Found"end end;local function cz()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bb=autoRollPreference end;if BrakeIsOn then bZ("bkOn","B",1)VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bU=nil;if not bI then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cp()end;if IntoOrbit then cq()end;bb=autoRollPreference;am=false;ao=false;af=0 else bZ("bkOff","B",1)end end;local function cA(cB,cC,cD)local function cE(cB,cF)cB=vec3(cB)cF=vec3(cF):normalize()local cG=cB*cF;return cG.x+cG.y+cG.z end;local cH=0.001;local cI=1;if not ar or not bd or ap~=-1 or bC<Q then if cD==nil then cD=DampingMultiplier end;if cC==nil then cC=cH end;cB=vec3(cB):normalize()local cJ=vec3()-cB;local cK=-cE(cJ,core.getConstructWorldOrientationRight())*cI;local cL=-cE(cJ,core.getConstructWorldOrientationUp())*cI;if aD==0 then aD=cK/2 end;if aE==0 then aE=cL/2 end;if c(cK)<0.1 then V=V-cK*2 else V=V-(cK+(cK-aD)*cD)end;if c(cL)<0.1 then U=U+cL*2 else U=U+cL+(cL-aE)*cD end;aD=cK;aE=cL;if c(cK)<cC and c(cL)<cC then return true end;return false elseif bd and ap==-1 then cB=bB;if cD==nil then cD=DampingMultiplier end;if cC==nil then cC=cH end;cB=vec3(cB):normalize()local cJ=bz-cB;local cK=-cE(cJ,core.getConstructWorldOrientationRight())*cI;local cL=-cE(cJ,core.getConstructWorldOrientationUp())*cI;if aD==0 then aD=cK/2 end;if aE==0 then aE=cL/2 end;if c(cK)<0.1 then V=V-cK*5 else V=V-(cK+(cK-aD)*cD)end;if c(cL)<0.1 then U=U+cL*5 else U=U+cL+(cL-aE)*cD end;aD=cK;aE=cL;if c(cK)<cC and c(cL)<cC then return true end;return false end end;local function cM()if Reentry then a2="Re-Entry cancelled"bZ("reOff","RE")Reentry=false;bb=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bb=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bi;bZ("par","RE")else Reentry=true;AltitudeHold=true;bb=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-planet.spaceEngineMinAltitude/10 end;local cc=cm(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bi.." Target Altitude: "..cc;bZ("glide","RE")ci(d(bi))end;AutoTakeoff=false end;local function cN()if antigrav and not ExternalAGG then if bI then bZ("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=at end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;bZ("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cO(cP)local cQ=0;local cR=0;local cS=0;if cP<60 then cP=d(cP)elseif cP<3600 then cQ=d(cP/60)cP=d(cP%60)elseif cP<86400 then cR=d(cP/3600)cQ=d(cP%3600/60)else cS=d(cP/86400)cR=d(cP%86400/3600)end;if cS>0 then return cS.."d "..cR.."h "elseif cR>0 then return cR.."h "..cQ.."m "elseif cQ>0 then return cQ.."m "..cP.."s"elseif cP>0 then return cP.."s"else return"0s"end end;local function cT(cU)local function cV(cW)for cX,cY in pairs(cW)do dbHud_1.setStringValue(cY,g(_G[cY]))if cU and dbHud_2 then dbHud_2.setStringValue(cY,g(_G[cY]))end end end;if dbHud_1 then cV(b)cV(c4())system.print("Saved Variables to Datacore")if cU and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cZ()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function c_()local function d0(d1)return type(d1)=='number'end;local function d2(d1)return type(A(d1))=='number'end;local function d3(d4)return type(d4)=='table'end;local function d5(d6)return type(d6)=='string'end;local function d7(cY)return d3(cY)and d0(cY.x and cY.y and cY.z)end;local function d8(d9)return d3(d9)and d0(d9.latitude and d9.longitude and d9.altitude and d9.bodyId and d9.systemId)end;local da=math.pi/180;local db=180/math.pi;local epsilon=1e-10;local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dc='::pos{'..num..','..num..','..num..','..num..','..num..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function dd(d1)local cG=string.gsub(string.reverse(e('%.4f',d1)),'^0*%.?','')return cG==''and'0'or string.reverse(cG)end;local function de(df)if d7(df)then return e('{x=%.3f,y=%.3f,z=%.3f}',df.x,df.y,df.z)end;if d3(df)and not getmetatable(df)then local dg={}local dh=next(df)if type(dh)=='nil'or dh==1 then dg=df else for cX,cY in pairs(df)do local cg=de(cY)if type(cX)=='number'then table.insert(dg,e('[%s]=%s',cX,cg))else table.insert(dg,e('%s=%s',cX,cg))end end end;return e('{%s}',table.concat(dg,','))end;if d5(df)then return e("'%s'",df:gsub("'",[[\']]))end;return tostring(df)end;local di={}di.__index=di;di.__tostring=function(df,dj)local dk={}for cX in pairs(df)do table.insert(dk,cX)end;table.sort(dk)local dg={}for _,cX in ipairs(dk)do local cg=de(df[cX])if type(cX)=='number'then table.insert(dg,e('[%s]=%s',cX,cg))else table.insert(dg,e('%s=%s',cX,cg))end end;if dj then return e('%s%s',dj,table.concat(dg,',\n'..dj))end;return e('{%s}',table.concat(dg,','))end;di.__eq=function(dl,dm)return dl.planetarySystemId==dm.planetarySystemId and dl.bodyId==dm.bodyId and cj(dl.radius,dm.radius)and cj(dl.center.x,dm.center.x)and cj(dl.center.y,dm.center.y)and cj(dl.center.z,dm.center.z)and cj(dl.GM,dm.GM)end;local function dn(dp,dq,dr,ds,dt)assert(d2(dp),'Argument 1 (planetarySystemId) must be a number:'..type(dp))assert(d2(dq),'Argument 2 (bodyId) must be a number:'..type(dq))assert(d2(dr),'Argument 3 (radius) must be a number:'..type(dr))assert(d3(ds),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ds))assert(d2(dt),'Argument 5 (GM) must be a number:'..type(dt))return setmetatable({planetarySystemId=A(dp),bodyId=A(dq),radius=A(dr),center=vec3(ds),GM=A(dt)},di)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(du)return e('::pos{%d,%d,%s,%s,%s}',du.systemId,du.bodyId,dd(du.latitude*db),dd(du.longitude*db),dd(du.altitude))end;MapPosition.__eq=function(dl,dm)return dl.bodyId==dm.bodyId and dl.systemId==dm.systemId and cj(dl.latitude,dm.latitude)and cj(dl.altitude,dm.altitude)and(cj(dl.longitude,dm.longitude)or cj(dl.latitude,math.pi/2)or cj(dl.latitude,-math.pi/2))end;local function dv(dw,dq,dx,dy,dz)local dp=dw;if d5(dw)and not dy and not dz and not dq and not dx then dp,dq,dx,dy,dz=n(dw,dc)assert(dp,'Argument 1 (position string) is malformed.')else assert(d2(dp),'Argument 1 (systemId) must be a number:'..type(dp))assert(d2(dq),'Argument 2 (bodyId) must be a number:'..type(dq))assert(d2(dx),'Argument 3 (latitude) must be in degrees:'..type(dx))assert(d2(dy),'Argument 4 (longitude) must be in degrees:'..type(dy))assert(d2(dz),'Argument 5 (altitude) must be in meters:'..type(dz))end;dp=A(dp)dq=A(dq)dx=A(dx)dy=A(dy)dz=A(dz)if dq==0 then return setmetatable({latitude=dx,longitude=dy,altitude=dz,bodyId=dq,systemId=dp},MapPosition)end;return setmetatable({latitude=da*q(dx,-90,90),longitude=da*(dy%360),altitude=dz,bodyId=dq,systemId=dp},MapPosition)end;local dA={}dA.__index=dA;dA.__tostring=function(df,dj)local dB=dj and dj..'  'local dC={}local dk={}for cX in pairs(df)do table.insert(dk,cX)end;table.sort(dk)for _,dD in ipairs(dk)do bdy=df[dD]local dE=di.__tostring(bdy,dB)if dj then table.insert(dC,e('[%s]={\n%s\n%s}',dD,dE,dj))else table.insert(dC,e('  [%s]=%s',dD,dE))end end;if dj then return e('\n%s%s%s',dj,table.concat(dC,',\n'..dj),dj)end;return e('{\n%s\n}',table.concat(dC,',\n'))end;local function dF(dG)local aY={}local pid;for _,cY in pairs(dG)do local dH=cY.planetarySystemId;if type(dH)~='number'then error('Invalid planetary system ID: '..tostring(dH))elseif pid and dH~=pid then error('Mistringmatch planetary system IDs: '..dH..' and '..pid)end;local dI=cY.bodyId;if type(dI)~='number'then error('Invalid body ID: '..tostring(dI))elseif aY[dI]then error('Duplicate body ID: '..tostring(dI))end;setmetatable(cY.center,getmetatable(vec3.unit_x))aY[dI]=setmetatable(cY,di)pid=dH end;return setmetatable(aY,dA)end;b1={}local function dJ(dG)return setmetatable({galaxyAtlas=dG or{}},b1)end;b1.__index=function(d4,i)if type(i)=='number'then local system=d4.galaxyAtlas[i]return dF(system)end;return rawget(b1,i)end;b1.__pairs=function(df)return function(d4,cX)local dK,nv=next(d4,cX)return dK,nv and dF(nv)end,df.galaxyAtlas,nil end;b1.__tostring=function(df)local dL={}for _,dM in pairs(df or{})do local dN=dM:getPlanetarySystemId()local dO=dA.__tostring(dM,'    ')table.insert(dL,e('  [%s]={%s\n  }',dN,dO))end;return e('{\n%s\n}\n',table.concat(dL,',\n'))end;b1.BodyParameters=dn;b1.MapPosition=dv;b1.PlanetarySystem=dF;function b1.createBodyParameters(dP,dq,dQ,dR,dS,dT,dU)assert(d2(dP),'Argument 1 (planetarySystemId) must be a number:'..type(dP))assert(d2(dq),'Argument 2 (bodyId) must be a number:'..type(dq))assert(d2(dQ),'Argument 3 (surfaceArea) must be a number:'..type(dQ))assert(d3(dR),'Argument 4 (aPosition) must be an array or vec3:'..type(dR))assert(d3(dS),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dS))assert(d2(dT),'Argument 6 (altitude) must be in meters:'..type(dT))assert(d2(dU),'Argument 7 (gravityAtPosition) must be number:'..type(dU))local dr=z(dQ/4/math.pi)local aj=dr+dT;local dV=vec3(dR)+aj*vec3(dS)local dt=dU*aj*aj;return dn(dP,dq,dr,dV,dt)end;b1.isMapPosition=d8;function b1:getPlanetarySystem(dw)if i==nil then i=0 end;if nv==nil then nv=0 end;local dP=dw;if d8(dw)then dP=dw.systemId end;if type(dP)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dA then system=dF(system)end;return system end end end;function dA:sizeCalculator(dW)return 1.05*dW.radius end;function dA:castIntersections(dX,cF,dY,dZ,d_,e0)local e1={}local e2=d_ or self;for _,dW in pairs(e2)do table.insert(e1,dW)end;if not e0 then table.sort(e1,function(e3,e4)return(e3.center-dX):len()<(e4.center-dX):len()end)end;local e5=cF:normalize()for _,dW in ipairs(e1)do local e6=dW.center-dX;local dr=self:sizeCalculator(dW)local e7=e6:dot(e5)local e8=e7^2-(e6:len2()-dr^2)if e8>=0 then local e9=z(e8)local ea=e7+e9;local eb=e7-e9;if eb>0 then return dW,ea,eb elseif ea>0 then return dW,ea,nil end end end;return nil,nil,nil end;function dA:closestBody(ec)assert(type(ec)=='table','Invalid coordinates.')local ed,dW;local ee=vec3(ec)for _,ef in pairs(self)do local eg=(ef.center-ee):len2()if(not dW or eg<ed)and ef.name~="Space"then dW=ef;ed=eg end end;return dW end;function dA:convertToBodyIdAndWorldCoordinates(dw)local eh=dw;if d5(dw)then eh=dv(dw)end;if eh.bodyId==0 then return 0,vec3(eh.latitude,eh.longitude,eh.altitude)end;local ef=self:getBodyParameters(eh)if ef then return eh.bodyId,ef:convertToWorldCoordinates(eh)end end;function dA:getBodyParameters(dw)local dq=dw;if d8(dw)then dq=dw.bodyId end;assert(d2(dq),'Argument 1 (bodyId) must be a number:'..type(dq))return self[dq]end;function dA:getPlanetarySystemId()local _,cY=next(self)return cY and cY.planetarySystemId end;function di:convertToMapPosition(ds)assert(d3(ds),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ds))local ei=vec3(ds)if self.bodyId==0 then return setmetatable({latitude=ei.x,longitude=ei.y,altitude=ei.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ej=ei-self.center;local aj=ej:len()local dz=aj-self.radius;local dx=0;local dy=0;if not cj(aj,0)then local ek=m(ej.y,ej.x)dy=ek>=0 and ek or 2*math.pi+ek;dx=math.pi/2-math.acos(ej.z/aj)end;return setmetatable({latitude=dx,longitude=dy,altitude=dz,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function di:convertToWorldCoordinates(dw)local eh=d5(dw)and dv(dw)or dw;if eh.bodyId==0 then return vec3(eh.latitude,eh.longitude,eh.altitude)end;assert(d8(eh),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(eh.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(eh.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local el=math.cos(eh.latitude)return self.center+(self.radius+eh.altitude)*vec3(el*math.cos(eh.longitude),el*math.sin(eh.longitude),math.sin(eh.latitude))end;function di:getAltitude(ds)return(vec3(ds)-self.center):len()-self.radius end;function di:getDistance(ds)return(vec3(ds)-self.center):len()end;function di:getGravity(ds)local em=self.center-vec3(ds)local en=em:len2()return self.GM/en*em/z(en)end;return setmetatable(b1,{__call=function(_,...)return dJ(...)end})end;local function eo()local b3={}local ep=30000000/3600;local eq=ep*ep;local er=100;local function es(cY)return 1/z(1-cY*cY/eq)end;function b3.computeAccelerationTime(et,eu,ev)local ew=ep*math.asin(et/ep)return(ep*math.asin(ev/ep)-ew)/eu end;function b3.computeDistanceAndTime(et,ev,ex,ey,ez,eA)ez=ez or 0;eA=eA or 0;local eB=et<=ev;local eC=ey*(eB and 1 or-1)/ex;local eD=-eA/ex;local eE=eC+eD;if eB and eE<=0 or not eB and eE>=0 then return-1,-1 end;local eF,eG=0,0;if eC~=0 and ez>0 then local ew=math.asin(et/ep)local eH=math.pi*(eC/2+eD)local eI=eC*ez;local eJ=ep*math.pi;local cY=function(d4)local eK=(eH*d4-eI*math.sin(math.pi*d4/2/ez)+eJ*ew)/eJ;local eL=math.tan(eK)return ep*eL/z(eL*eL+1)end;local eM=eB and function(d6)return d6>=ev end or function(d6)return d6<=ev end;eG=2*ez;if eM(cY(eG))then local eN=0;while c(eG-eN)>0.5 do local d4=(eG+eN)/2;if eM(cY(d4))then eG=d4 else eN=d4 end end end;local eO=et;local eP=eG/er;for eQ=1,er do local eR=cY(eQ*eP)eF=eF+(eR+eO)*eP/2;eO=eR end;if eG<2*ez then return eF,eG end;et=eO end;local ew=ep*math.asin(et/ep)local D=(ep*math.asin(ev/ep)-ew)/eE;local eS=eq*math.cos(ew/ep)/eE;local aj=eS-eq*math.cos((eE*D+ew)/ep)/eE;return aj+eF,D+eG end;function b3.computeTravelTime(et,eu,aj)if aj==0 then return 0 end;if eu>0 then local ew=ep*math.asin(et/ep)local eS=eq*math.cos(ew/ep)/eu;return(ep*math.acos(eu*(eS-aj)/eq)-ew)/eu end;if et==0 then return-1 end;assert(et>0,'Acceleration and initial speed are both zero.')return aj/et end;function b3.lorentz(cY)return es(cY)end;return b3 end;local function eT()local vec3=require('cpml.vec3')local c_=c_()local function d5(d6)return type(d6)=='string'end;local function d3(d4)return type(d4)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dz)assert(self.body)local aj=dz+self.body.radius;if not cj(aj,0)then local orbit=z(self.body.GM/aj)return z(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dw,eU)assert(self.body)assert(d3(dw)or d5(dw))assert(d3(eU))local eV=(d5(dw)or c_.isMapPosition(dw))and self.body:convertToWorldCoordinates(dw)or vec3(dw)local cY=vec3(eU)local eW=eV-self.body.center;local eX=cY:len2()local eY=eW:len()local eZ=self.body.GM;local e_=((eX-eZ/eY)*eW-eW:dot(cY)*cY)/eZ;local ck=eZ/(2*eZ/eY-eX)local f0=e_:len()local e5=e_:normalize()local f1=ck*(1-f0)local f2=ck*(1+f0)local f3=f1*e5+self.body.center;local f4=f0<=1 and-f2*e5+self.body.center or nil;local f5=z(ck*eZ*(1-f0*f0))local f6=f4 and 2*math.pi*z(ck^3/eZ)local f7=math.acos(e_:dot(eW)/(f0*eY))if eW:dot(cY)<0 then f7=-(f7-2*math.pi)end;local f8=math.acos((math.cos(f7)+f0)/(1+f0*math.cos(f7)))local f9=f8;if f9<0 then f9=f9+2*math.pi end;local fa=f9-f0*math.sin(f9)local fb=0;local fc=0;local fd=0;if f6~=nil then fb=fa/(2*math.pi/f6)fc=f6-fb;fd=fc+f6/2;if f7-math.pi>0 then fc=fb;fd=fc+f6/2 end;if fd>f6 then fd=fd-f6 end end;return{periapsis={position=f3,speed=f5/f1,circularOrbitSpeed=z(eZ/f1),altitude=f1-self.body.radius},apoapsis=f4 and{position=f4,speed=f5/f2,circularOrbitSpeed=z(eZ/f2),altitude=f2-self.body.radius},currentVelocity=cY,currentPosition=eV,eccentricity=f0,period=f6,eccentricAnomaly=f8,meanAnomaly=fa,timeToPeriapsis=fc,timeToApoapsis=fd}end;local function fe(ff)local ef=c_.BodyParameters(ff.planetarySystemId,ff.bodyId,ff.radius,ff.center,ff.GM)return setmetatable({body=ef},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fe(...)end})end;local function fg()local fh=0;local function fi(fj)local dr=500000;local fk,fl,fm=math.huge;local fn=false;local fo=vec3({13771471,7435803,-128971})local fp=18000000;fk=vec3(fj):dist(fo)if fk<fp then return true,c(fk-fp),"Safe Zone",0 end;fl=vec3(fj):dist(vec3(planet.center))if fl<dr then fn=true end;if c(fl-dr)<c(fk-fp)then return fn,c(fl-dr),planet.name,planet.bodyId else return fn,c(fk-fp),"Safe Zone",0 end end;local function fq(cY)if aI==1920 then return cY else return B(aI*cY/1920,0)end end;local function fr(cY)if aJ==1080 then return cY else return B(aJ*cY/1080,0)end end;local function fs()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function ft()local fu="TRAVEL"if not bK then fu="CRUISE"end;if Autopilot then fu="AUTOPILOT"end;return fu end;local function fv(fw,aW,x,fx,fy,fz,fA,fB)local fC=1;local fD=2;local fE=3;local fF=4;local fG=5;local fH=6;local fI=""local fJ=0;local fK=fuelY;local fL=fuelY+5;if not BarFuelDisplay then fL=fL+5 end;if l()==1 and not RemoteHud then fK=fK-50;fL=fL-50 end;if fy=="ATMO"then fI="atmofueltank"elseif fy=="SPACE"then fI="spacefueltank"else fI="rocketfueltank"end;fJ=_G[fI.."_size"]if#fz>0 then for i=1,#fz do local fM=string.sub(fz[i][fD],1,12)local fN=0;for fO=1,fJ do if fz[i][fD]==f(unit[fI.."_"..fO].getData()).name then fN=fO;break end end;if aW or fA[i]==nil or fB[i]==nil then local fP=0;local fQ=0;local fR=0;local fS=0;local fT=p()if fN~=0 then fB[i]=f(unit[fI.."_"..fN].getData()).percentage;fA[i]=f(unit[fI.."_"..fN].getData()).timeLeft;if fA[i]=="n/a"then fA[i]=0 end else fR=k(fz[i][fC])-fz[i][fF]fP=fz[i][fE]fB[i]=d(0.5+fR*100/fP)fQ=fz[i][fG]fS=fz[i][fH]if fQ<=fR then fA[i]=0 else fA[i]=d(0.5+fR/((fQ-fR)/(fT-fS)))end;fz[i][fG]=fR;fz[i][fH]=fT end end;if fM==fx then fM=e("%s %d",fy,i)end;if fN==0 then fM=fM.." *"end;local fU;if fA[i]==0 then fU=""else fU=cO(fA[i])end;if fB[i]~=nil then local fV=d(fB[i]*2.55)local fW=e("rgb(%d,%d,%d)",255-fV,fV,0)local cd=""if fU~=""and fA[i]<120 or fB[i]<5 then if aW then cd=[[class="red"]]end end;if BarFuelDisplay then table.insert(fw,e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],x,fL,fW,fB[i],x,fL,x+2,fL+10,fB[i],fU))fw[#fw+1]=cb(x,fK,fM,cd.."txtstart pdim txtfuel")fK=fK-30;fL=fL-30 else fw[#fw+1]=cb(x,fK,fM,cd.." pdim txtfuel")fw[#fw+1]=cb(x,fL,e("%d%% %s",fB[i],fU),"pdim txtfuel","fill:"..fW)fK=fK+30;fL=fL+30 end end end end end;local function fX(fw,dz)if dz<200000 and not ar or dz and ar then local fY=0;if c(bE)>1 then fY=45*math.log(c(bE),10)if bE<0 then fY=-fY end end;fw[#fw+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bE),d(fY))end;return fw end;local function fZ(f_)local g0=-bD;f_=f_-f_:project_on(g0)local g1=vec3(0,0,1)g1=g1-g1:project_on(g0)local g2=g1:cross(g0)local fY=g1:angle_between(f_)*constants.rad2deg;if f_:dot(g2)<0 then fY=360-fY end;return fY end;local function g3(fw,centerX,centerY,g4,g5,bW)local g6=circleRad;local g7=20;local g8=d(g4)if bW then for i=-45,45,5 do local g9=i;fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],g9,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fw[#fw+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+g6+g7-len,centerX,centerY+g6+g7)end;fw[#fw+1]=cb(centerX,centerY+g6+g7-35,g5,"pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY+g6+g7-25,g8 .." deg","pdim txt txtmid")fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g4,centerX,centerY)fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+g6+g7-20,centerX+5,centerY+g6+g7-20,centerX,centerY+g6+g7-15)fw[#fw+1]="</g>"end;local ga=g8;if bW then ga=fZ(bz)end;local gb=20;local gc=d(ga)local gd=0;local ge=centerY+g6+g7+20;local gf=centerX;if g5~="YAW"then ge=fr(130)gf=fq(960)end;local gg=[[<path class="txttick line" d="]]local gh=d(gc-(gb+10)-gc%5+0.5)for i=gh+60,gh,-5 do local x=gf-(-i*5+ga*5)if i%10==0 then gd=10;local num=i;if num==360 then num=0 elseif num>360 then num=num-360 elseif num<0 then num=num+360 end;fw[#fw+1]=cb(x+5,ge-12,num)elseif i%5==0 then gd=5 end;if gd==10 then gg=e([[%s M %f %f v %d]],gg,x,ge-5,gd)else gg=e([[%s M %f %f v %d]],gg,x,ge-2.5,gd)end end;fw[#fw+1]=gg..[["/>]]fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gf-5,ge+10,gf+5,ge+10,gf,ge+5)if bW then g5="HDG"end;fw[#fw+1]=cb(gf,ge+25,gc.."deg","pdim txt txtmid","")fw[#fw+1]=cb(gf,ge+35,g5,"pdim txt txtmid","")end;local function gi(fw,gj,g4,centerX,centerY,bW,gk,eR)local g6=circleRad;local gl=d(g6*3/5)if g6>0 then local gm=d(gj)local len=0;local gg=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*g4,centerX,centerY)if not ar then gg=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fw[#fw+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],g6-1,centerX,centerY)fw[#fw+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gm-30-gm%5+0.5),d(gm+30+gm%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local y=centerY+-i*5+gj*5;if len==30 then gg=e([[%s M %d %f h %d]],gg,centerX-gl-len,y,len)if ar then fw[#fw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g4,centerX,centerY,centerX-gl+10,y,i)fw[#fw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g4,centerX,centerY,centerX+gl-10,y,i)if i==0 or i==180 or i==-180 then fw[#fw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g4,centerX,centerY,centerX-gl+20,y,gl*2-40)end else fw[#fw+1]=cb(centerX-gl+10,y,i,"pdim txt txtmid")fw[#fw+1]=cb(centerX+gl-10,y,i,"pdim txt txtmid")end;gg=e([[%s M %d %f h %d]],gg,centerX+gl,y,len)else gg=e([[%s M %d %f h %d]],gg,centerX-gl-len,y,len)gg=e([[%s M %d %f h %d]],gg,centerX+gl,y,len)end end;fw[#fw+1]=gg..[["/>]]local gn="PITCH"if not bW then gn="REL PITCH"end;if gj>90 and not ar then gj=90-(gj-90)elseif gj<-90 and not ar then gj=-90-(gj+90)end;if g6>200 then if ar then if eR>Q then fw[#fw+1]=cb(centerX,centerY-15,"Yaw","pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY+20,gk,"pdim txt txtmid")end;fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g4,centerX,centerY)else fw[#fw+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-gl+25,centerY-5,centerX-gl+20,centerY,centerX-gl+25,centerY+5,centerX-gl+50,centerY+4,gm)fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+gl-25,centerY-5,centerX+gl-20,centerY,centerX+gl-25,centerY+5,centerX+gl-30,centerY+4,gm)fw[#fw+1]="</g>"end;local go=d(g6/3)fw[#fw+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-go,centerY,g6-go)if not ar and bW then fw[#fw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g4,centerX,centerY,centerX-gl+10,centerY,gl*2-20)end;fw[#fw+1]="</g>"if g6<200 then if ar and eR>Q then fw[#fw+1]=cb(centerX,centerY-g6,gn,"pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY-g6+10,gm,"pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY-15,"Yaw","pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY+20,gk,"pdim txt txtmid")else fw[#fw+1]=cb(centerX,centerY-g6,gn,"pdim txt txtmid")fw[#fw+1]=cb(centerX,centerY-g6+15,gm,"pdim txt txtmid")end end end end;local function gp(fw,dz,bW)local gq=altMeterX;local gr=altMeterY;local gs=78;local gt=19;local gu=ap;if ap~=-1 then fw[#fw+1]=cb(gq+gs,gr+gt+20,e("AGL: %.1fm",ap),"pdim altsm txtend")end;if bW and(dz<200000 and not ar or dz and ar)then table.insert(fw,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gq-1,gr-4,gs+2,gt+6,gq+1,gr-1,gs-4,gt))local cw=0;local gv=1;local gw=0;local gx=dz<0;local gy=dz<planet.surfaceMaxAltitude;local gz=9;if gx then gz=0 end;local dz=c(dz)while cw<6 do local gA=11;local gB=16;local gC=9;local gD=14;local cd="altsm"if cw>2 then gB=gB+3;gA=gA+2;gD=gD+2;gC=gC-6;cd="altbig"end;if gx then cd=cd.." red"elseif gy then cd=cd.." orange"end;local gE=dz/gv%10;local gF=d(gE)local gG=d((gF+1)%10)local gH=gw;if cw==0 then gH=gE-gF;if gx then gH=1-gH end end;if gx and(cw==0 or gw~=0)then local gI=gG;gG=gF;gF=gI end;local gJ=gB*(gH-1)local gK=gJ+gB;local x=gq+gC+(6-cw)*gA;local y=gr+gD;fw[#fw+1]=cb(x,y+gJ,gG,cd)fw[#fw+1]=cb(x,y+gK,gF,cd)cw=cw+1;gv=gv*10;if gF==gz then gw=gH else gw=0 end end;table.insert(fw,[[</g></g>]])end end;local function gL(eU)eU=vec3(eU)local gM=-math.deg(m(eU.y,eU.z))+180;gM=gM-90;if gM<0 then gM=360+gM end;if gM>180 then gM=-180+gM-180 end;return-gM end;local function gN(eU)eU=vec3(eU)local ga=math.deg(m(eU.y,eU.x))-90;if ga<-180 then ga=360+ga end;return ga end;local function gO(fw,eU,eR,centerX,centerY)if eR>5 and not ar or eR>Q then local g6=circleRad;local gP=20;local gQ=20;local gR=vec3(eU)local gS=gL(gR)local gT=gN(gR)local gU=14;local gV=gU/2;local gW=-gT/gQ*g6;local gX=gS/gP*g6;local x=centerX+gW;local y=centerY+gX;local aj=z(gW^2+gX^2)local gY=[[<circle
                            cx="]]..x..[["
                            cy="]]..y..[["
                            r="]]..gV/gU..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..x..[["
                            cy="]]..y..[["
                            r="]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..x-gU..[[,]]..y..[[ h ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..x+gV..[[,]]..y..[[ h ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..x..[[,]]..y-gU..[[ v ]]..gV..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<g6 then fw[#fw+1]=gY else local fY=m(gX,gW)local gZ=4;local g_=centerX+g6*math.cos(fY)local h0=centerY+g6*math.sin(fY)fw[#fw+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fY*180/math.pi,g_,h0,g_-gZ,h0-gZ/2,gZ*2,gZ,g_+gZ,h0-gZ,gZ,gZ,-gZ,gZ)end;if not ar then gS=gL(-gR)gT=gN(-gR)gW=-gT/gQ*g6;gX=gS/gP*g6;x=centerX+gW;y=centerY+gX;aj=z(gW^2+gX^2)if aj<g6 then local h1=[[<circle
                                    cx="]]..x..[["
                                    cy="]]..y..[["
                                    r="]]..gV..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..x..[[,]]..y-gU..[[ v ]]..gV..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..x..[[,]]..y..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..x..[[,]]..y..[[)" />
                                <path
                                    d="M ]]..x-gV..[[,]]..y..[[ h ]]..gU..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..x..[[,]]..y..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..x..[[,]]..y..[[)"/>]]fw[#fw+1]=h1 end end end end;local function h2(fw,fu,h3,h4)h3=d(h3+0.5)local fK=throtPosY+10;local fL=throtPosY+20;if l()==1 and not RemoteHud then fK=55;fL=65 end;local h5="CRUISE"local unit="km/h"local cg=h4;if fu=="TRAVEL"or fu=="AUTOPILOT"then h5="THROT"unit="%"cg=h3;local h6="dim"if h3<0 then h6="red"end;fw[#fw+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],h6,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h3),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fw[#fw+1]=cb(throtPosX+10,fK,h5,"pbright txtstart")fw[#fw+1]=cb(throtPosX+10,fL,e("%.0f %s",cg,unit),"pbright txtstart")if ar and AtmoSpeedAssist and bK and M then h3=d(N*100+0.5)local h6="red"if h3<0 then h6="red"end;fw[#fw+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],h6,1-c(h3),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fw[#fw+1]=cb(throtPosX+10,fK+40,"LIMIT","pbright txtstart")fw[#fw+1]=cb(throtPosX+10,fL+40,h3 .."%","pbright txtstart")end;if ar and AtmoSpeedAssist or Reentry then fw[#fw+1]=cb(throtPosX+10,fK-40,"LIMIT: "..bi.." km/h","dim txtstart")elseif not ar and Autopilot then fw[#fw+1]=cb(throtPosX+10,fK-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function h7(fw,h8)local h9=throtPosY-10;local ha=throtPosX+10;fw[#fw+1]=cb(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then h9=75 end;fw[#fw+1]=cb(ha,h9,d(h8).." km/h","pbright txtbig txtstart")end;local function hb(fw)fw[#fw+1]=cb(fq(1900),fr(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fw[#fw+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fw[#fw+1]=cb(fq(960),fr(550),"Warning: Invalid Control Scheme Detected","warnings")fw[#fw+1]=cb(fq(960),fr(600),"Keyboard Scheme must be selected","warnings")fw[#fw+1]=cb(fq(960),fr(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local hc=fq(960)local hd=fr(860)local he=fr(880)local hf=fr(900)local hg=fr(960)local hh=fr(200)local hi=fr(250)local hj=fr(960)if l()==1 and not RemoteHud then hd=fr(135)he=fr(155)hf=fr(175)hh=fr(115)hi=fr(95)end;if BrakeIsOn then fw[#fw+1]=cb(hc,hd,"Brake Engaged","warnings")elseif L>0 then fw[#fw+1]=cb(hc,hd,"Auto-Brake Engaged","warnings","opacity:"..L)end;if ar and bd and ap==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bI and not VertTakeOff and not AutoTakeoff then fw[#fw+1]=cb(hc,hh+50,"** STALL WARNING **","warnings")bZ("stall","SW",2)end end;if bU then fw[#fw+1]=cb(hc,hh+90,"Flight Assist in Progress","warnings")end;if ay then fw[#fw+1]=cb(hc,hj,"Gyro Enabled","warnings")end;if GearExtended then if S then fw[#fw+1]=cb(hc,he,"Gear Extended","warn")else fw[#fw+1]=cb(hc,he,"Landed (G: Takeoff)","warnings")end;local hk=cm(a:getTargetGroundAltitude())fw[#fw+1]=cb(hc,hf,"Hover Height: "..hk,"warn")end;if a7 then fw[#fw+1]=cb(hc,hg+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bI and AntigravTargetAltitude~=nil then if c(at-antigrav.getBaseAltitude())<501 then fw[#fw+1]=cb(hc,hh+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fw[#fw+1]=cb(hc,hh+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fw[#fw+1]=cb(hc,hh+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fw[#fw+1]=cb(hc,hh+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif a0 then fw[#fw+1]=cb(hc,hh+20,"Follow Mode Engaged","warn")elseif Reentry then fw[#fw+1]=cb(hc,hh+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local hk=cm(HoldAltitude,2)if VertTakeOff then if bI then hk=cm(antigrav.getBaseAltitude(),2).." AGG singularity height"end;fw[#fw+1]=cb(hc,hh,"VTO to "..hk,"warn")elseif AutoTakeoff and not IntoOrbit then if an then fw[#fw+1]=cb(hc,hh,"Takeoff to "..AutopilotTargetName,"warn")else fw[#fw+1]=cb(hc,hh,"Takeoff to "..hk,"warn")end;if BrakeIsOn and not VertTakeOff then fw[#fw+1]=cb(hc,hh+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fw[#fw+1]=cb(hc,hh,"Altitude Hold: "..hk,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if as>0.1 then fw[#fw+1]=cb(hc,hh+20,"Beginning ascent","warn")elseif as<0.09 and as>0.05 then fw[#fw+1]=cb(hc,hh+20,"Aligning trajectory","warn")elseif as<0.05 then fw[#fw+1]=cb(hc,hh+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if bk~=nil then fw[#fw+1]=cb(hc,hh,bk,"warn")end end;if IntruderAlertSystem and safeMass==-1 then fw[#fw+1]=cb(hc,hh+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bG.."kg DETECTED","warnings")bZ("alarm","AL",2)end;if BrakeLanding then if StrongBrakes then fw[#fw+1]=cb(hc,hh,"Brake-Landing","warnings")else fw[#fw+1]=cb(hc,hh,"Coast-Landing","warnings")end end;if ProgradeIsOn then fw[#fw+1]=cb(hc,hh,"Prograde Alignment","crit")end;if RetrogradeIsOn then fw[#fw+1]=cb(hc,hh,"Retrograde Alignment","crit")end;if bX then local type;if string.find(bX,"COLLISION")then type="warnings"else type="crit"end;fw[#fw+1]=cb(hc,hi+20,bX,type)elseif as==0 then local hl,ea,eb=b2:getPlanetarySystem(0):castIntersections(bF,bB:normalize(),function(dW)if dW.noAtmosphericDensityAltitude>0 then return dW.radius+dW.noAtmosphericDensityAltitude else return dW.radius+dW.surfaceMaxAltitude*1.5 end end)local hm=ea;if eb~=nil and ea~=nil then hm=math.min(eb,ea)end;if hm~=nil then local hk=cm(hm)local travelTime=b3.computeTravelTime(bC,0,hm)local hn="Collision"if hl.noAtmosphericDensityAltitude>0 then hn="Atmosphere"end;fw[#fw+1]=cb(hc,hi+20,hl.name.." "..hn.." "..cO(travelTime).." In "..hk,"crit")end end;if VectorToTarget and not IntoOrbit then fw[#fw+1]=cb(hc,hh+35,VectorStatus,"warn")end;fw[#fw+1]="</g>"return fw end;local function ho(eR)return d(B(eR*3.6,0)+0.5).." km/h"end;local function hp(fw)local hq=OrbitMapX;local hr=OrbitMapY;local hs=OrbitMapSize;local ht=4;local hu=15;local x=0;local y=0;local hv,hw,hx,hy;local function hz(type)local hA,D,eR,hB;if type=="Periapsis"then hA=orbit.periapsis.altitude;D=orbit.timeToPeriapsis;eR=orbit.periapsis.speed;hB=35 else hA=orbit.apoapsis.altitude;D=orbit.timeToApoapsis;eR=orbit.apoapsis.speed;hB=-35 end;fw[#fw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],x+hB,y-5,hq+hs/2-hv+hy,y-5)fw[#fw+1]=cb(x,y,type)y=y+hu;local hk=cm(hA)fw[#fw+1]=cb(x,y,hk)y=y+hu;fw[#fw+1]=cb(x,y,cO(D))y=y+hu;fw[#fw+1]=cb(x,y,ho(eR))end;if orbit~=nil and as<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then hr=hr+ht;x=hq+hs+hq/2+ht;y=hr+hs/2+5+ht;hv=hs/4;hy=0;fw[#fw+1]=[[<g class="pbright txtorb txtmid">]]fw[#fw+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',hs+hq*2,hs+hr,ht,ht)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hx=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hv*2)hw=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hx*(1-orbit.eccentricity)hy=hv-orbit.periapsis.altitude/hx-planet.radius/hx;local hC=""if orbit.periapsis.altitude<=0 then hC='redout'end;fw[#fw+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hC,hq+hs/2+hy+ht,hr+hs/2+ht,hv,hw)fw[#fw+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hq+hs/2+ht,hr+hs/2+ht,planet.radius/hx)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hz("Apoapsis")end;y=hr+hs/2+5+ht;x=hq-hq/2+10+ht;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hz("Periapsis")end;fw[#fw+1]=cb(hq+hs/2+ht,planet.name,20+ht,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hD=orbit.timeToApoapsis/orbit.period*2*math.pi;local hE=hv*math.cos(hD)local hF=hw*math.sin(hD)fw[#fw+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hq+hs/2+hE+hy+ht,hr+hs/2+hF+ht)end;fw[#fw+1]=[[</g>]]return fw else return fw end end;local hG;local function hH()if radarPanelID~=nil and al==0 then s(radarPanelID)radarPanelID=nil;if hG~=nil then s(hG)hG=nil end else if al==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")hG=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;al=0 end end;local function hI(fw)local x=30;local y=275;local hJ={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hK={"","------------------IN ATMO-----------------","Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to LowOrbitHeight over atmosphere and orbit to target","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local hL={"","------------------NO ATMO-----------------","Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local hM={"","------------------ALWAYS--------------------","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and offset","Alt-8: Toggle ground stabilization (underwater flight)","Alt-9: Activate Gyroscope","","CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if ar then c1(hJ,hK)table.insert(hJ,"--------------CONDITIONAL-----------------")if VertTakeOff then table.insert(hJ,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if ap~=-1 then if antigrav then if bI then table.insert(hJ,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hJ,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hJ,"Alt-6: Begins Vertical Takeoff.")else table.insert(hJ,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hJ,"G: Begin BrakeLanding or Land")end else c1(hJ,hL)end;if AltitudeHold then table.insert(hJ,"Alt-Spacebar/Alt-C will raise/lower target height")end;c1(hJ,hM)for i=1,#hJ do y=y+12;fw[#fw+1]=cb(x,y,hJ[i],"pdim txttick txtstart")end end;local function hN(hO,hP)local hQ;local hR=(hP-hO):normalize()local eW=(bF-hO):dot(hR)/hR:dot(hR)if eW<=0.then return(bF-hO):len()elseif eW>=(hP-hO):len()then return(bF-hP):len()end;local hS=hO+eW*hR;hQ=(hS-bF):len()return hQ end;local function hT()local hQ;local hU=nil;local hV=nil;local hW=nil;for cX,hX in pairs(aY[0])do if hX.hasAtmosphere then local aj=hN(planet.center,hX.center)if hU==nil or aj<hU then hV=hX;hU=aj;hW=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local eg=hN(ac.center,hX.center)if eg<hU then hV=hX;hU=eg;hW=ac end end end end;local hY=fq(1770)local hZ=fr(330)if hU then local h_="txttick "local i0=500000;if hU<hV.radius+i0 or hU<hW.radius+i0 then if bR then h_="txttick red "else h_="txttick orange "end end;hQ=cm(hU,2)bT=cb(hY,hZ,"Pipe ("..hW.name.."--"..hV.name.."): "..hQ,h_.."pbright txtmid")end end;local i1=fq(1770)local i2=fr(350)local i3=fr(15)local i4=fq(1370)local i5,i6;local i7={}local i8={XS=13,S=27,M=55,L=110,XL=221}local i9={}local ia={}function ia.HUDPrologue(fw)bR,fh,_,_=fi(bF)if not bR then H=PvPR;J=PvPG;I=PvPB else H=SafeR;J=SafeG;I=SafeB end;aA=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]aB=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]local ib=aA;local ic=aB;local id=aA;local ie=aB;if fs()and not brightHud then ib=[[rgb(]]..d(H*0.4+0.5)..","..d(J*0.4+0.5)..","..d(I*0.3+0.5)..[[)]]ic=[[rgb(]]..d(H*0.3+0.5)..","..d(J*0.3+0.5)..","..d(I*0.2+0.5)..[[)]]end;fw[#fw+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],ib,ib,id,id,ic,ic,ie,ie,aI,aJ)return fw end;function ia.DrawVerticalSpeed(fw,dz)fX(fw,dz)end;function ia.UpdateHud(fw)local dz=at;local eU=core.getVelocity()local eR=vec3(eU):len()local gM=bL;local ig=bM;local g4=ig;local gj=bL;local h3=d(unit.getThrottle())local h8=eR*3.6;local h4=unit.getAxisCommandValue(0)local ih=fq(1770)local ii=fr(310)if AtmoSpeedAssist and bK then h4=K;h3=K*100 end;local fu=ft()local g5="ROLL"if h3==nil then h3=0 end;if not bW then if eR>5 then gM=gL(eU)ig=gN(eU)else gM=0;ig=0 end;g5="YAW"end;if fh>50000 and not ar then local ij;if fh>200000 then ij=B(fh/200000,2).." su"else ij=B(fh/1000,1).." km"end;fw[#fw+1]=cb(ih,ii,"PvP Boundary: "..ij,"pbright txtbig txtmid")end;fw[#fw+1]=ak;fw[#fw+1]=aF;fw[#fw+1]=bS;if bT~=""then fw[#fw+1]=bT end;if aX%aR==0 then aW=true end;if fuelX~=0 and fuelY~=0 then fv(fw,aW,fuelX,"Atmospheric ","ATMO",aK,aU,aV)fv(fw,aW,fuelX+120,"Space fuel t","SPACE",aL,aS,aT)fv(fw,aW,fuelX+240,"Rocket fuel ","ROCKET",aM,aP,aQ)end;if aW then aW=false;aX=0 end;aX=aX+1;fX(fw,dz)if l()==0 or RemoteHud then if not fs()or brightHud then if bW then g3(fw,centerX,centerY,g4,g5,bW)gi(fw,gj,g4,centerX,centerY,bW,d(gN(eU)),eR)else g3(fw,centerX,centerY,ig,g5,bW)gi(fw,gM,ig,centerX,centerY,bW,d(ig),eR)end;gp(fw,dz,bW)gO(fw,eU,eR,centerX,centerY)end end;h2(fw,fu,h3,h4)h7(fw,h8)hb(fw)hp(fw)if showHelp then hI(fw)end;return fw end;function ia.HUDEpilogue(fw)fw[#fw+1]="</svg>"return fw end;function ia.ExtraData(fw)local ik=fq(1240)local il=fr(55)local im=il+10;local io;local ip=0;local fu=ft()if VertTakeOffEngine then fu=fu.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bC>20 then fu=fu.."-COLLISION ON"end;if TurnBurn then fu="TB-"..fu end;if not stablized then fu=fu.."-DeCoupled"end;local iq=vec3(core.getWorldAcceleration()):len()/9.80665;io=core.g()fw[#fw+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then ik=fq(1120)il=fr(55)im=il+10 elseif ar then local ir=fq(770)fw[#fw+1]=cb(ir,il,"ATMOSPHERE","pdim txt txtend")fw[#fw+1]=cb(ir,im,e("%.2f",as),"pdim txt txtend","")end;fw[#fw+1]=cb(ik,il,"GRAVITY","pdim txt txtend")fw[#fw+1]=cb(ik,im,e("%.2f",io/9.80665),"pdim txt txtend")fw[#fw+1]=cb(ik,il+20,"ACCEL","pdim txt txtend")fw[#fw+1]=cb(ik,im+20,e("%.2f",iq),"pdim txt txtend")fw[#fw+1]=cb(fq(960),fr(180),fu,"txtbig txtmid")end;function ia.DrawOdometer(fw,ad,TotalDistanceTravelled,ae)local io;local is=0;local it=0;local ip=0;if ar then ip=LastMaxBrakeInAtmo else ip=LastMaxBrake end;maxThrust=a:maxForceForward()io=core.g()if io>0.1 then it=aw*io;is=maxThrust/io end;fw[#fw+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],fq(660),fq(700),fr(35),fq(960),fr(55),fq(1240),fr(35),fq(1280))if l()==0 or RemoteHud then fw[#fw+1]=cb(fq(700),fr(20),e("Trip: %.2f km",ad),"txtstart")fw[#fw+1]=cb(fq(700),fr(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")fw[#fw+1]=cb(fq(830),fr(20),"Trip Time: "..cO(ae),"txtstart")fw[#fw+1]=cb(fq(830),fr(30),"Total Time: "..cO(TotalFlightTime),"txtstart")fw[#fw+1]=cb(fq(970),fr(20),e("Mass: %.2f Tons",aw/1000),"txtstart")fw[#fw+1]=cb(fq(1240),fr(10),e("Max Brake: %.2f kN",ip/1000),"txtend")fw[#fw+1]=cb(fq(1240),fr(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if io>0.1 then fw[#fw+1]=cb(fq(970),fr(30),e("Max Mass: %.2f Tons",is/1000),"txtstart")fw[#fw+1]=cb(fq(1240),fr(20),e("Req Thrust: %.2f kN",it/1000),"txtend")else fw[#fw+1]=cb(fq(970),fr(30),"Max Mass: n/a","txtstart")fw[#fw+1]=cb(fq(1240),fr(20),"Req Thrust: n/a","txtend")end end;fw[#fw+1]="</g>"return fw end;function ia.DrawWarnings(fw)return hb(fw)end;function ia.DisplayOrbitScreen(fw)return hp(fw)end;function ia.DisplayMessage(fw,hk)if hk~="empty"then local y=310;for iu in string.gmatch(hk,"([^\n]+)")do y=y+35;fw[#fw+1]=cb("50%",y,iu,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function ia.DrawDeadZone(fw)fw[#fw+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ia.UpdatePipe()if ar then bT=""return end;hT()end;function ia.UpdateRadarRoutine()local function iv(iw,ix,iy,iz,iA,iB,iC,iD)ix,iz,iB,iD=vec3(ix),vec3(iz),vec3(iB),vec3(iD)local iE,iF,iG=iw*iw,iy*iy,iA*iA;local eX=iz-ix;local iH=eX:normalize()local iI=eX:len()local iJ=iB-ix;local iK=(iJ-iJ:project_on(iH)):normalize()local iL,iM=iJ:dot(iH),iJ:dot(iK)local iN=iL*iL+iM*iM;local iO=iH:cross(iK)local x=(iE-iF+iI*iI)/(2*iI)local y=(iE-iG+iN-2*iL*x)/(2*iM)local d9=iE-x^2-y^2;local iP=z(d9)local iQ=ix+iH*x+iK*y+iO*iP;local iR=ix+iH*x+iK*y-iO*iP;if c((iD-iQ):len()-iC)<c((iD-iR):len()-iC)then return iQ else return iR end end;local function iS()local function iT()local iU=core.getConstructWorldOrientationRight()local eX=core.getConstructWorldOrientationForward()local iJ=core.getConstructWorldOrientationUp()local iV=library.systemResolution3(iU,eX,iJ,{1,0,0})local iW=library.systemResolution3(iU,eX,iJ,{0,1,0})local iX=library.systemResolution3(iU,eX,iJ,{0,0,1})return function(iY)return library.systemResolution3(iV,iW,iX,iY)end end;local iZ=iT()local i_=core.getConstructWorldPos()local eV=core.getElementPositionById(1)local j0={eV[1]-F,eV[2]-F,eV[3]-F}local j1=iZ(j0)local j2={i_[1]-j1[1],i_[2]-j1[2],i_[3]-j1[3]}return j2 end;local function j3(j4,eY,j5)local j6=j4.pts;local cw=#j6;local j7=j4.ref;if cw>3 then local j8,j9,ja,jb=j6[cw],j6[cw-1],j6[cw-2],j6[cw-3]j4.ref=j5;local eV=iv(j8[1],j8[2],j9[1],j9[2],ja[1],ja[2],jb[1],jb[2])local x,y,iP=eV.x,eV.y,eV.z;if x==x and y==y and iP==iP then x=x+j7[1]y=y+j7[2]iP=iP+j7[3]local jc=vec3(x,y,iP)if not j4.lastPos then j4.center=jc elseif(j4.lastPos-jc):len()<2 then j4.center=jc;j4.skipCalc=true end;j4.lastPos=jc end;j4.pts={}else local jd={j5[1]-j7[1],j5[2]-j7[2],j5[3]-j7[3]}j6[cw+1]={eY,jd}end end;if radar_1 then local je=#radar_1.getEntries()local jf=radar_1.getData()local jg=jf:gmatch('{"constructId[^}]*}[^}]*}')if je>0 then local j5=iS()local jh,ji,jj=0,0,0;for cY in jg do local dH,aj,jk=cY:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local jl=i8[jk]aj=A(aj)if radar_1.hasMatchingTransponder(dH)==1 then table.insert(i7,dH)end;local jm=radar_1.getConstructType(dH)if CollisionSystem then if jl>27 or jm=="static"or jm=="space"then jj=jj+1;local fM=radar_1.getConstructName(dH)local j4=bV[dH]if j4==nil then jl=jl+G;bV[dH]={pts={},ref=j5,name=fM,i=0,radius=jl,skipCalc=false}j4=bV[dH]end;if not j4.skipCalc then j3(j4,aj,j5)ji=ji+1 end;if j4.center then table.insert(i9,j4)end end;jh=jh+1;if bW and jh>700 or ji>70 or(not bW and jh>300 or ji>30)then coroutine.yield()jh,ji=0,0 end end end;local jn=#i9;if jn>0 and bC>20 then local dW,jo,jp,jq;local jr=0;local js=b2:getPlanetarySystem(0)jq=bB:normalize()while jr<jn do coroutine.yield()local jt={table.unpack(i9,jr,math.min(jr+75,jn))}dW,jo,jp=js:castIntersections(bF,jq,nil,nil,jt,true)if dW and jp then bY={dW,jo,jp}break end;jr=jr+75 end;if not dW then bY=nil end else bY=nil end;i9={}local ju=jf:find('identifiedConstructs":%[%]')if ju==nil and hG==nil then al=1;hH()end;if ju~=nil and hG~=nil then hH()end;if radarPanelID==nil then hH()end;if CollisionSystem then i5=jn.."/"..jj.." Plotted : "..je-jj.." Ignored"else i5="Radar Contacts: "..je end;bS=cb(i1,i2,i5,"pbright txtbig txtmid")if#i7>0 then bS=bS..cb(x,y,"Friendlies In Range","pbright txtbig txtmid")for cX,cY in pairs(i7)do i3=i3+20;bS=bS..cb(i4,i3,radar_1.getConstructName(cY),"pdim txtmid")end;i7={}end else local jv;jv=jf:find('worksInEnvironment":false')if jv then bS=cb(i1,i2,"Radar: Jammed","pbright txtbig txtmid")else bS=cb(i1,i2,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then al=0;hH()end end end end;function ia.UpdateRadar()local jw=coroutine.status(UpdateRadarCoroutine)if jw=="suspended"then local cg,jx=coroutine.resume(UpdateRadarCoroutine)if jx then system.print("ERROR UPDATE RADAR: "..jx)end elseif jw=="dead"then UpdateRadarCoroutine=coroutine.create(ia.UpdateRadarRoutine)local cg,jx=coroutine.resume(UpdateRadarCoroutine)end end;function ia.DrawSettings(fw)if#bO>0 then local x=fq(640)local y=fr(200)fw[#fw+1]=[[<g class="pbright txtvspd txtstart">]]for cX,cY in pairs(bO)do fw[#fw+1]=cb(x,y,cY..": ".._G[cY])y=y+20;if cX%12==0 then x=x+fq(350)y=fr(200)end end;fw[#fw+1]=cb(fq(640),fr(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fw[#fw+1]="</g>"end;return fw end;UpdateRadarCoroutine=coroutine.create(ia.UpdateRadarRoutine)return ia end;local function jy()local function jz()local function jA(jB,jC)return jB.name<jC.name end;bQ={}for cX,cY in pairs(aY[0])do bQ[#bQ+1]={name=cY.name,index=cX}end;table.sort(bQ,jA)end;local cZ={}function cZ.UpdateAtlasLocationsList()jz()end;function cZ.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local jD=bQ[AutopilotTargetIndex].index;local jE=aY[0][jD]if jE.center then AutopilotTargetName=jE.name;ac=b2[0][jD]if CustomTarget~=nil then if as==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jE;for _,cY in pairs(b2[0])do if cY.name==CustomTarget.planetname then ac=cY;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=d(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b5(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function cZ.adjustAutopilotTargetIndex(g0)if not Autopilot and not VectorToTarget and not an and not IntoOrbit then if g0==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bQ then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bQ end end;if AutopilotTargetIndex==0 then b7.UpdateAutopilotTarget()else local jD=bQ[AutopilotTargetIndex].index;local jE=aY[0][jD]if jE.name=="Space"or iphCondition=="Custom Only"and jE.center or iphCondition=="No Moons"and string.find(jE.name,"Moon")~=nil then if g0==nil then b7.adjustAutopilotTargetIndex()else b7.adjustAutopilotTargetIndex(1)end else b7.UpdateAutopilotTarget()end end else a2="Disengage autopilot before changing Interplanetary Helper"bZ("iph","AP")end end;function cZ.findAtlasIndex(jF)for cX,cY in pairs(jF)do if cY.name and cY.name==CustomTarget.name then return cX end end;return-1 end;for cX,cY in pairs(SavedLocations)do table.insert(aY[0],cY)end;jz()cZ.UpdateAutopilotTarget()return cZ end;local function jG()local jH={}local function jI(eR)local jJ=AutopilotEndSpeed;if not Autopilot then jJ=0 end;if not ar then return b3.computeDistanceAndTime(eR,jJ,aw,0,0,LastMaxBrake-AutopilotPlanetGravity*aw)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b3.computeDistanceAndTime(eR,jJ,aw,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*aw)else return 0,0 end end end;local function jK(eR)local jJ=AutopilotEndSpeed;if not Autopilot then jJ=0 end;return b3.computeDistanceAndTime(eR,jJ,aw,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*aw)end;function jH.GetAutopilotBrakeDistanceAndTime(eR)return jI(eR)end;function jH.GetAutopilotTBBrakeDistanceAndTime(eR)return jK(eR)end;local function jL(jM,jN,jO)jN=jN:project_on_plane(jM)jO=jO:project_on_plane(jM)return m(jN:cross(jO):dot(jM),jN:dot(jO))end;local function jP()local function jQ()local jR=-1;local jS=-1;if vBooster then jR=vBooster.distance()end;if hover then jS=hover.distance()end;if jR~=-1 and jS~=-1 then if jR<jS then return jR else return jS end elseif jR~=-1 then return jR elseif jS~=-1 then return jS else return-1 end end;local jT=jQ()local jU=-1;if telemeter_1 then jU=telemeter_1.getDistance()end;if jT~=-1 and jU~=-1 then if jT<jU then return jT else return jU end elseif jT~=-1 then return jT else return jU end end;local function jV(planet,ec,jW)local function jX(jY,ds)local ei=vec3(ds)if jY.bodyId==0 then return setmetatable({latitude=ei.x,longitude=ei.y,altitude=ei.z,bodyId=0,systemId=jY.planetarySystemId},MapPosition)end;local ej=ei-jY.center;local aj=ej:len()local dz=aj-jY.radius;local dx=0;local dy=0;if not cj(aj,0)then local ek=m(ej.y,ej.x)dy=ek>=0 and ek or 2*math.pi+ek;dx=math.pi/2-math.acos(ej.z/aj)end;return setmetatable({latitude=math.deg(dx),longitude=math.deg(dy),altitude=dz,bodyId=jY.bodyId,systemId=jY.planetarySystemId},MapPosition)end;local jZ=jX(planet,ec)jZ="::pos{"..jZ.systemId..","..jZ.bodyId..","..jZ.latitude..","..jZ.longitude..","..jZ.altitude.."}"if jW then return jZ else system.setWaypoint(jZ)return true end end;function jH.showWayPoint(planet,ec,jW)return jV(planet,ec,jW)end;function jH.APTick()local function j_()if bY and not BrakeLanding then local dW=bY[1]local jo,jp=bY[2],bY[3]local k0=math.min(jo,jp or jo)local k1=k0/bC;if(AltitudeHold or VectorToTarget or LockPitch or Autopilot)and not AutoTakeoff and(a8*1.5>k0 or k1<1)then BrakeIsOn=true;cf(0)if AltitudeHold then cr()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cs()end;StrongBrakes=true;BrakeLanding=true;bb=true end;if k1<11 then bX=dW.name.." COLLISION "..cO(k1).." / "..cm(k0,2)else bX=dW.name.." collision "..cO(k1)end;if k1<6 then bZ("alarm","AL",2)end else bX=false end end;ar=j()>0;as=j()at=core.getAltitude()ap=jP()D=p()be=D;bW=unit.getClosestPlanetInfluence()>0;if CollisionSystem then j_()end;if antigrav then bI=antigrav.getState()==1 end;local k2=1;local k3=1;local k4=D-be;local k5=-math.deg(jL(by,bB,bz))local k6=math.deg(jL(bA,bB,bz))local g0=bD*-1;bd=ar and k5<-YawStallAngle or k5>YawStallAngle or k6<-PitchStallAngle or k6>PitchStallAngle;local k7=system.getMouseDeltaX()local k8=system.getMouseDeltaY()if InvertMouse and not a1 then k8=-k8 end;V=0;Z=0;U=0;sys=b2[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b5(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bB)if at==0 then at=(bF-planet.center):len()-planet.radius end;local io=planet:getGravity(core.getConstructWorldPos()):len()*aw;bf=0;b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and a1 then if not b9 then ag=ag+k7;ah=ah+k8 end else ag=0;ah=0 end else ag=ag+k7;ah=ah+k8;aj=z(ag*ag+ah*ah)if not a1 and l()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(k8,-100,100)+0.5)*2*k2;V=(-utils.smoothstep(k7,-100,100)+0.5)*2*k3 end end end end;local k9=bC>8334;if bC>SpaceSpeedLimit/3.6 and not ar and not Autopilot and not k9 then a2="Space Speed Engine Shutoff reached"cf(0)end;if not k9 and LastIsWarping then if not BrakeIsOn then cz()end;if Autopilot then cs()end end;LastIsWarping=k9;if ar and as>0.09 then if bC>bi/3.6 and not AtmoSpeedAssist and not az then BrakeIsOn=true;az=true elseif not AtmoSpeedAssist and az then if bC<bi/3.6 then BrakeIsOn=false;az=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if am then BrakeIsOn=false;local ka=false;if CustomTarget~=nil then ka=cA(CustomTarget.position-bF,0.1)else ka=cA(vec3(bB),0.01)end;bb=true;if ka then ci(d(bi))if(c(bM)<2 or c(bL)>85)and bC>=bi/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;cM()end elseif ar and AtmoSpeedAssist then cf(1)end elseif bC>Q then cA(vec3(bB),0.01)end end;if RetrogradeIsOn then if ar then RetrogradeIsOn=false elseif bC>Q then cA(-vec3(bB))end end;if not ProgradeIsOn and am and not IntoOrbit then if as==0 then R=true;cM()am=false;ao=true else am=false;cs()end end;if ao and CustomTarget~=nil and(at<HoldAltitude+250 and at>HoldAltitude-250)and bC*3.6>bi-250 and c(bE)<25 and as>=0.1 and(CustomTarget.position-bF):len()>2000+at then cs()ao=false end;if VertTakeOff then bb=true;local kb=HoldAltitude;if bE<-30 then a2="Unable to achieve lift. Safety Landing."af=0;bb=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bI or HoldAltitude<planet.spaceEngineMinAltitude then if bI then kb=antigrav.getBaseAltitude()end;if at<kb-100 then bj=0;af=15;BrakeIsOn=false elseif bE>0 then BrakeIsOn=true;af=0 elseif bE<-30 then BrakeIsOn=true;af=15 elseif at>=kb then if bI then if Autopilot or VectorToTarget then cp()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"bZ("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"bZ("vtoc","VT")cp()end;af=0 end else if as>0.08 then bj=0;BrakeIsOn=false;af=20 elseif as<0.08 and as>0 then BrakeIsOn=false;if bv then bj=0;af=20 else af=0;bj=36;ci(3500)end else bb=autoRollPreference;IntoOrbit=true;bt=false;CancelIntoOrbit=false;bn=false;bl=nil;bm=nil;if bs==nil then bs=planet end;br=kb;bq=true;VertTakeOff=false end end;if bj~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local kc=q(bj-bL,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(kc)local kd=q(vTpitchPID:get(),-1,1)U=kd end end;if IntoOrbit then local cJ;local ke=false;local kf=cm(br)if bs==nil then bs=planet;if VectorToTarget then bs=ac end end;if not bq then br=d(bs.radius+bs.surfaceMaxAltitude+LowOrbitHeight)if bs.hasAtmosphere then br=d(bs.radius+bs.noAtmosphericDensityAltitude+LowOrbitHeight)end;bq=true end;if bp.VectorToTarget then cJ=CustomTarget.position-bF end;local kg,kh=b5(bs):escapeAndOrbitalSpeed((bF-bs.center):len()-bs.radius)local ki=bM;if not bn then local kj=false;local kk=false;cf(0)bm=0;bk="Aligning to orbital path - OrbitHeight: "..kf;if bp.VectorToTarget then cA(cJ:normalize():project_on_plane(bD))ke=bz:dot(cJ:project_on_plane(by):normalize())>0.95 else cA(bB)ke=k5<0.5;if bC<150 then ke=true end end;U=0;bl=0;if bL<=bl+1 and bL>=bl-1 then kj=true else kj=false end;if ki<=bm+1 and ki>=bm-1 then kk=true else kk=false end;if kj and kk and ke then bl=nil;bm=nil;bn=true end else if bp.VectorToTarget then cA(cJ:normalize():project_on_plane(bD))elseif bC>150 then cA(bB)end;U=0;if bp.VectorToTarget then local a8,_=b3.computeDistanceAndTime(bC,bi/3.6,aw,0,0,LastMaxBrake)if bt and cJ:len()>15000+a8+at then bk="Orbiting to Target"if at-100<=bs.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bs.noAtmosphericDensityAltitude then bt=false end elseif bt or cJ:len()<15000+a8+at then a2="Orbit complete, proceeding with reentry"bZ("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;ao=true;bp.VectorToTarget,bp.AutopilotAlign=false,false;cq()cM()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and at>br*0.9 and at<br*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=br*0.99 and orbit.apoapsis.altitude>=br*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bt then if bt then BrakeIsOn=false;cf(0)bl=0;if not bp.VectorToTarget then a2="Orbit complete"bZ("orCom","OB")cq()end else bx=bx+1;if bx>=2 then bt=true end end else bk="Adjusting Orbit - OrbitHeight: "..kf;bo=true;ci(kh*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kl=bE;local km=at-br;local kn=c(km)if bE<10 and c(bL)<10 and kn<100 then kl=bE*2 end;if kl<10 and c(bL)<10 and kn<100 then kl=kl*2 end;if kl<5 and c(bL)<5 and kn<100 then kl=kl*4 end;VSpdPID:inject(kl)bl=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(km)bl=q(bl-q(OrbitAltPID:get(),-15,15),-90,90)end end else local ko=2.75;local kp=c(o(kg*ko))local kq=kp%50;if kq>0 then kp=kp-kq+50 end;BrakeIsOn=false;if at<br*0.8 then bk="Escaping planet gravity - OrbitHeight: "..kf;bl=utils.map(bE,200,0,-15,80)elseif at>=br*0.8 and at<br*1.15 then bk="Approaching orbital corridor - OrbitHeight: "..kf;kp=kp*0.75;bl=utils.map(bE,100,-100,-15,65)elseif at>=br*1.15 and at<br*1.5 then bk="Approaching orbital corridor - OrbitHeight: "..kf;kp=kp*0.75;if bE<0 or bo then bl=utils.map(at,br*1.5,br*1.01,-30,0)else bl=utils.map(at,br*0.99,br*1.5,0,30)end elseif at>br*1.5 then bk="Reentering orbital corridor - OrbitHeight: "..kf;bl=-65;local kr=utils.map(bE,-150,-400,1,0.55)kp=kp*kr end;ci(d(kp))end end;if bl~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local ks=bl-bL;OrbitPitchPID:inject(ks)local kt=q(OrbitPitchPID:get(),-0.5,0.5)U=kt end end;if Autopilot and as==0 and not am then local function ku(i5,orbit)system.print(i5)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cf(0)P=false;a2=i5;bZ("apCom","AP")if orbit or am then if orbit and AutopilotTargetOrbit~=nil and not am then if not at or at==0 then return end;br=at;bq=true end;cq()end end;local kv,kw=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kx=(CustomTarget.position-ac.center):normalize()local ky=kx:project_on_plane((ac.center-bF):normalize()):normalize()local kz=ac.center+ky*(ac.radius+AutopilotTargetOrbit)local kA=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bF-kz):len()<(bF-kA):len()then kv=kz else kv=kA;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kv;b8.showWayPoint(ac,AutopilotTargetCoords)kw=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kw=true;TargetSet=true;AutopilotRealigned=true;kv=CustomTarget.position+(bF-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kx=(bF+bB*100000-ac.center):normalize()local ky=kx:project_on_plane((ac.center-bF):normalize()):normalize()if ky:len()<1 then kx=(bF+bz*100000-ac.center):normalize()ky=kx:project_on_plane((ac.center-bF):normalize()):normalize()end;kv=ac.center+ky*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kv;TargetSet=true;kw=true;AutopilotRealigned=true;b8.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kv)-bF):len()local hl,ea,eb=b2:getPlanetarySystem(0):castIntersections(bF,bB:normalize(),function(dW)if dW.noAtmosphericDensityAltitude>0 then return dW.radius+dW.noAtmosphericDensityAltitude else return dW.radius+dW.surfaceMaxAltitude*1.5 end end)local hm=ea;if eb~=nil and ea~=nil then hm=math.min(eb,ea)end;if hm~=nil and hm<AutopilotDistance and hl.name==ac.name then AutopilotDistance=hm end;local ka=true;local kB=(ac.center-(bF+vec3(bB):normalize()*AutopilotDistance)):len()-ac.radius;local hk=cm(kB)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hk..'"}')local a8,a9;if not TurnBurn then a8,a9=jI(bC)else a8,a9=jK(bC)end;if bC>300 and AutopilotAccelerating then local cJ=vec3(kv)-bF;local kC=q(math.deg(jL(by,bB:normalize(),cJ:normalize()))*bC/500,-90,90)local kD=q(math.deg(jL(bA,bB:normalize(),cJ:normalize()))*bC/500,-90,90)if c(kC)<20 and c(kD)<20 then kC=kC*2;kD=kD*2 end;if c(kC)<2 and c(kD)<2 then kC=kC*2;kD=kD*2 end;local k5=-math.deg(jL(by,bz,bB:normalize()))local k6=-math.deg(jL(bA,bz,bB:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kD-k6)local kE=q(apPitchPID:get(),-1,1)U=U+kE;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kC-k5)local kF=q(apYawPID:get(),-1,1)V=V+kF;kw=true;if c(kC)>2 or c(kD)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"bZ("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bZ("apAcc","AP")end end end;if kB<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b5(ac):escapeAndOrbitalSpeed(kB)end end;if not AutopilotCruising and not AutopilotBraking and not kw then ka=cA((kv-bF):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then ka=cA(-vec3(bB):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cf(AutopilotInterplanetaryThrottle)K=B(AutopilotInterplanetaryThrottle,2)P=true end;local kG=unit.getThrottle()if AtmoSpeedAssist then kG=K end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or kG==0 and P then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then bZ("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cf(0)end;if AutopilotDistance<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bZ("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cf(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cf(1,true)end;local _,kh=b5(ac):escapeAndOrbitalSpeed((bF-planet.center):len()-planet.radius)local cJ;if CustomTarget~=nil then cJ=CustomTarget.position-bF end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bC<50 then ku("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bC<=kh and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then ku("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;am=true;b8.showWayPoint(ac,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then bZ("apCir","AP")AutopilotStatus="Circularizing"end;if bC<=kh then if CustomTarget~=nil then if bB:normalize():dot(cJ:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then bZ("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;b8.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else ku("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;am=true;b8.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else ku("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then ku("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a8 then AutopilotAccelerating=false;if AutopilotStatus~="Braking"then bZ("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local kG=unit.getThrottle()if AtmoSpeedAssist then kG=K end;if kG>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bZ("apAcc","AP")end;AutopilotCruising=false end else if ka then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not am then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bA;AutopilotShipUp=by;AutopilotShipRight=bA end;AutopilotRealigned=true elseif ka then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"bZ("apAcc","AP")end;if not P then cf(AutopilotInterplanetaryThrottle,true)K=B(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and as>0)then a2="Autopilot complete, proceeding with reentry"bZ("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cf(0)P=false;ProgradeIsOn=true;am=true;b8.showWayPoint(ac,CustomTarget.position)end;if a0 then bb=true;local kD=0;local eV=bF+vec3(unit.getMasterPlayerRelativePosition())local kH=eV-bF;local kI=vec3(kH):project_on(bz):len()local kJ=vec3(kH):project_on(bA):len()local aj=z(kI*kI+kJ*kJ)cA(kH:normalize())local kK=40;local kL=aj<kK;local kM=100;local kN=q((aj-kK)/2,10,kM)U=0;local ka=c(V)<0.1;if ka and bC<kN and not kL then BrakeIsOn=false;kD=-20 else BrakeIsOn=true;kD=0 end;local kO=0;if c(kD-bL)>kO then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kD-bL)local kE=pitchPID:get()U=kE end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local kP=LastMaxBrakeInAtmo;if kP then kP=kP*q(bC/100,0.1,1)*as else kP=LastMaxBrake end;if as<0.01 then kP=LastMaxBrake end;local kQ=vec3(core.getWorldAirFrictionAcceleration())local kR=z(kQ:len()-kQ:project_on(g0):len())*aw;if bC>100 then a8,a9=b3.computeDistanceAndTime(bC,100,aw,0,0,kP+kR)local kS,kT=b3.computeDistanceAndTime(100,0,aw,0,0,kP/2)a8=a8+kS else a8,a9=b3.computeDistanceAndTime(bC,0,aw,0,0,kP/2)end;local kU=HoldAltitude-at;local kV=500+bC;local kW=1;if AutoTakeoff then kW=q(bC/100,0.1,1)end;local kD=(utils.smoothstep(kU,-kV,kV)-0.5)*2*MaxPitch*kW;if not Reentry and not am and not VectorToTarget and bz:dot(bB:normalize())<0.99 then kD=(utils.smoothstep(kU,-kV*q(20-19*as*10,1,20),kV*q(20-19*as*10,1,20))-0.5)*2*MaxPitch*q(2-as*10,1,2)*kW end;if not AltitudeHold then kD=0 end;if LockPitch~=nil then if bW and not IntoOrbit then kD=LockPitch else LockPitch=nil end end;bb=true;local kX=U;if Reentry then local kY=d(bi)local kZ,k_=b3.computeDistanceAndTime(bC,kY/3.6,aw,0,0,LastMaxBrake-planet.gravity*9.8*aw)local l0=at-(planet.noAtmosphericDensityAltitude+5000)if not bK and at>planet.noAtmosphericDensityAltitude+5000 and bC<=kY/3.6 and bC>kY/3.6-10 and c(bB:normalize():dot(bz))>0.9 then cf(0)elseif bK and bC>kY/3.6 and(kZ>-1 and l0<=kZ or at<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;ci(kY,true)if not R then kD=-80;if as>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kD=0;bb=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and at>planet.noAtmosphericDensityAltitude+5000 then bb=true elseif at<=planet.noAtmosphericDensityAltitude+5000 then ci(kY)if not bK and r:getTargetSpeed(axisCommandId.longitudinal)==bi then R=false;Reentry=false;bb=true end end end;if bC>Q and not an and not VectorToTarget and not BrakeLanding and ForceAlignment then cA(vec3(bB))end;if bU or(VectorToTarget or an)and AutopilotTargetIndex>0 and as>0.01 then local cJ;if bU then if type(bU)=="table"then cJ=bU elseif bU<3 and bU>0 then cJ=-bD:cross(bB)*5000 elseif bU>=3 then cJ=bD:cross(bB)*5000 elseif bU<0 then cJ=bB*25000 end elseif CustomTarget~=nil then cJ=CustomTarget.position-bF else cJ=ac.center-bF end;local kC=math.deg(jL(bD:normalize(),bB,cJ))*2;local l1=math.rad(c(bM))if bC>minRollVelocity and as>0.01 then local l2=q(90-kD*2,-90,90)bf=q(kC*2,-l2,l2)local l3=kC;kC=q(q(kC,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(l1)+4*(bL-kD)*math.sin(math.rad(bM)),-YawStallAngle*0.80,YawStallAngle*0.80)kD=q(q(kD*math.cos(l1),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(l3)*math.sin(l1),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bf=0;kC=q(kC,-YawStallAngle*0.80,YawStallAngle*0.80)end;local l4=k5-kC;if bU and c(l4)<=0.0001 and(type(bU)=="table"or type(bU)~="table"and bU<0 and c(bM)<1)then if bU==-2 then cr()end;bU=nil;bZ("180Off","BR")return end;if not bd and bC>minRollVelocity and as>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(l4)local kF=q(yawPID:get(),-1,1)V=V+kF elseif ar and ap>-1 or bC<minRollVelocity then cA(cJ)elseif bd and as>0.01 then if(k5<-YawStallAngle or k5>YawStallAngle)and as>0.01 then cA(bB)end;if(k6<-PitchStallAngle or k6>PitchStallAngle)and as>0.01 then kD=q(bL-k6,bL-PitchStallAngle*0.80,bL+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not an then local kb=planet:getAltitude(CustomTarget.position)local l0=z(cJ:len()^2-(at-kb)^2)local l5=bB:len()-c(bE)StrongBrakes=true;if not an and not Reentry and l0<=a8+bC*k4/2 and(bB:project_on_plane(bD):normalize():dot(cJ:project_on_plane(bD):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cf(0)if AltitudeHold then cr()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(l5<0.1 or l0<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<l0)then if not bI then bZ("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bX=false end;LastDistanceToTarget=l0 end elseif VectorToTarget and as==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(an or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local cJ=CustomTarget.position-bF;local kb=planet:getAltitude(CustomTarget.position)local l0=z(cJ:len()^2-(at-kb)^2)local kP=LastMaxBrakeInAtmo;if kP then a8,a9=b3.computeDistanceAndTime(bC,0,aw,0,0,kP/2)StrongBrakes=true;if l0<=a8+bC*k4/2 and bB:project_on_plane(bD):normalize():dot(cJ:project_on_plane(bD):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;am=false;ao=true;Autopilot=false;cM()end end;LastDistanceToTarget=l0 end end end;if as==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(an or IntoOrbit or Reentry)then if not bt and not IntoOrbit then br=HoldAltitude;bq=true;if VectorToTarget then bp.VectorToTarget=true end;cq()VectorToTarget=false;bn=true end end;if bd and as>0.01 and ap==-1 and bC>minRollVelocity and VectorStatus~="Finalizing Approach"then cA(bB)kD=q(bL-k6,bL-PitchStallAngle*0.80,bL+PitchStallAngle*0.80)end;U=kX;local jU=-1;if BrakeLanding then kD=0;local l6=false;local l7=30;if b4~=nil and b4>0 then local l8=q(as,0.4,2)local kP=LastMaxBrakeInAtmo*q(bC/100,0.1,1)*l8;local l9=b4*l8+kP-io;local la=kP/2-io;local lb=bC-z(c(la/2)*20/(0.5*aw))*utils.sign(la)if lb<0 then lb=0 end;local lc;if bC>100 then local ld,_=b3.computeDistanceAndTime(bC,100,aw,0,0,kP)local le,_=b3.computeDistanceAndTime(100,0,aw,0,0,z(kP))lc=ld+le else lc=b3.computeDistanceAndTime(bC,0,aw,0,0,z(kP))end;if lc<20 then BrakeIsOn=false else local lf=0;if lb>100 then local lg,_=b3.computeDistanceAndTime(lb,100,aw,0,0,l9)local lh,_=b3.computeDistanceAndTime(100,0,aw,0,0,b4*l8+z(kP)-io)lf=lg+lh else lf,_=b3.computeDistanceAndTime(lb,0,aw,0,0,b4*l8+z(kP)-io)end;lf=(lf+15+bC*k4)*1.1;local li=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if li then local kb=planet:getAltitude(CustomTarget.position)local lj=at-kb-100;local cJ=CustomTarget.position-bF;local lk=z(cJ:len()^2-(at-kb)^2)if lk>100 then li=false elseif lj<=lf or lf==-1 then BrakeIsOn=true;l6=true else BrakeIsOn=false;l6=true end end;if not li and CalculateBrakeLandingSpeed then if lf>=l7 then BrakeIsOn=true else BrakeIsOn=false end;l6=true end end end;if not bK then cf(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)stablized=true;jU=ap;if jU>-1 then bb=autoRollPreference;if bC<1 or bB:normalize():dot(bD)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()bZ("grOut","LG",1)end;r:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bB:normalize():dot(-g0)<0.999 then BrakeIsOn=true elseif bE<-brakeLandingRate and not l6 then BrakeIsOn=true elseif not l6 then BrakeIsOn=false end end;if AutoTakeoff or an then local hl,eb,ea;if AutopilotTargetCoords~=nil then hl,eb,ea=b2:getPlanetarySystem(0):castIntersections(bF,(AutopilotTargetCoords-bF):normalize(),function(dW)return dW.radius+dW.noAtmosphericDensityAltitude end)end;if bI then if at>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cf(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(kD)<15 and at/HoldAltitude>0.75 then AutoTakeoff=false;if not an then if bK and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif an and bC<Q then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;cf(0)elseif an then cf(0)BrakeIsOn=true end elseif an and as==0 and ac~=nil and(hl==nil or hl.name==ac.name)then Autopilot=true;an=false;AltitudeHold=false;AutoTakeoff=false;if not bK then cf(0)end;AutopilotAccelerating=true end end;local ll=ap>-1;local lm=bL;if(VectorToTarget or an or bU)and not ll and bC>minRollVelocity and as>0.01 then local l1=math.rad(c(bM))lm=bL*c(math.cos(l1))+k6*math.sin(l1)end;local ln=q(kD-lm,-PitchStallAngle*0.80,PitchStallAngle*0.80)if as<0.01 and VectorToTarget then ln=q(kD-lm,-85,MaxPitch)elseif as<0.01 then ln=q(kD-lm,-MaxPitch,MaxPitch)end;if c(bM)<5 or VectorToTarget or bU or BrakeLanding or ll or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(ln)local kE=pitchPID:get()U=U+kE end end;if antigrav~=nil and(antigrav and not ExternalAGG and at<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ap=jP()return jH end;function script.onStart()local lo={}local lp={}local lq=false;local function lr()local function ls(lt)local lu=dbHud_1.hasKey;for cX,cY in pairs(lt)do if lu(cY)then local cG=f(dbHud_1.getStringValue(cY))if cG~=nil then _G[cY]=cG;lq=true end end end end;if dbHud_1 then if not useTheseSettings then ls(c4())coroutine.yield()ls(b)else ls(b)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;lq=false end;coroutine.yield()if lq then a2="Loaded Saved Variables"aI=ResolutionX;aJ=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bb=autoRollPreference;bi=AtmoSpeedLimit;aA=[[rgb(]]..d(H+0.5)..","..d(J+0.5)..","..d(I+0.5)..[[)]]aB=[[rgb(]]..d(H*0.9+0.5)..","..d(J*0.9+0.5)..","..d(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<D then LastMaxBrakeInAtmo=0 end;LastStartTime=D;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=at end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=aw end;VectorStatus="Proceeding to Waypoint"end;local function lv()local function lw(lx,ly)if lx>ly then ly=lx end;local lz,lA=0,0;if ContainerOptimization>0 then lz=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then lA=FuelTankOptimization*0.05 end;ly=ly*(1-(lz+lA))return ly end;local lB=core.getElementNameById;local lC=fuelX~=0 and fuelY~=0;for cX in pairs(au)do local type=core.getElementTypeById(au[cX])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(au[cX])),'^.*vertical.*$')then bH=true end end;if n(type,'^.*Space Engine$')then bw=true;if n(tostring(core.getElementTagsById(au[cX])),'^.*vertical.*$')then local lD=core.getElementRotationById(au[cX])if lD[4]<0 then if o(-lD[4],0.1)==0.5 then bu=true end else if o(lD[4],0.1)==0.5 then bv=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local lE=h(au[cX])if lE>10000 then F=128;G=110 elseif lE>1000 then F=64;G=55 elseif lE>150 then F=32;G=27 end end;aN=aN+h(au[cX])if lC and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local lE=h(au[cX])local lF=k(au[cX])local lx=0;local fT=p()if type=="Atmospheric Fuel Tank"then local ly=400;local lG=35.03;if lE>10000 then ly=51200;lG=5480 elseif lE>1300 then ly=6400;lG=988.67 elseif lE>150 then ly=1600;lG=182.67 end;lx=lF-lG;if fuelTankHandlingAtmo>0 then ly=ly+ly*fuelTankHandlingAtmo*0.2 end;ly=lw(lx,ly)aK[#aK+1]={au[cX],lB(au[cX]),ly,lG,lx,fT}end;if type=="Rocket Fuel Tank"then local ly=320;local lG=173.42;if lE>65000 then ly=40000;lG=25740 elseif lE>6000 then ly=5120;lG=4720 elseif lE>700 then ly=640;lG=886.72 end;lx=lF-lG;if fuelTankHandlingRocket>0 then ly=ly+ly*fuelTankHandlingRocket*0.1 end;ly=lw(lx,ly)aM[#aM+1]={au[cX],lB(au[cX]),ly,lG,lx,fT}end;if type=="Space Fuel Tank"then local ly=2400;local lG=182.67;if lE>10000 then ly=76800;lG=5480 elseif lE>1300 then ly=9600;lG=988.67 end;lx=lF-lG;if fuelTankHandlingSpace>0 then ly=ly+ly*fuelTankHandlingSpace*0.2 end;ly=lw(lx,ly)aL[#aL+1]={au[cX],lB(au[cX]),ly,lG,lx,fT}end end end;if not bH then VertTakeOff,VertTakeOffEngine=false,false end end;local function lH()if gyro~=nil then ay=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(ar or not ar and at<10000)then for _,cY in pairs(door)do cY.toggle()end end;if switch then for _,cY in pairs(switch)do cY.toggle()end end;if forcefield and(ar or not ar==0 and at<10000)then for _,cY in pairs(forcefield)do cY.toggle()end end;if antigrav then bI=antigrav.getState()==1;if bI and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ap~=-1 or not ar and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(bc)if ar and ap~=-1 then b4=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ar end;local function lI(lJ,lK,lL,lM,x,y,lN,lO,lP,lQ)local lR={enableName=lJ,disableName=lK,width=lL,height=lM,x=x,y=y,toggleVar=lN,toggleFunction=lO,drawCondition=lP,hovered=false}if lQ then table.insert(lp,lR)else table.insert(lo,lR)end;return lR end;local function lS(lT)if not bN then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif lT=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif lT=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif lT=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bO=c4(lT)showHud=false else bO={}showHud=true end end;local function lU()bN=not bN;if bN then aH=lp;a2="Hold SHIFT to see Settings"bP=showHud else aH=lo;a2="Hold SHIFT to see Control Buttons"lS()showHud=bP end end;local function lV(cY)_G[cY]=not _G[cY]if _G[cY]then a2=cY.." set to true"else a2=cY.." set to false"end;if cY=="showHud"then bP=_G[cY]elseif cY=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault elseif cY=="Cockpit"then system.showScreen(0)dbHud_1.setStringValue("content","")end end;local function lW()local lX=50;local lY=340;local x=500;local y=aJ/2-400;local lZ=0;for cX,cY in pairs(c4("boolean"))do if type(_G[cY])=="boolean"then lI(cY,cY,lY,lX,x,y,function()return _G[cY]end,function()lV(cY)end,function()return true end,true)y=y+lX+20;if lZ==9 then x=x+lY+20;y=aJ/2-400;lZ=0 else lZ=lZ+1 end end end;lI("Control View","Control View",lY,lX,10,aJ/2-500,function()return true end,lU,function()return true end,true)lI("View Handling Settings",'Hide Handling Settings',lY,lX,10,aJ/2-(500-lX),function()return showHandlingVariables end,function()lS("handling")end,function()return true end,true)lI("View Hud Settings",'Hide Hud Settings',lY,lX,10,aJ/2-(500-lX*2),function()return showHudVariables end,function()lS("hud")end,function()return true end,true)lI("View Physics Settings",'Hide Physics Settings',lY,lX,10,aJ/2-(500-lX*3),function()return showPhysicsVariables end,function()lS("physics")end,function()return true end,true)end;local function l_()local function m0()if dbHud_1 then local position=bF;local fM=planet.name..". "..#SavedLocations;if radar_1 then local dH,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dH~=nil and dH~=""then fM=fM.." "..radar_1.getConstructName(dH)end end;local cx={}cx={position=position,name=fM,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cx;table.insert(aY[0],cx)b7.UpdateAtlasLocationsList()a2="Location saved as "..fM else a2="Databank must be installed to save locations"end end;local function m1()TurnBurn=not TurnBurn end;local function m2(m3)if m3==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function m4()m2(1)end;local function m5()local cw=-1;cw=b7.findAtlasIndex(aY[0])if cw>-1 then table.remove(aY[0],cw)end;cw=-1;cw=b7.findAtlasIndex(SavedLocations)if cw~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cw)end;b7.adjustAutopilotTargetIndex()b7.UpdateAtlasLocationsList()end;local function m6()local fM=AutopilotTargetName;if fM==nil then local hk=cm((bF-CustomTarget.position):len())fM=CustomTarget.name.." "..hk end;if fM==nil then fM="None"end;return"Engage Autopilot: "..fM end;local function m7()local fM=AutopilotTargetName;if fM==nil then fM=CustomTarget.name end;if fM==nil then fM="None"end;return"Disable Autopilot: "..fM end;local function m8()if safeMass>0 then a2="Safe Mass set to "..B(aw,2).." kg"else a2="Intruder Detection reset\nSafe Mass set to "..B(aw,2).." kg"ai=5;bG=0 end;safeMass=aw end;local function m9()if l()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)bZ("folOn","F")else bZ("folOff","F")BrakeIsOn=true;bb=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local lX=50;local lY=260;local ma=lI("Enable Brake Toggle","Disable Brake Toggle",lY,lX,aI/2-lY/2,aJ/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)lI("Align Prograde","Disable Prograde",lY,lX,aI/2-lY/2-50-ma.width,aJ/2-lX+380,function()return ProgradeIsOn end,m4)lI("Align Retrograde","Disable Retrograde",lY,lX,aI/2-lY/2+ma.width+50,aJ/2-lX+380,function()return RetrogradeIsOn end,m2,function()return as==0 end)local mb=lI(m6,m7,600,60,aI/2-600/2,aJ/2-60/2-400,function()return Autopilot end,cs)lI("Save Position","Save Position",200,mb.height,mb.x+mb.width+30,mb.y,function()return false end,m0,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)lI("Update Position","Update Position",200,mb.height,mb.x+mb.width+30,mb.y,function()return false end,cu,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lI("Clear Position","Clear Position",200,mb.height,mb.x-200-30,mb.y,function()return true end,m5,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)lX=60;lY=300;local x=10;local y=aJ/2-500;lI("Show Help","Hide Help",lY,lX,x,y,function()return showHelp end,function()showHelp=not showHelp end)y=y+lX+20;lI("View Settings","View Settings",lY,lX,x,y,function()return true end,lU)local y=aJ/2-300;lI("Enable Turn and Burn","Disable Turn and Burn",lY,lX,x,y,function()return TurnBurn end,m1)lI("Horizontal Takeoff Mode","Vertical Takeoff Mode",lY,lX,x+lY+20,y,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bH end)y=y+lX+20;lI("Show Orbit Display","Hide Orbit Display",lY,lX,x,y,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)lI("Engage Orbiting","Cancel Orbiting",lY,lX,x+lY+20,y,function()return IntoOrbit end,cq,function()return as==0 and bW end)y=y+lX+20;lI("Glide Re-Entry","Cancel Glide Re-Entry",lY,lX,x,y,function()return Reentry end,function()am=true;m4()end,function()return planet.hasAtmosphere and not ar end)lI("Parachute Re-Entry","Cancel Parachute Re-Entry",lY,lX,x+lY+20,y,function()return Reentry end,cM,function()return planet.hasAtmosphere and not ar end)y=y+lX+20;lI("Engage Follow Mode","Disable Follow Mode",lY,lX,x,y,function()return a0 end,m9,function()return l()==1 end)lI("Enable Repair Arrows","Disable Repair Arrows",lY,lX,x+lY+20,y,function()return aO end,function()aO=not aO;if aO then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return l()==1 end)y=y+lX+20;if not ExternalAGG then lI("Enable AGG","Disable AGG",lY,lX,x,y,function()return bI end,cN,function()return antigrav~=nil end)end;lI("Reset Intruder Alert","Set Safe Mass",lY,lX,x+lY+20,y,function()return safeMass>0 end,m8,function()return IntruderAlertSystem end)y=y+lX+20;lI(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,lY*2,lX,x,y,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)y=y+lX+20;lI(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,lY*2,lX,x,y,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})lr()coroutine.yield()lv()coroutine.yield()b8=jG()lH()lW()l_()aH=lo;coroutine.yield()aY=cZ()b1=c_()b2=b1(cZ())b3=eo()b5=eT()b6=fg()b7=jy()b8=jG()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bZ("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(as>0 or as==0 and at<10000)then for _,cY in pairs(door)do cY.toggle()end end;if switch then for _,cY in pairs(switch)do cY.toggle()end end;if forcefield and(as>0 or as==0 and at<10000)then for _,cY in pairs(forcefield)do cY.toggle()end end;safeMass=aw;cT()if button then button.activate()end;if SetWaypointOnExit then b8.showWayPoint(planet,bF)end;bZ("stop","SU")end;function script.onTick(mc)local md=nil;if mc=="contact"then if not contactTimer then contactTimer=0 end;if D>contactTimer+10 then a2="Radar Contact"bZ("rdrCon","RC")contactTimer=D end;unit.stopTimer("contact")elseif mc=="tenthSecond"then local function me()local mf=system.createData;local mg=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mg(panelInterplanetary,"value")interplanetaryHeaderText=mf('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mg(panelInterplanetary,"value")widgetDistanceText=mf('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=mg(panelInterplanetary,"value")widgetTravelTimeText=mf('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mg(panelInterplanetary,"value")widgetMaxMassText=mf('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mg(panelInterplanetary,"value")widgetTargetOrbitText=mf('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mg(panelInterplanetary,"value")widgetCurBrakeDistanceText=mf('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mg(panelInterplanetary,"value")widgetCurBrakeTimeText=mf('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mg(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mf('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mg(panelInterplanetary,"value")widgetMaxBrakeTimeText=mf('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mg(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mf('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ar then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mh()s(panelInterplanetary)panelInterplanetary=nil end;local function mi()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bF):len()else AutopilotDistance=(CustomTarget.position-bF):len()end end;local eR=bC;local kG=unit.getThrottle()/100;if AtmoSpeedAssist then kG=K end;local mj,mk=b3.computeDistanceAndTime(bC,MaxGameVelocity,aw,a:maxForceForward()*kG,warmup,0)local a8,a9;if not TurnBurn then a8,a9=b8.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=b8.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ml;if not TurnBurn and eR>0 then _,ml=b8.GetAutopilotBrakeDistanceAndTime(eR)else _,ml=b8.GetAutopilotTBBrakeDistanceAndTime(eR)end;local mm=0;local mn=0;if AutopilotCruising or not Autopilot and eR>5 then mn=b3.computeTravelTime(eR,0,AutopilotDistance)elseif a8+mj<AutopilotDistance then mm=AutopilotDistance-(a8+mj)mn=b3.computeTravelTime(8333.0556,0,mm)else local mo=(AutopilotDistance-a8)/mj;mj=AutopilotDistance-a8;mk=mk*mo end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return mn elseif AutopilotBraking then return ml elseif AutopilotCruising then return mn+ml else return mk+a9+mn end end;local function mp(io,mq)if io==nil then io=core.g()end;io=B(io,5)if mq~=nil and mq or(md==nil or md~=io)then local eU=core.getVelocity()local eR=vec3(eU):len()local mr=f(unit.getData()).maxBrake;if mr~=nil and mr>0 and ar then mr=mr/q(eR/100,0.1,1)mr=mr/as;if as>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+mr)/2 else LastMaxBrakeInAtmo=mr end end end;if mr~=nil and mr>0 then LastMaxBrake=mr end;md=io end end;mp(nil,true)if as>0 and not WasInAtmo then if not bK and AtmoSpeedAssist and(AltitudeHold or Reentry)then cf(1)O=false end end;if bJ~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bJ then ci(bJ,TRUE)else bJ=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then me()end;if AutopilotTargetName~=nil then local ms=CustomTarget~=nil;local mt=LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mi()if ms and not Autopilot then aj=(bF-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bF):len()end;if not TurnBurn then a8,a9=b8.GetAutopilotBrakeDistanceAndTime(bC)aa,ab=b8.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=b8.GetAutopilotTBBrakeDistanceAndTime(bC)aa,ab=b8.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hk=cm(aj)t(widgetDistanceText,'{"label": "distance", "value": "'..hk..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cO(travelTime)..'", "unit":""}')hk=cm(a8)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hk..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cO(a9)..'", "unit":""}')hk=cm(aa)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hk..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cO(ab)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",mt/1000)..'", "unit":" Tons"}')hk=cm(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..hk..'"}')if as>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if as==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mh()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif mc=="oneSecond"then local function mu(fw)local mv=0;aF=""local mw=aN;local mx=0;local my=0;local mz=0;local fV=0;local fW=""local mA=core.getElementHitPointsById;for cX in pairs(au)do local lE=0;local mB=0;mB=h(au[cX])lE=mA(au[cX])mx=mx+lE;if lE<mB then if lE==0 then mz=mz+1 else my=my+1 end;if aO and#aC==0 then position=vec3(core.getElementPositionById(au[cX]))local x=position.x-F;local y=position.y-F;local iP=position.z-F;table.insert(aC,core.spawnArrowSticker(x,y,iP+1,"down"))table.insert(aC,core.spawnArrowSticker(x,y,iP+1,"down"))core.rotateSticker(aC[2],0,0,90)table.insert(aC,core.spawnArrowSticker(x+1,y,iP,"north"))table.insert(aC,core.spawnArrowSticker(x+1,y,iP,"north"))core.rotateSticker(aC[4],90,90,0)table.insert(aC,core.spawnArrowSticker(x-1,y,iP,"south"))table.insert(aC,core.spawnArrowSticker(x-1,y,iP,"south"))core.rotateSticker(aC[6],90,-90,0)table.insert(aC,core.spawnArrowSticker(x,y-1,iP,"east"))table.insert(aC,core.spawnArrowSticker(x,y-1,iP,"east"))core.rotateSticker(aC[8],90,0,90)table.insert(aC,core.spawnArrowSticker(x,y+1,iP,"west"))table.insert(aC,core.spawnArrowSticker(x,y+1,iP,"west"))core.rotateSticker(aC[10],-90,0,90)table.insert(aC,au[cX])end elseif aO and#aC>0 and aC[11]==au[cX]then for fO in pairs(aC)do core.deleteSticker(aC[fO])end;aC={}end end;mv=d(mx/mw*100)if mv<100 then fw[#fw+1]=cb(0,0,"","pbright txt")fV=d(mv*2.55)fW=e("rgb(%d,%d,%d)",255-fV,fV,0)if mv<100 then fw[#fw+1]=cb("50%",1035,"Elemental Integrity: "..mv.."%","txtbig txtmid","fill:"..fW)if mz>0 then fw[#fw+1]=cb("50%",1055,"Disabled Modules: "..mz.." Damaged Modules: "..my,"txtbig txtmid","fill:"..fW)elseif my>0 then fw[#fw+1]=cb("50%",1055,"Damaged Modules: "..my,"txtbig txtmid","fill:"..fW)end end end end;local function mC()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function mD()local fT=p()local h8=bC;local mE=fT-av;if h8>1.38889 then h8=h8/1000;local mF=h8*(fT-av)TotalDistanceTravelled=TotalDistanceTravelled+mF;ad=ad+mF end;ae=ae+mE;TotalFlightTime=TotalFlightTime+mE;av=fT end;local function mG()if safeMass>0 then if aw>safeMass+50 then bG=d(aw-safeMass)safeMass=-1 elseif aw<safeMass then safeMass=aw end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;if IntruderAlertSystem then mG()end;mD()b6.UpdatePipe()mC()local fw={}b6.ExtraData(fw)if ShowOdometer then fw=b6.DrawOdometer(fw,ad,TotalDistanceTravelled,ae)end;if ShouldCheckDamage then mu(fw)end;ak=table.concat(fw,"")collectgarbage("collect")elseif mc=="fiveSecond"then if not UseSatNav then return end;aq=dbHud_1.getStringValue("SPBAutopilotTargetName")if aq~=nil and aq~=""and aq~="SatNavNotChanged"then local cG=f(dbHud_1.getStringValue("SavedLocations"))if cG~=nil then _G["SavedLocations"]=cG;local cw=-1;local cx;for cX,cY in pairs(SavedLocations)do if cY.name and cY.name=="SatNav Location"then cw=cX;break end end;if cw~=-1 then cx=SavedLocations[cw]cw=-1;for cX,cY in pairs(aY[0])do if cY.name and cY.name=="SatNav Location"then cw=cX;break end end;if cw>-1 then aY[0][cw]=cx end;b7.UpdateAtlasLocationsList()a2=cx.name.." position updated"end end;for i=1,#bQ do if bQ[i].name==aq then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bQ[i].name)b7.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mc=="msgTick"then local fw={}b6.DisplayMessage(fw,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif mc=="animateTick"then ba=true;b9=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif mc=="hudTick"then local function mH(fw)local mI=d(q(aj/(aI/4)*255,0,255))fw[#fw+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,d(H+0.5)+mI,d(J+0.5)-mI,d(I+0.5)-mI)end;local function mJ()for _,cY in pairs(aH)do if cY.hovered then if not cY.drawCondition or cY.drawCondition()then cY.toggleFunction()end;cY.hovered=false end end end;local function mK()local function mL(mM,mN,x,y,lL,lM)if mM>x and mM<x+lL and mN>y and mN<y+lM then return true else return false end end;local x=ag+aI/2;local y=ah+aJ/2;for _,cY in pairs(aH)do cY.hovered=mL(x,y,cY.x,cY.y,cY.width,cY.height)end end;local function mO(fw)local function mP(fw,mQ,hover,x,y,eK,mR,mS,mT,mU,mV)if type(mU)=="function"then mU=mU()end;if type(mV)=="function"then mV=mV()end;fw[#fw+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",x,y,eK,mR)if mQ then fw[#fw+1]=e("%s'",mS)else fw[#fw+1]=mT end;if hover then fw[#fw+1]=" style='stroke:white; stroke-width:2'"else fw[#fw+1]=" style='stroke:black; stroke-width:1'"end;fw[#fw+1]="></rect>"fw[#fw+1]=e("<text x='%f' y='%f' font-size='24' fill='",x+eK/2,y+mR/2+5)if mQ then fw[#fw+1]="black"else fw[#fw+1]="white"end;fw[#fw+1]="' text-anchor='middle' font-family='Montserrat'>"if mQ then fw[#fw+1]=e("%s</text>",mU)else fw[#fw+1]=e("%s</text>",mV)end end;local mW="rgb(50,50,50)'"local mX="rgb(210,200,200)"local mY=mP;for _,cY in pairs(aH)do local lK=cY.disableName;local lJ=cY.enableName;if type(lK)=="function"then lK=lK()end;if type(lJ)=="function"then lJ=lJ()end;if not cY.drawCondition or cY.drawCondition()then mY(fw,cY.toggleVar(),cY.hovered,cY.x,cY.y,cY.width,cY.height,mX,mW,lK,lJ)end end end;local mZ=B(ResolutionX/2,0)local m_=B(ResolutionY/2,0)local fw={}b6.HUDPrologue(fw)if showHud then b6.UpdateHud(fw)else if AlwaysVSpd then b6.DrawVerticalSpeed(fw,at)end;b6.DisplayOrbitScreen(fw)b6.DrawWarnings(fw)end;if bN and bO~={}then b6.DrawSettings(fw)end;b6.HUDEpilogue(fw)fw[#fw+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aI,aJ)if a2~="empty"then b6.DisplayMessage(fw,a2)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b6.DrawDeadZone(fw)end end;if w()==0 then if l()==1 and a1 then if not AltIsOn then mK()mO(fw)end;if not b9 and not ba then local n0=table.concat(fw,"")fw={}fw[#fw+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aI,aJ)fw[#fw+1]=n0;fw[#fw+1]="</body>"b9=true;fw[#fw+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fw,"")system.setScreen(content)elseif ba then local n0=table.concat(fw,"")fw={}fw[#fw+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aI,aJ)fw[#fw+1]=n0;fw[#fw+1]="</body>"end;if not b9 then fw[#fw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],mZ,m_,ag,ah)end else mJ()end else if not a1 and l()==0 then mJ()if aj>DeadZone then if DisplayDeadZone then mH(fw)end end elseif not AltIsOn or AltIsOn and a1 then mK()mO(fw)end;fw[#fw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],mZ,m_,ag,ah)end;fw[#fw+1]=[[</svg></body>]]content=table.concat(fw,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif mc=="apTick"then b8.APTick()b6.UpdateRadar()end end;function script.onFlush()local function n1(n2,kN)local n3=vec3()local n4=vec3()if n2==axisCommandId.longitudinal then n3=vec3(core.getConstructOrientationForward())n4=bz elseif n2==axisCommandId.vertical then n3=vec3(core.getConstructOrientationUp())n4=by elseif n2==axisCommandId.lateral then n3=vec3(core.getConstructOrientationRight())n4=bA else return vec3()end;local n5=vec3(core.getWorldGravity())local n6=n5:dot(n4)local n7=vec3(core.getWorldAirFrictionAcceleration())local n8=n7:dot(n4)local n9=vec3(core.getVelocity())local na=n9:dot(n3)local nb=kN*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nb-na)local nc=targetSpeedPID2:get()local nd=(nc-n8-n6)*n4;return nd end;local function ne(n2,kN)local n3=vec3()local n4=vec3()if n2==axisCommandId.longitudinal then n3=vec3(core.getConstructOrientationForward())n4=bz elseif n2==axisCommandId.vertical then n3=vec3(core.getConstructOrientationUp())n4=by elseif n2==axisCommandId.lateral then n3=vec3(core.getConstructOrientationRight())n4=bA else return vec3()end;local n5=vec3(core.getWorldGravity())local n6=n5:dot(n4)local n7=vec3(core.getWorldAirFrictionAcceleration())local n8=n7:dot(n4)local n9=vec3(core.getVelocity())local na=n9:dot(n3)local nb=kN*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nb-na)local nc=targetSpeedPID:get()local nd=(nc-n8-n6)*n4;return nd end;local function nf(ng,f_,jC)local nh=ng:cross(jC):normalize_inplace()local gM=math.acos(q(nh:dot(-f_),-1,1))*constants.rad2deg;if nh:cross(-f_):dot(jC)<0 then gM=-gM end;return gM end;if antigrav and not ExternalAGG then if not bI and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bK=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bK and O then cf(0)O=false elseif not bK and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local ni=q(T+U+system.getControlDeviceForwardInput(),-1,1)local nj=q(W+Z+system.getControlDeviceYawInput(),-1,1)local nk=q(X+V-system.getControlDeviceLeftRightInput(),-1,1)local nl=Y;bD=vec3(core.getWorldVertical())if bD==nil or bD:len()==0 then bD=(planet.center-bF):normalize()end;by=vec3(core.getConstructWorldOrientationUp())bz=vec3(core.getConstructWorldOrientationForward())bA=vec3(core.getConstructWorldOrientationRight())bB=vec3(core.getWorldVelocity())bF=vec3(core.getConstructWorldPos())aw=core.getConstructMass()bC=vec3(bB):len()bE=-bD:dot(bB)bM=getRoll(bD,bz,bA)local nm=bM/180*math.pi;local nn=math.cos(nm)local no=math.sin(nm)bL=nf(bD,bz,bA*nn+by*no)local np=bB:normalize()local nq=c(bM)local nr=utils.sign(bM)local ns=vec3(core.getWorldAngularVelocity())local nt=ni*pitchSpeedFactor*bA+nj*rollSpeedFactor*bz+nk*yawSpeedFactor*by;if bb==true and bD:len()>0.01 then local nu=c(bf-bM)if((ProgradeIsOn or Reentry or BrakeLanding or am or AltitudeHold or IntoOrbit)and nu>0 or as>0.0 and nu<autoRollRollThreshold and autoRollPreference)and nj==0 and c(bL)<85 then local nw=bf;local nx=autoRollFactor;if as==0 then nx=nx/4;bf=0;nw=0 end;if rollPID==nil then rollPID=pid.new(nx*0.01,0,nx*0.1)end;rollPID:inject(nw-bM)local ny=rollPID:get()nt=nt+ny*bz end end;if bD:len()>0.01 and as>0.0 then local nz=20.0;if turnAssist==true and nq>nz and ni==0 and nk==0 then local nA=turnAssistFactor*0.1;local nB=turnAssistFactor*0.025;local nC=(nq-nz)/(180-nz)*180;local nD=0;if nC<90 then nD=nC/90 elseif nC<180 then nD=(180-nC)/90 end;nD=nD*nD;local nE=-nr*nB*(1.0-nD)local nF=nA*nD;nt=nt+nF*bA+nE*by end end;local nG=1;local nH=0;local nI=1;if system.getMouseWheel()>0 then if AltIsOn then if as>0 or Reentry then bi=q(bi+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif ax then local nJ=K;K=B(q(K+speedChangeLarge/100,-1,1),2)if K>=0 and nJ<0 then K=0;ax=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if as>0 or Reentry then bi=q(bi-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif ax then local nJ=K;K=B(q(K-speedChangeLarge/100,-1,1),2)if K<=0 and nJ>0 then K=0;ax=false end end else ax=true end;L=0;if ar and AtmoSpeedAssist and bK then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bi/3.6-bB:dot(bz))local nK=throttlePID:get()N=q(nK,-1,1)if N<K and as>0.005 then M=true;r:setThrottleCommand(axisCommandId.longitudinal,q(N,0.01,1))else M=false;r:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-bi/3.6)local nL=q(brakePID:get(),0,1)if as>0 and bE<-80 or as>0.005 then L=nL end;if L>0 then if M and N==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else N=q(N,0.01,1)end;local nM=''local nN=vec3()local nO=n1(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",nO,nH)local nP='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then nP=nP..ExtraLongitudeTags end;local nQ=r:getAxisCommandType(axisCommandId.longitudinal)local nR=r:composeAxisAccelerationFromThrottle(nP,axisCommandId.longitudinal)local nS=ne(axisCommandId.lateral,LeftAmount*1000)nM=nM..' , '.."lateral airfoil , lateral ground "nN=nN+nS;if nN:len()>constants.epsilon then a:setEngineForceCommand(nM,nN,nH,'','','',nI)end;a:setEngineForceCommand(nP,nR,nG)local nT='thrust analog vertical fueled 'local nU='thrust analog lateral fueled 'if ExtraLateralTags~="none"then nU=nU..ExtraLateralTags end;if ExtraVerticalTags~="none"then nT=nT..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(nT,nO,nG)else a:setEngineForceCommand(nT,vec3(),nG)end;if LeftAmount~=0 then a:setEngineForceCommand(nU,nS,nG)else a:setEngineForceCommand(nU,vec3(),nG)end;if nl==0 then nl=L end;local nV=-nl*(brakeSpeedFactor*bB+brakeFlatFactor*np)a:setEngineForceCommand('brake',nV)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,K)end;local kN=unit.getAxisCommandValue(0)if not bK then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-kN/3.6)local nL=q(brakePID:get(),0,1)nl=q(nl+nL,0,1)end;local nV=-nl*(brakeSpeedFactor*bB+brakeFlatFactor*np)a:setEngineForceCommand('brake',nV)local nM=''local nN=vec3()local nW=false;local nP='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then nP=nP..ExtraLongitudeTags end;local nQ=r:getAxisCommandType(axisCommandId.longitudinal)if nQ==axisCommandType.byThrottle then local nR=r:composeAxisAccelerationFromThrottle(nP,axisCommandId.longitudinal)a:setEngineForceCommand(nP,nR,nG)elseif nQ==axisCommandType.byTargetSpeed then local nR=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)nM=nM..' , '..nP;nN=nN+nR;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then nW=true end end;local nU='thrust analog lateral 'if ExtraLateralTags~="none"then nU=nU..ExtraLateralTags end;local nX=r:getAxisCommandType(axisCommandId.lateral)if nX==axisCommandType.byThrottle then local nY=r:composeAxisAccelerationFromThrottle(nU,axisCommandId.lateral)a:setEngineForceCommand(nU,nY,nG)elseif nX==axisCommandType.byTargetSpeed then local nS=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)nM=nM..' , '..nU;nN=nN+nS end;local nT='thrust analog vertical 'if ExtraVerticalTags~="none"then nT=nT..ExtraVerticalTags end;local nZ=r:getAxisCommandType(axisCommandId.vertical)if nZ==axisCommandType.byThrottle then local nO=r:composeAxisAccelerationFromThrottle(nT,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(nT,nO,nG,'airfoil','ground','',nI)else a:setEngineForceCommand(nT,vec3(),nG)a:setEngineForceCommand('airfoil vertical',nO,nG,'airfoil','','',nI)a:setEngineForceCommand('ground vertical',nO,nG,'ground','','',nI)end elseif nZ==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),nG)end;local n_=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)nM=nM..' , '..nT;nN=nN+n_ end;if nN:len()>constants.epsilon then if Y~=0 or nW or c(np:dot(bz))<0.8 then nM=nM..', brake'end;a:setEngineForceCommand(nM,nN,nH,'','','',nI)end end;local o0=torqueFactor*(nt-ns)local o1=vec3(core.getWorldAirFrictionAngularAcceleration())o0=o0-o1;a:setEngineTorqueCommand('torque',o0,nG,'airfoil','','',nI)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local eR=vec3(core.getVelocity()):len()local o2=0.15;if not bK then local o3=r:getTargetSpeed(axisCommandId.longitudinal)if eR*3.6>o3*(1-o2)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eR*3.6<o3*(1-o2)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kG=unit.getThrottle()if AtmoSpeedAssist then kG=K*100 end;local kN=kG/100;if j==0 then kN=kN*MaxGameVelocity;if eR>=kN*(1-o2)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eR<kN*(1-o2)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kY=d(bi)kN=kN*kY/3.6;if eR>=kN*(1-o2)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eR<kN*(1-o2)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local jw=coroutine.status(beginSetup)if jw=="suspended"then local cg,jx=coroutine.resume(beginSetup)if jx then system.print("ERROR STARTUP: "..jx)end elseif jw=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not b9 and content~=LastContent then if not Cockpit then system.setScreen(content)else dbHud_1.setStringValue("content",content)end end;LastContent=content end end;function script.onActionStart(o4)local mult=1;local function o5(o6)local function o7(o8,o6)local o9={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-50,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oa=o8;for _,cY in ipairs(o9)do if o6 and oa>cY then o8=cY elseif o8<cY and not o6 then o8=cY;break end end;return o8 end;if o6 then mult=-1 end;if not ExternalAGG and bI then if a1 and o6 then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+mult*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+mult*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then br=o7(br,o6)else br=br+mult*a3 end;if br<planet.noAtmosphericDensityAltitude then br=planet.noAtmosphericDensityAltitude end else if a1 and ar then HoldAltitude=o7(HoldAltitude,o6)else HoldAltitude=HoldAltitude+mult*a3 end end else r:updateTargetGroundAltitudeFromActionStart(mult*1.0)end end;local function ob(o6)if o6 then mult=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=q(K+mult*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,mult*speedChangeLarge)end else if o6 then mult=1 else mult=nil end;b7.adjustAutopilotTargetIndex(mult)end end;local function oc(od)if not ar then a2="Flight Assist in Atmo only"return end;local d4=type(od)if bU==nil then if d4=="table"then if Autopilot or VectorToTarget then cs()end;bZ("180On","BR")elseif od==1 then bZ("bnkLft","BR")else bZ("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cr()if d4~="table"then od=od+1 end end;bU=od else bZ("180Off","BR")bU=nil end end;if o4=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cf(0)if vBooster or hover then if ar and ap==-1 then bZ("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bb=true;GearExtended=false else if S then bZ("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if ar then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then bZ("grOut","LG",1)a.control.extendLandingGears()end else if S then bZ("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif o4=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif o4=="forward"then T=T-1 elseif o4=="backward"then if AltIsOn then oc(-bB*5000)else T=T+1 end elseif o4=="left"then if AltIsOn then oc(1)else W=W-1 end elseif o4=="right"then if AltIsOn then oc(3)else W=W+1 end elseif o4=="yawright"then X=X-1 elseif o4=="yawleft"then X=X+1 elseif o4=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif o4=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif o4=="up"then af=af+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif o4=="down"then af=af-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif o4=="groundaltitudeup"then o5()elseif o4=="groundaltitudedown"then o5(true)elseif o4=="option1"then b7.adjustAutopilotTargetIndex()toggleView=false elseif o4=="option2"then b7.adjustAutopilotTargetIndex(1)toggleView=false elseif o4=="option3"then local function oe()aG=not aG;if not aG then bZ("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else bZ("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;oe()toggleView=false elseif o4=="option4"then bU=nil;cs()toggleView=false elseif o4=="option5"then function ToggleLockPitch()if LockPitch==nil then bZ("lkPOn","LP")if not a1 then LockPitch=bL else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else bZ("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()toggleView=false elseif o4=="option6"then cr()toggleView=false elseif o4=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end;toggleView=false elseif o4=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()bZ("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)bZ("gsOn","GS")end;toggleView=false elseif o4=="option9"then if gyro~=nil then gyro.toggle()ay=gyro.getState()==1;if ay then bZ("gyOn","GA")else bZ("gyOff","GA")end end;toggleView=false elseif o4=="lshift"then if AltIsOn then a1=true end;if w()==1 then a1=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then a1=true;ba=false;b9=false end elseif o4=="brake"then if BrakeToggleStatus then cz()elseif not BrakeIsOn then cz()else BrakeIsOn=true end elseif o4=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif o4=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif o4=="stopengines"then local function of()if D-E<1.5 then bZ("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bU=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;am=false;an=false;R=false;bb=autoRollPreference;VectorToTarget=false;TurnBurn=false;ay=false;LockPitch=nil;IntoOrbit=false end end;of()E=D;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then r:resetCommand(axisCommandId.longitudinal)cf(0)else cf(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if ar then ci(AtmoSpeedLimit)else ci(MaxGameVelocity*3.6)end end end elseif o4=="speedup"then ob()elseif o4=="speeddown"then ob(true)elseif o4=="antigravity"and not ExternalAGG then if antigrav~=nil then cN()end end end;function script.onActionStop(o4)local function og()if not ExternalAGG and bI then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if o4=="forward"then T=0 elseif o4=="backward"then T=0 elseif o4=="left"then if bU then if bU==2 then bU=-2 else bU=-1 end end;W=0 elseif o4=="right"then if bU then if bU==4 then bU=-2 else bU=-1 end end;W=0 elseif o4=="yawright"then X=0 elseif o4=="yawleft"then X=0 elseif o4=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif o4=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif o4=="up"then af=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif o4=="down"then af=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif o4=="groundaltitudeup"then og()toggleView=false elseif o4=="groundaltitudedown"then og()toggleView=false elseif o4=="lshift"then if w()==1 then ag=0;ah=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then ba=false;b9=false end;a1=false elseif o4=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cz()else BrakeIsOn=false end end elseif o4=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(o4)local function oh(o6)local mult=1;if o6 then mult=-1 end;if not ExternalAGG and bI then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+mult*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=q(a6*1.05,a4,500)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+mult*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then br=br+mult*a5;if br<planet.noAtmosphericDensityAltitude then br=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+mult*a5 end;a5=q(a5*1.05,a3,500)else r:updateTargetGroundAltitudeFromActionLoop(mult*1.0)end end;local function oi(o6)if o6 then mult=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=q(K+mult*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,mult*speedChangeSmall)end end end;if o4=="groundaltitudeup"then if not a1 then oh()end elseif o4=="groundaltitudedown"then if not a1 then oh(true)end elseif o4=="speedup"then oi()elseif o4=="speeddown"then oi(true)end end;function script.onInputText(cc)local function oj()for cX,cY in pairs(c4())do dbHud_1.setStringValue(cY,g(nil))end;for cX,cY in pairs(b)do if cY~="SavedLocations"then dbHud_1.setStringValue(cY,g(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ai=5 end;local function ok(fM,eV)local ol=false;local dc='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dp,dq,dx,dy,dz=n(eV,dc)for _,cY in pairs(b2[0])do if cY.name==fM then dy=math.rad(dy)dx=math.rad(dx)local planet=aY[A(dp)][A(dq)]local el=math.cos(dx)local om=vec3(el*math.cos(dy),el*math.sin(dy),math.sin(dx))return planet.center+(planet.radius+dz)*om end end;return fM.." not found"end;local function on(oo,planet,eV,gI)local function op(eV)local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dc='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dp,dq,dx,dy,dz=n(eV,dc)if dp=="0"and dq=="0"then return vec3(A(dx),A(dy),A(dz))end;dy=math.rad(dy)dx=math.rad(dx)local planet=aY[A(dp)][A(dq)]local el=math.cos(dx)local om=vec3(el*math.cos(dy),el*math.sin(dy),math.sin(dx))return planet.center+(planet.radius+dz)*om end;if dbHud_1 or gI then local cx={}local position=op(eV)if planet.name=="Space"then cx={position=position,name=oo,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cx={position=position,name=oo,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;if not gI then SavedLocations[#SavedLocations+1]=cx else for cX,cY in pairs(aY[0])do if cY.name and oo==cY.name then table.remove(aY[0],cX)end end end;table.insert(aY[0],cx)b7.UpdateAtlasLocationsList()else a2="Databank must be installed to save permanent locations"end end;local i;local oq,os=nil,nil;local ot="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cc," ")oq=cc;if i~=nil then oq=string.sub(cc,0,i-1)os=string.sub(cc,i+1)end;if oq=="/help"or oq=="/commands"then for iu in string.gmatch(ot,"([^\n]+)")do system.print(iu)end;return elseif oq=="/setname"then if os==nil or os==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cu(os)else a2="Select a saved target to rename first"end elseif oq=="/addlocation"or string.find(cc,"::pos")~=nil then local gI=false;local oo="0-Temp"if os==nil or os==""then os=oq;gI=true end;i=string.find(os,"::")if not gI then oo=string.sub(os,1,i-2)end;local eV=string.sub(os,i)local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dc='::pos{'..num..','..num..','..num..','..num..','..num..'}'local dp,dq,dx,dy,dz=n(eV,dc)local planet=aY[A(dp)][A(dq)]if planet.name=="Space"then local jc=vec3(A(dx),A(dy),A(dz))local du=sys:closestBody(jc)if(jc-du.center):len()<du.radius+du.noAtmosphericDensityAltitude then planet=du end end;on(oo,planet,eV,gI)a2="Added "..oo.." to saved locations,\nplanet "..planet.name.." at "..eV;ai=5 elseif oq=="/agg"then if os==nil or os==""then a2="Usage: /agg targetheight"return end;os=A(os)if os<1000 then os=1000 end;AntigravTargetAltitude=os;a2="AGG Target Height set to "..os elseif oq=="/G"then if os==nil or os==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if os=="dump"then for cX,cY in pairs(c4())do if type(_G[cY])=="boolean"then if _G[cY]==true then system.print(cY.." true")else system.print(cY.." false")end elseif _G[cY]==nil then system.print(cY.." nil")else system.print(cY.." ".._G[cY])end end;return end;i=string.find(os," ")local ou=string.sub(os,0,i-1)local ov=string.sub(os,i+1)for cX,cY in pairs(c4())do if cY==ou then a2="Variable "..ou.." changed to "..ov;local ow=type(_G[cY])if ow=="number"then ov=A(ov)elseif ow=="boolean"then if string.lower(ov)=="true"then ov=true else ov=false end end;_G[cY]=ov;return end end;a2="No such global variable: "..ou elseif oq=="/copydatabank"then if dbHud_2 then cT(true)else a2="Spare Databank required to copy databank"end elseif oq=="/iphWP"then if AutopilotTargetIndex>0 then system.print(b8.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dH)if radar_1 and not ar and not bR then unit.setTimer("contact",0.1)end end;function script.onLeave(dH)if radar_1 and CollisionSystem then if#bV>650 then dH=tostring(dH)bV[dH]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
