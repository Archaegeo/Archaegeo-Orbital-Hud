name: ArchHud - Archaegeo v1.512 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export:
        userControlScheme = "virtual joystick" --export:
        soundFolder = "archHUD" --export:
        freeLookToggle = true --export:
        BrakeToggleDefault = true --export:
        RemoteFreeze = false --export:
        RemoteHud = true --export:
        brightHud = false --export:
        VanillaRockets = false --export:
        InvertMouse = false --export:
        autoRollPreference = false --export:
        ExternalAGG = false --export:
        UseSatNav = false --export:
        ShouldCheckDamage = true --export:
        CalculateBrakeLandingSpeed = false --export:
        AtmoSpeedAssist = true --export:
        ForceAlignment = false --export:
        DisplayDeadZone = true --export:
        showHud = true --export: 
        ShowOdometer = true --export:
        hideHudOnToggleWidgets = true --export:
        ShiftShowsRemoteButtons = true --export:
        DisplayOrbit = true --export: 
        SetWaypointOnExit = false --export:
        AlwaysVSpd = false --export:
        BarFuelDisplay = true --export:
        showHelp = true --export:
        voices = true --export:
        alerts = true --export:
        CollisionSystem = true --export:
        AutoShieldToggle = true --export:
        PreventPvP = true --export:
        YawStallAngle = 35 --export:
        PitchStallAngle = 35 --export:
        brakeLandingRate = 30 --export:
        MaxPitch = 30 --export:
        ReEntryPitch = -30 --export:
        LockPitchTarget = 0 --export:
        AutopilotSpaceDistance = 5000 --export:
        TargetOrbitRadius = 1.2 --export:
        LowOrbitHeight = 2000 --export:
        AtmoSpeedLimit = 1050 --export:
        SpaceSpeedLimit = 30000 --export:
        AutoTakeoffAltitude = 1000 --export:
        TargetHoverHeight = 50 --export:
        LandingGearGroundHeight = 0 --export:
        ReEntryHeight = 100000 --export:
        MaxGameVelocity = 8333.00 --export:
        AutopilotInterplanetaryThrottle = 1.0 --export:
        warmup = 32 --export:
        fuelTankHandlingAtmo = 0 --export:
        fuelTankHandlingSpace = 0 --export:
        fuelTankHandlingRocket = 0 --export:
        ContainerOptimization = 0 --export:
        FuelTankOptimization = 0 --export:
        ResolutionX = 1920 --export:
        ResolutionY = 1080 --export:
        circleRad = 400 --export:
        SafeR = 130 --export:
        SafeG = 224 --export:
        SafeB = 255 --export:
        PvPR = 255 --export:
        PvPG = 0 --export:
        PvPB = 0 --export:
        centerX = 960 --export:
        centerY = 540 --export:
        throtPosX = 1300 --export:
        throtPosY = 540 --export:
        vSpdMeterX = 1525  --export:
        vSpdMeterY = 325 --export:
        altMeterX = 550  --export:
        altMeterY = 540 --export:
        fuelX = 30 --export:
        fuelY = 700 --export:
        shieldX = 1750 --export:
        shieldY = 250 --export:
        DeadZone = 50 --export:
        OrbitMapSize = 250 --export:
        OrbitMapX = 75 --export:
        OrbitMapY = 0 --export:
        soundVolume = 100 --export:
        speedChangeLarge = 5 --export:
        speedChangeSmall = 1 --export:
        MouseXSensitivity = 0.003 --export:
        MouseYSensitivity = 0.003 --export:
        autoRollFactor = 2 --export:
        rollSpeedFactor = 1.5 --export:
        autoRollRollThreshold = 180 --export:
        minRollVelocity = 150 --export:
        TrajectoryAlignmentStrength = 0.002 --export:
        torqueFactor = 2 --export:
        pitchSpeedFactor = 0.8 --export:
        yawSpeedFactor = 1 --export:
        brakeSpeedFactor = 3 --export:
        brakeFlatFactor = 1 --export:
        DampingMultiplier = 40 --export:
        apTickRate = 0.0166667 --export:
        hudTickRate = 0.0666667 --export:
        ExtraLongitudeTags = "none" --export:
        ExtraLateralTags = "none" --export:
        ExtraVerticalTags = "none" --export:
        local a=Navigator.new(system,core,unit)local b=require("atlas")script={}VERSION_NUMBER=1.512;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;iphCondition="All"stablized=true;UseExtra="Off"LastVersionUpdate=0.000;local c={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","iphCondition","stablized","UseExtra"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=a.control.isRemoteControlled;local n=math.atan;local o=string.match;local q=system.getTime;local vec3=vec3;local r=utils.clamp;local s=a.axisCommandManager;local t=system.destroyWidgetPanel;local u=system.updateData;local v=system.addDataToWidget;local w=system.lockView;local x=system.isViewLocked;local y=math.sqrt;local z=tonumber;local core=core;local function A(B,C)local D=10^(C or 0)return e(B*D+0.5)/D end;local E=q()local F=q()local G=13;local H=SafeR;local I=SafeB;local J=SafeG;local K=0;local L=0;local M=false;local N=0;local O=false;local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8=0;local a9=0;local aa=0;local ab=0;local ac=nil;local ad=0;local ae=0;local af=0;local ag=0;local ah=0;local ai=3;local aj=0;local ak=""local al=false;local am=false;local an=false;local ao=-1;local ap=""local aq=k()>0;local ar=k()local as=core.getAltitude()local at=core.getElementIdList()local au=q()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]local az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local aA={}local aB=0;local aC=0;local aD=""local aE=true;local aF={}local aG=ResolutionX;local aH=ResolutionY;local aI={}local aJ={}local aK={}local aL=0;local aM=false;local aN=nil;local aO=nil;local aP=nil;local aQ=nil;local aR=nil;local aS=nil;local aT=nil;local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=false;local a_=false;local b0=autoRollPreference;local b1=LandingGearGroundHeight;local b2=false;local b3=q()local b4=0;local b5=0;local b6=0;local b7=AtmoSpeedLimit;local b8=0;local b9=nil;local ba=0;local bb=0;local bc=false;local bd=false;local be={VectorToTarget=false}local bf=false;local bg=0;local bh=nil;local bi=false;local bj=false;local bk=false;local bl=false;local bm=0;local bn=vec3(core.getConstructWorldOrientationUp())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getVelocity())local br=vec3(core.getWorldVelocity())local bs=vec3(br):len()local bt=vec3(core.getWorldVertical())local bu=-bt:dot(br)local bv=vec3(core.getConstructWorldPos())local bw=0;local bx=false;local by=false;local bz=nil;local bA=true;local bB=0;local bC=0;local bD=false;local bE={}local bF=showHud;local bG={}local bH=false;local bI=50000;local bJ=""local bK=nil;local bL={}local bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local bN=false;local bO=nil;local bP={}local bQ="Atmo"local bR=false;local bS=0;function p(bT)system.print(E..": "..bT)end;local function bU(bV)local D=1;if bV then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn and aw then local bW=K;K=A(r(K+D*speedChangeLarge/100,-1,1),2)if K>=0 and bW<0 then K=0;aw=false end elseif AltIsOn then if ar>0 or Reentry then b7=r(b7+D*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=r(MaxGameVelocity+D*speedChangeLarge/3.6*100,0,8333.00)end else s:updateCommandFromActionStart(axisCommandId.longitudinal,D*speedChangeLarge)end else if Autopilot or VectorToTarget or am or IntoOrbit then bS=bS+1*D*-1;if bS>#bG then bS=1 end;if bS<1 then bS=#bG end else if not bV then D=1 else D=nil end;aW.adjustAutopilotTargetIndex(D)end end end;local function bX(bY)local bZ,b_,c0=aR:getPlanetarySystem(0):castIntersections(bv,bY,function(c1)if c1.noAtmosphericDensityAltitude>0 then return c1.radius+c1.noAtmosphericDensityAltitude else return c1.radius+c1.surfaceMaxAltitude*1.5 end end)local c2=b_;if c0~=nil and b_~=nil then c2=math.min(c0,b_)end;if c2~=nil then return bZ,c2 else return nil,nil end end;local function c3(c4,c5,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..c4 .."|"..c5 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..c4 .."|"..c5 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..c4 .."|"..c5 .."|"..soundVolume)end end;local function c6(c7,c8)for i=1,#c8 do c7[#c7+1]=c8[i]end;return c7 end;local function c9(ca)local cb={}local cc={"userControlScheme","soundFolder","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","AlwaysVSpd","BarFuelDisplay","showHelp","voices","alerts","CollisionSystem","AutoShieldToggle","PreventPvP"}local cd={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","ReEntryPitch","LockPitchTarget","AutopilotSpaceDistance","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local ce={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","shieldX","shieldY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY","soundVolume"}local cf={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not ca then c6(cb,cc)c6(cb,cd)c6(cb,ce)c6(cb,cf)return cb elseif ca=="boolean"then return cc elseif ca=="handling"then return cd elseif ca=="hud"then return ce elseif ca=="physics"then return cf end end;local function cg(ch,ci,cj,ck,cl)if ck==nil then ck=""end;if cl==nil then cl=""end;return f([[<text class="%s" x=%s y=%s style="%s">%s</text>]],ck,ch,ci,cl,cj)end;local function cm(cn,co)if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not co then a.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,cn)K=r(A(cn*100,0)/100,-1,1)bz=nil end;local function cp(cn,co)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not co then a.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,cn)bz=cn end;local function cq(cr,cs)if cr==0 then return d(cs)<1e-09 end;if cs==0 then return d(cr)<1e-09 end;return d(cr-cs)<math.max(d(cr),d(cs))*epsilon end;local function ct(aj,cu)local cv=aj>100000;if cu==nil then cu=1 end;if cv then return A(aj/1000/200,cu).."SU"elseif aj<1000 then return A(aj,cu).."M"else return A(aj/1000,cu).."KM"end end;local function cw()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;b0=true;af=0;if aq and ao==-1 then BrakeLanding=false;AltitudeHold=true;af=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)cp(e(b7))end else bi=false;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cx()bi=false;ba=nil;bb=nil;bm=0;if ar==0 then if IntoOrbit then c3("orOff","AP")IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false elseif bM then c3("orOn","AP")IntoOrbit=true;b0=true;if bh==nil then bh=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage auto-orbit, not near a planet"end else IntoOrbit=false;bc=false;bh=nil;b0=autoRollPreference;if AltitudeHold then AltitudeHold=false end;be.VectorToTarget=false;be.AutopilotAlign=false;bf=false end end;local function cy()if E-b5<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude;c3("11","EP")else if bM then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bg=HoldAltitude;bf=true;if not IntoOrbit then cx()end;bc=true end end;b5=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else b5=E end;if bM and ar==0 then bg=as;bf=true;bc=true;cx()if IntoOrbit then b5=E else b5=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;b0=true;LockPitch=nil;bi=false;if ao~=-1 and bs<20 then c3("lfs","LS")AutoTakeoff=true;if b5>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bx then cw()end else c3("altOn","AH")AutoTakeoff=false;if b5>-1 then if bM then HoldAltitude=as end end;if VertTakeOff then cw()end end;if am then HoldAltitude=100000 end else c3("altOff","AH")if IntoOrbit then cx()end;if VertTakeOff then cw()end;b0=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;b5=0 end end;local function cz(cA)if cA then am=false;Autopilot=false;AutopilotRealigned=false;P=false;HoldAltitude=as;TargetSet=false end;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;bK=nil;if not by then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then cw()end;if IntoOrbit then cx()end;b0=autoRollPreference;al=false;an=false;af=0 end;local function cB()local function cC(SpaceTarget)bN=false;VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cy()end end;VectorStatus="Proceeding to Waypoint"end;if E-b6<1.5 and ar>0 then if not bl then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;c3("orH","OH")end;b6=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else b6=E end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am and not IntoOrbit then if 0.5*a:maxForceForward()/core.g()<av then a2="WARNING: Heavy Loads may affect autopilot performance."ai=5 end;aW.UpdateAutopilotTarget()aX.showWayPoint(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then c3("apSpc","AP")if ar~=0 then am=true;cy()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then c3("vtt","AP")cC(SpaceTarget)end else c3("apOn","AP")if not(ac.name==planet.name and as<AutopilotTargetOrbit*1.5)then bi=false;Autopilot=true elseif not aq then if IntoOrbit then cx()end;bg=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bf=true;be.AutopilotAlign=true;be.VectorToTarget=true;bc=false;if not IntoOrbit then cx()end end end else c3("apP","AP")RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then am=true;cy()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(ac.name==planet.name and bM)and not IntoOrbit then WaypointSet=false;bi=false;bc=false;cx()else c3("apP","AP")Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else c3("apP","AP")am=true;cy()end else c3("apOff","AP")cz(1)end end;local function cD()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b0=autoRollPreference end;if BrakeIsOn then c3("bkOn","B",1)cz()else c3("bkOff","B",1)end end;local function cE()if Reentry then a2="Re-Entry cancelled"c3("reOff","RE")Reentry=false;b0=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ai=5 elseif not R then Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;b0=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..b7;c3("par","RE")else Reentry=true;AltitudeHold=true;b0=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude end;local cj=ct(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..b7 .." Target Altitude: "..cj;c3("glide","RE")cp(e(b7))end;AutoTakeoff=false end;local function cF()if antigrav and not ExternalAGG then if by then c3("aggOff","AG")antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;c3("aggOn","AG")antigrav.activate()antigrav.show()end end end;local function cG(cH)local cI=0;local cJ=0;local cK=0;if cH<60 then cH=e(cH)elseif cH<3600 then cI=e(cH/60)cH=e(cH%60)elseif cH<86400 then cJ=e(cH/3600)cI=e(cH%3600/60)else cK=e(cH/86400)cJ=e(cH%86400/3600)end;if cK>0 then return cK.."d "..cJ.."h "elseif cJ>0 then return cJ.."h "..cI.."m "elseif cI>0 then return cI.."m "..cH.."s"elseif cH>0 then return cH.."s"else return"0s"end end;local function cL(cM)local function cN(cO)for cP,cQ in pairs(cO)do dbHud_1.setStringValue(cQ,h(_G[cQ]))if cM and dbHud_2 then dbHud_2.setStringValue(cQ,h(_G[cQ]))end end end;if dbHud_1 then cN(c)cN(c9())system.print("Saved Variables to Datacore")if cM and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end;local function cR()local function cS(cT)return type(cT)=='number'end;local function cU(cT)return type(z(cT))=='number'end;local function cV(cW)return type(cW)=='table'end;local function cX(cY)return type(cY)=='string'end;local function cZ(cQ)return cV(cQ)and cS(cQ.x and cQ.y and cQ.z)end;local function c_(d0)return cV(d0)and cS(d0.latitude and d0.longitude and d0.altitude and d0.id and d0.systemId)end;local d1=math.pi/180;local d2=180/math.pi;local epsilon=1e-10;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d3='::pos{'..B..','..B..','..B..','..B..','..B..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function d4(cT)local d5=string.gsub(string.reverse(f('%.4f',cT)),'^0*%.?','')return d5==''and'0'or string.reverse(d5)end;local function d6(d7)if cZ(d7)then return f('{x=%.3f,y=%.3f,z=%.3f}',d7.x,d7.y,d7.z)end;if cV(d7)and not getmetatable(d7)then local d8={}local d9=next(d7)if type(d9)=='nil'or d9==1 then d8=d7 else for cP,cQ in pairs(d7)do local cn=d6(cQ)if type(cP)=='number'then table.insert(d8,f('[%s]=%s',cP,cn))else table.insert(d8,f('%s=%s',cP,cn))end end end;return f('{%s}',table.concat(d8,','))end;if cX(d7)then return f("'%s'",d7:gsub("'",[[\']]))end;return tostring(d7)end;local da={}da.__index=da;da.__tostring=function(d7,db)local dc={}for cP in pairs(d7)do table.insert(dc,cP)end;table.sort(dc)local d8={}for _,cP in ipairs(dc)do local cn=d6(d7[cP])if type(cP)=='number'then table.insert(d8,f('[%s]=%s',cP,cn))else table.insert(d8,f('%s=%s',cP,cn))end end;if db then return f('%s%s',db,table.concat(d8,',\n'..db))end;return f('{%s}',table.concat(d8,','))end;da.__eq=function(dd,de)return dd.systemId==de.systemId and dd.id==de.id and cq(dd.radius,de.radius)and cq(dd.center.x,de.center.x)and cq(dd.center.y,de.center.y)and cq(dd.center.z,de.center.z)and cq(dd.GM,de.GM)end;local function df(dg,dh,di,dj,dk)assert(cU(dg),'Argument 1 (systemId) must be a number:'..type(dg))assert(cU(dh),'Argument 2 (id) must be a number:'..type(dh))assert(cU(di),'Argument 3 (radius) must be a number:'..type(di))assert(cV(dj),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dj))assert(cU(dk),'Argument 5 (GM) must be a number:'..type(dk))return setmetatable({systemId=z(dg),id=z(dh),radius=z(di),center=vec3(dj),GM=z(dk)},da)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(p)return f('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,d4(p.latitude*d2),d4(p.longitude*d2),d4(p.altitude))end;MapPosition.__eq=function(dd,de)return dd.id==de.id and dd.systemId==de.systemId and cq(dd.latitude,de.latitude)and cq(dd.altitude,de.altitude)and(cq(dd.longitude,de.longitude)or cq(dd.latitude,math.pi/2)or cq(dd.latitude,-math.pi/2))end;local function dl(dm,dh,dn,dp,dq)local dg=dm;if cX(dm)and not dp and not dq and not dh and not dn then dg,dh,dn,dp,dq=o(dm,d3)assert(dg,'Argument 1 (position string) is malformed.')else assert(cU(dg),'Argument 1 (systemId) must be a number:'..type(dg))assert(cU(dh),'Argument 2 (id) must be a number:'..type(dh))assert(cU(dn),'Argument 3 (latitude) must be in degrees:'..type(dn))assert(cU(dp),'Argument 4 (longitude) must be in degrees:'..type(dp))assert(cU(dq),'Argument 5 (altitude) must be in meters:'..type(dq))end;dg=z(dg)dh=z(dh)dn=z(dn)dp=z(dp)dq=z(dq)if dh==0 then return setmetatable({latitude=dn,longitude=dp,altitude=dq,id=dh,systemId=dg},MapPosition)end;return setmetatable({latitude=d1*r(dn,-90,90),longitude=d1*(dp%360),altitude=dq,id=dh,systemId=dg},MapPosition)end;local dr={}dr.__index=dr;dr.__tostring=function(d7,db)local ds=db and db..'  'local dt={}local dc={}for cP in pairs(d7)do table.insert(dc,cP)end;table.sort(dc)for _,du in ipairs(dc)do bdy=d7[du]local dv=da.__tostring(bdy,ds)if db then table.insert(dt,f('[%s]={\n%s\n%s}',du,dv,db))else table.insert(dt,f('  [%s]=%s',du,dv))end end;if db then return f('\n%s%s%s',db,table.concat(dt,',\n'..db),db)end;return f('{\n%s\n}',table.concat(dt,',\n'))end;local function dw(dx)local b={}local pid;for _,cQ in pairs(dx)do local dh=cQ.planetarySystemId;if type(dh)~='number'then error('Invalid planetary system ID: '..tostring(dh))elseif pid and dh~=pid then error('Mistringmatch planetary system IDs: '..dh..' and '..pid)end;local dy=cQ.bodyId;if type(dy)~='number'then error('Invalid body ID: '..tostring(dy))elseif b[dy]then error('Duplicate body ID: '..tostring(dy))end;setmetatable(cQ.center,getmetatable(vec3.unit_x))b[dy]=setmetatable(cQ,da)pid=dh end;return setmetatable(b,dr)end;aQ={}local function dz(dx)return setmetatable({galaxyAtlas=dx or{}},aQ)end;aQ.__index=function(cW,i)if type(i)=='number'then local system=cW.galaxyAtlas[i]return dw(system)end;return rawget(aQ,i)end;aQ.__pairs=function(d7)return function(cW,cP)local dA,nv=next(cW,cP)return dA,nv and dw(nv)end,d7.galaxyAtlas,nil end;aQ.__tostring=function(d7)local dB={}for _,dC in pairs(d7 or{})do local dD=dC:getPlanetarySystemId()local dE=dr.__tostring(dC,'    ')table.insert(dB,f('  [%s]={%s\n  }',dD,dE))end;return f('{\n%s\n}\n',table.concat(dB,',\n'))end;aQ.BodyParameters=df;aQ.MapPosition=dl;aQ.PlanetarySystem=dw;function aQ.createBodyParameters(dg,dh,dF,dG,dH,dI,dJ)assert(cU(dg),'Argument 1 (systemId) must be a number:'..type(dg))assert(cU(dh),'Argument 2 (id) must be a number:'..type(dh))assert(cU(dF),'Argument 3 (surfaceArea) must be a number:'..type(dF))assert(cV(dG),'Argument 4 (aPosition) must be an array or vec3:'..type(dG))assert(cV(dH),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dH))assert(cU(dI),'Argument 6 (altitude) must be in meters:'..type(dI))assert(cU(dJ),'Argument 7 (gravityAtPosition) must be number:'..type(dJ))local di=y(dF/4/math.pi)local aj=di+dI;local dK=vec3(dG)+aj*vec3(dH)local dk=dJ*aj*aj;return df(dg,dh,di,dK,dk)end;aQ.isMapPosition=c_;function aQ:getPlanetarySystem(dm)if i==nil then i=0 end;if nv==nil then nv=0 end;local dg=dm;if c_(dm)then dg=dm.systemId end;if type(dg)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dr then system=dw(system)end;return system end end end;function dr:sizeCalculator(c1)return 1.05*c1.radius end;function dr:castIntersections(dL,dM,dN,dO,dP,dQ)local dR={}local dS=dP or self;for _,c1 in pairs(dS)do table.insert(dR,c1)end;if not dQ then table.sort(dR,function(dT,dU)return(dT.center-dL):len()<(dU.center-dL):len()end)end;local dV=dM:normalize()for _,c1 in ipairs(dR)do local dW=c1.center-dL;local di=self:sizeCalculator(c1)local dX=dW:dot(dV)local dY=dX^2-(dW:len2()-di^2)if dY>=0 then local dZ=y(dY)local b_=dX+dZ;local c0=dX-dZ;if c0>0 then return c1,b_,c0 elseif b_>0 then return c1,b_,nil end end end;return nil,nil,nil end;function dr:closestBody(d_)assert(type(d_)=='table','Invalid coordinates.')local e0,c1;local e1=vec3(d_)for _,e2 in pairs(self)do local e3=(e2.center-e1):len2()if(not c1 or e3<e0)and e2.name~="Space"then c1=e2;e0=e3 end end;return c1 end;function dr:convertToBodyIdAndWorldCoordinates(dm)local e4=dm;if cX(dm)then e4=dl(dm)end;if e4.id==0 then return 0,vec3(e4.latitude,e4.longitude,e4.altitude)end;local e2=self:getBodyParameters(e4)if e2 then return e4.id,e2:convertToWorldCoordinates(e4)end end;function dr:getBodyParameters(dm)local dh=dm;if c_(dm)then dh=dm.id end;assert(cU(dh),'Argument 1 (id) must be a number:'..type(dh))return self[dh]end;function dr:getPlanetarySystemId()local _,cQ=next(self)return cQ and cQ.systemId end;function da:convertToMapPosition(dj)assert(cV(dj),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dj))local e5=vec3(dj)if self.id==0 then return setmetatable({latitude=e5.x,longitude=e5.y,altitude=e5.z,id=0,systemId=self.systemId},MapPosition)end;local e6=e5-self.center;local aj=e6:len()local dq=aj-self.radius;local dn=0;local dp=0;if not cq(aj,0)then local e7=n(e6.y,e6.x)dp=e7>=0 and e7 or 2*math.pi+e7;dn=math.pi/2-math.acos(e6.z/aj)end;return setmetatable({latitude=dn,longitude=dp,altitude=dq,id=self.id,systemId=self.systemId},MapPosition)end;function da:convertToWorldCoordinates(dm)local e4=cX(dm)and dl(dm)or dm;if e4.id==0 then return vec3(e4.latitude,e4.longitude,e4.altitude)end;assert(c_(e4),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e4.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e4.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local e8=math.cos(e4.latitude)return self.center+(self.radius+e4.altitude)*vec3(e8*math.cos(e4.longitude),e8*math.sin(e4.longitude),math.sin(e4.latitude))end;function da:getAltitude(dj)return(vec3(dj)-self.center):len()-self.radius end;function da:getDistance(dj)return(vec3(dj)-self.center):len()end;function da:getGravity(dj)local e9=self.center-vec3(dj)local ea=e9:len2()return self.GM/ea*e9/y(ea)end;return setmetatable(aQ,{__call=function(_,...)return dz(...)end})end;local function eb()local aS={}local ec=30000000/3600;local ed=ec*ec;local ee=100;function aS.computeAccelerationTime(ef,eg,eh)local ei=ec*math.asin(ef/ec)return(ec*math.asin(eh/ec)-ei)/eg end;function aS.computeDistanceAndTime(ef,eh,ej,ek,el,em)el=el or 0;em=em or 0;local en=ef<=eh;local eo=ek*(en and 1 or-1)/ej;local ep=-em/ej;local eq=eo+ep;if en and eq<=0 or not en and eq>=0 then return-1,-1 end;local er,es=0,0;if eo~=0 and el>0 then local ei=math.asin(ef/ec)local et=math.pi*(eo/2+ep)local eu=eo*el;local ev=ec*math.pi;local cQ=function(cW)local ew=(et*cW-eu*math.sin(math.pi*cW/2/el)+ev*ei)/ev;local ex=math.tan(ew)return ec*ex/y(ex*ex+1)end;local ey=en and function(cY)return cY>=eh end or function(cY)return cY<=eh end;es=2*el;if ey(cQ(es))then local ez=0;while d(es-ez)>0.5 do local cW=(es+ez)/2;if ey(cQ(cW))then es=cW else ez=cW end end end;local eA=ef;local eB=es/ee;for eC=1,ee do local eD=cQ(eC*eB)er=er+(eD+eA)*eB/2;eA=eD end;if es<2*el then return er,es end;ef=eA end;local ei=ec*math.asin(ef/ec)local E=(ec*math.asin(eh/ec)-ei)/eq;local eE=ed*math.cos(ei/ec)/eq;local aj=eE-ed*math.cos((eq*E+ei)/ec)/eq;return aj+er,E+es end;function aS.computeTravelTime(ef,eg,aj)if aj==0 then return 0 end;if eg>0 then local ei=ec*math.asin(ef/ec)local eE=ed*math.cos(ei/ec)/eg;return(ec*math.acos(eg*(eE-aj)/ed)-ei)/eg end;if ef==0 then return-1 end;assert(ef>0,'Acceleration and initial speed are both zero.')return aj/ef end;return aS end;local function eF()local vec3=require('cpml.vec3')local cR=cR()local function cX(cY)return type(cY)=='string'end;local function cV(cW)return type(cW)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dq)assert(self.body)local aj=dq+self.body.radius;if not cq(aj,0)then local orbit=y(self.body.GM/aj)return y(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dm,eG)assert(self.body)assert(cV(dm)or cX(dm))assert(cV(eG))local eH=(cX(dm)or cR.isMapPosition(dm))and self.body:convertToWorldCoordinates(dm)or vec3(dm)local cQ=vec3(eG)local eI=eH-self.body.center;local eJ=cQ:len2()local eK=eI:len()local eL=self.body.GM;local eM=((eJ-eL/eK)*eI-eI:dot(cQ)*cQ)/eL;local cr=eL/(2*eL/eK-eJ)local eN=eM:len()local dV=eM:normalize()local eO=cr*(1-eN)local eP=cr*(1+eN)local eQ=eO*dV+self.body.center;local eR=eN<=1 and-eP*dV+self.body.center or nil;local eS=y(cr*eL*(1-eN*eN))local eT=eR and 2*math.pi*y(cr^3/eL)local eU=math.acos(eM:dot(eI)/(eN*eK))if eI:dot(cQ)<0 then eU=-(eU-2*math.pi)end;local eV=math.acos((math.cos(eU)+eN)/(1+eN*math.cos(eU)))local eW=eV;if eW<0 then eW=eW+2*math.pi end;local eX=eW-eN*math.sin(eW)local eY=0;local eZ=0;local e_=0;if eT~=nil then eY=eX/(2*math.pi/eT)eZ=eT-eY;e_=eZ+eT/2;if eU-math.pi>0 then eZ=eY;e_=eZ+eT/2 end;if e_>eT then e_=e_-eT end end;return{periapsis={position=eQ,speed=eS/eO,circularOrbitSpeed=y(eL/eO),altitude=eO-self.body.radius},apoapsis=eR and{position=eR,speed=eS/eP,circularOrbitSpeed=y(eL/eP),altitude=eP-self.body.radius},currentVelocity=cQ,currentPosition=eH,eccentricity=eN,period=eT,eccentricAnomaly=eV,meanAnomaly=eX,timeToPeriapsis=eZ,timeToApoapsis=e_}end;local function f0(f1)local e2=cR.BodyParameters(f1.systemId,f1.id,f1.radius,f1.center,f1.GM)return setmetatable({body=e2},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return f0(...)end})end;local function f2()local f3={}local f4={}local f5={XS=13,S=27,M=55,L=110,XL=221}local f6={}local f7;local f8;local f9;local fa;local fb;local function fc()local function fd(fe,ff,fg,fh,fi,fj,fk,fl)ff,fh,fj,fl=vec3(ff),vec3(fh),vec3(fj),vec3(fl)local fm,fn,fo=fe*fe,fg*fg,fi*fi;local eJ=fh-ff;local fp=eJ:normalize()local fq=eJ:len()local fr=fj-ff;local fs=(fr-fr:project_on(fp)):normalize()local ft,fu=fr:dot(fp),fr:dot(fs)local fv=ft*ft+fu*fu;local fw=fp:cross(fs)local ch=(fm-fn+fq*fq)/(2*fq)local ci=(fm-fo+fv-2*ft*ch)/(2*fu)local d0=fm-ch^2-ci^2;local fx=y(d0)local fy=ff+fp*ch+fs*ci+fw*fx;local fz=ff+fp*ch+fs*ci-fw*fx;if d((fl-fy):len()-fk)<d((fl-fz):len()-fk)then return fy else return fz end end;local function fA()local function fB()local fC=core.getConstructWorldOrientationRight()local eJ=core.getConstructWorldOrientationForward()local fr=core.getConstructWorldOrientationUp()local fD=library.systemResolution3(fC,eJ,fr,{1,0,0})local fE=library.systemResolution3(fC,eJ,fr,{0,1,0})local fF=library.systemResolution3(fC,eJ,fr,{0,0,1})return function(fG)return library.systemResolution3(fD,fE,fF,fG)end end;local fH=fB()local fI=core.getConstructWorldPos()local eH=core.getElementPositionById(1)local fJ={eH[1],eH[2],eH[3]}local fK=fH(fJ)local fL={fI[1]-fK[1],fI[2]-fK[2],fI[3]-fK[3]}return fL end;local function fM(fN,eK,fO)local fP=fN.pts;local fQ=#fP;local fR=fN.ref;if fQ>3 then local fS,fT,fU,fV=fP[fQ],fP[fQ-1],fP[fQ-2],fP[fQ-3]fN.ref=fO;local eH=fd(fS[1],fS[2],fT[1],fT[2],fU[1],fU[2],fV[1],fV[2])local ch,ci,fx=eH.x,eH.y,eH.z;if ch==ch and ci==ci and fx==fx then ch=ch+fR[1]ci=ci+fR[2]fx=fx+fR[3]local fW=vec3(ch,ci,fx)if not fN.lastPos then fN.center=fW elseif(fN.lastPos-fW):len()<2 then fN.center=fW;fN.skipCalc=true end;fN.lastPos=fW end;fN.pts={}else local fX={fO[1]-fR[1],fO[2]-fR[2],fO[3]-fR[3]}fP[fQ+1]={eK,fX}end end;if bP[1]then f7=#bP[1].getConstructIds()local fY=bP[1].getData()local fZ=fY:gmatch('{"constructId[^}]*}[^}]*}')if f7>0 then local fO=fA()local f_,g0=0,0;fb,fa=0,0;for cQ in fZ do local dh,aj,g1=cQ:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local g2=f5[g1]aj=z(aj)if bP[1].hasMatchingTransponder(dh)==1 then table.insert(f4,dh)end;local g3=bP[1].getConstructType(dh)if CollisionSystem then if g2>27 or g3=="static"or g3=="space"then fb=fb+1;local g4=bP[1].getConstructName(dh)local fN=bL[dh]if fN==nil then g2=g2+G;bL[dh]={pts={},ref=fO,name=g4,i=0,radius=g2,skipCalc=false}fN=bL[dh]end;if not fN.skipCalc then fM(fN,aj,fO)g0=g0+1 end;if fN.center then table.insert(f6,fN)end end;f_=f_+1;if bM and f_>700 or g0>70 or(not bM and f_>300 or g0>30)then coroutine.yield()f_,g0=0,0 end end end;fa=#f6;if fa>0 and bs>20 then local c1,g5,g6,g7;local g8=0;local g9=aR:getPlanetarySystem(0)g7=br:normalize()while g8<fa do coroutine.yield()local ga={table.unpack(f6,g8,math.min(g8+75,fa))}c1,g5,g6=g9:castIntersections(bv,g7,nil,nil,ga,true)if c1 and g6 then bO={c1,g5,g6}break end;g8=g8+75 end;if not c1 then bO=nil end else bO=nil end;f6={}f8=fY:find('identifiedConstructs":%[%]')else f9=fY:find('worksInEnvironment":false')end end end;local function gb()if bP[1]then bQ="Atmo"if bP[1].getData():find('worksInAtmosphere":false')then bQ="Space"end end end;function f3.pickType()gb()end;function f3.assignRadar()if radar_1 and bP[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then bP[1]=radar_2 end;if bP[1]==radar_2 then gb()end elseif radar_2 and bP[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then bP[1]=radar_1 end;if bP[1]==radar_1 then gb()end end end;function f3.UpdateRadar()local gc=coroutine.status(UpdateRadarCoroutine)if gc=="suspended"then local cn,gd=coroutine.resume(UpdateRadarCoroutine)if gd then system.print("ERROR UPDATE RADAR: "..gd)end elseif gc=="dead"then UpdateRadarCoroutine=coroutine.create(fc)local cn,gd=coroutine.resume(UpdateRadarCoroutine)end end;function f3.GetRadarHud()local ge=f4;f4={}return f8,f9,f7,fa,fb,ge end;UpdateRadarCoroutine=coroutine.create(fc)return f3 end;local function gf()local gg=9.80665;local gh=vec3({13771471,7435803,-128971})local gi=18000000;local gj=500000;local gk,gl=math.huge;local gm;local function gn(go)gk=vec3(go):dist(gh)if gk<gi then return true,d(gk-gi)end;gl=vec3(go):dist(vec3(planet.center))if gl<gj then gm=true else gm=false end;if d(gl-gj)<d(gk-gi)then return gm,d(gl-gj)else return gm,d(gk-gi)end end;local function gp(cQ)if aG==1920 then return cQ else return A(aG*cQ/1920,0)end end;local function gq(cQ)if aH==1080 then return cQ else return A(aH*cQ/1080,0)end end;local function gr()return x()==0 and userControlScheme~="keyboard"and m()==0 end;local function gs()local gt="TRAVEL"if not bA then gt="CRUISE"end;if Autopilot then gt="AUTOPILOT"end;return gt end;local gu=""local gv=""local gw=""local gx=1;local gy=2;local gz=3;local gA=4;local gB=5;local gC=6;local gD=""local gE=0;local gF=e(1/apTickRate)*2*hudTickRate;local gG={}local gH={}local gI={}local gJ={}local gK={}local gL={}local function gM(ch,gN,gO,gP,gQ,gR)local gS=fuelY;local gT=fuelY+5;if not BarFuelDisplay then gT=gT+5 end;if m()==1 and not RemoteHud then gS=gS-50;gT=gT-50 end;if gO=="ATMO"then gD="atmofueltank"elseif gO=="SPACE"then gD="spacefueltank"else gD="rocketfueltank"end;gE=_G[gD.."_size"]if#gP>0 then for i=1,#gP do local g4=string.sub(gP[i][gy],1,12)local gU=0;for gV=1,gE do if gP[i][gy]==g(unit[gD.."_"..gV].getData()).name then gU=gV;break end end;local gW=q()if gQ[i]==nil or gR[i]==nil or gW-gP[i][gC]>gF then local gX;local gY=0;if gU~=0 then gR[i]=g(unit[gD.."_"..gU].getData()).percentage;gQ[i]=g(unit[gD.."_"..gU].getData()).timeLeft;if gQ[i]=="n/a"then gQ[i]=0 end else gY=l(gP[i][gx])-gP[i][gA]gR[i]=e(0.5+gY*100/gP[i][gz])gX=gP[i][gB]if gX<=gY then gQ[i]=0 else gQ[i]=e(0.5+gY/((gX-gY)/(gW-gP[i][gC])))end;gP[i][gB]=gY;gP[i][gC]=gW end end;if g4==gN then g4=f("%s %d",gO,i)end;if gU==0 then g4=g4 .." *"end;local gZ;if gQ[i]==0 then gZ=""else gZ=cG(gQ[i])end;if gR[i]~=nil then local g_=e(gR[i]*2.55)local h0=f("rgb(%d,%d,%d)",255-g_,g_,0)local ck=""if gZ~=""and gQ[i]<120 or gR[i]<5 then ck="red "end;if BarFuelDisplay then gv=gv..f([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],ch,gT,h0,gR[i],ch,gT,ch+2,gT+10,gR[i],gZ)gv=gv..cg(ch,gS,g4,ck.."txtstart pdim txtfuel")gS=gS-30;gT=gT-30 else gv=gv..cg(ch,gS,g4,ck.."pdim txtfuel")gv=gv..cg(ch,gT,f("%d%% %s",gR[i],gZ),"pdim txtfuel","fill:"..h0)gS=gS+30;gT=gT+30 end end end end end;local function h1(h2,dq)if dq<200000 and not aq or dq and aq then local h3=0;if d(bu)>1 then h3=45*math.log(d(bu),10)if bu<0 then h3=-h3 end end;h2[#h2+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="55" y="-41">1000</text>
                                        <text x="10" y="-65">100</text>
                                        <text x="-45" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-45" y="52">-10</text>
                                        <text x="10" y="72">-100</text>
                                        <text x="55" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(bu),e(h3))end;return h2 end;local function h4(h5)local h6=-bt;h5=h5-h5:project_on(h6)local h7=vec3(0,0,1)h7=h7-h7:project_on(h6)local h8=h7:cross(h6)local h3=h7:angle_between(h5)*constants.rad2deg;if h5:dot(h8)<0 then h3=360-h3 end;return h3 end;local function h9(h2,centerX,centerY,ha,hb,bM)local hc=circleRad;local hd=20;local he=e(ha)if bM then for i=-45,45,5 do local hf=i;h2[#h2+1]=f([[<g transform="rotate(%f,%d,%d)">]],hf,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;h2[#h2+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+hc+hd-len,centerX,centerY+hc+hd)end;h2[#h2+1]=cg(centerX,centerY+hc+hd-35,hb,"pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY+hc+hd-25,he.." deg","pdim txt txtmid")h2[#h2+1]=f([[<g transform="rotate(%f,%d,%d)">]],-ha,centerX,centerY)h2[#h2+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+hc+hd-20,centerX+5,centerY+hc+hd-20,centerX,centerY+hc+hd-15)h2[#h2+1]="</g>"end;local hg=he;if bM then hg=h4(bo)end;local hh=20;local hi=e(hg)local hj=0;local hk=centerY+hc+hd+20;local hl=centerX;if hb~="YAW"then hk=gq(130)hl=gp(960)end;local hm=[[<path class="txttick line" d="]]local hn=e(hi-(hh+10)-hi%5+0.5)for i=hn+60,hn,-5 do local ch=hl-(-i*5+hg*5)if i%10==0 then hj=10;local B=i;if B==360 then B=0 elseif B>360 then B=B-360 elseif B<0 then B=B+360 end;h2[#h2+1]=cg(ch+5,hk-12,B)elseif i%5==0 then hj=5 end;if hj==10 then hm=f([[%s M %f %f v %d]],hm,ch,hk-5,hj)else hm=f([[%s M %f %f v %d]],hm,ch,hk-2.5,hj)end end;h2[#h2+1]=hm..[["/>]]h2[#h2+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],hl-5,hk+10,hl+5,hk+10,hl,hk+5)if bM then hb="HDG"end;h2[#h2+1]=cg(hl,hk+25,hi.."deg","pdim txt txtmid","")h2[#h2+1]=cg(hl,hk+35,hb,"pdim txt txtmid","")end;local function ho(h2,hp,ha,centerX,centerY,bM,hq,eD)local hc=circleRad;local hr=e(hc*3/5)if hc>0 then local hs=e(hp)local len=0;local hm=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*ha,centerX,centerY)if not aq then hm=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;h2[#h2+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],hc-1,centerX,centerY)h2[#h2+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(hs-30-hs%5+0.5),e(hs+30+hs%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ci=centerY+-i*5+hp*5;if len==30 then hm=f([[%s M %d %f h %d]],hm,centerX-hr-len,ci,len)if aq then h2[#h2+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*ha,centerX,centerY,centerX-hr+10,ci,i)h2[#h2+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*ha,centerX,centerY,centerX+hr-10,ci,i)if i==0 or i==180 or i==-180 then h2[#h2+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*ha,centerX,centerY,centerX-hr+20,ci,hr*2-40)end else h2[#h2+1]=cg(centerX-hr+10,ci,i,"pdim txt txtmid")h2[#h2+1]=cg(centerX+hr-10,ci,i,"pdim txt txtmid")end;hm=f([[%s M %d %f h %d]],hm,centerX+hr,ci,len)else hm=f([[%s M %d %f h %d]],hm,centerX-hr-len,ci,len)hm=f([[%s M %d %f h %d]],hm,centerX+hr,ci,len)end end;h2[#h2+1]=hm..[["/>]]local ht="PITCH"if not bM then ht="REL PITCH"end;if hp>90 and not aq then hp=90-(hp-90)elseif hp<-90 and not aq then hp=-90-(hp+90)end;if hc>200 then if aq then if eD>Q then h2[#h2+1]=cg(centerX,centerY-15,"Yaw","pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY+20,hq,"pdim txt txtmid")end;h2[#h2+1]=f([[<g transform="rotate(%f,%d,%d)">]],-ha,centerX,centerY)else h2[#h2+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;h2[#h2+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hr+25,centerY-5,centerX-hr+20,centerY,centerX-hr+25,centerY+5,centerX-hr+50,centerY+4,hs)h2[#h2+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hr-25,centerY-5,centerX+hr-20,centerY,centerX+hr-25,centerY+5,centerX+hr-30,centerY+4,hs)h2[#h2+1]="</g>"end;local hu=e(hc/3)h2[#h2+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hu,centerY,hc-hu)if not aq and bM then h2[#h2+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*ha,centerX,centerY,centerX-hr+10,centerY,hr*2-20)end;h2[#h2+1]="</g>"if hc<200 then if aq and eD>Q then h2[#h2+1]=cg(centerX,centerY-hc,ht,"pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY-hc+10,hs,"pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY-15,"Yaw","pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY+20,hq,"pdim txt txtmid")else h2[#h2+1]=cg(centerX,centerY-hc,ht,"pdim txt txtmid")h2[#h2+1]=cg(centerX,centerY-hc+15,hs,"pdim txt txtmid")end end end end;local function hv(h2,dq,bM)local hw=altMeterX;local hx=altMeterY;local hy=78;local hz=19;local hA=ao;if ao~=-1 then h2[#h2+1]=cg(hw+hy,hx+hz+20,f("AGL: %.1fm",ao),"pdim altsm txtend")end;if bM and(dq<200000 and not aq or dq and aq)then table.insert(h2,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],hw-1,hx-4,hy+2,hz+6,hw+1,hx-1,hy-4,hz))local fQ=0;local hB=1;local hC=0;local hD=dq<0;local hE=dq<planet.surfaceMaxAltitude;local hF=9;if hD then hF=0 end;local dq=d(dq)while fQ<6 do local hG=11;local hH=16;local hI=9;local hJ=14;local ck="altsm"if fQ>2 then hH=hH+3;hG=hG+2;hJ=hJ+2;hI=hI-6;ck="altbig"end;if hD then ck=ck.." red"elseif hE then ck=ck.." orange"end;local hK=dq/hB%10;local hL=e(hK)local hM=e((hL+1)%10)local hN=hC;if fQ==0 then hN=hK-hL;if hD then hN=1-hN end end;if hD and(fQ==0 or hC~=0)then local hO=hM;hM=hL;hL=hO end;local hP=hH*(hN-1)local hQ=hP+hH;local ch=hw+hI+(6-fQ)*hG;local ci=hx+hJ;h2[#h2+1]=cg(ch,ci+hP,hM,ck)h2[#h2+1]=cg(ch,ci+hQ,hL,ck)fQ=fQ+1;hB=hB*10;if hL==hF then hC=hN else hC=0 end end;table.insert(h2,[[</g></g>]])end end;local function hR(eG)local hS=-math.deg(n(eG.y,eG.z))+180;hS=hS-90;if hS<0 then hS=360+hS end;if hS>180 then hS=-180+hS-180 end;return-hS end;local function hT(eG)local hg=math.deg(n(eG.y,eG.x))-90;if hg<-180 then hg=360+hg end;return hg end;local function hU(h2,eG,eD,centerX,centerY)if eD>5 and not aq or eD>Q then local hc=circleRad;local hV=20;local hW=20;local hX=hR(eG)local hY=hT(eG)local hZ=14;local h_=hZ/2;local i0=-hY/hW*hc;local i1=hX/hV*hc;local ch=centerX+i0;local ci=centerY+i1;local aj=y(i0^2+i1^2)local i2=[[<circle
                            cx="]]..ch..[["
                            cy="]]..ci..[["
                            r="]]..h_/hZ..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..ch..[["
                            cy="]]..ci..[["
                            r="]]..h_..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..ch-hZ..[[,]]..ci..[[ h ]]..h_..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ch+h_..[[,]]..ci..[[ h ]]..h_..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..ch..[[,]]..ci-hZ..[[ v ]]..h_..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if aj<hc then h2[#h2+1]=i2 else local h3=n(i1,i0)local i3=4;local i4=centerX+hc*math.cos(h3)local i5=centerY+hc*math.sin(h3)h2[#h2+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',h3*180/math.pi,i4,i5,i4-i3,i5-i3/2,i3*2,i3,i4+i3,i5-i3,i3,i3,-i3,i3)end;if not aq then local i6=vec3(eG)hX=hR(-i6)hY=hT(-i6)i0=-hY/hW*hc;i1=hX/hV*hc;ch=centerX+i0;ci=centerY+i1;aj=y(i0^2+i1^2)if aj<hc then local i7=[[<circle
                                    cx="]]..ch..[["
                                    cy="]]..ci..[["
                                    r="]]..h_..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..ch..[[,]]..ci-hZ..[[ v ]]..h_..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..ch..[[,]]..ci..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..ch..[[,]]..ci..[[)" />
                                <path
                                    d="M ]]..ch-h_..[[,]]..ci..[[ h ]]..hZ..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..ch..[[,]]..ci..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..ch..[[,]]..ci..[[)"/>]]h2[#h2+1]=i7 end end end end;local function i8(h2,gt,i9,ia)i9=e(i9+0.5)local gS=throtPosY+10;local gT=throtPosY+20;if m()==1 and not RemoteHud then gS=55;gT=65 end;local ib="CRUISE"local unit="km/h"local cn=ia;if gt=="TRAVEL"or gt=="AUTOPILOT"then ib="THROT"unit="%"cn=i9;local ic="dim"if i9<0 then ic="red"end;h2[#h2+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],ic,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(i9),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;h2[#h2+1]=cg(throtPosX+10,gS,ib,"pbright txtstart")h2[#h2+1]=cg(throtPosX+10,gT,f("%.0f %s",cn,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bA and M then i9=e(N*100+0.5)local ic="red"if i9<0 then ic="red"end;h2[#h2+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],ic,1-d(i9),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)h2[#h2+1]=cg(throtPosX+10,gS+40,"LIMIT","pbright txtstart")h2[#h2+1]=cg(throtPosX+10,gT+40,i9 .."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then h2[#h2+1]=cg(throtPosX+10,gS-40,"LIMIT: "..b7 .." km/h","dim txtstart")elseif not aq and Autopilot then h2[#h2+1]=cg(throtPosX+10,gS-40,"LIMIT: "..e(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function id(h2,ie)local ig=throtPosY-10;local ih=throtPosX+10;h2[#h2+1]=cg(0,0,"","pdim txt txtend")if m()==1 and not RemoteHud then ig=75 end;h2[#h2+1]=cg(ih,ig,e(ie).." km/h","pbright txtbig txtstart")end;local function ii(h2)h2[#h2+1]=cg(gp(1900),gq(1070),f("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")h2[#h2+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then h2[#h2+1]=cg(gp(960),gq(550),"Warning: Invalid Control Scheme Detected","warnings")h2[#h2+1]=cg(gp(960),gq(600),"Keyboard Scheme must be selected","warnings")h2[#h2+1]=cg(gp(960),gq(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local ij=gp(960)local ik=gq(860)local il=gq(880)local im=gq(900)local io=gq(960)local ip=gq(200)local iq=gq(250)local ir=gq(960)if m()==1 and not RemoteHud then ik=gq(135)il=gq(155)im=gq(175)ip=gq(115)iq=gq(95)end;if BrakeIsOn then h2[#h2+1]=cg(ij,ik,"Brake Engaged","warnings")elseif L>0 then h2[#h2+1]=cg(ij,ik,"Auto-Brake Engaged","warnings","opacity:"..L)end;if aq and b2 and ao==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not by and not VertTakeOff and not AutoTakeoff then h2[#h2+1]=cg(ij,ip+50,"** STALL WARNING **","warnings")c3("stall","SW",2)end end;if bK then h2[#h2+1]=cg(ij,ip+90,"Flight Assist in Progress","warnings")end;if ax then h2[#h2+1]=cg(ij,ir,"Gyro Enabled","warnings")end;if GearExtended then if S then h2[#h2+1]=cg(ij,il,"Gear Extended","warn")else h2[#h2+1]=cg(ij,il,"Landed (G: Takeoff)","warnings")end;local is=ct(a:getTargetGroundAltitude())h2[#h2+1]=cg(ij,im,"Hover Height: "..is,"warn")end;if a7 then h2[#h2+1]=cg(ij,io+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and by and AntigravTargetAltitude~=nil then if d(as-antigrav.getBaseAltitude())<501 then h2[#h2+1]=cg(ij,ip+15,f("AGG On - Target Altitude: %d Singularity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warn")else h2[#h2+1]=cg(ij,ip+15,f("AGG On - Target Altitude: %d Singluarity Altitude: %d",e(AntigravTargetAltitude),e(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then h2[#h2+1]=cg(ij,ip+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then h2[#h2+1]=cg(ij,ip+20,f("LockedPitch: %d",e(LockPitch)),"warn")elseif a0 then h2[#h2+1]=cg(ij,ip+20,"Follow Mode Engaged","warn")elseif Reentry or an then h2[#h2+1]=cg(ij,ip+20,"Re-entry in Progress","warn")end;if AltitudeHold or VertTakeOff then local is=ct(HoldAltitude,2)if VertTakeOff then if by then is=ct(antigrav.getBaseAltitude(),2).." AGG singularity height"end;h2[#h2+1]=cg(ij,ip,"VTO to "..is,"warn")elseif AutoTakeoff and not IntoOrbit then if am then h2[#h2+1]=cg(ij,ip,"Takeoff to "..AutopilotTargetName,"warn")else h2[#h2+1]=cg(ij,ip,"Takeoff to "..is,"warn")end;if BrakeIsOn and not VertTakeOff then h2[#h2+1]=cg(ij,ip+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else h2[#h2+1]=cg(ij,ip,"Altitude Hold: "..is,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then h2[#h2+1]=cg(ij,ip+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then h2[#h2+1]=cg(ij,ip+20,"Aligning trajectory","warn")elseif ar<0.05 then h2[#h2+1]=cg(ij,ip+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if b9~=nil then h2[#h2+1]=cg(ij,ip,b9,"warn")end end;if BrakeLanding then if StrongBrakes then h2[#h2+1]=cg(ij,ip,"Brake-Landing","warnings")else h2[#h2+1]=cg(ij,ip,"Coast-Landing","warnings")end end;if ProgradeIsOn then h2[#h2+1]=cg(ij,ip,"Prograde Alignment","crit")end;if RetrogradeIsOn then h2[#h2+1]=cg(ij,ip,"Retrograde Alignment","crit")end;if bN then local type;if string.find(bN,"COLLISION")then type="warnings"else type="crit"end;h2[#h2+1]=cg(ij,iq+20,bN,type)elseif ar==0 then local bZ,c2=bX(br:normalize())if c2~=nil then local is=ct(c2)local travelTime=aS.computeTravelTime(bs,0,c2)local it="Collision"if bZ.noAtmosphericDensityAltitude>0 then it="Atmosphere"end;h2[#h2+1]=cg(ij,iq+20,bZ.name.." "..it.." "..cG(travelTime).." In "..is,"crit")end end;if VectorToTarget and not IntoOrbit then h2[#h2+1]=cg(ij,ip+35,VectorStatus,"warn")end;h2[#h2+1]="</g>"return h2 end;local function iu(eD)return e(A(eD*3.6,0)+0.5).." km/h"end;local function iv(h2)local iw=OrbitMapX;local ix=OrbitMapY;local iy=OrbitMapSize;local iz=4;local iA=15;local ch=0;local ci=0;local iB,iC,iD,iE;local function iF(type)local iG,E,eD,iH;if type=="Periapsis"then iG=orbit.periapsis.altitude;E=orbit.timeToPeriapsis;eD=orbit.periapsis.speed;iH=35 else iG=orbit.apoapsis.altitude;E=orbit.timeToApoapsis;eD=orbit.apoapsis.speed;iH=-35 end;h2[#h2+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ch+iH,ci-5,iw+iy/2-iB+iE,ci-5)h2[#h2+1]=cg(ch,ci,type)ci=ci+iA;local is=ct(iG)h2[#h2+1]=cg(ch,ci,is)ci=ci+iA;h2[#h2+1]=cg(ch,ci,cG(E))ci=ci+iA;h2[#h2+1]=cg(ch,ci,iu(eD))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then ix=ix+iz;ch=iw+iy+iw/2+iz;ci=ix+iy/2+5+iz;iB=iy/4;iE=0;h2[#h2+1]=[[<g class="pbright txtorb txtmid">]]h2[#h2+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',iy+iw*2,iy+ix,iz,iz)if orbit.periapsis~=nil and orbit.apoapsis~=nil then iD=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(iB*2)iC=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/iD*(1-orbit.eccentricity)iE=iB-orbit.periapsis.altitude/iD-planet.radius/iD;local iI=""if orbit.periapsis.altitude<=0 then iI='redout'end;h2[#h2+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],iI,iw+iy/2+iE+iz,ix+iy/2+iz,iB,iC)h2[#h2+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',iw+iy/2+iz,ix+iy/2+iz,planet.radius/iD)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then iF("Apoapsis")end;ci=ix+iy/2+5+iz;ch=iw-iw/2+10+iz;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then iF("Periapsis")end;h2[#h2+1]=cg(iw+iy/2+iz,planet.name,20+iz,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local iJ=orbit.timeToApoapsis/orbit.period*2*math.pi;local iK=iB*math.cos(iJ)local iL=iC*math.sin(iJ)h2[#h2+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',iw+iy/2+iK+iE+iz,ix+iy/2+iL+iz)end;h2[#h2+1]=[[</g>]]return h2 else return h2 end end;local function iM(h2)local ch=30;local ci=275;local iN={}local iO={"Alt-4: AutoTakeoff to Target"}local iP={"Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-Q/E: Hard Bankroll left/right till released","Alt-S: 180 deg bank turn"}local iQ={"Alt-6: Orbit at current altitude","Alt-6-6: Orbit at LowOrbitHeight over atmosphere"}local iR={"","------------------ALWAYS--------------------","Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view","Alt-4: Autopilot to IPH target","Alt-5: Lock Pitch at current pitch","Alt-7: Toggle Collision System on and off","Alt-8: Toggle ground stabilization (underwater flight)","CTRL: Toggle Brakes on and off. Cancels active AP","LAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}table.insert(iN,"--------------DYNAMIC-----------------")if aq then if ao~=-1 then c6(iN,iO)if ac and planet and ac.name==planet.name then table.insert(iN,"Alt-4-4: Low Orbit Autopilot to Target")end;if antigrav or VertTakeOffEngine then if antigrav then if by then table.insert(iN,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(iN,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(iN,"Alt-6: Begins Vertical AutoTakeoff.")end else table.insert(iN,"Alt-6: Autotakeoff to AutoTakeoffAltitude")table.insert(iN,"Alt-6-6: Autotakeoff to 11% atmosphere")end;if GearExtended then table.insert(iN,"G: Takeoff to hover height, raise gear")else table.insert(iN,"G: Lowergear and Land")end else c6(iN,iP)table.insert(iN,"G: Begin BrakeLanding or Land")end;if VertTakeOff then table.insert(iN,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end else c6(iN,iQ)if shield_1 then table.insert(iN,"Alt-Shift-5: Toggle shield off and on")table.insert(iN,"Alt-Shift-6: Vent shields")end end;if gyro then table.insert(iN,"Alt-9: Activate Gyroscope")end;if ExtraLateralTags~="none"or ExtraLongitudeTags~="none"or ExtraVerticalTags~="none"then table.insert(iN,"Alt-Shift-9: Cycles engines with Extra tags")end;if AltitudeHold then table.insert(iN,"Alt-Spacebar/C will raise/lower target height")table.insert(iN,"Alt+Shift+Spacebar/C will raise/lower target to preset values")end;if AtmoSpeedAssist or not aq then table.insert(iN,"LALT+Mousewheel will lower/raise speed limit")end;c6(iN,iR)for i=1,#iN do ci=ci+12;h2[#h2+1]=cg(ch,ci,iN[i],"pdim txttick txtstart")end end;local function iS(iT,iU)local iV;local iW=(iU-iT):normalize()local eI=(bv-iT):dot(iW)/iW:dot(iW)if eI<=0.then return(bv-iT):len()elseif eI>=(iU-iT):len()then return(bv-iU):len()end;local iX=iT+eI*iW;iV=(iX-bv):len()return iV end;local function iY()local iV;local iZ=nil;local i_=nil;local j0=nil;for cP,j1 in pairs(b[0])do if j1.hasAtmosphere then local aj=iS(planet.center,j1.center)if iZ==nil or aj<iZ then i_=j1;iZ=aj;j0=planet end;if ac and ac.hasAtmosphere and ac.name~=planet.name then local e3=iS(ac.center,j1.center)if e3<iZ then i_=j1;iZ=e3;j0=ac end end end end;local j2=gp(1770)local j3=gq(330)if iZ then local j4="txttick "local j5=500000;if iZ<i_.radius+j5 or iZ<j0.radius+j5 then if bH then j4="txttick red "else j4="txttick orange "end end;iV=ct(iZ,2)bJ=cg(j2,j3,"Pipe ("..j0.name.."--"..i_.name.."): "..iV,j4 .."pbright txtmid")end end;local j6={}function j6.HUDPrologue(h2)bH,bI=gn(bv)if not bH then H=PvPR;J=PvPG;I=PvPB;if shield_1 and AutoShieldToggle and shield_1.getState()==0 then shield_1.toggle()end else H=SafeR;J=SafeG;I=SafeB;if shield_1 and AutoShieldToggle and shield_1.getState()==1 then shield_1.toggle()end end;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]local j7=ay;local j8=az;local j9=ay;local ja=az;if gr()and not brightHud then j7=[[rgb(]]..e(H*0.4+0.5)..","..e(J*0.4+0.5)..","..e(I*0.3+0.5)..[[)]]j8=[[rgb(]]..e(H*0.3+0.5)..","..e(J*0.3+0.5)..","..e(I*0.2+0.5)..[[)]]end;h2[#h2+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .orange {fill:orange;stroke:orange}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],j7,j7,j9,j9,j8,j8,ja,ja,aG,aH)return h2 end;function j6.DrawVerticalSpeed(h2,dq)h1(h2,dq)end;function j6.UpdateHud(h2)local hS=bB;local jb=bC;local ha=jb;local hp=hS;local i9=e(unit.getThrottle())local ie=bs*3.6;local ia=unit.getAxisCommandValue(0)local jc=gp(1770)local jd=gq(310)if AtmoSpeedAssist and bA then ia=K;i9=K*100 end;local gt=gs()local hb="ROLL"if i9==nil then i9=0 end;if not bM then if bs>5 then hS=hR(bq)jb=hT(bq)else hS=0;jb=0 end;hb="YAW"end;if bI>50000 and not aq then local je;je=ct(bI)h2[#h2+1]=cg(jc,jd,"PvP Boundary: "..je,"pbright txtbig txtmid")end;h2[#h2+1]=ak;h2[#h2+1]=aD;h2[#h2+1]=gu;if bJ~=""then h2[#h2+1]=bJ end;if gv~=""then h2[#h2+1]=gv end;if gw~=""then h2[#h2+1]=gw end;h1(h2,as)if m()==0 or RemoteHud then if not gr()or brightHud then if bM then h9(h2,centerX,centerY,ha,hb,bM)ho(h2,hp,ha,centerX,centerY,bM,e(hT(bq)),bs)else h9(h2,centerX,centerY,jb,hb,bM)ho(h2,hS,jb,centerX,centerY,bM,e(jb),bs)end;hv(h2,as,bM)hU(h2,bq,bs,centerX,centerY)end end;i8(h2,gt,i9,ia)id(h2,ie)ii(h2)iv(h2)if showHelp then iM(h2)end;return h2 end;function j6.HUDEpilogue(h2)h2[#h2+1]="</svg>"return h2 end;function j6.ExtraData(h2)local jf=gp(1240)local jg=gq(55)local jh=jg+10;local ji;local jj=0;local gt=gs()if VertTakeOffEngine then gt=gt.."-VERTICAL"end;if CollisionSystem and not AutoTakeoff and not BrakeLanding and bs>20 then gt=gt.."-COLLISION ON"end;if UseExtra~="Off"then gt="("..UseExtra..")-"..gt end;if TurnBurn then gt="TB-"..gt end;if not stablized then gt=gt.."-DeCoupled"end;local jk=vec3(core.getWorldAcceleration()):len()/9.80665;ji=core.g()h2[#h2+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then jf=gp(1120)jg=gq(55)jh=jg+10 elseif aq then local jl=gp(770)h2[#h2+1]=cg(jl,jg,"ATMOSPHERE","pdim txt txtend")h2[#h2+1]=cg(jl,jh,f("%.2f",ar),"pdim txt txtend","")end;h2[#h2+1]=cg(jf,jg,"GRAVITY","pdim txt txtend")h2[#h2+1]=cg(jf,jh,f("%.2f",ji/9.80665),"pdim txt txtend")h2[#h2+1]=cg(jf,jg+20,"ACCEL","pdim txt txtend")h2[#h2+1]=cg(jf,jh+20,f("%.2f",jk),"pdim txt txtend")h2[#h2+1]=cg(gp(960),gq(180),gt,"txtbig txtmid")end;function j6.DrawOdometer(h2,ad,TotalDistanceTravelled,ae)local ji;local jm=0;local jn=0;local jj=0;local jo=av>1000000 and A(av/1000000,2).." kTons"or A(av/1000,2).." Tons"if aq then jj=LastMaxBrakeInAtmo else jj=LastMaxBrake end;local jp,jq=aS.computeDistanceAndTime(bs,0,av,0,0,jj)jj=A(jj/(av*gg),2).." g"local jr=a:maxForceForward()ji=core.g()if ji>0.1 then jn=av*ji;jn=A(jn/(av*gg),2).." g"jm=0.5*jr/ji;jm=jm>1000000 and A(jm/1000000,2).." kTons"or A(jm/1000,2).." Tons"end;jr=A(jr/(av*gg),2).." g"h2[#h2+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],gp(660),gp(700),gq(35),gp(960),gq(55),gp(1240),gq(35),gp(1280))if m()==0 or RemoteHud then h2[#h2+1]=cg(gp(700),gq(10),f("BrkTime: %s",cG(jq)),"txtstart")h2[#h2+1]=cg(gp(700),gq(20),f("Trip: %.2f km",ad),"txtstart")h2[#h2+1]=cg(gp(700),gq(30),f("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")h2[#h2+1]=cg(gp(830),gq(10),f("BrkDist: %s",ct(jp)),"txtstart")h2[#h2+1]=cg(gp(830),gq(20),"Trip Time: "..cG(ae),"txtstart")h2[#h2+1]=cg(gp(830),gq(30),"Total Time: "..cG(TotalFlightTime),"txtstart")h2[#h2+1]=cg(gp(970),gq(20),f("Mass: %s",jo),"txtstart")h2[#h2+1]=cg(gp(1240),gq(10),f("Max Brake: %s",jj),"txtend")h2[#h2+1]=cg(gp(1240),gq(30),f("Max Thrust: %s",jr),"txtend")if ji>0.1 then h2[#h2+1]=cg(gp(970),gq(30),f("Max Thrust Mass: %s",jm),"txtstart")h2[#h2+1]=cg(gp(1240),gq(20),f("Req Thrust: %s",jn),"txtend")else h2[#h2+1]=cg(gp(970),gq(30),"Max Mass: n/a","txtstart")h2[#h2+1]=cg(gp(1240),gq(20),"Req Thrust: n/a","txtend")end end;h2[#h2+1]="</g>"return h2 end;function j6.DrawWarnings(h2)return ii(h2)end;function j6.DisplayOrbitScreen(h2)return iv(h2)end;function j6.DisplayMessage(h2,is)if is~="empty"then local ci=310;for js in string.gmatch(is,"([^\n]+)")do ci=ci+35;h2[#h2+1]=cg("50%",ci,js,"msg")end end;if ai~=0 then unit.setTimer("msgTick",ai)ai=0 end end;function j6.DrawDeadZone(h2)h2[#h2+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function j6.UpdatePipe()if aq then bJ=""return end;iY()end;function j6.DrawSettings(h2)if#bE>0 then local ch=gp(640)local ci=gq(200)h2[#h2+1]=[[<g class="pbright txtvspd txtstart">]]for cP,cQ in pairs(bE)do h2[#h2+1]=cg(ch,ci,cQ..": ".._G[cQ])ci=ci+20;if cP%12==0 then ch=ch+gp(350)ci=gq(200)end end;h2[#h2+1]=cg(gp(640),gq(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")h2[#h2+1]="</g>"end;return h2 end;local jt;local ju=gp(1770)local jv=gq(350)local jw=gq(15)local jx=gp(1370)local bT,jy;local jz=0;function j6.DrawRadarInfo()local function jA()if radarPanelID~=nil and jz==0 then t(radarPanelID)radarPanelID=nil;if jt~=nil then t(jt)jt=nil end else if jz==1 then t(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(bP,1,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")jt=_autoconf.panels[_autoconf.panels_size]end;if radarPanelID==nil then _autoconf.displayCategoryPanel(bP,1,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]end;jz=0 end end;local f8,f9,f7,fa,fb,f4=aY.GetRadarHud()local B=fa or 0;if f7>0 then if CollisionSystem then bT=B.."/"..fb.." Plotted : "..f7-fb.." Ignored"else bT="Radar Contacts: "..f7 end;gu=cg(ju,jv,bT,"pbright txtbig txtmid")if#f4>0 then gu=gu..cg(jx,jw,"Friendlies In Range","pbright txtbig txtmid")for cP,cQ in pairs(f4)do jw=jw+20;gu=gu..cg(jx,jw,bP[1].getConstructName(cQ),"pdim txtmid")end end;if f8==nil and jt==nil then jz=1;jA()end;if f8~=nil and jt~=nil then jA()end;if radarPanelID==nil then jA()end else if f9 then gu=cg(ju,jv,bQ.." Radar: Jammed","pbright txtbig txtmid")else gu=cg(ju,jv,"Radar: No "..bQ.." Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then jz=0;jA()end end end;function j6.DrawTanks()if fuelX~=0 and fuelY~=0 then gv=cg(fuelX,fuelY,"","txtstart pdim txtfuel")gM(fuelX,"Atmospheric ","ATMO",aI,gK,gL)gM(fuelX+120,"Space fuel t","SPACE",aJ,gI,gJ)gM(fuelX+240,"Rocket fuel ","ROCKET",aK,gG,gH)end end;function j6.DrawShield()local jB=shield_1.getState()==1 and"Shield Active"or"Shield Disabled"local jC=core.getPvPTimer()local jD=shield_1.getResistances()local jE="A: "..10+jD[1]*100 .."% / E: "..10+jD[2]*100 .."% / K:"..10+jD[3]*100 .."% / T: "..10+jD[4]*100 .."%"local ch,ci=shieldX-60,shieldY+30;local jF=e(0.5+shield_1.getShieldHitpoints()*100/shield_1.getMaxShieldHitpoints())local g_=e(jF*2.55)local h0=f("rgb(%d,%d,%d)",255-g_,g_,0)local ck=""gw=cg(ch,ci,"","txtmid pdim txtfuel")if jF<10 and jB~="Shield Disabled"then ck="red "end;jC=jC>0 and"   PvPTime: "..cG(jC)or""gw=gw..f([[
                        <g class="pdim">                        
                        <rect fill=grey class="bar" x="%d" y="%d" width="200" height="13"></rect></g>
                        <g class="bar txtstart">
                        <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                        <text fill=black x="%d" y="%d">%s%%%s</text>
                        </g>]],ch,ci,h0,jF*2,ch,ci,ch+2,ci+10,jF,jC)gw=gw..cg(ch,ci-5,jB,ck.."txtstart pbright txtbig")gw=gw..cg(ch,ci+30,jE,ck.."txtstart pbright txtsmall")end;return j6 end;local function jG()local function jH(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function jI()local function jJ(jK,jL)return jK.name<jL.name end;bG={}for cP,cQ in pairs(b[0])do bG[#bG+1]={name=cQ.name,index=cP}end;table.sort(bG,jJ)end;local function jM(jN)for cP,cQ in pairs(jN)do if cQ.name and cQ.name==CustomTarget.name then return cP end end;return-1 end;local function jO()bS=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local jP=bG[AutopilotTargetIndex].index;local jQ=b[0][jP]if jQ.center then AutopilotTargetName=jQ.name;ac=aR[0][jP]if CustomTarget~=nil then if ar==0 then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end;if u(widgetTargetOrbitText,widgetTargetOrbit)~=1 then v(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=jQ;for _,cQ in pairs(aR[0])do if cQ.name==CustomTarget.planetname then ac=cQ;AutopilotTargetName=CustomTarget.name;break end end;if u(widgetMaxMassText,widgetMaxMass)~=1 then v(widgetMaxMassText,widgetMaxMass)end;if u(widgetTravelTimeText,widgetTravelTime)~=1 then v(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function jR(h6)if not Autopilot and not VectorToTarget and not am and not IntoOrbit then if h6==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bG end end;if AutopilotTargetIndex==0 then jO()else local jP=bG[AutopilotTargetIndex].index;local jQ=b[0][jP]if jQ~=nil and jQ.name=="Space"or iphCondition=="Custom Only"and jQ.center or iphCondition=="No Moons"and string.find(jQ.name,"Moon")~=nil then if h6==nil then jR()else jR(1)end else jO()end end else a2="Disengage autopilot before changing Interplanetary Helper"c3("iph","AP")end end;local function jS()local fQ=-1;fQ=jM(b[0])if fQ>-1 then table.remove(b[0],fQ)end;fQ=-1;fQ=jM(SavedLocations)if fQ~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,fQ)end;jR()jI()end;local function jT(g4,position,hO,jU)if dbHud_1 or hO then local p=jH(position)local ji=p.gravity;if jU then ji=unit.getClosestPlanetInfluence()end;local jV={position=position,name=g4,planetname=p.name,gravity=ji,safe=jU}if not hO then SavedLocations[#SavedLocations+1]=jV else for cP,cQ in pairs(b[0])do if cQ.name and g4==cQ.name then table.remove(b[0],cP)end end end;table.insert(b[0],jV)jI()jO()a2="Location saved as "..g4 .."("..p.name..")"else a2="Databank must be installed to save permanent locations"end end;local jW={}function jW.UpdateAtlasLocationsList()jI()end;function jW.UpdateAutopilotTarget()jO()end;function jW.adjustAutopilotTargetIndex(h6)jR(h6)end;function jW.findAtlasIndex(jN)jM(jN)end;function jW.UpdatePosition(jX)local fQ=jM(SavedLocations)if fQ~=-1 then if jX~=nil then SavedLocations[fQ].name=jX;AutopilotTargetIndex=AutopilotTargetIndex-1;jR()else local jY=SavedLocations[fQ]jY.gravity=unit.getClosestPlanetInfluence()jY.position=bv;jY.safe=true end;a2=SavedLocations[fQ].name.." position updated ("..SavedLocations[fQ].planetname..")"else a2="Name Not Found"end end;function jW.AddNewLocation(g4,position,hO,jU)jT(g4,position,hO,jU)end;function jW.ClearCurrentPosition()jS()end;for cP,cQ in pairs(SavedLocations)do table.insert(b[0],cQ)end;jI()if AutopilotTargetIndex>#bG then AutopilotTargetIndex=0 end;jW.UpdateAutopilotTarget()return jW end;local function jZ()local cA={}local function j_(eD)local k0=AutopilotEndSpeed;if not Autopilot then k0=0 end;if not aq then return aS.computeDistanceAndTime(eD,k0,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aS.computeDistanceAndTime(eD,k0,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function k1(eD)local k0=AutopilotEndSpeed;if not Autopilot then k0=0 end;return aS.computeDistanceAndTime(eD,k0,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;local k2=false;local k3=0;function cA.GetAutopilotBrakeDistanceAndTime(eD)return j_(eD)end;function cA.GetAutopilotTBBrakeDistanceAndTime(eD)return k1(eD)end;local function k4(k5,k6,k7)k6=k6:project_on_plane(k5)k7=k7:project_on_plane(k5)return n(k6:cross(k7):dot(k5),k6:dot(k7))end;local function k8()local function k9()local ka=-1;local kb=-1;if vBooster then ka=vBooster.getDistance()end;if hover then kb=hover.getDistance()end;if ka~=-1 and kb~=-1 then if ka<kb then return ka else return kb end elseif ka~=-1 then return ka elseif kb~=-1 then return kb else return-1 end end;local kc=k9()local kd=-1;if telemeter_1 then kd=telemeter_1.getDistance()end;if kc~=-1 and kd~=-1 then if kc<kd then return kc else return kd end elseif kc~=-1 then return kc else return kd end end;local function ke(planet,d_,kf)local function kg(kh,dj)local e5=vec3(dj)if kh.id==0 then return setmetatable({latitude=e5.x,longitude=e5.y,altitude=e5.z,id=0,systemId=kh.systemId},MapPosition)end;local e6=e5-kh.center;local aj=e6:len()local dq=aj-kh.radius;local dn=0;local dp=0;if not cq(aj,0)then local e7=n(e6.y,e6.x)dp=e7>=0 and e7 or 2*math.pi+e7;dn=math.pi/2-math.acos(e6.z/aj)end;return setmetatable({latitude=math.deg(dn),longitude=math.deg(dp),altitude=dq,id=kh.id,systemId=kh.systemId},MapPosition)end;local ki=kg(planet,d_)ki="::pos{"..ki.systemId..","..ki.id..","..ki.latitude..","..ki.longitude..","..ki.altitude.."}"if kf then return ki else system.setWaypoint(ki)return true end end;local kj=false;function cA.showWayPoint(planet,d_,kf)return ke(planet,d_,kf)end;function cA.APTick()local function kk()if bO and not BrakeLanding then local c1=bO[1]local g5,g6=bO[2],bO[3]local kl=math.min(g5,g6 or g5)local km=kl/bs;local kn=AutoTakeoff and(bs<42 or ao~=-1)local ko=AltitudeHold or VectorToTarget or LockPitch or Autopilot;if ko and not kn and(a8*1.5>kl or km<1)then BrakeIsOn=true;cm(0)if AltitudeHold then cy()end;if LockPitch then ToggleLockPitch()end;a2="Autopilot Cancelled due to possible collision"if VectorToTarget or Autopilot then cB()end;StrongBrakes=true;BrakeLanding=true;b0=true end;if km<11 then bN=c1.name.." COLLISION "..cG(km).." / "..ct(kl,2)else bN=c1.name.." collision "..cG(km)end;if km<6 then c3("alarm","AL",2)end else bN=false end end;local function kp(bY,kq,kr)local function ks(bY,dM)bY=vec3(bY)dM=vec3(dM):normalize()local d5=bY*dM;return d5.x+d5.y+d5.z end;local kt=0.001;local ku=1;if not aq or not b2 or ao~=-1 or bs<Q then if kr==nil then kr=DampingMultiplier end;if kq==nil then kq=kt end;bY=vec3(bY):normalize()local kv=vec3()-bY;local kw=-ks(kv,core.getConstructWorldOrientationRight())*ku;local kx=-ks(kv,core.getConstructWorldOrientationUp())*ku;if aB==0 then aB=kw/2 end;if aC==0 then aC=kx/2 end;if d(kw)<0.1 then V=V-kw*2 else V=V-(kw+(kw-aB)*kr)end;if d(kx)<0.1 then U=U+kx*2 else U=U+kx+(kx-aC)*kr end;aB=kw;aC=kx;if d(kw)<kq and d(kx)<kq then return true end;return false elseif b2 and ao==-1 then bY=br;if kr==nil then kr=DampingMultiplier end;if kq==nil then kq=kt end;bY=vec3(bY):normalize()local kv=bo-bY;local kw=-ks(kv,core.getConstructWorldOrientationRight())*ku;local kx=-ks(kv,core.getConstructWorldOrientationUp())*ku;if aB==0 then aB=kw/2 end;if aC==0 then aC=kx/2 end;if d(kw)<0.1 then V=V-kw*5 else V=V-(kw+(kw-aB)*kr)end;if d(kx)<0.1 then U=U+kx*5 else U=U+kx+(kx-aC)*kr end;aB=kw;aC=kx;if d(kw)<kq and d(kx)<kq then return true end;return false end end;aq=k()>0;ar=k()as=core.getAltitude()ao=k8()E=q()b3=E;if CollisionSystem then kk()end;if antigrav then by=antigrav.getState()==1 end;local ky=1;local kz=1;local kA=E-b3;local kB=-math.deg(k4(bn,br,bo))local kC=math.deg(k4(bp,br,bo))local h6=bt*-1;b2=aq and kB<-YawStallAngle or kB>YawStallAngle or kC<-PitchStallAngle or kC>PitchStallAngle;local kD=system.getMouseDeltaX()local kE=system.getMouseDeltaY()if InvertMouse and not a1 then kE=-kE end;V=0;Z=0;U=0;sys=aR[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=aU(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),br)if as==0 then as=(bv-planet.center):len()-planet.radius end;bM=unit.getClosestPlanetInfluence()>0 or as>0 and as<200000;local ji=planet:getGravity(core.getConstructWorldPos()):len()*av;b4=0;aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if x()==0 then if m()==1 and a1 then if not aZ then ag=ag+kD;ah=ah+kE end else ag=0;ah=0 end else ag=ag+kD;ah=ah+kE;aj=y(ag*ag+ah*ah)if not a1 and m()==0 then if userControlScheme=="virtual joystick"then if ag>0 and ag>DeadZone then V=V-(ag-DeadZone)*MouseXSensitivity elseif ag<0 and ag<DeadZone*-1 then V=V-(ag+DeadZone)*MouseXSensitivity else V=0 end;if ah>0 and ah>DeadZone then U=U-(ah-DeadZone)*MouseYSensitivity elseif ah<0 and ah<DeadZone*-1 then U=U-(ah+DeadZone)*MouseYSensitivity else U=0 end else ag=0;ah=0;if userControlScheme=="mouse"then U=(-utils.smoothstep(kE,-100,100)+0.5)*2*ky;V=(-utils.smoothstep(kD,-100,100)+0.5)*2*kz end end end end;local kF=bs>8334;if bs>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not kF then a2="Space Speed Engine Shutoff reached"cm(0)end;if not kF and LastIsWarping then if not BrakeIsOn then cD()end;if Autopilot then cB()end end;LastIsWarping=kF;if aq and ar>0.09 then if bs>b7/3.6 and not AtmoSpeedAssist and not k2 then BrakeIsOn=true;k2=true elseif not AtmoSpeedAssist and k2 then if bs<b7/3.6 then BrakeIsOn=false;k2=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if al then BrakeIsOn=false;local kG=false;if CustomTarget~=nil and al~=1 then kG=kp(CustomTarget.position-bv,0.1)else kG=kp(vec3(br),0.01)end;b0=true;if kG then cp(e(b7))if(d(bC)<2 or d(bB)>85)and bs>=b7/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;if al~=1 then an=true end;al=false;Autopilot=false;cE()end elseif aq and AtmoSpeedAssist then cm(1)end elseif bs>Q then kp(vec3(br),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bs>Q then kp(-vec3(br))end end;if not ProgradeIsOn and al and not IntoOrbit then if ar==0 then R=true;cE()al=false;an=true else al=false;cB()end end;if an and CustomTarget~=nil and(as<HoldAltitude+250 and as>HoldAltitude-250)and bs*3.6>b7-250 and d(bu)<25 and ar>=0.1 and(CustomTarget.position-bv):len()>2000+as then cB()an=false end;if VertTakeOff then b0=true;local kH=HoldAltitude;if bu<-30 then a2="Unable to achieve lift. Safety Landing."af=0;b0=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and by or HoldAltitude<planet.spaceEngineMinAltitude then if by then kH=antigrav.getBaseAltitude()end;if as<kH-100 then b8=0;af=15;BrakeIsOn=false elseif bu>0 then BrakeIsOn=true;af=0 elseif bu<-30 then BrakeIsOn=true;af=15 elseif as>=kH then if by then if Autopilot or VectorToTarget then cw()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"c3("aggLk","AG")else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"c3("vtoc","VT")cw()end;af=0 end else if ar>0.08 then b8=0;BrakeIsOn=false;af=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bk then b8=0;af=20 else af=0;b8=36;cp(3500)end else b0=autoRollPreference;IntoOrbit=true;bi=false;CancelIntoOrbit=false;bc=false;ba=nil;bb=nil;if bh==nil then bh=planet end;bg=kH;bf=true;VertTakeOff=false end end;if b8~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local kI=r(b8-bB,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(kI)local kJ=r(vTpitchPID:get(),-1,1)U=kJ end end;if IntoOrbit then local kv;local kK=false;local kL=ct(bg)if bh==nil then bh=planet;if VectorToTarget then bh=ac end end;if not bf then bg=e(bh.radius+bh.surfaceMaxAltitude+LowOrbitHeight)if bh.hasAtmosphere then bg=e(bh.radius+bh.noAtmosphericDensityAltitude+LowOrbitHeight)end;bf=true end;if be.VectorToTarget then kv=CustomTarget.position-bv end;local kM,kN=aU(bh):escapeAndOrbitalSpeed((bv-bh.center):len()-bh.radius)local kO=bC;if not bc then local kP=false;local kQ=false;cm(0)bb=0;b9="Aligning to orbital path - OrbitHeight: "..kL;if be.VectorToTarget then kp(kv:normalize():project_on_plane(bt))kK=bo:dot(kv:project_on_plane(bn):normalize())>0.95 else kp(br)kK=kB<0.5;if bs<150 then kK=true end end;U=0;ba=0;if bB<=ba+1 and bB>=ba-1 then kP=true else kP=false end;if kO<=bb+1 and kO>=bb-1 then kQ=true else kQ=false end;if kP and kQ and kK then ba=nil;bb=nil;bc=true end else if be.VectorToTarget then kp(kv:normalize():project_on_plane(bt))elseif bs>150 then kp(br)end;U=0;if be.VectorToTarget then local a8,_=aS.computeDistanceAndTime(bs,b7/3.6,av,0,0,LastMaxBrake)if bi and kv:len()>15000+a8+as then b9="Orbiting to Target"if as-100<=bh.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bh.noAtmosphericDensityAltitude then bi=false end elseif bi or kv:len()<15000+a8+as then a2="Orbit complete, proceeding with reentry"c3("orCom","OB")AutopilotTargetCoords=CustomTarget.position;R=true;an=true;be.VectorToTarget,be.AutopilotAlign=false,false;cx()cE()return end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bg*0.9 and as<bg*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bg*0.99 and orbit.apoapsis.altitude>=bg*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bi then if bi then BrakeIsOn=false;cm(0)ba=0;if not be.VectorToTarget then a2="Orbit complete"c3("orCom","OB")cx()end else bm=bm+1;if bm>=2 then bi=true end end else b9="Adjusting Orbit - OrbitHeight: "..kL;bd=true;cp(kN*3.6+1)local kR=bg-as;if VSpdPID==nil then VSpdPID=pid.new(0.1,0,1*0.1)end;VSpdPID:inject(kR-bu*r(utils.smoothstep(2000-kR,-2000,2000)^6*10,1,10))ba=r(VSpdPID:get(),-60,60)end end else local kS=2.75;local kT=d(A(kM*kS))local kU=kT%50;if kU>0 then kT=kT-kU+50 end;BrakeIsOn=false;if as<bg*0.8 then b9="Escaping planet gravity - OrbitHeight: "..kL;ba=utils.map(bu,200,0,-15,80)elseif as>=bg*0.8 and as<bg*1.15 then b9="Approaching orbital corridor - OrbitHeight: "..kL;kT=kT*0.75;ba=utils.map(bu,100,-100,-15,65)elseif as>=bg*1.15 and as<bg*1.5 then b9="Approaching orbital corridor - OrbitHeight: "..kL;kT=kT*0.75;if bu<0 or bd then ba=utils.map(as,bg*1.5,bg*1.01,-30,0)else ba=utils.map(as,bg*0.99,bg*1.5,0,30)end elseif as>bg*1.5 then b9="Reentering orbital corridor - OrbitHeight: "..kL;ba=-65;local kV=utils.map(bu,-150,-400,1,0.55)kT=kT*kV end;cp(e(kT))end end;if ba~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kW=ba-bB;OrbitPitchPID:inject(kW)local kX=r(OrbitPitchPID:get(),-0.5,0.5)U=kX end end;if Autopilot and ar==0 and not al then local function kY(bT,orbit)system.print(bT)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cm(0)P=false;a2=bT;c3("apCom","AP")if orbit or al then if orbit and AutopilotTargetOrbit~=nil and not al then if not as or as==0 then return end;bg=as;bf=true end;cx()end end;local kZ,k_=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local l0=(CustomTarget.position-ac.center):normalize()local l1=l0:project_on_plane((ac.center-bv):normalize()):normalize()local l2=ac.center+l1*(ac.radius+AutopilotTargetOrbit)local l3=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bv-l2):len()<(bv-l3):len()then kZ=l2 else kZ=l3;AutopilotEndSpeed=0 end;AutopilotTargetCoords=kZ;aX.showWayPoint(ac,AutopilotTargetCoords)k_=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then if not TargetSet then AutopilotPlanetGravity=0;k_=true;AutopilotRealigned=true;TargetSet=true;kZ=CustomTarget.position+(bv-CustomTarget.position):normalize()*AutopilotSpaceDistance;AutopilotTargetCoords=kZ end elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local l0=(bv+br*100000-ac.center):normalize()local l1=l0:project_on_plane((ac.center-bv):normalize()):normalize()if l1:len()<1 then l0=(bv+bo*100000-ac.center):normalize()l1=l0:project_on_plane((ac.center-bv):normalize()):normalize()end;kZ=ac.center+l1*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kZ;TargetSet=true;k_=true;AutopilotRealigned=true;aX.showWayPoint(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kZ)-bv):len()local bZ,b_,c0=aR:getPlanetarySystem(0):castIntersections(bv,br:normalize(),function(c1)if c1.noAtmosphericDensityAltitude>0 then return c1.radius+c1.noAtmosphericDensityAltitude else return c1.radius+c1.surfaceMaxAltitude*1.5 end end)local c2=b_;if c0~=nil and b_~=nil then c2=math.min(c0,b_)end;if c2~=nil and c2<AutopilotDistance and bZ.name==ac.name then AutopilotDistance=c2 end;local kG=true;local l4=(ac.center-(bv+vec3(br):normalize()*AutopilotDistance)):len()-ac.radius;local is=ct(l4)u(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..is..'"}')local a8,a9;if not TurnBurn then a8,a9=j_(bs)else a8,a9=k1(bs)end;if bs>50 and AutopilotAccelerating then local kv=vec3(kZ)-bv;local l5=r(math.deg(k4(bn,br:normalize(),kv:normalize()))*bs/500,-90,90)local l6=r(math.deg(k4(bp,br:normalize(),kv:normalize()))*bs/500,-90,90)if d(l5)<20 and d(l6)<20 then l5=l5*2;l6=l6*2 end;if d(l5)<2 and d(l6)<2 then l5=l5*2;l6=l6*2 end;local kB=-math.deg(k4(bn,bo,br:normalize()))local kC=-math.deg(k4(bp,bo,br:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(l6-kC)local l7=r(apPitchPID:get(),-1,1)U=U+l7;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(l5-kB)local l8=r(apYawPID:get(),-1,1)V=V+l8;k_=true;if d(l5)>2 or d(l6)>2 then if AutopilotStatus~="Adjusting Trajectory"then AutopilotStatus="Adjusting Trajectory"c3("apAdj","AP")end else if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c3("apAcc","AP")end end elseif AutopilotAccelerating and bs<=50 then kp((kZ-bv):normalize())end;if l4<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=aU(ac):escapeAndOrbitalSpeed(l4)end end;if Autopilot and not AutopilotAccelerating and not AutopilotCruising and not AutopilotBraking then local bZ,c2=bX((AutopilotTargetCoords-bv):normalize())if ac.name~=planet.name then if bZ~=nil and ac.name~=bZ.name and c2<AutopilotDistance then a2="Collision with "..bZ.name.." in "..ct(c2).."\nClear LOS to continue."ai=5;kj=true else kj=false;a2=""end end end;if not kj then if not AutopilotCruising and not AutopilotBraking and not k_ then kG=kp((kZ-bv):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then kG=kp(-vec3(br):normalize())end end;if AutopilotAccelerating then if not P then BrakeIsOn=false;cm(AutopilotInterplanetaryThrottle)K=A(AutopilotInterplanetaryThrottle,2)P=true end;local l9=unit.getThrottle()if AtmoSpeedAssist then l9=K end;local la=99999;local jk=-vec3(core.getWorldAcceleration()):dot(br:normalize())local lb=r(br:dot((kZ-bv):normalize()),0,bs)if lb>0 or jk>0 then la=aS.computeTravelTime(lb,jk,AutopilotDistance-a8)end;if bq:len()>=MaxGameVelocity or l9==0 and P or warmup/4>la then AutopilotAccelerating=false;if AutopilotStatus~="Cruising"then c3("apCru","AP")AutopilotStatus="Cruising"end;AutopilotCruising=true;cm(0)end;local lc=AutopilotDistance;if lc<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<k3 and bI>2000 then cB()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;k3=bI else k3=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c3("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true;cm(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then cm(1,true)end;local _,kN=aU(ac):escapeAndOrbitalSpeed((bv-planet.center):len()-planet.radius)local kv;if CustomTarget~=nil then kv=CustomTarget.position-bv end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bs<50 then kY("Autopilot complete, arrived at space location")BrakeIsOn=true;Y=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bs<=kN and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then kY("Autopilot complete, commencing reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,AutopilotTargetCoords)elseif CustomTarget.planetname~="Space"and orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then if AutopilotStatus~="Circularizing"then c3("apCir","AP")AutopilotStatus="Circularizing"end;if bs<=kN then if CustomTarget~=nil then if br:normalize():dot(kv:normalize())>0.4 then if AutopilotStatus~="Orbiting to Target"then c3("apOrb","OB")AutopilotStatus="Orbiting to Target"end;if not WaypointSet then BrakeIsOn=false;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=true end else kY("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;al=true;aX.showWayPoint(ac,CustomTarget.position)WaypointSet=false end else kY("Autopilot completed, setting orbit",true)Y=0 end end elseif AutopilotStatus=="Circularizing"then kY("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then local lc=AutopilotDistance;if lc<=a8 or PreventPvP and bI<=a8+10000 and bH then if PreventPvP and bI<=a8+10000 and bH then if bI<k3 and bI>2000 then cB()a2="Autopilot cancelled to prevent crossing PvP Line"BrakeIsOn=true;k3=bI else k3=bI;return end end;AutopilotAccelerating=false;if AutopilotStatus~="Braking"then c3("apBrk","AP")AutopilotStatus="Braking"end;AutopilotBraking=true end;local l9=unit.getThrottle()if AtmoSpeedAssist then l9=K end;if l9>0 then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c3("apAcc","AP")end;AutopilotCruising=false end else if kG then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bp;AutopilotShipUp=bn;AutopilotShipRight=bp end;AutopilotRealigned=true elseif kG and not kj then AutopilotAccelerating=true;if AutopilotStatus~="Accelerating"then AutopilotStatus="Accelerating"c3("apAcc","AP")end;if not P then cm(AutopilotInterplanetaryThrottle,true)K=A(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then a2="Autopilot complete, starting reentry"c3("apCom","AP")AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;cm(0)P=false;ProgradeIsOn=true;al=true;aX.showWayPoint(ac,CustomTarget.position)end;if a0 then b0=true;local l6=0;local eH=bv+vec3(unit.getMasterPlayerRelativePosition())local ld=eH-bv;local le=vec3(ld):project_on(bo):len()local lf=vec3(ld):project_on(bp):len()local aj=y(le*le+lf*lf)kp(ld:normalize())local lg=40;local lh=aj<lg;local li=100;local lj=r((aj-lg)/2,10,li)U=0;local kG=d(V)<0.1;if kG and bs<lj and not lh then BrakeIsOn=false;l6=-20 else BrakeIsOn=true;l6=0 end;local lk=0;if d(l6-bB)>lk then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(l6-bB)local l7=pitchPID:get()U=l7 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local ll=LastMaxBrakeInAtmo;if ll then ll=ll*r(bs/100,0.1,1)*ar else ll=LastMaxBrake end;if ar<0.01 then ll=LastMaxBrake end;local lm=bo:project_on_plane(bt):normalize():dot(br)local ln=vec3(core.getWorldAirFrictionAcceleration())local lo=ln:len()*av;if lm>100 then a8,a9=aS.computeDistanceAndTime(lm,100,av,0,0,ll)local lp,lq=aS.computeDistanceAndTime(100,0,av,0,0,ll*0.55)a8=a8+lp else a8,a9=aS.computeDistanceAndTime(lm,0,av,0,0,ll*0.55)end;local kR=HoldAltitude-as-bu;local lr=200+bs;if Reentry or al then minMax=2000+bs end;local ls=1;if AutoTakeoff then ls=r(bs/100,0.1,1)end;local l6=(utils.smoothstep(kR,-lr,lr)-0.5)*2*MaxPitch*ls;if not Reentry and not al and not VectorToTarget and bo:dot(br:normalize())<0.99 then l6=(utils.smoothstep(kR,-lr*r(20-19*ar*10,1,20),lr*r(20-19*ar*10,1,20))-0.5)*2*MaxPitch*r(2-ar*10,1,2)*ls end;if not AltitudeHold then l6=0 end;if LockPitch~=nil then if bM and not IntoOrbit then l6=LockPitch else LockPitch=nil end end;b0=true;local lt=U;if Reentry then local lu=e(b7)local lv,lw=aS.computeDistanceAndTime(bs,lu/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)lv=lv==-1 and 5000 or lv;local lx=as-(planet.noAtmosphericDensityAltitude+lv)local ly=as>planet.noAtmosphericDensityAltitude+lv*1.35;if ly then l6=ReEntryPitch;if bs<=lu/3.6 and bs>lu/3.6-10 and d(br:normalize():dot(bo))>0.9 and not bA then O=false;cm(1)end elseif bA and not ly and not aq then cp(lu,true)end;if bA then if bs>lu/3.6 and not ly then BrakeIsOn=true else BrakeIsOn=false end else BrakeIsOn=false end;if bu>0 then BrakeIsOn=true end;if not R then l6=-80;if ar>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;l6=0;b0=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ly then b0=true elseif not ly then if not aq and(bA or s:getTargetSpeed(axisCommandId.longitudinal)~=lu)then cp(lu)end;if bs<lu/3.6+1 then BrakeIsOn=false;R=false;Reentry=false;b0=true end end end;if bs>Q and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then kp(vec3(br))end;if bK or(VectorToTarget or am)and AutopilotTargetIndex>0 and ar>0.01 then local kv;if bK then if type(bK)=="table"then kv=bK elseif bK<3 and bK>0 then kv=-bt:cross(br)*5000 elseif bK>=3 then kv=bt:cross(br)*5000 elseif bK<0 then kv=br*25000 end elseif CustomTarget~=nil then kv=CustomTarget.position-bv else kv=ac.center-bv end;local l5=math.deg(k4(bt:normalize(),br,kv))*2;local lz=math.rad(d(bC))if bs>minRollVelocity and ar>0.01 then local lA=1000+bs;local lB=(utils.smoothstep(kR-bu*10,-lA,lA)-0.5)*2*MaxPitch;local lC=r(90-lB,0,180)b4=r(l5*2,-lC,lC)local lD=l5;l5=r(r(l5,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(lz)+4*(bB-l6)*math.sin(math.rad(bC)),-YawStallAngle*0.80,YawStallAngle*0.80)local lE=1;if b4~=0 then lE=d(lz/b4)end;lE=(90-r(d(b4-bC),0,90))/90;local lF=l6;if d(bC)>90 then lF=-lF end;l6=lE*r(r(lF*math.cos(lz),-PitchStallAngle*0.8,PitchStallAngle*0.8)+d(r(d(lD)*math.sin(lz),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else b4=0;l5=r(l5,-YawStallAngle*0.80,YawStallAngle*0.80)end;local lG=kB-l5;if bK and d(lG)<=0.0001 and(type(bK)=="table"or type(bK)~="table"and bK<0 and d(bC)<1)then if bK==-2 then cy()end;bK=nil;c3("180Off","BR")return end;if not b2 and bs>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(lG)local l8=r(yawPID:get(),-1,1)V=V+l8 elseif aq and ao>-1 or bs<minRollVelocity then kp(kv)elseif b2 and ar>0.01 then if(kB<-YawStallAngle or kB>YawStallAngle)and ar>0.01 then kp(br)end;if(kC<-PitchStallAngle or kC>PitchStallAngle)and ar>0.01 then l6=r(bB-kC,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not am then local kH=planet:getAltitude(CustomTarget.position)local lx=kv:project_on_plane(bt):len()StrongBrakes=true;if not am and not Reentry and lx<=a8 and(br:project_on_plane(bt):normalize():dot(kv:project_on_plane(bt):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cm(0)if AltitudeHold then cy()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(lm<0.1 or lx<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<lx)then if not by then c3("bklOn","BL")BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"bN=false end;LastDistanceToTarget=lx end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local kv=CustomTarget.position-bv;local kH=planet:getAltitude(CustomTarget.position)local lx=y(kv:len()^2-(as-kH)^2)local ll=LastMaxBrakeInAtmo;if ll then a8,a9=aS.computeDistanceAndTime(bs,0,av,0,0,ll/2)StrongBrakes=true;if lx<=a8+bs*kA/2 and br:project_on_plane(bt):normalize():dot(kv:project_on_plane(bt):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;al=false;an=true;Autopilot=false;cE()end end;LastDistanceToTarget=lx end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or IntoOrbit or Reentry)then if not bi and not IntoOrbit then bg=HoldAltitude;bf=true;if VectorToTarget then be.VectorToTarget=true end;cx()VectorToTarget=false;bc=true end end;if b2 and ar>0.01 and ao==-1 and bs>minRollVelocity and VectorStatus~="Finalizing Approach"then kp(br)l6=r(bB-kC,bB-PitchStallAngle*0.80,bB+PitchStallAngle*0.80)end;U=lt;local kd=-1;if BrakeLanding then l6=0;local lH=false;local lI=30;if aT~=nil and aT>0 then local lJ=r(ar,0.4,2)local ll=LastMaxBrakeInAtmo*r(bs/100,0.1,1)*lJ;local lK=aT*lJ+ll-ji;local lL=ll/2-ji;local lM=bs-y(d(lL/2)*20/(0.5*av))*utils.sign(lL)if lM<0 then lM=0 end;local lN;if bs>100 then local lO,_=aS.computeDistanceAndTime(bs,100,av,0,0,ll)local lP,_=aS.computeDistanceAndTime(100,0,av,0,0,y(ll))lN=lO+lP else lN=aS.computeDistanceAndTime(bs,0,av,0,0,y(ll))end;if lN<20 then BrakeIsOn=false else local lQ=0;if lM>100 then local lR,_=aS.computeDistanceAndTime(lM,100,av,0,0,lK)local lS,_=aS.computeDistanceAndTime(100,0,av,0,0,aT*lJ+y(ll)-ji)lQ=lR+lS else lQ,_=aS.computeDistanceAndTime(lM,0,av,0,0,aT*lJ+y(ll)-ji)end;lQ=(lQ+15+bs*kA)*1.1;local lT=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if lT then local kH=planet:getAltitude(CustomTarget.position)local lU=as-kH-100;local kv=CustomTarget.position-bv;local lV=y(kv:len()^2-(as-kH)^2)if lV>100 then lT=false elseif lU<=lQ or lQ==-1 then BrakeIsOn=true;lH=true else BrakeIsOn=false;lH=true end end;if not lT and CalculateBrakeLandingSpeed then if lQ>=lI then BrakeIsOn=true else BrakeIsOn=false end;lH=true end end end;if not bA then cm(0)end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)stablized=true;kd=ao;if kd>-1 then b0=autoRollPreference;if bs<1 or br:normalize():dot(bt)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;if S then a.control.extendLandingGears()c3("grOut","LG",1)end;s:setTargetGroundAltitude(LandingGearGroundHeight)af=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and br:normalize():dot(-h6)<0.999 then BrakeIsOn=true elseif bu<-brakeLandingRate and not lH then BrakeIsOn=true elseif not lH then BrakeIsOn=false end end;if AutoTakeoff or am then local bZ,c0,b_;if AutopilotTargetCoords~=nil then bZ,c0,b_=aR:getPlanetarySystem(0):castIntersections(bv,(AutopilotTargetCoords-bv):normalize(),function(c1)return c1.radius+c1.noAtmosphericDensityAltitude end)end;if by then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;cm(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(l6)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if bA and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif am and bs<Q then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cm(0)elseif am then cm(0)BrakeIsOn=true end elseif am and ar==0 and ac~=nil and(bZ==nil or bZ.name==ac.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if not bA then cm(0)end;AutopilotAccelerating=true end end;local lW=ao>-1;local lX=bB;if(VectorToTarget or am or bK)and not lW and bs>minRollVelocity and ar>0.01 then local lz=math.rad(d(bC))lX=bB*d(math.cos(lz))+kC*math.sin(lz)end;local lY=r(l6-lX,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then lY=r(l6-lX,-85,MaxPitch)elseif ar<0.01 then lY=r(l6-lX,-MaxPitch,MaxPitch)end;if d(bC)<5 or VectorToTarget or bK or BrakeLanding or lW or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lY)local l7=pitchPID:get()U=U+l7 end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;ao=k8()return cA end;function script.onStart()local lZ={}local l_={}local m0=false;local function m1()local function m2(m3)local m4=dbHud_1.hasKey;for cP,cQ in pairs(m3)do if m4(cQ)then local d5=g(dbHud_1.getStringValue(cQ))if d5~=nil then _G[cQ]=d5;m0=true end end end end;if dbHud_1 then if not useTheseSettings then m2(c9())coroutine.yield()m2(c)else m2(c)a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ai=5;m0=false end;coroutine.yield()if m0 then a2="Loaded Saved Variables"aG=ResolutionX;aH=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b0=autoRollPreference;b7=AtmoSpeedLimit;ay=[[rgb(]]..e(H+0.5)..","..e(J+0.5)..","..e(I+0.5)..[[)]]az=[[rgb(]]..e(H*0.9+0.5)..","..e(J*0.9+0.5)..","..e(I*0.9+0.5)..[[)]]elseif not useTheseSettings then a2="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then a2="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else a2="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<E then LastMaxBrakeInAtmo=0 end;LastStartTime=E;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ai=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function m5()local function m6(m7,m8)if m7>m8 then m8=m7 end;local m9,ma=0,0;if ContainerOptimization>0 then m9=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then ma=FuelTankOptimization*0.05 end;m8=m8*(1-(m9+ma))return m8 end;local mb=core.getElementNameById;local mc=fuelX~=0 and fuelY~=0;for cP in pairs(at)do local type=core.getElementTypeById(at[cP])if o(type,'^.*Atmospheric Engine$')then if o(tostring(core.getElementTagsById(at[cP])),'^.*vertical.*$')and core.getElementForwardById(at[cP])[3]>0 then bx=true end end;if o(type,'^.*Space Engine$')then bl=true;if o(tostring(core.getElementTagsById(at[cP])),'^.*vertical.*$')then local md=core.getElementForwardById(at[cP])if md[3]<0 then bj=true else bk=true end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local me=j(at[cP])if me>10000 then G=110 elseif me>1000 then G=55 elseif me>150 then G=27 end end;aL=aL+j(at[cP])if mc and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local me=j(at[cP])local jo=l(at[cP])local m7=0;local gW=q()if type=="Atmospheric Fuel Tank"then local m8=400;local mf=35.03;if me>10000 then m8=51200;mf=5480 elseif me>1300 then m8=6400;mf=988.67 elseif me>150 then m8=1600;mf=182.67 end;m7=jo-mf;if fuelTankHandlingAtmo>0 then m8=m8+m8*fuelTankHandlingAtmo*0.2 end;m8=m6(m7,m8)aI[#aI+1]={at[cP],mb(at[cP]),m8,mf,m7,gW}end;if type=="Rocket Fuel Tank"then local m8=320;local mf=173.42;if me>65000 then m8=40000;mf=25740 elseif me>6000 then m8=5120;mf=4720 elseif me>700 then m8=640;mf=886.72 end;m7=jo-mf;if fuelTankHandlingRocket>0 then m8=m8+m8*fuelTankHandlingRocket*0.1 end;m8=m6(m7,m8)aK[#aK+1]={at[cP],mb(at[cP]),m8,mf,m7,gW}end;if type=="Space Fuel Tank"then local m8=600;local mf=35.03;if me>10000 then m8=76800;mf=5480 elseif me>1300 then m8=9600;mf=988.67 elseif me>150 then m8=2400;mf=182.67 end;m7=jo-mf;if fuelTankHandlingSpace>0 then m8=m8+m8*fuelTankHandlingSpace*0.2 end;m8=m6(m7,m8)aJ[#aJ+1]={at[cP],mb(at[cP]),m8,mf,m7,gW}end end end;if not bx then VertTakeOff,VertTakeOffEngine=false,false end end;local function mg()if gyro~=nil then ax=gyro.getState()==1 end;if not stablized then s:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then w(1)else w(0)end;if door and(aq or not aq and as<10000)then for _,cQ in pairs(door)do cQ.toggle()end end;if switch then for _,cQ in pairs(switch)do cQ.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cQ in pairs(forcefield)do cQ.toggle()end end;if antigrav then by=antigrav.getState()==1;if by and not ExternalAGG then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if ao~=-1 or not aq and bq:len()<50 then BrakeIsOn=true;GearExtended=true;if S then a.control.extendLandingGears()end else BrakeIsOn=false end;s:setTargetGroundAltitude(b1)if aq and ao~=-1 then aT=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function mh(mi,mj,mk,ml,ch,ci,mm,mn,mo,mp)local mq={enableName=mi,disableName=mj,width=mk,height=ml,x=ch,y=ci,toggleVar=mm,toggleFunction=mn,drawCondition=mo,hovered=false}if mp then table.insert(l_,mq)else table.insert(lZ,mq)end;return mq end;local function mr(ms)if not bD then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif ms=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif ms=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif ms=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bE=c9(ms)showHud=false else bE={}showHud=true end end;local function mt()bD=not bD;if bD then aF=l_;a2="Hold SHIFT to see Settings"bF=showHud else aF=lZ;a2="Hold SHIFT to see Control Buttons"mr()showHud=bF end end;local function mu(cQ)_G[cQ]=not _G[cQ]if _G[cQ]then a2=cQ.." set to true"else a2=cQ.." set to false"end;if cQ=="showHud"then bF=_G[cQ]elseif cQ=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local function mv()local mw=50;local mx=340;local ch=500;local ci=aH/2-400;local my=0;for cP,cQ in pairs(c9("boolean"))do if type(_G[cQ])=="boolean"then mh(cQ,cQ,mx,mw,ch,ci,function()return _G[cQ]end,function()mu(cQ)end,function()return true end,true)ci=ci+mw+20;if my==9 then ch=ch+mx+20;ci=aH/2-400;my=0 else my=my+1 end end end;mh("Control View","Control View",mx,mw,10,aH/2-500,function()return true end,mt,function()return true end,true)mh("View Handling Settings",'Hide Handling Settings',mx,mw,10,aH/2-(500-mw),function()return showHandlingVariables end,function()mr("handling")end,function()return true end,true)mh("View Hud Settings",'Hide Hud Settings',mx,mw,10,aH/2-(500-mw*2),function()return showHudVariables end,function()mr("hud")end,function()return true end,true)mh("View Physics Settings",'Hide Physics Settings',mx,mw,10,aH/2-(500-mw*3),function()return showPhysicsVariables end,function()mr("physics")end,function()return true end,true)end;local function mz()local function jT()local position=bv;local g4=planet.name..". "..#SavedLocations;if bP[1]then local dh,_=bP[1].getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dh~=nil and dh~=""then g4=g4 .." "..bP[1].getConstructName(dh)end end;return aW.AddNewLocation(g4,position,false,true)end;local function mA()TurnBurn=not TurnBurn end;local function mB(mC)if mC==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function mD()aW.UpdatePosition()end;local function jS()aW.ClearCurrentPosition()end;local function mE(fQ)local g4=AutopilotTargetName;if fQ~=nil and type(fQ)=="number"then if fQ==0 then return"None"end;g4=bG[fQ].name end;if g4==nil then g4=CustomTarget.name end;if g4==nil then g4="None"end;return g4 end;local function mF(fQ)return"Engage Autopilot: "..mE(fQ)end;local function mG(fQ)return"Disable Autopilot: "..mE(fQ)end;local function mH()if m()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)c3("folOn","F")else c3("folOff","F")BrakeIsOn=true;b0=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local mw=50;local mx=260;local mI=mh("Enable Brake Toggle","Disable Brake Toggle",mx,mw,aG/2-mx/2,aH/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)mh("Align Prograde","Disable Prograde",mx,mw,aG/2-mx/2-50-mI.width,aH/2-mw+380,function()return ProgradeIsOn end,function()mB(1)end)mh("Align Retrograde","Disable Retrograde",mx,mw,aG/2-mx/2+mI.width+50,aH/2-mw+380,function()return RetrogradeIsOn end,mB,function()return ar==0 end)apbutton=mh(mF,mG,600,60,aG/2-600/2,aH/2-60/2-400,function()return Autopilot or VectorToTarget or am or IntoOrbit end,function()end)local i;local function mJ(mK)local fQ=bS+mK;if fQ>#bG then fQ=fQ-#bG-1 end;if fQ<0 then fQ=#bG+fQ end;return fQ end;apExtraButtons={}for i=0,10 do local button=mh(function(cs)local fQ=mJ(cs.apExtraIndex)if Autopilot or VectorToTarget or am or IntoOrbit then return"Redirect: "..mE(fQ)end;return mF(fQ)end,function(cs)local fQ=mJ(cs.apExtraIndex)return mG(fQ)end,600,60,aG/2-600/2,aH/2-60/2-400+60*i,function(cs)local fQ=mJ(cs.apExtraIndex)return fQ==AutopilotTargetIndex and(Autopilot or VectorToTarget or am or IntoOrbit)end,function(cs)local fQ=mJ(cs.apExtraIndex)local mL=AutopilotTargetIndex==fQ;AutopilotTargetIndex=fQ;aW.UpdateAutopilotTarget()cB()if not mL and not(Autopilot or VectorToTarget or am or IntoOrbit)then cB()end end,function()return bR end)button.apExtraIndex=i;apExtraButtons[i]=button end;mh("Save Position","Save Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,jT,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)mh("Update Position","Update Position",200,apbutton.height,apbutton.x+apbutton.width+30,apbutton.y,function()return false end,mD,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)mh("Clear Position","Clear Position",200,apbutton.height,apbutton.x-200-30,apbutton.y,function()return true end,jS,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)mw=60;mx=300;local ch=10;local ci=aH/2-500;mh("Show Help","Hide Help",mx,mw,ch,ci,function()return showHelp end,function()showHelp=not showHelp end)ci=ci+mw+20;mh("View Settings","View Settings",mx,mw,ch,ci,function()return true end,mt)local ci=aH/2-300;mh("Enable Turn and Burn","Disable Turn and Burn",mx,mw,ch,ci,function()return TurnBurn end,mA)mh("Horizontal Takeoff Mode","Vertical Takeoff Mode",mx,mw,ch+mx+20,ci,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bx end)ci=ci+mw+20;mh("Show Orbit Display","Hide Orbit Display",mx,mw,ch,ci,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)mh("Engage Orbiting","Cancel Orbiting",mx,mw,ch+mx+20,ci,function()return IntoOrbit end,cx,function()return ar==0 and bM end)ci=ci+mw+20;mh("Glide Re-Entry","Cancel Glide Re-Entry",mx,mw,ch,ci,function()return Reentry end,function()al=1;mB(1)end,function()return planet.hasAtmosphere and not aq end)mh("Parachute Re-Entry","Cancel Parachute Re-Entry",mx,mw,ch+mx+20,ci,function()return Reentry end,cE,function()return planet.hasAtmosphere and not aq end)ci=ci+mw+20;mh("Engage Follow Mode","Disable Follow Mode",mx,mw,ch,ci,function()return a0 end,mH,function()return m()==1 end)mh("Enable Repair Arrows","Disable Repair Arrows",mx,mw,ch+mx+20,ci,function()return aM end,function()aM=not aM;if aM then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return m()==1 end)ci=ci+mw+20;if not ExternalAGG then mh("Enable AGG","Disable AGG",mx,mw,ch,ci,function()return by end,cF,function()return antigrav~=nil end)end;mh(function()return f("Switch IPH Mode - Current: %s",iphCondition)end,function()return f("IPH Mode: %s",iphCondition)end,mx*2,mw,ch,ci,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;a2="IPH Mode: "..iphCondition end)ci=ci+mw+20;mh(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,mx*2,mw,ch,ci,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;a2="New Control Scheme: "..userControlScheme end)end;local function mM()local mN={}local function mO()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local mP={[1]=4480,[6]=4480,[7]=6270}for mQ,mR in pairs(b)do b[mQ][0]=mO()b[mQ][0].systemId=mQ;mN[mQ]={}for mS,planet in pairs(b[mQ])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=mP[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=mQ;planet.bodyId=planet.id;mN[mQ][mS]=planet end end;aQ=cR()aR=aQ(mN)aS=eb()aU=eF()aY=f2()aV=gf()aW=jG()end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})m1()coroutine.yield()m5()coroutine.yield()aX=jZ()mg()mv()mz()aF=lZ;coroutine.yield()mM()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)bP[1]=nil;if radar_1 then bP[1]=radar_1;aY.pickType()end;c3("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cQ in pairs(door)do cQ.toggle()end end;if switch then for _,cQ in pairs(switch)do cQ.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cQ in pairs(forcefield)do cQ.toggle()end end;cL()if button then button.activate()end;if SetWaypointOnExit then aX.showWayPoint(planet,bv)end;c3("stop","SU")end;function script.onTick(mT)local mU=nil;if mT=="contact"then if not contactTimer then contactTimer=0 end;if E>contactTimer+10 then a2="Radar Contact"c3("rdrCon","RC")contactTimer=E end;unit.stopTimer("contact")elseif mT=="tenthSecond"then local function mV()local mW=system.createData;local mX=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=mX(panelInterplanetary,"value")interplanetaryHeaderText=mW('{"label": "Target Planet", "value": "N/A", "unit":""}')v(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=mX(panelInterplanetary,"value")widgetDistanceText=mW('{"label": "distance", "value": "N/A", "unit":""}')v(widgetDistanceText,widgetDistance)widgetTravelTime=mX(panelInterplanetary,"value")widgetTravelTimeText=mW('{"label": "Travel Time", "value": "N/A", "unit":""}')v(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=mX(panelInterplanetary,"value")widgetMaxMassText=mW('{"label": "Maximum Mass", "value": "N/A", "unit":""}')v(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=mX(panelInterplanetary,"value")widgetTargetOrbitText=mW('{"label": "Target Altitude", "value": "N/A", "unit":""}')v(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=mX(panelInterplanetary,"value")widgetCurBrakeDistanceText=mW('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=mX(panelInterplanetary,"value")widgetCurBrakeTimeText=mW('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=mX(panelInterplanetary,"value")widgetMaxBrakeDistanceText=mW('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=mX(panelInterplanetary,"value")widgetMaxBrakeTimeText=mW('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=mX(panelInterplanetary,"value")widgetTrajectoryAltitudeText=mW('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)v(widgetCurBrakeTimeText,widgetCurBrakeTime)v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function mY()t(panelInterplanetary)panelInterplanetary=nil end;local function mZ()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bv):len()else AutopilotDistance=(CustomTarget.position-bv):len()end end;local eD=bs;local l9=unit.getThrottle()/100;if AtmoSpeedAssist then l9=K end;local m_,n0=aS.computeDistanceAndTime(bs,MaxGameVelocity,av,a:maxForceForward()*l9,warmup,0)local a8,a9;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,n1;if not TurnBurn and eD>0 then _,n1=aX.GetAutopilotBrakeDistanceAndTime(eD)else _,n1=aX.GetAutopilotTBBrakeDistanceAndTime(eD)end;local n2=0;local n3=0;if AutopilotCruising or not Autopilot and eD>5 then n3=aS.computeTravelTime(eD,0,AutopilotDistance)elseif a8+m_<AutopilotDistance then n2=AutopilotDistance-(a8+m_)n3=aS.computeTravelTime(8333.0556,0,n2)else local n4=(AutopilotDistance-a8)/m_;m_=AutopilotDistance-a8;n0=n0*n4 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return n3 elseif AutopilotBraking then return n1 elseif AutopilotCruising then return n3+n1 else return n0+a9+n3 end end;local function n5(ji,n6)if ji==nil then ji=core.g()end;ji=A(ji,5)if n6~=nil and n6 or(mU==nil or mU~=ji)then local eD=bq:len()local n7=g(unit.getData()).maxBrake;if n7~=nil and n7>0 and aq then n7=n7/r(eD/100,0.1,1)n7=n7/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+n7)/2 else LastMaxBrakeInAtmo=n7 end end end;if n7~=nil and n7>0 then LastMaxBrake=n7 end;mU=ji end end;n5(nil,true)if bz~=nil then if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or s:getTargetSpeed(axisCommandId.longitudinal)~=bz then cp(bz)else bz=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then mV()end;if AutopilotTargetName~=nil then local n8=CustomTarget~=nil;local n9=0.5*LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()n9=n9>1000000 and A(n9/1000000,2).." kTons"or A(n9/1000,2).." Tons"u(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=mZ()if n8 and not Autopilot then aj=(bv-CustomTarget.position):len()else aj=(AutopilotTargetCoords-bv):len()end;if not TurnBurn then a8,a9=aX.GetAutopilotBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a8,a9=aX.GetAutopilotTBBrakeDistanceAndTime(bs)aa,ab=aX.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local is=ct(aj)u(widgetDistanceText,'{"label": "distance", "value": "'..is..'"}')u(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cG(travelTime)..'", "unit":""}')is=ct(a8)u(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..is..'"}')u(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cG(a9)..'", "unit":""}')is=ct(aa)u(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..is..'"}')u(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cG(ab)..'", "unit":""}')u(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..f("%s",n9)..'", "unit":""}')is=ct(AutopilotTargetOrbit)u(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..is..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not bA and AtmoSpeedAssist and(AltitudeHold or Reentry or an)then cm(1)BrakeIsOn=false;O=false end end;if ar==0 and WasInAtmo then if u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if u(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then v(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else mY()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;aV.DrawTanks()if shield_1 then aV.DrawShield()end elseif mT=="oneSecond"then local function na(h2)local nb=0;aD=""local nc=aL;local nd=0;local ne=0;local nf=0;local g_=0;local h0=""local ng=core.getElementHitPointsById;for cP in pairs(at)do local me=0;local nh=0;nh=j(at[cP])me=ng(at[cP])nd=nd+me;if me<nh then if me==0 then nf=nf+1 else ne=ne+1 end;if aM and#aA==0 then position=vec3(core.getElementPositionById(at[cP]))local ch=position.x;local ci=position.y;local fx=position.z;table.insert(aA,core.spawnArrowSticker(ch,ci,fx+1,"down"))table.insert(aA,core.spawnArrowSticker(ch,ci,fx+1,"down"))core.rotateSticker(aA[2],0,0,90)table.insert(aA,core.spawnArrowSticker(ch+1,ci,fx,"north"))table.insert(aA,core.spawnArrowSticker(ch+1,ci,fx,"north"))core.rotateSticker(aA[4],90,90,0)table.insert(aA,core.spawnArrowSticker(ch-1,ci,fx,"south"))table.insert(aA,core.spawnArrowSticker(ch-1,ci,fx,"south"))core.rotateSticker(aA[6],90,-90,0)table.insert(aA,core.spawnArrowSticker(ch,ci-1,fx,"east"))table.insert(aA,core.spawnArrowSticker(ch,ci-1,fx,"east"))core.rotateSticker(aA[8],90,0,90)table.insert(aA,core.spawnArrowSticker(ch,ci+1,fx,"west"))table.insert(aA,core.spawnArrowSticker(ch,ci+1,fx,"west"))core.rotateSticker(aA[10],-90,0,90)table.insert(aA,at[cP])end elseif aM and#aA>0 and aA[11]==at[cP]then for gV in pairs(aA)do core.deleteSticker(aA[gV])end;aA={}end end;nb=e(nd/nc*100)if nb<100 then h2[#h2+1]=cg(0,0,"","pbright txt")g_=e(nb*2.55)h0=f("rgb(%d,%d,%d)",255-g_,g_,0)if nb<100 then h2[#h2+1]=cg("50%",1035,"Elemental Integrity: "..nb.."%","txtbig txtmid","fill:"..h0)if nf>0 then h2[#h2+1]=cg("50%",1055,"Disabled Modules: "..nf.." Damaged Modules: "..ne,"txtbig txtmid","fill:"..h0)elseif ne>0 then h2[#h2+1]=cg("50%",1055,"Damaged Modules: "..ne,"txtbig txtmid","fill:"..h0)end end end end;local function ni()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then t(WeaponPanelID)WeaponPanelID=nil end end end;local function nj()local gW=q()local ie=bs;local nk=gW-au;if ie>1.38889 then ie=ie/1000;local nl=ie*(gW-au)TotalDistanceTravelled=TotalDistanceTravelled+nl;ad=ad+nl end;ae=ae+nk;TotalFlightTime=TotalFlightTime+nk;au=gW end;nj()aV.UpdatePipe()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()ni()local h2={}aV.ExtraData(h2)if ShowOdometer then h2=aV.DrawOdometer(h2,ad,TotalDistanceTravelled,ae)end;if ShouldCheckDamage then na(h2)end;ak=table.concat(h2,"")collectgarbage("collect")elseif mT=="fiveSecond"then if not UseSatNav then return end;ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local d5=g(dbHud_1.getStringValue("SavedLocations"))if d5~=nil then _G["SavedLocations"]=d5;local fQ=-1;local jV;for cP,cQ in pairs(SavedLocations)do if cQ.name and cQ.name=="SatNav Location"then fQ=cP;break end end;if fQ~=-1 then jV=SavedLocations[fQ]fQ=-1;for cP,cQ in pairs(b[0])do if cQ.name and cQ.name=="SatNav Location"then fQ=cP;break end end;if fQ>-1 then b[0][fQ]=jV end;aW.UpdateAtlasLocationsList()a2=jV.name.." position updated"end end;for i=1,#bG do if bG[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bG[i].name)aW.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif mT=="msgTick"then local h2={}aV.DisplayMessage(h2,"empty")a2="empty"unit.stopTimer("msgTick")ai=3 elseif mT=="animateTick"then a_=true;aZ=false;ag=0;ah=0;unit.stopTimer("animateTick")elseif mT=="hudTick"then if not planet then return end;local function nm(h2)local nn=e(r(aj/(aG/4)*255,0,255))h2[#h2+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ag,ah,e(H+0.5)+nn,e(J+0.5)-nn,e(I+0.5)-nn)end;local function no()for _,cQ in pairs(aF)do if cQ.hovered then if not cQ.drawCondition or cQ.drawCondition(cQ)then cQ.toggleFunction(cQ)end;cQ.hovered=false end end end;local function np()local function nq(nr,ns,ch,ci,mk,ml)if nr>=ch and nr<=ch+mk and ns>=ci and ns<=ci+ml then return true else return false end end;local ch=ag+aG/2;local ci=ah+aH/2;for _,cQ in pairs(aF)do cQ.hovered=nq(ch,ci,cQ.x,cQ.y,cQ.width,cQ.height)end;if bR then local nt=false;for _,cs in ipairs(apExtraButtons)do if cs.hovered then nt=true;break end end;if apbutton.hovered then nt=true end;bR=nt else bR=apbutton.hovered;if not bR then bS=AutopilotTargetIndex end end end;local function nu(h2)local function nw(h2,nx,hover,ch,ci,ew,ny,nz,nA,nB,nC,button)if type(nB)=="function"then nB=nB(button)end;if type(nC)=="function"then nC=nC(button)end;h2[#h2+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",ch,ci,ew,ny)if nx then h2[#h2+1]=f("%s'",nz)else h2[#h2+1]=nA end;if hover then h2[#h2+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:2'",SafeR,SafeG,SafeB)else h2[#h2+1]=f(" style='stroke:rgb(%d,%d,%d); stroke-width:1'",A(SafeR*0.5,0),A(SafeG*0.5,0),A(SafeB*0.5,0))end;h2[#h2+1]=" rx='5'></rect>"h2[#h2+1]=f("<text x='%f' y='%f' font-size='24' fill='",ch+ew/2,ci+ny/2+5)if nx then h2[#h2+1]="black"else h2[#h2+1]="white"end;h2[#h2+1]="' text-anchor='middle' font-family='Play'>"if nx then h2[#h2+1]=f("%s</text>",nB)else h2[#h2+1]=f("%s</text>",nC)end end;local nD=f("rgb(%d,%d,%d)'",A(SafeR*0.1,0),A(SafeG*0.1,0),A(SafeB*0.1,0))local nE=f("rgb(%d,%d,%d)",A(SafeR*0.8,0),A(SafeG*0.8,0),A(SafeB*0.8,0))local nF=nw;for _,cQ in pairs(aF)do local mj=cQ.disableName;local mi=cQ.enableName;if type(mj)=="function"then mj=mj(cQ)end;if type(mi)=="function"then mi=mi(cQ)end;if not cQ.drawCondition or cQ.drawCondition(cQ)then nF(h2,cQ.toggleVar(cQ),cQ.hovered,cQ.x,cQ.y,cQ.width,cQ.height,nE,nD,mj,mi,cQ)end end end;local nG=A(ResolutionX/2,0)local nH=A(ResolutionY/2,0)local h2={}aV.HUDPrologue(h2)if showHud then aV.UpdateHud(h2)else if AlwaysVSpd then aV.DrawVerticalSpeed(h2,as)end;aV.DisplayOrbitScreen(h2)aV.DrawWarnings(h2)end;if bD and bE~={}then aV.DrawSettings(h2)end;if radar_1 or radar_2 then aY.assignRadar()end;if bP[1]then aV.DrawRadarInfo()end;aV.HUDEpilogue(h2)h2[#h2+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aG,aH)if a2~="empty"then aV.DisplayMessage(h2,a2)end;if m()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then aV.DrawDeadZone(h2)end end;if x()==0 then if m()==1 and a1 then if not AltIsOn then np()nu(h2)end;if not aZ and not a_ then local nI=table.concat(h2,"")h2={}h2[#h2+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h2[#h2+1]=nI;h2[#h2+1]="</body>"aZ=true;h2[#h2+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(h2,"")system.setScreen(content)elseif a_ then local nI=table.concat(h2,"")h2={}h2[#h2+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aG,aH)h2[#h2+1]=nI;h2[#h2+1]="</body>"end;if not aZ then h2[#h2+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nG,nH,ag,ah)end else no()end else if not a1 and m()==0 then no()if aj>DeadZone then if DisplayDeadZone then nm(h2)end end elseif not AltIsOn or AltIsOn and a1 then np()nu(h2)end;h2[#h2+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],nG,nH,ag,ah)end;h2[#h2+1]=[[</svg></body>]]content=table.concat(h2,"")elseif mT=="apTick"then aX.APTick()elseif mT=="radarTick"then aY.UpdateRadar()elseif mT=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;a2="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function nJ(nK,lj)local nL=vec3()local nM=vec3()if nK==axisCommandId.longitudinal then nL=vec3(core.getConstructOrientationForward())nM=bo elseif nK==axisCommandId.vertical then nL=vec3(core.getConstructOrientationUp())nM=bn elseif nK==axisCommandId.lateral then nL=vec3(core.getConstructOrientationRight())nM=bp else return vec3()end;local nN=vec3(core.getWorldGravity())local nO=nN:dot(nM)local nP=vec3(core.getWorldAirFrictionAcceleration())local nQ=nP:dot(nM)local nR=bq:dot(nL)local nS=lj*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(nS-nR)local nT=targetSpeedPID2:get()local nU=(nT-nQ-nO)*nM;return nU end;local function nV(nK,lj)local nL=vec3()local nM=vec3()if nK==axisCommandId.longitudinal then nL=vec3(core.getConstructOrientationForward())nM=bo elseif nK==axisCommandId.vertical then nL=vec3(core.getConstructOrientationUp())nM=bn elseif nK==axisCommandId.lateral then nL=vec3(core.getConstructOrientationRight())nM=bp else return vec3()end;local nN=vec3(core.getWorldGravity())local nO=nN:dot(nM)local nP=vec3(core.getWorldAirFrictionAcceleration())local nQ=nP:dot(nM)local nR=bq:dot(nL)local nS=lj*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(nS-nR)local nT=targetSpeedPID:get()local nU=(nT-nQ-nO)*nM;return nU end;local function nW(nX,h5,jL)local nY=nX:cross(jL):normalize_inplace()local hS=math.acos(r(nY:dot(-h5),-1,1))*constants.rad2deg;if nY:cross(-h5):dot(jL)<0 then hS=-hS end;return hS end;if antigrav and not ExternalAGG then if not by and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bA=s:getAxisCommandType(0)==axisCommandType.byThrottle;if bA and O then cm(0)O=false elseif not bA and not O then K=0;O=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local nZ=r(T+U+system.getControlDeviceForwardInput(),-1,1)local n_=r(W+Z+system.getControlDeviceYawInput(),-1,1)local o0=r(X+V-system.getControlDeviceLeftRightInput(),-1,1)local o1=Y;bt=vec3(core.getWorldVertical())if bt==nil or bt:len()==0 then bt=(planet.center-bv):normalize()end;bn=vec3(core.getConstructWorldOrientationUp())bo=vec3(core.getConstructWorldOrientationForward())bp=vec3(core.getConstructWorldOrientationRight())br=vec3(core.getWorldVelocity())bq=vec3(core.getVelocity())bv=vec3(core.getConstructWorldPos())av=core.getConstructMass()bs=vec3(br):len()bu=-bt:dot(br)bC=getRoll(bt,bo,bp)local o2=bC/180*math.pi;local o3=math.cos(o2)local o4=math.sin(o2)bB=nW(bt,bo,bp*o3+bn*o4)local o5=br:normalize()local o6=d(bC)local o7=utils.sign(bC)local o8=vec3(core.getWorldAngularVelocity())local o9=nZ*pitchSpeedFactor*bp+n_*rollSpeedFactor*bo+o0*yawSpeedFactor*bn;if b0==true and bt:len()>0.01 then local oa=d(b4-bC)if((ProgradeIsOn or Reentry or BrakeLanding or al or AltitudeHold or IntoOrbit)and oa>0 or ar>0.0 and oa<autoRollRollThreshold and autoRollPreference)and n_==0 and d(bB)<85 then local ob=b4;local oc=autoRollFactor;if ar==0 then oc=oc/4;b4=0;ob=0 end;if rollPID==nil then rollPID=pid.new(oc*0.01,0,oc*0.1)end;rollPID:inject(ob-bC)local od=rollPID:get()o9=o9+od*bo end end;local oe=1;local of=0;local og=1;local oh=system.getMouseWheel()if oh>0 then bU()elseif oh<0 then bU(true)else aw=true end;L=0;if aq and AtmoSpeedAssist and bA then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(b7/3.6-br:dot(bo))local oi=throttlePID:get()N=r(oi,-1,1)if N<K and ar>0.005 then M=true;s:setThrottleCommand(axisCommandId.longitudinal,r(N,0.01,1))else M=false;s:setThrottleCommand(axisCommandId.longitudinal,K)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-b7/3.6)local oj=r(brakePID:get(),0,1)if ar>0 and bu<-80 or ar>0.005 then L=oj end;if L>0 then if M and N==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else N=r(N,0.01,1)end;local ok=''local ol=vec3()local om=nJ(axisCommandId.vertical,af*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",om,of)local on='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then on=on..ExtraLongitudeTags end;local oo=s:getAxisCommandType(axisCommandId.longitudinal)local op=s:composeAxisAccelerationFromThrottle(on,axisCommandId.longitudinal)local oq=nV(axisCommandId.lateral,LeftAmount*1000)ok=ok..' , '.."lateral airfoil , lateral ground "ol=ol+oq;if ol:len()>constants.epsilon then a:setEngineForceCommand(ok,ol,of,'','','',og)end;a:setEngineForceCommand(on,op,oe)local os='thrust analog vertical fueled 'local ot='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then ot=ot..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then os=os..ExtraVerticalTags end;if af~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(os,om,oe)else a:setEngineForceCommand(os,vec3(),oe)end;if LeftAmount~=0 then a:setEngineForceCommand(ot,oq,oe)else a:setEngineForceCommand(ot,vec3(),oe)end;if o1==0 then o1=L end;local ou=-o1*(brakeSpeedFactor*br+brakeFlatFactor*o5)a:setEngineForceCommand('brake',ou)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,K)end;local lj=unit.getAxisCommandValue(0)if not bA then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(br:len()-lj/3.6)local oj=r(brakePID:get(),0,1)o1=r(o1+oj,0,1)end;local ou=-o1*(brakeSpeedFactor*br+brakeFlatFactor*o5)a:setEngineForceCommand('brake',ou)local ok=''local ol=vec3()local ov=false;local on='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then on=on..ExtraLongitudeTags end;local oo=s:getAxisCommandType(axisCommandId.longitudinal)if oo==axisCommandType.byThrottle then local op=s:composeAxisAccelerationFromThrottle(on,axisCommandId.longitudinal)a:setEngineForceCommand(on,op,oe)elseif oo==axisCommandType.byTargetSpeed then local op=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ok=ok..' , '..on;ol=ol+op;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ov=true end end;local ot='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then ot=ot..ExtraLateralTags end;local ow=s:getAxisCommandType(axisCommandId.lateral)if ow==axisCommandType.byThrottle then local ox=s:composeAxisAccelerationFromThrottle(ot,axisCommandId.lateral)a:setEngineForceCommand(ot,ox,oe)elseif ow==axisCommandType.byTargetSpeed then local oq=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ok=ok..' , '..ot;ol=ol+oq end;local os='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then os=os..ExtraVerticalTags end;local oy=s:getAxisCommandType(axisCommandId.vertical)if oy==axisCommandType.byThrottle then local om=s:composeAxisAccelerationFromThrottle(os,axisCommandId.vertical)if af~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(os,om,oe,'airfoil','ground','',og)else a:setEngineForceCommand(os,vec3(),oe)a:setEngineForceCommand('airfoil vertical',om,oe,'airfoil','','',og)a:setEngineForceCommand('ground vertical',om,oe,'ground','','',og)end elseif oy==axisCommandType.byTargetSpeed then if af<0 then a:setEngineForceCommand('hover',vec3(),oe)end;local oz=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ok=ok..' , '..os;ol=ol+oz end;if ol:len()>constants.epsilon then if Y~=0 or ov or d(o5:dot(bo))<0.5 then ok=ok..', brake'end;a:setEngineForceCommand(ok,ol,of,'','','',og)end end;local oA=torqueFactor*(o9-o8)local oB=vec3(core.getWorldAirFrictionAngularAcceleration())oA=oA-oB;a:setEngineTorqueCommand('torque',oA,oe,'airfoil','','',og)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local eD=bq:len()local oC=0.15;if not bA then local oD=s:getTargetSpeed(axisCommandId.longitudinal)if eD*3.6>oD*(1-oC)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eD*3.6<oD*(1-oC)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local l9=unit.getThrottle()if AtmoSpeedAssist then l9=K*100 end;local lj=l9/100;if k==0 then lj=lj*MaxGameVelocity;if eD>=lj*(1-oC)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eD<lj*(1-oC)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local lu=e(b7)lj=lj*lu/3.6;if eD>=lj*(1-oC)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eD<lj*(1-oC)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local gc=coroutine.status(beginSetup)if gc=="suspended"then local cn,gd=coroutine.resume(beginSetup)if gd then system.print("ERROR STARTUP: "..gd)end elseif gc=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not aZ and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(oE)local function oF(bV)local D=1;local function oG(oH,bV)local oI={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local oJ=oH;for _,cQ in ipairs(oI)do if bV and oJ>cQ then oH=cQ elseif oH<cQ and not bV then oH=cQ;break end end;return oH end;if bV then D=-1 end;if not ExternalAGG and by then if a1 and bV then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+D*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if a1 then bg=oG(bg,bV)else bg=bg+D*a3 end;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else if a1 and aq then HoldAltitude=oG(HoldAltitude,bV)else HoldAltitude=HoldAltitude+D*a3 end end else s:updateTargetGroundAltitudeFromActionStart(D*1.0)end end;local function oK(oL)if not aq then a2="Flight Assist in Atmo only"return end;local cW=type(oL)if bK==nil then if cW=="table"then if Autopilot or VectorToTarget then cB()end;c3("180On","BR")elseif oL==1 then c3("bnkLft","BR")else c3("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then cy()if cW~="table"then oL=oL+1 end end;bK=oL else c3("180Off","BR")bK=nil end end;if oE=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;cm(0)if vBooster or hover then if aq and ao==-1 then c3("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b0=true;GearExtended=false else if S then c3("grOut","LG",1)a.control.extendLandingGears()end;s:setTargetGroundAltitude(LandingGearGroundHeight)if aq then BrakeIsOn=true end end end;if S and not BrakeLanding and not(vBooster or hover)then c3("grOut","LG",1)a.control.extendLandingGears()end else if S then c3("grIn","LG",1)a.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif oE=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif oE=="forward"then T=T-1 elseif oE=="backward"then if AltIsOn then oK(-br*5000)else T=T+1 end elseif oE=="left"then if AltIsOn then oK(1)else W=W-1 end elseif oE=="right"then if AltIsOn then oK(3)else W=W+1 end elseif oE=="yawright"then X=X-1 elseif oE=="yawleft"then X=X+1 elseif oE=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif oE=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif oE=="up"then af=af+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif oE=="down"then af=af-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif oE=="groundaltitudeup"then oF()elseif oE=="groundaltitudedown"then oF(true)elseif oE=="option1"then toggleView=false;if AltIsOn and a1 then local oM=""for i=1,#passengers do oM=oM.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..A(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..oM)return end;aW.adjustAutopilotTargetIndex()elseif oE=="option2"then toggleView=false;if AltIsOn and a1 then for i=1,#passengers do core.forceDeboard(passengers[i])end;a2="Deboarded All Passengers"return end;aW.adjustAutopilotTargetIndex(1)elseif oE=="option3"then local function oN()aE=not aE;if not aE then c3("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else c3("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then t(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then t(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then t(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then t(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then t(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and a1 then local oM=""for i=1,#ships do oM=oM.."| ID: "..ships[i].." Mass: "..A(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..oM)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;oN()toggleView=false elseif oE=="option4"then toggleView=false;if AltIsOn and a1 then for i=1,#ships do core.forceUndock(ships[i])end;a2="Undocked all ships"return end;bK=nil;cB()elseif oE=="option5"then toggleView=false;if AltIsOn and a1 then if shield_1 then shield_1.toggle()return else a2="No shield found"return end end;function ToggleLockPitch()if LockPitch==nil then c3("lkPOn","LP")if not a1 then LockPitch=bB else LockPitch=LockPitchTarget end;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else c3("lkPOff","LP")LockPitch=nil end end;ToggleLockPitch()elseif oE=="option6"then toggleView=false;if AltIsOn and a1 then if shield_1 then local oO=shield_1.getVentingCooldown()if oO>0 then a2="Cannot vent again for "..oO.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()a2="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else a2="Shields already at max hitpoints"end;return else a2="No shield found"return end end;cy()elseif oE=="option7"then CollisionSystem=not CollisionSystem;if CollisionSystem then a2="Collision System Enabled"else a2="Collision System Secured"end;toggleView=false elseif oE=="option8"then stablized=not stablized;if not stablized then a2="DeCoupled Mode - Ground Stabilization off"s:deactivateGroundEngineAltitudeStabilization()c3("gsOff","GS")else a2="Coupled Mode - Ground Stabilization on"s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)c3("gsOn","GS")end;toggleView=false elseif oE=="option9"then if AltIsOn and a1 then s:resetCommand(axisCommandId.longitudinal)s:resetCommand(axisCommandId.lateral)s:resetCommand(axisCommandId.vertical)cm(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()ax=gyro.getState()==1;if ax then c3("gyOn","GA")else c3("gyOff","GA")end end;toggleView=false elseif oE=="lshift"then bR=false;if AltIsOn then a1=true end;if x()==1 then a1=true;PrevViewLock=x()w(1)elseif m()==1 and ShiftShowsRemoteButtons then a1=true;a_=false;aZ=false end elseif oE=="brake"then if BrakeToggleStatus or AltIsOn then cD()elseif not BrakeIsOn then cD()else BrakeIsOn=true end elseif oE=="lalt"then toggleView=true;AltIsOn=true;if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(1)end elseif oE=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif oE=="stopengines"then local function oP()if E-F<1.5 then c3("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;bK=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;al=false;am=false;R=false;b0=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false end end;oP()F=E;if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if K~=0 then s:resetCommand(axisCommandId.longitudinal)cm(0)else cm(100)end else if s:getTargetSpeed(axisCommandId.longitudinal)~=0 then s:resetCommand(axisCommandId.longitudinal)else if aq then cp(AtmoSpeedLimit)else cp(MaxGameVelocity*3.6)end end end elseif oE=="speedup"then bU()elseif oE=="speeddown"then bU(true)elseif oE=="antigravity"and not ExternalAGG then if antigrav~=nil then cF()end end end;function script.onActionStop(oE)local function oQ()if not ExternalAGG and by then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if oE=="forward"then T=0 elseif oE=="backward"then T=0 elseif oE=="left"then if bK then if bK==2 then bK=-2 else bK=-1 end end;W=0 elseif oE=="right"then if bK then if bK==4 then bK=-2 else bK=-1 end end;W=0 elseif oE=="yawright"then X=0 elseif oE=="yawleft"then X=0 elseif oE=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif oE=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif oE=="up"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oE=="down"then af=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif oE=="groundaltitudeup"then oQ()toggleView=false elseif oE=="groundaltitudedown"then oQ()toggleView=false elseif oE=="lshift"then if x()==1 then ag=0;ah=0;w(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then a_=false;aZ=false end;a1=false elseif oE=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then cD()else BrakeIsOn=false end end elseif oE=="lalt"then if m()==0 and freeLookToggle then if toggleView then if x()==1 then w(0)else w(1)end else toggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then w(0)end;AltIsOn=false end end;function script.onActionLoop(oE)local function oR(bV)local D=1;if bV then D=-1 end;if not ExternalAGG and by then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+D*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=r(a6*1.05,a4,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+D*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bg=bg+D*a5;if bg<planet.noAtmosphericDensityAltitude then bg=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+D*a5 end;a5=r(a5*1.05,a3,50)else s:updateTargetGroundAltitudeFromActionLoop(D*1.0)end end;local function oS(bV)local D=1;if bV then D=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then K=r(K+D*speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,D*speedChangeSmall)end end end;if oE=="groundaltitudeup"then if not a1 then oR()end elseif oE=="groundaltitudedown"then if not a1 then oR(true)end elseif oE=="speedup"then oS()elseif oE=="speeddown"then oS(true)end end;function script.onInputText(cj)local function oT()for cP,cQ in pairs(c9())do dbHud_1.setStringValue(cQ,h(nil))end;for cP,cQ in pairs(c)do if cQ~="SavedLocations"then dbHud_1.setStringValue(cQ,h(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ai=5 end;local function oU(oV,eH,hO)local function oW(eH)local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d3='::pos{'..B..','..B..','..B..','..B..','..B..'}'local dg,dh,dn,dp,dq=o(eH,d3)if dg=="0"and dh=="0"then return vec3(z(dn),z(dp),z(dq))end;dp=math.rad(dp)dn=math.rad(dn)local planet=b[z(dg)][z(dh)]local e8=math.cos(dn)local oX=vec3(e8*math.cos(dp),e8*math.sin(dp),math.sin(dn))return planet.center+(planet.radius+dq)*oX end;local position=oW(eH)return aW.AddNewLocation(oV,position,hO)end;local i;local oY,oZ=nil,nil;local o_="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(cj," ")oY=cj;if i~=nil then oY=string.sub(cj,0,i-1)oZ=string.sub(cj,i+1)end;if oY=="/help"or oY=="/commands"then for js in string.gmatch(o_,"([^\n]+)")do system.print(js)end;return elseif oY=="/setname"then if oZ==nil or oZ==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then aW.UpdatePosition(oZ)else a2="Select a saved target to rename first"end elseif shield_1 and oY=="/resist"then if oZ==nil or shield_1.getResistancesCooldown()>0 then a2="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local B=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d3=B..', '..B..', '..B..', '..B;local p0,p1,p2,p3=o(oZ,d3)if p3==nil or p0+p1+p2+p3>0.6 then a2="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(p0,p1,p2,p3)==1 then a2="Shield Resistances set"else a2="Resistance setting failed."end elseif oY=="/addlocation"or string.find(cj,"::pos")~=nil then local hO=false;local oV="0-Temp"if oZ==nil or oZ==""then oZ=oY;hO=true end;i=string.find(oZ,"::")if not hO then oV=string.sub(oZ,1,i-2)end;local eH=string.sub(oZ,i)oU(oV,eH,hO)elseif oY=="/agg"then if oZ==nil or oZ==""then a2="Usage: /agg targetheight"return end;oZ=z(oZ)if oZ<1000 then oZ=1000 end;AntigravTargetAltitude=oZ;a2="AGG Target Height set to "..oZ elseif oY=="/G"then if oZ==nil or oZ==""then a2="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if oZ=="dump"then for cP,cQ in pairs(c9())do if type(_G[cQ])=="boolean"then if _G[cQ]==true then system.print(cQ.." true")else system.print(cQ.." false")end elseif _G[cQ]==nil then system.print(cQ.." nil")else system.print(cQ.." ".._G[cQ])end end;return end;i=string.find(oZ," ")local p4=string.sub(oZ,0,i-1)local p5=string.sub(oZ,i+1)for cP,cQ in pairs(c9())do if cQ==p4 then a2="Variable "..p4 .." changed to "..p5;local p6=type(_G[cQ])if p6=="number"then p5=z(p5)if cQ=="AtmoSpeedLimit"then b7=p5 end elseif p6=="boolean"then if string.lower(p5)=="true"then p5=true else p5=false end end;_G[cQ]=p5;return end end;a2="No such global variable: "..p4 elseif oY=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then aW.ClearCurrentPosition()else a2="Select a custom wp to delete first in IPH"end elseif oY=="/copydatabank"then if dbHud_2 then cL(true)else a2="Spare Databank required to copy databank"end elseif oY=="/iphWP"then if AutopilotTargetIndex>0 then system.print(aX.showWayPoint(ac,AutopilotTargetCoords,true))a2="::pos waypoint shown in lua chat"else a2="No target selected in IPH"end end end;function script.onEnter(dh)if bP[1]and not aq and not bH then unit.setTimer("contact",0.1)end end;function script.onLeave(dh)if bP[1]and CollisionSystem then if#bL>650 then dh=tostring(dh)bL[dh]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
