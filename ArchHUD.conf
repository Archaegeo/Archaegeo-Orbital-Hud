name: ArchHud - Archaegeo v1.704 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")require("autoconf/custom/archhud/radarclass")require("autoconf/custom/archhud/controlclass")script={}VERSION_NUMBER=1.704;local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;time=o()clearAllCheck=o()local D=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"isBoosting=false;brakeDistance=0;brakeTime=0;local E=0;local F=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;local G=""inAtmo=j()>0;atmosDensity=j()coreAltitude=core.getAltitude()local H=core.getElementIdList()lastTravelTime=o()coreMass=core.getConstructMass()local I=false;gyroIsOn=nil;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local J={}damageMessage=""resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;atmoTanks={}spaceTanks={}rocketTanks={}local K=0;repairArrows=false;local L=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;CONTROL=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;local M=LandingGearGroundHeight;stalling=false;targetRoll=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitalParams={VectorToTarget=false}OrbitTargetOrbit=0;OrbitAchieved=false;local N=false;SpaceEngineVertDn=false;SpaceEngines=false;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;AtlasOrdered={}notPvPZone=false;pvpDist=50000;ReversalIsOn=nil;contacts={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;planetAtlas={}scopeFOV=90;oldShowHud=showHud;function p(O)system.print(time..": "..O)end;function play(P,Q,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..P.."|"..Q.."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..P.."|"..Q.."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..P.."|"..Q.."|"..soundVolume)end end;function addTable(R,S)for i=1,#S do R[#R+1]=S[i]end;return R end;function saveableVariables(T)local U={}if not T then addTable(U,saveableVariablesBoolean)addTable(U,savableVariablesHandling)addTable(U,savableVariablesHud)addTable(U,savableVariablesPhysics)return U elseif T=="boolean"then return saveableVariablesBoolean elseif T=="handling"then return savableVariablesHandling elseif T=="hud"then return savableVariablesHud elseif T=="physics"then return savableVariablesPhysics end end;local function V(W,X,Y,Z,a0)if Z==nil then Z=""end;if a0==nil then a0=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],Z,W,X,a0,Y)end;function float_eq(a1,a2)if a1==0 then return c(a2)<1e-09 end;if a2==0 then return c(a1)<1e-09 end;return c(a1-a2)<math.max(c(a1),c(a2))*epsilon end;function getDistanceDisplayString(distance,a3)local a4=distance>100000;if a3==nil then a3=1 end;if a4 then return z(distance/1000/200,a3).."SU"elseif distance<1000 then return z(distance,a3).."M"else return z(distance/1000,a3).."KM"end end;function FormatTimeString(a5)local a6=0;local a7=0;local a8=0;if a5<60 then a5=d(a5)elseif a5<3600 then a6=d(a5/60)a5=d(a5%60)elseif a5<86400 then a7=d(a5/3600)a6=d(a5%3600/60)else a8=d(a5/86400)a7=d(a5%86400/3600)end;if a8>0 then return a8 .."d "..a7 .."h "elseif a7>0 then return a7 .."h "..a6 .."m "elseif a6>0 then return a6 .."m "..a5 .."s"elseif a5>0 then return a5 .."s"else return"0s"end end;function SaveDataBank(a9)local function aa(ab)for ac,ad in pairs(ab)do dbHud_1.setStringValue(ad,g(_G[ad]))if a9 and dbHud_2 then dbHud_2.setStringValue(ad,g(_G[ad]))end end end;if dbHud_1 then aa(autoVariables)aa(saveableVariables())system.print("Saved Variables to Datacore")if a9 and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function ae()local function af(ag)return type(ag)=='number'end;local function ah(ag)return type(y(ag))=='number'end;local function ai(aj)return type(aj)=='table'end;local function ak(al)return type(al)=='string'end;local function am(ad)return ai(ad)and af(ad.x and ad.y and ad.z)end;local function an(ao)return ai(ao)and af(ao.latitude and ao.longitude and ao.altitude and ao.id and ao.systemId)end;local ap=math.pi/180;local aq=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ar='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function as(ag)local at=string.gsub(string.reverse(e('%.4f',ag)),'^0*%.?','')return at==''and'0'or string.reverse(at)end;local function au(av)if am(av)then return e('{x=%.3f,y=%.3f,z=%.3f}',av.x,av.y,av.z)end;if ai(av)and not getmetatable(av)then local aw={}local ax=next(av)if type(ax)=='nil'or ax==1 then aw=av else for ac,ad in pairs(av)do local ay=au(ad)if type(ac)=='number'then table.insert(aw,e('[%s]=%s',ac,ay))else table.insert(aw,e('%s=%s',ac,ay))end end end;return e('{%s}',table.concat(aw,','))end;if ak(av)then return e("'%s'",av:gsub("'",[[\']]))end;return tostring(av)end;local az={}az.__index=az;az.__tostring=function(av,aA)local aB={}for ac in pairs(av)do table.insert(aB,ac)end;table.sort(aB)local aw={}for _,ac in ipairs(aB)do local ay=au(av[ac])if type(ac)=='number'then table.insert(aw,e('[%s]=%s',ac,ay))else table.insert(aw,e('%s=%s',ac,ay))end end;if aA then return e('%s%s',aA,table.concat(aw,',\n'..aA))end;return e('{%s}',table.concat(aw,','))end;az.__eq=function(aC,aD)return aC.systemId==aD.systemId and aC.id==aD.id and float_eq(aC.radius,aD.radius)and float_eq(aC.center.x,aD.center.x)and float_eq(aC.center.y,aD.center.y)and float_eq(aC.center.z,aD.center.z)and float_eq(aC.GM,aD.GM)end;local function aE(aF,aG,aH,aI,aJ)assert(ah(aF),'Argument 1 (systemId) must be a number:'..type(aF))assert(ah(aG),'Argument 2 (id) must be a number:'..type(aG))assert(ah(aH),'Argument 3 (radius) must be a number:'..type(aH))assert(ai(aI),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(aI))assert(ah(aJ),'Argument 5 (GM) must be a number:'..type(aJ))return setmetatable({systemId=y(aF),id=y(aG),radius=y(aH),center=vec3(aI),GM=y(aJ)},az)end;local aK={}aK.__index=aK;aK.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,as(p.latitude*aq),as(p.longitude*aq),as(p.altitude))end;aK.__eq=function(aC,aD)return aC.id==aD.id and aC.systemId==aD.systemId and float_eq(aC.latitude,aD.latitude)and float_eq(aC.altitude,aD.altitude)and(float_eq(aC.longitude,aD.longitude)or float_eq(aC.latitude,math.pi/2)or float_eq(aC.latitude,-math.pi/2))end;local function aL(aM,aG,aN,aO,aP)local aF=aM;if ak(aM)and not aO and not aP and not aG and not aN then aF,aG,aN,aO,aP=n(aM,ar)assert(aF,'Argument 1 (position string) is malformed.')else assert(ah(aF),'Argument 1 (systemId) must be a number:'..type(aF))assert(ah(aG),'Argument 2 (id) must be a number:'..type(aG))assert(ah(aN),'Argument 3 (latitude) must be in degrees:'..type(aN))assert(ah(aO),'Argument 4 (longitude) must be in degrees:'..type(aO))assert(ah(aP),'Argument 5 (altitude) must be in meters:'..type(aP))end;aF=y(aF)aG=y(aG)aN=y(aN)aO=y(aO)aP=y(aP)if aG==0 then return setmetatable({latitude=aN,longitude=aO,altitude=aP,id=aG,systemId=aF},aK)end;return setmetatable({latitude=ap*q(aN,-90,90),longitude=ap*(aO%360),altitude=aP,id=aG,systemId=aF},aK)end;local aQ={}aQ.__index=aQ;aQ.__tostring=function(av,aA)local aR=aA and aA..'  'local aS={}local aB={}for ac in pairs(av)do table.insert(aB,ac)end;table.sort(aB)for _,aT in ipairs(aB)do bdy=av[aT]local aU=az.__tostring(bdy,aR)if aA then table.insert(aS,e('[%s]={\n%s\n%s}',aT,aU,aA))else table.insert(aS,e('  [%s]=%s',aT,aU))end end;if aA then return e('\n%s%s%s',aA,table.concat(aS,',\n'..aA),aA)end;return e('{\n%s\n}',table.concat(aS,',\n'))end;local function aV(aW)local b={}local pid;for _,ad in pairs(aW)do local aG=ad.planetarySystemId;if type(aG)~='number'then error('Invalid planetary system ID: '..tostring(aG))elseif pid and aG~=pid then error('Mistringmatch planetary system IDs: '..aG..' and '..pid)end;local aX=ad.bodyId;if type(aX)~='number'then error('Invalid body ID: '..tostring(aX))elseif b[aX]then error('Duplicate body ID: '..tostring(aX))end;setmetatable(ad.center,getmetatable(vec3.unit_x))b[aX]=setmetatable(ad,az)pid=aG end;return setmetatable(b,aQ)end;L={}local function aY(aW)return setmetatable({galaxyAtlas=aW or{}},L)end;L.__index=function(aj,i)if type(i)=='number'then local system=aj.galaxyAtlas[i]return aV(system)end;return rawget(L,i)end;L.__pairs=function(av)return function(aj,ac)local aZ,nv=next(aj,ac)return aZ,nv and aV(nv)end,av.galaxyAtlas,nil end;L.__tostring=function(av)local a_={}for _,b0 in pairs(av or{})do local b1=b0:getPlanetarySystemId()local b2=aQ.__tostring(b0,'    ')table.insert(a_,e('  [%s]={%s\n  }',b1,b2))end;return e('{\n%s\n}\n',table.concat(a_,',\n'))end;L.BodyParameters=aE;L.MapPosition=aL;L.PlanetarySystem=aV;function L.createBodyParameters(aF,aG,b3,b4,b5,b6,b7)assert(ah(aF),'Argument 1 (systemId) must be a number:'..type(aF))assert(ah(aG),'Argument 2 (id) must be a number:'..type(aG))assert(ah(b3),'Argument 3 (surfaceArea) must be a number:'..type(b3))assert(ai(b4),'Argument 4 (aPosition) must be an array or vec3:'..type(b4))assert(ai(b5),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(b5))assert(ah(b6),'Argument 6 (altitude) must be in meters:'..type(b6))assert(ah(b7),'Argument 7 (gravityAtPosition) must be number:'..type(b7))local aH=x(b3/4/math.pi)local distance=aH+b6;local b8=vec3(b4)+distance*vec3(b5)local aJ=b7*distance*distance;return aE(aF,aG,aH,b8,aJ)end;L.isMapPosition=an;function L:getPlanetarySystem(aM)if i==nil then i=0 end;if nv==nil then nv=0 end;local aF=aM;if an(aM)then aF=aM.systemId end;if type(aF)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=aQ then system=aV(system)end;return system end end end;function aQ:sizeCalculator(b9)return 1.05*b9.radius end;function aQ:castIntersections(ba,bb,bc,bd,be,bf)local bg={}if be then for _,b9 in pairs(be)do table.insert(bg,b9)end else bg=planetAtlas end;if not bf then table.sort(bg,function(bh,bi)local a1=bh.center;local a2=bi.center;return(a1.x-ba.x)^2+(a1.y-ba.y)^2+(a1.z-ba.z)^2<(a2.x-ba.x)^2+(a2.y-ba.y)^2+(a2.z-ba.z)^2 end)end;local bj=bb:normalize()for _,b9 in ipairs(bg)do local bk=b9.center-ba;local aH=self:sizeCalculator(b9)local bl=bk:dot(bj)local bm=bl^2-(bk:len2()-aH^2)if bm>=0 then local bn=x(bm)local bo=bl+bn;local bp=bl-bn;if bp>0 then return b9,bo,bp elseif bo>0 then return b9,bo,nil end end end;return nil,nil,nil end;function aQ:closestBody(bq)assert(type(bq)=='table','Invalid coordinates.')local br,b9;local bs=vec3(bq)for _,bt in pairs(self)do local bu=(bt.center-bs):len2()if(not b9 or bu<br)and bt.name~="Space"then b9=bt;br=bu end end;return b9 end;function aQ:convertToBodyIdAndWorldCoordinates(aM)local bv=aM;if ak(aM)then bv=aL(aM)end;if bv.id==0 then return 0,vec3(bv.latitude,bv.longitude,bv.altitude)end;local bt=self:getBodyParameters(bv)if bt then return bv.id,bt:convertToWorldCoordinates(bv)end end;function aQ:getBodyParameters(aM)local aG=aM;if an(aM)then aG=aM.id end;assert(ah(aG),'Argument 1 (id) must be a number:'..type(aG))return self[aG]end;function aQ:getPlanetarySystemId()local _,ad=next(self)return ad and ad.systemId end;function az:convertToMapPosition(aI)assert(ai(aI),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(aI))local bw=vec3(aI)if self.id==0 then return setmetatable({latitude=bw.x,longitude=bw.y,altitude=bw.z,id=0,systemId=self.systemId},aK)end;local bx=bw-self.center;local distance=bx:len()local aP=distance-self.radius;local aN=0;local aO=0;if not float_eq(distance,0)then local by=m(bx.y,bx.x)aO=by>=0 and by or 2*math.pi+by;aN=math.pi/2-math.acos(bx.z/distance)end;return setmetatable({latitude=aN,longitude=aO,altitude=aP,id=self.id,systemId=self.systemId},aK)end;function az:convertToWorldCoordinates(aM)local bv=ak(aM)and aL(aM)or aM;if bv.id==0 then return vec3(bv.latitude,bv.longitude,bv.altitude)end;assert(an(bv),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(bv.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(bv.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local bz=math.cos(bv.latitude)return self.center+(self.radius+bv.altitude)*vec3(bz*math.cos(bv.longitude),bz*math.sin(bv.longitude),math.sin(bv.latitude))end;function az:getAltitude(aI)return(vec3(aI)-self.center):len()-self.radius end;function az:getDistance(aI)return(vec3(aI)-self.center):len()end;function az:getGravity(aI)local bA=self.center-vec3(aI)local bB=bA:len2()return self.GM/bB*bA/x(bB)end;return setmetatable(L,{__call=function(_,...)return aY(...)end})end;local function bC()local Kinematic={}local bD=30000000/3600;local bE=bD*bD;local bF=100;function Kinematic.computeAccelerationTime(bG,bH,bI)local bJ=bD*math.asin(bG/bD)return(bD*math.asin(bI/bD)-bJ)/bH end;function Kinematic.computeDistanceAndTime(bG,bI,bK,bL,bM,bN)bM=bM or 0;bN=bN or 0;local bO=bG<=bI;local bP=bL*(bO and 1 or-1)/bK;local bQ=-bN/bK;local bR=bP+bQ;if bO and bR<=0 or not bO and bR>=0 then return-1,-1 end;local bS,bT=0,0;if bP~=0 and bM>0 then local bJ=math.asin(bG/bD)local bU=math.pi*(bP/2+bQ)local bV=bP*bM;local bW=bD*math.pi;local ad=function(aj)local bX=(bU*aj-bV*math.sin(math.pi*aj/2/bM)+bW*bJ)/bW;local bY=math.tan(bX)return bD*bY/x(bY*bY+1)end;local bZ=bO and function(al)return al>=bI end or function(al)return al<=bI end;bT=2*bM;if bZ(ad(bT))then local b_=0;while c(bT-b_)>0.5 do local aj=(bT+b_)/2;if bZ(ad(aj))then bT=aj else b_=aj end end end;local c0=bG;local c1=bT/bF;for c2=1,bF do local c3=ad(c2*c1)bS=bS+(c3+c0)*c1/2;c0=c3 end;if bT<2*bM then return bS,bT end;bG=c0 end;local bJ=bD*math.asin(bG/bD)local time=(bD*math.asin(bI/bD)-bJ)/bR;local c4=bE*math.cos(bJ/bD)/bR;local distance=c4-bE*math.cos((bR*time+bJ)/bD)/bR;return distance+bS,time+bT end;function Kinematic.computeTravelTime(bG,bH,distance)if distance==0 then return 0 end;if bH>0 then local bJ=bD*math.asin(bG/bD)local c4=bE*math.cos(bJ/bD)/bH;return(bD*math.acos(bH*(c4-distance)/bE)-bJ)/bH end;if bG==0 then return-1 end;assert(bG>0,'Acceleration and initial speed are both zero.')return distance/bG end;return Kinematic end;local function c5()local vec3=require('cpml.vec3')local ae=ae()local function ak(al)return type(al)=='string'end;local function ai(aj)return type(aj)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(aP)assert(self.body)local distance=aP+self.body.radius;if not float_eq(distance,0)then local c6=x(self.body.GM/distance)return x(2)*c6,c6 end;return nil,nil end;function Kepler:orbitalParameters(aM,c7)assert(self.body)assert(ai(aM)or ak(aM))assert(ai(c7))local c8=(ak(aM)or ae.isMapPosition(aM))and self.body:convertToWorldCoordinates(aM)or vec3(aM)local ad=vec3(c7)local c9=c8-self.body.center;local ca=ad:len2()local cb=c9:len()local cc=self.body.GM;local cd=((ca-cc/cb)*c9-c9:dot(ad)*ad)/cc;local a1=cc/(2*cc/cb-ca)local ce=cd:len()local bj=cd:normalize()local cf=a1*(1-ce)local cg=a1*(1+ce)local ch=cf*bj+self.body.center;local ci=ce<=1 and-cg*bj+self.body.center or nil;local cj=x(a1*cc*(1-ce*ce))local ck=ci and 2*math.pi*x(a1^3/cc)local cl=math.acos(cd:dot(c9)/(ce*cb))if c9:dot(ad)<0 then cl=-(cl-2*math.pi)end;local cm=math.acos((math.cos(cl)+ce)/(1+ce*math.cos(cl)))local cn=cm;if cn<0 then cn=cn+2*math.pi end;local co=cn-ce*math.sin(cn)local cp=0;local cq=0;local cr=0;if ck~=nil then cp=co/(2*math.pi/ck)cq=ck-cp;cr=cq+ck/2;if cl-math.pi>0 then cq=cp;cr=cq+ck/2 end;if cr>ck then cr=cr-ck end end;return{periapsis={position=ch,speed=cj/cf,circularOrbitSpeed=x(cc/cf),altitude=cf-self.body.radius},apoapsis=ci and{position=ci,speed=cj/cg,circularOrbitSpeed=x(cc/cg),altitude=cg-self.body.radius},currentVelocity=ad,currentPosition=c8,eccentricity=ce,period=ck,eccentricAnomaly=cm,meanAnomaly=co,timeToPeriapsis=cq,timeToApoapsis=cr,trueAnomaly=cl}end;local function cs(ct)local bt=ae.BodyParameters(ct.systemId,ct.id,ct.radius,ct.center,ct.GM)return setmetatable({body=bt},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return cs(...)end})end;local function cu()local function cv(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function cw()local function cx(cy,cz)return cy.name<cz.name end;AtlasOrdered={}for ac,ad in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=ad.name,index=ac}end;table.sort(AtlasOrdered,cx)end;local function cA(cB)for ac,ad in pairs(cB)do if ad.name and ad.name==CustomTarget.name then return ac end end;return-1 end;local function cC()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local cD=AtlasOrdered[AutopilotTargetIndex].index;local cE=b[0][cD]if cE.center then AutopilotTargetName=cE.name;autopilotTargetPlanet=galaxyReference[0][cD]if CustomTarget~=nil then if atmosDensity==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cE;for _,ad in pairs(galaxyReference[0])do if ad.name==CustomTarget.planetname then autopilotTargetPlanet=ad;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cF(cG)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit and not Reentry and not finalLand then if cG==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cC()else local cD=AtlasOrdered[AutopilotTargetIndex].index;local cE=b[0][cD]if cE~=nil and cE.name=="Space"or iphCondition=="Custom Only"and cE.center or iphCondition=="No Moons"and string.find(cE.name,"Moon")~=nil then if cG==nil then cF()else cF(1)end else cC()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function cH()local cI=-1;cI=cA(b[0])if cI>-1 then table.remove(b[0],cI)end;cI=-1;cI=cA(SavedLocations)if cI~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cI)end;cF()cw()end;local function cJ(cK,position,cL,cM)if dbHud_1 or cL then local p=cv(position)local cN=p.gravity;if cM then cN=unit.getClosestPlanetInfluence()end;local cO={position=position,name=cK,planetname=p.name,gravity=cN,safe=cM}if not cL then SavedLocations[#SavedLocations+1]=cO else for ac,ad in pairs(b[0])do if ad.name and cK==ad.name then table.remove(b[0],ac)end end end;table.insert(b[0],cO)cw()cC()msgText="Location saved as "..cK.."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local cP={}function cP.UpdateAtlasLocationsList()cw()end;function cP.UpdateAutopilotTarget()cC()end;function cP.adjustAutopilotTargetIndex(cG)cF(cG)end;function cP.findAtlasIndex(cB)cA(cB)end;function cP.UpdatePosition(cQ)local cI=cA(SavedLocations)if cI~=-1 then if cQ~=nil then SavedLocations[cI].name=cQ;AutopilotTargetIndex=AutopilotTargetIndex-1;cF()else local cR=SavedLocations[cI]cR.gravity=unit.getClosestPlanetInfluence()cR.position=worldPos;cR.safe=true end;msgText=SavedLocations[cI].name.." position updated ("..SavedLocations[cI].planetname..")"else msgText="Name Not Found"end end;function cP.AddNewLocation(cK,position,cL,cM)cJ(cK,position,cL,cM)end;function cP.ClearCurrentPosition()cH()end;for ac,ad in pairs(SavedLocations)do table.insert(b[0],ad)end;cw()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;cP.UpdateAutopilotTarget()return cP end;function script.onStart()local cS=false;local function cT()local function cU(cV)local cW=dbHud_1.hasKey;for ac,ad in pairs(cV)do if cW(ad)then local at=f(dbHud_1.getStringValue(ad))if at~=nil then _G[ad]=at;cS=true end end end end;if dbHud_1 then if not useTheseSettings then cU(saveableVariables())coroutine.yield()cU(autoVariables)else cU(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;cS=false end;coroutine.yield()if cS then msgText="Loaded Saved Variables"resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function cX()local function cY(cZ,c_)if cZ>c_ then c_=cZ end;local d0,d1=0,0;if ContainerOptimization>0 then d0=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then d1=FuelTankOptimization*0.05 end;c_=c_*(1-(d0+d1))return c_ end;local d2=core.getElementNameById;local d3=fuelX~=0 and fuelY~=0;for ac in pairs(H)do local type=core.getElementTypeById(H[ac])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(H[ac])),'^.*vertical.*$')and core.getElementForwardById(H[ac])[3]>0 then UpVertAtmoEngine=true end end;if n(type,'^.*Space Engine$')then SpaceEngines=true;if n(tostring(core.getElementTagsById(H[ac])),'^.*vertical.*$')then local d4=core.getElementForwardById(H[ac])if d4[3]<0 then N=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local d5=h(H[ac])if d5>10000 then D=110 elseif d5>1000 then D=55 elseif d5>150 then D=27 end end;K=K+h(H[ac])if d3 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local d5=h(H[ac])local d6=k(H[ac])local cZ=0;local d7=o()if type=="Atmospheric Fuel Tank"then local c_=400;local d8=35.03;if d5>10000 then c_=51200;d8=5480 elseif d5>1300 then c_=6400;d8=988.67 elseif d5>150 then c_=1600;d8=182.67 end;cZ=d6-d8;if fuelTankHandlingAtmo>0 then c_=c_+c_*fuelTankHandlingAtmo*0.2 end;c_=cY(cZ,c_)atmoTanks[#atmoTanks+1]={H[ac],d2(H[ac]),c_,d8,cZ,d7}end;if type=="Rocket Fuel Tank"then local c_=320;local d8=173.42;if d5>65000 then c_=40000;d8=25740 elseif d5>6000 then c_=5120;d8=4720 elseif d5>700 then c_=640;d8=886.72 end;cZ=d6-d8;if fuelTankHandlingRocket>0 then c_=c_+c_*fuelTankHandlingRocket*0.1 end;c_=cY(cZ,c_)rocketTanks[#rocketTanks+1]={H[ac],d2(H[ac]),c_,d8,cZ,d7}end;if type=="Space Fuel Tank"then local c_=600;local d8=35.03;if d5>10000 then c_=76800;d8=5480 elseif d5>1300 then c_=9600;d8=988.67 elseif d5>150 then c_=2400;d8=182.67 end;cZ=d6-d8;if fuelTankHandlingSpace>0 then c_=c_+c_*fuelTankHandlingSpace*0.2 end;c_=cY(cZ,c_)spaceTanks[#spaceTanks+1]={H[ac],d2(H[ac]),c_,d8,cZ,d7}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function d9()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,ad in pairs(door)do ad.toggle()end end;if switch then for _,ad in pairs(switch)do ad.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,ad in pairs(forcefield)do ad.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(M)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function da()local db={}local function dc()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local dd={[1]=4480,[6]=4480,[7]=6270}for de,df in pairs(b)do b[de][0]=dc()b[de][0].systemId=de;db[de]={}for dg,planet in pairs(b[de])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=dd[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=de;planet.bodyId=planet.id;db[de][dg]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end;if planet.center and planet.name~="Space"then planetAtlas[#planetAtlas+1]=planet end end end;L=ae()galaxyReference=L(db)Kinematic=bC()Kep=c5()ATLAS=cu()end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})cT()coroutine.yield()cX()coroutine.yield()AP=APClass(a,core,unit,system,b,vBooster,hover,telemeter_1,antigrav,c,d,j,l,m,o,q,r,t,w,x,z)d9()coroutine.yield()da()RADAR=RadarClass(core,system,library,radar_1,radar_2,c,s,x,V,y,D)HUD=HudClass(a,core,unit,system,b,radar_1,radar_2,antigrav,hover,shield_1,c,d,e,f,j,k,l,m,o,q,r,s,w,x,z,V)HUD.ButtonSetup()CONTROL=ControlClass(a,core,unit,system,b,vBooster,hover,antigrav,shield_1,dbHud_2,l,r,w,v,s,z,n,y,q)coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ad in pairs(door)do ad.toggle()end end;if switch then for _,ad in pairs(switch)do ad.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ad in pairs(forcefield)do ad.toggle()end end;showHud=oldShowHud;SaveDataBank()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(dh)local di=nil;if dh=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif dh=="tenthSecond"then local function dj()local dk=system.createData;local dl=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=dl(panelInterplanetary,"value")interplanetaryHeaderText=dk('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=dl(panelInterplanetary,"value")widgetDistanceText=dk('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=dl(panelInterplanetary,"value")widgetTravelTimeText=dk('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=dl(panelInterplanetary,"value")widgetMaxMassText=dk('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=dl(panelInterplanetary,"value")widgetTargetOrbitText=dk('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=dl(panelInterplanetary,"value")widgetCurBrakeDistanceText=dk('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=dl(panelInterplanetary,"value")widgetCurBrakeTimeText=dk('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=dl(panelInterplanetary,"value")widgetMaxBrakeDistanceText=dk('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=dl(panelInterplanetary,"value")widgetMaxBrakeTimeText=dk('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=dl(panelInterplanetary,"value")widgetTrajectoryAltitudeText=dk('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function dm()s(panelInterplanetary)panelInterplanetary=nil end;local function dn()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local c3=velMag;local dp=unit.getThrottle()/100;if AtmoSpeedAssist then dp=PlayerThrottle end;local dq,dr=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*dp,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ds;if not TurnBurn and c3>0 then _,ds=AP.GetAutopilotBrakeDistanceAndTime(c3)else _,ds=AP.GetAutopilotTBBrakeDistanceAndTime(c3)end;local dt=0;local du=0;if AutopilotCruising or not Autopilot and c3>5 then du=Kinematic.computeTravelTime(c3,0,AutopilotDistance)elseif brakeDistance+dq<AutopilotDistance then dt=AutopilotDistance-(brakeDistance+dq)du=Kinematic.computeTravelTime(8333.0556,0,dt)else local dv=(AutopilotDistance-brakeDistance)/dq;dq=AutopilotDistance-brakeDistance;dr=dr*dv end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return du elseif AutopilotBraking then return ds elseif AutopilotCruising then return du+ds else return dr+brakeTime+du end end;local function dw(cN,dx)if cN==nil then cN=core.g()end;cN=z(cN,5)if dx~=nil and dx or(di==nil or di~=cN)then local c3=coreVelocity:len()local dy=f(unit.getData()).maxBrake;if dy~=nil and dy>0 and inAtmo then dy=dy/q(c3/100,0.1,1)dy=dy/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+dy)/2 else LastMaxBrakeInAtmo=dy end end end;if dy~=nil and dy>0 then LastMaxBrake=dy end;di=cN end end;dw(nil,true)if setCruiseSpeed~=nil then if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or r:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then dj()end;if AutopilotTargetName~=nil then local dz=CustomTarget~=nil;local dA=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()dA=dA>1000000 and z(dA/1000000,2).." kTons"or z(dA/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=dn()if dz and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)E,F=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dB=getDistanceDisplayString(distance)t(widgetDistanceText,'{"label": "distance", "value": "'..dB..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dB=getDistanceDisplayString(brakeDistance)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dB..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')dB=getDistanceDisplayString(E)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dB..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(F)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",dA)..'", "unit":""}')dB=getDistanceDisplayString(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..dB..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else dm()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif dh=="oneSecond"then local function dC(dD)local dE=0;damageMessage=""local dF=K;local dG=0;local dH=0;local dI=0;local dJ=0;local dK=""local dL=core.getElementHitPointsById;for ac in pairs(H)do local d5=0;local dM=0;dM=h(H[ac])d5=dL(H[ac])dG=dG+d5;if d5<dM then if d5==0 then dI=dI+1 else dH=dH+1 end;if repairArrows and#J==0 then position=vec3(core.getElementPositionById(H[ac]))local W=position.x;local X=position.y;local dN=position.z;table.insert(J,core.spawnArrowSticker(W,X,dN+1,"down"))table.insert(J,core.spawnArrowSticker(W,X,dN+1,"down"))core.rotateSticker(J[2],0,0,90)table.insert(J,core.spawnArrowSticker(W+1,X,dN,"north"))table.insert(J,core.spawnArrowSticker(W+1,X,dN,"north"))core.rotateSticker(J[4],90,90,0)table.insert(J,core.spawnArrowSticker(W-1,X,dN,"south"))table.insert(J,core.spawnArrowSticker(W-1,X,dN,"south"))core.rotateSticker(J[6],90,-90,0)table.insert(J,core.spawnArrowSticker(W,X-1,dN,"east"))table.insert(J,core.spawnArrowSticker(W,X-1,dN,"east"))core.rotateSticker(J[8],90,0,90)table.insert(J,core.spawnArrowSticker(W,X+1,dN,"west"))table.insert(J,core.spawnArrowSticker(W,X+1,dN,"west"))core.rotateSticker(J[10],-90,0,90)table.insert(J,H[ac])end elseif repairArrows and#J>0 and J[11]==H[ac]then for dO in pairs(J)do core.deleteSticker(J[dO])end;J={}end end;dE=d(dG/dF*100)if dE<100 then dD[#dD+1]=V(0,0,"","pbright txt")dJ=d(dE*2.55)dK=e("rgb(%d,%d,%d)",255-dJ,dJ,0)if dE<100 then dD[#dD+1]=V("50%",1035,"Elemental Integrity: "..dE.."%","txtbig txtmid","fill:"..dK)if dI>0 then dD[#dD+1]=V("50%",1055,"Disabled Modules: "..dI.." Damaged Modules: "..dH,"txtbig txtmid","fill:"..dK)elseif dH>0 then dD[#dD+1]=V("50%",1055,"Damaged Modules: "..dH,"txtbig txtmid","fill:"..dK)end end end end;local function dP()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,"Weapons","weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function dQ()local d7=o()local dR=velMag;local dS=d7-lastTravelTime;if dR>1.38889 then dR=dR/1000;local dT=dR*(d7-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+dT;totalDistanceTrip=totalDistanceTrip+dT end;flightTime=flightTime+dS;TotalFlightTime=TotalFlightTime+dS;lastTravelTime=d7 end;dQ()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()dP()local dD={}HUD.OneSecond(dD)if ShouldCheckDamage then dC(dD)end;lastOdometerOutput=table.concat(dD,"")collectgarbage("collect")elseif dh=="fiveSecond"then if not UseSatNav then return end;G=dbHud_1.getStringValue("SPBAutopilotTargetName")if G~=nil and G~=""and G~="SatNavNotChanged"then local at=f(dbHud_1.getStringValue("SavedLocations"))if at~=nil then _G["SavedLocations"]=at;local cI=-1;local cO;for ac,ad in pairs(SavedLocations)do if ad.name and ad.name=="SatNav Location"then cI=ac;break end end;if cI~=-1 then cO=SavedLocations[cI]cI=-1;for ac,ad in pairs(b[0])do if ad.name and ad.name=="SatNav Location"then cI=ac;break end end;if cI>-1 then b[0][cI]=cO end;ATLAS.UpdateAtlasLocationsList()msgText=cO.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==G then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif dh=="msgTick"then local dD={}HUD.DisplayMessage(dD,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif dh=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif dh=="hudTick"then HUD.hudtick()elseif dh=="apTick"then AP.APTick()elseif dh=="radarTick"then RADAR.UpdateRadar()elseif dh=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function dU(dV,dW)local dX=vec3()local dY=vec3()if dV==axisCommandId.longitudinal then dX=vec3(core.getConstructOrientationForward())dY=constructForward elseif dV==axisCommandId.vertical then dX=vec3(core.getConstructOrientationUp())dY=constructUp elseif dV==axisCommandId.lateral then dX=vec3(core.getConstructOrientationRight())dY=constructRight else return vec3()end;local dZ=vec3(core.getWorldGravity())local d_=dZ:dot(dY)local e0=vec3(core.getWorldAirFrictionAcceleration())local e1=e0:dot(dY)local e2=coreVelocity:dot(dX)local e3=dW*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(e3-e2)local e4=targetSpeedPID2:get()local e5=(e4-e1-d_)*dY;return e5 end;local function e6(dV,dW)local dX=vec3()local dY=vec3()if dV==axisCommandId.longitudinal then dX=vec3(core.getConstructOrientationForward())dY=constructForward elseif dV==axisCommandId.vertical then dX=vec3(core.getConstructOrientationUp())dY=constructUp elseif dV==axisCommandId.lateral then dX=vec3(core.getConstructOrientationRight())dY=constructRight else return vec3()end;local dZ=vec3(core.getWorldGravity())local d_=dZ:dot(dY)local e0=vec3(core.getWorldAirFrictionAcceleration())local e1=e0:dot(dY)local e2=coreVelocity:dot(dX)local e3=dW*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(e3-e2)local e4=targetSpeedPID:get()local e5=(e4-e1-d_)*dY;return e5 end;local function e7(e8,e9,cz)local ea=e8:cross(cz):normalize_inplace()local eb=math.acos(q(ea:dot(-e9),-1,1))*constants.rad2deg;if ea:cross(-e9):dot(cz)<0 then eb=-eb end;return eb end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=r:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local ec=q(pitchInput+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local ed=q(rollInput+rollInput2+system.getControlDeviceYawInput(),-1,1)local ee=q(yawInput+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local ef=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local eg=adjustedRoll/180*math.pi;local eh=math.cos(eg)local ei=math.sin(eg)adjustedPitch=e7(worldVertical,constructForward,constructRight*eh+constructUp*ei)local ej=constructVelocity:normalize()local ek=c(adjustedRoll)local el=utils.sign(adjustedRoll)local em=vec3(core.getWorldAngularVelocity())local en=ec*pitchSpeedFactor*constructRight+ed*rollSpeedFactor*constructForward+ee*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local eo=c(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and eo>0 or atmosDensity>0.0 and eo<autoRollRollThreshold and autoRollPreference)and ed==0 and c(adjustedPitch)<85 then local ep=targetRoll;local eq=autoRollFactor;if atmosDensity==0 then eq=eq/4;targetRoll=0;ep=0 end;if rollPID==nil then rollPID=pid.new(eq*0.01,0,eq*0.1)end;rollPID:inject(ep-adjustedRoll)local er=rollPID:get()en=en+er*constructForward end end;local es=1;local et=0;local eu=1;local ev=system.getMouseWheel()if ev>0 then AP.changeSpd()elseif ev<0 then AP.changeSpd(true)else I=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local ew=throttlePID:get()calculatedThrottle=q(ew,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;r:setThrottleCommand(axisCommandId.longitudinal,q(calculatedThrottle,0.01,1))else ThrottleLimited=false;r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local ex=q(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=ex end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=q(calculatedThrottle,0.01,1)end;local ey=''local ez=vec3()local eA=dU(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",eA,et)local eB='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eB=eB..ExtraLongitudeTags end;local eC=r:getAxisCommandType(axisCommandId.longitudinal)local eD=r:composeAxisAccelerationFromThrottle(eB,axisCommandId.longitudinal)local eE=e6(axisCommandId.lateral,LeftAmount*1000)ey=ey..' , '.."lateral airfoil , lateral ground "ez=ez+eE;if ez:len()>constants.epsilon then a:setEngineForceCommand(ey,ez,et,'','','',eu)end;a:setEngineForceCommand(eB,eD,es)local eF='thrust analog vertical fueled 'local eG='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then eG=eG..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then eF=eF..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(eF,eA,es)else a:setEngineForceCommand(eF,vec3(),es)end;if LeftAmount~=0 then a:setEngineForceCommand(eG,eE,es)else a:setEngineForceCommand(eG,vec3(),es)end;if ef==0 then ef=brakeInput2 end;local eH=-ef*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*ej)a:setEngineForceCommand('brake',eH)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local dW=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-dW/3.6)local ex=q(brakePID:get(),0,1)ef=q(ef+ex,0,1)end;local eH=-ef*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*ej)a:setEngineForceCommand('brake',eH)local ey=''local ez=vec3()local eI=false;local eB='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then eB=eB..ExtraLongitudeTags end;local eC=r:getAxisCommandType(axisCommandId.longitudinal)if eC==axisCommandType.byThrottle then local eD=r:composeAxisAccelerationFromThrottle(eB,axisCommandId.longitudinal)a:setEngineForceCommand(eB,eD,es)elseif eC==axisCommandType.byTargetSpeed then local eD=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ey=ey..' , '..eB;ez=ez+eD;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then eI=true end end;local eG='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then eG=eG..ExtraLateralTags end;local eJ=r:getAxisCommandType(axisCommandId.lateral)if eJ==axisCommandType.byThrottle then local eK=r:composeAxisAccelerationFromThrottle(eG,axisCommandId.lateral)a:setEngineForceCommand(eG,eK,es)elseif eJ==axisCommandType.byTargetSpeed then local eE=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ey=ey..' , '..eG;ez=ez+eE end;local eF='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then eF=eF..ExtraVerticalTags end;local eL=r:getAxisCommandType(axisCommandId.vertical)if eL==axisCommandType.byThrottle then local eA=r:composeAxisAccelerationFromThrottle(eF,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(eF,eA,es,'airfoil','ground','',eu)else a:setEngineForceCommand(eF,vec3(),es)a:setEngineForceCommand('airfoil vertical',eA,es,'airfoil','','',eu)a:setEngineForceCommand('ground vertical',eA,es,'ground','','',eu)end elseif eL==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),es)end;local eM=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ey=ey..' , '..eF;ez=ez+eM end;if ez:len()>constants.epsilon then if brakeInput~=0 or eI or c(ej:dot(constructForward))<0.5 then ey=ey..', brake'end;a:setEngineForceCommand(ey,ez,et,'','','',eu)end end;local eN=torqueFactor*(en-em)local eO=vec3(core.getWorldAirFrictionAngularAcceleration())eN=eN-eO;a:setEngineTorqueCommand('torque',eN,es,'airfoil','','',eu)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local c3=coreVelocity:len()local eP=0.15;if not throttleMode then local eQ=r:getTargetSpeed(axisCommandId.longitudinal)if c3*3.6>eQ*(1-eP)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c3*3.6<eQ*(1-eP)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local dp=unit.getThrottle()if AtmoSpeedAssist then dp=PlayerThrottle*100 end;local dW=dp/100;if j==0 then dW=dW*MaxGameVelocity;if c3>=dW*(1-eP)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c3<dW*(1-eP)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local eR=d(adjustedAtmoSpeedLimit)dW=dW*eR/3.6;if c3>=dW*(1-eP)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif c3<dW*(1-eP)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local eS=coroutine.status(beginSetup)if eS=="suspended"then local ay,eT=coroutine.resume(beginSetup)if eT then system.print("ERROR STARTUP: "..eT)end elseif eS=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(eU)CONTROL.startControl(eU)end;function script.onActionStop(eU)CONTROL.stopControl(eU)end;function script.onActionLoop(eU)CONTROL.loopControl(eU)end;function script.onInputText(Y)CONTROL.inputTextControl(Y)end;function script.onEnter(aG)if radar_1 and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aG)if radar_1 and CollisionSystem then if#contacts>650 then aG=tostring(aG)contacts[aG]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
