name: ArchHud - Archaegeo v1.015 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.015;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local b={"VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;local m=math.atan;local n=string.match;local tostring=tostring;local o=utils.round;local p=system.getTime;local function q(r,s)local t=10^(s or 0)return c(r*t+0.5)/t end;local u=SafeR;local v=SafeB;local w=SafeG;local x=false;local y=0;local z=0;local A=0;local B=false;local C=0;local D=false;local E=q(ResolutionX/2,0)local F=q(ResolutionY/2,0)local G=false;local H=55;local I=false;local J=false;local K=0;local L=0;local M=0;local N=0;local O=0;local P=0;local Q=0;local R=false;local S=false;local T="empty"local U=5;local V=5;local W=false;local X,Y=0;local Z,a0=0;local a1=nil;local a2=0;local a3=0;local a4=false;local a5=0;local a6=0;local a7=0;local a8=3;local a9=0;local aa=""local ab=""local ac=0;local ad=false;local ae=false;local af=false;local ag=-1;local ah=false;local ai=""local aj=h()>0;local ak=h()local al=core.getAltitude()local am=core.getElementIdList()local an=p()local ao=nil;local ap=false;local aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]local ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local as={}local at=0;local au=0;local av=""local aw=true;local ax={}local ay=ResolutionX;local az=ResolutionY;local aA=false;local aB=false;local aC=0;local aD=nil;local aE={}local aF={}local aG={}local aH=0;local aI=false;local aJ={}local aK={}local aL=c(1/apTickRate)*2;local aM={}local aN={}local aO={}local aP={}local aQ=false;local aR=16;local aS=0;local aT=nil;local aU=""local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=false;local b4=false;local b5=autoRollPreference;local b6=LandingGearGroundHeight;local b7=system.getMouseDeltaX()local b8=system.getMouseDeltaY()local b9=false;local ba=p()local bb=0;local bc=0;local bd=0;local be=AtmoSpeedLimit;local bf=0;local bg=nil;local bh=0;local bi=0;local bj=false;local bk=false;local bl={VectorToTarget=false}local bm=false;local bn=0;local bo=nil;local bp=false;local bq=false;local br=false;local bs=false;local bt=0;local bu=p()local bv=vec3(core.getConstructWorldOrientationUp())local bw=vec3(core.getConstructWorldOrientationForward())local bx=vec3(core.getConstructWorldOrientationRight())local by=vec3(core.getWorldVelocity())local bz=vec3(by):len()local bA=vec3(core.getWorldVertical())local bB=vec3(core.getConstructWorldPos())local function bC(bD,bE)if bE==nil then bE=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not bE then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bD)z=q(bD*100,0)end;local function bF(bD,bE)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bE then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bD)end;local function bG(bH)if ay==1920 then return bH else return q(ay*bH/1920,0)end end;local function bI(bH)if az==1080 then return bH else return q(az*bH/1080,0)end end;local function bJ(bK,bL)if bK==nil then bK=core.g()end;bK=q(bK,5)if bL~=nil and bL or(aD==nil or aD~=bK)then local bM=core.getVelocity()local bN=vec3(bM):len()local bO=e(unit.getData()).maxBrake;if bO~=nil and bO>0 and aj then bO=bO/utils.clamp(bN/100,0.1,1)bO=bO/ak;if ak>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bO)/2 else LastMaxBrakeInAtmo=bO end end end;if bO~=nil and bO>0 then LastMaxBrake=bO end;aD=bK end end;local function bP()AtlasOrdered={}for bQ,bH in pairs(aT[0])do table.insert(AtlasOrdered,{name=bH.name,index=bQ})end;local function bR(bS,bT)return bS.name<bT.name end;table.sort(AtlasOrdered,bR)end;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*epsilon end;local function bX(bY,bZ)local b_=vec3(bZ)if bY.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=bY.planetarySystemId},MapPosition)end;local c0=b_-bY.center;local a9=c0:len()local c1=a9-bY.radius;local c2=0;local c3=0;if not bU(a9,0)then local c4=m(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a9)end;return setmetatable({latitude=math.deg(c2),longitude=math.deg(c3),altitude=c1,bodyId=bY.bodyId,systemId=bY.planetarySystemId},MapPosition)end;local function c5(a9,c6)local c7=a9>100000;local c8,c9=""if c6==nil then c6=1 end;if c7 then c8,c9=q(a9/1000/200,c6),"SU"elseif a9<1000 then c8,c9=q(a9,c6),"M"else c8,c9=q(a9/1000,c6),"KM"end;return c8,c9 end;local function ca(cb)for bQ,bH in pairs(cb)do if bH.name and bH.name==CustomTarget.name then return bQ end end;return-1 end;local function cc()if radarPanelID~=nil and ac==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ac==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ac=0 end end;local function cd()local ce=-1;local cf=-1;if vBooster then ce=vBooster.distance()end;if hover then cf=hover.distance()end;if ce~=-1 and cf~=-1 then if ce<cf then return ce else return cf end elseif ce~=-1 then return ce elseif cf~=-1 then return cf else return-1 end end;local function cg()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b5=true;a5=0 else VertTakeOff=true;AltitudeHold=false;bp=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function ch()if bu-bc<1.5 then if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bc=-1;if AltitudeHold then return end end else bc=bu end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;R=false;b5=true;LockPitch=nil;bp=false;if cd()==-1 and not VertTakeOff then AutoTakeoff=false;if bc>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=al end end;if not aj then bp=false;bm=true;IntoOrbit=true;if not ae and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end elseif VertTakeOffEngine or VertTakeOff then cg()else AutoTakeoff=true;if bc>-1 then HoldAltitude=al+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ae then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;if VertTakeOff then cg()end;b5=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bj=false;bh=nil;bi=nil;bt=0;if IntoOrbit then if bp then CancelIntoOrbit=false else CancelIntoOrbit=true end;bp=false;IntoOrbit=false;bo=nil elseif unit.getClosestPlanetInfluence()>0 and ak==0 then IntoOrbit=true;bp=false;CancelIntoOrbit=false;if bo==nil then bo=planet end else T="Unable to engage orbiting, not near planet or in atmosphere"end end;local function ci()if l()==1 then R=not R;if R then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b5=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else T="Follow Mode only works with Remote controller"R=false end end;local function cj()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a1=nil;CustomTarget=nil;return true end;local ck=AtlasOrdered[AutopilotTargetIndex].index;local cl=aT[0][ck]if cl.center then AutopilotTargetName=cl.name;a1=aZ[0][ck]if CustomTarget~=nil then if ak==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cl;for _,bH in pairs(aZ[0])do if bH.name==CustomTarget.planetname then a1=bH;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a1.center)else AutopilotTargetCoords=CustomTarget.position end;if a1.planetname~="Space"then if a1.hasAtmosphere then AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=c(a1.radius*(TargetOrbitRadius-1)+a1.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cm(cn)if not Autopilot and not VectorToTarget and not ae and not IntoOrbit then if cn==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cj()else local ck=AtlasOrdered[AutopilotTargetIndex].index;local cl=aT[0][ck]if cl.name=="Space"then if cn==nil then cm()else cm(1)end else cj()end end else T="Disengage autopilot before changing Interplanetary Helper"end end;local function co()local function cp(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ch()end end;VectorStatus="Proceeding to Waypoint"end;if bu-bd<1.5 and ak>0 then if not bs then T="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ak>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bd=-1;if Autopilot or VectorToTarget then return end end else bd=bu end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ae and not IntoOrbit then cj()local cq=bX(a1,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ak~=0 then ae=true;ch()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ak>0 then bp=false;if not VectorToTarget then cp(SpaceTarget)end else if al>100000 or al==0 then bp=false;Autopilot=true else ad=true;ProgradeIsOn=true;if AltitudeHold then ch()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ak~=0 then ae=true;ch()else Autopilot=true end end elseif ak==0 then local cr=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a1.name==planet.name and cr)then bp=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;R=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ae=true;ch()end else ae=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=al;TargetSet=false;Reentry=false;if IntoOrbit then if not bl.VectorToTarget then IntoOrbit=false else bl.VectorToTarget=false end end end end;local function cs(ct)local cu=-1;local cv;cu=ca(SavedLocations)if cu~=-1 then local cw;if ct~=nil then cv={position=SavedLocations[cu].position,name=ct,atmosphere=SavedLocations[cu].atmosphere,planetname=SavedLocations[cu].planetname,gravity=SavedLocations[cu].gravity}else cv={position=bB,name=SavedLocations[cu].name,atmosphere=ak,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cu]=cv;cu=-1;cu=ca(aT[0])if cu>-1 then aT[0][cu]=cv end;bP()T=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cj()else T="Name Not Found"end end;local function cx(cy,cz,bT)local cA=cy:cross(bT):normalize_inplace()local cB=math.acos(utils.clamp(cA:dot(-cz),-1,1))*constants.rad2deg;if cA:cross(-cz):dot(bT)<0 then cB=-cB end;return cB end;local function cC(cD,cE,cF)cE=cE:project_on_plane(cD)cF=cF:project_on_plane(cD)return m(cE:cross(cF):dot(cD),cE:dot(cF))end;local function cd()local ce=-1;local cf=-1;if vBooster then ce=vBooster.distance()end;if hover then cf=hover.distance()end;if ce~=-1 and cf~=-1 then if ce<cf then return ce else return cf end elseif ce~=-1 then return ce elseif cf~=-1 then return cf else return-1 end end;local function cG()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b5=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;b5=autoRollPreference;ad=false;af=false;a5=0 end end;local function cH(cI,cJ)cI=vec3(cI)cJ=vec3(cJ):normalize()local c8=cI*cJ;return c8.x+c8.y+c8.z end;local function cK(cI,cL,cM)local cN=0.001;local cO=1;if not aj or not b9 or ag~=-1 or bz<H then local cP=cM;if cP==nil then cP=DampingMultiplier end;if cL==nil then cL=cN end;cI=vec3(cI):normalize()local cQ=vec3()-cI;local cR=-cH(cQ,core.getConstructWorldOrientationRight())*cO;local cS=-cH(cQ,core.getConstructWorldOrientationUp())*cO;if at==0 then at=cR/2 end;if au==0 then au=cS/2 end;if math.abs(cR)<0.1 then M=M-cR*2 else M=M-(cR+(cR-at)*cP)end;if math.abs(cS)<0.1 then L=L+cS*2 else L=L+cS+(cS-au)*cP end;at=cR;au=cS;if math.abs(cR)<cL and math.abs(cS)<cL then return true end;return false elseif b9 and ag==-1 then cI=by;local cP=cM;if cP==nil then cP=DampingMultiplier end;if cL==nil then cL=cN end;cI=vec3(cI):normalize()local cQ=bw-cI;local cR=-cH(cQ,core.getConstructWorldOrientationRight())*cO;local cS=-cH(cQ,core.getConstructWorldOrientationUp())*cO;if at==0 then at=cR/2 end;if au==0 then au=cS/2 end;if math.abs(cR)<0.1 then M=M-cR*5 else M=M-(cR+(cR-at)*cP)end;if math.abs(cS)<0.1 then L=L+cS*5 else L=L+cS+(cS-au)*cP end;at=cR;au=cS;if math.abs(cR)<cL and math.abs(cS)<cL then return true end;return false end end;local function cT()if Reentry then T="Re-Entry cancelled"Reentry=false;b5=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then T="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a8=5 elseif not I then StrongBrakes=planet.gravity*9.80665*k()<LastMaxBrakeInAtmo;if not StrongBrakes then T="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b5=true;BrakeIsOn=false;T="Beginning Parachute Re-Entry - Strap In.  Target speed: "..be end else Reentry=true;AltitudeHold=true;b5=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cU,cV=c5(HoldAltitude)T="Beginning Re-entry.  Target speed: "..be.." Target Altitude: "..cU..cV;bF(c(be))end;AutoTakeoff=false end;local function cW(bN)if not aj then bJ()return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*k())else return 0,0 end end end;local function cX(bN)bJ()return a_.computeDistanceAndTime(bN,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;local function cY()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cZ(c_)local d0=0;local d1=0;local d2=0;if c_<60 then c_=c(c_)elseif c_<3600 then d0=c(c_/60)c_=c(c_%60)elseif c_<86400 then d1=c(c_/3600)d0=c(c_%3600/60)else d2=c(c_/86400)d1=c(c_%86400/3600)end;if d2>0 then return d2 .."d "..d1 .."h "elseif d1>0 then return d1 .."h "..d0 .."m "elseif d0>0 then return d0 .."m "..c_.."s"elseif c_>0 then return c_.."s"else return"0s"end end;local function d3()local d4=-1;local d5=cd()if telemeter_1 then d4=telemeter_1.getDistance()end;if d5~=-1 and d4~=-1 then if d5<d4 then return d5 else return d4 end elseif d5~=-1 then return d5 else return d4 end end;local function d6(d7)if dbHud_1 then if not a4 then for bQ,bH in pairs(b)do dbHud_1.setStringValue(bH,f(_G[bH]))if d7 and dbHud_2 then dbHud_2.setStringValue(bH,f(_G[bH]))end end;for bQ,bH in pairs(a)do dbHud_1.setStringValue(bH,f(_G[bH]))if d7 and dbHud_2 then dbHud_2.setStringValue(bH,f(_G[bH]))end end;system.print("Saved Variables to Datacore")if d7 and dbHud_2 then T="Databank copied.  Remove copy when ready."end end end end;local function d8()local d9={}local function da()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;local function db()local dc=Nav.axisCommandManager:getAxisCommandType(0)local dd="TRAVEL"if dc==1 then dd="CRUISE"end;if Autopilot then dd="AUTOPILOT"end;return dd end;local function de(df,aQ,dg,dh,di,dj,dk,dl)local dm=1;local dn=2;local dp=3;local dq=4;local dr=5;local ds=6;local dt=""local du=0;local dv=fuelY;local dw=fuelY+10;if l()==1 and not RemoteHud then dv=dv-50;dw=dw-50 end;df[#df+1]=[[<g class="pdim txtfuel">]]if di=="ATMO"then dt="atmofueltank"elseif di=="SPACE"then dt="spacefueltank"else dt="rocketfueltank"end;du=_G[dt.."_size"]if#dj>0 then for i=1,#dj do local dx=string.sub(dj[i][dn],1,12)local dy=0;for dz=1,du do if dj[i][dn]==e(unit[dt.."_"..dz].getData()).name then dy=dz;break end end;if aQ or dk[i]==nil or dl[i]==nil then local dA=0;local dB=0;local dC=0;local dD=0;local dE=p()if dy~=0 then dl[i]=e(unit[dt.."_"..dy].getData()).percentage;dk[i]=e(unit[dt.."_"..dy].getData()).timeLeft;if dk[i]=="n/a"then dk[i]=0 end else dC=j(dj[i][dm])-dj[i][dq]dA=dj[i][dp]dl[i]=c(0.5+dC*100/dA)dB=dj[i][dr]dD=dj[i][ds]if dB<=dC then dk[i]=0 else dk[i]=c(0.5+dC/((dB-dC)/(dE-dD)))end;dj[i][dr]=dC;dj[i][ds]=dE end end;if dx==dh then dx=d("%s %d",di,i)end;if dy==0 then dx=dx.." *"end;local dF;if dk[i]==0 then dF="n/a"else dF=cZ(dk[i])end;if dl[i]~=nil then local dG=c(dl[i]*2.55)local dH=d("rgb(%d,%d,%d)",255-dG,dG,0)local dI=""if dF~="n/a"and dk[i]<120 or dl[i]<5 then if aQ then dI=[[class="red"]]end end;df[#df+1]=d([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dg,dv,dI,dx,dg,dw,dH,dl[i],dF)dv=dv+30;dw=dw+30 end end end;df[#df+1]="</g>"end;local function dJ(df,c1)if c1<200000 and not aj or c1 and aj then local dK=-bA:dot(by)local dL=0;if math.abs(dK)>1 then dL=45*math.log(math.abs(dK),10)if dK<0 then dL=-dL end end;df[#df+1]=d([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,c(dK),c(dL))end;return df end;local function dM(cz)local cn=-bA;cz=cz-cz:project_on(cn)local dN=vec3(0,0,1)dN=dN-dN:project_on(cn)local dO=dN:cross(cn)local dL=dN:angle_between(cz)*constants.rad2deg;if cz:dot(dO)<0 then dL=360-dL end;return dL end;local function dP(df,centerX,centerY,dQ,dR,cr)local dS=circleRad;local dT=20;dT=c(dT)local dU=c(dQ)if cr then for i=-45,45,5 do local dV=i;df[#df+1]=d([[<g transform="rotate(%f,%d,%d)">]],dV,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;df[#df+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dS+dT-len,centerX,centerY+dS+dT)end;df[#df+1]=d([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+dS+dT-35,dR,centerX,centerY+dS+dT-25,dU)df[#df+1]=d([[<g transform="rotate(%f,%d,%d)">]],-dQ,centerX,centerY)df[#df+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dS+dT-20,centerX+5,centerY+dS+dT-20,centerX,centerY+dS+dT-15)df[#df+1]="</g>"end;local dW=dU;if cr then dW=dM(bw)end;local dX=20;local dY=c(dW)local dZ=0;local d_=centerY+dS+dT+20;local e0=centerX;if dR~="YAW"then d_=bI(130)e0=bG(960)end;local e1=[[<path class="txttick line" d="]]for i=c(dY-(dX+10)-dY%5+0.5),c(dY+dX+10+dY%5+0.5),5 do local dg=e0+-i*5+dW*5;if i%10==0 then dZ=10;local r=i;if r==360 then r=0 elseif r>360 then r=r-360 elseif r<0 then r=r+360 end;df[#df+1]=d([[
                                    <text x="%f" y="%f">%d</text>]],dg+5,d_-12,r)elseif i%5==0 then dZ=5 end;if dZ==10 then e1=d([[%s M %f %f v %d]],e1,dg,d_-5,dZ)else e1=d([[%s M %f %f v %d]],e1,dg,d_-2.5,dZ)end end;df[#df+1]=e1 ..[["/>]]df[#df+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e0-5,d_+10,e0+5,d_+10,e0,d_+5)if cr then dR="HDG"end;df[#df+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],e0,d_+25,dY,e0,d_+35,dR)end;local function e2(df,e3,dQ,centerX,centerY,cr,e4,bN)local dS=circleRad;local e5=c(dS*3/5)if dS>0 then local e6=c(e3)local len=0;local e1=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dQ,centerX,centerY)if not aj then e1=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;df[#df+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dS-1,centerX,centerY)df[#df+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(e6-30-e6%5+0.5),c(e6+30+e6%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local e7=centerY+-i*5+e3*5;if len==30 then e1=d([[%s M %d %f h %d]],e1,centerX-e5-len,e7,len)if aj then df[#df+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dQ,centerX,centerY,centerX-e5+10,e7,i)df[#df+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dQ,centerX,centerY,centerX+e5-10,e7,i)if i==0 or i==180 or i==-180 then df[#df+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dQ,centerX,centerY,centerX-e5+20,e7,e5*2-40)end else df[#df+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e5+10,e7,i)df[#df+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e5-10,e7,i)end;e1=d([[%s M %d %f h %d]],e1,centerX+e5,e7,len)else e1=d([[%s M %d %f h %d]],e1,centerX-e5-len,e7,len)e1=d([[%s M %d %f h %d]],e1,centerX+e5,e7,len)end end;df[#df+1]=e1 ..[["/>]]local e8="PITCH"if not cr then e8="REL PITCH"end;if e3>90 and not aj then e3=90-(e3-90)elseif e3<-90 and not aj then e3=-90-(e3+90)end;if dS>200 then if aj then if bN>H then df[#df+1]=d([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e4)end;df[#df+1]=d([[<g transform="rotate(%f,%d,%d)">]],-dQ,centerX,centerY)else df[#df+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;df[#df+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e5+25,centerY-5,centerX-e5+20,centerY,centerX-e5+25,centerY+5,centerX-e5+50,centerY+4,e6)df[#df+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e5-25,centerY-5,centerX+e5-20,centerY,centerX+e5-25,centerY+5,centerX+e5-30,centerY+4,e6)df[#df+1]="</g>"end;local e9=c(dS/3)df[#df+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-e9,centerY,dS-e9)if not aj and cr then df[#df+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dQ,centerX,centerY,centerX-e5+10,centerY,e5*2-20)end;df[#df+1]="</g>"if dS<200 then if aj and bN>H then df[#df+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dS,e8,centerX,centerY-dS+10,e6,centerX,centerY-15,"Yaw",centerX,centerY+20,e4)else df[#df+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dS,e8,centerX,centerY-dS+15,e6)end end end end;local function ea(df,c1,cr)local eb=altMeterX;local ec=altMeterY;local ed=78;local ee=19;local ef=d3()if ef~=-1 then table.insert(df,d([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],eb+ed,ec+ee+20,ef))end;if cr and(c1<200000 and not aj or c1 and aj)then table.insert(df,d([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],eb-1,ec-4,ed+2,ee+6,eb+1,ec-1,ed-4,ee))local cu=0;local eg=1;local eh=0;local ei=c1<0;local ej=9;if ei then ej=0 end;local c1=math.abs(c1)while cu<6 do local ek=11;local el=16;local em=9;local en=14;local dI="altsm"if cu>2 then el=el+3;ek=ek+2;en=en+2;em=em-6;dI="altbig"end;if ei then dI=dI.." red"end;local eo=c1/eg%10;local ep=c(eo)local eq=c((ep+1)%10)local er=eh;if cu==0 then er=eo-ep;if ei then er=1-er end end;if ei and(cu==0 or eh~=0)then local es=eq;eq=ep;ep=es end;local et=el*(er-1)local eu=et+el;local dg=eb+em+(6-cu)*ek;local e7=ec+en;table.insert(df,d([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dI,dg,e7+et,eq,dg,e7+eu,ep))cu=cu+1;eg=eg*10;if ep==ej then eh=er else eh=0 end end;table.insert(df,[[</g></g>]])end end;local function ev(bM)bM=vec3(bM)local cB=-math.deg(m(bM.y,bM.z))+180;cB=cB-90;if cB<0 then cB=360+cB end;if cB>180 then cB=-180+cB-180 end;return-cB end;local function ew(bM)bM=vec3(bM)local dW=math.deg(m(bM.y,bM.x))-90;if dW<-180 then dW=360+dW end;return dW end;local function ex(df,bM,bN,centerX,centerY)if bN>5 and not aj or bN>H then local dS=circleRad;local ey=20;local ez=20;local eA=vec3(bM)local eB=ev(eA)local eC=ew(eA)local eD=14;local eE=eD/2;local eF=-eC/ez*dS;local eG=eB/ey*dS;local dg=centerX+eF;local e7=centerY+eG;local a9=math.sqrt(eF^2+eG^2)local eH=[[<circle
                        cx="]]..dg..[["
                        cy="]]..e7 ..[["
                        r="]]..eE/eD..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dg..[["
                        cy="]]..e7 ..[["
                        r="]]..eE..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dg-eD..[[,]]..e7 ..[[ h ]]..eE..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dg+eE..[[,]]..e7 ..[[ h ]]..eE..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dg..[[,]]..e7-eD..[[ v ]]..eE..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if a9<dS then df[#df+1]=eH else local dL=m(eG,eF)local eI=4;local eJ=centerX+dS*math.cos(dL)local eK=centerY+dS*math.sin(dL)df[#df+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dL*180/math.pi,eJ,eK,eJ-eI,eK-eI/2,eI*2,eI,eJ+eI,eK-eI,eI,eI,-eI,eI)end;if not aj then eB=ev(-eA)eC=ew(-eA)eF=-eC/ez*dS;eG=eB/ey*dS;dg=centerX+eF;e7=centerY+eG;a9=math.sqrt(eF^2+eG^2)if a9<dS then local eL=[[<circle
                                cx="]]..dg..[["
                                cy="]]..e7 ..[["
                                r="]]..eE..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dg..[[,]]..e7-eD..[[ v ]]..eE..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dg..[[,]]..e7 ..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dg..[[,]]..e7 ..[[)" />
                            <path
                                d="M ]]..dg-eE..[[,]]..e7 ..[[ h ]]..eD..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dg..[[,]]..e7 ..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dg..[[,]]..e7 ..[[)"/>]]df[#df+1]=eL end end end end;local function eM(df,dd,eN,eO)eN=c(eN+0.5)local dv=throtPosY+10;local dw=throtPosY+20;if l()==1 and not RemoteHud then dv=55;dw=65 end;local eP="CRUISE"local unit="km/h"local bD=eO;if dd=="TRAVEL"or dd=="AUTOPILOT"then eP="THROT"unit="%"bD=eN;local eQ="dim"if eN<0 then eQ="red"end;df[#df+1]=d([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],eQ,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eN),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;df[#df+1]=d([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dv,eP,throtPosX+10,dw,bD,unit)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then eN=c(C*100+0.5)local eQ="red"if eN<0 then eQ="red"end;df[#df+1]=d([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],eQ,1-math.abs(eN),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)df[#df+1]=d([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dv+40,"LIMIT",throtPosX+10,dw+40,eN,"%")end;if aj and AtmoSpeedAssist or Reentry then df[#df+1]=d([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dv-40,"LIMIT: ",be.." km/h")elseif not aj and Autopilot then df[#df+1]=d([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dv-40,"LIMIT: ",c(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eR(df,eS)local eT=throtPosY-10;local eU=throtPosX+10;df[#df+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then eT=75 end;df[#df+1]=d([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],eU,eT,c(eS))end;local function eV(df)df[#df+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],bG(1900),bI(1070),VERSION_NUMBER)df[#df+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then df[#df+1]=d([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bG(960),bI(550))df[#df+1]=d([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bG(960),bI(600))df[#df+1]=d([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bG(960),bI(650))end;local eW=bG(960)local eX=bI(860)local eY=bI(880)local eZ=bI(900)local e_=bI(960)local f0=bI(200)local f1=bI(150)local f2=bI(960)if l()==1 and not RemoteHud then eX=bI(135)eY=bI(155)eZ=bI(175)f0=bI(115)f1=bI(95)end;if BrakeIsOn then df[#df+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],eW,eX)elseif A>0 then df[#df+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eW,eX,A)end;if aj and b9 and cd()==-1 then df[#df+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],eW,f0+50)end;if ao then df[#df+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],eW,f2)end;if GearExtended then if J then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eW,eY)else df[#df+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eW,eY)end;local f3,c9=c5(Nav:getTargetGroundAltitude())df[#df+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eW,eZ,f3 ..c9)end;if W then df[#df+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eW,e_+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(al-antigrav.getBaseAltitude())<501 then df[#df+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eW,f0+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else df[#df+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eW,f0+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eW,f0+20,AutopilotStatus)elseif LockPitch~=nil then df[#df+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eW,f0+20,c(LockPitch))elseif R then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eW,f0+20)elseif Reentry then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eW,f0+20)end;local f4,f5,f6=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(f7)if f7.noAtmosphericDensityAltitude>0 then return f7.radius+f7.noAtmosphericDensityAltitude else return f7.radius+f7.surfaceMaxAltitude*1.5 end end)local f8=f5;if f6~=nil and f5~=nil then f8=math.min(f6,f5)end;if AltitudeHold or VertTakeOff then local f3,c9=c5(HoldAltitude,2)if AutoTakeoff and not IntoOrbit then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eW,f0,f3 ..c9)if BrakeIsOn then df[#df+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eW,f0+50)end elseif VertTakeOff then if antigrav and antigrav.getState()==1 then f3,c9=c5(antigrav.getBaseAltitude(),2)else f3,c9="Orbit",""end;df[#df+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eW,f0,f3 ..c9)else df[#df+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eW,f0,f3 ..c9)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ak>0.1 then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],eW,f0)elseif ak<0.09 and ak>0.05 then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],eW,f0)elseif ak<0.05 then df[#df+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],eW,f0)end end;if IntoOrbit then if bg~=nil then df[#df+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],eW,f0,bg)end end;if BrakeLanding then if StrongBrakes then df[#df+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],eW,f0)else df[#df+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],eW,f0)end end;if ProgradeIsOn then df[#df+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eW,f0)end;if RetrogradeIsOn then df[#df+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eW,f0)end;if TurnBurn then df[#df+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eW,f1)elseif f8~=nil and ak==0 then local f3,c9=c5(f8)local travelTime=a_.computeTravelTime(bz,0,f8)local f9="Collision"if f4.noAtmosphericDensityAltitude>0 then f9="Atmosphere"end;df[#df+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eW,f1,f4.name,f9,cZ(travelTime),f3 ..c9)end;if VectorToTarget and not IntoOrbit then df[#df+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],eW,f0+30,VectorStatus)end;df[#df+1]="</g>"return df end;local function fa(bN)return c(q(bN*3.6,0)+0.5).." km/h"end;local function fb(df)if orbit~=nil and ak<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fc=OrbitMapX;local fd=OrbitMapY;local fe=OrbitMapSize;local ff=4;fd=fd+ff;local fg=15;local dg=fc+fe+fc/2+ff;local e7=fd+fe/2+5+ff;local fh,fi,fj,fk;fh=fe/4;fk=0;df[#df+1]=[[<g class="pbright txtorb txtmid">]]df[#df+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fe+fc*2,fe+fd,ff,ff)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fj=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fh*2)fi=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fj*(1-orbit.eccentricity)fk=fh-orbit.periapsis.altitude/fj-planet.radius/fj;local fl=""if orbit.periapsis.altitude<=0 then fl='redout'end;df[#df+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fl,fc+fe/2+fk+ff,fd+fe/2+ff,fh,fi)df[#df+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fc+fe/2+ff,fd+fe/2+ff,planet.radius/fj)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then df[#df+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dg-35,e7-5,fc+fe/2+fh+fk,e7-5)df[#df+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],dg,e7)e7=e7+fg;local f3,c9=c5(orbit.apoapsis.altitude)df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,f3 ..c9)e7=e7+fg;df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,cZ(orbit.timeToApoapsis))e7=e7+fg;df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,fa(orbit.apoapsis.speed))end;e7=fd+fe/2+5+ff;dg=fc-fc/2+10+ff;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then df[#df+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dg+35,e7-5,fc+fe/2-fh+fk,e7-5)df[#df+1]=d([[<text x="%f" y="%f">Periapsis</text>]],dg,e7)e7=e7+fg;local f3,c9=c5(orbit.periapsis.altitude)df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,f3 ..c9)e7=e7+fg;df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,cZ(orbit.timeToPeriapsis))e7=e7+fg;df[#df+1]=d([[<text x="%f" y="%f">%s</text>]],dg,e7,fa(orbit.periapsis.speed))end;df[#df+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fc+fe/2+ff,20+ff,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fm=orbit.timeToApoapsis/orbit.period*2*math.pi;local fn=fh*math.cos(fm)local fo=fi*math.sin(fm)df[#df+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fc+fe/2+fn+fk+ff,fd+fe/2+fo+ff)end;df[#df+1]=[[</g>]]return df else return df end end;function d9.HUDPrologue(df)if not x then u=PvPR;w=PvPG;v=PvPB else u=SafeR;w=SafeG;v=SafeB end;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]local fp=aq;local fq=ar;local fr=aq;local fs=ar;if da()and not brightHud then fp=[[rgb(]]..c(u*0.4+0.5)..","..c(w*0.4+0.5)..","..c(v*0.3+0.5)..[[)]]fq=[[rgb(]]..c(u*0.3+0.5)..","..c(w*0.3+0.5)..","..c(v*0.2+0.5)..[[)]]end;df[#df+1]=d([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fp,fp,fr,fr,fq,fq,fs,fs,ay,az)return df end;function d9.UpdateHud(df)local c1=al;local bM=core.getVelocity()local bN=vec3(bM):len()local ft=getRoll(bA,bw,bx)local fu=ft/180*math.pi;local fv=math.cos(fu)local fw=math.sin(fu)local cB=cx(bA,bw,bx*fv+bv*fw)local dQ=ft;local e3=cB;local eN=c(unit.getThrottle())local eS=bN*3.6;local eO=unit.getAxisCommandValue(0)local fx=bG(1770)local fy=bI(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eO=z;eN=z*100 end;local dd=db()local dR="ROLL"local cr=unit.getClosestPlanetInfluence()>0;if eN==nil then eN=0 end;if not cr then if bN>5 then cB=ev(bM)ft=ew(bM)else cB=0;ft=0 end;dR="YAW"end;if y>50000 and not aj then local fz;if y>200000 then fz=q(y/200000,2).." su"else fz=q(y/1000,1).." km"end;df[#df+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fx,fy,fz)end;df[#df+1]=ab;df[#df+1]=av;df[#df+1]=aa;if aS%aL==0 then aQ=true end;if fuelX~=0 and fuelY~=0 then de(df,aQ,fuelX,"Atmospheric ","ATMO",aE,aO,aP)de(df,aQ,fuelX+100,"Space fuel t","SPACE",aF,aM,aN)de(df,aQ,fuelX+200,"Rocket fuel ","ROCKET",aG,aJ,aK)end;if aQ then aQ=false;aS=0 end;aS=aS+1;dJ(df,c1)if l()==0 or RemoteHud then if not da()or brightHud then if cr then dP(df,centerX,centerY,dQ,dR,cr)e2(df,e3,dQ,centerX,centerY,cr,c(ew(bM)),bN)else dP(df,centerX,centerY,ft,dR,cr)e2(df,cB,ft,centerX,centerY,cr,c(ft),bN)end;ea(df,c1,cr)ex(df,bM,bN,centerX,centerY)end end;eM(df,dd,eN,eO)eR(df,eS)eV(df)fb(df)if screen_2 then local fA=bB;local dg=960+fA.x/aV;local e7=450+fA.y/aW;screen_2.moveContent(aX,(dg-80)/19.2,(e7-80)/10.8)end;return df end;function d9.HUDEpilogue(df)df[#df+1]="</svg>"return df end;function d9.DrawOdometer(df,a2,TotalDistanceTravelled,a3,fB)local fC=bG(1240)local fD=bI(55)local fE=fD+10;local bK=core.g()local fF=0;local fG=0;local fH=0;local dd=db()bJ(bK)if aj then fH=LastMaxBrakeInAtmo else fH=LastMaxBrake end;maxThrust=Nav:maxForceForward()aC=k()if not ShowOdometer then return end;local fI=vec3(core.getWorldAcceleration()):len()/9.80665;bK=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bK>0.1 then fG=aC*bK;fF=maxThrust/bK end;df[#df+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then fC=bG(1120)fD=bI(55)fE=fD+10 elseif aj then local fJ=bG(770)df[#df+1]=d([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fJ,fD,fJ,fE,ak)end;df[#df+1]=d([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fC,fD,fC,fE,bK/9.80665,fC,fD+20,fC,fE+20,fI)df[#df+1]=d([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bG(660),bG(700),bI(35),bG(960),bI(55),bG(1240),bI(35),bG(1280))if l()==0 or RemoteHud then df[#df+1]=d([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bG(700),bI(20),a2,bG(700),bI(30),TotalDistanceTravelled/1000,bG(830),bI(20),cZ(a3),bG(830),bI(30),cZ(TotalFlightTime),bG(970),bI(20),aC/1000,bG(1240),bI(10),fH/1000,bG(1240),bI(30),maxThrust/1000,bG(960),bI(180),dd)if bK>0.1 then df[#df+1]=d([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bG(970),bI(30),fF/1000,bG(1240),bI(20),fG/1000)else df[#df+1]=d([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bG(970),bI(30),bG(1240),bI(20))end else df[#df+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bG(960),bI(33),dd)end;df[#df+1]="</g>"return df end;function d9.DrawWarnings(df)return eV(df)end;function d9.DisplayOrbitScreen(df)return fb(df)end;function d9.DisplayMessage(df,f3)if f3~="empty"then df[#df+1]=[[<text class="msg" x="50%%" y="310" >]]for fK in string.gmatch(f3,"([^\n]+)")do df[#df+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],fK)end;df[#df+1]=[[</text>]]end;if a8~=0 then unit.setTimer("msgTick",a8)a8=0 end end;function d9.DrawDeadZone(df)df[#df+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return d9 end;local function fL()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function fM()local function fN(fO)return type(fO)=='number'end;local function fP(fO)return type(tonumber(fO))=='number'end;local function fQ(fR)return type(fR)=='table'end;local function fS(fT)return type(fT)=='string'end;local function fU(bH)return fQ(bH)and fN(bH.x and bH.y and bH.z)end;local function fV(fW)return fQ(fW)and fN(fW.latitude and fW.longitude and fW.altitude and fW.bodyId and fW.systemId)end;local fX=math.pi/180;local fY=180/math.pi;local epsilon=1e-10;local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local fZ='::pos{'..r..','..r..','..r..','..r..','..r..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local f_=utils.clamp;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*epsilon end;local function g0(fO)local c8=string.gsub(string.reverse(d('%.4f',fO)),'^0*%.?','')return c8==''and'0'or string.reverse(c8)end;local function g1(g2)if fU(g2)then return d('{x=%.3f,y=%.3f,z=%.3f}',g2.x,g2.y,g2.z)end;if fQ(g2)and not getmetatable(g2)then local g3={}local g4=next(g2)if type(g4)=='nil'or g4==1 then g3=g2 else for bQ,bH in pairs(g2)do local bD=g1(bH)if type(bQ)=='number'then table.insert(g3,d('[%s]=%s',bQ,bD))else table.insert(g3,d('%s=%s',bQ,bD))end end end;return d('{%s}',table.concat(g3,','))end;if fS(g2)then return d("'%s'",g2:gsub("'",[[\']]))end;return tostring(g2)end;local g5={}g5.__index=g5;g5.__tostring=function(g2,g6)local g7={}for bQ in pairs(g2)do table.insert(g7,bQ)end;table.sort(g7)local g3={}for _,bQ in ipairs(g7)do local bD=g1(g2[bQ])if type(bQ)=='number'then table.insert(g3,d('[%s]=%s',bQ,bD))else table.insert(g3,d('%s=%s',bQ,bD))end end;if g6 then return d('%s%s',g6,table.concat(g3,',\n'..g6))end;return d('{%s}',table.concat(g3,','))end;g5.__eq=function(g8,g9)return g8.planetarySystemId==g9.planetarySystemId and g8.bodyId==g9.bodyId and bU(g8.radius,g9.radius)and bU(g8.center.x,g9.center.x)and bU(g8.center.y,g9.center.y)and bU(g8.center.z,g9.center.z)and bU(g8.GM,g9.GM)end;local function ga(gb,gc,gd,bZ,ge)assert(fP(gb),'Argument 1 (planetarySystemId) must be a number:'..type(gb))assert(fP(gc),'Argument 2 (bodyId) must be a number:'..type(gc))assert(fP(gd),'Argument 3 (radius) must be a number:'..type(gd))assert(fQ(bZ),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(bZ))assert(fP(ge),'Argument 5 (GM) must be a number:'..type(ge))return setmetatable({planetarySystemId=tonumber(gb),bodyId=tonumber(gc),radius=tonumber(gd),center=vec3(bZ),GM=tonumber(ge)},g5)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gf)return d('::pos{%d,%d,%s,%s,%s}',gf.systemId,gf.bodyId,g0(gf.latitude*fY),g0(gf.longitude*fY),g0(gf.altitude))end;MapPosition.__eq=function(g8,g9)return g8.bodyId==g9.bodyId and g8.systemId==g9.systemId and bU(g8.latitude,g9.latitude)and bU(g8.altitude,g9.altitude)and(bU(g8.longitude,g9.longitude)or bU(g8.latitude,math.pi/2)or bU(g8.latitude,-math.pi/2))end;local function gg(gh,gc,c2,c3,c1)local gb=gh;if fS(gh)and not c3 and not c1 and not gc and not c2 then gb,gc,c2,c3,c1=n(gh,fZ)assert(gb,'Argument 1 (position string) is malformed.')else assert(fP(gb),'Argument 1 (systemId) must be a number:'..type(gb))assert(fP(gc),'Argument 2 (bodyId) must be a number:'..type(gc))assert(fP(c2),'Argument 3 (latitude) must be in degrees:'..type(c2))assert(fP(c3),'Argument 4 (longitude) must be in degrees:'..type(c3))assert(fP(c1),'Argument 5 (altitude) must be in meters:'..type(c1))end;gb=tonumber(gb)gc=tonumber(gc)c2=tonumber(c2)c3=tonumber(c3)c1=tonumber(c1)if gc==0 then return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=gc,systemId=gb},MapPosition)end;return setmetatable({latitude=fX*f_(c2,-90,90),longitude=fX*(c3%360),altitude=c1,bodyId=gc,systemId=gb},MapPosition)end;local gi={}gi.__index=gi;gi.__tostring=function(g2,g6)local gj=g6 and g6 ..'  'local gk={}local g7={}for bQ in pairs(g2)do table.insert(g7,bQ)end;table.sort(g7)for _,gl in ipairs(g7)do bdy=g2[gl]local gm=g5.__tostring(bdy,gj)if g6 then table.insert(gk,d('[%s]={\n%s\n%s}',gl,gm,g6))else table.insert(gk,d('  [%s]=%s',gl,gm))end end;if g6 then return d('\n%s%s%s',g6,table.concat(gk,',\n'..g6),g6)end;return d('{\n%s\n}',table.concat(gk,',\n'))end;local function gn(go)local aT={}local pid;for _,bH in pairs(go)do local gp=bH.planetarySystemId;if type(gp)~='number'then error('Invalid planetary system ID: '..tostring(gp))elseif pid and gp~=pid then error('Mistringmatch planetary system IDs: '..gp..' and '..pid)end;local gq=bH.bodyId;if type(gq)~='number'then error('Invalid body ID: '..tostring(gq))elseif aT[gq]then error('Duplicate body ID: '..tostring(gq))end;setmetatable(bH.center,getmetatable(vec3.unit_x))aT[gq]=setmetatable(bH,g5)pid=gp end;return setmetatable(aT,gi)end;aY={}local function gr(go)return setmetatable({galaxyAtlas=go or{}},aY)end;aY.__index=function(fR,i)if type(i)=='number'then local system=fR.galaxyAtlas[i]return gn(system)end;return rawget(aY,i)end;aY.__pairs=function(g2)return function(fR,bQ)local gs,nv=next(fR,bQ)return gs,nv and gn(nv)end,g2.galaxyAtlas,nil end;aY.__tostring=function(g2)local gt={}for _,gu in pairs(g2 or{})do local gv=gu:getPlanetarySystemId()local gw=gi.__tostring(gu,'    ')table.insert(gt,d('  [%s]={%s\n  }',gv,gw))end;return d('{\n%s\n}\n',table.concat(gt,',\n'))end;aY.BodyParameters=ga;aY.MapPosition=gg;aY.PlanetarySystem=gn;function aY.createBodyParameters(gx,gc,gy,gz,gA,gB,gC)assert(fP(gx),'Argument 1 (planetarySystemId) must be a number:'..type(gx))assert(fP(gc),'Argument 2 (bodyId) must be a number:'..type(gc))assert(fP(gy),'Argument 3 (surfaceArea) must be a number:'..type(gy))assert(fQ(gz),'Argument 4 (aPosition) must be an array or vec3:'..type(gz))assert(fQ(gA),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gA))assert(fP(gB),'Argument 6 (altitude) must be in meters:'..type(gB))assert(fP(gC),'Argument 7 (gravityAtPosition) must be number:'..type(gC))local gd=math.sqrt(gy/4/math.pi)local a9=gd+gB;local gD=vec3(gz)+a9*vec3(gA)local ge=gC*a9*a9;return ga(gx,gc,gd,gD,ge)end;aY.isMapPosition=fV;function aY:getPlanetarySystem(gh)if i==nil then i=0 end;if nv==nil then nv=0 end;local gx=gh;if fV(gh)then gx=gh.systemId end;if type(gx)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gi then system=gn(system)end;return system end end end;function gi:castIntersections(gE,cJ,gF,gG)local gF=gF or function(f7)return 1.05*f7.radius end;local gH={}if gG then for _,i in ipairs(gG)do gH[i]=self[i]end else gG={}for bQ,f7 in pairs(self)do table.insert(gG,bQ)gH[bQ]=f7 end end;local function gI(gJ,gK)local gL=gH[gJ].center-gE;local gM=gH[gK].center-gE;return gL:len()<gM:len()end;table.sort(gG,gI)local gN=cJ:normalize()for i,gp in ipairs(gG)do local f7=gH[gp]local gO=f7.center-gE;local gd=gF(f7)local gP=gO:dot(gN)local gQ=gP^2-(gO:len2()-gd^2)if gQ>=0 then local gR=math.sqrt(gQ)local f5=gP+gR;local f6=gP-gR;if f6>0 then return f7,f5,f6 elseif f5>0 then return f7,f5,nil end end end;return nil,nil,nil end;function gi:closestBody(gS)assert(type(gS)=='table','Invalid coordinates.')local gT,f7;local gU=vec3(gS)for _,gV in pairs(self)do local gW=(gV.center-gU):len2()if(not f7 or gW<gT)and gV.name~="Space"then f7=gV;gT=gW end end;return f7 end;function gi:convertToBodyIdAndWorldCoordinates(gh)local gX=gh;if fS(gh)then gX=gg(gh)end;if gX.bodyId==0 then return 0,vec3(gX.latitude,gX.longitude,gX.altitude)end;local gV=self:getBodyParameters(gX)if gV then return gX.bodyId,gV:convertToWorldCoordinates(gX)end end;function gi:getBodyParameters(gh)local gc=gh;if fV(gh)then gc=gh.bodyId end;assert(fP(gc),'Argument 1 (bodyId) must be a number:'..type(gc))return self[gc]end;function gi:getPlanetarySystemId()local _,bH=next(self)return bH and bH.planetarySystemId end;function g5:convertToMapPosition(bZ)assert(fQ(bZ),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(bZ))local b_=vec3(bZ)if self.bodyId==0 then return setmetatable({latitude=b_.x,longitude=b_.y,altitude=b_.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c0=b_-self.center;local a9=c0:len()local c1=a9-self.radius;local c2=0;local c3=0;if not bU(a9,0)then local c4=m(c0.y,c0.x)c3=c4>=0 and c4 or 2*math.pi+c4;c2=math.pi/2-math.acos(c0.z/a9)end;return setmetatable({latitude=c2,longitude=c3,altitude=c1,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function g5:convertToWorldCoordinates(gh)local gX=fS(gh)and gg(gh)or gh;if gX.bodyId==0 then return vec3(gX.latitude,gX.longitude,gX.altitude)end;assert(fV(gX),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gX.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gX.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local gY=math.cos(gX.latitude)return self.center+(self.radius+gX.altitude)*vec3(gY*math.cos(gX.longitude),gY*math.sin(gX.longitude),math.sin(gX.latitude))end;function g5:getAltitude(bZ)return(vec3(bZ)-self.center):len()-self.radius end;function g5:getDistance(bZ)return(vec3(bZ)-self.center):len()end;function g5:getGravity(bZ)local gZ=self.center-vec3(bZ)local g_=gZ:len2()return self.GM/g_*gZ/math.sqrt(g_)end;return setmetatable(aY,{__call=function(_,...)return gr(...)end})end;function script.onStart()local function h0()local function h1(h2)local h3=dbHud_1.hasKey;for bQ,bH in pairs(h2)do if h3(bH)then local c8=e(dbHud_1.getStringValue(bH))if c8~=nil then _G[bH]=c8;aA=true end end end end;if dbHud_1 then local h3=dbHud_1.hasKey;if not useTheseSettings then h1(a)else T="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a8=5 end;coroutine.yield()h1(b)if aA then T="Loaded Saved Variables (see Lua Chat Tab for list)"E=q(ResolutionX/2,0)F=q(ResolutionY/2,0)ay=ResolutionX;az=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b5=autoRollPreference;be=AtmoSpeedLimit;aq=[[rgb(]]..c(u+0.5)..","..c(w+0.5)..","..c(v+0.5)..[[)]]ar=[[rgb(]]..c(u*0.9+0.5)..","..c(w*0.9+0.5)..","..c(v*0.9+0.5)..[[)]]else T="No Saved Variables Found - Stand up / leave remote to save settings"end else T="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bu then LastMaxBrakeInAtmo=0 end;LastStartTime=bu;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then T="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a8=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=al end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function h4()local function h5(h6,h7)if h6>h7 then h7=h6 end;if ContainerOptimization>0 then h7=h7-h7*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then h7=h7-h7*FuelTankOptimization*0.05 end;return h7 end;local h8=core.getElementNameById;local h9=fuelX~=0 and fuelY~=0;for bQ in pairs(am)do local type=core.getElementTypeById(am[bQ])if n(type,'^.*Space Engine$')then bs=true;if n(tostring(core.getElementTagsById(am[bQ])),'^.*vertical.*$')then local ha=core.getElementRotationById(am[bQ])if ha[4]<0 then if o(-ha[4],0.1)==0.5 then bq=true end else if o(ha[4],0.1)==0.5 then br=true end end end end;if type=="Landing Gear"then J=true end;if type=="Dynamic Core Unit"then local hb=g(am[bQ])if hb>10000 then aR=128 elseif hb>1000 then aR=64 elseif hb>150 then aR=32 end end;aH=aH+g(am[bQ])if h9 and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hb=g(am[bQ])local hc=j(am[bQ])local h6=0;local dE=p()if type=="Atmospheric Fuel Tank"then local h7=400;local hd=35.03;if hb>10000 then h7=51200;hd=5480 elseif hb>1300 then h7=6400;hd=988.67 elseif hb>150 then h7=1600;hd=182.67 end;h6=hc-hd;if fuelTankHandlingAtmo>0 then h7=h7+h7*fuelTankHandlingAtmo*0.2 end;h7=h5(h6,h7)aE[#aE+1]={am[bQ],h8(am[bQ]),h7,hd,h6,dE}end;if type=="Rocket Fuel Tank"then local h7=320;local hd=173.42;if hb>65000 then h7=40000;hd=25740 elseif hb>6000 then h7=5120;hd=4720 elseif hb>700 then h7=640;hd=886.72 end;h6=hc-hd;if fuelTankHandlingRocket>0 then h7=h7+h7*fuelTankHandlingRocket*0.1 end;h7=h5(h6,h7)aG[#aG+1]={am[bQ],h8(am[bQ]),h7,hd,h6,dE}end;if type=="Space Fuel Tank"then local h7=2400;local hd=182.67;if hb>10000 then h7=76800;hd=5480 elseif hb>1300 then h7=9600;hd=988.67 end;h6=hc-hd;if fuelTankHandlingSpace>0 then h7=h7+h7*fuelTankHandlingSpace*0.2 end;h7=h5(h6,h7)aF[#aF+1]={am[bQ],h8(am[bQ]),h7,hd,h6,dE}end end end end;local function he()if gyro~=nil then ao=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(aj or not aj and al<10000)then for _,bH in pairs(door)do bH.toggle()end end;if switch then for _,bH in pairs(switch)do bH.toggle()end end;if forcefield and(aj or not aj==0 and al<10000)then for _,bH in pairs(forcefield)do bH.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if J then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hf=d3()if hf~=-1 or not aj and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not J then GearExtended=true end else BrakeIsOn=false end;if b6~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b6)if b6==0 and not J then GearExtended=true;BrakeIsOn=true end else b6=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if aj and hf~=-1 then b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aj end;local function hg(hh,hi,hj,hk,dg,e7,hl,hm,hn)local ho={enableName=hh,disableName=hi,width=hj,height=hk,x=dg,y=e7,toggleVar=hl,toggleFunction=hm,drawCondition=hn,hovered=false}table.insert(ax,ho)return ho end;local function hp()local function hq()if dbHud_1 then local position=bB;local dx=planet.name..". "..#SavedLocations;if radar_1 then local gp,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gp~=nil and gp~=""then dx=dx.." "..radar_1.getConstructName(gp)end end;local cv={}local hr=false;if planet.hasAtmosphere then hr=true end;cv={position=position,name=dx,atmosphere=hr,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cv;table.insert(aT[0],cv)bP()T="Location saved as "..dx else T="Databank must be installed to save locations"end end;local function hs()TurnBurn=not TurnBurn end;local function ht(hu)if hu==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;R=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hv()ht(1)end;local function hw()local cu=-1;cu=ca(aT[0])if cu>-1 then table.remove(aT[0],cu)end;cu=-1;cu=ca(SavedLocations)if cu~=-1 then T=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cu)end;cm()bP()end;local function hx()local dx=AutopilotTargetName;if dx==nil then local f3,c9=c5((bB-CustomTarget.position):len())dx=CustomTarget.name.." "..f3 ..c9 end;if dx==nil then dx="None"end;return"Engage Autopilot: "..dx end;local function hy()local dx=AutopilotTargetName;if dx==nil then dx=CustomTarget.name end;if dx==nil then dx="None"end;return"Disable Autopilot: "..dx end;local hz=50;local hA=260;local hB=hg("Enable Brake Toggle","Disable Brake Toggle",hA,hz,ay/2-hA/2,az/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then T="Brakes in Toggle Mode"else T="Brakes in Default Mode"end end)hg("Align Prograde","Disable Prograde",hA,hz,ay/2-hA/2-50-hB.width,az/2-hz+380,function()return ProgradeIsOn end,hv)hg("Align Retrograde","Disable Retrograde",hA,hz,ay/2-hA/2+hB.width+50,az/2-hz+380,function()return RetrogradeIsOn end,ht,function()return ak==0 end)local hC=hg(hx,hy,600,60,ay/2-600/2,az/2-60/2-400,function()return Autopilot end,co)hg("Save Position","Save Position",200,hC.height,hC.x+hC.width+30,hC.y,function()return false end,hq,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hg("Update Position","Update Position",200,hC.height,hC.x+hC.width+30,hC.y,function()return false end,cs,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hg("Clear Position","Clear Position",200,hC.height,hC.x-200-30,hC.y,function()return true end,hw,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hz=60;hA=300;local dg=10;local e7=az/2-300;hg("Enable Turn and Burn","Disable Turn and Burn",hA,hz,dg,e7,function()return TurnBurn end,hs)hg("Horizontal Takeoff Mode","Vertical Takeoff Mode",hA,hz,dg+hA+20,e7,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine end)e7=e7+hz+20;hg("Show Orbit Display","Hide Orbit Display",hA,hz,dg,e7,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then T="Orbit Display Enabled"else T="Orbit Display Disabled"end end)hg("Engage Orbiting","Cancel Orbiting",hA,hz,dg+hA+20,e7,function()return IntoOrbit end,ToggleIntoOrbit,function()return ak==0 and unit.getClosestPlanetInfluence()>0 end)e7=e7+hz+20;hg("Glide Re-Entry","Cancel Glide Re-Entry",hA,hz,dg,e7,function()return Reentry end,function()ad=true;hv()end,function()return planet.hasAtmosphere and not aj end)hg("Parachute Re-Entry","Cancel Parachute Re-Entry",hA,hz,dg+hA+20,e7,function()return Reentry end,cT,function()return planet.hasAtmosphere and not aj end)e7=e7+hz+20;hg("Engage Follow Mode","Disable Follow Mode",hA,hz,dg,e7,function()return R end,ci,function()return l()==1 end)hg("Enable Repair Arrows","Disable Repair Arrows",hA,hz,dg+hA+20,e7,function()return aI end,function()aI=not aI;if aI then T="Repair Arrows Enabled"else T="Repair Arrows Diabled"end end,function()return l()==1 end)e7=e7+hz+20;if not ExternalAGG then hg("Enable AGG","Disable AGG",hA,hz,dg,e7,function()return antigrav.getState()==1 end,cY,function()return antigrav~=nil end)end;e7=e7+hz+20;hg(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,hA*2,hz,dg,e7,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hD()local hE=nil;local hF=nil;local hG=nil;local hH=nil;aT=fL()for bQ,bH in pairs(aT[0])do if hE==nil or bH.center.x<hE then hE=bH.center.x end;if hF==nil or bH.center.x>hF then hF=bH.center.x end;if hG==nil or bH.center.y<hG then hG=bH.center.y end;if hH==nil or bH.center.y>hH then hH=bH.center.y end end;aU=""local hI=1.1*(hF-hE)/1920;local hJ=1.4*(hH-hG)/1080;for bQ,bH in pairs(aT[0])do local dg=960+bH.center.x/hI;local e7=540+bH.center.y/hJ;aU=aU..'<circle cx="'..dg..'" cy="'..e7 ..'" r="'..bH.radius/hI*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not n(bH.name,"Moon")and not n(bH.name,"Sanctuary")and not n(bH.name,"Space")then aU=aU.."<text x='"..dg.."' y='"..e7+bH.radius/hI*30+20 .."' font-size='28' fill="..aq.." text-anchor='middle' font-family='Montserrat'>"..bH.name.."</text>"end end;local fA=bB;local dg=960+fA.x/hI;local e7=540+fA.y/hJ;aU=aU..'<circle cx="'..dg..'" cy="'..e7 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='"..dg.."' y='"..e7-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aU=aU..[[</svg>]]aV=hI;aW=hJ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aU)local fA=bB;local dg=960+fA.x/hI;local e7=540+fA.y/hJ;aU='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aU=aU.."<text x='80' y='105' font-size='18' fill="..aq.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aX=screen_2.addContent((dg-80)/19.20,(e7-80)/10.80,aU)end end;local function hK()for bQ,bH in pairs(SavedLocations)do table.insert(aT[0],bH)end;bP()end;local function hL()local a_={}local hM=30000000/3600;local hN=hM*hM;local hO=100;local function hP(bH)return 1/math.sqrt(1-bH*bH/hN)end;function a_.computeAccelerationTime(hQ,hR,hS)local hT=hM*math.asin(hQ/hM)return(hM*math.asin(hS/hM)-hT)/hR end;function a_.computeDistanceAndTime(hQ,hS,hU,hV,hW,hX)hW=hW or 0;hX=hX or 0;local hY=hQ<=hS;local hZ=hV*(hY and 1 or-1)/hU;local h_=-hX/hU;local i0=hZ+h_;if hY and i0<=0 or not hY and i0>=0 then return-1,-1 end;local i1,i2=0,0;if hZ~=0 and hW>0 then local hT=math.asin(hQ/hM)local i3=math.pi*(hZ/2+h_)local i4=hZ*hW;local i5=hM*math.pi;local bH=function(fR)local i6=(i3*fR-i4*math.sin(math.pi*fR/2/hW)+i5*hT)/i5;local i7=math.tan(i6)return hM*i7/math.sqrt(i7*i7+1)end;local i8=hY and function(fT)return fT>=hS end or function(fT)return fT<=hS end;i2=2*hW;if i8(bH(i2))then local i9=0;while math.abs(i2-i9)>0.5 do local fR=(i2+i9)/2;if i8(bH(fR))then i2=fR else i9=fR end end end;local ia=hQ;local ib=i2/hO;for ic=1,hO do local bN=bH(ic*ib)i1=i1+(bN+ia)*ib/2;ia=bN end;if i2<2*hW then return i1,i2 end;hQ=ia end;local hT=hM*math.asin(hQ/hM)local bu=(hM*math.asin(hS/hM)-hT)/i0;local id=hN*math.cos(hT/hM)/i0;local a9=id-hN*math.cos((i0*bu+hT)/hM)/i0;return a9+i1,bu+i2 end;function a_.computeTravelTime(hQ,hR,a9)if a9==0 then return 0 end;if hR>0 then local hT=hM*math.asin(hQ/hM)local id=hN*math.cos(hT/hM)/hR;return(hM*math.acos(hR*(id-a9)/hN)-hT)/hR end;if hQ==0 then return-1 end;assert(hQ>0,'Acceleration and initial speed are both zero.')return a9/hQ end;function a_.lorentz(bH)return hP(bH)end;return a_ end;local function ie()local vec3=require('cpml.vec3')local fM=fM()local function fS(fT)return type(fT)=='string'end;local function fQ(fR)return type(fR)=='table'end;local function bU(bV,bW)if bV==0 then return math.abs(bW)<1e-09 end;if bW==0 then return math.abs(bV)<1e-09 end;return math.abs(bV-bW)<math.max(math.abs(bV),math.abs(bW))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c1)assert(self.body)local a9=c1+self.body.radius;if not bU(a9,0)then local orbit=math.sqrt(self.body.GM/a9)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gh,bM)assert(self.body)assert(fQ(gh)or fS(gh))assert(fQ(bM))local fA=(fS(gh)or fM.isMapPosition(gh))and self.body:convertToWorldCoordinates(gh)or vec3(gh)local bH=vec3(bM)local ig=fA-self.body.center;local gM=bH:len2()local ih=ig:len()local ii=self.body.GM;local ij=((gM-ii/ih)*ig-ig:dot(bH)*bH)/ii;local bV=ii/(2*ii/ih-gM)local ik=ij:len()local gN=ij:normalize()local il=bV*(1-ik)local im=bV*(1+ik)local io=il*gN+self.body.center;local ip=ik<=1 and-im*gN+self.body.center or nil;local iq=math.sqrt(bV*ii*(1-ik*ik))local ir=ip and 2*math.pi*math.sqrt(bV^3/ii)local is=math.acos(ij:dot(ig)/(ik*ih))if ig:dot(bH)<0 then is=-(is-2*math.pi)end;local it=math.acos((math.cos(is)+ik)/(1+ik*math.cos(is)))local iu=it;if iu<0 then iu=iu+2*math.pi end;local iv=iu-ik*math.sin(iu)local iw=0;local ix=0;local iy=0;if ir~=nil then iw=iv/(2*math.pi/ir)ix=ir-iw;iy=ix+ir/2;if is-math.pi>0 then ix=iw;iy=ix+ir/2 end;if iy>ir then iy=iy-ir end end;return{periapsis={position=io,speed=iq/il,circularOrbitSpeed=math.sqrt(ii/il),altitude=il-self.body.radius},apoapsis=ip and{position=ip,speed=iq/im,circularOrbitSpeed=math.sqrt(ii/im),altitude=im-self.body.radius},currentVelocity=bH,currentPosition=fA,eccentricity=ik,period=ir,eccentricAnomaly=it,meanAnomaly=iv,timeToPeriapsis=ix,timeToApoapsis=iy}end;local function iz(iA)local gV=fM.BodyParameters(iA.planetarySystemId,iA.bodyId,iA.radius,iA.center,iA.GM)return setmetatable({body=gV},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iz(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})h0()coroutine.yield()h4()coroutine.yield()he()hp()coroutine.yield()hD()aY=fM()aZ=aY(fL())a_=hL()b1=ie()b2=d8()hK()bP()cj()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ak>0 or ak==0 and al<10000)then for _,bH in pairs(door)do bH.toggle()end end;if switch then for _,bH in pairs(switch)do bH.toggle()end end;if forcefield and(ak>0 or ak==0 and al<10000)then for _,bH in pairs(forcefield)do bH.toggle()end end;d6()if button then button.activate()end end;function script.onTick(iB)local function iC()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aj then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iD()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iE(iF)local gd=500000;local iG,iH,iI=math.huge;local iJ=false;local iK=vec3({13771471,7435803,-128971})local iL=18000000;iG=vec3(iF):dist(iK)if iG<iL then return true,math.abs(iG-iL),"Safe Zone",0 end;iH=vec3(iF):dist(vec3(planet.center))if iH<gd then iJ=true end;if math.abs(iH-gd)<math.abs(iG-iL)then return iJ,math.abs(iH-gd),planet.name,planet.bodyId else return iJ,math.abs(iG-iL),"Safe Zone",0 end end;local function iM(df)local iN=0;av=""local iO=aH;local iP=0;local iQ=0;local iR=0;local dG=0;local dH=""local iS=core.getElementHitPointsById;for bQ in pairs(am)do local hb=0;local iT=0;iT=g(am[bQ])hb=iS(am[bQ])iP=iP+hb;if hb<iT then if hb==0 then iR=iR+1 else iQ=iQ+1 end;if aI and#as==0 then position=vec3(core.getElementPositionById(am[bQ]))local dg=position.x-aR;local e7=position.y-aR;local iU=position.z-aR;table.insert(as,core.spawnArrowSticker(dg,e7,iU+1,"down"))table.insert(as,core.spawnArrowSticker(dg,e7,iU+1,"down"))core.rotateSticker(as[2],0,0,90)table.insert(as,core.spawnArrowSticker(dg+1,e7,iU,"north"))table.insert(as,core.spawnArrowSticker(dg+1,e7,iU,"north"))core.rotateSticker(as[4],90,90,0)table.insert(as,core.spawnArrowSticker(dg-1,e7,iU,"south"))table.insert(as,core.spawnArrowSticker(dg-1,e7,iU,"south"))core.rotateSticker(as[6],90,-90,0)table.insert(as,core.spawnArrowSticker(dg,e7-1,iU,"east"))table.insert(as,core.spawnArrowSticker(dg,e7-1,iU,"east"))core.rotateSticker(as[8],90,0,90)table.insert(as,core.spawnArrowSticker(dg,e7+1,iU,"west"))table.insert(as,core.spawnArrowSticker(dg,e7+1,iU,"west"))core.rotateSticker(as[10],-90,0,90)table.insert(as,am[bQ])end elseif aI and#as>0 and as[11]==am[bQ]then for dz in pairs(as)do core.deleteSticker(as[dz])end;as={}end end;iN=c(iP/iO*100)if iN<100 then df[#df+1]=[[<g class="pbright txt">]]dG=c(iN*2.55)dH=d("rgb(%d,%d,%d)",255-dG,dG,0)if iN<100 then df[#df+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dH,iN)if iR>0 then df[#df+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dH,iR,iQ)elseif iQ>0 then df[#df+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dH,iQ)end end;df[#df+1]=[[<\g>]]end end;local function iV(df)local iW=c(utils.clamp(a9/(ay/4)*255,0,255))df[#df+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a6,a7,c(u+0.5)+iW,c(w+0.5)-iW,c(v+0.5)-iW)end;local function iX()local iY=LastMaxBrakeInAtmo/a1:getGravity(a1.center+vec3(0,0,1)*a1.radius):len()return iY end;local function iZ()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a1.center-bB):len()else AutopilotDistance=(CustomTarget.position-bB):len()end end;local bN=bz;local i_=unit.getThrottle()/100;if AtmoSpeedAssist then i_=z end;local j0,j1=a_.computeDistanceAndTime(bz,MaxGameVelocity,k(),Nav:maxForceForward()*i_,warmup,0)local X,Y;if not TurnBurn then X,Y=cW(MaxGameVelocity)else X,Y=cX(MaxGameVelocity)end;local _,j2;if not TurnBurn and bN>0 then _,j2=cW(bN)else _,j2=cX(bN)end;local j3=0;local j4=0;if AutopilotCruising or not Autopilot and bN>5 then j4=a_.computeTravelTime(bN,0,AutopilotDistance)elseif X+j0<AutopilotDistance then j3=AutopilotDistance-(X+j0)j4=a_.computeTravelTime(8333.0556,0,j3)else local j5=(AutopilotDistance-X)/j0;j0=AutopilotDistance-X;j1=j1*j5 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return j4 elseif AutopilotBraking then return j2 elseif AutopilotCruising then return j4+j2 else return j1+Y+j4 end end;local function j6()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function j7()if radar_1 then local j8=radar_1.getEntries()local j9=radar_1.getData()local ja=bG(1770)local jb=bI(330)if#j8>0 then local jc=j9:find('identifiedConstructs":%[%]')if jc==nil and perisPanelID==nil then ac=1;cc()end;if jc~=nil and perisPanelID~=nil then cc()end;if radarPanelID==nil then cc()end;aa=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],ja,jb,#j8)local jd={}for bQ,bH in pairs(j8)do if radar_1.hasMatchingTransponder(bH)==1 then table.insert(jd,bH)end end;if#jd>0 then local e7=bI(15)local dg=bG(1370)aa=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],aa,dg,e7)for bQ,bH in pairs(jd)do e7=e7+20;aa=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],aa,dg,e7,radar_1.getConstructName(bH))end end else local je;je=j9:find('worksInEnvironment":false')if je then aa=d([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],ja,jb)else aa=d([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],ja,jb)end;if radarPanelID~=nil then ac=0;cc()end end end end;local function jf()local dE=p()local eS=bz;local jg=dE-an;if eS>1.38889 then eS=eS/1000;local jh=eS*(dE-an)TotalDistanceTravelled=TotalDistanceTravelled+jh;a2=a2+jh end;a3=a3+jg;TotalFlightTime=TotalFlightTime+jg;an=dE end;local function ji()for _,bH in pairs(ax)do if bH.hovered then if not bH.drawCondition or bH.drawCondition()then bH.toggleFunction()end;bH.hovered=false end end end;local function jj()local function jk(jl,jm,dg,e7,hj,hk)if jl>dg and jl<dg+hj and jm>e7 and jm<e7+hk then return true else return false end end;local dg=a6+ay/2;local e7=a7+az/2;for _,bH in pairs(ax)do bH.hovered=jk(dg,e7,bH.x,bH.y,bH.width,bH.height)end end;local function jn(df)local function jo(df,jp,hover,dg,e7,i6,jq,jr,js,jt,ju)if type(jt)=="function"then jt=jt()end;if type(ju)=="function"then ju=ju()end;df[#df+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",dg,e7,i6,jq)if jp then df[#df+1]=d("%s'",jr)else df[#df+1]=js end;if hover then df[#df+1]=" style='stroke:white; stroke-width:2'"else df[#df+1]=" style='stroke:black; stroke-width:1'"end;df[#df+1]="></rect>"df[#df+1]=d("<text x='%f' y='%f' font-size='24' fill='",dg+i6/2,e7+jq/2+5)if jp then df[#df+1]="black"else df[#df+1]="white"end;df[#df+1]="' text-anchor='middle' font-family='Montserrat'>"if jp then df[#df+1]=d("%s</text>",jt)else df[#df+1]=d("%s</text>",ju)end end;local jv="rgb(50,50,50)'"local jw="rgb(210,200,200)"local jx=jo;for _,bH in pairs(ax)do local hi=bH.disableName;local hh=bH.enableName;if type(hi)=="function"then hi=hi()end;if type(hh)=="function"then hh=hh()end;if not bH.drawCondition or bH.drawCondition()then jx(df,bH.toggleVar(),bH.hovered,bH.x,bH.y,bH.width,bH.height,jw,jv,hi,hh)end end end;if iB=="tenthSecond"then if ak>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iC()end;if AutopilotTargetName~=nil then local jy=CustomTarget~=nil;planetMaxMass=iX()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=iZ()if jy and not Autopilot then a9=(bB-CustomTarget.position):len()else a9=(AutopilotTargetCoords-bB):len()end;if not TurnBurn then X,Y=cW(bz)Z,a0=cW(MaxGameVelocity)else X,Y=cX(bz)Z,a0=cX(MaxGameVelocity)end;local f3,c9=c5(a9)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..f3 ..'", "unit":"'..c9 ..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cZ(travelTime)..'", "unit":""}')f3,c9=c5(X)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f3 ..'", "unit":"'..c9 ..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cZ(Y)..'", "unit":""}')f3,c9=c5(Z)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f3 ..'", "unit":"'..c9 ..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cZ(a0)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f3,c9=c5(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",f3)..'", "unit":"'..c9 ..'"}')if ak>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iD()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iB=="oneSecond"then ah=false;bJ(nil,true)jf()j7()j6()local df={}df=b2.DrawOdometer(df,a2,TotalDistanceTravelled,a3)if ShouldCheckDamage then iM(df)end;ab=table.concat(df,"")collectgarbage("collect")elseif iB=="fiveSecond"then ai=dbHud_1.getStringValue("SPBAutopilotTargetName")if ai~=nil and ai~=""and ai~="SatNavNotChanged"then local c8=e(dbHud_1.getStringValue("SavedLocations"))if c8~=nil then _G["SavedLocations"]=c8;local cu=-1;local cv;for bQ,bH in pairs(SavedLocations)do if bH.name and bH.name=="SatNav Location"then cu=bQ;break end end;if cu~=-1 then cv=SavedLocations[cu]cu=-1;for bQ,bH in pairs(aT[0])do if bH.name and bH.name=="SatNav Location"then cu=bQ;break end end;if cu>-1 then aT[0][cu]=cv end;bP()T=cv.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ai then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cj()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iB=="msgTick"then local df={}b2.DisplayMessage(df,"empty")T="empty"unit.stopTimer("msgTick")a8=3 elseif iB=="animateTick"then b4=true;b3=false;a6=0;a7=0;unit.stopTimer("animateTick")elseif iB=="hudTick"then local df={}b2.HUDPrologue(df)if showHud then b2.UpdateHud(df)else b2.DisplayOrbitScreen(df)b2.DrawWarnings(df)end;b2.HUDEpilogue(df)df[#df+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ay,az)if T~="empty"then b2.DisplayMessage(df,T)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b2.DrawDeadZone(df)end end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then jj()jn(df)if screen_1.getMouseState()==1 then ji()end;df[#df+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)elseif system.isViewLocked()==0 then if l()==1 and S then jj()jn(df)if not b3 and not b4 then local jz=table.concat(df,"")df={}df[#df+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)df[#df+1]=aU;df[#df+1]=jz;df[#df+1]="</body>"b3=true;df[#df+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(df,"")system.setScreen(content)elseif b4 then local jz=table.concat(df,"")df={}df[#df+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ay,az)df[#df+1]=aU;df[#df+1]=jz;df[#df+1]="</body>"end;if not b3 then df[#df+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end else ji()end else if not S and l()==0 then ji()if a9>DeadZone then if DisplayDeadZone then iV(df)end end else jj()jn(df)end;df[#df+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a6,a7)end;df[#df+1]=[[</svg></body>]]content=table.concat(df,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iB=="apTick"then aj=h()>0;ak=h()al=core.getAltitude()bu=p()local jA=bu-ba;ba=bu;local ft=getRoll(bA,bw,bx)local fu=ft/180*math.pi;local fv=math.cos(fu)local fw=math.sin(fu)local jB=cx(bA,bw,bx*fv+bv*fw)local jC=-math.deg(cC(bv,by,bw))local jD=math.deg(cC(bx,by,bw))local jE=1;local jF=1;b9=aj and jC<-YawStallAngle or jC>YawStallAngle or jD<-PitchStallAngle or jD>PitchStallAngle;b7=system.getMouseDeltaX()b8=system.getMouseDeltaY()if InvertMouse and not S then b8=-b8 end;M=0;Q=0;L=0;sys=aZ[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b1(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),by)if al==0 then al=(bB-planet.center):len()-planet.radius end;ag=cd()local bK=planet:getGravity(core.getConstructWorldPos()):len()*k()bb=0;b0=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not aj then x,y,_,_=iE(bB)else x=true end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then a6=screen_1.getMouseX()*ay;a7=screen_1.getMouseY()*az elseif system.isViewLocked()==0 then if l()==1 and S then if not b3 then a6=a6+b7;a7=a7+b8 end else a6=0;a7=0 end else a6=a6+b7;a7=a7+b8;a9=math.sqrt(a6*a6+a7*a7)if not S and l()==0 then if userControlScheme=="virtual joystick"then if a6>0 and a6>DeadZone then M=M-(a6-DeadZone)*MouseXSensitivity elseif a6<0 and a6<DeadZone*-1 then M=M-(a6+DeadZone)*MouseXSensitivity else M=0 end;if a7>0 and a7>DeadZone then L=L-(a7-DeadZone)*MouseYSensitivity elseif a7<0 and a7<DeadZone*-1 then L=L-(a7+DeadZone)*MouseYSensitivity else L=0 end elseif userControlScheme=="mouse"then a6=0;a7=0;L=(-utils.smoothstep(b8,-100,100)+0.5)*2*jE;M=(-utils.smoothstep(b7,-100,100)+0.5)*2*jF else a6=0;a7=0 end end end;local jG=bz>8334;if bz>SpaceSpeedLimit/3.6 and not aj and not Autopilot and not jG then T="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not jG and LastIsWarping then if not BrakeIsOn then cG()end;if Autopilot then co()end end;LastIsWarping=jG;if aj and ak>0.09 then if bz>be/3.6 and not AtmoSpeedAssist and not ap then BrakeIsOn=true;ap=true elseif not AtmoSpeedAssist and ap then if bz<be/3.6 then BrakeIsOn=false;ap=false end end end;if BrakeIsOn then P=1 else P=0 end;if ProgradeIsOn then if ad then BrakeIsOn=false;local jH=false;if CustomTarget~=nil then jH=cK(CustomTarget.position-bB,0.01)else jH=cK(vec3(by),0.01)end;b5=true;if jH and(math.abs(ft)<2 or math.abs(jB)>85)and bz>=be/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cT()elseif aj and AtmoSpeedAssist then bC(1)else bF(c(be))z=0 end elseif bz>H then cK(vec3(by),0.01)end end;if RetrogradeIsOn then if aj then RetrogradeIsOn=false elseif bz>H then cK(-vec3(by))end end;if not ProgradeIsOn and ad then if ak==0 then I=true;cT()ad=false;af=true else ad=false;co()end end;local cn=bA*-1;local dK=by.x*cn.x+by.y*cn.y+by.z*cn.z;if af and CustomTarget~=nil and(al<HoldAltitude+200 and al>HoldAltitude-200)and bz*3.6>be-100 and math.abs(dK)<20 and ak>=0.1 and(CustomTarget.position-bB):len()>2000+al then co()af=false end;if VertTakeOff then b5=true;if dK<-30 then T="Unable to achieve lift. Safety Landing."a5=0;b5=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if al<antigrav.getBaseAltitude()-100 then bf=0;a5=15;BrakeIsOn=false elseif dK>0 then BrakeIsOn=true;a5=0 elseif dK<-30 then BrakeIsOn=true;a5=15 elseif al>=antigrav.getBaseAltitude()then BrakeIsOn=true;a5=0;VertTakeOff=false;T="Takeoff complete. Singularity engaged"end else if ak>0.08 then bf=0;BrakeIsOn=false;a5=20 elseif ak<0.08 and ak>0 then BrakeIsOn=false;if br then bf=0;a5=20 else a5=0;bf=36;bF(3500)end else b5=autoRollPreference;IntoOrbit=true;bp=false;CancelIntoOrbit=false;bj=false;bh=nil;bi=nil;if bo==nil then bo=planet end;VertTakeOff=false end end;if bf~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jI=utils.clamp(bf-jB,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jI)local jJ=utils.clamp(vTpitchPID:get(),-1,1)L=jJ end end;if IntoOrbit then if bo==nil then if VectorToTarget then bo=a1 else bo=planet end end;if not bm then if bo.hasAtmosphere then bn=c(bo.radius*(TargetOrbitRadius-1)+bo.noAtmosphericDensityAltitude)else bn=c(bo.radius*(TargetOrbitRadius-1)+bo.surfaceMaxAltitude)end;bm=true end;if AltitudeHold or VectorToTarget then if not ae then bn=q(HoldAltitude,1)bj=true;AltitudeHold=false end;if VectorToTarget then bl.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jK,jL=c5(bn,2)local jM=jK..jL;local jN,jO=b1(bo):escapeAndOrbitalSpeed((bB-bo.center):len()-bo.radius)local jP=ft;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and al>bn*0.9 and al<bn*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bn*0.99 and orbit.apoapsis.altitude>=bn*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bp then if bp then BrakeIsOn=false;z=0;bC(0)bp=true;bh=0;if bl.VectorToTarget then local cQ=CustomTarget.position-bB;local X,_=a_.computeDistanceAndTime(bz,be/3.6,k(),0,0,LastMaxBrake)if by:normalize():dot(cQ:normalize())>0.5 and cQ:len()>15000+X+al then bg="Orbiting to Target"else T="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;I=true;af=true;cT()bl.VectorToTarget=false end end;if not bl.VectorToTarget then bg=nil;bk=false;bm=false;bo=nil;b5=autoRollPreference;if not af then T="Orbit established"end;bl.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bj=false;bh=nil;bi=nil;bo=nil;bp=false;bt=0 end else bt=bt+1;if bt>=2 then bp=true end end else bg="Adjusting Orbit - OrbitHeight: "..jM;bk=true;bF(jO*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jQ=dK;local jR=al-bn;local jS=math.abs(jR)if dK<10 and math.abs(jB)<10 and jS<100 then jQ=dK*2 end;if jQ<10 and math.abs(jB)<10 and jS<100 then jQ=jQ*2 end;if jQ<5 and math.abs(jB)<5 and jS<100 then jQ=jQ*4 end;VSpdPID:inject(jQ)bh=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jR)bh=utils.clamp(bh-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jT=2.75;local jU=math.abs(o(jN*jT))local jV=jU%50;if jV>0 then jU=jU-jV+50 end;BrakeIsOn=false;if not bj then local jW=false;local jX=false;if al<bn then bg="Aligning to orbital path - OrbitHeight: "..jM else bg="Aligning to orbital point - OrbitHeight: "..jM end;bh=0;bi=0;if jB<=bh+1 and jB>=bh-1 then jW=true else jW=false end;if jP<=bi+1 and jP>=bi-1 then jX=true else jX=false end;if jW and jX then bh=nil;bi=nil;bj=true end else if al<bn*0.8 then bg="Escaping planet gravity - OrbitHeight: "..jM;bh=utils.map(dK,200,0,-15,80)elseif al>=bn*0.8 and al<bn*1.15 then bg="Approaching orbital corridor - OrbitHeight: "..jM;jU=jU*0.75;bh=utils.map(dK,100,-100,-15,65)elseif al>=bn*1.15 and al<bn*1.5 then bg="Approaching orbital corridor - OrbitHeight: "..jM;jU=jU*0.75;if dK<0 or bk then bh=utils.map(al,bn*1.5,bn*1.01,-30,0)else bh=utils.map(al,bn*0.99,bn*1.5,0,30)end elseif al>bn*1.5 then bg="Reentering orbital corridor - OrbitHeight: "..jM;bh=utils.map(dK,100,-100,-65,0)jU=jU*0.75 end end;bF(c(jU))end;if bh~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jY=bh-jB;OrbitPitchPID:inject(jY)local jZ=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)L=jZ end;if bi~=nil then if jB<85 then local j_=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(j_*0.01,0,j_*0.1)end;local k0=bi-jP;OrbitRollPID:inject(k0)local k1=utils.clamp(OrbitRollPID:get(),-0.5,0.5)Q=k1 end end elseif CancelIntoOrbit then bm=false;bo=nil;bC(0)CancelIntoOrbit=false end;if Autopilot and ak==0 and not ad then local k2,k3=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local k4=(CustomTarget.position-a1.center):normalize()local k5=k4:project_on_plane((a1.center-bB):normalize()):normalize()local k6=a1.center+k5*(a1.radius+AutopilotTargetOrbit)local k7=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))if(bB-k6):len()<(bB-k7):len()then k2=k6;AutopilotTargetCoords=k2 else k2=CustomTarget.position+(CustomTarget.position-a1.center):normalize()*(AutopilotTargetOrbit-a1:getAltitude(CustomTarget.position))AutopilotTargetCoords=k2 end;local cq=bX(a1,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)k3=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;k3=true;TargetSet=true;AutopilotRealigned=true;k2=CustomTarget.position+(bB-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local k4=(bB+by*100000-a1.center):normalize()local k5=k4:project_on_plane((a1.center-bB):normalize()):normalize()if k5:len()<1 then k4=(bB+bw*100000-a1.center):normalize()k5=k4:project_on_plane((a1.center-bB):normalize()):normalize()end;k2=a1.center+k5*(a1.radius+AutopilotTargetOrbit)AutopilotTargetCoords=k2;TargetSet=true;k3=true;AutopilotRealigned=true;local cq=bX(a1,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)end end;AutopilotDistance=(vec3(k2)-bB):len()local f4,f5,f6=aZ:getPlanetarySystem(0):castIntersections(bB,by:normalize(),function(f7)if f7.noAtmosphericDensityAltitude>0 then return f7.radius+f7.noAtmosphericDensityAltitude else return f7.radius+f7.surfaceMaxAltitude*1.5 end end)local f8=f5;if f6~=nil and f5~=nil then f8=math.min(f6,f5)end;if f8~=nil and f8<AutopilotDistance and f4.name==a1.name then AutopilotDistance=f8 end;local jH=true;local k8=(a1.center-(bB+vec3(by):normalize()*AutopilotDistance)):len()-a1.radius;local f3,c9=c5(k8)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f3 ..'", "unit":"'..c9 ..'"}')local X,Y;if not TurnBurn then X,Y=cW(bz)else X,Y=cX(bz)end;if bz>300 and AutopilotAccelerating then local cQ=vec3(k2)-bB;local k9=utils.clamp(math.deg(cC(bv,by:normalize(),cQ:normalize()))*bz/500,-90,90)local ka=utils.clamp(math.deg(cC(bx,by:normalize(),cQ:normalize()))*bz/500,-90,90)if math.abs(k9)<20 and math.abs(ka)<20 then k9=k9*2;ka=ka*2 end;if math.abs(k9)<2 and math.abs(ka)<2 then k9=k9*2;ka=ka*2 end;local jC=-math.deg(cC(bv,bw,by:normalize()))local jD=-math.deg(cC(bx,bw,by:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ka-jD)local kb=utils.clamp(apPitchPID:get(),-1,1)L=L+kb;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(k9-jC)local kc=utils.clamp(apYawPID:get(),-1,1)M=M+kc;k3=true;if math.abs(k9)>2 or math.abs(ka)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if k8<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b1(a1):escapeAndOrbitalSpeed(k8)end end;if not AutopilotCruising and not AutopilotBraking and not k3 then jH=cK((k2-bB):normalize())elseif TurnBurn then jH=cK(-vec3(by):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;bC(AutopilotInterplanetaryThrottle)z=q(AutopilotInterplanetaryThrottle,2)G=true end;local i_=unit.getThrottle()if AtmoSpeedAssist then i_=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or i_==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bC(0)z=0 end;if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bC(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;P=1 end;if TurnBurn then bC(100,true)z=1 end;local _,jO=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)local cQ;if CustomTarget~=nil then cQ=CustomTarget.position-bB end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bz<50 then T="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bz<=jO and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cq=bX(a1,AutopilotTargetCoords)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jO=b1(a1):escapeAndOrbitalSpeed((bB-planet.center):len()-planet.radius)if bz<=jO then if CustomTarget~=nil then if by:normalize():dot(cQ:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cq=bX(a1,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)WaypointSet=true end else T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;BrakeIsOn=false;local cq=bX(a1,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T="Autopilot completed, orbit established"P=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ad=true end end end end elseif AutopilotCruising then if AutopilotDistance<=X then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local i_=unit.getThrottle()if AtmoSpeedAssist then i_=z end;if i_>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jH then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ad then AutopilotTargetCoords=vec3(a1.center)+(AutopilotTargetOrbit+a1.radius)*bx;AutopilotShipUp=bv;AutopilotShipRight=bx end;AutopilotRealigned=true elseif jH then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then bC(AutopilotInterplanetaryThrottle,true)z=q(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ak>0)then T="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"P=0;bC(0)z=0;G=false;ProgradeIsOn=true;ad=true;local cq=bX(a1,CustomTarget.position)cq="::pos{"..cq.systemId..","..cq.bodyId..","..cq.latitude..","..cq.longitude..","..cq.altitude.."}"system.setWaypoint(cq)end;if R then b5=true;local ka=0;local fA=bB+vec3(unit.getMasterPlayerRelativePosition())local kd=fA-bB;local ke=vec3(kd):project_on(bw):len()local kf=vec3(kd):project_on(bx):len()local a9=math.sqrt(ke*ke+kf*kf)cK(kd:normalize())local kg=40;local kh=a9<kg;local ki=100;local kj=utils.clamp((a9-kg)/2,10,ki)L=0;local jH=math.abs(M)<0.1;if jH and bz<kj and not kh then BrakeIsOn=false;ka=-20 else BrakeIsOn=true;ka=0 end;local kk=0;if math.abs(ka-jB)>kk then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ka-jB)local kb=pitchPID:get()L=kb end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cr=unit.getClosestPlanetInfluence()>0;local kl=HoldAltitude-al;local km=500+bz;local kn=1;if AutoTakeoff then kn=utils.clamp(bz/100,0.1,1)end;local ka=(utils.smoothstep(kl,-km,km)-0.5)*2*MaxPitch*kn;if not Reentry and not ad and not VectorToTarget and bw:dot(by:normalize())<0.99 then ka=(utils.smoothstep(kl,-km*utils.clamp(20-19*ak*10,1,20),km*utils.clamp(20-19*ak*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ak*10,1,2)*kn end;if not AltitudeHold then ka=0 end;if LockPitch~=nil then if cr and not IntoOrbit then ka=LockPitch else LockPitch=nil end end;b5=true;local ko=L;if Reentry then local kp=c(be)local kq,kr=a_.computeDistanceAndTime(bz,kp/3.6,k(),0,0,LastMaxBrake-planet.gravity*9.8*k())local ks=al-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and al>planet.noAtmosphericDensityAltitude+5000 and bz<=kp/3.6 and bz>kp/3.6-10 and math.abs(by:normalize():dot(bw))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(kq>-1 and ks<=kq or al<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bF(kp,true)if not I then ka=-80;if ak>0.02 then T="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ka=0;b5=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and al>planet.noAtmosphericDensityAltitude+5000 then b5=true elseif al<=planet.noAtmosphericDensityAltitude+5000 then bF(kp)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==be then I=false;Reentry=false;b5=true end end end;if bz>H and not ae and not VectorToTarget and not BrakeLanding and ForceAlignment then cK(vec3(by))end;if(VectorToTarget or ae)and AutopilotTargetIndex>0 and ak>0.01 then local cQ;if CustomTarget~=nil then cQ=CustomTarget.position-bB else cQ=a1.center-bB end;local k9=math.deg(cC(bA:normalize(),by,cQ))*2;local kt=math.rad(math.abs(ft))if bz>minRollVelocity and ak>0.01 then local ku=utils.clamp(90-ka*2,-90,90)bb=utils.clamp(k9*2,-ku,ku)local kv=k9;k9=utils.clamp(utils.clamp(k9,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kt)+4*(jB-ka)*math.sin(math.rad(ft)),-YawStallAngle*0.85,YawStallAngle*0.85)ka=utils.clamp(utils.clamp(ka*math.cos(kt),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(kv)*math.sin(kt),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bb=0;k9=utils.clamp(k9,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kw=jC-k9;if not b9 and bz>minRollVelocity and ak>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kw)local kc=utils.clamp(yawPID:get(),-1,1)M=M+kc elseif aj and ag>-1 or bz<minRollVelocity then cK(cQ)elseif b9 and ak>0.01 then if(jC<-YawStallAngle or jC>YawStallAngle)and ak>0.01 then cK(by)end;if(jD<-PitchStallAngle or jD>PitchStallAngle)and ak>0.01 then ka=utils.clamp(jB-jD,jB-PitchStallAngle*0.85,jB+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ae then local kx=planet:getAltitude(CustomTarget.position)local ks=math.sqrt(cQ:len()^2-(al-kx)^2)local ky=LastMaxBrakeInAtmo;if ky then ky=ky*utils.clamp(bz/100,0.1,1)*ak else ky=LastMaxBrake end;if ak<0.01 then ky=LastMaxBrake end;local kz=by:len()-math.abs(dK)local kA=vec3(core.getWorldAirFrictionAcceleration())local kB=math.sqrt(kA:len()-kA:project_on(cn):len())*k()if bz>100 then X,Y=a_.computeDistanceAndTime(bz,100,k(),0,0,ky+kB)local kC,kD=a_.computeDistanceAndTime(100,0,k(),0,0,ky/2)X=X+kC else X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,ky/2)end;StrongBrakes=true;if not ae and not Reentry and ks<=X+bz*jA/2 and(by:project_on_plane(bA):normalize():dot(cQ:project_on_plane(bA):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bC(0)z=0;if AltitudeHold then ch()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kz<0.1 or ks<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<ks)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=ks end elseif VectorToTarget and ak==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ae or Reentry)then if CustomTarget~=nil and a1.name==planet.name then local cQ=CustomTarget.position-bB;local kx=planet:getAltitude(CustomTarget.position)local ks=math.sqrt(cQ:len()^2-(al-kx)^2)local ky=LastMaxBrakeInAtmo;if not bp then bm=false;IntoOrbit=true else ky=LastMaxBrake;X,Y=a_.computeDistanceAndTime(bz,0,k(),0,0,ky/2)StrongBrakes=true;if ks<=X+bz*jA/2 and by:project_on_plane(bA):normalize():dot(cQ:project_on_plane(bA):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;I=true;ad=false;af=true;Autopilot=false;cT()end end;LastDistanceToTarget=ks end end end;if ak==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ae or VectorToTarget or IntoOrbit or Reentry)then if not bp then IntoOrbit=true end end;if b9 and ak>0.01 and ag==-1 and bz>minRollVelocity and VectorStatus~="Finalizing Approach"then cK(by)ka=utils.clamp(jB-jD,jB-PitchStallAngle*0.85,jB+PitchStallAngle*0.85)end;L=ko;local d4=-1;if BrakeLanding then ka=0;local kE=false;local kF=30;if b0~=nil and b0>0 then local kB=0;local fB=utils.clamp(ak,0.4,2)local ky=LastMaxBrakeInAtmo*utils.clamp(bz/100,0.1,1)*fB;local kG=b0*fB+ky+kB-bK;local kH=ky/2+kB-bK;local kI=bz-math.sqrt(math.abs(kH/2)*20/(0.5*k()))*utils.sign(kH)if kI<0 then kI=0 end;local kJ;if bz>100 then local kK,_=a_.computeDistanceAndTime(bz,100,k(),0,0,ky)local kL,_=a_.computeDistanceAndTime(100,0,k(),0,0,math.sqrt(ky))kJ=kK+kL else kJ=a_.computeDistanceAndTime(bz,0,k(),0,0,math.sqrt(ky))end;if kJ<20 then BrakeIsOn=false else local kM=0;if kI>100 then local kN,_=a_.computeDistanceAndTime(kI,100,k(),0,0,kG)local kO,_=a_.computeDistanceAndTime(100,0,k(),0,0,b0*fB+math.sqrt(ky)+kB-bK)kM=kN+kO else kM,_=a_.computeDistanceAndTime(kI,0,k(),0,0,b0*fB+math.sqrt(ky)+kB-bK)end;kM=(kM+15+bz*jA)*1.1;local kP=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kP then local kx=planet:getAltitude(CustomTarget.position)local kQ=al-kx-100;local cQ=CustomTarget.position-bB;local kR=math.sqrt(cQ:len()^2-(al-kx)^2)if kR>100 then kP=false elseif kQ<=kM or kM==-1 then BrakeIsOn=true;kE=true else BrakeIsOn=false;kE=true end end;if not kP and CalculateBrakeLandingSpeed then if kM>=kF then BrakeIsOn=true else BrakeIsOn=false end;kE=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)d4=ag;if d4>-1 then b5=autoRollPreference;if bz<1 or by:normalize():dot(bA)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a5=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and by:normalize():dot(-cn)<0.999 then BrakeIsOn=true elseif dK<-brakeLandingRate and not kE then BrakeIsOn=true elseif not kE then BrakeIsOn=false end end;if AutoTakeoff or ae then local f4,f6,f5;if AutopilotTargetCoords~=nil then f4,f6,f5=aZ:getPlanetarySystem(0):castIntersections(bB,(AutopilotTargetCoords-bB):normalize(),function(f7)return f7.radius+f7.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if al>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bC(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(ka)<15 and al/HoldAltitude>0.75 then AutoTakeoff=false;if not ae then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ae and bz<H then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;bC(0)z=0 elseif ae then bC(0)z=0;BrakeIsOn=true end elseif ae and ak==0 and a1~=nil and(f4==nil or f4.name==a1.name)then Autopilot=true;ae=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kS=cd()>-1;local kT=jB;if(VectorToTarget or ae)and not kS and bz>minRollVelocity and ak>0.01 then local kt=math.rad(math.abs(ft))kT=jB*math.abs(math.cos(kt))+jD*math.sin(kt)end;local kU=utils.clamp(ka-kT,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ak<0.01 and VectorToTarget then kU=utils.clamp(ka-kT,-85,MaxPitch)elseif ak<0.01 then kU=utils.clamp(ka-kT,-MaxPitch,MaxPitch)end;if math.abs(ft)<5 or VectorToTarget or BrakeLanding or kS or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kU)local kb=pitchPID:get()L=L+kb end end;if antigrav~=nil and(antigrav and not ExternalAGG and al<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function kV(kW,kj)local kX=vec3()local kY=vec3()if kW==axisCommandId.longitudinal then kX=vec3(core.getConstructOrientationForward())kY=bw elseif kW==axisCommandId.vertical then kX=vec3(core.getConstructOrientationUp())kY=bv elseif kW==axisCommandId.lateral then kX=vec3(core.getConstructOrientationRight())kY=bx else return vec3()end;local kZ=vec3(core.getWorldGravity())local k_=kZ:dot(kY)local l0=vec3(core.getWorldAirFrictionAcceleration())local l1=l0:dot(kY)local l2=vec3(core.getVelocity())local l3=l2:dot(kX)local l4=kj*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(l4-l3)local l5=targetSpeedPID2:get()local l6=(l5-l1-k_)*kY;return l6 end;local function l7(kW,kj)local kX=vec3()local kY=vec3()if kW==axisCommandId.longitudinal then kX=vec3(core.getConstructOrientationForward())kY=bw elseif kW==axisCommandId.vertical then kX=vec3(core.getConstructOrientationUp())kY=bv elseif kW==axisCommandId.lateral then kX=vec3(core.getConstructOrientationRight())kY=bx else return vec3()end;local kZ=vec3(core.getWorldGravity())local k_=kZ:dot(kY)local l0=vec3(core.getWorldAirFrictionAcceleration())local l1=l0:dot(kY)local l2=vec3(core.getVelocity())local l3=l2:dot(kX)local l4=kj*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(l4-l3)local l5=targetSpeedPID:get()local l6=(l5-l1-k_)*kY;return l6 end;if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local l8=utils.clamp(K+L+system.getControlDeviceForwardInput(),-1,1)local l9=utils.clamp(N+Q+system.getControlDeviceYawInput(),-1,1)local la=utils.clamp(O+M-system.getControlDeviceLeftRightInput(),-1,1)local lb=P;bA=vec3(core.getWorldVertical())if bA==nil or bA:len()==0 then bA=(planet.center-bB):normalize()end;bB=vec3(core.getConstructWorldPos())bv=vec3(core.getConstructWorldOrientationUp())bw=vec3(core.getConstructWorldOrientationForward())bx=vec3(core.getConstructWorldOrientationRight())by=vec3(core.getWorldVelocity())bz=vec3(by):len()local lc=by:normalize()local ld=getRoll(bA,bw,bx)local le=math.abs(ld)local lf=utils.sign(ld)local lg=vec3(core.getWorldAngularVelocity())local lh=l8*pitchSpeedFactor*bx+l9*rollSpeedFactor*bw+la*yawSpeedFactor*bv;if bA:len()>0.01 and(ak>0.0 or ProgradeIsOn or Reentry or ad or AltitudeHold)then local ft=getRoll(bA,bw,bx)local fu=ft/180*math.pi;local fv=math.cos(fu)local fw=math.sin(fu)local jB=cx(bA,bw,bx*fv+bv*fw)if b5==true and math.abs(bb-ld)>autoRollRollThreshold and l9==0 and math.abs(jB)<85 then local li=bb;local j_=autoRollFactor;if ak==0 then j_=j_/4;bb=0;li=0 end;if rollPID==nil then rollPID=pid.new(j_*0.01,0,j_*0.1)end;rollPID:inject(li-ld)local lj=rollPID:get()lh=lh+lj*bw end end;if bA:len()>0.01 and ak>0.0 then local lk=20.0;if turnAssist==true and le>lk and l8==0 and la==0 then local ll=turnAssistFactor*0.1;local lm=turnAssistFactor*0.025;local ln=(le-lk)/(180-lk)*180;local lo=0;if ln<90 then lo=ln/90 elseif ln<180 then lo=(180-ln)/90 end;lo=lo*lo;local lp=-lf*lm*(1.0-lo)local lq=ll*lo;lh=lh+lq*bx+lp*bv end end;local lr=1;local ls=0;local lt=1;if system.getMouseWheel()>0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ak>0 or Reentry then be=utils.clamp(be-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else z=q(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local dK=-bA:dot(by)if aj and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(be/3.6-by:dot(bw))local lu=throttlePID:get()C=utils.clamp(lu,-1,1)if C<z and ak>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-be/3.6)local lv=utils.clamp(brakePID:get(),0,1)if ak>0 and dK<-80 or ak>0.005 then A=lv end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local lw=''local lx=vec3()local ly=kV(axisCommandId.vertical,a5*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",ly,ls)local lz='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lz=lz..ExtraLongitudeTags end;local lA=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local lB=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lz,axisCommandId.longitudinal)local lC=l7(axisCommandId.lateral,LeftAmount*1000)lw=lw..' , '.."lateral airfoil , lateral ground "lx=lx+lC;if lx:len()>constants.epsilon then Nav:setEngineForceCommand(lw,lx,ls,'','','',lt)end;Nav:setEngineForceCommand(lz,lB,lr)local lD='thrust analog vertical fueled 'local lE='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lE=lE..ExtraLateralTags end;if ExtraVerticalTags~="none"then lD=lD..ExtraVerticalTags end;if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lD,ly,lr)else Nav:setEngineForceCommand(lD,vec3(),lr)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lE,lC,lr)else Nav:setEngineForceCommand(lE,vec3(),lr)end;if lb==0 then lb=A end;local lF=-lb*(brakeSpeedFactor*by+brakeFlatFactor*lc)Nav:setEngineForceCommand('brake',lF)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local kj=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(by:len()-kj/3.6)local lv=utils.clamp(brakePID:get(),0,1)lb=utils.clamp(lb+lv,0,1)end;local lF=-lb*(brakeSpeedFactor*by+brakeFlatFactor*lc)Nav:setEngineForceCommand('brake',lF)local lw=''local lx=vec3()local lG=false;local lz='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lz=lz..ExtraLongitudeTags end;local lA=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if lA==axisCommandType.byThrottle then local lB=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lz,axisCommandId.longitudinal)Nav:setEngineForceCommand(lz,lB,lr)elseif lA==axisCommandType.byTargetSpeed then local lB=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lw=lw..' , '..lz;lx=lx+lB;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lG=true end end;local lE='thrust analog lateral 'if ExtraLateralTags~="none"then lE=lE..ExtraLateralTags end;local lH=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if lH==axisCommandType.byThrottle then local lI=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lE,axisCommandId.lateral)Nav:setEngineForceCommand(lE,lI,lr)elseif lH==axisCommandType.byTargetSpeed then local lC=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lw=lw..' , '..lE;lx=lx+lC end;local lD='thrust analog vertical 'if ExtraVerticalTags~="none"then lD=lD..ExtraVerticalTags end;local lJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lJ==axisCommandType.byThrottle then local ly=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lD,axisCommandId.vertical)if a5~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lD,ly,lr,'airfoil','ground','',lt)else Nav:setEngineForceCommand(lD,vec3(),lr)Nav:setEngineForceCommand('airfoil vertical',ly,lr,'airfoil','','',lt)Nav:setEngineForceCommand('ground vertical',ly,lr,'ground','','',lt)end elseif lJ==axisCommandType.byTargetSpeed then if a5<0 then Nav:setEngineForceCommand('hover',vec3(),lr)end;local lK=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lw=lw..' , '..lD;lx=lx+lK end;if lx:len()>constants.epsilon then if P~=0 or lG or math.abs(lc:dot(bw))<0.8 then lw=lw..', brake'end;Nav:setEngineForceCommand(lw,lx,ls,'','','',lt)end end;local lL=torqueFactor*(lh-lg)local lM=vec3(core.getWorldAirFrictionAngularAcceleration())lL=lL-lM;Nav:setEngineTorqueCommand('torque',lL,lr,'airfoil','','',lt)Nav:setBoosterCommand('rocket_engine')if W and not VanillaRockets then local bN=vec3(core.getVelocity()):len()local lN=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lO=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bN*3.6>lO*(1-lN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN*3.6<lO*(1-lN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local i_=unit.getThrottle()if AtmoSpeedAssist then i_=z*100 end;local kj=i_/100;if h==0 then kj=kj*MaxGameVelocity;if bN>=kj*(1-lN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<kj*(1-lN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kp=c(be)kj=kj*kp/3.6;if bN>=kj*(1-lN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bN<kj*(1-lN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c8=coroutine.resume(beginSetup)if c8 then SetupComplete=true end else Nav:update()if not b3 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lP)local function lQ()aw=not aw;if not aw then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function lR()if LockPitch==nil then LockPitch=cx(bA,bw,bx)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function lS()if ah then ah=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;R=false;G=false;ad=false;ae=false;I=false;b5=autoRollPreference;VectorToTarget=false;TurnBurn=false;ao=false;LockPitch=nil;IntoOrbit=false else ah=true end end;if lP=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and ag==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b5=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if J and not BrakeLanding then Nav.control.extendLandingGears()end else if J then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lP=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lP=="forward"then K=K-1 elseif lP=="backward"then K=K+1 elseif lP=="left"then N=N-1 elseif lP=="right"then N=N+1 elseif lP=="yawright"then O=O-1 elseif lP=="yawleft"then O=O+1 elseif lP=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lP=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lP=="up"then a5=a5+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lP=="down"then a5=a5-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lP=="groundaltitudeup"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lP=="groundaltitudedown"then OldButtonMod=U;OldAntiMod=V;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-U else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lP=="option1"then cm()elseif lP=="option2"then cm(1)elseif lP=="option3"then if l()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif lP=="option4"then co()elseif lP=="option5"then lR()elseif lP=="option6"then ch()elseif lP=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;lQ()elseif lP=="option8"then ci()elseif lP=="option9"then if gyro~=nil then gyro.toggle()ao=gyro.getState()==1 end elseif lP=="lshift"then if system.isViewLocked()==1 then S=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif l()==1 and ShiftShowsRemoteButtons then S=true;b4=false;b3=false end elseif lP=="brake"then if BrakeToggleStatus then cG()elseif not BrakeIsOn then cG()else BrakeIsOn=true end elseif lP=="lalt"then AltIsOn=true elseif lP=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not W then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;W=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;W=false end elseif lP=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)lS()z=0 elseif lP=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cm()end elseif lP=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cm(1)end elseif lP=="antigravity"and not ExternalAGG then if antigrav~=nil then cY()end end end;function script.onActionStop(lP)if lP=="forward"then K=0 elseif lP=="backward"then K=0 elseif lP=="left"then N=0 elseif lP=="right"then N=0 elseif lP=="yawright"then O=0 elseif lP=="yawleft"then O=0 elseif lP=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lP=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lP=="up"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lP=="down"then a5=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lP=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lP=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then V=OldAntiMod end;if AltitudeHold then U=OldButtonMod end elseif lP=="lshift"then if system.isViewLocked()==1 then S=false;a6=0;a7=0;system.lockView(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then S=false;b4=false;b3=false end elseif lP=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cG()else BrakeIsOn=false end end elseif lP=="lalt"then AltIsOn=false end end;function script.onActionLoop(lP)if lP=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+V;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+V end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lP=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-V;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;V=V*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-U;U=U*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lP=="speedup"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lP=="speeddown"then if not S then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(cU)local function lT()for bQ,bH in pairs(a)do dbHud_1.setStringValue(bH,f(nil))end;for bQ,bH in pairs(b)do if bH~="SavedLocations"then dbHud_1.setStringValue(bH,f(nil))end end;T="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"a8=5;aA=false;a4=true end;local function lU(lV,planet,fA)local function lW(fA)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local fZ='::pos{'..r..','..r..','..r..','..r..','..r..'}'local gb,gc,c2,c3,c1=n(fA,fZ)if gb=="0"and gc=="0"then return vec3(tonumber(c2),tonumber(c3),tonumber(c1))end;c3=math.rad(c3)c2=math.rad(c2)local planet=aT[tonumber(gb)][tonumber(gc)]local gY=math.cos(c2)local lX=vec3(gY*math.cos(c3),gY*math.sin(c3),math.sin(c2))return planet.center+(planet.radius+c1)*lX end;if dbHud_1 then local cv={}local position=lW(fA)if planet.name=="Space"then cv={position=position,name=lV,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hr=false;if planet.hasAtmosphere then hr=true else hr=false end;cv={position=position,name=lV,atmosphere=hr,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cv;table.insert(aT[0],cv)bP()else T="Databank must be installed to save locations"end end;local i;local lY="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local lZ,l_=nil,nil;local m0="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cU," ")lZ=cU;if i~=nil then lZ=string.sub(cU,0,i-1)l_=string.sub(cU,i+1)elseif not string.find(lY,lZ)then for fK in string.gmatch(m0,"([^\n]+)")do system.print(fK)end;return end;if lZ=="ah-setname"then if l_==nil or l_==""then T="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cs(l_)else T="Select a saved target to rename first"end elseif lZ=="ah-addlocation"then if l_==nil or l_==""or string.find(l_,"::")==nil then T="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(l_,"::")local lV=string.sub(l_,1,i-2)local fA=string.sub(l_,i)local r=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local fZ='::pos{'..r..','..r..','..r..','..r..','..r..'}'local gb,gc,c2,c3,c1=n(fA,fZ)local planet=aT[tonumber(gb)][tonumber(gc)]lU(lV,planet,fA)T="Added "..lV.." to saved locations,\nplanet "..planet.name.." at "..fA;a8=5 elseif lZ=="ah-agg"then if l_==nil or l_==""then T="Usage: ah-agg targetheight"return end;l_=tonumber(l_)if l_<1000 then l_=1000 end;AntigravTargetAltitude=l_;T="AGG Target Height set to "..l_ elseif lZ=="ah-G"then if l_==nil or l_==""then T="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if l_=="dump"then for bQ,bH in pairs(a)do if type(_G[bH])=="boolean"then if _G[bH]==true then system.print(bH.." true")else system.print(bH.." false")end elseif _G[bH]==nil then system.print(bH.." nil")else system.print(bH.." ".._G[bH])end end;return end;i=string.find(l_," ")local m1=string.sub(l_,0,i-1)local m2=string.sub(l_,i+1)for bQ,bH in pairs(a)do if bH==m1 then T="Variable "..m1 .." changed to "..m2;local m3=type(_G[bH])if m3=="number"then m2=tonumber(m2)elseif m3=="boolean"then if string.lower(m2)=="true"then m2=true else m2=false end end;_G[bH]=m2;return end end;T="No such global variable: "..m1 elseif lZ=="ah-copydatabank"then if dbHud_2 then d6(true)else T="Spare Databank required to copy databank"end elseif lZ=="ah-wipedatabank"then if dbHud_1 then lT()else T="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
