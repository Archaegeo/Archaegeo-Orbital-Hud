name: ArchHud - Archaegeo v1.010 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.010;freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementHitPointsById;local k=core.getElementMassById;local l=core.getElementNameById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local function s(t,u)local v=10^(u or 0)return c(t*v+0.5)/v end;local w=SafeR;local x=SafeB;local y=SafeG;local z=false;local A=0;local B=0;local C=0;local D=false;local E=0;local F=false;local G=s(ResolutionX/2,0)local H=s(ResolutionY/2,0)local I=false;local J=55;local K=false;local L=1;local M=1;local N=false;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=false;local W=false;local X="empty"local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=nil;local a6=0;local a7=0;local a8=false;local a9=0;local aa=0;local ab=0;local ac=3;local ad=0;local ae=""local af=""local ag=0;local ah=false;local ai=false;local aj=false;local ak=-1;local al=false;local am=""local an=h()>0;local ao=h()local ap=core.getAltitude()local aq=core.getElementIdList()local ar=r()local as=nil;local at=false;local au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]local av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=c(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=LandingGearGroundHeight;local bh=system.getMouseDeltaX()local bi=system.getMouseDeltaY()local bj=false;local bk=r()local bl=0;local bm=0;local bn=0;local bo=AtmoSpeedLimit;local bp=0;local bq=nil;local br=0;local bs=0;local bt=false;local bu=false;local bv={VectorToTarget=false}local bw=false;local bx=0;local by=nil;local bz=false;local bA=false;local bB=false;local bC=false;local bD=0;local bE=r()local bF=vec3(core.getConstructWorldOrientationUp())local bG=vec3(core.getConstructWorldOrientationForward())local bH=vec3(core.getConstructWorldOrientationRight())local bI=vec3(core.getWorldVelocity())local bJ=vec3(bI):len()local bK=vec3(core.getWorldVertical())local bL=vec3(core.getConstructWorldPos())function processVariableList(bM)local bN=dbHud_1.hasKey;for bO,bP in pairs(bM)do if bN(bP)then local bQ=e(dbHud_1.getStringValue(bP))if bQ~=nil then _G[bP]=bQ;aK=true end end end end;function LoadVariables()if dbHud_1 then local bN=dbHud_1.hasKey;processVariableList(a)coroutine.yield()processVariableList(b)if aK then X="Loaded Saved Variables (see Lua Chat Tab for list)"G=s(ResolutionX/2,0)H=s(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bo=AtmoSpeedLimit;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]else X="No Saved Variables Found - Stand up / leave remote to save settings"end else X="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bE then LastMaxBrakeInAtmo=0 end;LastStartTime=bE;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then X="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ac=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;function CalculateFuelVolume(bR,bS)if bR>bS then bS=bR end;if ContainerOptimization>0 then bS=bS-bS*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bS=bS-bS*FuelTankOptimization*0.05 end;return bS end;function ProcessElements()local bT=fuelX~=0 and fuelY~=0;for bO in pairs(aq)do local type=core.getElementTypeById(aq[bO])if p(type,'^.*Space Engine$')then bC=true;if p(tostring(core.getElementTagsById(aq[bO])),'^.*vertical.*$')then local bU=core.getElementRotationById(aq[bO])if bU[4]<0 then if q(-bU[4],0.1)==0.5 then bA=true end else if q(bU[4],0.1)==0.5 then bB=true end end end end;if type=="Landing Gear"then N=true end;if type=="Dynamic Core Unit"then local bV=g(aq[bO])if bV>10000 then b0=128 elseif bV>1000 then b0=64 elseif bV>150 then b0=32 end end;aR=aR+g(aq[bO])if bT and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bV=g(aq[bO])local bW=k(aq[bO])local bR=0;local bX=r()if type=="Atmospheric Fuel Tank"then local bS=400;local bY=35.03;if bV>10000 then bS=51200;bY=5480 elseif bV>1300 then bS=6400;bY=988.67 elseif bV>150 then bS=1600;bY=182.67 end;bR=bW-bY;if fuelTankHandlingAtmo>0 then bS=bS+bS*fuelTankHandlingAtmo*0.2 end;bS=CalculateFuelVolume(bR,bS)aO[#aO+1]={aq[bO],l(aq[bO]),bS,bY,bR,bX}end;if type=="Rocket Fuel Tank"then local bS=320;local bY=173.42;if bV>65000 then bS=40000;bY=25740 elseif bV>6000 then bS=5120;bY=4720 elseif bV>700 then bS=640;bY=886.72 end;bR=bW-bY;if fuelTankHandlingRocket>0 then bS=bS+bS*fuelTankHandlingRocket*0.1 end;bS=CalculateFuelVolume(bR,bS)aQ[#aQ+1]={aq[bO],l(aq[bO]),bS,bY,bR,bX}end;if type=="Space Fuel Tank"then local bS=2400;local bY=182.67;if bV>10000 then bS=76800;bY=5480 elseif bV>1300 then bS=9600;bY=988.67 end;bR=bW-bY;if fuelTankHandlingSpace>0 then bS=bS+bS*fuelTankHandlingSpace*0.2 end;bS=CalculateFuelVolume(bR,bS)aP[#aP+1]={aq[bO],l(aq[bO]),bS,bY,bR,bX}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(an or not an and ap<10000)then for _,bP in pairs(door)do bP.toggle()end end;if switch then for _,bP in pairs(switch)do bP.toggle()end end;if forcefield and(an or not an==0 and ap<10000)then for _,bP in pairs(forcefield)do bP.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if N then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bZ=AboveGroundLevel()if bZ~=-1 or not an and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not N then GearExtended=true end else BrakeIsOn=false end;if bg~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bg)if bg==0 and not N then GearExtended=true;BrakeIsOn=true end else bg=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if an and bZ~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=an end;local function b_(c0,c1)if c1==nil then c1=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not c1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,c0)B=s(c0*100,0)end;local function c2(c0,c1)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not c1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,c0)end;local function c3(bP)if ResolutionX==1920 then return bP else return s(ResolutionX*bP/1920,0)end end;local function c4(bP)if ResolutionY==1080 then return bP else return s(ResolutionY*bP/1080,0)end end;local function c5(c6,c7)if c6==nil then c6=core.g()end;c6=s(c6,5)if c7~=nil and c7 or(aN==nil or aN~=c6)then local c8=core.getVelocity()local c9=vec3(c8):len()local ca=e(unit.getData()).maxBrake;if ca~=nil and ca>0 and an then ca=ca/utils.clamp(c9/100,0.1,1)ca=ca/ao;if ao>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+ca)/2 else LastMaxBrakeInAtmo=ca end end end;if ca~=nil and ca>0 then LastMaxBrake=ca end;aN=c6 end end;local function cb(cc,cd,ce,cf,cg,ch,ci,cj,ck)local cl={enableName=cc,disableName=cd,width=ce,height=cf,x=cg,y=ch,toggleVar=ci,toggleFunction=cj,drawCondition=ck,hovered=false}table.insert(aB,cl)return cl end;function UpdateAtlasLocationsList()AtlasOrdered={}for bO,bP in pairs(b2[0])do table.insert(AtlasOrdered,{name=bP.name,index=bO})end;local function cm(cn,co)return cn.name<co.name end;table.sort(AtlasOrdered,cm)end;function AddLocationsToAtlas()for bO,bP in pairs(SavedLocations)do table.insert(b2[0],bP)end;UpdateAtlasLocationsList()end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function cs(ct,cu)local cv=vec3(cu)if ct.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=ct.planetarySystemId},MapPosition)end;local cw=cv-ct.center;local ad=cw:len()local cx=ad-ct.radius;local cy=0;local cz=0;if not cp(ad,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ad)end;return setmetatable({latitude=math.deg(cy),longitude=math.deg(cz),altitude=cx,bodyId=ct.bodyId,systemId=ct.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cB)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cC='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cD,cE,cy,cz,cx=p(cB,cC)if cD=="0"and cE=="0"then return vec3(tonumber(cy),tonumber(cz),tonumber(cx))end;cz=math.rad(cz)cy=math.rad(cy)local planet=b2[tonumber(cD)][tonumber(cE)]local cF=math.cos(cy)local cG=vec3(cF*math.cos(cz),cF*math.sin(cz),math.sin(cy))return planet.center+(planet.radius+cx)*cG end;function AddNewLocationByWaypoint(cH,planet,cB)if dbHud_1 then local cI={}local position=zeroConvertToWorldCoordinates(cB)if planet.name=="Space"then cI={position=position,name=cH,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cJ=false;if planet.hasAtmosphere then cJ=true else cJ=false end;cI={position=position,name=cH,atmosphere=cJ,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cI;table.insert(b2[0],cI)UpdateAtlasLocationsList()else X="Databank must be installed to save locations"end end;local function cK(ad,cL)local cM=ad>100000;local bQ,cN=""if cL==nil then cL=1 end;if cM then bQ,cN=s(ad/1000/200,cL),"SU"elseif ad<1000 then bQ,cN=s(ad,cL),"M"else bQ,cN=s(ad/1000,cL),"KM"end;return bQ,cN end;function findAtlasIndex(cO)for bO,bP in pairs(cO)do if bP.name and bP.name==CustomTarget.name then return bO end end;return-1 end;local function cP()if dbHud_1 then local position=bL;local cQ=planet.name..". "..#SavedLocations;if radar_1 then local cR,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cR~=nil and cR~=""then cQ=cQ.." "..radar_1.getConstructName(cR)end end;local cI={}local cJ=false;if planet.hasAtmosphere then cJ=true end;cI={position=position,name=cQ,atmosphere=cJ,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cI;table.insert(b2[0],cI)UpdateAtlasLocationsList()X="Location saved as "..cQ else X="Databank must be installed to save locations"end end;local function cS()if radarPanelID~=nil and ag==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ag==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ag=0 end end;local function cT()aA=not aA;if not aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function cU()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not an then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function cV()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function cW(cX,cY,cg,ch,ce,cf)if cX>cg and cX<cg+ce and cY>ch and cY<ch+cf then return true else return false end end;local function cZ()TurnBurn=not TurnBurn end;local function c_()local d0=-1;local d1=-1;if vBooster then d0=vBooster.distance()end;if hover then d1=hover.distance()end;if d0~=-1 and d1~=-1 then if d0<d1 then return d0 else return d1 end elseif d0~=-1 then return d0 elseif d1~=-1 then return d1 else return-1 end end;local function d2()if bE-bm<1.5 then if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bm=-1;if AltitudeHold then return end end else bm=bE end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;V=false;bf=true;LockPitch=nil;bz=false;if c_()==-1 then AutoTakeoff=false;if bm>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ap end end;if not an then bz=false;bw=true;IntoOrbit=true;if not ai and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bm>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ai then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function d3(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then d2()end end;VectorStatus="Proceeding to Waypoint"end;local function d4()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end end;local function d5()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then d2()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then d2()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;bz=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function ToggleIntoOrbit()bt=false;br=nil;bs=nil;bD=0;if IntoOrbit then if bz then CancelIntoOrbit=false else CancelIntoOrbit=true end;bz=false;IntoOrbit=false;by=nil elseif unit.getClosestPlanetInfluence()>0 and ao==0 then IntoOrbit=true;bz=false;CancelIntoOrbit=false;if by==nil then by=planet end else X="Unable to engage orbiting, not near planet or in atmosphere"end end;function ToggleLockPitch()if LockPitch==nil then local d6=getPitch(bK,bG,bH)LockPitch=d6;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function d7()if n()==1 then V=not V;if V then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else X="Follow Mode only works with Remote controller"V=false end end;local function d8()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a5=nil;CustomTarget=nil;return true end;local d9=AtlasOrdered[AutopilotTargetIndex].index;local da=b2[0][d9]if da.center then AutopilotTargetName=da.name;a5=b8[0][d9]if CustomTarget~=nil then if ao==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=da;for _,bP in pairs(b8[0])do if bP.name==CustomTarget.planetname then a5=bP;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a5.center)else AutopilotTargetCoords=CustomTarget.position end;if a5.planetname~="Space"then if a5.hasAtmosphere then AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function db(dc)if not Autopilot and not VectorToTarget and not ai then if dc==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then d8()else local d9=AtlasOrdered[AutopilotTargetIndex].index;local da=b2[0][d9]if da.name=="Space"then if dc==nil then db()else db(1)end else d8()end end else X="Disengage autopilot before changing Interplanetary Helper"end end;local function dd()if bE-bn<1.5 and ao>0 then if not bC then X="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bn=-1;if Autopilot or VectorToTarget then return end end else bn=bE end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ai then d8()local de=cs(a5,AutopilotTargetCoords)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ao~=0 then ai=true;d2()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ao>0 then bz=false;if not VectorToTarget then d3(SpaceTarget)end else if ap>100000 or ap==0 then bz=false;Autopilot=true else ah=true;ProgradeIsOn=true;if AltitudeHold then d2()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ao~=0 then ai=true;d2()else Autopilot=true end end elseif ao==0 then local df=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a5.name==planet.name and df)then bz=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;V=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;I=false;LockPitch=nil;WaypointSet=false end else ai=true;d2()end else ai=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;I=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false;Reentry=false end end;function UpdatePosition(dg)local dh=-1;local cI;dh=findAtlasIndex(SavedLocations)if dh~=-1 then local di;if dg~=nil then cI={position=SavedLocations[dh].position,name=dg,atmosphere=SavedLocations[dh].atmosphere,planetname=SavedLocations[dh].planetname,gravity=SavedLocations[dh].gravity}else cI={position=bL,name=SavedLocations[dh].name,atmosphere=ao,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[dh]=cI;dh=-1;dh=findAtlasIndex(b2[0])if dh>-1 then b2[0][dh]=cI end;UpdateAtlasLocationsList()X=CustomTarget.name.." position updated"AutopilotTargetIndex=0;d8()else X="Name Not Found"end end;function ClearCurrentPosition()local dh=-1;dh=findAtlasIndex(b2[0])if dh>-1 then table.remove(b2[0],dh)end;dh=-1;dh=findAtlasIndex(SavedLocations)if dh~=-1 then X=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,dh)end;db()UpdateAtlasLocationsList()end;local function getPitch(dj,dk,co)local dl=dj:cross(co):normalize_inplace()local d6=math.acos(utils.clamp(dl:dot(-dk),-1,1))*constants.rad2deg;if dl:cross(-dk):dot(co)<0 then d6=-d6 end;return d6 end;local function dm(dn,dp,dq)dp=dp:project_on_plane(dn)dq=dq:project_on_plane(dn)return o(dp:cross(dq):dot(dn),dp:dot(dq))end;local function c_()local d0=-1;local d1=-1;if vBooster then d0=vBooster.distance()end;if hover then d1=hover.distance()end;if d0~=-1 and d1~=-1 then if d0<d1 then return d0 else return d1 end elseif d0~=-1 then return d0 elseif d1~=-1 then return d1 else return-1 end end;local function dr(ds)local dt=500000;local du,dv,dw=math.huge;local dx=false;local dy=vec3({13771471,7435803,-128971})local dz=18000000;du=vec3(ds):dist(dy)if du<dz then return true,math.abs(du-dz),"Safe Zone",0 end;dv=vec3(ds):dist(vec3(planet.center))if dv<dt then dx=true end;if math.abs(dv-dt)<math.abs(du-dz)then return dx,math.abs(dv-dt),planet.name,planet.bodyId else return dx,math.abs(du-dz),"Safe Zone",0 end end;local function dA()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bf=autoRollPreference;ah=false;aj=false;a9=0 end end;local function dB(dC,dD)dC=vec3(dC)dD=vec3(dD):normalize()local bQ=dC*dD;return bQ.x+bQ.y+bQ.z end;local function dE(dC,dF,dG)if not an or not bj or ak~=-1 or bJ<J then local dH=dG;if dH==nil then dH=DampingMultiplier end;if dF==nil then dF=aD end;dC=vec3(dC):normalize()local dI=vec3()-dC;local dJ=-dB(dI,core.getConstructWorldOrientationRight())*aC;local dK=-dB(dI,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dJ/2 end;if ay==0 then ay=dK/2 end;if math.abs(dJ)<0.1 then Q=Q-dJ*2 else Q=Q-(dJ+(dJ-ax)*dH)end;if math.abs(dK)<0.1 then P=P+dK*2 else P=P+dK+(dK-ay)*dH end;ax=dJ;ay=dK;if math.abs(dJ)<dF and math.abs(dK)<dF then return true end;return false elseif bj and ak==-1 then dC=bI;local dH=dG;if dH==nil then dH=DampingMultiplier end;if dF==nil then dF=aD end;dC=vec3(dC):normalize()local dI=bG-dC;local dJ=-dB(dI,core.getConstructWorldOrientationRight())*aC;local dK=-dB(dI,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dJ/2 end;if ay==0 then ay=dK/2 end;if math.abs(dJ)<0.1 then Q=Q-dJ*5 else Q=Q-(dJ+(dJ-ax)*dH)end;if math.abs(dK)<0.1 then P=P+dK*5 else P=P+dK+(dK-ay)*dH end;ax=dJ;ay=dK;if math.abs(dJ)<dF and math.abs(dK)<dF then return true end;return false end end;local function dL()if Reentry then X="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then X="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ac=5 elseif not K then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then X="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;X="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dM,dN=cK(HoldAltitude)X="Beginning Re-entry.  Target speed: "..bo.." Target Altitude: "..dM..dN;c2(math.floor(bo))end;AutoTakeoff=false end;local function dO(c9)if not an then c5()return b9.computeDistanceAndTime(c9,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(c9,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function dP(c9)c5()return b9.computeDistanceAndTime(c9,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;function gradeToggle(dQ)if dQ==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;V=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function ProgradeToggle()gradeToggle(1)end;function CheckDamage(dR)local dS=0;az=""local dT=aR;local dU=0;local dV=0;local dW=0;local dX=0;local dY=""for bO in pairs(aq)do local bV=0;local dZ=0;dZ=g(aq[bO])bV=j(aq[bO])dU=dU+bV;if bV<dZ then if bV==0 then dW=dW+1 else dV=dV+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bO]))local cg=position.x-b0;local ch=position.y-b0;local d_=position.z-b0;table.insert(aw,core.spawnArrowSticker(cg,ch,d_+1,"down"))table.insert(aw,core.spawnArrowSticker(cg,ch,d_+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(cg+1,ch,d_,"north"))table.insert(aw,core.spawnArrowSticker(cg+1,ch,d_,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(cg-1,ch,d_,"south"))table.insert(aw,core.spawnArrowSticker(cg-1,ch,d_,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(cg,ch-1,d_,"east"))table.insert(aw,core.spawnArrowSticker(cg,ch-1,d_,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(cg,ch+1,d_,"west"))table.insert(aw,core.spawnArrowSticker(cg,ch+1,d_,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bO])end elseif aS and#aw>0 and aw[11]==aq[bO]then for e0 in pairs(aw)do core.deleteSticker(aw[e0])end;aw={}end end;dS=c(dU/dT*100)if dS<100 then dR[#dR+1]=[[<g class="pbright txt">]]dX=c(dS*2.55)dY=d("rgb(%d,%d,%d)",255-dX,dX,0)if dS<100 then dR[#dR+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dY,dS)if dW>0 then dR[#dR+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dY,dW,dV)elseif dV>0 then dR[#dR+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dY,dV)end end;dR[#dR+1]=[[<\g>]]end end;function DrawCursorLine(dR)local e1=c(utils.clamp(ad/(aE/4)*255,0,255))dR[#dR+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",aa,ab,c(w+0.5)+e1,c(y+0.5)-e1,c(x+0.5)-e1)end;function clearAll()if al then al=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;V=false;I=false;ah=false;ai=false;K=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil;IntoOrbit=false else al=true end end;function wipeSaveVariables()for bO,bP in pairs(a)do dbHud_1.setStringValue(bP,f(nil))end;for bO,bP in pairs(b)do if bP~="SavedLocations"then dbHud_1.setStringValue(bP,f(nil))end end;X="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ac=5;aK=false;a8=true end;function CheckButtons()for _,bP in pairs(aB)do if bP.hovered then if not bP.drawCondition or bP.drawCondition()then bP.toggleFunction()end;bP.hovered=false end end end;function SetButtonContains()local cg=aa+aE/2;local ch=ab+aF/2;for _,bP in pairs(aB)do bP.hovered=cW(cg,ch,bP.x,bP.y,bP.width,bP.height)end end;function DrawButton(dR,e2,hover,cg,ch,e3,e4,e5,e6,e7,e8)if type(e7)=="function"then e7=e7()end;if type(e8)=="function"then e8=e8()end;dR[#dR+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",cg,ch,e3,e4)if e2 then dR[#dR+1]=d("%s'",e5)else dR[#dR+1]=e6 end;if hover then dR[#dR+1]=" style='stroke:white; stroke-width:2'"else dR[#dR+1]=" style='stroke:black; stroke-width:1'"end;dR[#dR+1]="></rect>"dR[#dR+1]=d("<text x='%f' y='%f' font-size='24' fill='",cg+e3/2,ch+e4/2+5)if e2 then dR[#dR+1]="black"else dR[#dR+1]="white"end;dR[#dR+1]="' text-anchor='middle' font-family='Montserrat'>"if e2 then dR[#dR+1]=d("%s</text>",e7)else dR[#dR+1]=d("%s</text>",e8)end end;function DrawButtons(dR)local e9="rgb(50,50,50)'"local ea="rgb(210,200,200)"local eb=DrawButton;for _,bP in pairs(aB)do local cd=bP.disableName;local cc=bP.enableName;if type(cd)=="function"then cd=cd()end;if type(cc)=="function"then cc=cc()end;if not bP.drawCondition or bP.drawCondition()then eb(dR,bP.toggleVar(),bP.hovered,bP.x,bP.y,bP.width,bP.height,ea,e9,cd,cc)end end end;function getRelativePitch(c8)c8=vec3(c8)local d6=-math.deg(math.atan(c8.y,c8.z))+180;d6=d6-90;if d6<0 then d6=360+d6 end;if d6>180 then d6=-180+d6-180 end;return-d6 end;function getRelativeYaw(c8)c8=vec3(c8)local ec=math.deg(math.atan(c8.y,c8.x))-90;if ec<-180 then ec=360+ec end;return ec end;function getAPEnableName()local cQ=AutopilotTargetName;if cQ==nil then local ed,cN=cK((bL-CustomTarget.position):len())cQ=CustomTarget.name.." "..ed..cN end;if cQ==nil then cQ="None"end;return"Engage Autopilot: "..cQ end;function getAPDisableName()local cQ=AutopilotTargetName;if cQ==nil then cQ=CustomTarget.name end;if cQ==nil then cQ="None"end;return"Disable Autopilot: "..cQ end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function SetupButtons()local ee=50;local ef=260;local eg=cb("Enable Brake Toggle","Disable Brake Toggle",ef,ee,aE/2-ef/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then X="Brakes in Toggle Mode"else X="Brakes in Default Mode"end end)cb("Align Prograde","Disable Prograde",ef,ee,aE/2-ef/2-50-eg.width,aF/2-ee+380,function()return ProgradeIsOn end,ProgradeToggle)cb("Align Retrograde","Disable Retrograde",ef,ee,aE/2-ef/2+eg.width+50,aF/2-ee+380,function()return RetrogradeIsOn end,gradeToggle,function()return ao==0 end)local eh=cb(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,dd)cb("Save Position","Save Position",200,eh.height,eh.x+eh.width+30,eh.y,function()return false end,cP,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)cb("Update Position","Update Position",200,eh.height,eh.x+eh.width+30,eh.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cb("Clear Position","Clear Position",200,eh.height,eh.x-200-30,eh.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ee=60;ef=300;local cg=10;local ch=aF/2-300;cb("Enable Turn and Burn","Disable Turn and Burn",ef,ee,cg,ch,function()return TurnBurn end,cZ)cb("Engage Altitude Hold","Disable Altitude Hold",ef,ee,cg+ef+20,ch,function()return AltitudeHold end,d2)ch=ch+ee+20;cb("Engage Autoland","Disable Autoland",ef,ee,cg,ch,function()return AutoLanding end,d4)local ei,ej,ek;if VertTakeOffEngine then ei="Engage Vertical Takeoff"ej="Disable Vertical Takeoff"ek=VertTakeOff else ei="Engage Auto Takeoff"ej="Disable Auto Takeoff"ek=AutoTakeoff end;cb(ei,ej,ef,ee,cg+ef+20,ch,function()return ek end,d5)ch=ch+ee+20;cb("Show Orbit Display","Hide Orbit Display",ef,ee,cg,ch,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then X="Orbit Display Enabled"else X="Orbit Display Disabled"end end)cb("Engage Orbiting","Cancel Orbiting",ef,ee,cg+ef+20,ch,function()return IntoOrbit end,ToggleIntoOrbit,function()return ao==0 and unit.getClosestPlanetInfluence()>0 end)ch=ch+ee+20;cb("Glide Re-Entry","Cancel Glide Re-Entry",ef,ee,cg,ch,function()return Reentry end,function()ah=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)cb("Parachute Re-Entry","Cancel Parachute Re-Entry",ef,ee,cg+ef+20,ch,function()return Reentry end,dL,function()return ap>ReentryAltitude end)ch=ch+ee+20;cb("Engage Follow Mode","Disable Follow Mode",ef,ee,cg,ch,function()return V end,d7,function()return n()==1 end)cb("Enable Repair Arrows","Disable Repair Arrows",ef,ee,cg+ef+20,ch,function()return aS end,function()aS=not aS;if aS then X="Repair Arrows Enabled"else X="Repair Arrows Diabled"end end,function()return n()==1 end)ch=ch+ee+20;if not ExternalAGG then cb("Enable AGG","Disable AGG",ef,ee,cg,ch,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;ch=ch+ee+20;cb(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,ef*2,ee,cg,ch,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function getHeading(dk)local dc=-bK;dk=dk-dk:project_on(dc)local el=vec3(0,0,1)el=el-el:project_on(dc)local em=el:cross(dc)local en=el:angle_between(dk)*constants.rad2deg;if dk:dot(em)<0 then en=360-en end;return en end;function getSpeedDisplayString(c9)return c(s(c9*3.6,0)+0.5).." km/h"end;function FormatTimeString(eo)local ep=0;local eq=0;local er=0;if eo<60 then eo=c(eo)elseif eo<3600 then ep=c(eo/60)eo=c(eo%60)elseif eo<86400 then eq=c(eo/3600)ep=c(eo%3600/60)else er=c(eo/86400)eq=c(eo%86400/3600)end;if er>0 then return er.."d "..eq.."h "elseif eq>0 then return eq.."h "..ep.."m "elseif ep>0 then return ep.."m "..eo.."s"elseif eo>0 then return eo.."s"else return"0s"end end;function GetAutopilotMaxMass()local es=LastMaxBrakeInAtmo/a5:getGravity(a5.center+vec3(0,0,1)*a5.radius):len()return es end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a5.center-bL):len()else AutopilotDistance=(CustomTarget.position-bL):len()end end;local c9=bJ;local et=unit.getThrottle()/100;if AtmoSpeedAssist then et=B end;local eu,ev=b9.computeDistanceAndTime(bJ,MaxGameVelocity,m(),Nav:maxForceForward()*et,warmup,0)local a1,a2;if not TurnBurn then a1,a2=dO(MaxGameVelocity)else a1,a2=dP(MaxGameVelocity)end;local _,ew;if not TurnBurn and c9>0 then _,ew=dO(c9)else _,ew=dP(c9)end;local ex=0;local ey=0;if AutopilotCruising or not Autopilot and c9>5 then ey=b9.computeTravelTime(c9,0,AutopilotDistance)elseif a1+eu<AutopilotDistance then ex=AutopilotDistance-(a1+eu)ey=b9.computeTravelTime(8333.0556,0,ex)else local ez=(AutopilotDistance-a1)/eu;eu=AutopilotDistance-a1;ev=ev*ez end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ey elseif AutopilotBraking then return ew elseif AutopilotCruising then return ey+ew else return ev+a2+ey end end;function AboveGroundLevel()local eA=-1;local eB=c_()if telemeter_1 then eA=telemeter_1.getDistance()end;if eB~=-1 and eA~=-1 then if eB<eA then return eB else return eA end elseif eB~=-1 then return eB else return eA end end;function tablelength(eC)local eD=0;for _ in pairs(eC)do eD=eD+1 end;return eD end;function BeginProfile(eE)ProfileTimeStart=r()end;function EndProfile(eE)local eF=r()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eF;ProfileCount=ProfileCount+1;if eF>ProfileTimeMax then ProfileTimeMax=eF end;if eF<ProfileTimeMin then ProfileTimeMin=eF end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eG=ProfileTimeSum;local eH=ProfileTimeSum/ProfileCount;local eI=ProfileTimeMin;local eJ=ProfileTimeMax;local eK=ProfileCount;system.print(d("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eG,eH,eI,eJ,eK))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eL=radar_1.getEntries()local eM=radar_1.getData()local eN=c3(1770)local eO=c4(330)if#eL>0 then local eP=eM:find('identifiedConstructs":%[%]')if eP==nil and perisPanelID==nil then ag=1;cS()end;if eP~=nil and perisPanelID~=nil then cS()end;if radarPanelID==nil then cS()end;ae=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eN,eO,#eL)local eQ={}for bO,bP in pairs(eL)do if radar_1.hasMatchingTransponder(bP)==1 then table.insert(eQ,bP)end end;if#eQ>0 then local ch=c4(15)local cg=c3(1370)ae=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ae,cg,ch)for bO,bP in pairs(eQ)do ch=ch+20;ae=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ae,cg,ch,radar_1.getConstructName(bP))end end else local eR;eR=eM:find('worksInEnvironment":false')if eR then ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eN,eO)else ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eN,eO)end;if radarPanelID~=nil then ag=0;cS()end end end end;function updateDistance()local bX=r()local eS=bJ;local eT=bX-ar;if eS>1.38889 then eS=eS/1000;local eU=eS*(bX-ar)TotalDistanceTravelled=TotalDistanceTravelled+eU;a6=a6+eU end;a7=a7+eT;TotalFlightTime=TotalFlightTime+eT;ar=bX end;local function eV(eW,eX)local eY=vec3()local eZ=vec3()if eW==axisCommandId.longitudinal then eY=vec3(core.getConstructOrientationForward())eZ=bG elseif eW==axisCommandId.vertical then eY=vec3(core.getConstructOrientationUp())eZ=bF elseif eW==axisCommandId.lateral then eY=vec3(core.getConstructOrientationRight())eZ=bH else return vec3()end;local e_=vec3(core.getWorldGravity())local f0=e_:dot(eZ)local f1=vec3(core.getWorldAirFrictionAcceleration())local f2=f1:dot(eZ)local f3=vec3(core.getVelocity())local f4=f3:dot(eY)local f5=eX*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(f5-f4)local f6=targetSpeedPID2:get()local f7=(f6-f2-f0)*eZ;return f7 end;local function f8(eW,eX)local eY=vec3()local eZ=vec3()if eW==axisCommandId.longitudinal then eY=vec3(core.getConstructOrientationForward())eZ=bG elseif eW==axisCommandId.vertical then eY=vec3(core.getConstructOrientationUp())eZ=bF elseif eW==axisCommandId.lateral then eY=vec3(core.getConstructOrientationRight())eZ=bH else return vec3()end;local e_=vec3(core.getWorldGravity())local f0=e_:dot(eZ)local f1=vec3(core.getWorldAirFrictionAcceleration())local f2=f1:dot(eZ)local f3=vec3(core.getVelocity())local f4=f3:dot(eY)local f5=eX*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(f5-f4)local f6=targetSpeedPID:get()local f7=(f6-f2-f0)*eZ;return f7 end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bO,bP in pairs(b2[0])do if aG==nil or bP.center.x<aG then aG=bP.center.x end;if aH==nil or bP.center.x>aH then aH=bP.center.x end;if aI==nil or bP.center.y<aI then aI=bP.center.y end;if aJ==nil or bP.center.y>aJ then aJ=bP.center.y end end;b3=""local f9=1.1*(aH-aG)/1920;local fa=1.4*(aJ-aI)/1080;for bO,bP in pairs(b2[0])do local cg=960+bP.center.x/f9;local ch=540+bP.center.y/fa;b3=b3 ..'<circle cx="'..cg..'" cy="'..ch..'" r="'..bP.radius/f9*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bP.name,"Moon")and not p(bP.name,"Sanctuary")and not p(bP.name,"Space")then b3=b3 .."<text x='"..cg.."' y='"..ch+bP.radius/f9*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bP.name.."</text>"end end;local cB=bL;local cg=960+cB.x/f9;local ch=540+cB.y/fa;b3=b3 ..'<circle cx="'..cg..'" cy="'..ch..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..cg.."' y='"..ch-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=f9;b5=fa;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cB=bL;local cg=960+cB.x/f9;local ch=540+cB.y/fa;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((cg-80)/19.20,(ch-80)/10.80,b3)end end;function PlanetRef()local function fb(fc)return type(fc)=='number'end;local function fd(fc)return type(tonumber(fc))=='number'end;local function fe(ff)return type(ff)=='table'end;local function fg(fh)return type(fh)=='string'end;local function fi(bP)return fe(bP)and fb(bP.x and bP.y and bP.z)end;local function fj(fk)return fe(fk)and fb(fk.latitude and fk.longitude and fk.altitude and fk.bodyId and fk.systemId)end;local fl=math.pi/180;local fm=180/math.pi;local epsilon=1e-10;local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cC='::pos{'..t..','..t..','..t..','..t..','..t..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fn=utils.clamp;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function fo(fc)local bQ=string.gsub(string.reverse(d('%.4f',fc)),'^0*%.?','')return bQ==''and'0'or string.reverse(bQ)end;local function fp(fq)if fi(fq)then return d('{x=%.3f,y=%.3f,z=%.3f}',fq.x,fq.y,fq.z)end;if fe(fq)and not getmetatable(fq)then local fr={}local fs=next(fq)if type(fs)=='nil'or fs==1 then fr=fq else for bO,bP in pairs(fq)do local c0=fp(bP)if type(bO)=='number'then table.insert(fr,d('[%s]=%s',bO,c0))else table.insert(fr,d('%s=%s',bO,c0))end end end;return d('{%s}',table.concat(fr,','))end;if fg(fq)then return d("'%s'",fq:gsub("'",[[\']]))end;return tostring(fq)end;local ft={}ft.__index=ft;ft.__tostring=function(fq,fu)local fv={}for bO in pairs(fq)do table.insert(fv,bO)end;table.sort(fv)local fr={}for _,bO in ipairs(fv)do local c0=fp(fq[bO])if type(bO)=='number'then table.insert(fr,d('[%s]=%s',bO,c0))else table.insert(fr,d('%s=%s',bO,c0))end end;if fu then return d('%s%s',fu,table.concat(fr,',\n'..fu))end;return d('{%s}',table.concat(fr,','))end;ft.__eq=function(fw,fx)return fw.planetarySystemId==fx.planetarySystemId and fw.bodyId==fx.bodyId and cp(fw.radius,fx.radius)and cp(fw.center.x,fx.center.x)and cp(fw.center.y,fx.center.y)and cp(fw.center.z,fx.center.z)and cp(fw.GM,fx.GM)end;local function fy(cD,cE,dt,cu,fz)assert(fd(cD),'Argument 1 (planetarySystemId) must be a number:'..type(cD))assert(fd(cE),'Argument 2 (bodyId) must be a number:'..type(cE))assert(fd(dt),'Argument 3 (radius) must be a number:'..type(dt))assert(fe(cu),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cu))assert(fd(fz),'Argument 5 (GM) must be a number:'..type(fz))return setmetatable({planetarySystemId=tonumber(cD),bodyId=tonumber(cE),radius=tonumber(dt),center=vec3(cu),GM=tonumber(fz)},ft)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(fA)return d('::pos{%d,%d,%s,%s,%s}',fA.systemId,fA.bodyId,fo(fA.latitude*fm),fo(fA.longitude*fm),fo(fA.altitude))end;MapPosition.__eq=function(fw,fx)return fw.bodyId==fx.bodyId and fw.systemId==fx.systemId and cp(fw.latitude,fx.latitude)and cp(fw.altitude,fx.altitude)and(cp(fw.longitude,fx.longitude)or cp(fw.latitude,math.pi/2)or cp(fw.latitude,-math.pi/2))end;local function fB(fC,cE,cy,cz,cx)local cD=fC;if fg(fC)and not cz and not cx and not cE and not cy then cD,cE,cy,cz,cx=p(fC,cC)assert(cD,'Argument 1 (position string) is malformed.')else assert(fd(cD),'Argument 1 (systemId) must be a number:'..type(cD))assert(fd(cE),'Argument 2 (bodyId) must be a number:'..type(cE))assert(fd(cy),'Argument 3 (latitude) must be in degrees:'..type(cy))assert(fd(cz),'Argument 4 (longitude) must be in degrees:'..type(cz))assert(fd(cx),'Argument 5 (altitude) must be in meters:'..type(cx))end;cD=tonumber(cD)cE=tonumber(cE)cy=tonumber(cy)cz=tonumber(cz)cx=tonumber(cx)if cE==0 then return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=cE,systemId=cD},MapPosition)end;return setmetatable({latitude=fl*fn(cy,-90,90),longitude=fl*(cz%360),altitude=cx,bodyId=cE,systemId=cD},MapPosition)end;local fD={}fD.__index=fD;fD.__tostring=function(fq,fu)local fE=fu and fu..'  'local fF={}local fv={}for bO in pairs(fq)do table.insert(fv,bO)end;table.sort(fv)for _,fG in ipairs(fv)do bdy=fq[fG]local fH=ft.__tostring(bdy,fE)if fu then table.insert(fF,d('[%s]={\n%s\n%s}',fG,fH,fu))else table.insert(fF,d('  [%s]=%s',fG,fH))end end;if fu then return d('\n%s%s%s',fu,table.concat(fF,',\n'..fu),fu)end;return d('{\n%s\n}',table.concat(fF,',\n'))end;local function fI(fJ)local b2={}local pid;for _,bP in pairs(fJ)do local cR=bP.planetarySystemId;if type(cR)~='number'then error('Invalid planetary system ID: '..tostring(cR))elseif pid and cR~=pid then error('Mistringmatch planetary system IDs: '..cR..' and '..pid)end;local fK=bP.bodyId;if type(fK)~='number'then error('Invalid body ID: '..tostring(fK))elseif b2[fK]then error('Duplicate body ID: '..tostring(fK))end;setmetatable(bP.center,getmetatable(vec3.unit_x))b2[fK]=setmetatable(bP,ft)pid=cR end;return setmetatable(b2,fD)end;b7={}local function fL(fJ)return setmetatable({galaxyAtlas=fJ or{}},b7)end;b7.__index=function(ff,i)if type(i)=='number'then local system=ff.galaxyAtlas[i]return fI(system)end;return rawget(b7,i)end;b7.__pairs=function(fq)return function(ff,bO)local fM,nv=next(ff,bO)return fM,nv and fI(nv)end,fq.galaxyAtlas,nil end;b7.__tostring=function(fq)local fN={}for _,fO in pairs(fq or{})do local fP=fO:getPlanetarySystemId()local fQ=fD.__tostring(fO,'    ')table.insert(fN,d('  [%s]={%s\n  }',fP,fQ))end;return d('{\n%s\n}\n',table.concat(fN,',\n'))end;b7.BodyParameters=fy;b7.MapPosition=fB;b7.PlanetarySystem=fI;function b7.createBodyParameters(fR,cE,fS,fT,fU,fV,fW)assert(fd(fR),'Argument 1 (planetarySystemId) must be a number:'..type(fR))assert(fd(cE),'Argument 2 (bodyId) must be a number:'..type(cE))assert(fd(fS),'Argument 3 (surfaceArea) must be a number:'..type(fS))assert(fe(fT),'Argument 4 (aPosition) must be an array or vec3:'..type(fT))assert(fe(fU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fU))assert(fd(fV),'Argument 6 (altitude) must be in meters:'..type(fV))assert(fd(fW),'Argument 7 (gravityAtPosition) must be number:'..type(fW))local dt=math.sqrt(fS/4/math.pi)local ad=dt+fV;local fX=vec3(fT)+ad*vec3(fU)local fz=fW*ad*ad;return fy(fR,cE,dt,fX,fz)end;b7.isMapPosition=fj;function b7:getPlanetarySystem(fC)if i==nil then i=0 end;if nv==nil then nv=0 end;local fR=fC;if fj(fC)then fR=fC.systemId end;if type(fR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fD then system=fI(system)end;return system end end end;function fD:castIntersections(fY,dD,fZ,f_)local fZ=fZ or function(g0)return 1.05*g0.radius end;local g1={}if f_ then for _,i in ipairs(f_)do g1[i]=self[i]end else f_={}for bO,g0 in pairs(self)do table.insert(f_,bO)g1[bO]=g0 end end;local function g2(g3,g4)local g5=g1[g3].center-fY;local g6=g1[g4].center-fY;return g5:len()<g6:len()end;table.sort(f_,g2)local g7=dD:normalize()for i,cR in ipairs(f_)do local g0=g1[cR]local g8=g0.center-fY;local dt=fZ(g0)local g9=g8:dot(g7)local ga=g9^2-(g8:len2()-dt^2)if ga>=0 then local gb=math.sqrt(ga)local gc=g9+gb;local gd=g9-gb;if gd>0 then return g0,gc,gd elseif gc>0 then return g0,gc,nil end end end;return nil,nil,nil end;function fD:closestBody(ge)assert(type(ge)=='table','Invalid coordinates.')local gf,g0;local gg=vec3(ge)for _,gh in pairs(self)do local gi=(gh.center-gg):len2()if(not g0 or gi<gf)and gh.name~="Space"then g0=gh;gf=gi end end;return g0 end;function fD:convertToBodyIdAndWorldCoordinates(fC)local gj=fC;if fg(fC)then gj=fB(fC)end;if gj.bodyId==0 then return 0,vec3(gj.latitude,gj.longitude,gj.altitude)end;local gh=self:getBodyParameters(gj)if gh then return gj.bodyId,gh:convertToWorldCoordinates(gj)end end;function fD:getBodyParameters(fC)local cE=fC;if fj(fC)then cE=fC.bodyId end;assert(fd(cE),'Argument 1 (bodyId) must be a number:'..type(cE))return self[cE]end;function fD:getPlanetarySystemId()local _,bP=next(self)return bP and bP.planetarySystemId end;function ft:convertToMapPosition(cu)assert(fe(cu),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cu))local cv=vec3(cu)if self.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cw=cv-self.center;local ad=cw:len()local cx=ad-self.radius;local cy=0;local cz=0;if not cp(ad,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ad)end;return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function ft:convertToWorldCoordinates(fC)local gj=fg(fC)and fB(fC)or fC;if gj.bodyId==0 then return vec3(gj.latitude,gj.longitude,gj.altitude)end;assert(fj(gj),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gj.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gj.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cF=math.cos(gj.latitude)return self.center+(self.radius+gj.altitude)*vec3(cF*math.cos(gj.longitude),cF*math.sin(gj.longitude),math.sin(gj.latitude))end;function ft:getAltitude(cu)return(vec3(cu)-self.center):len()-self.radius end;function ft:getDistance(cu)return(vec3(cu)-self.center):len()end;function ft:getGravity(cu)local gk=self.center-vec3(cu)local gl=gk:len2()return self.GM/gl*gk/math.sqrt(gl)end;return setmetatable(b7,{__call=function(_,...)return fL(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fg(fh)return type(fh)=='string'end;local function fe(ff)return type(ff)=='table'end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cx)assert(self.body)local ad=cx+self.body.radius;if not cp(ad,0)then local orbit=math.sqrt(self.body.GM/ad)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fC,c8)assert(self.body)assert(fe(fC)or fg(fC))assert(fe(c8))local cB=(fg(fC)or PlanetRef.isMapPosition(fC))and self.body:convertToWorldCoordinates(fC)or vec3(fC)local bP=vec3(c8)local gm=cB-self.body.center;local g6=bP:len2()local gn=gm:len()local go=self.body.GM;local gp=((g6-go/gn)*gm-gm:dot(bP)*bP)/go;local cq=go/(2*go/gn-g6)local gq=gp:len()local g7=gp:normalize()local gr=cq*(1-gq)local gs=cq*(1+gq)local gt=gr*g7+self.body.center;local gu=gq<=1 and-gs*g7+self.body.center or nil;local gv=math.sqrt(cq*go*(1-gq*gq))local gw=gu and 2*math.pi*math.sqrt(cq^3/go)local gx=math.acos(gp:dot(gm)/(gq*gn))if gm:dot(bP)<0 then gx=-(gx-2*math.pi)end;local gy=math.acos((math.cos(gx)+gq)/(1+gq*math.cos(gx)))local gz=gy;if gz<0 then gz=gz+2*math.pi end;local gA=gz-gq*math.sin(gz)local gB=0;local gC=0;local gD=0;if gw~=nil then gB=gA/(2*math.pi/gw)gC=gw-gB;gD=gC+gw/2;if gx-math.pi>0 then gC=gB;gD=gC+gw/2 end;if gD>gw then gD=gD-gw end end;return{periapsis={position=gt,speed=gv/gr,circularOrbitSpeed=math.sqrt(go/gr),altitude=gr-self.body.radius},apoapsis=gu and{position=gu,speed=gv/gs,circularOrbitSpeed=math.sqrt(go/gs),altitude=gs-self.body.radius},currentVelocity=bP,currentPosition=cB,eccentricity=gq,period=gw,eccentricAnomaly=gy,meanAnomaly=gA,timeToPeriapsis=gC,timeToApoapsis=gD}end;local function gE(gF)local gh=PlanetRef.BodyParameters(gF.planetarySystemId,gF.bodyId,gF.radius,gF.center,gF.GM)return setmetatable({body=gh},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gE(...)end})end;function Kinematics()local b9={}local gG=30000000/3600;local gH=gG*gG;local gI=100;local function gJ(bP)return 1/math.sqrt(1-bP*bP/gH)end;function b9.computeAccelerationTime(gK,gL,gM)local gN=gG*math.asin(gK/gG)return(gG*math.asin(gM/gG)-gN)/gL end;function b9.computeDistanceAndTime(gK,gM,gO,gP,gQ,gR)gQ=gQ or 0;gR=gR or 0;local gS=gK<=gM;local gT=gP*(gS and 1 or-1)/gO;local gU=-gR/gO;local gV=gT+gU;if gS and gV<=0 or not gS and gV>=0 then return-1,-1 end;local gW,gX=0,0;if gT~=0 and gQ>0 then local gN=math.asin(gK/gG)local gY=math.pi*(gT/2+gU)local gZ=gT*gQ;local g_=gG*math.pi;local bP=function(ff)local e3=(gY*ff-gZ*math.sin(math.pi*ff/2/gQ)+g_*gN)/g_;local h0=math.tan(e3)return gG*h0/math.sqrt(h0*h0+1)end;local h1=gS and function(fh)return fh>=gM end or function(fh)return fh<=gM end;gX=2*gQ;if h1(bP(gX))then local h2=0;while math.abs(gX-h2)>0.5 do local ff=(gX+h2)/2;if h1(bP(ff))then gX=ff else h2=ff end end end;local h3=gK;local h4=gX/gI;for h5=1,gI do local c9=bP(h5*h4)gW=gW+(c9+h3)*h4/2;h3=c9 end;if gX<2*gQ then return gW,gX end;gK=h3 end;local gN=gG*math.asin(gK/gG)local bE=(gG*math.asin(gM/gG)-gN)/gV;local h6=gH*math.cos(gN/gG)/gV;local ad=h6-gH*math.cos((gV*bE+gN)/gG)/gV;return ad+gW,bE+gX end;function b9.computeTravelTime(gK,gL,ad)if ad==0 then return 0 end;if gL>0 then local gN=gG*math.asin(gK/gG)local h6=gH*math.cos(gN/gG)/gL;return(gG*math.acos(gL*(h6-ad)/gH)-gN)/gL end;if gK==0 then return-1 end;assert(gK>0,'Acceleration and initial speed are both zero.')return ad/gK end;function b9.lorentz(bP)return gJ(bP)end;return b9 end;function SaveDataBank(h7)if dbHud_1 then if not a8 then for bO,bP in pairs(b)do dbHud_1.setStringValue(bP,f(_G[bP]))if h7 and dbHud_2 then dbHud_2.setStringValue(bP,f(_G[bP]))end end;for bO,bP in pairs(a)do dbHud_1.setStringValue(bP,f(_G[bP]))if h7 and dbHud_2 then dbHud_2.setStringValue(bP,f(_G[bP]))end end;system.print("Saved Variables to Datacore")if h7 and dbHud_2 then X="Databank copied.  Remove copy when ready."end end end end;local function h8()local h9={}local function ha()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;local function hb()local hc=Nav.axisCommandManager:getAxisCommandType(0)local hd="TRAVEL"if hc==1 then hd="CRUISE"end;if Autopilot then hd="AUTOPILOT"end;return hd end;local function he(dR,a_,cg,hf,hg,hh,hi,hj)local hk=1;local hl=2;local hm=3;local hn=4;local ho=5;local hp=6;local hq=""local hr=0;local hs=fuelY;local ht=fuelY+10;if n()==1 and not RemoteHud then hs=hs-50;ht=ht-50 end;dR[#dR+1]=[[<g class="pdim txtfuel">]]if hg=="ATMO"then hq="atmofueltank"elseif hg=="SPACE"then hq="spacefueltank"else hq="rocketfueltank"end;hr=_G[hq.."_size"]if#hh>0 then for i=1,#hh do local cQ=string.sub(hh[i][hl],1,12)local hu=0;for e0=1,hr do if hh[i][hl]==e(unit[hq.."_"..e0].getData()).name then hu=e0;break end end;if a_ or hi[i]==nil or hj[i]==nil then local hv=0;local hw=0;local hx=0;local hy=0;local bX=r()if hu~=0 then hj[i]=e(unit[hq.."_"..hu].getData()).percentage;hi[i]=e(unit[hq.."_"..hu].getData()).timeLeft;if hi[i]=="n/a"then hi[i]=0 end else hx=k(hh[i][hk])-hh[i][hn]hv=hh[i][hm]hj[i]=c(0.5+hx*100/hv)hw=hh[i][ho]hy=hh[i][hp]if hw<=hx then hi[i]=0 else hi[i]=c(0.5+hx/((hw-hx)/(bX-hy)))end;hh[i][ho]=hx;hh[i][hp]=bX end end;if cQ==hf then cQ=d("%s %d",hg,i)end;if hu==0 then cQ=cQ.." *"end;local hz;if hi[i]==0 then hz="n/a"else hz=FormatTimeString(hi[i])end;if hj[i]~=nil then local dX=c(hj[i]*2.55)local dY=d("rgb(%d,%d,%d)",255-dX,dX,0)local hA=""if hz~="n/a"and hi[i]<120 or hj[i]<5 then if a_ then hA=[[class="red"]]end end;dR[#dR+1]=d([[
                                <text x=%d y="%d" %s>%s</text>
                                <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                            ]],cg,hs,hA,cQ,cg,ht,dY,hj[i],hz)hs=hs+30;ht=ht+30 end end end;dR[#dR+1]="</g>"end;local function hB(dR,cx)if cx<200000 and not an or cx and an then local hC=-bK:dot(bI)local en=0;if math.abs(hC)>1 then en=45*math.log(math.abs(hC),10)if hC<0 then en=-en end end;dR[#dR+1]=d([[
                        <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                <text x="31" y="-41">1000</text>
                                <text x="-10" y="-65">100</text>
                                <text x="-54" y="-45">10</text>
                                <text x="-73" y="3">O</text>
                                <text x="-56" y="52">-10</text>
                                <text x="-14" y="72">-100</text>
                                <text x="29" y="50">-1000</text>
                                <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                            <g class="linethick">
                                <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                <circle r="90" />
                            </g>
                            <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                        </g>
                    ]],vSpdMeterX,vSpdMeterY,c(hC),c(en))end;return dR end;local function hD(dR,centerX,centerY,hE,hF,df)local hG=circleRad;local hH=20;hH=c(hH)local hI=c(hE)if df then for i=-45,45,5 do local hJ=i;dR[#dR+1]=d([[<g transform="rotate(%f,%d,%d)">]],hJ,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dR[#dR+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+hG+hH-len,centerX,centerY+hG+hH)end;dR[#dR+1]=d([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY+hG+hH-35,hF,centerX,centerY+hG+hH-25,hI)dR[#dR+1]=d([[<g transform="rotate(%f,%d,%d)">]],-hE,centerX,centerY)dR[#dR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+hG+hH-20,centerX+5,centerY+hG+hH-20,centerX,centerY+hG+hH-15)dR[#dR+1]="</g>"end;local ec=hI;if df then ec=getHeading(bG)end;local hK=20;local hL=c(ec)local hM=0;local hN=centerY+hG+hH+20;local hO=centerX;if hF~="YAW"then hN=c4(130)hO=c3(960)end;local hP=[[<path class="txttick line" d="]]for i=c(hL-(hK+10)-hL%5+0.5),c(hL+hK+10+hL%5+0.5),5 do local cg=hO+-i*5+ec*5;if i%10==0 then hM=10;local t=i;if t==360 then t=0 elseif t>360 then t=t-360 elseif t<0 then t=t+360 end;dR[#dR+1]=d([[
                                <text x="%f" y="%f">%d</text>]],cg+5,hN-12,t)elseif i%5==0 then hM=5 end;if hM==10 then hP=d([[%s M %f %f v %d]],hP,cg,hN-5,hM)else hP=d([[%s M %f %f v %d]],hP,cg,hN-2.5,hM)end end;dR[#dR+1]=hP..[["/>]]dR[#dR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],hO-5,hN+10,hO+5,hN+10,hO,hN+5)if df then hF="HDG"end;dR[#dR+1]=d([["
                    <g class="pdim txt txtmid">
                    <text x="%d" y="%d">%d deg</text>
                    <text x="%d" y="%d">%s</text>
                    </g>
                    ]],hO,hN+25,hL,hO,hN+35,hF)end;local function hQ(dR,hR,hE,centerX,centerY,df,hS,c9)local hG=circleRad;local hT=c(hG*3/5)if hG>0 then local hU=c(hR)local len=0;local hP=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*hE,centerX,centerY)if not an then hP=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dR[#dR+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],hG-1,centerX,centerY)dR[#dR+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(hU-30-hU%5+0.5),c(hU+30+hU%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ch=centerY+-i*5+hR*5;if len==30 then hP=d([[%s M %d %f h %d]],hP,centerX-hT-len,ch,len)if an then dR[#dR+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hE,centerX,centerY,centerX-hT+10,ch,i)dR[#dR+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*hE,centerX,centerY,centerX+hT-10,ch,i)if i==0 or i==180 or i==-180 then dR[#dR+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hE,centerX,centerY,centerX-hT+20,ch,hT*2-40)end else dR[#dR+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-hT+10,ch,i)dR[#dR+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+hT-10,ch,i)end;hP=d([[%s M %d %f h %d]],hP,centerX+hT,ch,len)else hP=d([[%s M %d %f h %d]],hP,centerX-hT-len,ch,len)hP=d([[%s M %d %f h %d]],hP,centerX+hT,ch,len)end end;dR[#dR+1]=hP..[["/>]]local hV="PITCH"if not df then hV="REL PITCH"end;if hR>90 and not an then hR=90-(hR-90)elseif hR<-90 and not an then hR=-90-(hR+90)end;if hG>200 then if an then if c9>J then dR[#dR+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-15,"Yaw",centerX,centerY+20,hS)end;dR[#dR+1]=d([[<g transform="rotate(%f,%d,%d)">]],-hE,centerX,centerY)else dR[#dR+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dR[#dR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-hT+25,centerY-5,centerX-hT+20,centerY,centerX-hT+25,centerY+5,centerX-hT+50,centerY+4,hU)dR[#dR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+hT-25,centerY-5,centerX+hT-20,centerY,centerX+hT-25,centerY+5,centerX+hT-30,centerY+4,hU)dR[#dR+1]="</g>"end;local hW=c(hG/3)dR[#dR+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-hW,centerY,hG-hW)if not an and df then dR[#dR+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*hE,centerX,centerY,centerX-hT+10,centerY,hT*2-20)end;dR[#dR+1]="</g>"if hG<200 then if an and c9>J then dR[#dR+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-hG,hV,centerX,centerY-hG+10,hU,centerX,centerY-15,"Yaw",centerX,centerY+20,hS)else dR[#dR+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-hG,hV,centerX,centerY-hG+15,hU)end end end end;local function hX(dR,cx,df)local hY=altMeterX;local hZ=altMeterY;local h_=78;local i0=19;local i1=AboveGroundLevel()if i1~=-1 then table.insert(dR,d([[
                    <g class="pdim altsm txtend">
                    <text x="%d" y="%d">AGL: %.1fm</text>
                    </g>
                    ]],hY+h_,hZ+i0+20,i1))end;if df and(cx<200000 and not an or cx and an)then table.insert(dR,d([[
                        <g class="pdim">                        
                            <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                            <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                            <g clip-path="url(#alt)">]],hY-1,hZ-4,h_+2,i0+6,hY+1,hZ-1,h_-4,i0))local dh=0;local i2=1;local i3=0;local i4=cx<0;local i5=9;if i4 then i5=0 end;local cx=math.abs(cx)while dh<6 do local i6=11;local i7=16;local i8=9;local i9=14;local hA="altsm"if dh>2 then i7=i7+3;i6=i6+2;i9=i9+2;i8=i8-6;hA="altbig"end;if i4 then hA=hA.." red"end;local ia=cx/i2%10;local ib=c(ia)local ic=c((ib+1)%10)local id=i3;if dh==0 then id=ia-ib;if i4 then id=1-id end end;if i4 and(dh==0 or i3~=0)then local ie=ic;ic=ib;ib=ie end;local ig=i7*(id-1)local ih=ig+i7;local cg=hY+i8+(6-dh)*i6;local ch=hZ+i9;table.insert(dR,d([[
                            <g class="%s">
                            <text x="%d" y="%f">%d</text>
                            <text x="%d" y="%f">%d</text>
                            </g>
                        ]],hA,cg,ch+ig,ic,cg,ch+ih,ib))dh=dh+1;i2=i2*10;if ib==i5 then i3=id else i3=0 end end;table.insert(dR,[[</g></g>]])end end;local function ii(dR,c8,c9,centerX,centerY)if c9>5 and not an or c9>J then local hG=circleRad;local ij=20;local ik=20;local il=vec3(c8)local im=getRelativePitch(il)local io=getRelativeYaw(il)local ip=14;local iq=ip/2;local ir=-io/ik*hG;local is=im/ij*hG;local cg=centerX+ir;local ch=centerY+is;local ad=math.sqrt(ir^2+is^2)local it=[[<circle
                    cx="]]..cg..[["
                    cy="]]..ch..[["
                    r="]]..iq/ip..[["
                    style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                 <circle
                    cx="]]..cg..[["
                    cy="]]..ch..[["
                    r="]]..iq..[["
                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                 <path
                    d="M ]]..cg-ip..[[,]]..ch..[[ h ]]..iq..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..cg+iq..[[,]]..ch..[[ h ]]..iq..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..cg..[[,]]..ch-ip..[[ v ]]..iq..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />]]if ad<hG then dR[#dR+1]=it else local en=math.atan(is,ir)local iu=4;local iv=centerX+hG*math.cos(en)local iw=centerY+hG*math.sin(en)dR[#dR+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',en*180/math.pi,iv,iw,iv-iu,iw-iu/2,iu*2,iu,iv+iu,iw-iu,iu,iu,-iu,iu)end;if not an then im=getRelativePitch(-il)io=getRelativeYaw(-il)ir=-io/ik*hG;is=im/ij*hG;cg=centerX+ir;ch=centerY+is;ad=math.sqrt(ir^2+is^2)if ad<hG then local ix=[[<circle
                            cx="]]..cg..[["
                            cy="]]..ch..[["
                            r="]]..iq..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                         <path
                            d="M ]]..cg..[[,]]..ch-ip..[[ v ]]..iq..[["
                            style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                         <use
                            xlink:href="#l"
                            transform="rotate(120,]]..cg..[[,]]..ch..[[)" />
                         <use
                            xlink:href="#l"
                            transform="rotate(-120,]]..cg..[[,]]..ch..[[)" />
                         <path
                            d="M ]]..cg-iq..[[,]]..ch..[[ h ]]..ip..[["
                            style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                            transform="rotate(-45,]]..cg..[[,]]..ch..[[)" id="c"/>
                        <use
                            xlink:href="#c"
                            transform="rotate(-90,]]..cg..[[,]]..ch..[[)"/>]]dR[#dR+1]=ix end end end end;local function iy(dR,hd,iz,iA)iz=math.floor(iz+0.5)local hs=throtPosY+10;local ht=throtPosY+20;if n()==1 and not RemoteHud then hs=55;ht=65 end;local iB="CRUISE"local unit="km/h"local c0=iA;if hd=="TRAVEL"or hd=="AUTOPILOT"then iB="THROT"unit="%"c0=iz;local iC="dim"if iz<0 then iC="red"end;dR[#dR+1]=d([[<g class="%s">
                        <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                        <g transform="translate(0 %.0f)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g>]],iC,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(iz),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dR[#dR+1]=d([[
                    <g class="pbright txtstart">
                            <text x="%s" y="%s">%s</text>
                            <text x="%s" y="%s">%.0f %s</text>
                    </g>
                </g>]],throtPosX+10,hs,iB,throtPosX+10,ht,c0,unit)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then iz=math.floor(E*100+0.5)local iC="red"if iz<0 then iC="red"end;dR[#dR+1]=d([[<g class="%s">
                        <g transform="translate(0 %d)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g></g>]],iC,1-math.abs(iz),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dR[#dR+1]=d([[
                            <g class="pbright txtstart">
                                    <text x="%s" y="%s">%s</text>
                                    <text x="%s" y="%s">%d %s</text>
                            </g>]],throtPosX+10,hs+40,"LIMIT",throtPosX+10,ht+40,iz,"%")end;if an and AtmoSpeedAssist or Reentry then dR[#dR+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,hs-40,"LIMIT: ",bo.." km/h")elseif not an and Autopilot then dR[#dR+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,hs-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;local function iD(dR,eS)local iE=throtPosY-10;local iF=throtPosX+10;dR[#dR+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then iE=75 end;dR[#dR+1]=d([[
                    <g class="pbright txtstart">
                        <text class="txtbig" x="%d" y="%d">%d km/h</text>
                    </g>
                </g>]],iF,iE,c(eS))end;local function iG(dR)dR[#dR+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],c3(1900),c4(1070),VERSION_NUMBER)dR[#dR+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dR[#dR+1]=d([[
                        <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],c3(960),c4(550))dR[#dR+1]=d([[
                        <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],c3(960),c4(600))dR[#dR+1]=d([[
                        <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],c3(960),c4(650))end;local iH=c3(960)local iI=c4(860)local iJ=c4(880)local iK=c4(900)local iL=c4(960)local iM=c4(200)local iN=c4(150)local iO=c4(960)if n()==1 and not RemoteHud then iI=c4(135)iJ=c4(155)iK=c4(175)iM=c4(115)iN=c4(95)end;if BrakeIsOn then dR[#dR+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],iH,iI)elseif C>0 then dR[#dR+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],iH,iI,C)end;if an and bj and c_()==-1 then dR[#dR+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],iH,iM+50)end;if as then dR[#dR+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],iH,iO)end;if GearExtended then if N then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],iH,iJ)else dR[#dR+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],iH,iJ)end;local ed,cN=cK(Nav:getTargetGroundAltitude())dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],iH,iK,ed..cN)end;if a0 then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],iH,iL+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],iH,iM+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else dR[#dR+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],iH,iM+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],iH,iM+20,AutopilotStatus)elseif LockPitch~=nil then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],iH,iM+20,c(LockPitch))elseif V then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],iH,iM+20)elseif Reentry then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],iH,iM+20)end;local iP,gc,gd=b8:getPlanetarySystem(0):castIntersections(bL,bI:normalize(),function(g0)if g0.noAtmosphericDensityAltitude>0 then return g0.radius+g0.noAtmosphericDensityAltitude else return g0.radius+g0.surfaceMaxAltitude*1.5 end end)local iQ=gc;if gd~=nil and gc~=nil then iQ=math.min(gd,gc)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local ed,cN=cK(HoldAltitude,2)dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],iH,iM,ed..cN)if BrakeIsOn then dR[#dR+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],iH,iM+50)end else local ed,cN=cK(HoldAltitude,2)dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],iH,iM,ed..cN)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ao>0.1 then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],iH,iM)elseif ao<0.09 and ao>0.05 then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],iH,iM)elseif ao<0.05 then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],iH,iM)end end;if IntoOrbit then if bq~=nil then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],iH,iM,bq)end end;if BrakeLanding then if StrongBrakes then dR[#dR+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],iH,iM)else dR[#dR+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],iH,iM)end end;if ProgradeIsOn then dR[#dR+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],iH,iM)end;if RetrogradeIsOn then dR[#dR+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],iH,iM)end;if TurnBurn then dR[#dR+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],iH,iN)elseif iQ~=nil and ao==0 then local ed,cN=cK(iQ)local travelTime=b9.computeTravelTime(bJ,0,iQ)local iR="Collision"if iP.noAtmosphericDensityAltitude>0 then iR="Atmosphere"end;dR[#dR+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],iH,iN,iP.name,iR,FormatTimeString(travelTime),ed..cN)end;if VectorToTarget and not IntoOrbit then dR[#dR+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],iH,iM+30,VectorStatus)end;dR[#dR+1]="</g>"return dR end;local function iS(dR)if orbit~=nil and ao<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local iT=OrbitMapX;local iU=OrbitMapY;local iV=OrbitMapSize;local iW=4;iU=iU+iW;local iX=15;local cg=iT+iV+iT/2+iW;local ch=iU+iV/2+5+iW;local iY,iZ,i_,j0;iY=iV/4;j0=0;dR[#dR+1]=[[<g class="pbright txtorb txtmid">]]dR[#dR+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',iV+iT*2,iV+iU,iW,iW)if orbit.periapsis~=nil and orbit.apoapsis~=nil then i_=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(iY*2)iZ=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/i_*(1-orbit.eccentricity)j0=iY-orbit.periapsis.altitude/i_-planet.radius/i_;local j1=""if orbit.periapsis.altitude<=0 then j1='redout'end;dR[#dR+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],j1,iT+iV/2+j0+iW,iU+iV/2+iW,iY,iZ)dR[#dR+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',iT+iV/2+iW,iU+iV/2+iW,planet.radius/i_)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dR[#dR+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cg-35,ch-5,iT+iV/2+iY+j0,ch-5)dR[#dR+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],cg,ch)ch=ch+iX;local ed,cN=cK(orbit.apoapsis.altitude)dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,ed..cN)ch=ch+iX;dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,FormatTimeString(orbit.timeToApoapsis))ch=ch+iX;dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,getSpeedDisplayString(orbit.apoapsis.speed))end;ch=iU+iV/2+5+iW;cg=iT-iT/2+10+iW;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dR[#dR+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],cg+35,ch-5,iT+iV/2-iY+j0,ch-5)dR[#dR+1]=d([[<text x="%f" y="%f">Periapsis</text>]],cg,ch)ch=ch+iX;local ed,cN=cK(orbit.periapsis.altitude)dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,ed..cN)ch=ch+iX;dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,FormatTimeString(orbit.timeToPeriapsis))ch=ch+iX;dR[#dR+1]=d([[<text x="%f" y="%f">%s</text>]],cg,ch,getSpeedDisplayString(orbit.periapsis.speed))end;dR[#dR+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],iT+iV/2+iW,20+iW,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local j2=orbit.timeToApoapsis/orbit.period*2*math.pi;local j3=iY*math.cos(j2)local j4=iZ*math.sin(j2)dR[#dR+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',iT+iV/2+j3+j0+iW,iU+iV/2+j4+iW)end;dR[#dR+1]=[[</g>]]return dR else return dR end end;function h9.HUDPrologue(dR)if not z then w=PvPR;y=PvPG;x=PvPB else w=SafeR;y=SafeG;x=SafeB end;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local j5=au;local j6=av;local j7=au;local j8=av;if ha()and not brightHud then j5=[[rgb(]]..c(w*0.4+0.5)..","..c(y*0.4+0.5)..","..c(x*0.3+0.5)..[[)]]j6=[[rgb(]]..c(w*0.3+0.5)..","..c(y*0.3+0.5)..","..c(x*0.2+0.5)..[[)]]end;dR[#dR+1]=d([[
                    <head>
                        <style>
                            body {margin: 0}
                            svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                            .txt {font-size:10px;font-weight:bold;}
                            .txttick {font-size:12px;font-weight:bold;}
                            .txtbig {font-size:14px;font-weight:bold;}
                            .altsm {font-size:16px;font-weight:normal;}
                            .altbig {font-size:21px;font-weight:normal;}
                            .line {stroke-width:2px;fill:none}
                            .linethick {stroke-width:3px;fill:none}
                            .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                            .warn {fill:orange;font-size:24px}
                            .crit {fill:darkred;font-size:28px}
                            .bright {fill:%s;stroke:%s}
                            .pbright {fill:%s;stroke:%s}
                            .dim {fill:%s;stroke:%s}
                            .pdim {fill:%s;stroke:%s}
                            .red {fill:red;stroke:red}
                            .redout {fill:none;stroke:red}
                            .op30 {opacity:0.3}
                            .op10 {opacity:0.1}
                            .txtstart {text-anchor:start}
                            .txtend {text-anchor:end}
                            .txtmid {text-anchor:middle}
                            .txtvspd {font-family:sans-serif;font-weight:normal}
                            .txtvspdval {font-size:20px}
                            .txtfuel {font-size:11px;font-weight:bold}
                            .txtorb {font-size:12px}
                            .txtorbbig {font-size:18px}
                            .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                            .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                            .cursor {stroke:white}
                        </style>
                    </head>
                    <body>
                        <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                        ]],j5,j5,j7,j7,j6,j6,j8,j8,ResolutionX,ResolutionY)return dR end;function h9.UpdateHud(dR)local cx=ap;local c8=core.getVelocity()local c9=vec3(c8):len()local j9=getRoll(bK,bG,bH)local ja=j9/180*math.pi;local jb=math.cos(ja)local jc=math.sin(ja)local d6=getPitch(bK,bG,bH*jb+bF*jc)local hE=j9;local hR=d6;local iz=c(unit.getThrottle())local eS=c9*3.6;local iA=unit.getAxisCommandValue(0)local jd=c3(1770)local je=c4(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then iA=B;iz=B*100 end;local hd=hb()local hF="ROLL"local df=unit.getClosestPlanetInfluence()>0;if iz==nil then iz=0 end;if not df then if c9>5 then d6=getRelativePitch(c8)j9=getRelativeYaw(c8)else d6=0;j9=0 end;hF="YAW"end;if A>50000 and not an then local jf;if A>200000 then jf=s(A/200000,2).." su"else jf=s(A/1000,1).." km"end;dR[#dR+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],jd,je,jf)end;dR[#dR+1]=af;dR[#dR+1]=az;dR[#dR+1]=ae;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then he(dR,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)he(dR,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)he(dR,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;hB(dR,cx)if n()==0 or RemoteHud then if not ha()or brightHud then if df then hD(dR,centerX,centerY,hE,hF,df)hQ(dR,hR,hE,centerX,centerY,df,c(getRelativeYaw(c8)),c9)else hD(dR,centerX,centerY,j9,hF,df)hQ(dR,d6,j9,centerX,centerY,df,c(j9),c9)end;hX(dR,cx,df)ii(dR,c8,c9,centerX,centerY)end end;iy(dR,hd,iz,iA)iD(dR,eS)iG(dR)iS(dR)if screen_2 then local cB=bL;local cg=960+cB.x/b4;local ch=450+cB.y/b5;screen_2.moveContent(b6,(cg-80)/19.2,(ch-80)/10.8)end;return dR end;function h9.HUDEpilogue(dR)dR[#dR+1]="</svg>"return dR end;function h9.DrawOdometer(dR,a6,TotalDistanceTravelled,a7,jg)local jh=c3(1240)local ji=c4(55)local jj=ji+10;local c6=core.g()local jk=0;local jl=0;local jm=0;local hd=hb()c5(c6)if an then jm=LastMaxBrakeInAtmo else jm=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=m()if not ShowOdometer then return end;local jn=vec3(core.getWorldAcceleration()):len()/9.80665;if c6>0.1 then jl=aM*c6;jk=maxThrust/c6 end;dR[#dR+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then jh=c3(1120)ji=c4(55)jj=ji+10 elseif an then local jo=c3(770)dR[#dR+1]=d([[
                        <text x="%d" y="%d">ATMOSPHERE</text>
                        <text x="%d" y="%d">%.2f</text>
                    ]],jo,ji,jo,jj,ao)end;dR[#dR+1]=d([[
                    <g class="pbright txtend">
                    </g>
                    <text x="%d" y="%d">GRAVITY</text>
                    <text x="%d" y="%d">%.2f g</text>
                    <text x="%d" y="%d">ACCEL</text>
                    <text x="%d" y="%d">%.2f g</text>
                    ]],jh,ji,jh,jj,c6/9.80665,jh,ji+20,jh,jj+20,jn)dR[#dR+1]=d([[
                    <g class="pbright txt">
                    <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],c3(660),c3(700),c4(35),c3(960),c4(55),c3(1240),c4(35),c3(1280))if n()==0 or RemoteHud then dR[#dR+1]=d([[
                        <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                        <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                        <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                        <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                        <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                        <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],c3(700),c4(20),a6,c3(700),c4(30),TotalDistanceTravelled/1000,c3(830),c4(20),FormatTimeString(a7),c3(830),c4(30),FormatTimeString(TotalFlightTime),c3(970),c4(20),aM/1000,c3(1240),c4(10),jm/1000,c3(1240),c4(30),maxThrust/1000,c3(960),c4(180),hd)if c6>0.1 then dR[#dR+1]=d([[
                                <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                        ]],c3(970),c4(30),jk/1000,c3(1240),c4(20),jl/1000)else dR[#dR+1]=d([[
                            <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                            <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                        ]],c3(970),c4(30),c3(1240),c4(20))end else dR[#dR+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],c3(960),c4(33),hd)end;dR[#dR+1]="</g>"return dR end;function h9.DrawWarnings(dR)return iG(dR)end;function h9.DisplayOrbitScreen(dR)return iS(dR)end;function h9.DisplayMessage(dR,ed)if ed~="empty"then dR[#dR+1]=[[<text class="msg" x="50%%" y="310" >]]for jp in string.gmatch(ed,"([^\n]+)")do dR[#dR+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],jp)end;dR[#dR+1]=[[</text>]]end;if ac~=0 then unit.setTimer("msgTick",ac)ac=0 end end;function h9.DrawDeadZone(dR)dR[#dR+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return h9 end;function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()bc=h8()AddLocationsToAtlas()UpdateAtlasLocationsList()d8()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ao>0 or ao==0 and ap<10000)then for _,bP in pairs(door)do bP.toggle()end end;if switch then for _,bP in pairs(switch)do bP.toggle()end end;if forcefield and(ao>0 or ao==0 and ap<10000)then for _,bP in pairs(forcefield)do bP.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(jq)if jq=="tenthSecond"then if ao>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then B=1;Nav.control.cancelCurrentControlMasterMode()F=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then cU()end;if AutopilotTargetName~=nil then local jr=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if jr and not Autopilot then ad=(bL-CustomTarget.position):len()else ad=(AutopilotTargetCoords-bL):len()end;if not TurnBurn then a1,a2=dO(bJ)a3,a4=dO(MaxGameVelocity)else a1,a2=dP(bJ)a3,a4=dP(MaxGameVelocity)end;local ed,cN=cK(ad)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..ed..'", "unit":"'..cN..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')ed,cN=cK(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..ed..'", "unit":"'..cN..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a2)..'", "unit":""}')ed,cN=cK(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..ed..'", "unit":"'..cN..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')ed,cN=cK(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",ed)..'", "unit":"'..cN..'"}')if ao>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else cV()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif jq=="oneSecond"then al=false;c5(nil,true)updateDistance()updateRadar()updateWeapons()local dR={}dR=bc.DrawOdometer(dR,a6,TotalDistanceTravelled,a7)if ShouldCheckDamage then CheckDamage(dR)end;af=table.concat(dR,"")collectgarbage("collect")elseif jq=="fiveSecond"then am=dbHud_1.getStringValue("SPBAutopilotTargetName")if am~=nil and am~=""and am~="SatNavNotChanged"then local bQ=json.decode(dbHud_1.getStringValue("SavedLocations"))if bQ~=nil then _G["SavedLocations"]=bQ;local dh=-1;local cI;for bO,bP in pairs(SavedLocations)do if bP.name and bP.name=="SatNav Location"then dh=bO;break end end;if dh~=-1 then cI=SavedLocations[dh]dh=-1;for bO,bP in pairs(b2[0])do if bP.name and bP.name=="SatNav Location"then dh=bO;break end end;if dh>-1 then b2[0][dh]=cI end;UpdateAtlasLocationsList()X=cI.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==am then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)d8()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif jq=="msgTick"then local dR={}bc.DisplayMessage(dR,"empty")X="empty"unit.stopTimer("msgTick")ac=3 elseif jq=="animateTick"then be=true;bd=false;aa=0;ab=0;unit.stopTimer("animateTick")elseif jq=="hudTick"then local dR={}bc.HUDPrologue(dR)if showHud then bc.UpdateHud(dR)else bc.DisplayOrbitScreen(dR)bc.DrawWarnings(dR)end;bc.HUDEpilogue(dR)dR[#dR+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if X~="empty"then bc.DisplayMessage(dR,X)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bc.DrawDeadZone(dR)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(dR)if screen_1.getMouseState()==1 then CheckButtons()end;dR[#dR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)elseif system.isViewLocked()==0 then if n()==1 and W then SetButtonContains()DrawButtons(dR)if not bd and not be then local js=table.concat(dR,"")dR={}dR[#dR+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)dR[#dR+1]=b3;dR[#dR+1]=js;dR[#dR+1]="</body>"bd=true;dR[#dR+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dR,"")system.setScreen(content)elseif be then local js=table.concat(dR,"")dR={}dR[#dR+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)dR[#dR+1]=b3;dR[#dR+1]=js;dR[#dR+1]="</body>"end;if not bd then dR[#dR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end else CheckButtons()end else if not W and n()==0 then CheckButtons()if ad>DeadZone then if DisplayDeadZone then DrawCursorLine(dR)end end else SetButtonContains()DrawButtons(dR)end;dR[#dR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end;dR[#dR+1]=[[</svg></body>]]content=table.concat(dR,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif jq=="apTick"then an=h()>0;ao=h()bE=r()local jt=bE-bk;bk=bE;local j9=getRoll(bK,bG,bH)local ja=j9/180*math.pi;local jb=math.cos(ja)local jc=math.sin(ja)local d6=getPitch(bK,bG,bH)local ju=getPitch(bK,bG,bH*jb+bF*jc)local jv=-math.deg(dm(bF,bI,bG))local jw=math.deg(dm(bH,bI,bG))bj=an and jv<-YawStallAngle or jv>YawStallAngle or jw<-PitchStallAngle or jw>PitchStallAngle;bh=system.getMouseDeltaX()bi=system.getMouseDeltaY()if InvertMouse and not W then bi=-bi end;Q=0;U=0;P=0;sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bI)ap=core.getAltitude()if ap==0 then ap=(bL-planet.center):len()-planet.radius end;ak=c_()local c6=planet:getGravity(core.getConstructWorldPos()):len()*m()bl=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not an then z,A,_,_=dr(bL)else z=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then aa=screen_1.getMouseX()*ResolutionX;ab=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if n()==1 and W then if not bd then aa=aa+bh;ab=ab+bi end else aa=0;ab=0 end else aa=aa+bh;ab=ab+bi;ad=math.sqrt(aa*aa+ab*ab)if not W and n()==0 then if userControlScheme=="virtual joystick"then if aa>0 and aa>DeadZone then Q=Q-(aa-DeadZone)*MouseXSensitivity elseif aa<0 and aa<DeadZone*-1 then Q=Q-(aa+DeadZone)*MouseXSensitivity else Q=0 end;if ab>0 and ab>DeadZone then P=P-(ab-DeadZone)*MouseYSensitivity elseif ab<0 and ab<DeadZone*-1 then P=P-(ab+DeadZone)*MouseYSensitivity else P=0 end elseif userControlScheme=="mouse"then aa=0;ab=0;P=(-utils.smoothstep(bi,-100,100)+0.5)*2*L;Q=(-utils.smoothstep(bh,-100,100)+0.5)*2*M else aa=0;ab=0 end end end;local jx=bJ>8334;if bJ>SpaceSpeedLimit/3.6 and not an and not Autopilot and not jx then X="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end;if not jx and LastIsWarping then if not BrakeIsOn then dA()end;if Autopilot then dd()end end;LastIsWarping=jx;if an and ao>0.09 then if bJ>bo/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bJ<bo/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then T=1 else T=0 end;if ProgradeIsOn then if ah then BrakeIsOn=false;local jy=false;if CustomTarget~=nil then jy=dE(CustomTarget.position-bL,0.01)else jy=dE(vec3(bI),0.01)end;bf=true;if jy and(math.abs(j9)<2 or math.abs(ju)>85)and bJ>=bo/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dL()elseif an and AtmoSpeedAssist then b_(1)else c2(math.floor(bo))B=0 end elseif bJ>J then dE(vec3(bI),0.01)end end;if RetrogradeIsOn then if an then RetrogradeIsOn=false elseif bJ>J then dE(-vec3(bI))end end;if not ProgradeIsOn and ah then if ao==0 then K=true;dL()ah=false;aj=true else ah=false;dd()end end;local dc=bK*-1;local hC=bI.x*dc.x+bI.y*dc.y+bI.z*dc.z;if aj and CustomTarget~=nil and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bJ*3.6>bo-100 and math.abs(hC)<20 and ao>=0.1 and(CustomTarget.position-bL):len()>2000+ap then dd()aj=false end;if VertTakeOff then bf=true;if hC<-30 then X="Unable to achieve lift. Safety Landing."a9=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if ap<antigrav.getBaseAltitude()-100 then bp=0;a9=15;BrakeIsOn=false elseif hC>0 then BrakeIsOn=true;a9=0 elseif hC<-30 then BrakeIsOn=true;a9=15 elseif ap>=antigrav.getBaseAltitude()then BrakeIsOn=true;a9=0;VertTakeOff=false;X="Takeoff complete. Singularity engaged"end else if ao>0.08 then bp=0;BrakeIsOn=false;a9=20 elseif ao<0.08 and ao>0 then BrakeIsOn=false;if bB then bp=0;a9=20 else a9=0;bp=36;c2(3500)end else bf=autoRollPreference;IntoOrbit=true;bz=false;CancelIntoOrbit=false;bt=false;br=nil;bs=nil;if by==nil then by=planet end;VertTakeOff=false end end;if bp~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jz=utils.clamp(bp-ju,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jz)local jA=utils.clamp(vTpitchPID:get(),-1,1)P=jA end end;if IntoOrbit then if by==nil then if VectorToTarget then by=a5 else by=planet end end;if not bw then if by.hasAtmosphere then bx=math.floor(by.radius*(TargetOrbitRadius-1)+by.noAtmosphericDensityAltitude)else bx=math.floor(by.radius*(TargetOrbitRadius-1)+by.surfaceMaxAltitude)end;bw=true end;if AltitudeHold or VectorToTarget then if not ai then bx=s(HoldAltitude,1)bt=true;AltitudeHold=false end;if VectorToTarget then bv.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jB,jC=cK(bx,2)local jD=jB..jC;local jE,jF=bb(by):escapeAndOrbitalSpeed((bL-by.center):len()-by.radius)local jG=j9;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ap>bx*0.9 and ap<bx*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bx*0.99 and orbit.apoapsis.altitude>=bx*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bz then if bz then BrakeIsOn=false;B=0;b_(0)bz=true;br=0;if bv.VectorToTarget then local dI=CustomTarget.position-bL;local a1,_=b9.computeDistanceAndTime(bJ,bo/3.6,m(),0,0,LastMaxBrake)if bI:normalize():dot(dI:normalize())>0.5 and dI:len()>15000+a1+ap then bq="Orbiting to Target"else X="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;K=true;aj=true;dL()bv.VectorToTarget=false end end;if not bv.VectorToTarget then bq=nil;bu=false;bw=false;by=nil;bf=autoRollPreference;if not aj then X="Orbit established"end;bv.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bt=false;br=nil;bs=nil;by=nil;bz=false;bD=0 end else bD=bD+1;if bD>=2 then bz=true end end else bq="Adjusting Orbit - OrbitHeight: "..jD;bu=true;c2(jF*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jH=hC;local jI=ap-bx;local jJ=math.abs(jI)if hC<10 and math.abs(ju)<10 and jJ<100 then jH=hC*2 end;if jH<10 and math.abs(ju)<10 and jJ<100 then jH=jH*2 end;if jH<5 and math.abs(ju)<5 and jJ<100 then jH=jH*4 end;VSpdPID:inject(jH)br=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jI)br=utils.clamp(br-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jK=2.75;local jL=math.abs(q(jE*jK))local jM=jL%50;if jM>0 then jL=jL-jM+50 end;BrakeIsOn=false;if not bt then local jN=false;local jO=false;if ap<bx then bq="Aligning to orbital path - OrbitHeight: "..jD else bq="Aligning to orbital point - OrbitHeight: "..jD end;br=0;bs=0;if ju<=br+1 and ju>=br-1 then jN=true else jN=false end;if jG<=bs+1 and jG>=bs-1 then jO=true else jO=false end;if jN and jO then br=nil;bs=nil;bt=true end else if ap<bx*0.8 then bq="Escaping planet gravity - OrbitHeight: "..jD;br=utils.map(hC,200,0,-15,80)elseif ap>=bx*0.8 and ap<bx*1.15 then bq="Approaching orbital corridor - OrbitHeight: "..jD;jL=jL*0.75;br=utils.map(hC,100,-100,-15,65)elseif ap>=bx*1.15 and ap<bx*1.5 then bq="Approaching orbital corridor - OrbitHeight: "..jD;jL=jL*0.75;if hC<0 or bu then br=utils.map(ap,bx*1.5,bx*1.01,-30,0)else br=utils.map(ap,bx*0.99,bx*1.5,0,30)end elseif ap>bx*1.5 then bq="Reentering orbital corridor - OrbitHeight: "..jD;br=utils.map(hC,100,-100,-65,0)jL=jL*0.75 end end;c2(math.floor(jL))end;if br~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jP=br-ju;OrbitPitchPID:inject(jP)local jQ=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)P=jQ end;if bs~=nil then if ju<85 then local jR=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jR*0.01,0,jR*0.1)end;local jS=bs-jG;OrbitRollPID:inject(jS)local jT=utils.clamp(OrbitRollPID:get(),-0.5,0.5)U=jT end end elseif CancelIntoOrbit then bw=false;by=nil;b_(0)CancelIntoOrbit=false end;if Autopilot and ao==0 and not ah then local jU,jV=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jW=(CustomTarget.position-a5.center):normalize()local jX=jW:project_on_plane((a5.center-bL):normalize()):normalize()local jY=a5.center+jX*(a5.radius+AutopilotTargetOrbit)local jZ=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))if(bL-jY):len()<(bL-jZ):len()then jU=jY;AutopilotTargetCoords=jU else jU=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))AutopilotTargetCoords=jU end;local de=cs(a5,AutopilotTargetCoords)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)jV=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jV=true;TargetSet=true;AutopilotRealigned=true;jU=CustomTarget.position+(bL-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jW=(bL+bI*100000-a5.center):normalize()local jX=jW:project_on_plane((a5.center-bL):normalize()):normalize()if jX:len()<1 then jW=(bL+bG*100000-a5.center):normalize()jX=jW:project_on_plane((a5.center-bL):normalize()):normalize()end;jU=a5.center+jX*(a5.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jU;TargetSet=true;jV=true;AutopilotRealigned=true;local de=cs(a5,AutopilotTargetCoords)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)end end;AutopilotDistance=(vec3(jU)-bL):len()local iP,gc,gd=b8:getPlanetarySystem(0):castIntersections(bL,bI:normalize(),function(g0)if g0.noAtmosphericDensityAltitude>0 then return g0.radius+g0.noAtmosphericDensityAltitude else return g0.radius+g0.surfaceMaxAltitude*1.5 end end)local iQ=gc;if gd~=nil and gc~=nil then iQ=math.min(gd,gc)end;if iQ~=nil and iQ<AutopilotDistance and iP.name==a5.name then AutopilotDistance=iQ end;local jy=true;local j_=(a5.center-(bL+vec3(bI):normalize()*AutopilotDistance)):len()-a5.radius;local ed,cN=cK(j_)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..ed..'", "unit":"'..cN..'"}')local a1,a2;if not TurnBurn then a1,a2=dO(bJ)else a1,a2=dP(bJ)end;if bJ>300 and AutopilotAccelerating then local dI=vec3(jU)-bL;local k0=utils.clamp(math.deg(dm(bF,bI:normalize(),dI:normalize()))*bJ/500,-90,90)local k1=utils.clamp(math.deg(dm(bH,bI:normalize(),dI:normalize()))*bJ/500,-90,90)if math.abs(k0)<20 and math.abs(k1)<20 then k0=k0*2;k1=k1*2 end;if math.abs(k0)<2 and math.abs(k1)<2 then k0=k0*2;k1=k1*2 end;local jv=-math.deg(dm(bF,bG,bI:normalize()))local jw=-math.deg(dm(bH,bG,bI:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(k1-jw)local k2=utils.clamp(apPitchPID:get(),-1,1)P=P+k2;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(k0-jv)local k3=utils.clamp(apYawPID:get(),-1,1)Q=Q+k3;jV=true;if math.abs(k0)>2 or math.abs(k1)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if j_<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(j_)end end;if not AutopilotCruising and not AutopilotBraking and not jV then jy=dE((jU-bL):normalize())elseif TurnBurn then jy=dE(-vec3(bI):normalize())end;if AutopilotAccelerating then if not I then BrakeIsOn=false;b_(AutopilotInterplanetaryThrottle)B=s(AutopilotInterplanetaryThrottle,2)I=true end;local et=unit.getThrottle()if AtmoSpeedAssist then et=B end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or et==0 and I then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;b_(0)B=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;b_(0)B=0;I=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;T=1 end;if TurnBurn then b_(100,true)B=1 end;local _,jF=bb(a5):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)local dI;if CustomTarget~=nil then dI=CustomTarget.position-bL end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bJ<50 then X="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bJ<=jF and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"b_(0)B=0;I=false;ProgradeIsOn=true;ah=true;local de=cs(a5,AutopilotTargetCoords)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jF=bb(a5):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)if bJ<=jF then if CustomTarget~=nil then if bI:normalize():dot(dI:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local de=cs(a5,CustomTarget.position)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)WaypointSet=true end else X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"b_(0)B=0;I=false;ProgradeIsOn=true;ah=true;BrakeIsOn=false;local de=cs(a5,CustomTarget.position)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X="Autopilot completed, orbit established"T=0;B=0;I=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ah=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local et=unit.getThrottle()if AtmoSpeedAssist then et=B end;if et>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jy then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ah then AutopilotTargetCoords=vec3(a5.center)+(AutopilotTargetOrbit+a5.radius)*bH;AutopilotShipUp=bF;AutopilotShipRight=bH end;AutopilotRealigned=true elseif jy then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not I then b_(AutopilotInterplanetaryThrottle,true)B=s(AutopilotInterplanetaryThrottle,2)I=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ao>0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T=0;b_(0)B=0;I=false;ProgradeIsOn=true;ah=true;local de=cs(a5,CustomTarget.position)de="::pos{"..de.systemId..","..de.bodyId..","..de.latitude..","..de.longitude..","..de.altitude.."}"system.setWaypoint(de)end;if V then bf=true;local k1=0;local cB=bL+vec3(unit.getMasterPlayerRelativePosition())local k4=cB-bL;local k5=vec3(k4):project_on(bG):len()local k6=vec3(k4):project_on(bH):len()local ad=math.sqrt(k5*k5+k6*k6)dE(k4:normalize())local k7=40;local k8=ad<k7;local k9=100;local eX=utils.clamp((ad-k7)/2,10,k9)P=0;local jy=math.abs(Q)<0.1;if jy and bJ<eX and not k8 then BrakeIsOn=false;k1=-20 else BrakeIsOn=true;k1=0 end;local ka=0;if math.abs(k1-d6)>ka then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(k1-d6)local k2=pitchPID:get()P=k2 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local df=unit.getClosestPlanetInfluence()>0;local kb=HoldAltitude-ap;local kc=500+bJ;local kd=1;if AutoTakeoff then kd=utils.clamp(bJ/100,0.1,1)end;local k1=(utils.smoothstep(kb,-kc,kc)-0.5)*2*MaxPitch*kd;if not Reentry and not ah and not VectorToTarget and bG:dot(bI:normalize())<0.99 then k1=(utils.smoothstep(kb,-kc*utils.clamp(20-19*ao*10,1,20),kc*utils.clamp(20-19*ao*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ao*10,1,2)*kd end;if not AltitudeHold then k1=0 end;if LockPitch~=nil then if df and not IntoOrbit then k1=LockPitch else LockPitch=nil end end;bf=true;local ke=P;if Reentry then local ReentrySpeed=math.floor(bo)local kf,kg=b9.computeDistanceAndTime(bJ,ReentrySpeed/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kh=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bJ<=ReentrySpeed/3.6 and bJ>ReentrySpeed/3.6-10 and math.abs(bI:normalize():dot(bG))>0.9 then Nav.control.cancelCurrentControlMasterMode()B=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(kf>-1 and kh<=kf or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;c2(ReentrySpeed,true)if not K then k1=-80;if ao>0.02 then X="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;k1=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then c2(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bo then K=false;Reentry=false;bf=true end end end;if bJ>J and not ai and not VectorToTarget and not BrakeLanding and ForceAlignment then dE(vec3(bI))end;if(VectorToTarget or ai)and AutopilotTargetIndex>0 and ao>0.01 then local dI;if CustomTarget~=nil then dI=CustomTarget.position-bL else dI=a5.center-bL end;local k0=math.deg(dm(bK:normalize(),bI,dI))*2;local ki=math.rad(math.abs(j9))if bJ>minRollVelocity and ao>0.01 then local kj=utils.clamp(90-k1*2,-90,90)bl=utils.clamp(k0*2,-kj,kj)local kk=k0;k0=utils.clamp(utils.clamp(k0,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(ki)+4*(ju-k1)*math.sin(math.rad(j9)),-YawStallAngle*0.85,YawStallAngle*0.85)k1=utils.clamp(utils.clamp(k1*math.cos(ki),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(kk)*math.sin(ki),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bl=0;k0=utils.clamp(k0,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kl=jv-k0;if not bj and bJ>minRollVelocity and ao>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kl)local k3=utils.clamp(yawPID:get(),-1,1)Q=Q+k3 elseif an and ak>-1 or bJ<minRollVelocity then dE(dI)elseif bj and ao>0.01 then if(jv<-YawStallAngle or jv>YawStallAngle)and ao>0.01 then dE(bI)end;if(jw<-PitchStallAngle or jw>PitchStallAngle)and ao>0.01 then k1=utils.clamp(ju-jw,ju-PitchStallAngle*0.85,ju+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ai then local km=planet:getAltitude(CustomTarget.position)local kh=math.sqrt(dI:len()^2-(ap-km)^2)local kn=LastMaxBrakeInAtmo;if kn then kn=kn*utils.clamp(bJ/100,0.1,1)*ao else kn=LastMaxBrake end;if ao<0.01 then kn=LastMaxBrake end;local ko=bI:len()-math.abs(hC)local kp=vec3(core.getWorldAirFrictionAcceleration())local kq=math.sqrt(kp:len()-kp:project_on(dc):len())*m()if bJ>100 then a1,a2=b9.computeDistanceAndTime(bJ,100,m(),0,0,kn+kq)local kr,ks=b9.computeDistanceAndTime(100,0,m(),0,0,kn/2)a1=a1+kr else a1,a2=b9.computeDistanceAndTime(bJ,0,m(),0,0,kn/2)end;StrongBrakes=true;if not ai and not Reentry and kh<=a1+bJ*jt/2 and(bI:project_on_plane(bK):normalize():dot(dI:project_on_plane(bK):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"b_(0)B=0;if AltitudeHold then d2()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ko<0.1 or kh<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kh)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kh end elseif VectorToTarget and ao==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ai or Reentry)then if CustomTarget~=nil and a5.name==planet.name then local dI=CustomTarget.position-bL;local km=planet:getAltitude(CustomTarget.position)local kh=math.sqrt(dI:len()^2-(ap-km)^2)local kn=LastMaxBrakeInAtmo;if not bz then bw=false;IntoOrbit=true else kn=LastMaxBrake;a1,a2=b9.computeDistanceAndTime(bJ,0,m(),0,0,kn/2)StrongBrakes=true;if kh<=a1+bJ*jt/2 and bI:project_on_plane(bK):normalize():dot(dI:project_on_plane(bK):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dL()end end;LastDistanceToTarget=kh end end end;if ao==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ai or VectorToTarget or IntoOrbit or Reentry)then if not bz then IntoOrbit=true end end;if bj and ao>0.01 and ak==-1 and bJ>minRollVelocity and VectorStatus~="Finalizing Approach"then dE(bI)k1=utils.clamp(ju-jw,ju-PitchStallAngle*0.85,ju+PitchStallAngle*0.85)end;P=ke;local eA=-1;if BrakeLanding then k1=0;local kt=false;local ku=30;if ba~=nil and ba>0 then local kq=0;local jg=utils.clamp(ao,0.4,2)local kn=LastMaxBrakeInAtmo*utils.clamp(bJ/100,0.1,1)*jg;local kv=ba*jg+kn+kq-c6;local kw=kn/2+kq-c6;local kx=bJ-math.sqrt(math.abs(kw/2)*20/(0.5*m()))*utils.sign(kw)if kx<0 then kx=0 end;local ky;if bJ>100 then local kz,_=b9.computeDistanceAndTime(bJ,100,m(),0,0,kn)local kA,_=b9.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kn))ky=kz+kA else ky=b9.computeDistanceAndTime(bJ,0,m(),0,0,math.sqrt(kn))end;if ky<20 then BrakeIsOn=false else local kB=0;if kx>100 then local kC,_=b9.computeDistanceAndTime(kx,100,m(),0,0,kv)local kD,_=b9.computeDistanceAndTime(100,0,m(),0,0,ba*jg+math.sqrt(kn)+kq-c6)kB=kC+kD else kB,_=b9.computeDistanceAndTime(kx,0,m(),0,0,ba*jg+math.sqrt(kn)+kq-c6)end;kB=(kB+15+bJ*jt)*1.1;local kE=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kE then local km=planet:getAltitude(CustomTarget.position)local kF=ap-km-100;local dI=CustomTarget.position-bL;local kG=math.sqrt(dI:len()^2-(ap-km)^2)if kG>100 then kE=false elseif kF<=kB or kB==-1 then BrakeIsOn=true;kt=true else BrakeIsOn=false;kt=true end end;if not kE and CalculateBrakeLandingSpeed then if kB>=ku then BrakeIsOn=true else BrakeIsOn=false end;kt=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)eA=ak;if eA>-1 then bf=autoRollPreference;if bJ<1 or bI:normalize():dot(bK)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a9=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bI:normalize():dot(-dc)<0.999 then BrakeIsOn=true elseif hC<-brakeLandingRate and not kt then BrakeIsOn=true elseif not kt then BrakeIsOn=false end end;if AutoTakeoff or ai then local iP,gd,gc;if AutopilotTargetCoords~=nil then iP,gd,gc=b8:getPlanetarySystem(0):castIntersections(bL,(AutopilotTargetCoords-bL):normalize(),function(g0)return g0.radius+g0.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if ap>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;b_(0)B=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(k1)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not ai then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ai and bJ<J then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;b_(0)B=0 elseif ai then b_(0)B=0;BrakeIsOn=true end elseif ai and ao==0 and a5~=nil and(iP==nil or iP.name==a5.name)then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kH=c_()>-1;local kI=d6;if(VectorToTarget or ai)and not kH and bJ>minRollVelocity and ao>0.01 then local ki=math.rad(math.abs(j9))kI=d6*math.abs(math.cos(ki))+jw*math.sin(ki)end;local kJ=utils.clamp(k1-kI,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ao<0.01 and VectorToTarget then kJ=utils.clamp(k1-kI,-85,MaxPitch)elseif ao<0.01 then kJ=utils.clamp(k1-kI,-MaxPitch,MaxPitch)end;if math.abs(j9)<5 or VectorToTarget or BrakeLanding or kH or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kJ)local k2=pitchPID:get()P=P+k2 end end;if antigrav~=nil and(antigrav and not ExternalAGG and ap<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and F then B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)F=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not F then B=0;F=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local kK=utils.clamp(O+P+system.getControlDeviceForwardInput(),-1,1)local kL=utils.clamp(R+U+system.getControlDeviceYawInput(),-1,1)local kM=utils.clamp(S+Q-system.getControlDeviceLeftRightInput(),-1,1)local kN=T;bK=vec3(core.getWorldVertical())if bK==nil or bK:len()==0 then bK=(planet.center-bL):normalize()end;bL=vec3(core.getConstructWorldPos())bF=vec3(core.getConstructWorldOrientationUp())bG=vec3(core.getConstructWorldOrientationForward())bH=vec3(core.getConstructWorldOrientationRight())bI=vec3(core.getWorldVelocity())bJ=vec3(bI):len()local kO=bI:normalize()local kP=getRoll(bK,bG,bH)local kQ=math.abs(kP)local kR=utils.sign(kP)local kS=vec3(core.getWorldAngularVelocity())local kT=kK*pitchSpeedFactor*bH+kL*rollSpeedFactor*bG+kM*yawSpeedFactor*bF;if bK:len()>0.01 and(ao>0.0 or ProgradeIsOn or Reentry or ah or AltitudeHold)then local j9=getRoll(bK,bG,bH)local ja=j9/180*math.pi;local jb=math.cos(ja)local jc=math.sin(ja)local ju=getPitch(bK,bG,bH*jb+bF*jc)if bf==true and math.abs(bl-kP)>autoRollRollThreshold and kL==0 and math.abs(ju)<85 then local kU=bl;local jR=autoRollFactor;if ao==0 then jR=jR/4;bl=0;kU=0 end;if rollPID==nil then rollPID=pid.new(jR*0.01,0,jR*0.1)end;rollPID:inject(kU-kP)local kV=rollPID:get()kT=kT+kV*bG end end;if bK:len()>0.01 and ao>0.0 then local kW=20.0;if turnAssist==true and kQ>kW and kK==0 and kM==0 then local kX=turnAssistFactor*0.1;local kY=turnAssistFactor*0.025;local kZ=(kQ-kW)/(180-kW)*180;local k_=0;if kZ<90 then k_=kZ/90 elseif kZ<180 then k_=(180-kZ)/90 end;k_=k_*k_;local l0=-kR*kY*(1.0-k_)local l1=kX*k_;kT=kT+l1*bH+l0*bF end end;local l2=1;local l3=0;local l4=1;if system.getMouseWheel()>0 then if AltIsOn then if ao>0 or Reentry then bo=utils.clamp(bo+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ao>0 or Reentry then bo=utils.clamp(bo-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B-speedChangeLarge/100,-1,1),2)end end;C=0;local hC=-bK:dot(bI)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bo/3.6-bI:dot(bG))local l5=throttlePID:get()E=utils.clamp(l5,-1,1)if E<B and ao>0.005 then D=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(E,0.01,1))else D=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bI:len()-bo/3.6)local l6=utils.clamp(brakePID:get(),0,1)if ao>0 and hC<-80 or ao>0.005 then C=l6 end;if C>0 then if D and E==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else E=utils.clamp(E,0.01,1)end;local l7=''local l8=vec3()local l9=eV(axisCommandId.vertical,a9*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",l9,l3)local la='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then la=la..ExtraLongitudeTags end;local lb=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local lc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(la,axisCommandId.longitudinal)local ld=f8(axisCommandId.lateral,LeftAmount*1000)l7=l7 ..' , '.."lateral airfoil , lateral ground "l8=l8+ld;if l8:len()>constants.epsilon then Nav:setEngineForceCommand(l7,l8,l3,'','','',l4)end;Nav:setEngineForceCommand(la,lc,l2)local le='thrust analog vertical fueled 'local lf='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lf=lf..ExtraLateralTags end;if ExtraVerticalTags~="none"then le=le..ExtraVerticalTags end;if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(le,l9,l2)else Nav:setEngineForceCommand(le,vec3(),l2)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lf,ld,l2)else Nav:setEngineForceCommand(lf,vec3(),l2)end;if kN==0 then kN=C end;local lg=-kN*(brakeSpeedFactor*bI+brakeFlatFactor*kO)Nav:setEngineForceCommand('brake',lg)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;local eX=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bI:len()-eX/3.6)local l6=utils.clamp(brakePID:get(),0,1)kN=utils.clamp(kN+l6,0,1)end;local lg=-kN*(brakeSpeedFactor*bI+brakeFlatFactor*kO)Nav:setEngineForceCommand('brake',lg)local l7=''local l8=vec3()local lh=false;local la='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then la=la..ExtraLongitudeTags end;local lb=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if lb==axisCommandType.byThrottle then local lc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(la,axisCommandId.longitudinal)Nav:setEngineForceCommand(la,lc,l2)elseif lb==axisCommandType.byTargetSpeed then local lc=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)l7=l7 ..' , '..la;l8=l8+lc;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lh=true end end;local lf='thrust analog lateral 'if ExtraLateralTags~="none"then lf=lf..ExtraLateralTags end;local li=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if li==axisCommandType.byThrottle then local lj=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lf,axisCommandId.lateral)Nav:setEngineForceCommand(lf,lj,l2)elseif li==axisCommandType.byTargetSpeed then local ld=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)l7=l7 ..' , '..lf;l8=l8+ld end;local le='thrust analog vertical 'if ExtraVerticalTags~="none"then le=le..ExtraVerticalTags end;local lk=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lk==axisCommandType.byThrottle then local l9=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(le,axisCommandId.vertical)if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(le,l9,l2,'airfoil','ground','',l4)else Nav:setEngineForceCommand(le,vec3(),l2)Nav:setEngineForceCommand('airfoil vertical',l9,l2,'airfoil','','',l4)Nav:setEngineForceCommand('ground vertical',l9,l2,'ground','','',l4)end elseif lk==axisCommandType.byTargetSpeed then if a9<0 then Nav:setEngineForceCommand('hover',vec3(),l2)end;local ll=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)l7=l7 ..' , '..le;l8=l8+ll end;if l8:len()>constants.epsilon then if T~=0 or lh or math.abs(kO:dot(bG))<0.8 then l7=l7 ..', brake'end;Nav:setEngineForceCommand(l7,l8,l3,'','','',l4)end end;local lm=torqueFactor*(kT-kS)local ln=vec3(core.getWorldAirFrictionAngularAcceleration())lm=lm-ln;Nav:setEngineTorqueCommand('torque',lm,l2,'airfoil','','',l4)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local c9=vec3(core.getVelocity()):len()local lo=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lp=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c9*3.6>lp*(1-lo)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c9*3.6<lp*(1-lo)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local et=unit.getThrottle()if AtmoSpeedAssist then et=B*100 end;local eX=et/100;if h==0 then eX=eX*MaxGameVelocity;if c9>=eX*(1-lo)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c9<eX*(1-lo)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else eX=eX*ReentrySpeed/3.6;if c9>=eX*(1-lo)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c9<eX*(1-lo)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bQ=coroutine.resume(beginSetup)if bQ then SetupComplete=true end else Nav:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lq)if lq=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0;if(vBooster or hover)and ak==-1 and(ao>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if N and not BrakeLanding then Nav.control.extendLandingGears()end else if N then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lq=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lq=="forward"then O=O-1 elseif lq=="backward"then O=O+1 elseif lq=="left"then R=R-1 elseif lq=="right"then R=R+1 elseif lq=="yawright"then S=S-1 elseif lq=="yawleft"then S=S+1 elseif lq=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lq=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lq=="up"then a9=a9+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lq=="down"then a9=a9-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lq=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lq=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lq=="option1"then db()elseif lq=="option2"then db(1)elseif lq=="option3"then if n()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif lq=="option4"then dd()elseif lq=="option5"then ToggleLockPitch()elseif lq=="option6"then d2()elseif lq=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;cT()elseif lq=="option8"then d7()elseif lq=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end elseif lq=="lshift"then if system.isViewLocked()==1 then W=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then W=true;be=false;bd=false end elseif lq=="brake"then if BrakeToggleStatus then dA()elseif not BrakeIsOn then dA()else BrakeIsOn=true end elseif lq=="lalt"then AltIsOn=true elseif lq=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif lq=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()B=0 elseif lq=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else db()end elseif lq=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else db(1)end elseif lq=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(lq)if lq=="forward"then O=0 elseif lq=="backward"then O=0 elseif lq=="left"then R=0 elseif lq=="right"then R=0 elseif lq=="yawright"then S=0 elseif lq=="yawleft"then S=0 elseif lq=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lq=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lq=="up"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lq=="down"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lq=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lq=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lq=="lshift"then if system.isViewLocked()==1 then W=false;aa=0;ab=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then W=false;be=false;bd=false end elseif lq=="brake"then if not BrakeToggleStatus then if BrakeIsOn then dA()else BrakeIsOn=false end end elseif lq=="lalt"then AltIsOn=false end end;function script.onActionLoop(lq)if lq=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lq=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lq=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lq=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dM)local i;local lr="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local ls,lt=nil,nil;local lu="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dM," ")ls=dM;if i~=nil then ls=string.sub(dM,0,i-1)lt=string.sub(dM,i+1)elseif not string.find(lr,ls)then for jp in string.gmatch(lu,"([^\n]+)")do system.print(jp)end;return end;if ls=="/setname"then if lt==nil or lt==""then X="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(lt)else X="Select a saved target to rename first"end elseif ls=="/addlocation"then if lt==nil or lt==""or string.find(lt,"::")==nil then X="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(lt,"::")local cH=string.sub(lt,1,i-2)local cB=string.sub(lt,i)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cC='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cD,cE,cy,cz,cx=p(cB,cC)local planet=b2[tonumber(cD)][tonumber(cE)]AddNewLocationByWaypoint(cH,planet,cB)X="Added "..cH.." to saved locations,\nplanet "..planet.name.." at "..cB;ac=5 elseif ls=="/agg"then if lt==nil or lt==""then X="Usage: /agg targetheight"return end;lt=tonumber(lt)if lt<1000 then lt=1000 end;AntigravTargetAltitude=lt;X="AGG Target Height set to "..lt elseif ls=="/G"then if lt==nil or lt==""then X="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if lt=="dump"then for bO,bP in pairs(a)do if type(_G[bP])=="boolean"then if _G[bP]==true then system.print(bP.." true")else system.print(bP.." false")end elseif _G[bP]==nil then system.print(bP.." nil")else system.print(bP.." ".._G[bP])end end;return end;i=string.find(lt," ")local lv=string.sub(lt,0,i-1)local lw=string.sub(lt,i+1)for bO,bP in pairs(a)do if bP==lv then X="Variable "..lv.." changed to "..lw;local lx=type(_G[bP])if lx=="number"then lw=tonumber(lw)elseif lx=="boolean"then if string.lower(lw)=="true"then lw=true else lw=false end end;_G[bP]=lw;return end end;X="No such global variable: "..lv elseif ls=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else X="Spare Databank required to copy databank"end elseif ls=="/wipedatabank"then if dbHud_1 then wipeSaveVariables()else X="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
