name: ArchHud - Archaegeo v1.140 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.140;SetWaypointOnExit=true;local b={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","SetWaypointOnExit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local c={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=core.getConstructMass;local n=a.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local vec3=vec3;local s=utils.clamp;local t=a.axisCommandManager;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return e(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8,a9=0;local aa,ab=0;local ac=nil;local ad=0;local ae=0;local af=false;local ag=0;local ah=0;local ai=0;local aj=3;local ak=0;local al=""local am=""local an=0;local ao=false;local ap=false;local aq=false;local ar=-1;local as=false;local at=""local au=k()>0;local av=k()local aw=core.getAltitude()local ax=core.getElementIdList()local ay=r()local az=nil;local aA=false;local aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]local aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local aD={}local aE=0;local aF=0;local aG=""local aH=true;local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=e(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=16;local b2=0;local b3=nil;local b4=""local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=nil;local be=false;local bf=false;local bg=autoRollPreference;local bh=LandingGearGroundHeight;local bi=system.getMouseDeltaX()local bj=system.getMouseDeltaY()local bk=false;local bl=r()local bm=0;local bn=0;local bo=0;local bp=AtmoSpeedLimit;local bq=0;local br=nil;local bs=0;local bt=0;local bu=false;local bv=false;local bw={VectorToTarget=false}local bx=false;local by=0;local bz=nil;local bA=false;local bB=false;local bC=false;local bD=false;local bE=0;local bF=r()local bG=vec3(core.getConstructWorldOrientationUp())local bH=vec3(core.getConstructWorldOrientationForward())local bI=vec3(core.getConstructWorldOrientationRight())local bJ=vec3(core.getWorldVelocity())local bK=vec3(bJ):len()local bL=vec3(core.getWorldVertical())local bM=vec3(core.getConstructWorldPos())local bN=false;local bO=false;local bP=nil;local bQ=true;local bR=0;local bS=0;local function bT(bU,bV)if t:getAxisCommandType(0)~=axisCommandType.byThrottle and not bV then a.control.cancelCurrentControlMasterMode()end;t:setThrottleCommand(axisCommandId.longitudinal,bU)I=s(z(bU*100,0)/100,-1,1)end;local function bW(bU,bV)if t:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bV then a.control.cancelCurrentControlMasterMode()end;t:setTargetSpeedCommand(axisCommandId.longitudinal,bU)bP=bU end;local function bX()AtlasOrdered={}for bY,bZ in pairs(b3[0])do table.insert(AtlasOrdered,{name=bZ.name,index=bY})end;local function b_(c0,c1)return c0.name<c1.name end;table.sort(AtlasOrdered,b_)end;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*epsilon end;local function c5(ak,c6)local c7=ak>100000;local c8,c9=""if c6==nil then c6=1 end;if c7 then c8,c9=z(ak/1000/200,c6),"SU"elseif ak<1000 then c8,c9=z(ak,c6),"M"else c8,c9=z(ak/1000,c6),"KM"end;return c8,c9 end;local function ca(cb)for bY,bZ in pairs(cb)do if bZ.name and bZ.name==CustomTarget.name then return bY end end;return-1 end;local function cc()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;bg=true;ag=0;if au and ar==-1 then BrakeLanding=false;AltitudeHold=true;ag=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bW(e(bp))end else VertTakeOff=true;AltitudeHold=false;bA=false;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cd()bA=false;bs=nil;bt=nil;bE=0;if av==0 then if IntoOrbit then IntoOrbit=false;bu=false;bz=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bg=true;if bz==nil then bz=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bu=false;bz=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false end end;local function ce()if bF-bn<1.5 then if planet.hasAtmosphere then if av>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;by=HoldAltitude;bx=true;if not IntoOrbit then cd()end;bu=true end end;bn=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bn=bF end;if unit.getClosestPlanetInfluence()>0 and av==0 then by=aw;bx=true;bu=true;cd()if IntoOrbit then bn=bF else bn=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;bg=true;LockPitch=nil;bA=false;if ar==-1 then AutoTakeoff=false;if bn>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=aw end end;if VertTakeOff then cc()end else AutoTakeoff=true;if bn>-1 then HoldAltitude=aw+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;t:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bN then cc()end end;if ap then HoldAltitude=100000 end else if IntoOrbit then cd()end;if VertTakeOff then cc()end;bg=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bn=0 end end;local function cf()if n()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bg=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function cg()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local ch=AtlasOrdered[AutopilotTargetIndex].index;local ci=b3[0][ch]if ci.center then AutopilotTargetName=ci.name;ac=b9[0][ch]if CustomTarget~=nil then if av==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ci;for _,bZ in pairs(b9[0])do if bZ.name==CustomTarget.planetname then ac=bZ;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bc(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cj(ck)if not Autopilot and not VectorToTarget and not ap and not IntoOrbit then if ck==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cg()else local ch=AtlasOrdered[AutopilotTargetIndex].index;local ci=b3[0][ch]if ci.name=="Space"then if ck==nil then cj()else cj(1)end else cg()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cl(planet,cm)local function cn(co,cp)local cq=vec3(cp)if co.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=co.planetarySystemId},MapPosition)end;local cr=cq-co.center;local ak=cr:len()local cs=ak-co.radius;local ct=0;local cu=0;if not c2(ak,0)then local cv=o(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ak)end;return setmetatable({latitude=math.deg(ct),longitude=math.deg(cu),altitude=cs,bodyId=co.bodyId,systemId=co.planetarySystemId},MapPosition)end;local cw=cn(planet,cm)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end;local function cx()local function cy(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ce()end end;VectorStatus="Proceeding to Waypoint"end;if bF-bo<1.5 and av>0 then if not bD then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if av>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bo=-1;if Autopilot or VectorToTarget then return end end else bo=bF end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ap then cg()cl(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if av~=0 then ap=true;ce()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if av>0 then if not VectorToTarget then cy(SpaceTarget)end else if aw>AutopilotTargetOrbit*1.5 or aw==0 then bA=false;Autopilot=true elseif not au then if IntoOrbit then cd()end;by=planet.noAtmosphericDensityAltitude+1000;bx=true;bw.AutopilotAlign=true;bw.VectorToTarget=true;bu=false;if not IntoOrbit then cd()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if av~=0 then ap=true;ce()else Autopilot=true end end elseif av==0 then local cz=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(ac.name==planet.name and cz)and not IntoOrbit then WaypointSet=false;bA=false;bu=false;cd()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else ap=true;ce()end else ap=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aw;TargetSet=false;Reentry=false;if IntoOrbit then cd()end end end;local function cA(cB)local cC=-1;local cD;cC=ca(SavedLocations)if cC~=-1 then local cE;if cB~=nil then cD={position=SavedLocations[cC].position,name=cB,atmosphere=SavedLocations[cC].atmosphere,planetname=SavedLocations[cC].planetname,gravity=SavedLocations[cC].gravity}else cD={position=bM,name=SavedLocations[cC].name,atmosphere=av,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cC]=cD;cC=-1;cC=ca(b3[0])if cC>-1 then b3[0][cC]=cD end;bX()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cg()else a2="Name Not Found"end end;local function cF()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bg=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then cc()end;if IntoOrbit then cd()end;LockPitch=nil;bg=autoRollPreference;ao=false;aq=false;ag=0 end end;local function cG(cH,cI,cJ)local function cK(cH,cL)cH=vec3(cH)cL=vec3(cL):normalize()local c8=cH*cL;return c8.x+c8.y+c8.z end;local cM=0.001;local cN=1;if not au or not bk or ar~=-1 or bK<Q then local cO=cJ;if cO==nil then cO=DampingMultiplier end;if cI==nil then cI=cM end;cH=vec3(cH):normalize()local cP=vec3()-cH;local cQ=-cK(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cK(cP,core.getConstructWorldOrientationUp())*cN;if aE==0 then aE=cQ/2 end;if aF==0 then aF=cR/2 end;if d(cQ)<0.1 then V=V-cQ*2 else V=V-(cQ+(cQ-aE)*cO)end;if d(cR)<0.1 then U=U+cR*2 else U=U+cR+(cR-aF)*cO end;aE=cQ;aF=cR;if d(cQ)<cI and d(cR)<cI then return true end;return false elseif bk and ar==-1 then cH=bJ;local cO=cJ;if cO==nil then cO=DampingMultiplier end;if cI==nil then cI=cM end;cH=vec3(cH):normalize()local cP=bH-cH;local cQ=-cK(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cK(cP,core.getConstructWorldOrientationUp())*cN;if aE==0 then aE=cQ/2 end;if aF==0 then aF=cR/2 end;if d(cQ)<0.1 then V=V-cQ*5 else V=V-(cQ+(cQ-aE)*cO)end;if d(cR)<0.1 then U=U+cR*5 else U=U+cR+(cR-aF)*cO end;aE=cQ;aF=cR;if d(cQ)<cI and d(cR)<cI then return true end;return false end end;local function cS()if Reentry then a2="Re-Entry cancelled"Reentry=false;bg=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"aj=5 elseif not R then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if t:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bg=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bp end else Reentry=true;AltitudeHold=true;bg=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cT,cU=c5(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bp.." Target Altitude: "..cT..cU;bW(e(bp))end;AutoTakeoff=false end;local function cV()if antigrav and not ExternalAGG then if bO then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aw end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cW(cX)local cY=0;local cZ=0;local c_=0;if cX<60 then cX=e(cX)elseif cX<3600 then cY=e(cX/60)cX=e(cX%60)elseif cX<86400 then cZ=e(cX/3600)cY=e(cX%3600/60)else c_=e(cX/86400)cZ=e(cX%86400/3600)end;if c_>0 then return c_.."d "..cZ.."h "elseif cZ>0 then return cZ.."h "..cY.."m "elseif cY>0 then return cY.."m "..cX.."s"elseif cX>0 then return cX.."s"else return"0s"end end;local function d0()local d1=-1;if telemeter_1 then d1=telemeter_1.getDistance()end;if ar~=-1 and d1~=-1 then if ar<d1 then return ar else return d1 end elseif ar~=-1 then return ar else return d1 end end;local function d2(d3)local function d4(d5)for bY,bZ in pairs(d5)do dbHud_1.setStringValue(bZ,h(_G[bZ]))if d3 and dbHud_2 then dbHud_2.setStringValue(bZ,h(_G[bZ]))end end end;if dbHud_1 then if not af then d4(c)d4(b)system.print("Saved Variables to Datacore")if d3 and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function d6()local function d7(bZ)if aJ==1920 then return bZ else return z(aJ*bZ/1920,0)end end;local function d8(bZ)if aK==1080 then return bZ else return z(aK*bZ/1080,0)end end;local function d9()return y()==0 and userControlScheme~="keyboard"and n()==0 end;local function da()local db="TRAVEL"if not bQ then db="CRUISE"end;if Autopilot then db="AUTOPILOT"end;return db end;local function dc(dd,b0,de,df,dg,dh,di,dj)local dk=1;local dl=2;local dm=3;local dn=4;local dp=5;local dq=6;local dr=""local ds=0;local dt=fuelY;local du=fuelY+10;if n()==1 and not RemoteHud then dt=dt-50;du=du-50 end;dd[#dd+1]=[[<g class="pdim txtfuel">]]if dg=="ATMO"then dr="atmofueltank"elseif dg=="SPACE"then dr="spacefueltank"else dr="rocketfueltank"end;ds=_G[dr.."_size"]if#dh>0 then for i=1,#dh do local dv=string.sub(dh[i][dl],1,12)local dw=0;for dx=1,ds do if dh[i][dl]==g(unit[dr.."_"..dx].getData()).name then dw=dx;break end end;if b0 or di[i]==nil or dj[i]==nil then local dy=0;local dz=0;local dA=0;local dB=0;local dC=r()if dw~=0 then dj[i]=g(unit[dr.."_"..dw].getData()).percentage;di[i]=g(unit[dr.."_"..dw].getData()).timeLeft;if di[i]=="n/a"then di[i]=0 end else dA=l(dh[i][dk])-dh[i][dn]dy=dh[i][dm]dj[i]=e(0.5+dA*100/dy)dz=dh[i][dp]dB=dh[i][dq]if dz<=dA then di[i]=0 else di[i]=e(0.5+dA/((dz-dA)/(dC-dB)))end;dh[i][dp]=dA;dh[i][dq]=dC end end;if dv==df then dv=f("%s %d",dg,i)end;if dw==0 then dv=dv.." *"end;local dD;if di[i]==0 then dD="n/a"else dD=cW(di[i])end;if dj[i]~=nil then local dE=e(dj[i]*2.55)local dF=f("rgb(%d,%d,%d)",255-dE,dE,0)local dG=""if dD~="n/a"and di[i]<120 or dj[i]<5 then if b0 then dG=[[class="red"]]end end;dd[#dd+1]=f([[
                                        <text x=%d y="%d" %s>%s</text>
                                        <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                    ]],de,dt,dG,dv,de,du,dF,dj[i],dD)dt=dt+30;du=du+30 end end end;dd[#dd+1]="</g>"end;local function dH(dd,cs)if cs<200000 and not au or cs and au then local dI=-bL:dot(bJ)local dJ=0;if d(dI)>1 then dJ=45*math.log(d(dI),10)if dI<0 then dJ=-dJ end end;dd[#dd+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(dI),e(dJ))end;return dd end;local function dK(dL)local ck=-bL;dL=dL-dL:project_on(ck)local dM=vec3(0,0,1)dM=dM-dM:project_on(ck)local dN=dM:cross(ck)local dJ=dM:angle_between(dL)*constants.rad2deg;if dL:dot(dN)<0 then dJ=360-dJ end;return dJ end;local function dO(dd,centerX,centerY,dP,dQ,cz)local dR=circleRad;local dS=20;local dT=e(dP)if cz then for i=-45,45,5 do local dU=i;dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],dU,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dd[#dd+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dR+dS-len,centerX,centerY+dR+dS)end;dd[#dd+1]=f([["
                                <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY+dR+dS-35,dQ,centerX,centerY+dR+dS-25,dT)dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dR+dS-20,centerX+5,centerY+dR+dS-20,centerX,centerY+dR+dS-15)dd[#dd+1]="</g>"end;local dV=dT;if cz then dV=dK(bH)end;local dW=20;local dX=e(dV)local dY=0;local dZ=centerY+dR+dS+20;local d_=centerX;if dQ~="YAW"then dZ=d8(130)d_=d7(960)end;local e0=[[<path class="txttick line" d="]]for i=e(dX-(dW+10)-dX%5+0.5),e(dX+dW+10+dX%5+0.5),5 do local de=d_+-i*5+dV*5;if i%10==0 then dY=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;dd[#dd+1]=f([[
                                        <text x="%f" y="%f">%d</text>]],de+5,dZ-12,A)elseif i%5==0 then dY=5 end;if dY==10 then e0=f([[%s M %f %f v %d]],e0,de,dZ-5,dY)else e0=f([[%s M %f %f v %d]],e0,de,dZ-2.5,dY)end end;dd[#dd+1]=e0 ..[["/>]]dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],d_-5,dZ+10,d_+5,dZ+10,d_,dZ+5)if cz then dQ="HDG"end;dd[#dd+1]=f([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%d deg</text>
                            <text x="%d" y="%d">%s</text>
                            </g>
                            ]],d_,dZ+25,dX,d_,dZ+35,dQ)end;local function e1(dd,e2,dP,centerX,centerY,cz,e3,e4)local dR=circleRad;local e5=e(dR*3/5)if dR>0 then local e6=e(e2)local len=0;local e0=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dP,centerX,centerY)if not au then e0=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dd[#dd+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dR-1,centerX,centerY)dd[#dd+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(e6-30-e6%5+0.5),e(e6+30+e6%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local e7=centerY+-i*5+e2*5;if len==30 then e0=f([[%s M %d %f h %d]],e0,centerX-e5-len,e7,len)if au then dd[#dd+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX-e5+10,e7,i)dd[#dd+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dP,centerX,centerY,centerX+e5-10,e7,i)if i==0 or i==180 or i==-180 then dd[#dd+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-e5+20,e7,e5*2-40)end else dd[#dd+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e5+10,e7,i)dd[#dd+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e5-10,e7,i)end;e0=f([[%s M %d %f h %d]],e0,centerX+e5,e7,len)else e0=f([[%s M %d %f h %d]],e0,centerX-e5-len,e7,len)e0=f([[%s M %d %f h %d]],e0,centerX+e5,e7,len)end end;dd[#dd+1]=e0 ..[["/>]]local e8="PITCH"if not cz then e8="REL PITCH"end;if e2>90 and not au then e2=90-(e2-90)elseif e2<-90 and not au then e2=-90-(e2+90)end;if dR>200 then if au then if e4>Q then dd[#dd+1]=f([["
                                        <g class="pdim txt txtmid">
                                        <text x="%d" y="%d">%s</text>
                                        <text x="%d" y="%d">%d deg</text>
                                        </g>
                                        ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e3)end;dd[#dd+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dP,centerX,centerY)else dd[#dd+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e5+25,centerY-5,centerX-e5+20,centerY,centerX-e5+25,centerY+5,centerX-e5+50,centerY+4,e6)dd[#dd+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e5-25,centerY-5,centerX+e5-20,centerY,centerX+e5-25,centerY+5,centerX+e5-30,centerY+4,e6)dd[#dd+1]="</g>"end;local e9=e(dR/3)dd[#dd+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-e9,centerY,dR-e9)if not au and cz then dd[#dd+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dP,centerX,centerY,centerX-e5+10,centerY,e5*2-20)end;dd[#dd+1]="</g>"if dR<200 then if au and e4>Q then dd[#dd+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-dR,e8,centerX,centerY-dR+10,e6,centerX,centerY-15,"Yaw",centerX,centerY+20,e3)else dd[#dd+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-dR,e8,centerX,centerY-dR+15,e6)end end end end;local function ea(dd,cs,cz)local eb=altMeterX;local ec=altMeterY;local ed=78;local ee=19;local ef=d0()if ef~=-1 then table.insert(dd,f([[
                            <g class="pdim altsm txtend">
                            <text x="%d" y="%d">AGL: %.1fm</text>
                            </g>
                            ]],eb+ed,ec+ee+20,ef))end;if cz and(cs<200000 and not au or cs and au)then table.insert(dd,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],eb-1,ec-4,ed+2,ee+6,eb+1,ec-1,ed-4,ee))local cC=0;local eg=1;local eh=0;local ei=cs<0;local ej=9;if ei then ej=0 end;local cs=d(cs)while cC<6 do local ek=11;local el=16;local em=9;local en=14;local dG="altsm"if cC>2 then el=el+3;ek=ek+2;en=en+2;em=em-6;dG="altbig"end;if ei then dG=dG.." red"end;local eo=cs/eg%10;local ep=e(eo)local eq=e((ep+1)%10)local er=eh;if cC==0 then er=eo-ep;if ei then er=1-er end end;if ei and(cC==0 or eh~=0)then local es=eq;eq=ep;ep=es end;local et=el*(er-1)local eu=et+el;local de=eb+em+(6-cC)*ek;local e7=ec+en;table.insert(dd,f([[
                                    <g class="%s">
                                    <text x="%d" y="%f">%d</text>
                                    <text x="%d" y="%f">%d</text>
                                    </g>
                                ]],dG,de,e7+et,eq,de,e7+eu,ep))cC=cC+1;eg=eg*10;if ep==ej then eh=er else eh=0 end end;table.insert(dd,[[</g></g>]])end end;local function ev(ew)ew=vec3(ew)local ex=-math.deg(o(ew.y,ew.z))+180;ex=ex-90;if ex<0 then ex=360+ex end;if ex>180 then ex=-180+ex-180 end;return-ex end;local function ey(ew)ew=vec3(ew)local dV=math.deg(o(ew.y,ew.x))-90;if dV<-180 then dV=360+dV end;return dV end;local function ez(dd,ew,e4,centerX,centerY)if e4>5 and not au or e4>Q then local dR=circleRad;local eA=20;local eB=20;local eC=vec3(ew)local eD=ev(eC)local eE=ey(eC)local eF=14;local eG=eF/2;local eH=-eE/eB*dR;local eI=eD/eA*dR;local de=centerX+eH;local e7=centerY+eI;local ak=math.sqrt(eH^2+eI^2)local eJ=[[<circle
                            cx="]]..de..[["
                            cy="]]..e7 ..[["
                            r="]]..eG/eF..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..de..[["
                            cy="]]..e7 ..[["
                            r="]]..eG..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..de-eF..[[,]]..e7 ..[[ h ]]..eG..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..de+eG..[[,]]..e7 ..[[ h ]]..eG..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..de..[[,]]..e7-eF..[[ v ]]..eG..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ak<dR then dd[#dd+1]=eJ else local dJ=o(eI,eH)local eK=4;local eL=centerX+dR*math.cos(dJ)local eM=centerY+dR*math.sin(dJ)dd[#dd+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dJ*180/math.pi,eL,eM,eL-eK,eM-eK/2,eK*2,eK,eL+eK,eM-eK,eK,eK,-eK,eK)end;if not au then eD=ev(-eC)eE=ey(-eC)eH=-eE/eB*dR;eI=eD/eA*dR;de=centerX+eH;e7=centerY+eI;ak=math.sqrt(eH^2+eI^2)if ak<dR then local eN=[[<circle
                                    cx="]]..de..[["
                                    cy="]]..e7 ..[["
                                    r="]]..eG..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..de..[[,]]..e7-eF..[[ v ]]..eG..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..de..[[,]]..e7 ..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..de..[[,]]..e7 ..[[)" />
                                <path
                                    d="M ]]..de-eG..[[,]]..e7 ..[[ h ]]..eF..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..de..[[,]]..e7 ..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..de..[[,]]..e7 ..[[)"/>]]dd[#dd+1]=eN end end end end;local function eO(dd,db,eP,eQ)eP=e(eP+0.5)local dt=throtPosY+10;local du=throtPosY+20;if n()==1 and not RemoteHud then dt=55;du=65 end;local eR="CRUISE"local unit="km/h"local bU=eQ;if db=="TRAVEL"or db=="AUTOPILOT"then eR="THROT"unit="%"bU=eP;local eS="dim"if eP<0 then eS="red"end;dd[#dd+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],eS,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(eP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dd[#dd+1]=f([[
                            <g class="pbright txtstart">
                                    <text x="%s" y="%s">%s</text>
                                    <text x="%s" y="%s">%.0f %s</text>
                            </g>
                        </g>]],throtPosX+10,dt,eR,throtPosX+10,du,bU,unit)if au and AtmoSpeedAssist and bQ and K then eP=e(L*100+0.5)local eS="red"if eP<0 then eS="red"end;dd[#dd+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],eS,1-d(eP),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dd[#dd+1]=f([[
                                    <g class="pbright txtstart">
                                            <text x="%s" y="%s">%s</text>
                                            <text x="%s" y="%s">%d %s</text>
                                    </g>]],throtPosX+10,dt+40,"LIMIT",throtPosX+10,du+40,eP,"%")end;if au and AtmoSpeedAssist or Reentry then dd[#dd+1]=f([[
                                <g class="dim txtstart">
                                    <text x="%s" y="%s">%s %s</text>
                                </g>
                            ]],throtPosX+10,dt-40,"LIMIT: ",bp.." km/h")elseif not au and Autopilot then dd[#dd+1]=f([[
                                <g class="dim txtstart">
                                    <text x="%s" y="%s">%s %s</text>
                                </g>
                            ]],throtPosX+10,dt-40,"LIMIT: ",e(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eT(dd,eU)local eV=throtPosY-10;local eW=throtPosX+10;dd[#dd+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eV=75 end;dd[#dd+1]=f([[
                            <g class="pbright txtstart">
                                <text class="txtbig" x="%d" y="%d">%d km/h</text>
                            </g>
                        </g>]],eW,eV,e(eU))end;local function eX(dd)dd[#dd+1]=f([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],d7(1900),d8(1070),VERSION_NUMBER)dd[#dd+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dd[#dd+1]=f([[
                                <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],d7(960),d8(550))dd[#dd+1]=f([[
                                <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],d7(960),d8(600))dd[#dd+1]=f([[
                                <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],d7(960),d8(650))end;local eY=d7(960)local eZ=d8(860)local e_=d8(880)local f0=d8(900)local f1=d8(960)local f2=d8(200)local f3=d8(150)local f4=d8(960)if n()==1 and not RemoteHud then eZ=d8(135)e_=d8(155)f0=d8(175)f2=d8(115)f3=d8(95)end;if BrakeIsOn then dd[#dd+1]=f([[<text x="%d" y="%d">Brake Engaged</text>]],eY,eZ)elseif J>0 then dd[#dd+1]=f([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eY,eZ,J)end;if au and bk and ar==-1 then dd[#dd+1]=f([[<text x="%d" y="%d">** STALL WARNING **</text>]],eY,f2+50)end;if az then dd[#dd+1]=f([[<text x="%d" y="%d">Gyro Enabled</text>]],eY,f4)end;if GearExtended then if S then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eY,e_)else dd[#dd+1]=f([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eY,e_)end;local f5,c9=c5(a:getTargetGroundAltitude())dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eY,f0,f5 ..c9)end;if a7 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eY,f1+20)end;if antigrav and not ExternalAGG and bO and AntigravTargetAltitude~=nil then if d(aw-antigrav.getBaseAltitude())<501 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],eY,f2+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))else dd[#dd+1]=f([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eY,f2+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eY,f2+20,AutopilotStatus)elseif LockPitch~=nil then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eY,f2+20,e(LockPitch))elseif a0 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eY,f2+20)elseif Reentry then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eY,f2+20)end;local f6,f7,f8=b9:getPlanetarySystem(0):castIntersections(bM,bJ:normalize(),function(f9)if f9.noAtmosphericDensityAltitude>0 then return f9.radius+f9.noAtmosphericDensityAltitude else return f9.radius+f9.surfaceMaxAltitude*1.5 end end)local fa=f7;if f8~=nil and f7~=nil then fa=math.min(f8,f7)end;if AltitudeHold or VertTakeOff then local f5,c9=c5(HoldAltitude,2)if VertTakeOff then if bO then f5,c9=c5(antigrav.getBaseAltitude(),2)end;dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],eY,f2,f5 ..c9)elseif AutoTakeoff and not IntoOrbit then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],eY,f2,f5 ..c9)if BrakeIsOn and not VertTakeOff then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eY,f2+50)end else dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eY,f2,f5 ..c9)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if av>0.1 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],eY,f2)elseif av<0.09 and av>0.05 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],eY,f2)elseif av<0.05 then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],eY,f2)end end;if IntoOrbit then if br~=nil then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eY,f2,br)end end;if BrakeLanding then if StrongBrakes then dd[#dd+1]=f([[<text x="%d" y="%d">Brake-Landing</text>]],eY,f2)else dd[#dd+1]=f([[<text x="%d" y="%d">Coast-Landing</text>]],eY,f2)end end;if ProgradeIsOn then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eY,f2)end;if RetrogradeIsOn then dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eY,f2)end;if fa~=nil and av==0 then local f5,c9=c5(fa)local travelTime=ba.computeTravelTime(bK,0,fa)local fb="Collision"if f6.noAtmosphericDensityAltitude>0 then fb="Atmosphere"end;dd[#dd+1]=f([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eY,f3,f6.name,fb,cW(travelTime),f5 ..c9)end;if VectorToTarget and not IntoOrbit then dd[#dd+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eY,f2+35,VectorStatus)end;dd[#dd+1]="</g>"return dd end;local function fc(e4)return e(z(e4*3.6,0)+0.5).." km/h"end;local function fd(dd)local fe=OrbitMapX;local ff=OrbitMapY;local fg=OrbitMapSize;local fh=4;local fi=15;local de=0;local e7=0;local fj,fk,fl,fm;local function fn(type)local fo,bF,e4,fp;if type=="Periapsis"then fo=orbit.periapsis.altitude;bF=orbit.timeToPeriapsis;e4=orbit.periapsis.speed;fp=35 else fo=orbit.apoapsis.altitude;bF=orbit.timeToApoapsis;e4=orbit.apoapsis.speed;fp=-35 end;dd[#dd+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],de+fp,e7-5,fe+fg/2-fj+fm,e7-5)dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,type)e7=e7+fi;local f5,c9=c5(fo)dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,f5 ..c9)e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,cW(bF))e7=e7+fi;dd[#dd+1]=f([[<text x="%f" y="%f">%s</text>]],de,e7,fc(e4))end;if orbit~=nil and av<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then ff=ff+fh;de=fe+fg+fe/2+fh;e7=ff+fg/2+5+fh;fj=fg/4;fm=0;dd[#dd+1]=[[<g class="pbright txtorb txtmid">]]dd[#dd+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fg+fe*2,fg+ff,fh,fh)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fl=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fj*2)fk=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fl*(1-orbit.eccentricity)fm=fj-orbit.periapsis.altitude/fl-planet.radius/fl;local fq=""if orbit.periapsis.altitude<=0 then fq='redout'end;dd[#dd+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fq,fe+fg/2+fm+fh,ff+fg/2+fh,fj,fk)dd[#dd+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fe+fg/2+fh,ff+fg/2+fh,planet.radius/fl)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then fn("Apoapsis")end;e7=ff+fg/2+5+fh;de=fe-fe/2+10+fh;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then fn("Periapsis")end;dd[#dd+1]=f([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fe+fg/2+fh,20+fh,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fr=orbit.timeToApoapsis/orbit.period*2*math.pi;local fs=fj*math.cos(fr)local ft=fk*math.sin(fr)dd[#dd+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fe+fg/2+fs+fm+fh,ff+fg/2+ft+fh)end;dd[#dd+1]=[[</g>]]return dd else return dd end end;local function fu()if radarPanelID~=nil and an==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if an==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;an=0 end end;local function fv(dd)local function fw(fx,fy)for i=1,#fy do table.insert(fx,fy[i])end;return fx end;local de=50;local e7=525;local fz={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fA={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fB={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fC={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if au then fw(fz,fA)table.insert(fz,"---------------------------------------")if VertTakeOff then table.insert(fz,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if ar~=-1 then if antigrav then if bO then table.insert(fz,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fz,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fz,"Alt-6: Begins Vertical Takeoff.")else table.insert(fz,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fz,"G: Begin BrakeLanding or Land")end else fw(fz,fB)end;if AltitudeHold then table.insert(fz,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fz,"---------------------------------------")fw(fz,fC)dd[#dd+1]=[[<g class="pdim txttick txtstart">]]for i=1,#fz do e7=e7+12;dd[#dd+1]=f([[<text x=%d y="%d">%s</text>]],de,e7,fz[i])end;dd[#dd+1]="</g>"end;local fD={}function fD.HUDPrologue(dd)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local fE=aB;local fF=aC;local fG=aB;local fH=aC;if d9()and not brightHud then fE=[[rgb(]]..e(D*0.4+0.5)..","..e(F*0.4+0.5)..","..e(E*0.3+0.5)..[[)]]fF=[[rgb(]]..e(D*0.3+0.5)..","..e(F*0.3+0.5)..","..e(E*0.2+0.5)..[[)]]end;dd[#dd+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fE,fE,fG,fG,fF,fF,fH,fH,aJ,aK)return dd end;function fD.UpdateHud(dd)local cs=aw;local ew=core.getVelocity()local e4=vec3(ew):len()local ex=bR;local fI=bS;local dP=fI;local e2=bR;local eP=e(unit.getThrottle())local eU=e4*3.6;local eQ=unit.getAxisCommandValue(0)local fJ=d7(1770)local fK=d8(310)if AtmoSpeedAssist and bQ then eQ=I;eP=I*100 end;local db=da()local dQ="ROLL"local cz=unit.getClosestPlanetInfluence()>0;if eP==nil then eP=0 end;if not cz then if e4>5 then ex=ev(ew)fI=ey(ew)else ex=0;fI=0 end;dQ="YAW"end;if H>50000 and not au then local fL;if H>200000 then fL=z(H/200000,2).." su"else fL=z(H/1000,1).." km"end;dd[#dd+1]=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fJ,fK,fL)end;dd[#dd+1]=am;dd[#dd+1]=aG;dd[#dd+1]=al;if b2%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then dc(dd,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)dc(dd,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)dc(dd,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b2=0 end;b2=b2+1;dH(dd,cs)if n()==0 or RemoteHud then if not d9()or brightHud then if cz then dO(dd,centerX,centerY,dP,dQ,cz)e1(dd,e2,dP,centerX,centerY,cz,e(ey(ew)),e4)else dO(dd,centerX,centerY,fI,dQ,cz)e1(dd,ex,fI,centerX,centerY,cz,e(fI),e4)end;ea(dd,cs,cz)ez(dd,ew,e4,centerX,centerY)end end;eO(dd,db,eP,eQ)eT(dd,eU)eX(dd)fd(dd)if showHelp then fv(dd)end;if screen_2 then local fM=bM;local de=960+fM.x/b5;local e7=450+fM.y/b6;screen_2.moveContent(b7,(de-80)/19.2,(e7-80)/10.8)end;return dd end;function fD.HUDEpilogue(dd)dd[#dd+1]="</svg>"return dd end;function fD.DrawOdometer(dd,ad,TotalDistanceTravelled,ae,fN)local fO=d7(1240)local fP=d8(55)local fQ=fP+10;local fR=core.g()local fS=0;local fT=0;local fU=0;local db=da()if VertTakeOffEngine then db=db.."-VERTICAL"end;if TurnBurn then db="TB-"..db end;if au then fU=LastMaxBrakeInAtmo else fU=LastMaxBrake end;maxThrust=a:maxForceForward()aN=m()if not ShowOdometer then return end;local fV=vec3(core.getWorldAcceleration()):len()/9.80665;fR=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if fR>0.1 then fT=aN*fR;fS=maxThrust/fR end;dd[#dd+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then fO=d7(1120)fP=d8(55)fQ=fP+10 elseif au then local fW=d7(770)dd[#dd+1]=f([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fW,fP,fW,fQ,av)end;dd[#dd+1]=f([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fO,fP,fO,fQ,fR/9.80665,fO,fP+20,fO,fQ+20,fV)dd[#dd+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],d7(660),d7(700),d8(35),d7(960),d8(55),d7(1240),d8(35),d7(1280))if n()==0 or RemoteHud then dd[#dd+1]=f([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],d7(700),d8(20),ad,d7(700),d8(30),TotalDistanceTravelled/1000,d7(830),d8(20),cW(ae),d7(830),d8(30),cW(TotalFlightTime),d7(970),d8(20),aN/1000,d7(1240),d8(10),fU/1000,d7(1240),d8(30),maxThrust/1000,d7(960),d8(180),db)if fR>0.1 then dd[#dd+1]=f([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],d7(970),d8(30),fS/1000,d7(1240),d8(20),fT/1000)else dd[#dd+1]=f([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],d7(970),d8(30),d7(1240),d8(20))end else dd[#dd+1]=f([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],d7(960),d8(33),db)end;dd[#dd+1]="</g>"return dd end;function fD.DrawWarnings(dd)return eX(dd)end;function fD.DisplayOrbitScreen(dd)return fd(dd)end;function fD.DisplayMessage(dd,f5)if f5~="empty"then dd[#dd+1]=[[<text class="msg" x="50%%" y="310" >]]for fX in string.gmatch(f5,"([^\n]+)")do dd[#dd+1]=f([[<tspan x="50%%" dy="35">%s</tspan>]],fX)end;dd[#dd+1]=[[</text>]]end;if aj~=0 then unit.setTimer("msgTick",aj)aj=0 end end;function fD.DrawDeadZone(dd)dd[#dd+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function fD.UpdateRadar()if radar_1 then local fY=radar_1.getEntries()local fZ=radar_1.getData()local f_=d7(1770)local g0=d8(330)if#fY>0 then local g1=fZ:find('identifiedConstructs":%[%]')if g1==nil and perisPanelID==nil then an=1;fu()end;if g1~=nil and perisPanelID~=nil then fu()end;if radarPanelID==nil then fu()end;al=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f_,g0,#fY)local g2={}for bY,bZ in pairs(fY)do if radar_1.hasMatchingTransponder(bZ)==1 then table.insert(g2,bZ)end end;if#g2>0 then local e7=d8(15)local de=d7(1370)al=f([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],al,de,e7)for bY,bZ in pairs(g2)do e7=e7+20;al=f([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],al,de,e7,radar_1.getConstructName(bZ))end end else local g3;g3=fZ:find('worksInEnvironment":false')if g3 then al=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f_,g0)else al=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f_,g0)end;if radarPanelID~=nil then an=0;fu()end end end end;return fD end;local function g4()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function g5()local function g6(g7)return type(g7)=='number'end;local function g8(g7)return type(tonumber(g7))=='number'end;local function g9(ga)return type(ga)=='table'end;local function gb(gc)return type(gc)=='string'end;local function gd(bZ)return g9(bZ)and g6(bZ.x and bZ.y and bZ.z)end;local function ge(gf)return g9(gf)and g6(gf.latitude and gf.longitude and gf.altitude and gf.bodyId and gf.systemId)end;local gg=math.pi/180;local gh=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gi='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gj=s;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*epsilon end;local function gk(g7)local c8=string.gsub(string.reverse(f('%.4f',g7)),'^0*%.?','')return c8==''and'0'or string.reverse(c8)end;local function gl(gm)if gd(gm)then return f('{x=%.3f,y=%.3f,z=%.3f}',gm.x,gm.y,gm.z)end;if g9(gm)and not getmetatable(gm)then local gn={}local go=next(gm)if type(go)=='nil'or go==1 then gn=gm else for bY,bZ in pairs(gm)do local bU=gl(bZ)if type(bY)=='number'then table.insert(gn,f('[%s]=%s',bY,bU))else table.insert(gn,f('%s=%s',bY,bU))end end end;return f('{%s}',table.concat(gn,','))end;if gb(gm)then return f("'%s'",gm:gsub("'",[[\']]))end;return tostring(gm)end;local gp={}gp.__index=gp;gp.__tostring=function(gm,gq)local gr={}for bY in pairs(gm)do table.insert(gr,bY)end;table.sort(gr)local gn={}for _,bY in ipairs(gr)do local bU=gl(gm[bY])if type(bY)=='number'then table.insert(gn,f('[%s]=%s',bY,bU))else table.insert(gn,f('%s=%s',bY,bU))end end;if gq then return f('%s%s',gq,table.concat(gn,',\n'..gq))end;return f('{%s}',table.concat(gn,','))end;gp.__eq=function(gs,gt)return gs.planetarySystemId==gt.planetarySystemId and gs.bodyId==gt.bodyId and c2(gs.radius,gt.radius)and c2(gs.center.x,gt.center.x)and c2(gs.center.y,gt.center.y)and c2(gs.center.z,gt.center.z)and c2(gs.GM,gt.GM)end;local function gu(gv,gw,gx,cp,gy)assert(g8(gv),'Argument 1 (planetarySystemId) must be a number:'..type(gv))assert(g8(gw),'Argument 2 (bodyId) must be a number:'..type(gw))assert(g8(gx),'Argument 3 (radius) must be a number:'..type(gx))assert(g9(cp),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cp))assert(g8(gy),'Argument 5 (GM) must be a number:'..type(gy))return setmetatable({planetarySystemId=tonumber(gv),bodyId=tonumber(gw),radius=tonumber(gx),center=vec3(cp),GM=tonumber(gy)},gp)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gz)return f('::pos{%d,%d,%s,%s,%s}',gz.systemId,gz.bodyId,gk(gz.latitude*gh),gk(gz.longitude*gh),gk(gz.altitude))end;MapPosition.__eq=function(gs,gt)return gs.bodyId==gt.bodyId and gs.systemId==gt.systemId and c2(gs.latitude,gt.latitude)and c2(gs.altitude,gt.altitude)and(c2(gs.longitude,gt.longitude)or c2(gs.latitude,math.pi/2)or c2(gs.latitude,-math.pi/2))end;local function gA(gB,gw,ct,cu,cs)local gv=gB;if gb(gB)and not cu and not cs and not gw and not ct then gv,gw,ct,cu,cs=p(gB,gi)assert(gv,'Argument 1 (position string) is malformed.')else assert(g8(gv),'Argument 1 (systemId) must be a number:'..type(gv))assert(g8(gw),'Argument 2 (bodyId) must be a number:'..type(gw))assert(g8(ct),'Argument 3 (latitude) must be in degrees:'..type(ct))assert(g8(cu),'Argument 4 (longitude) must be in degrees:'..type(cu))assert(g8(cs),'Argument 5 (altitude) must be in meters:'..type(cs))end;gv=tonumber(gv)gw=tonumber(gw)ct=tonumber(ct)cu=tonumber(cu)cs=tonumber(cs)if gw==0 then return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=gw,systemId=gv},MapPosition)end;return setmetatable({latitude=gg*gj(ct,-90,90),longitude=gg*(cu%360),altitude=cs,bodyId=gw,systemId=gv},MapPosition)end;local gC={}gC.__index=gC;gC.__tostring=function(gm,gq)local gD=gq and gq..'  'local gE={}local gr={}for bY in pairs(gm)do table.insert(gr,bY)end;table.sort(gr)for _,gF in ipairs(gr)do bdy=gm[gF]local gG=gp.__tostring(bdy,gD)if gq then table.insert(gE,f('[%s]={\n%s\n%s}',gF,gG,gq))else table.insert(gE,f('  [%s]=%s',gF,gG))end end;if gq then return f('\n%s%s%s',gq,table.concat(gE,',\n'..gq),gq)end;return f('{\n%s\n}',table.concat(gE,',\n'))end;local function gH(gI)local b3={}local pid;for _,bZ in pairs(gI)do local gJ=bZ.planetarySystemId;if type(gJ)~='number'then error('Invalid planetary system ID: '..tostring(gJ))elseif pid and gJ~=pid then error('Mistringmatch planetary system IDs: '..gJ..' and '..pid)end;local gK=bZ.bodyId;if type(gK)~='number'then error('Invalid body ID: '..tostring(gK))elseif b3[gK]then error('Duplicate body ID: '..tostring(gK))end;setmetatable(bZ.center,getmetatable(vec3.unit_x))b3[gK]=setmetatable(bZ,gp)pid=gJ end;return setmetatable(b3,gC)end;b8={}local function gL(gI)return setmetatable({galaxyAtlas=gI or{}},b8)end;b8.__index=function(ga,i)if type(i)=='number'then local system=ga.galaxyAtlas[i]return gH(system)end;return rawget(b8,i)end;b8.__pairs=function(gm)return function(ga,bY)local gM,nv=next(ga,bY)return gM,nv and gH(nv)end,gm.galaxyAtlas,nil end;b8.__tostring=function(gm)local gN={}for _,gO in pairs(gm or{})do local gP=gO:getPlanetarySystemId()local gQ=gC.__tostring(gO,'    ')table.insert(gN,f('  [%s]={%s\n  }',gP,gQ))end;return f('{\n%s\n}\n',table.concat(gN,',\n'))end;b8.BodyParameters=gu;b8.MapPosition=gA;b8.PlanetarySystem=gH;function b8.createBodyParameters(gR,gw,gS,gT,gU,gV,gW)assert(g8(gR),'Argument 1 (planetarySystemId) must be a number:'..type(gR))assert(g8(gw),'Argument 2 (bodyId) must be a number:'..type(gw))assert(g8(gS),'Argument 3 (surfaceArea) must be a number:'..type(gS))assert(g9(gT),'Argument 4 (aPosition) must be an array or vec3:'..type(gT))assert(g9(gU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gU))assert(g8(gV),'Argument 6 (altitude) must be in meters:'..type(gV))assert(g8(gW),'Argument 7 (gravityAtPosition) must be number:'..type(gW))local gx=math.sqrt(gS/4/math.pi)local ak=gx+gV;local gX=vec3(gT)+ak*vec3(gU)local gy=gW*ak*ak;return gu(gR,gw,gx,gX,gy)end;b8.isMapPosition=ge;function b8:getPlanetarySystem(gB)if i==nil then i=0 end;if nv==nil then nv=0 end;local gR=gB;if ge(gB)then gR=gB.systemId end;if type(gR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gC then system=gH(system)end;return system end end end;function gC:castIntersections(gY,cL,gZ,g_)local gZ=gZ or function(f9)return 1.05*f9.radius end;local h0={}if g_ then for _,i in ipairs(g_)do h0[i]=self[i]end else g_={}for bY,f9 in pairs(self)do table.insert(g_,bY)h0[bY]=f9 end end;local function h1(h2,h3)local h4=h0[h2].center-gY;local h5=h0[h3].center-gY;return h4:len()<h5:len()end;table.sort(g_,h1)local h6=cL:normalize()for i,gJ in ipairs(g_)do local f9=h0[gJ]local h7=f9.center-gY;local gx=gZ(f9)local h8=h7:dot(h6)local h9=h8^2-(h7:len2()-gx^2)if h9>=0 then local ha=math.sqrt(h9)local f7=h8+ha;local f8=h8-ha;if f8>0 then return f9,f7,f8 elseif f7>0 then return f9,f7,nil end end end;return nil,nil,nil end;function gC:closestBody(cm)assert(type(cm)=='table','Invalid coordinates.')local hb,f9;local hc=vec3(cm)for _,hd in pairs(self)do local he=(hd.center-hc):len2()if(not f9 or he<hb)and hd.name~="Space"then f9=hd;hb=he end end;return f9 end;function gC:convertToBodyIdAndWorldCoordinates(gB)local hf=gB;if gb(gB)then hf=gA(gB)end;if hf.bodyId==0 then return 0,vec3(hf.latitude,hf.longitude,hf.altitude)end;local hd=self:getBodyParameters(hf)if hd then return hf.bodyId,hd:convertToWorldCoordinates(hf)end end;function gC:getBodyParameters(gB)local gw=gB;if ge(gB)then gw=gB.bodyId end;assert(g8(gw),'Argument 1 (bodyId) must be a number:'..type(gw))return self[gw]end;function gC:getPlanetarySystemId()local _,bZ=next(self)return bZ and bZ.planetarySystemId end;function gp:convertToMapPosition(cp)assert(g9(cp),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cp))local cq=vec3(cp)if self.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cr=cq-self.center;local ak=cr:len()local cs=ak-self.radius;local ct=0;local cu=0;if not c2(ak,0)then local cv=o(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ak)end;return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gp:convertToWorldCoordinates(gB)local hf=gb(gB)and gA(gB)or gB;if hf.bodyId==0 then return vec3(hf.latitude,hf.longitude,hf.altitude)end;assert(ge(hf),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hf.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hf.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local hg=math.cos(hf.latitude)return self.center+(self.radius+hf.altitude)*vec3(hg*math.cos(hf.longitude),hg*math.sin(hf.longitude),math.sin(hf.latitude))end;function gp:getAltitude(cp)return(vec3(cp)-self.center):len()-self.radius end;function gp:getDistance(cp)return(vec3(cp)-self.center):len()end;function gp:getGravity(cp)local hh=self.center-vec3(cp)local hi=hh:len2()return self.GM/hi*hh/math.sqrt(hi)end;return setmetatable(b8,{__call=function(_,...)return gL(...)end})end;function script.onStart()local function hj()local function hk(hl)local hm=dbHud_1.hasKey;for bY,bZ in pairs(hl)do if hm(bZ)then local c8=g(dbHud_1.getStringValue(bZ))if c8~=nil then _G[bZ]=c8;aL=true end end end end;if dbHud_1 then local hm=dbHud_1.hasKey;if not useTheseSettings then hk(b)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"aj=5 end;coroutine.yield()hk(c)if aL then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bg=autoRollPreference;bp=AtmoSpeedLimit;aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bF then LastMaxBrakeInAtmo=0 end;LastStartTime=bF;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"aj=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aw end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hn()local function ho(hp,hq)if hp>hq then hq=hp end;if ContainerOptimization>0 then hq=hq-hq*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hq=hq-hq*FuelTankOptimization*0.05 end;return hq end;local hr=core.getElementNameById;local hs=fuelX~=0 and fuelY~=0;for bY in pairs(ax)do local type=core.getElementTypeById(ax[bY])if p(type,'^.*Atmospheric Engine$')then if p(tostring(core.getElementTagsById(ax[bY])),'^.*vertical.*$')then bN=true end end;if p(type,'^.*Space Engine$')then bD=true;if p(tostring(core.getElementTagsById(ax[bY])),'^.*vertical.*$')then local ht=core.getElementRotationById(ax[bY])if ht[4]<0 then if q(-ht[4],0.1)==0.5 then bB=true end else if q(ht[4],0.1)==0.5 then bC=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hu=j(ax[bY])if hu>10000 then b1=128 elseif hu>1000 then b1=64 elseif hu>150 then b1=32 end end;aS=aS+j(ax[bY])if hs and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hu=j(ax[bY])local hv=l(ax[bY])local hp=0;local dC=r()if type=="Atmospheric Fuel Tank"then local hq=400;local hw=35.03;if hu>10000 then hq=51200;hw=5480 elseif hu>1300 then hq=6400;hw=988.67 elseif hu>150 then hq=1600;hw=182.67 end;hp=hv-hw;if fuelTankHandlingAtmo>0 then hq=hq+hq*fuelTankHandlingAtmo*0.2 end;hq=ho(hp,hq)aP[#aP+1]={ax[bY],hr(ax[bY]),hq,hw,hp,dC}end;if type=="Rocket Fuel Tank"then local hq=320;local hw=173.42;if hu>65000 then hq=40000;hw=25740 elseif hu>6000 then hq=5120;hw=4720 elseif hu>700 then hq=640;hw=886.72 end;hp=hv-hw;if fuelTankHandlingRocket>0 then hq=hq+hq*fuelTankHandlingRocket*0.1 end;hq=ho(hp,hq)aR[#aR+1]={ax[bY],hr(ax[bY]),hq,hw,hp,dC}end;if type=="Space Fuel Tank"then local hq=2400;local hw=182.67;if hu>10000 then hq=76800;hw=5480 elseif hu>1300 then hq=9600;hw=988.67 end;hp=hv-hw;if fuelTankHandlingSpace>0 then hq=hq+hq*fuelTankHandlingSpace*0.2 end;hq=ho(hp,hq)aQ[#aQ+1]={ax[bY],hr(ax[bY]),hq,hw,hp,dC}end end end;if not bN then VertTakeOff,VertTakeOffEngine=false,false end end;local function hx()if gyro~=nil then az=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(au or not au and aw<10000)then for _,bZ in pairs(door)do bZ.toggle()end end;if switch then for _,bZ in pairs(switch)do bZ.toggle()end end;if forcefield and(au or not au==0 and aw<10000)then for _,bZ in pairs(forcefield)do bZ.toggle()end end;if antigrav then bO=antigrav.getState()==1;if bO and not ExternalAGG then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;local hy=d0()if hy~=-1 or not au and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bh~=nil then t:setTargetGroundAltitude(bh)if bh==0 and not S then GearExtended=true;BrakeIsOn=true end else bh=a:getTargetGroundAltitude()if GearExtended then t:setTargetGroundAltitude(LandingGearGroundHeight)else t:setTargetGroundAltitude(TargetHoverHeight)end end;if au and hy~=-1 then bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=au end;local function hz(hA,hB,hC,hD,de,e7,hE,hF,hG)local hH={enableName=hA,disableName=hB,width=hC,height=hD,x=de,y=e7,toggleVar=hE,toggleFunction=hF,drawCondition=hG,hovered=false}table.insert(aI,hH)return hH end;local function hI()local function hJ()if dbHud_1 then local position=bM;local dv=planet.name..". "..#SavedLocations;if radar_1 then local gJ,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gJ~=nil and gJ~=""then dv=dv.." "..radar_1.getConstructName(gJ)end end;local cD={}cD={position=position,name=dv,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cD;table.insert(b3[0],cD)bX()a2="Location saved as "..dv else a2="Databank must be installed to save locations"end end;local function hK()TurnBurn=not TurnBurn end;local function hL(hM)if hM==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hN()hL(1)end;local function hO()local cC=-1;cC=ca(b3[0])if cC>-1 then table.remove(b3[0],cC)end;cC=-1;cC=ca(SavedLocations)if cC~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cC)end;cj()bX()end;local function hP()local dv=AutopilotTargetName;if dv==nil then local f5,c9=c5((bM-CustomTarget.position):len())dv=CustomTarget.name.." "..f5 ..c9 end;if dv==nil then dv="None"end;return"Engage Autopilot: "..dv end;local function hQ()local dv=AutopilotTargetName;if dv==nil then dv=CustomTarget.name end;if dv==nil then dv="None"end;return"Disable Autopilot: "..dv end;local hR=50;local hS=260;local hT=hz("Enable Brake Toggle","Disable Brake Toggle",hS,hR,aJ/2-hS/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hz("Align Prograde","Disable Prograde",hS,hR,aJ/2-hS/2-50-hT.width,aK/2-hR+380,function()return ProgradeIsOn end,hN)hz("Align Retrograde","Disable Retrograde",hS,hR,aJ/2-hS/2+hT.width+50,aK/2-hR+380,function()return RetrogradeIsOn end,hL,function()return av==0 end)local hU=hz(hP,hQ,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,cx)hz("Save Position","Save Position",200,hU.height,hU.x+hU.width+30,hU.y,function()return false end,hJ,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hz("Update Position","Update Position",200,hU.height,hU.x+hU.width+30,hU.y,function()return false end,cA,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hz("Clear Position","Clear Position",200,hU.height,hU.x-200-30,hU.y,function()return true end,hO,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hR=60;hS=300;local de=10;local e7=aK/2-500;hz("Show Help","Hide Help",hS,hR,de,e7,function()return showHelp end,function()showHelp=not showHelp end)local e7=aK/2-300;hz("Enable Turn and Burn","Disable Turn and Burn",hS,hR,de,e7,function()return TurnBurn end,hK)hz("Horizontal Takeoff Mode","Vertical Takeoff Mode",hS,hR,de+hS+20,e7,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bN end)e7=e7+hR+20;hz("Show Orbit Display","Hide Orbit Display",hS,hR,de,e7,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hz("Engage Orbiting","Cancel Orbiting",hS,hR,de+hS+20,e7,function()return IntoOrbit end,cd,function()return av==0 and unit.getClosestPlanetInfluence()>0 end)e7=e7+hR+20;hz("Glide Re-Entry","Cancel Glide Re-Entry",hS,hR,de,e7,function()return Reentry end,function()ao=true;hN()end,function()return planet.hasAtmosphere and not au end)hz("Parachute Re-Entry","Cancel Parachute Re-Entry",hS,hR,de+hS+20,e7,function()return Reentry end,cS,function()return planet.hasAtmosphere and not au end)e7=e7+hR+20;hz("Engage Follow Mode","Disable Follow Mode",hS,hR,de,e7,function()return a0 end,cf,function()return n()==1 end)hz("Enable Repair Arrows","Disable Repair Arrows",hS,hR,de+hS+20,e7,function()return aT end,function()aT=not aT;if aT then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return n()==1 end)e7=e7+hR+20;if not ExternalAGG then hz("Enable AGG","Disable AGG",hS,hR,de,e7,function()return bO end,cV,function()return antigrav~=nil end)end;e7=e7+hR+20;hz(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,hS*2,hR,de,e7,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hV()local hW=nil;local hX=nil;local hY=nil;local hZ=nil;b3=g4()for bY,bZ in pairs(b3[0])do if hW==nil or bZ.center.x<hW then hW=bZ.center.x end;if hX==nil or bZ.center.x>hX then hX=bZ.center.x end;if hY==nil or bZ.center.y<hY then hY=bZ.center.y end;if hZ==nil or bZ.center.y>hZ then hZ=bZ.center.y end end;b4=""local h_=1.1*(hX-hW)/1920;local i0=1.4*(hZ-hY)/1080;for bY,bZ in pairs(b3[0])do local de=960+bZ.center.x/h_;local e7=540+bZ.center.y/i0;b4=b4 ..'<circle cx="'..de..'" cy="'..e7 ..'" r="'..bZ.radius/h_*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bZ.name,"Moon")and not p(bZ.name,"Sanctuary")and not p(bZ.name,"Space")then b4=b4 .."<text x='"..de.."' y='"..e7+bZ.radius/h_*30+20 .."' font-size='28' fill="..aB.." text-anchor='middle' font-family='Montserrat'>"..bZ.name.."</text>"end end;local fM=bM;local de=960+fM.x/h_;local e7=540+fM.y/i0;b4=b4 ..'<circle cx="'..de..'" cy="'..e7 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='"..de.."' y='"..e7-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b4=b4 ..[[</svg>]]b5=h_;b6=i0;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b4)local fM=bM;local de=960+fM.x/h_;local e7=540+fM.y/i0;b4='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='80' y='105' font-size='18' fill="..aB.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b7=screen_2.addContent((de-80)/19.20,(e7-80)/10.80,b4)end end;local function i1()for bY,bZ in pairs(SavedLocations)do table.insert(b3[0],bZ)end;bX()end;local function i2()local ba={}local i3=30000000/3600;local i4=i3*i3;local i5=100;local function i6(bZ)return 1/math.sqrt(1-bZ*bZ/i4)end;function ba.computeAccelerationTime(i7,i8,i9)local ia=i3*math.asin(i7/i3)return(i3*math.asin(i9/i3)-ia)/i8 end;function ba.computeDistanceAndTime(i7,i9,ib,ic,id,ie)id=id or 0;ie=ie or 0;local ig=i7<=i9;local ih=ic*(ig and 1 or-1)/ib;local ii=-ie/ib;local ij=ih+ii;if ig and ij<=0 or not ig and ij>=0 then return-1,-1 end;local ik,il=0,0;if ih~=0 and id>0 then local ia=math.asin(i7/i3)local im=math.pi*(ih/2+ii)local io=ih*id;local ip=i3*math.pi;local bZ=function(ga)local iq=(im*ga-io*math.sin(math.pi*ga/2/id)+ip*ia)/ip;local ir=math.tan(iq)return i3*ir/math.sqrt(ir*ir+1)end;local is=ig and function(gc)return gc>=i9 end or function(gc)return gc<=i9 end;il=2*id;if is(bZ(il))then local it=0;while d(il-it)>0.5 do local ga=(il+it)/2;if is(bZ(ga))then il=ga else it=ga end end end;local iu=i7;local iv=il/i5;for iw=1,i5 do local e4=bZ(iw*iv)ik=ik+(e4+iu)*iv/2;iu=e4 end;if il<2*id then return ik,il end;i7=iu end;local ia=i3*math.asin(i7/i3)local bF=(i3*math.asin(i9/i3)-ia)/ij;local ix=i4*math.cos(ia/i3)/ij;local ak=ix-i4*math.cos((ij*bF+ia)/i3)/ij;return ak+ik,bF+il end;function ba.computeTravelTime(i7,i8,ak)if ak==0 then return 0 end;if i8>0 then local ia=i3*math.asin(i7/i3)local ix=i4*math.cos(ia/i3)/i8;return(i3*math.acos(i8*(ix-ak)/i4)-ia)/i8 end;if i7==0 then return-1 end;assert(i7>0,'Acceleration and initial speed are both zero.')return ak/i7 end;function ba.lorentz(bZ)return i6(bZ)end;return ba end;local function iy()local vec3=require('cpml.vec3')local g5=g5()local function gb(gc)return type(gc)=='string'end;local function g9(ga)return type(ga)=='table'end;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cs)assert(self.body)local ak=cs+self.body.radius;if not c2(ak,0)then local orbit=math.sqrt(self.body.GM/ak)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gB,ew)assert(self.body)assert(g9(gB)or gb(gB))assert(g9(ew))local fM=(gb(gB)or g5.isMapPosition(gB))and self.body:convertToWorldCoordinates(gB)or vec3(gB)local bZ=vec3(ew)local iz=fM-self.body.center;local h5=bZ:len2()local iA=iz:len()local iB=self.body.GM;local iC=((h5-iB/iA)*iz-iz:dot(bZ)*bZ)/iB;local c3=iB/(2*iB/iA-h5)local iD=iC:len()local h6=iC:normalize()local iE=c3*(1-iD)local iF=c3*(1+iD)local iG=iE*h6+self.body.center;local iH=iD<=1 and-iF*h6+self.body.center or nil;local iI=math.sqrt(c3*iB*(1-iD*iD))local iJ=iH and 2*math.pi*math.sqrt(c3^3/iB)local iK=math.acos(iC:dot(iz)/(iD*iA))if iz:dot(bZ)<0 then iK=-(iK-2*math.pi)end;local iL=math.acos((math.cos(iK)+iD)/(1+iD*math.cos(iK)))local iM=iL;if iM<0 then iM=iM+2*math.pi end;local iN=iM-iD*math.sin(iM)local iO=0;local iP=0;local iQ=0;if iJ~=nil then iO=iN/(2*math.pi/iJ)iP=iJ-iO;iQ=iP+iJ/2;if iK-math.pi>0 then iP=iO;iQ=iP+iJ/2 end;if iQ>iJ then iQ=iQ-iJ end end;return{periapsis={position=iG,speed=iI/iE,circularOrbitSpeed=math.sqrt(iB/iE),altitude=iE-self.body.radius},apoapsis=iH and{position=iH,speed=iI/iF,circularOrbitSpeed=math.sqrt(iB/iF),altitude=iF-self.body.radius},currentVelocity=bZ,currentPosition=fM,eccentricity=iD,period=iJ,eccentricAnomaly=iL,meanAnomaly=iN,timeToPeriapsis=iP,timeToApoapsis=iQ}end;local function iR(iS)local hd=g5.BodyParameters(iS.planetarySystemId,iS.bodyId,iS.radius,iS.center,iS.GM)return setmetatable({body=hd},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iR(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()t:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hj()coroutine.yield()hn()coroutine.yield()hx()hI()coroutine.yield()hV()b8=g5()b9=b8(g4())ba=i2()bc=iy()bd=d6()i1()bX()cg()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(av>0 or av==0 and aw<10000)then for _,bZ in pairs(door)do bZ.toggle()end end;if switch then for _,bZ in pairs(switch)do bZ.toggle()end end;if forcefield and(av>0 or av==0 and aw<10000)then for _,bZ in pairs(forcefield)do bZ.toggle()end end;d2()if button then button.activate()end;if SetWaypointOnExit then cl(planet,bM)end end;function script.onTick(iT)local function iU(e4)if not au then return ba.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return ba.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function iV(e4)return ba.computeDistanceAndTime(e4,AutopilotEndSpeed,m(),a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;if iT=="tenthSecond"then local function iW()local iX=system.createData;local iY=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=iY(panelInterplanetary,"value")interplanetaryHeaderText=iX('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=iY(panelInterplanetary,"value")widgetDistanceText=iX('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=iY(panelInterplanetary,"value")widgetTravelTimeText=iX('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=iY(panelInterplanetary,"value")widgetMaxMassText=iX('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=iY(panelInterplanetary,"value")widgetTargetOrbitText=iX('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=iY(panelInterplanetary,"value")widgetCurBrakeDistanceText=iX('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=iY(panelInterplanetary,"value")widgetCurBrakeTimeText=iX('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=iY(panelInterplanetary,"value")widgetMaxBrakeDistanceText=iX('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=iY(panelInterplanetary,"value")widgetMaxBrakeTimeText=iX('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=iY(panelInterplanetary,"value")widgetTrajectoryAltitudeText=iX('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not au then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iZ()u(panelInterplanetary)panelInterplanetary=nil end;local function i_()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bM):len()else AutopilotDistance=(CustomTarget.position-bM):len()end end;local e4=bK;local j0=unit.getThrottle()/100;if AtmoSpeedAssist then j0=I end;local j1,j2=ba.computeDistanceAndTime(bK,MaxGameVelocity,m(),a:maxForceForward()*j0,warmup,0)local a8,a9;if not TurnBurn then a8,a9=iU(MaxGameVelocity)else a8,a9=iV(MaxGameVelocity)end;local _,j3;if not TurnBurn and e4>0 then _,j3=iU(e4)else _,j3=iV(e4)end;local j4=0;local j5=0;if AutopilotCruising or not Autopilot and e4>5 then j5=ba.computeTravelTime(e4,0,AutopilotDistance)elseif a8+j1<AutopilotDistance then j4=AutopilotDistance-(a8+j1)j5=ba.computeTravelTime(8333.0556,0,j4)else local j6=(AutopilotDistance-a8)/j1;j1=AutopilotDistance-a8;j2=j2*j6 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return j5 elseif AutopilotBraking then return j3 elseif AutopilotCruising then return j5+j3 else return j2+a9+j5 end end;local function j7()local j8=LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()return j8 end;if av>0 and not WasInAtmo then if not bQ and AtmoSpeedAssist and(AltitudeHold or Reentry)then bT(1)M=false end end;if bP~=nil then if t:getTargetSpeed(axisCommandId.longitudinal)~=bP then bW(bP,TRUE)else bP=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iW()end;if AutopilotTargetName~=nil then local j9=CustomTarget~=nil;planetMaxMass=j7()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=i_()if j9 and not Autopilot then ak=(bM-CustomTarget.position):len()else ak=(AutopilotTargetCoords-bM):len()end;if not TurnBurn then a8,a9=iU(bK)aa,ab=iU(MaxGameVelocity)else a8,a9=iV(bK)aa,ab=iV(MaxGameVelocity)end;local f5,c9=c5(ak)v(widgetDistanceText,'{"label": "distance", "value": "'..f5 ..'", "unit":"'..c9 ..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cW(travelTime)..'", "unit":""}')f5,c9=c5(a8)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f5 ..'", "unit":"'..c9 ..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cW(a9)..'", "unit":""}')f5,c9=c5(aa)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f5 ..'", "unit":"'..c9 ..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cW(ab)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..f("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f5,c9=c5(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..f("%.2f",f5)..'", "unit":"'..c9 ..'"}')if av>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if av==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iZ()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iT=="oneSecond"then local function ja(fR,jb)if fR==nil then fR=core.g()end;fR=z(fR,5)if jb~=nil and jb or(aO==nil or aO~=fR)then local ew=core.getVelocity()local e4=vec3(ew):len()local jc=g(unit.getData()).maxBrake;if jc~=nil and jc>0 and au then jc=jc/s(e4/100,0.1,1)jc=jc/av;if av>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+jc)/2 else LastMaxBrakeInAtmo=jc end end end;if jc~=nil and jc>0 then LastMaxBrake=jc end;aO=fR end end;local function jd(dd)local je=0;aG=""local jf=aS;local jg=0;local jh=0;local ji=0;local dE=0;local dF=""local jj=core.getElementHitPointsById;for bY in pairs(ax)do local hu=0;local jk=0;jk=j(ax[bY])hu=jj(ax[bY])jg=jg+hu;if hu<jk then if hu==0 then ji=ji+1 else jh=jh+1 end;if aT and#aD==0 then position=vec3(core.getElementPositionById(ax[bY]))local de=position.x-b1;local e7=position.y-b1;local jl=position.z-b1;table.insert(aD,core.spawnArrowSticker(de,e7,jl+1,"down"))table.insert(aD,core.spawnArrowSticker(de,e7,jl+1,"down"))core.rotateSticker(aD[2],0,0,90)table.insert(aD,core.spawnArrowSticker(de+1,e7,jl,"north"))table.insert(aD,core.spawnArrowSticker(de+1,e7,jl,"north"))core.rotateSticker(aD[4],90,90,0)table.insert(aD,core.spawnArrowSticker(de-1,e7,jl,"south"))table.insert(aD,core.spawnArrowSticker(de-1,e7,jl,"south"))core.rotateSticker(aD[6],90,-90,0)table.insert(aD,core.spawnArrowSticker(de,e7-1,jl,"east"))table.insert(aD,core.spawnArrowSticker(de,e7-1,jl,"east"))core.rotateSticker(aD[8],90,0,90)table.insert(aD,core.spawnArrowSticker(de,e7+1,jl,"west"))table.insert(aD,core.spawnArrowSticker(de,e7+1,jl,"west"))core.rotateSticker(aD[10],-90,0,90)table.insert(aD,ax[bY])end elseif aT and#aD>0 and aD[11]==ax[bY]then for dx in pairs(aD)do core.deleteSticker(aD[dx])end;aD={}end end;je=e(jg/jf*100)if je<100 then dd[#dd+1]=[[<g class="pbright txt">]]dE=e(je*2.55)dF=f("rgb(%d,%d,%d)",255-dE,dE,0)if je<100 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dF,je)if ji>0 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dF,ji,jh)elseif jh>0 then dd[#dd+1]=f([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dF,jh)end end;dd[#dd+1]=[[<\g>]]end end;local function jm()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jn()local dC=r()local eU=bK;local jo=dC-ay;if eU>1.38889 then eU=eU/1000;local jp=eU*(dC-ay)TotalDistanceTravelled=TotalDistanceTravelled+jp;ad=ad+jp end;ae=ae+jo;TotalFlightTime=TotalFlightTime+jo;ay=dC end;as=false;ja(nil,true)jn()bd.UpdateRadar()jm()local dd={}dd=bd.DrawOdometer(dd,ad,TotalDistanceTravelled,ae)if ShouldCheckDamage then jd(dd)end;am=table.concat(dd,"")collectgarbage("collect")elseif iT=="fiveSecond"then at=dbHud_1.getStringValue("SPBAutopilotTargetName")if at~=nil and at~=""and at~="SatNavNotChanged"then local c8=g(dbHud_1.getStringValue("SavedLocations"))if c8~=nil then _G["SavedLocations"]=c8;local cC=-1;local cD;for bY,bZ in pairs(SavedLocations)do if bZ.name and bZ.name=="SatNav Location"then cC=bY;break end end;if cC~=-1 then cD=SavedLocations[cC]cC=-1;for bY,bZ in pairs(b3[0])do if bZ.name and bZ.name=="SatNav Location"then cC=bY;break end end;if cC>-1 then b3[0][cC]=cD end;bX()a2=cD.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==at then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cg()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iT=="msgTick"then local dd={}bd.DisplayMessage(dd,"empty")a2="empty"unit.stopTimer("msgTick")aj=3 elseif iT=="animateTick"then bf=true;be=false;ah=0;ai=0;unit.stopTimer("animateTick")elseif iT=="hudTick"then local function jq(dd)local jr=e(s(ak/(aJ/4)*255,0,255))dd[#dd+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ah,ai,e(D+0.5)+jr,e(F+0.5)-jr,e(E+0.5)-jr)end;local function js()for _,bZ in pairs(aI)do if bZ.hovered then if not bZ.drawCondition or bZ.drawCondition()then bZ.toggleFunction()end;bZ.hovered=false end end end;local function jt()local function ju(jv,jw,de,e7,hC,hD)if jv>de and jv<de+hC and jw>e7 and jw<e7+hD then return true else return false end end;local de=ah+aJ/2;local e7=ai+aK/2;for _,bZ in pairs(aI)do bZ.hovered=ju(de,e7,bZ.x,bZ.y,bZ.width,bZ.height)end end;local function jx(dd)local function jy(dd,jz,hover,de,e7,iq,jA,jB,jC,jD,jE)if type(jD)=="function"then jD=jD()end;if type(jE)=="function"then jE=jE()end;dd[#dd+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",de,e7,iq,jA)if jz then dd[#dd+1]=f("%s'",jB)else dd[#dd+1]=jC end;if hover then dd[#dd+1]=" style='stroke:white; stroke-width:2'"else dd[#dd+1]=" style='stroke:black; stroke-width:1'"end;dd[#dd+1]="></rect>"dd[#dd+1]=f("<text x='%f' y='%f' font-size='24' fill='",de+iq/2,e7+jA/2+5)if jz then dd[#dd+1]="black"else dd[#dd+1]="white"end;dd[#dd+1]="' text-anchor='middle' font-family='Montserrat'>"if jz then dd[#dd+1]=f("%s</text>",jD)else dd[#dd+1]=f("%s</text>",jE)end end;local jF="rgb(50,50,50)'"local jG="rgb(210,200,200)"local jH=jy;for _,bZ in pairs(aI)do local hB=bZ.disableName;local hA=bZ.enableName;if type(hB)=="function"then hB=hB()end;if type(hA)=="function"then hA=hA()end;if not bZ.drawCondition or bZ.drawCondition()then jH(dd,bZ.toggleVar(),bZ.hovered,bZ.x,bZ.y,bZ.width,bZ.height,jG,jF,hB,hA)end end end;local dd={}bd.HUDPrologue(dd)if showHud then bd.UpdateHud(dd)else bd.DisplayOrbitScreen(dd)bd.DrawWarnings(dd)end;bd.HUDEpilogue(dd)dd[#dd+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if a2~="empty"then bd.DisplayMessage(dd,a2)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bd.DrawDeadZone(dd)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then jt()jx(dd)if screen_1.getMouseState()==1 then js()end;dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)elseif y()==0 then if n()==1 and a1 then jt()jx(dd)if not be and not bf then local jI=table.concat(dd,"")dd={}dd[#dd+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)dd[#dd+1]=b4;dd[#dd+1]=jI;dd[#dd+1]="</body>"be=true;dd[#dd+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dd,"")system.setScreen(content)elseif bf then local jI=table.concat(dd,"")dd={}dd[#dd+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)dd[#dd+1]=b4;dd[#dd+1]=jI;dd[#dd+1]="</body>"end;if not be then dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)end else js()end else if not a1 and n()==0 then js()if ak>DeadZone then if DisplayDeadZone then jq(dd)end end else jt()jx(dd)end;dd[#dd+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)end;dd[#dd+1]=[[</svg></body>]]content=table.concat(dd,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iT=="apTick"then local function jJ(jK)local gx=500000;local jL,jM,jN=math.huge;local jO=false;local jP=vec3({13771471,7435803,-128971})local jQ=18000000;jL=vec3(jK):dist(jP)if jL<jQ then return true,d(jL-jQ),"Safe Zone",0 end;jM=vec3(jK):dist(vec3(planet.center))if jM<gx then jO=true end;if d(jM-gx)<d(jL-jQ)then return jO,d(jM-gx),planet.name,planet.bodyId else return jO,d(jL-jQ),"Safe Zone",0 end end;local function jR()local jS=-1;local jT=-1;if vBooster then jS=vBooster.distance()end;if hover then jT=hover.distance()end;if jS~=-1 and jT~=-1 then if jS<jT then return jS else return jT end elseif jS~=-1 then return jS elseif jT~=-1 then return jT else return-1 end end;local function jU(jV,jW,jX)jW=jW:project_on_plane(jV)jX=jX:project_on_plane(jV)return o(jW:cross(jX):dot(jV),jW:dot(jX))end;au=k()>0;av=k()aw=core.getAltitude()ar=jR()bF=r()bl=bF;if antigrav then bO=antigrav.getState()==1 end;local jY=1;local jZ=1;local j_=bF-bl;local k0=-math.deg(jU(bG,bJ,bH))local k1=math.deg(jU(bI,bJ,bH))bk=au and k0<-YawStallAngle or k0>YawStallAngle or k1<-PitchStallAngle or k1>PitchStallAngle;bi=system.getMouseDeltaX()bj=system.getMouseDeltaY()if InvertMouse and not a1 then bj=-bj end;V=0;Z=0;U=0;sys=b9[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bc(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bJ)if aw==0 then aw=(bM-planet.center):len()-planet.radius end;local fR=planet:getGravity(core.getConstructWorldPos()):len()*m()bm=0;bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not au then G,H,_,_=jJ(bM)else G=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then ah=screen_1.getMouseX()*aJ;ai=screen_1.getMouseY()*aK elseif y()==0 then if n()==1 and a1 then if not be then ah=ah+bi;ai=ai+bj end else ah=0;ai=0 end else ah=ah+bi;ai=ai+bj;ak=math.sqrt(ah*ah+ai*ai)if not a1 and n()==0 then if userControlScheme=="virtual joystick"then if ah>0 and ah>DeadZone then V=V-(ah-DeadZone)*MouseXSensitivity elseif ah<0 and ah<DeadZone*-1 then V=V-(ah+DeadZone)*MouseXSensitivity else V=0 end;if ai>0 and ai>DeadZone then U=U-(ai-DeadZone)*MouseYSensitivity elseif ai<0 and ai<DeadZone*-1 then U=U-(ai+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then ah=0;ai=0;U=(-utils.smoothstep(bj,-100,100)+0.5)*2*jY;V=(-utils.smoothstep(bi,-100,100)+0.5)*2*jZ else ah=0;ai=0 end end end;local k2=bK>8334;if bK>SpaceSpeedLimit/3.6 and not au and not Autopilot and not k2 then a2="Space Speed Engine Shutoff reached"bT(0)end;if not k2 and LastIsWarping then if not BrakeIsOn then cF()end;if Autopilot then cx()end end;LastIsWarping=k2;if au and av>0.09 then if bK>bp/3.6 and not AtmoSpeedAssist and not aA then BrakeIsOn=true;aA=true elseif not AtmoSpeedAssist and aA then if bK<bp/3.6 then BrakeIsOn=false;aA=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if ao then BrakeIsOn=false;local k3=false;if CustomTarget~=nil then k3=cG(CustomTarget.position-bM,0.01)else k3=cG(vec3(bJ),0.01)end;bg=true;if k3 and(d(bS)<2 or d(bR)>85)and bK>=bp/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;ao=false;aq=true;Autopilot=false;cS()elseif au and AtmoSpeedAssist then bT(1)else bW(e(bp))end elseif bK>Q then cG(vec3(bJ),0.01)end end;if RetrogradeIsOn then if au then RetrogradeIsOn=false elseif bK>Q then cG(-vec3(bJ))end end;if not ProgradeIsOn and ao and not IntoOrbit then if av==0 then R=true;cS()ao=false;aq=true else ao=false;cx()end end;local ck=bL*-1;local dI=bJ.x*ck.x+bJ.y*ck.y+bJ.z*ck.z;if aq and CustomTarget~=nil and(aw<HoldAltitude+200 and aw>HoldAltitude-200)and bK*3.6>bp-100 and d(dI)<20 and av>=0.1 and(CustomTarget.position-bM):len()>2000+aw then cx()aq=false end;if VertTakeOff then bg=true;local k4=HoldAltitude;if dI<-30 then a2="Unable to achieve lift. Safety Landing."ag=0;bg=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bO or HoldAltitude<planet.spaceEngineMinAltitude then if bO then k4=antigrav.getBaseAltitude()end;if aw<k4-100 then bq=0;ag=15;BrakeIsOn=false elseif dI>0 then BrakeIsOn=true;ag=0 elseif dI<-30 then BrakeIsOn=true;ag=15 elseif aw>=k4 then if bO then if Autopilot or VectorToTarget then cc()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"cc()end;ag=0 end else if av>0.08 then bq=0;BrakeIsOn=false;ag=20 elseif av<0.08 and av>0 then BrakeIsOn=false;if bC then bq=0;ag=20 else ag=0;bq=36;bW(3500)end else bg=autoRollPreference;IntoOrbit=true;bA=false;CancelIntoOrbit=false;bu=false;bs=nil;bt=nil;if bz==nil then bz=planet end;by=k4;bx=true;VertTakeOff=false end end;if bq~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k5=s(bq-bR,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k5)local k6=s(vTpitchPID:get(),-1,1)U=k6 end end;if IntoOrbit then if bz==nil then if VectorToTarget then bz=ac else bz=planet end end;if not bx then if bz.hasAtmosphere then by=math.floor(bz.radius+bz.noAtmosphericDensityAltitude+1000)else by=math.floor(bz.radius+bz.surfaceMaxAltitude+1000)end;bx=true end;local cP;local k7=false;local k8,k9=c5(by)local ka=k8 ..k9;if bw.VectorToTarget then cP=CustomTarget.position-bM end;local kb,kc=bc(bz):escapeAndOrbitalSpeed((bM-bz.center):len()-bz.radius)local kd=bS;if not bu then bT(0)bt=0;br="Aligning to orbital path - OrbitHeight: "..ka;local ke=false;local kf=false;if bw.VectorToTarget then cG(cP:normalize():project_on_plane(bL))k7=bH:dot(cP:project_on_plane(bG):normalize())>0.95 else cG(bJ)k7=k0<0.5;if bK<150 then k7=true end end;U=0;bs=0;if bR<=bs+1 and bR>=bs-1 then ke=true else ke=false end;if kd<=bt+1 and kd>=bt-1 then kf=true else kf=false end;if ke and kf and k7 then bs=nil;bt=nil;bu=true end else if bw.VectorToTarget then cG(cP:normalize():project_on_plane(bL))elseif bK>150 then cG(bJ)end;U=0;if bw.VectorToTarget then local a8,_=ba.computeDistanceAndTime(bK,bp/3.6,m(),0,0,LastMaxBrake)if bA and cP:len()>15000+a8+aw then br="Orbiting to Target"elseif bA or cP:len()<15000+a8+aw then a2="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;R=true;aq=true;bw.VectorToTarget,bw.AutopilotAlign=false,false;cd()cS()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and aw>by*0.9 and aw<by*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=by*0.99 and orbit.apoapsis.altitude>=by*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bA then if bA then BrakeIsOn=false;bT(0)bA=true;bs=0;if not bw.VectorToTarget then a2="Orbit complete"cd()end else bE=bE+1;if bE>=2 then bA=true end end else br="Adjusting Orbit - OrbitHeight: "..ka;bv=true;bW(kc*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local kg=dI;local kh=aw-by;local ki=d(kh)if dI<10 and d(bR)<10 and ki<100 then kg=dI*2 end;if kg<10 and d(bR)<10 and ki<100 then kg=kg*2 end;if kg<5 and d(bR)<5 and ki<100 then kg=kg*4 end;VSpdPID:inject(kg)bs=s(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kh)bs=s(bs-s(OrbitAltPID:get(),-15,15),-90,90)end end else local kj=2.75;local kk=d(q(kb*kj))local kl=kk%50;if kl>0 then kk=kk-kl+50 end;BrakeIsOn=false;if aw<by*0.8 then br="Escaping planet gravity - OrbitHeight: "..ka;bs=utils.map(dI,200,0,-15,80)elseif aw>=by*0.8 and aw<by*1.15 then br="Approaching orbital corridor - OrbitHeight: "..ka;kk=kk*0.75;bs=utils.map(dI,100,-100,-15,65)elseif aw>=by*1.15 and aw<by*1.5 then br="Approaching orbital corridor - OrbitHeight: "..ka;kk=kk*0.75;if dI<0 or bv then bs=utils.map(aw,by*1.5,by*1.01,-30,0)else bs=utils.map(aw,by*0.99,by*1.5,0,30)end elseif aw>by*1.5 then br="Reentering orbital corridor - OrbitHeight: "..ka;bs=-85;local km=utils.map(dI,-150,-400,1,0.55)kk=kk*km end;bW(e(kk))end end;if bs~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kn=bs-bR;OrbitPitchPID:inject(kn)local ko=s(OrbitPitchPID:get(),-0.5,0.5)U=ko end end;if Autopilot and av==0 and not ao then local kp,kq=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kr=(CustomTarget.position-ac.center):normalize()local ks=kr:project_on_plane((ac.center-bM):normalize()):normalize()local kt=ac.center+ks*(ac.radius+AutopilotTargetOrbit)local ku=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bM-kt):len()<(bM-ku):len()then kp=kt;AutopilotTargetCoords=kp else kp=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))AutopilotTargetCoords=kp end;cl(ac,AutopilotTargetCoords)kq=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kq=true;TargetSet=true;AutopilotRealigned=true;kp=CustomTarget.position+(bM-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kr=(bM+bJ*100000-ac.center):normalize()local ks=kr:project_on_plane((ac.center-bM):normalize()):normalize()if ks:len()<1 then kr=(bM+bH*100000-ac.center):normalize()ks=kr:project_on_plane((ac.center-bM):normalize()):normalize()end;kp=ac.center+ks*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kp;TargetSet=true;kq=true;AutopilotRealigned=true;cl(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kp)-bM):len()local f6,f7,f8=b9:getPlanetarySystem(0):castIntersections(bM,bJ:normalize(),function(f9)if f9.noAtmosphericDensityAltitude>0 then return f9.radius+f9.noAtmosphericDensityAltitude else return f9.radius+f9.surfaceMaxAltitude*1.5 end end)local fa=f7;if f8~=nil and f7~=nil then fa=math.min(f8,f7)end;if fa~=nil and fa<AutopilotDistance and f6.name==ac.name then AutopilotDistance=fa end;local k3=true;local kv=(ac.center-(bM+vec3(bJ):normalize()*AutopilotDistance)):len()-ac.radius;local f5,c9=c5(kv)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f5 ..'", "unit":"'..c9 ..'"}')local a8,a9;if not TurnBurn then a8,a9=iU(bK)else a8,a9=iV(bK)end;if bK>300 and AutopilotAccelerating then local cP=vec3(kp)-bM;local kw=s(math.deg(jU(bG,bJ:normalize(),cP:normalize()))*bK/500,-90,90)local kx=s(math.deg(jU(bI,bJ:normalize(),cP:normalize()))*bK/500,-90,90)if d(kw)<20 and d(kx)<20 then kw=kw*2;kx=kx*2 end;if d(kw)<2 and d(kx)<2 then kw=kw*2;kx=kx*2 end;local k0=-math.deg(jU(bG,bH,bJ:normalize()))local k1=-math.deg(jU(bI,bH,bJ:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kx-k1)local ky=s(apPitchPID:get(),-1,1)U=U+ky;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kw-k0)local kz=s(apYawPID:get(),-1,1)V=V+kz;kq=true;if d(kw)>2 or d(kx)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kv<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bc(ac):escapeAndOrbitalSpeed(kv)end end;if not AutopilotCruising and not AutopilotBraking and not kq then k3=cG((kp-bM):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then k3=cG(-vec3(bJ):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bT(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local j0=unit.getThrottle()if AtmoSpeedAssist then j0=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or j0==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bT(0)end;if AutopilotDistance<=a8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bT(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bT(1,true)end;local _,kc=bc(ac):escapeAndOrbitalSpeed((bM-planet.center):len()-planet.radius)local cP;if CustomTarget~=nil then cP=CustomTarget.position-bM end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bK<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bK<=kc and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bT(0)P=false;ProgradeIsOn=true;ao=true;cl(ac,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,kc=bc(ac):escapeAndOrbitalSpeed((bM-planet.center):len()-planet.radius)if bK<=kc then if CustomTarget~=nil then if bJ:normalize():dot(cP:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;cl(ac,CustomTarget.position)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bT(0)P=false;ProgradeIsOn=true;ao=true;BrakeIsOn=false;cl(ac,CustomTarget.position)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bT(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ao=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local j0=unit.getThrottle()if AtmoSpeedAssist then j0=I end;if j0>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if k3 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ao then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bI;AutopilotShipUp=bG;AutopilotShipRight=bI end;AutopilotRealigned=true elseif k3 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bT(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and av>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bT(0)P=false;ProgradeIsOn=true;ao=true;cl(ac,CustomTarget.position)end;if a0 then bg=true;local kx=0;local fM=bM+vec3(unit.getMasterPlayerRelativePosition())local kA=fM-bM;local kB=vec3(kA):project_on(bH):len()local kC=vec3(kA):project_on(bI):len()local ak=math.sqrt(kB*kB+kC*kC)cG(kA:normalize())local kD=40;local kE=ak<kD;local kF=100;local kG=s((ak-kD)/2,10,kF)U=0;local k3=d(V)<0.1;if k3 and bK<kG and not kE then BrakeIsOn=false;kx=-20 else BrakeIsOn=true;kx=0 end;local kH=0;if d(kx-bR)>kH then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kx-bR)local ky=pitchPID:get()U=ky end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cz=unit.getClosestPlanetInfluence()>0;local kI=HoldAltitude-aw;local kJ=500+bK;local kK=1;if AutoTakeoff then kK=s(bK/100,0.1,1)end;local kx=(utils.smoothstep(kI,-kJ,kJ)-0.5)*2*MaxPitch*kK;if not Reentry and not ao and not VectorToTarget and bH:dot(bJ:normalize())<0.99 then kx=(utils.smoothstep(kI,-kJ*s(20-19*av*10,1,20),kJ*s(20-19*av*10,1,20))-0.5)*2*MaxPitch*s(2-av*10,1,2)*kK end;if not AltitudeHold then kx=0 end;if LockPitch~=nil then if cz and not IntoOrbit then kx=LockPitch else LockPitch=nil end end;bg=true;local kL=U;if Reentry then local kM=e(bp)local kN,kO=ba.computeDistanceAndTime(bK,kM/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kP=aw-(planet.noAtmosphericDensityAltitude+5000)if not bQ and aw>planet.noAtmosphericDensityAltitude+5000 and bK<=kM/3.6 and bK>kM/3.6-10 and d(bJ:normalize():dot(bH))>0.9 then bT(0)elseif bQ and(kN>-1 and kP<=kN or aw<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bW(kM,true)if not R then kx=-80;if av>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kx=0;bg=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aw>planet.noAtmosphericDensityAltitude+5000 then bg=true elseif aw<=planet.noAtmosphericDensityAltitude+5000 then bW(kM)if not bQ and t:getTargetSpeed(axisCommandId.longitudinal)==bp then R=false;Reentry=false;bg=true end end end;if bK>Q and not ap and not VectorToTarget and not BrakeLanding and ForceAlignment then cG(vec3(bJ))end;if(VectorToTarget or ap)and AutopilotTargetIndex>0 and av>0.01 then local cP;if CustomTarget~=nil then cP=CustomTarget.position-bM else cP=ac.center-bM end;local kw=math.deg(jU(bL:normalize(),bJ,cP))*2;local kQ=math.rad(d(bS))if bK>minRollVelocity and av>0.01 then local kR=s(90-kx*2,-90,90)bm=s(kw*2,-kR,kR)local kS=kw;kw=s(s(kw,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kQ)+4*(bR-kx)*math.sin(math.rad(bS)),-YawStallAngle*0.80,YawStallAngle*0.80)kx=s(s(kx*math.cos(kQ),-PitchStallAngle*0.80,PitchStallAngle*0.80)+d(s(d(kS)*math.sin(kQ),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bm=0;kw=s(kw,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kT=k0-kw;if not bk and bK>minRollVelocity and av>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kT)local kz=s(yawPID:get(),-1,1)V=V+kz elseif au and ar>-1 or bK<minRollVelocity then cG(cP)elseif bk and av>0.01 then if(k0<-YawStallAngle or k0>YawStallAngle)and av>0.01 then cG(bJ)end;if(k1<-PitchStallAngle or k1>PitchStallAngle)and av>0.01 then kx=s(bR-k1,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not ap then local k4=planet:getAltitude(CustomTarget.position)local kP=math.sqrt(cP:len()^2-(aw-k4)^2)local kU=LastMaxBrakeInAtmo;if kU then kU=kU*s(bK/100,0.1,1)*av else kU=LastMaxBrake end;if av<0.01 then kU=LastMaxBrake end;local kV=bJ:len()-d(dI)local kW=vec3(core.getWorldAirFrictionAcceleration())local kX=math.sqrt(kW:len()-kW:project_on(ck):len())*m()if bK>100 then a8,a9=ba.computeDistanceAndTime(bK,100,m(),0,0,kU+kX)local kY,kZ=ba.computeDistanceAndTime(100,0,m(),0,0,kU/2)a8=a8+kY else a8,a9=ba.computeDistanceAndTime(bK,0,m(),0,0,kU/2)end;StrongBrakes=true;if not ap and not Reentry and kP<=a8+bK*j_/2 and(bJ:project_on_plane(bL):normalize():dot(cP:project_on_plane(bL):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bT(0)if AltitudeHold then ce()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kV<0.1 or kP<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kP)then if not bO then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kP end elseif VectorToTarget and av==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ap or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local cP=CustomTarget.position-bM;local k4=planet:getAltitude(CustomTarget.position)local kP=math.sqrt(cP:len()^2-(aw-k4)^2)local kU=LastMaxBrakeInAtmo;if kU then a8,a9=ba.computeDistanceAndTime(bK,0,m(),0,0,kU/2)StrongBrakes=true;if kP<=a8+bK*j_/2 and bJ:project_on_plane(bL):normalize():dot(cP:project_on_plane(bL):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;ao=false;aq=true;Autopilot=false;cS()end end;LastDistanceToTarget=kP end end end;if av==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ap or IntoOrbit or Reentry)then if not bA and not IntoOrbit then by=HoldAltitude;bx=true;if VectorToTarget then bw.VectorToTarget=true end;cd()VectorToTarget=false;bu=true end end;if bk and av>0.01 and ar==-1 and bK>minRollVelocity and VectorStatus~="Finalizing Approach"then cG(bJ)kx=s(bR-k1,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end;U=kL;local d1=-1;if BrakeLanding then kx=0;local k_=false;local l0=30;if bb~=nil and bb>0 then local kX=0;local fN=s(av,0.4,2)local kU=LastMaxBrakeInAtmo*s(bK/100,0.1,1)*fN;local l1=bb*fN+kU+kX-fR;local l2=kU/2+kX-fR;local l3=bK-math.sqrt(d(l2/2)*20/(0.5*m()))*utils.sign(l2)if l3<0 then l3=0 end;local l4;if bK>100 then local l5,_=ba.computeDistanceAndTime(bK,100,m(),0,0,kU)local l6,_=ba.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kU))l4=l5+l6 else l4=ba.computeDistanceAndTime(bK,0,m(),0,0,math.sqrt(kU))end;if l4<20 then BrakeIsOn=false else local l7=0;if l3>100 then local l8,_=ba.computeDistanceAndTime(l3,100,m(),0,0,l1)local l9,_=ba.computeDistanceAndTime(100,0,m(),0,0,bb*fN+math.sqrt(kU)+kX-fR)l7=l8+l9 else l7,_=ba.computeDistanceAndTime(l3,0,m(),0,0,bb*fN+math.sqrt(kU)+kX-fR)end;l7=(l7+15+bK*j_)*1.1;local la=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if la then local k4=planet:getAltitude(CustomTarget.position)local lb=aw-k4-100;local cP=CustomTarget.position-bM;local lc=math.sqrt(cP:len()^2-(aw-k4)^2)if lc>100 then la=false elseif lb<=l7 or l7==-1 then BrakeIsOn=true;k_=true else BrakeIsOn=false;k_=true end end;if not la and CalculateBrakeLandingSpeed then if l7>=l0 then BrakeIsOn=true else BrakeIsOn=false end;k_=true end end end;if not bQ then bT(0)end;t:setTargetGroundAltitude(500)t:activateGroundEngineAltitudeStabilization(500)d1=ar;if d1>-1 then bg=autoRollPreference;if bK<1 or bJ:normalize():dot(bL)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)ag=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bJ:normalize():dot(-ck)<0.999 then BrakeIsOn=true elseif dI<-brakeLandingRate and not k_ then BrakeIsOn=true elseif not k_ then BrakeIsOn=false end end;if AutoTakeoff or ap then local f6,f8,f7;if AutopilotTargetCoords~=nil then f6,f8,f7=b9:getPlanetarySystem(0):castIntersections(bM,(AutopilotTargetCoords-bM):normalize(),function(f9)return f9.radius+f9.noAtmosphericDensityAltitude end)end;if bO then if aw>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;bT(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(kx)<15 and aw/HoldAltitude>0.75 then AutoTakeoff=false;if not ap then if bQ and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif ap and bK<Q then Autopilot=true;ap=false;AltitudeHold=false;AutoTakeoff=false;bT(0)elseif ap then bT(0)BrakeIsOn=true end elseif ap and av==0 and ac~=nil and(f6==nil or f6.name==ac.name)then Autopilot=true;ap=false;AltitudeHold=false;AutoTakeoff=false;if not bQ then bT(0)end;AutopilotAccelerating=true end end;local ld=ar>-1;local le=bR;if(VectorToTarget or ap)and not ld and bK>minRollVelocity and av>0.01 then local kQ=math.rad(d(bS))le=bR*d(math.cos(kQ))+k1*math.sin(kQ)end;local lf=s(kx-le,-PitchStallAngle*0.80,PitchStallAngle*0.80)if av<0.01 and VectorToTarget then lf=s(kx-le,-85,MaxPitch)elseif av<0.01 then lf=s(kx-le,-MaxPitch,MaxPitch)end;if d(bS)<5 or VectorToTarget or BrakeLanding or ld or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(lf)local ky=pitchPID:get()U=U+ky end end;if antigrav~=nil and(antigrav and not ExternalAGG and aw<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function lg(lh,kG)local li=vec3()local lj=vec3()if lh==axisCommandId.longitudinal then li=vec3(core.getConstructOrientationForward())lj=bH elseif lh==axisCommandId.vertical then li=vec3(core.getConstructOrientationUp())lj=bG elseif lh==axisCommandId.lateral then li=vec3(core.getConstructOrientationRight())lj=bI else return vec3()end;local lk=vec3(core.getWorldGravity())local ll=lk:dot(lj)local lm=vec3(core.getWorldAirFrictionAcceleration())local ln=lm:dot(lj)local lo=vec3(core.getVelocity())local lp=lo:dot(li)local lq=kG*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lq-lp)local lr=targetSpeedPID2:get()local ls=(lr-ln-ll)*lj;return ls end;local function lt(lh,kG)local li=vec3()local lj=vec3()if lh==axisCommandId.longitudinal then li=vec3(core.getConstructOrientationForward())lj=bH elseif lh==axisCommandId.vertical then li=vec3(core.getConstructOrientationUp())lj=bG elseif lh==axisCommandId.lateral then li=vec3(core.getConstructOrientationRight())lj=bI else return vec3()end;local lk=vec3(core.getWorldGravity())local ll=lk:dot(lj)local lm=vec3(core.getWorldAirFrictionAcceleration())local ln=lm:dot(lj)local lo=vec3(core.getVelocity())local lp=lo:dot(li)local lq=kG*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lq-lp)local lr=targetSpeedPID:get()local ls=(lr-ln-ll)*lj;return ls end;local function lu(lv,dL,c1)local lw=lv:cross(c1):normalize_inplace()local ex=math.acos(s(lw:dot(-dL),-1,1))*constants.rad2deg;if lw:cross(-dL):dot(c1)<0 then ex=-ex end;return ex end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bO and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bQ=t:getAxisCommandType(0)==axisCommandType.byThrottle;if bQ and M then bT(0)M=false elseif not bQ and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lx=s(T+U+system.getControlDeviceForwardInput(),-1,1)local ly=s(W+Z+system.getControlDeviceYawInput(),-1,1)local lz=s(X+V-system.getControlDeviceLeftRightInput(),-1,1)local lA=Y;bL=vec3(core.getWorldVertical())if bL==nil or bL:len()==0 then bL=(planet.center-bM):normalize()end;bM=vec3(core.getConstructWorldPos())bG=vec3(core.getConstructWorldOrientationUp())bH=vec3(core.getConstructWorldOrientationForward())bI=vec3(core.getConstructWorldOrientationRight())bJ=vec3(core.getWorldVelocity())bK=vec3(bJ):len()bS=getRoll(bL,bH,bI)local lB=bS/180*math.pi;local lC=math.cos(lB)local lD=math.sin(lB)bR=lu(bL,bH,bI*lC+bG*lD)local lE=bJ:normalize()local lF=getRoll(bL,bH,bI)local lG=d(lF)local lH=utils.sign(lF)local lI=vec3(core.getWorldAngularVelocity())local lJ=lx*pitchSpeedFactor*bI+ly*rollSpeedFactor*bH+lz*yawSpeedFactor*bG;if bL:len()>0.01 and(av>0.0 or ProgradeIsOn or Reentry or ao or AltitudeHold or IntoOrbit)then if bg==true and d(bm-lF)>autoRollRollThreshold and ly==0 and d(bR)<85 then local lK=bm;local lL=autoRollFactor;if av==0 then lL=lL/4;bm=0;lK=0 end;if rollPID==nil then rollPID=pid.new(lL*0.01,0,lL*0.1)end;rollPID:inject(lK-lF)local lM=rollPID:get()lJ=lJ+lM*bH end end;if bL:len()>0.01 and av>0.0 then local lN=20.0;if turnAssist==true and lG>lN and lx==0 and lz==0 then local lO=turnAssistFactor*0.1;local lP=turnAssistFactor*0.025;local lQ=(lG-lN)/(180-lN)*180;local lR=0;if lQ<90 then lR=lQ/90 elseif lQ<180 then lR=(180-lQ)/90 end;lR=lR*lR;local lS=-lH*lP*(1.0-lR)local lT=lO*lR;lJ=lJ+lT*bI+lS*bG end end;local lU=1;local lV=0;local lW=1;if system.getMouseWheel()>0 then if AltIsOn then if av>0 or Reentry then bp=s(bp+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if av>0 or Reentry then bp=s(bp-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I-speedChangeLarge/100,-1,1),2)end end;J=0;local dI=-bL:dot(bJ)if au and AtmoSpeedAssist and bQ then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bp/3.6-bJ:dot(bH))local lX=throttlePID:get()L=s(lX,-1,1)if L<I and av>0.005 then K=true;t:setThrottleCommand(axisCommandId.longitudinal,s(L,0.01,1))else K=false;t:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bJ:len()-bp/3.6)local lY=s(brakePID:get(),0,1)if av>0 and dI<-80 or av>0.005 then J=lY end;if J>0 then if K and L==0.01 then t:setThrottleCommand(axisCommandId.longitudinal,0)end else L=s(L,0.01,1)end;local lZ=''local l_=vec3()local m0=lg(axisCommandId.vertical,ag*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",m0,lV)local m1='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then m1=m1 ..ExtraLongitudeTags end;local m2=t:getAxisCommandType(axisCommandId.longitudinal)local m3=t:composeAxisAccelerationFromThrottle(m1,axisCommandId.longitudinal)local m4=lt(axisCommandId.lateral,LeftAmount*1000)lZ=lZ..' , '.."lateral airfoil , lateral ground "l_=l_+m4;if l_:len()>constants.epsilon then a:setEngineForceCommand(lZ,l_,lV,'','','',lW)end;a:setEngineForceCommand(m1,m3,lU)local m5='thrust analog vertical fueled 'local m6='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m6=m6 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m5=m5 ..ExtraVerticalTags end;if ag~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m5,m0,lU)else a:setEngineForceCommand(m5,vec3(),lU)end;if LeftAmount~=0 then a:setEngineForceCommand(m6,m4,lU)else a:setEngineForceCommand(m6,vec3(),lU)end;if lA==0 then lA=J end;local m7=-lA*(brakeSpeedFactor*bJ+brakeFlatFactor*lE)a:setEngineForceCommand('brake',m7)else if AtmoSpeedAssist then t:setThrottleCommand(axisCommandId.longitudinal,I)end;local kG=unit.getAxisCommandValue(0)if not bQ then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bJ:len()-kG/3.6)local lY=s(brakePID:get(),0,1)lA=s(lA+lY,0,1)end;local m7=-lA*(brakeSpeedFactor*bJ+brakeFlatFactor*lE)a:setEngineForceCommand('brake',m7)local lZ=''local l_=vec3()local m8=false;local m1='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then m1=m1 ..ExtraLongitudeTags end;local m2=t:getAxisCommandType(axisCommandId.longitudinal)if m2==axisCommandType.byThrottle then local m3=t:composeAxisAccelerationFromThrottle(m1,axisCommandId.longitudinal)a:setEngineForceCommand(m1,m3,lU)elseif m2==axisCommandType.byTargetSpeed then local m3=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lZ=lZ..' , '..m1;l_=l_+m3;if t:getTargetSpeed(axisCommandId.longitudinal)==0 or t:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-t:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m8=true end end;local m6='thrust analog lateral 'if ExtraLateralTags~="none"then m6=m6 ..ExtraLateralTags end;local m9=t:getAxisCommandType(axisCommandId.lateral)if m9==axisCommandType.byThrottle then local ma=t:composeAxisAccelerationFromThrottle(m6,axisCommandId.lateral)a:setEngineForceCommand(m6,ma,lU)elseif m9==axisCommandType.byTargetSpeed then local m4=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lZ=lZ..' , '..m6;l_=l_+m4 end;local m5='thrust analog vertical 'if ExtraVerticalTags~="none"then m5=m5 ..ExtraVerticalTags end;local mb=t:getAxisCommandType(axisCommandId.vertical)if mb==axisCommandType.byThrottle then local m0=t:composeAxisAccelerationFromThrottle(m5,axisCommandId.vertical)if ag~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m5,m0,lU,'airfoil','ground','',lW)else a:setEngineForceCommand(m5,vec3(),lU)a:setEngineForceCommand('airfoil vertical',m0,lU,'airfoil','','',lW)a:setEngineForceCommand('ground vertical',m0,lU,'ground','','',lW)end elseif mb==axisCommandType.byTargetSpeed then if ag<0 then a:setEngineForceCommand('hover',vec3(),lU)end;local mc=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lZ=lZ..' , '..m5;l_=l_+mc end;if l_:len()>constants.epsilon then if Y~=0 or m8 or d(lE:dot(bH))<0.8 then lZ=lZ..', brake'end;a:setEngineForceCommand(lZ,l_,lV,'','','',lW)end end;local md=torqueFactor*(lJ-lI)local me=vec3(core.getWorldAirFrictionAngularAcceleration())md=md-me;a:setEngineTorqueCommand('torque',md,lU,'airfoil','','',lW)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local e4=vec3(core.getVelocity()):len()local mf=0.15;if not bQ then local mg=t:getTargetSpeed(axisCommandId.longitudinal)if e4*3.6>mg*(1-mf)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4*3.6<mg*(1-mf)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local j0=unit.getThrottle()if AtmoSpeedAssist then j0=I*100 end;local kG=j0/100;if k==0 then kG=kG*MaxGameVelocity;if e4>=kG*(1-mf)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4<kG*(1-mf)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kM=e(bp)kG=kG*kM/3.6;if e4>=kG*(1-mf)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e4<kG*(1-mf)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c8=coroutine.resume(beginSetup)if c8 then SetupComplete=true end else a:update()if not be and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(mh)local C=1;local function mi(mj)if mj then C=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then by=by+C*a3;if by<planet.noAtmosphericDensityAltitude then by=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a3 end else t:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function mk(mj)if mj then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+C*speedChangeLarge/100,-1,1)else t:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if mj then C=1 else C=nil end;cj(C)end end;if mh=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bT(0)if(vBooster or hover)and ar==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bg=true;GearExtended=false else BrakeIsOn=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then a.control.extendLandingGears()end else if S then a.control.retractLandingGears()end;t:setTargetGroundAltitude(TargetHoverHeight)end elseif mh=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mh=="forward"then T=T-1 elseif mh=="backward"then T=T+1 elseif mh=="left"then W=W-1 elseif mh=="right"then W=W+1 elseif mh=="yawright"then X=X-1 elseif mh=="yawleft"then X=X+1 elseif mh=="straferight"then t:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mh=="strafeleft"then t:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mh=="up"then ag=ag+1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mh=="down"then ag=ag-1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mh=="groundaltitudeup"then mi()elseif mh=="groundaltitudedown"then mi(true)elseif mh=="option1"then cj()toggleView=false elseif mh=="option2"then cj(1)toggleView=false elseif mh=="option3"then local function ml()aH=not aH;if not aH then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ml()toggleView=false elseif mh=="option4"then cx()toggleView=false elseif mh=="option5"then local function mm()if LockPitch==nil then LockPitch=bR;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mm()toggleView=false elseif mh=="option6"then ce()toggleView=false elseif mh=="option7"then toggleView=false elseif mh=="option8"then cf()toggleView=false elseif mh=="option9"then if gyro~=nil then gyro.toggle()az=gyro.getState()==1 end;toggleView=false elseif mh=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif n()==1 and ShiftShowsRemoteButtons then a1=true;bf=false;be=false end elseif mh=="brake"then if BrakeToggleStatus then cF()elseif not BrakeIsOn then cF()else BrakeIsOn=true end elseif mh=="lalt"then AltIsOn=true;if n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif mh=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif mh=="stopengines"then local function mn()if as then as=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;ao=false;ap=false;R=false;bg=autoRollPreference;VectorToTarget=false;TurnBurn=false;az=false;LockPitch=nil;IntoOrbit=false else as=true end end;t:resetCommand(axisCommandId.longitudinal)mn()I=0 elseif mh=="speedup"then mk()elseif mh=="speeddown"then mk(true)elseif mh=="antigravity"and not ExternalAGG then if antigrav~=nil then cV()end end end;function script.onActionStop(mh)local function mo()if not ExternalAGG and bO then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if mh=="forward"then T=0 elseif mh=="backward"then T=0 elseif mh=="left"then W=0 elseif mh=="right"then W=0 elseif mh=="yawright"then X=0 elseif mh=="yawleft"then X=0 elseif mh=="straferight"then t:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mh=="strafeleft"then t:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mh=="up"then ag=0;t:updateCommandFromActionStop(axisCommandId.vertical,-1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mh=="down"then ag=0;t:updateCommandFromActionStop(axisCommandId.vertical,1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mh=="groundaltitudeup"then mo()toggleView=false elseif mh=="groundaltitudedown"then mo()toggleView=false elseif mh=="lshift"then if y()==1 then a1=false;ah=0;ai=0;x(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then a1=false;bf=false;be=false end elseif mh=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cF()else BrakeIsOn=false end end elseif mh=="lalt"then if n()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(mh)local C=1;local function mp(mj)if mj then C=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=a6*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then by=by+C*a5;if by<planet.noAtmosphericDensityAltitude then by=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a5 end;a5=a5*1.05 else t:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function mq(mj)if mj then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+C*speedChangeSmall/100,-1,1)else t:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if mh=="groundaltitudeup"then mp()elseif mh=="groundaltitudedown"then mp(true)elseif mh=="speedup"then mq()elseif mh=="speeddown"then mq(true)end end;function script.onInputText(cT)local function mr()for bY,bZ in pairs(b)do dbHud_1.setStringValue(bZ,h(nil))end;for bY,bZ in pairs(c)do if bZ~="SavedLocations"then dbHud_1.setStringValue(bZ,h(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"aj=5;aL=false;af=true end;local function ms(mt,planet,fM)local function mu(fM)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gi='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gv,gw,ct,cu,cs=p(fM,gi)if gv=="0"and gw=="0"then return vec3(tonumber(ct),tonumber(cu),tonumber(cs))end;cu=math.rad(cu)ct=math.rad(ct)local planet=b3[tonumber(gv)][tonumber(gw)]local hg=math.cos(ct)local mv=vec3(hg*math.cos(cu),hg*math.sin(cu),math.sin(ct))return planet.center+(planet.radius+cs)*mv end;if dbHud_1 then local cD={}local position=mu(fM)if planet.name=="Space"then cD={position=position,name=mt,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cD={position=position,name=mt,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cD;table.insert(b3[0],cD)bX()else a2="Databank must be installed to save locations"end end;local i;local mw="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mx,my=nil,nil;local mz="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cT," ")mx=cT;if i~=nil then mx=string.sub(cT,0,i-1)my=string.sub(cT,i+1)end;if mx=="/help"or mx=="/commands"then for fX in string.gmatch(mz,"([^\n]+)")do system.print(fX)end;return elseif mx=="/setname"then if my==nil or my==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cA(my)else a2="Select a saved target to rename first"end elseif mx=="/addlocation"then if my==nil or my==""or string.find(my,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(my,"::")local mt=string.sub(my,1,i-2)local fM=string.sub(my,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gi='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gv,gw,ct,cu,cs=p(fM,gi)local planet=b3[tonumber(gv)][tonumber(gw)]ms(mt,planet,fM)a2="Added "..mt.." to saved locations,\nplanet "..planet.name.." at "..fM;aj=5 elseif mx=="/agg"then if my==nil or my==""then a2="Usage: ah-agg targetheight"return end;my=tonumber(my)if my<1000 then my=1000 end;AntigravTargetAltitude=my;a2="AGG Target Height set to "..my elseif mx=="/G"then if my==nil or my==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if my=="dump"then for bY,bZ in pairs(b)do if type(_G[bZ])=="boolean"then if _G[bZ]==true then system.print(bZ.." true")else system.print(bZ.." false")end elseif _G[bZ]==nil then system.print(bZ.." nil")else system.print(bZ.." ".._G[bZ])end end;return end;i=string.find(my," ")local mA=string.sub(my,0,i-1)local mB=string.sub(my,i+1)for bY,bZ in pairs(b)do if bZ==mA then a2="Variable "..mA.." changed to "..mB;local mC=type(_G[bZ])if mC=="number"then mB=tonumber(mB)elseif mC=="boolean"then if string.lower(mB)=="true"then mB=true else mB=false end end;_G[bZ]=mB;return end end;a2="No such global variable: "..mA elseif mx=="/copydatabank"then if dbHud_2 then d2(true)else a2="Spare Databank required to copy databank"end elseif mx=="/wipedatabank"then if dbHud_1 then mr()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
