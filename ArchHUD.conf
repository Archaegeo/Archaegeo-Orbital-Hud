name: ArchHud - Archaegeo v1.120 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.120;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local b={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local vec3=vec3;local c=utils.clamp;local d=math.floor;local e=math.abs;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local s=Nav.axisCommandManager;local function t(u,v)local w=10^(v or 0)return d(u*w+0.5)/w end;local x=SafeR;local y=SafeB;local z=SafeG;local A=false;local B=0;local C=0;local D=0;local E=false;local F=0;local G=false;local H=t(ResolutionX/2,0)local I=t(ResolutionY/2,0)local J=false;local K=55;local L=false;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=k()>0;local an=k()local ao=core.getAltitude()local ap=core.getElementIdList()local aq=r()local ar=nil;local as=false;local at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]local au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]local av={}local aw=0;local ax=0;local ay=""local az=true;local aA={}local aB=ResolutionX;local aC=ResolutionY;local aD=false;local aE=false;local aF=0;local aG=nil;local aH={}local aI={}local aJ={}local aK=0;local aL=false;local aM={}local aN={}local aO=d(1/apTickRate)*2;local aP={}local aQ={}local aR={}local aS={}local aT=false;local aU=16;local aV=0;local aW=nil;local aX=""local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=false;local b7=false;local b8=autoRollPreference;local b9=LandingGearGroundHeight;local ba=system.getMouseDeltaX()local bb=system.getMouseDeltaY()local bc=false;local bd=r()local be=0;local bf=0;local bg=0;local bh=AtmoSpeedLimit;local bi=0;local bj=nil;local bk=0;local bl=0;local bm=false;local bn=false;local bo={VectorToTarget=false}local bp=false;local bq=0;local br=nil;local bs=false;local bt=false;local bu=false;local bv=false;local bw=0;local bx=r()local by=vec3(core.getConstructWorldOrientationUp())local bz=vec3(core.getConstructWorldOrientationForward())local bA=vec3(core.getConstructWorldOrientationRight())local bB=vec3(core.getWorldVelocity())local bC=vec3(bB):len()local bD=vec3(core.getWorldVertical())local bE=vec3(core.getConstructWorldPos())local bF=false;local bG=false;local function bH(bI,bJ)if bJ==nil then bJ=false end;if s:getAxisCommandType(0)~=axisCommandType.byThrottle and not bJ then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,bI)C=t(bI*100,0)end;local function bK(bI,bJ)if s:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bJ then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetSpeedCommand(axisCommandId.longitudinal,bI)end;local function bL(bM)if aB==1920 then return bM else return t(aB*bM/1920,0)end end;local function bN(bM)if aC==1080 then return bM else return t(aC*bM/1080,0)end end;local function bO(bP,bQ)if bP==nil then bP=core.g()end;bP=t(bP,5)if bQ~=nil and bQ or(aG==nil or aG~=bP)then local bR=core.getVelocity()local bS=vec3(bR):len()local bT=g(unit.getData()).maxBrake;if bT~=nil and bT>0 and am then bT=bT/c(bS/100,0.1,1)bT=bT/an;if an>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bT)/2 else LastMaxBrakeInAtmo=bT end end end;if bT~=nil and bT>0 then LastMaxBrake=bT end;aG=bP end end;local function bU()AtlasOrdered={}for bV,bM in pairs(aW[0])do table.insert(AtlasOrdered,{name=bM.name,index=bV})end;local function bW(bX,bY)return bX.name<bY.name end;table.sort(AtlasOrdered,bW)end;local function bZ(b_,c0)if b_==0 then return e(c0)<1e-09 end;if c0==0 then return e(b_)<1e-09 end;return e(b_-c0)<math.max(e(b_),e(c0))*epsilon end;local function c1(c2,c3)local c4=vec3(c3)if c2.bodyId==0 then return setmetatable({latitude=c4.x,longitude=c4.y,altitude=c4.z,bodyId=0,systemId=c2.planetarySystemId},MapPosition)end;local c5=c4-c2.center;local ac=c5:len()local c6=ac-c2.radius;local c7=0;local c8=0;if not bZ(ac,0)then local c9=o(c5.y,c5.x)c8=c9>=0 and c9 or 2*math.pi+c9;c7=math.pi/2-math.acos(c5.z/ac)end;return setmetatable({latitude=math.deg(c7),longitude=math.deg(c8),altitude=c6,bodyId=c2.bodyId,systemId=c2.planetarySystemId},MapPosition)end;local function ca(ac,cb)local cc=ac>100000;local cd,ce=""if cb==nil then cb=1 end;if cc then cd,ce=t(ac/1000/200,cb),"SU"elseif ac<1000 then cd,ce=t(ac,cb),"M"else cd,ce=t(ac/1000,cb),"KM"end;return cd,ce end;local function cf(cg)for bV,bM in pairs(cg)do if bM.name and bM.name==CustomTarget.name then return bV end end;return-1 end;local function ch()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;local function ci()local cj=-1;local ck=-1;if vBooster then cj=vBooster.distance()end;if hover then ck=hover.distance()end;if cj~=-1 and ck~=-1 then if cj<ck then return cj else return ck end elseif cj~=-1 then return cj elseif ck~=-1 then return ck else return-1 end end;local function cl()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;b8=true;a8=0;if am and aj==-1 then BrakeLanding=false;bH(1,true)C=1;AltitudeHold=true;a8=0;Nav:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)end else VertTakeOff=true;AltitudeHold=false;bs=false;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cm()if bx-bf<1.5 then if planet.hasAtmosphere then if an>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bf=-1;if AltitudeHold or VertTakeOff then return end end else bf=bx end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;b8=true;LockPitch=nil;bs=false;if aj==-1 then AutoTakeoff=false;if bf>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ao end end;if VertTakeOff then cl()end;if not am then bs=false;bp=true;IntoOrbit=true;if not ah and s:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bf>-1 then HoldAltitude=ao+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;s:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bF then cl()end end;if ah then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;if VertTakeOff then cl()end;b8=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bm=false;bk=nil;bl=nil;bw=0;if IntoOrbit then if bs then CancelIntoOrbit=false else CancelIntoOrbit=true end;bs=false;IntoOrbit=false;br=nil elseif unit.getClosestPlanetInfluence()>0 and an==0 then IntoOrbit=true;bs=false;CancelIntoOrbit=false;if br==nil then br=planet end else W="Unable to engage orbiting, not near planet or in atmosphere"end end;local function cn()if n()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()s:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b8=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;local function co()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local cp=AtlasOrdered[AutopilotTargetIndex].index;local cq=aW[0][cp]if cq.center then AutopilotTargetName=cq.name;a4=b1[0][cp]if CustomTarget~=nil then if an==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cq;for _,bM in pairs(b1[0])do if bM.name==CustomTarget.planetname then a4=bM;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=d(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b4(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cr(cs)if not Autopilot and not VectorToTarget and not ah and not IntoOrbit then if cs==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then co()else local cp=AtlasOrdered[AutopilotTargetIndex].index;local cq=aW[0][cp]if cq.name=="Space"then if cs==nil then cr()else cr(1)end else co()end end else W="Disengage autopilot before changing Interplanetary Helper"end end;local function ct()local function cu(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cm()end end;VectorStatus="Proceeding to Waypoint"end;if aj~=-1 and VertTakeOffEngine or VertTakeOff then W="Vertical Takeoff autopilot not supported.\nFinish or Disable Vertical Takeoff"return end;if bx-bg<1.5 and an>0 then if not bv then W="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if an>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bg=-1;if Autopilot or VectorToTarget then return end end else bg=bx end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah and not IntoOrbit then co()local cv=c1(a4,AutopilotTargetCoords)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if an~=0 then ah=true;cm()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if an>0 then bs=false;if not VectorToTarget then cu(SpaceTarget)end else if ao>100000 or ao==0 then bs=false;Autopilot=true elseif not am then ag=true;ProgradeIsOn=true;bq=planet.noAtmosphericDensityAltitude+1000;bp=true;if AltitudeHold then cm()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if an~=0 then ah=true;cm()else Autopilot=true end end elseif an==0 then local cw=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a4.name==planet.name and cw)then bs=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;J=false;LockPitch=nil;WaypointSet=false end else ah=true;cm()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;J=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ao;TargetSet=false;Reentry=false;if IntoOrbit then if not bo.VectorToTarget then IntoOrbit=false else bo.VectorToTarget=false end end end end;local function cx(cy)local cz=-1;local cA;cz=cf(SavedLocations)if cz~=-1 then local cB;if cy~=nil then cA={position=SavedLocations[cz].position,name=cy,atmosphere=SavedLocations[cz].atmosphere,planetname=SavedLocations[cz].planetname,gravity=SavedLocations[cz].gravity}else cA={position=bE,name=SavedLocations[cz].name,atmosphere=an,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cz]=cA;cz=-1;cz=cf(aW[0])if cz>-1 then aW[0][cz]=cA end;bU()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;co()else W="Name Not Found"end end;local function cC(cD,cE,bY)local cF=cD:cross(bY):normalize_inplace()local cG=math.acos(c(cF:dot(-cE),-1,1))*constants.rad2deg;if cF:cross(-cE):dot(bY)<0 then cG=-cG end;return cG end;local function cH(cI,cJ,cK)cJ=cJ:project_on_plane(cI)cK=cK:project_on_plane(cI)return o(cJ:cross(cK):dot(cI),cJ:dot(cK))end;local function ci()local cj=-1;local ck=-1;if vBooster then cj=vBooster.distance()end;if hover then ck=hover.distance()end;if cj~=-1 and ck~=-1 then if cj<ck then return cj else return ck end elseif cj~=-1 then return cj elseif ck~=-1 then return ck else return-1 end end;local function cL()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b8=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then cl()end;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;b8=autoRollPreference;ag=false;ai=false;a8=0 end end;local function cM(cN,cO)cN=vec3(cN)cO=vec3(cO):normalize()local cd=cN*cO;return cd.x+cd.y+cd.z end;local function cP(cN,cQ,cR)local cS=0.001;local cT=1;if not am or not bc or aj~=-1 or bC<K then local cU=cR;if cU==nil then cU=DampingMultiplier end;if cQ==nil then cQ=cS end;cN=vec3(cN):normalize()local cV=vec3()-cN;local cW=-cM(cV,core.getConstructWorldOrientationRight())*cT;local cX=-cM(cV,core.getConstructWorldOrientationUp())*cT;if aw==0 then aw=cW/2 end;if ax==0 then ax=cX/2 end;if e(cW)<0.1 then P=P-cW*2 else P=P-(cW+(cW-aw)*cU)end;if e(cX)<0.1 then O=O+cX*2 else O=O+cX+(cX-ax)*cU end;aw=cW;ax=cX;if e(cW)<cQ and e(cX)<cQ then return true end;return false elseif bc and aj==-1 then cN=bB;local cU=cR;if cU==nil then cU=DampingMultiplier end;if cQ==nil then cQ=cS end;cN=vec3(cN):normalize()local cV=bz-cN;local cW=-cM(cV,core.getConstructWorldOrientationRight())*cT;local cX=-cM(cV,core.getConstructWorldOrientationUp())*cT;if aw==0 then aw=cW/2 end;if ax==0 then ax=cX/2 end;if e(cW)<0.1 then P=P-cW*5 else P=P-(cW+(cW-aw)*cU)end;if e(cX)<0.1 then O=O+cX*5 else O=O+cX+(cX-ax)*cU end;aw=cW;ax=cX;if e(cW)<cQ and e(cX)<cQ then return true end;return false end end;local function cY()if Reentry then W="Re-Entry cancelled"Reentry=false;b8=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ab=5 elseif not L then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if s:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b8=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bh end else Reentry=true;AltitudeHold=true;b8=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cZ,c_=ca(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bh.." Target Altitude: "..cZ..c_;bK(d(bh))end;AutoTakeoff=false end;local function d0(bS)if not am then bO()return b2.computeDistanceAndTime(bS,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b2.computeDistanceAndTime(bS,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function d1(bS)bO()return b2.computeDistanceAndTime(bS,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;local function d2()if antigrav and not ExternalAGG then if bG then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ao end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function d3(d4)local d5=0;local d6=0;local d7=0;if d4<60 then d4=d(d4)elseif d4<3600 then d5=d(d4/60)d4=d(d4%60)elseif d4<86400 then d6=d(d4/3600)d5=d(d4%3600/60)else d7=d(d4/86400)d6=d(d4%86400/3600)end;if d7>0 then return d7 .."d "..d6 .."h "elseif d6>0 then return d6 .."h "..d5 .."m "elseif d5>0 then return d5 .."m "..d4 .."s"elseif d4>0 then return d4 .."s"else return"0s"end end;local function d8()local d9=-1;local da=ci()if telemeter_1 then d9=telemeter_1.getDistance()end;if da~=-1 and d9~=-1 then if da<d9 then return da else return d9 end elseif da~=-1 then return da else return d9 end end;local function db(dc)if dbHud_1 then if not a7 then for bV,bM in pairs(b)do dbHud_1.setStringValue(bM,h(_G[bM]))if dc and dbHud_2 then dbHud_2.setStringValue(bM,h(_G[bM]))end end;for bV,bM in pairs(a)do dbHud_1.setStringValue(bM,h(_G[bM]))if dc and dbHud_2 then dbHud_2.setStringValue(bM,h(_G[bM]))end end;system.print("Saved Variables to Datacore")if dc and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;local function dd()local de={}local function df()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;local function dg()local dh=s:getAxisCommandType(0)local di="TRAVEL"if dh==1 then di="CRUISE"end;if Autopilot then di="AUTOPILOT"end;return di end;local function dj(dk,aT,dl,dm,dn,dp,dq,dr)local ds=1;local dt=2;local du=3;local dv=4;local dw=5;local dx=6;local dy=""local dz=0;local dA=fuelY;local dB=fuelY+10;if n()==1 and not RemoteHud then dA=dA-50;dB=dB-50 end;dk[#dk+1]=[[<g class="pdim txtfuel">]]if dn=="ATMO"then dy="atmofueltank"elseif dn=="SPACE"then dy="spacefueltank"else dy="rocketfueltank"end;dz=_G[dy.."_size"]if#dp>0 then for i=1,#dp do local dC=string.sub(dp[i][dt],1,12)local dD=0;for dE=1,dz do if dp[i][dt]==g(unit[dy.."_"..dE].getData()).name then dD=dE;break end end;if aT or dq[i]==nil or dr[i]==nil then local dF=0;local dG=0;local dH=0;local dI=0;local dJ=r()if dD~=0 then dr[i]=g(unit[dy.."_"..dD].getData()).percentage;dq[i]=g(unit[dy.."_"..dD].getData()).timeLeft;if dq[i]=="n/a"then dq[i]=0 end else dH=l(dp[i][ds])-dp[i][dv]dF=dp[i][du]dr[i]=d(0.5+dH*100/dF)dG=dp[i][dw]dI=dp[i][dx]if dG<=dH then dq[i]=0 else dq[i]=d(0.5+dH/((dG-dH)/(dJ-dI)))end;dp[i][dw]=dH;dp[i][dx]=dJ end end;if dC==dm then dC=f("%s %d",dn,i)end;if dD==0 then dC=dC.." *"end;local dK;if dq[i]==0 then dK="n/a"else dK=d3(dq[i])end;if dr[i]~=nil then local dL=d(dr[i]*2.55)local dM=f("rgb(%d,%d,%d)",255-dL,dL,0)local dN=""if dK~="n/a"and dq[i]<120 or dr[i]<5 then if aT then dN=[[class="red"]]end end;dk[#dk+1]=f([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],dl,dA,dN,dC,dl,dB,dM,dr[i],dK)dA=dA+30;dB=dB+30 end end end;dk[#dk+1]="</g>"end;local function dO(dk,c6)if c6<200000 and not am or c6 and am then local dP=-bD:dot(bB)local dQ=0;if e(dP)>1 then dQ=45*math.log(e(dP),10)if dP<0 then dQ=-dQ end end;dk[#dk+1]=f([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(dP),d(dQ))end;return dk end;local function dR(cE)local cs=-bD;cE=cE-cE:project_on(cs)local dS=vec3(0,0,1)dS=dS-dS:project_on(cs)local dT=dS:cross(cs)local dQ=dS:angle_between(cE)*constants.rad2deg;if cE:dot(dT)<0 then dQ=360-dQ end;return dQ end;local function dU(dk,centerX,centerY,dV,dW,cw)local dX=circleRad;local dY=20;dY=d(dY)local dZ=d(dV)if cw then for i=-45,45,5 do local d_=i;dk[#dk+1]=f([[<g transform="rotate(%f,%d,%d)">]],d_,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;dk[#dk+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dX+dY-len,centerX,centerY+dX+dY)end;dk[#dk+1]=f([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+dX+dY-35,dW,centerX,centerY+dX+dY-25,dZ)dk[#dk+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dV,centerX,centerY)dk[#dk+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dX+dY-20,centerX+5,centerY+dX+dY-20,centerX,centerY+dX+dY-15)dk[#dk+1]="</g>"end;local e0=dZ;if cw then e0=dR(bz)end;local e1=20;local e2=d(e0)local e3=0;local e4=centerY+dX+dY+20;local e5=centerX;if dW~="YAW"then e4=bN(130)e5=bL(960)end;local e6=[[<path class="txttick line" d="]]for i=d(e2-(e1+10)-e2%5+0.5),d(e2+e1+10+e2%5+0.5),5 do local dl=e5+-i*5+e0*5;if i%10==0 then e3=10;local u=i;if u==360 then u=0 elseif u>360 then u=u-360 elseif u<0 then u=u+360 end;dk[#dk+1]=f([[
                                    <text x="%f" y="%f">%d</text>]],dl+5,e4-12,u)elseif i%5==0 then e3=5 end;if e3==10 then e6=f([[%s M %f %f v %d]],e6,dl,e4-5,e3)else e6=f([[%s M %f %f v %d]],e6,dl,e4-2.5,e3)end end;dk[#dk+1]=e6 ..[["/>]]dk[#dk+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e5-5,e4+10,e5+5,e4+10,e5,e4+5)if cw then dW="HDG"end;dk[#dk+1]=f([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],e5,e4+25,e2,e5,e4+35,dW)end;local function e7(dk,e8,dV,centerX,centerY,cw,e9,bS)local dX=circleRad;local ea=d(dX*3/5)if dX>0 then local eb=d(e8)local len=0;local e6=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dV,centerX,centerY)if not am then e6=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;dk[#dk+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dX-1,centerX,centerY)dk[#dk+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eb-30-eb%5+0.5),d(eb+30+eb%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ec=centerY+-i*5+e8*5;if len==30 then e6=f([[%s M %d %f h %d]],e6,centerX-ea-len,ec,len)if am then dk[#dk+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dV,centerX,centerY,centerX-ea+10,ec,i)dk[#dk+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dV,centerX,centerY,centerX+ea-10,ec,i)if i==0 or i==180 or i==-180 then dk[#dk+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dV,centerX,centerY,centerX-ea+20,ec,ea*2-40)end else dk[#dk+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ea+10,ec,i)dk[#dk+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ea-10,ec,i)end;e6=f([[%s M %d %f h %d]],e6,centerX+ea,ec,len)else e6=f([[%s M %d %f h %d]],e6,centerX-ea-len,ec,len)e6=f([[%s M %d %f h %d]],e6,centerX+ea,ec,len)end end;dk[#dk+1]=e6 ..[["/>]]local ed="PITCH"if not cw then ed="REL PITCH"end;if e8>90 and not am then e8=90-(e8-90)elseif e8<-90 and not am then e8=-90-(e8+90)end;if dX>200 then if am then if bS>K then dk[#dk+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e9)end;dk[#dk+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dV,centerX,centerY)else dk[#dk+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;dk[#dk+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ea+25,centerY-5,centerX-ea+20,centerY,centerX-ea+25,centerY+5,centerX-ea+50,centerY+4,eb)dk[#dk+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ea-25,centerY-5,centerX+ea-20,centerY,centerX+ea-25,centerY+5,centerX+ea-30,centerY+4,eb)dk[#dk+1]="</g>"end;local ee=d(dX/3)dk[#dk+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ee,centerY,dX-ee)if not am and cw then dk[#dk+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dV,centerX,centerY,centerX-ea+10,centerY,ea*2-20)end;dk[#dk+1]="</g>"if dX<200 then if am and bS>K then dk[#dk+1]=f([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dX,ed,centerX,centerY-dX+10,eb,centerX,centerY-15,"Yaw",centerX,centerY+20,e9)else dk[#dk+1]=f([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-dX,ed,centerX,centerY-dX+15,eb)end end end end;local function ef(dk,c6,cw)local eg=altMeterX;local eh=altMeterY;local ei=78;local ej=19;local ek=d8()if ek~=-1 then table.insert(dk,f([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],eg+ei,eh+ej+20,ek))end;if cw and(c6<200000 and not am or c6 and am)then table.insert(dk,f([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],eg-1,eh-4,ei+2,ej+6,eg+1,eh-1,ei-4,ej))local cz=0;local el=1;local em=0;local en=c6<0;local eo=9;if en then eo=0 end;local c6=e(c6)while cz<6 do local ep=11;local eq=16;local er=9;local es=14;local dN="altsm"if cz>2 then eq=eq+3;ep=ep+2;es=es+2;er=er-6;dN="altbig"end;if en then dN=dN.." red"end;local et=c6/el%10;local eu=d(et)local ev=d((eu+1)%10)local ew=em;if cz==0 then ew=et-eu;if en then ew=1-ew end end;if en and(cz==0 or em~=0)then local ex=ev;ev=eu;eu=ex end;local ey=eq*(ew-1)local ez=ey+eq;local dl=eg+er+(6-cz)*ep;local ec=eh+es;table.insert(dk,f([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],dN,dl,ec+ey,ev,dl,ec+ez,eu))cz=cz+1;el=el*10;if eu==eo then em=ew else em=0 end end;table.insert(dk,[[</g></g>]])end end;local function eA(bR)bR=vec3(bR)local cG=-math.deg(o(bR.y,bR.z))+180;cG=cG-90;if cG<0 then cG=360+cG end;if cG>180 then cG=-180+cG-180 end;return-cG end;local function eB(bR)bR=vec3(bR)local e0=math.deg(o(bR.y,bR.x))-90;if e0<-180 then e0=360+e0 end;return e0 end;local function eC(dk,bR,bS,centerX,centerY)if bS>5 and not am or bS>K then local dX=circleRad;local eD=20;local eE=20;local eF=vec3(bR)local eG=eA(eF)local eH=eB(eF)local eI=14;local eJ=eI/2;local eK=-eH/eE*dX;local eL=eG/eD*dX;local dl=centerX+eK;local ec=centerY+eL;local ac=math.sqrt(eK^2+eL^2)local eM=[[<circle
                        cx="]]..dl..[["
                        cy="]]..ec..[["
                        r="]]..eJ/eI..[["
                        style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                    <circle
                        cx="]]..dl..[["
                        cy="]]..ec..[["
                        r="]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                    <path
                        d="M ]]..dl-eI..[[,]]..ec..[[ h ]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dl+eJ..[[,]]..ec..[[ h ]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />
                    <path
                        d="M ]]..dl..[[,]]..ec-eI..[[ v ]]..eJ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" />]]if ac<dX then dk[#dk+1]=eM else local dQ=o(eL,eK)local eN=4;local eO=centerX+dX*math.cos(dQ)local eP=centerY+dX*math.sin(dQ)dk[#dk+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dQ*180/math.pi,eO,eP,eO-eN,eP-eN/2,eN*2,eN,eO+eN,eP-eN,eN,eN,-eN,eN)end;if not am then eG=eA(-eF)eH=eB(-eF)eK=-eH/eE*dX;eL=eG/eD*dX;dl=centerX+eK;ec=centerY+eL;ac=math.sqrt(eK^2+eL^2)if ac<dX then local eQ=[[<circle
                                cx="]]..dl..[["
                                cy="]]..ec..[["
                                r="]]..eJ..[["
                                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                            <path
                                d="M ]]..dl..[[,]]..ec-eI..[[ v ]]..eJ..[["
                                style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                            <use
                                xlink:href="#l"
                                transform="rotate(120,]]..dl..[[,]]..ec..[[)" />
                            <use
                                xlink:href="#l"
                                transform="rotate(-120,]]..dl..[[,]]..ec..[[)" />
                            <path
                                d="M ]]..dl-eJ..[[,]]..ec..[[ h ]]..eI..[["
                                style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                transform="rotate(-45,]]..dl..[[,]]..ec..[[)" id="c"/>
                            <use
                                xlink:href="#c"
                                transform="rotate(-90,]]..dl..[[,]]..ec..[[)"/>]]dk[#dk+1]=eQ end end end end;local function eR(dk,di,eS,eT)eS=d(eS+0.5)local dA=throtPosY+10;local dB=throtPosY+20;if n()==1 and not RemoteHud then dA=55;dB=65 end;local eU="CRUISE"local unit="km/h"local bI=eT;if di=="TRAVEL"or di=="AUTOPILOT"then eU="THROT"unit="%"bI=eS;local eV="dim"if eS<0 then eV="red"end;dk[#dk+1]=f([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %.0f)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],eV,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-e(eS),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;dk[#dk+1]=f([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%.0f %s</text>
                        </g>
                    </g>]],throtPosX+10,dA,eU,throtPosX+10,dB,bI,unit)if am and AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle and E then eS=d(F*100+0.5)local eV="red"if eS<0 then eV="red"end;dk[#dk+1]=f([[<g class="%s">
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g></g>]],eV,1-e(eS),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)dk[#dk+1]=f([[
                                <g class="pbright txtstart">
                                        <text x="%s" y="%s">%s</text>
                                        <text x="%s" y="%s">%d %s</text>
                                </g>]],throtPosX+10,dA+40,"LIMIT",throtPosX+10,dB+40,eS,"%")end;if am and AtmoSpeedAssist or Reentry then dk[#dk+1]=f([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dA-40,"LIMIT: ",bh.." km/h")elseif not am and Autopilot then dk[#dk+1]=f([[
                            <g class="dim txtstart">
                                <text x="%s" y="%s">%s %s</text>
                            </g>
                        ]],throtPosX+10,dA-40,"LIMIT: ",d(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eW(dk,eX)local eY=throtPosY-10;local eZ=throtPosX+10;dk[#dk+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eY=75 end;dk[#dk+1]=f([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],eZ,eY,d(eX))end;local function e_(dk)dk[#dk+1]=f([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],bL(1900),bN(1070),VERSION_NUMBER)dk[#dk+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then dk[#dk+1]=f([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bL(960),bN(550))dk[#dk+1]=f([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bL(960),bN(600))dk[#dk+1]=f([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bL(960),bN(650))end;local f0=bL(960)local f1=bN(860)local f2=bN(880)local f3=bN(900)local f4=bN(960)local f5=bN(200)local f6=bN(150)local f7=bN(960)if n()==1 and not RemoteHud then f1=bN(135)f2=bN(155)f3=bN(175)f5=bN(115)f6=bN(95)end;if BrakeIsOn then dk[#dk+1]=f([[<text x="%d" y="%d">Brake Engaged</text>]],f0,f1)elseif D>0 then dk[#dk+1]=f([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],f0,f1,D)end;if am and bc and ci()==-1 then dk[#dk+1]=f([[<text x="%d" y="%d">** STALL WARNING **</text>]],f0,f5+50)end;if ar then dk[#dk+1]=f([[<text x="%d" y="%d">Gyro Enabled</text>]],f0,f7)end;if GearExtended then if M then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],f0,f2)else dk[#dk+1]=f([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],f0,f2)end;local f8,ce=ca(Nav:getTargetGroundAltitude())dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],f0,f3,f8 ..ce)end;if Z then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],f0,f4+20)end;if antigrav and not ExternalAGG and bG and AntigravTargetAltitude~=nil then if e(ao-antigrav.getBaseAltitude())<501 then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f0,f5+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else dk[#dk+1]=f([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],f0,f5+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],f0,f5+20,AutopilotStatus)elseif LockPitch~=nil then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],f0,f5+20,d(LockPitch))elseif U then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],f0,f5+20)elseif Reentry then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],f0,f5+20)end;local f9,fa,fb=b1:getPlanetarySystem(0):castIntersections(bE,bB:normalize(),function(fc)if fc.noAtmosphericDensityAltitude>0 then return fc.radius+fc.noAtmosphericDensityAltitude else return fc.radius+fc.surfaceMaxAltitude*1.5 end end)local fd=fa;if fb~=nil and fa~=nil then fd=math.min(fb,fa)end;if AltitudeHold or VertTakeOff then local f8,ce=ca(HoldAltitude,2)if VertTakeOff then if bG then f8,ce=ca(antigrav.getBaseAltitude(),2)end;dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],f0,f5,f8 ..ce)elseif AutoTakeoff and not IntoOrbit then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],f0,f5,f8 ..ce)if BrakeIsOn and not VertTakeOff then dk[#dk+1]=f([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],f0,f5+50)end else dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],f0,f5,f8 ..ce)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if an>0.1 then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],f0,f5)elseif an<0.09 and an>0.05 then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],f0,f5)elseif an<0.05 then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],f0,f5)end end;if IntoOrbit then if bj~=nil then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],f0,f5,bj)end end;if BrakeLanding then if StrongBrakes then dk[#dk+1]=f([[<text x="%d" y="%d">Brake-Landing</text>]],f0,f5)else dk[#dk+1]=f([[<text x="%d" y="%d">Coast-Landing</text>]],f0,f5)end end;if ProgradeIsOn then dk[#dk+1]=f([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],f0,f5)end;if RetrogradeIsOn then dk[#dk+1]=f([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],f0,f5)end;if TurnBurn then dk[#dk+1]=f([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],f0,f6)elseif fd~=nil and an==0 then local f8,ce=ca(fd)local travelTime=b2.computeTravelTime(bC,0,fd)local fe="Collision"if f9.noAtmosphericDensityAltitude>0 then fe="Atmosphere"end;dk[#dk+1]=f([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],f0,f6,f9.name,fe,d3(travelTime),f8 ..ce)end;if VectorToTarget and not IntoOrbit then dk[#dk+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],f0,f5+30,VectorStatus)end;dk[#dk+1]="</g>"return dk end;local function ff(bS)return d(t(bS*3.6,0)+0.5).." km/h"end;local function fg(dk)if orbit~=nil and an<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fh=OrbitMapX;local fi=OrbitMapY;local fj=OrbitMapSize;local fk=4;fi=fi+fk;local fl=15;local dl=fh+fj+fh/2+fk;local ec=fi+fj/2+5+fk;local fm,fn,fo,fp;fm=fj/4;fp=0;dk[#dk+1]=[[<g class="pbright txtorb txtmid">]]dk[#dk+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fj+fh*2,fj+fi,fk,fk)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fo=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fm*2)fn=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fo*(1-orbit.eccentricity)fp=fm-orbit.periapsis.altitude/fo-planet.radius/fo;local fq=""if orbit.periapsis.altitude<=0 then fq='redout'end;dk[#dk+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fq,fh+fj/2+fp+fk,fi+fj/2+fk,fm,fn)dk[#dk+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fh+fj/2+fk,fi+fj/2+fk,planet.radius/fo)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then dk[#dk+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dl-35,ec-5,fh+fj/2+fm+fp,ec-5)dk[#dk+1]=f([[<text x="%f" y="%f">Apoapsis</text>]],dl,ec)ec=ec+fl;local f8,ce=ca(orbit.apoapsis.altitude)dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,f8 ..ce)ec=ec+fl;dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,d3(orbit.timeToApoapsis))ec=ec+fl;dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,ff(orbit.apoapsis.speed))end;ec=fi+fj/2+5+fk;dl=fh-fh/2+10+fk;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then dk[#dk+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],dl+35,ec-5,fh+fj/2-fm+fp,ec-5)dk[#dk+1]=f([[<text x="%f" y="%f">Periapsis</text>]],dl,ec)ec=ec+fl;local f8,ce=ca(orbit.periapsis.altitude)dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,f8 ..ce)ec=ec+fl;dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,d3(orbit.timeToPeriapsis))ec=ec+fl;dk[#dk+1]=f([[<text x="%f" y="%f">%s</text>]],dl,ec,ff(orbit.periapsis.speed))end;dk[#dk+1]=f([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fh+fj/2+fk,20+fk,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fr=orbit.timeToApoapsis/orbit.period*2*math.pi;local fs=fm*math.cos(fr)local ft=fn*math.sin(fr)dk[#dk+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fh+fj/2+fs+fp+fk,fi+fj/2+ft+fk)end;dk[#dk+1]=[[</g>]]return dk else return dk end end;local function fu(dk)local function fv(fw,fx)for i=1,#fx do table.insert(fw,fx[i])end;return fw end;local dl=50;local ec=525;local fy={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fz={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fA={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fB={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type ah-commands in lua chat to see text commands"}if am then fv(fy,fz)table.insert(fy,"---------------------------------------")if VertTakeOff then table.insert(fy,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")elseif aj~=-1 then if antigrav then if bG then table.insert(fy,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fy,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fy,"Alt-6: Begins Vertical Takeoff.")else table.insert(fy,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fy,"G: Begin BrakeLanding or Land")end else fv(fy,fA)end;if AltitudeHold then table.insert(fy,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fy,"---------------------------------------")fv(fy,fB)dk[#dk+1]=[[<g class="pdim txt txtstart">]]for i=1,#fy do ec=ec+10;dk[#dk+1]=f([[<text x=%d y="%d">%s</text>]],dl,ec,fy[i])end;dk[#dk+1]="</g>"end;function de.HUDPrologue(dk)if not A then x=PvPR;z=PvPG;y=PvPB else x=SafeR;z=SafeG;y=SafeB end;at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]local fC=at;local fD=au;local fE=at;local fF=au;if df()and not brightHud then fC=[[rgb(]]..d(x*0.4+0.5)..","..d(z*0.4+0.5)..","..d(y*0.3+0.5)..[[)]]fD=[[rgb(]]..d(x*0.3+0.5)..","..d(z*0.3+0.5)..","..d(y*0.2+0.5)..[[)]]end;dk[#dk+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fC,fC,fE,fE,fD,fD,fF,fF,aB,aC)return dk end;function de.UpdateHud(dk)local c6=ao;local bR=core.getVelocity()local bS=vec3(bR):len()local fG=getRoll(bD,bz,bA)local fH=fG/180*math.pi;local fI=math.cos(fH)local fJ=math.sin(fH)local cG=cC(bD,bz,bA*fI+by*fJ)local dV=fG;local e8=cG;local eS=d(unit.getThrottle())local eX=bS*3.6;local eT=unit.getAxisCommandValue(0)local fK=bL(1770)local fL=bN(310)if AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle then eT=C;eS=C*100 end;local di=dg()local dW="ROLL"local cw=unit.getClosestPlanetInfluence()>0;if eS==nil then eS=0 end;if not cw then if bS>5 then cG=eA(bR)fG=eB(bR)else cG=0;fG=0 end;dW="YAW"end;if B>50000 and not am then local fM;if B>200000 then fM=t(B/200000,2).." su"else fM=t(B/1000,1).." km"end;dk[#dk+1]=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fK,fL,fM)end;dk[#dk+1]=ae;dk[#dk+1]=ay;dk[#dk+1]=ad;if aV%aO==0 then aT=true end;if fuelX~=0 and fuelY~=0 then dj(dk,aT,fuelX,"Atmospheric ","ATMO",aH,aR,aS)dj(dk,aT,fuelX+100,"Space fuel t","SPACE",aI,aP,aQ)dj(dk,aT,fuelX+200,"Rocket fuel ","ROCKET",aJ,aM,aN)end;if aT then aT=false;aV=0 end;aV=aV+1;dO(dk,c6)if n()==0 or RemoteHud then if not df()or brightHud then if cw then dU(dk,centerX,centerY,dV,dW,cw)e7(dk,e8,dV,centerX,centerY,cw,d(eB(bR)),bS)else dU(dk,centerX,centerY,fG,dW,cw)e7(dk,cG,fG,centerX,centerY,cw,d(fG),bS)end;ef(dk,c6,cw)eC(dk,bR,bS,centerX,centerY)end end;eR(dk,di,eS,eT)eW(dk,eX)e_(dk)fg(dk)if showHelp then fu(dk)end;if screen_2 then local fN=bE;local dl=960+fN.x/aY;local ec=450+fN.y/aZ;screen_2.moveContent(a_,(dl-80)/19.2,(ec-80)/10.8)end;return dk end;function de.HUDEpilogue(dk)dk[#dk+1]="</svg>"return dk end;function de.DrawOdometer(dk,a5,TotalDistanceTravelled,a6,fO)local fP=bL(1240)local fQ=bN(55)local fR=fQ+10;local bP=core.g()local fS=0;local fT=0;local fU=0;local di=dg()bO(bP)if am then fU=LastMaxBrakeInAtmo else fU=LastMaxBrake end;maxThrust=Nav:maxForceForward()aF=m()if not ShowOdometer then return end;local fV=vec3(core.getWorldAcceleration()):len()/9.80665;bP=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if bP>0.1 then fT=aF*bP;fS=maxThrust/bP end;dk[#dk+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then fP=bL(1120)fQ=bN(55)fR=fQ+10 elseif am then local fW=bL(770)dk[#dk+1]=f([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fW,fQ,fW,fR,an)end;dk[#dk+1]=f([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fP,fQ,fP,fR,bP/9.80665,fP,fQ+20,fP,fR+20,fV)dk[#dk+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bL(660),bL(700),bN(35),bL(960),bN(55),bL(1240),bN(35),bL(1280))if n()==0 or RemoteHud then dk[#dk+1]=f([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bL(700),bN(20),a5,bL(700),bN(30),TotalDistanceTravelled/1000,bL(830),bN(20),d3(a6),bL(830),bN(30),d3(TotalFlightTime),bL(970),bN(20),aF/1000,bL(1240),bN(10),fU/1000,bL(1240),bN(30),maxThrust/1000,bL(960),bN(180),di)if bP>0.1 then dk[#dk+1]=f([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],bL(970),bN(30),fS/1000,bL(1240),bN(20),fT/1000)else dk[#dk+1]=f([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],bL(970),bN(30),bL(1240),bN(20))end else dk[#dk+1]=f([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bL(960),bN(33),di)end;dk[#dk+1]="</g>"return dk end;function de.DrawWarnings(dk)return e_(dk)end;function de.DisplayOrbitScreen(dk)return fg(dk)end;function de.DisplayMessage(dk,f8)if f8~="empty"then dk[#dk+1]=[[<text class="msg" x="50%%" y="310" >]]for fX in string.gmatch(f8,"([^\n]+)")do dk[#dk+1]=f([[<tspan x="50%%" dy="35">%s</tspan>]],fX)end;dk[#dk+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function de.DrawDeadZone(dk)dk[#dk+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return de end;local function fY()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function fZ()local function f_(g0)return type(g0)=='number'end;local function g1(g0)return type(tonumber(g0))=='number'end;local function g2(g3)return type(g3)=='table'end;local function g4(g5)return type(g5)=='string'end;local function g6(bM)return g2(bM)and f_(bM.x and bM.y and bM.z)end;local function g7(g8)return g2(g8)and f_(g8.latitude and g8.longitude and g8.altitude and g8.bodyId and g8.systemId)end;local g9=math.pi/180;local ga=180/math.pi;local epsilon=1e-10;local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gb='::pos{'..u..','..u..','..u..','..u..','..u..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gc=c;local function bZ(b_,c0)if b_==0 then return e(c0)<1e-09 end;if c0==0 then return e(b_)<1e-09 end;return e(b_-c0)<math.max(e(b_),e(c0))*epsilon end;local function gd(g0)local cd=string.gsub(string.reverse(f('%.4f',g0)),'^0*%.?','')return cd==''and'0'or string.reverse(cd)end;local function ge(gf)if g6(gf)then return f('{x=%.3f,y=%.3f,z=%.3f}',gf.x,gf.y,gf.z)end;if g2(gf)and not getmetatable(gf)then local gg={}local gh=next(gf)if type(gh)=='nil'or gh==1 then gg=gf else for bV,bM in pairs(gf)do local bI=ge(bM)if type(bV)=='number'then table.insert(gg,f('[%s]=%s',bV,bI))else table.insert(gg,f('%s=%s',bV,bI))end end end;return f('{%s}',table.concat(gg,','))end;if g4(gf)then return f("'%s'",gf:gsub("'",[[\']]))end;return tostring(gf)end;local gi={}gi.__index=gi;gi.__tostring=function(gf,gj)local gk={}for bV in pairs(gf)do table.insert(gk,bV)end;table.sort(gk)local gg={}for _,bV in ipairs(gk)do local bI=ge(gf[bV])if type(bV)=='number'then table.insert(gg,f('[%s]=%s',bV,bI))else table.insert(gg,f('%s=%s',bV,bI))end end;if gj then return f('%s%s',gj,table.concat(gg,',\n'..gj))end;return f('{%s}',table.concat(gg,','))end;gi.__eq=function(gl,gm)return gl.planetarySystemId==gm.planetarySystemId and gl.bodyId==gm.bodyId and bZ(gl.radius,gm.radius)and bZ(gl.center.x,gm.center.x)and bZ(gl.center.y,gm.center.y)and bZ(gl.center.z,gm.center.z)and bZ(gl.GM,gm.GM)end;local function gn(go,gp,gq,c3,gr)assert(g1(go),'Argument 1 (planetarySystemId) must be a number:'..type(go))assert(g1(gp),'Argument 2 (bodyId) must be a number:'..type(gp))assert(g1(gq),'Argument 3 (radius) must be a number:'..type(gq))assert(g2(c3),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c3))assert(g1(gr),'Argument 5 (GM) must be a number:'..type(gr))return setmetatable({planetarySystemId=tonumber(go),bodyId=tonumber(gp),radius=tonumber(gq),center=vec3(c3),GM=tonumber(gr)},gi)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gs)return f('::pos{%d,%d,%s,%s,%s}',gs.systemId,gs.bodyId,gd(gs.latitude*ga),gd(gs.longitude*ga),gd(gs.altitude))end;MapPosition.__eq=function(gl,gm)return gl.bodyId==gm.bodyId and gl.systemId==gm.systemId and bZ(gl.latitude,gm.latitude)and bZ(gl.altitude,gm.altitude)and(bZ(gl.longitude,gm.longitude)or bZ(gl.latitude,math.pi/2)or bZ(gl.latitude,-math.pi/2))end;local function gt(gu,gp,c7,c8,c6)local go=gu;if g4(gu)and not c8 and not c6 and not gp and not c7 then go,gp,c7,c8,c6=p(gu,gb)assert(go,'Argument 1 (position string) is malformed.')else assert(g1(go),'Argument 1 (systemId) must be a number:'..type(go))assert(g1(gp),'Argument 2 (bodyId) must be a number:'..type(gp))assert(g1(c7),'Argument 3 (latitude) must be in degrees:'..type(c7))assert(g1(c8),'Argument 4 (longitude) must be in degrees:'..type(c8))assert(g1(c6),'Argument 5 (altitude) must be in meters:'..type(c6))end;go=tonumber(go)gp=tonumber(gp)c7=tonumber(c7)c8=tonumber(c8)c6=tonumber(c6)if gp==0 then return setmetatable({latitude=c7,longitude=c8,altitude=c6,bodyId=gp,systemId=go},MapPosition)end;return setmetatable({latitude=g9*gc(c7,-90,90),longitude=g9*(c8%360),altitude=c6,bodyId=gp,systemId=go},MapPosition)end;local gv={}gv.__index=gv;gv.__tostring=function(gf,gj)local gw=gj and gj..'  'local gx={}local gk={}for bV in pairs(gf)do table.insert(gk,bV)end;table.sort(gk)for _,gy in ipairs(gk)do bdy=gf[gy]local gz=gi.__tostring(bdy,gw)if gj then table.insert(gx,f('[%s]={\n%s\n%s}',gy,gz,gj))else table.insert(gx,f('  [%s]=%s',gy,gz))end end;if gj then return f('\n%s%s%s',gj,table.concat(gx,',\n'..gj),gj)end;return f('{\n%s\n}',table.concat(gx,',\n'))end;local function gA(gB)local aW={}local pid;for _,bM in pairs(gB)do local gC=bM.planetarySystemId;if type(gC)~='number'then error('Invalid planetary system ID: '..tostring(gC))elseif pid and gC~=pid then error('Mistringmatch planetary system IDs: '..gC..' and '..pid)end;local gD=bM.bodyId;if type(gD)~='number'then error('Invalid body ID: '..tostring(gD))elseif aW[gD]then error('Duplicate body ID: '..tostring(gD))end;setmetatable(bM.center,getmetatable(vec3.unit_x))aW[gD]=setmetatable(bM,gi)pid=gC end;return setmetatable(aW,gv)end;b0={}local function gE(gB)return setmetatable({galaxyAtlas=gB or{}},b0)end;b0.__index=function(g3,i)if type(i)=='number'then local system=g3.galaxyAtlas[i]return gA(system)end;return rawget(b0,i)end;b0.__pairs=function(gf)return function(g3,bV)local gF,nv=next(g3,bV)return gF,nv and gA(nv)end,gf.galaxyAtlas,nil end;b0.__tostring=function(gf)local gG={}for _,gH in pairs(gf or{})do local gI=gH:getPlanetarySystemId()local gJ=gv.__tostring(gH,'    ')table.insert(gG,f('  [%s]={%s\n  }',gI,gJ))end;return f('{\n%s\n}\n',table.concat(gG,',\n'))end;b0.BodyParameters=gn;b0.MapPosition=gt;b0.PlanetarySystem=gA;function b0.createBodyParameters(gK,gp,gL,gM,gN,gO,gP)assert(g1(gK),'Argument 1 (planetarySystemId) must be a number:'..type(gK))assert(g1(gp),'Argument 2 (bodyId) must be a number:'..type(gp))assert(g1(gL),'Argument 3 (surfaceArea) must be a number:'..type(gL))assert(g2(gM),'Argument 4 (aPosition) must be an array or vec3:'..type(gM))assert(g2(gN),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gN))assert(g1(gO),'Argument 6 (altitude) must be in meters:'..type(gO))assert(g1(gP),'Argument 7 (gravityAtPosition) must be number:'..type(gP))local gq=math.sqrt(gL/4/math.pi)local ac=gq+gO;local gQ=vec3(gM)+ac*vec3(gN)local gr=gP*ac*ac;return gn(gK,gp,gq,gQ,gr)end;b0.isMapPosition=g7;function b0:getPlanetarySystem(gu)if i==nil then i=0 end;if nv==nil then nv=0 end;local gK=gu;if g7(gu)then gK=gu.systemId end;if type(gK)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gv then system=gA(system)end;return system end end end;function gv:castIntersections(gR,cO,gS,gT)local gS=gS or function(fc)return 1.05*fc.radius end;local gU={}if gT then for _,i in ipairs(gT)do gU[i]=self[i]end else gT={}for bV,fc in pairs(self)do table.insert(gT,bV)gU[bV]=fc end end;local function gV(gW,gX)local gY=gU[gW].center-gR;local gZ=gU[gX].center-gR;return gY:len()<gZ:len()end;table.sort(gT,gV)local g_=cO:normalize()for i,gC in ipairs(gT)do local fc=gU[gC]local h0=fc.center-gR;local gq=gS(fc)local h1=h0:dot(g_)local h2=h1^2-(h0:len2()-gq^2)if h2>=0 then local h3=math.sqrt(h2)local fa=h1+h3;local fb=h1-h3;if fb>0 then return fc,fa,fb elseif fa>0 then return fc,fa,nil end end end;return nil,nil,nil end;function gv:closestBody(h4)assert(type(h4)=='table','Invalid coordinates.')local h5,fc;local h6=vec3(h4)for _,h7 in pairs(self)do local h8=(h7.center-h6):len2()if(not fc or h8<h5)and h7.name~="Space"then fc=h7;h5=h8 end end;return fc end;function gv:convertToBodyIdAndWorldCoordinates(gu)local h9=gu;if g4(gu)then h9=gt(gu)end;if h9.bodyId==0 then return 0,vec3(h9.latitude,h9.longitude,h9.altitude)end;local h7=self:getBodyParameters(h9)if h7 then return h9.bodyId,h7:convertToWorldCoordinates(h9)end end;function gv:getBodyParameters(gu)local gp=gu;if g7(gu)then gp=gu.bodyId end;assert(g1(gp),'Argument 1 (bodyId) must be a number:'..type(gp))return self[gp]end;function gv:getPlanetarySystemId()local _,bM=next(self)return bM and bM.planetarySystemId end;function gi:convertToMapPosition(c3)assert(g2(c3),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c3))local c4=vec3(c3)if self.bodyId==0 then return setmetatable({latitude=c4.x,longitude=c4.y,altitude=c4.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local c5=c4-self.center;local ac=c5:len()local c6=ac-self.radius;local c7=0;local c8=0;if not bZ(ac,0)then local c9=o(c5.y,c5.x)c8=c9>=0 and c9 or 2*math.pi+c9;c7=math.pi/2-math.acos(c5.z/ac)end;return setmetatable({latitude=c7,longitude=c8,altitude=c6,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gi:convertToWorldCoordinates(gu)local h9=g4(gu)and gt(gu)or gu;if h9.bodyId==0 then return vec3(h9.latitude,h9.longitude,h9.altitude)end;assert(g7(h9),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(h9.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(h9.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ha=math.cos(h9.latitude)return self.center+(self.radius+h9.altitude)*vec3(ha*math.cos(h9.longitude),ha*math.sin(h9.longitude),math.sin(h9.latitude))end;function gi:getAltitude(c3)return(vec3(c3)-self.center):len()-self.radius end;function gi:getDistance(c3)return(vec3(c3)-self.center):len()end;function gi:getGravity(c3)local hb=self.center-vec3(c3)local hc=hb:len2()return self.GM/hc*hb/math.sqrt(hc)end;return setmetatable(b0,{__call=function(_,...)return gE(...)end})end;function script.onStart()local function hd()local function he(hf)local hg=dbHud_1.hasKey;for bV,bM in pairs(hf)do if hg(bM)then local cd=g(dbHud_1.getStringValue(bM))if cd~=nil then _G[bM]=cd;aD=true end end end end;if dbHud_1 then local hg=dbHud_1.hasKey;if not useTheseSettings then he(a)else W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 end;coroutine.yield()he(b)if aD then W="Loaded Saved Variables (see Lua Chat Tab for list)"H=t(ResolutionX/2,0)I=t(ResolutionY/2,0)aB=ResolutionX;aC=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b8=autoRollPreference;bh=AtmoSpeedLimit;at=[[rgb(]]..d(x+0.5)..","..d(z+0.5)..","..d(y+0.5)..[[)]]au=[[rgb(]]..d(x*0.9+0.5)..","..d(z*0.9+0.5)..","..d(y*0.9+0.5)..[[)]]else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bx then LastMaxBrakeInAtmo=0 end;LastStartTime=bx;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ao end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hh()local function hi(hj,hk)if hj>hk then hk=hj end;if ContainerOptimization>0 then hk=hk-hk*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then hk=hk-hk*FuelTankOptimization*0.05 end;return hk end;local hl=core.getElementNameById;local hm=fuelX~=0 and fuelY~=0;for bV in pairs(ap)do local type=core.getElementTypeById(ap[bV])if p(type,'^.*Atmospheric Engine$')then if p(tostring(core.getElementTagsById(ap[bV])),'^.*vertical.*$')then bF=true end end;if p(type,'^.*Space Engine$')then bv=true;if p(tostring(core.getElementTagsById(ap[bV])),'^.*vertical.*$')then local hn=core.getElementRotationById(ap[bV])if hn[4]<0 then if q(-hn[4],0.1)==0.5 then bt=true end else if q(hn[4],0.1)==0.5 then bu=true end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local ho=j(ap[bV])if ho>10000 then aU=128 elseif ho>1000 then aU=64 elseif ho>150 then aU=32 end end;aK=aK+j(ap[bV])if hm and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local ho=j(ap[bV])local hp=l(ap[bV])local hj=0;local dJ=r()if type=="Atmospheric Fuel Tank"then local hk=400;local hq=35.03;if ho>10000 then hk=51200;hq=5480 elseif ho>1300 then hk=6400;hq=988.67 elseif ho>150 then hk=1600;hq=182.67 end;hj=hp-hq;if fuelTankHandlingAtmo>0 then hk=hk+hk*fuelTankHandlingAtmo*0.2 end;hk=hi(hj,hk)aH[#aH+1]={ap[bV],hl(ap[bV]),hk,hq,hj,dJ}end;if type=="Rocket Fuel Tank"then local hk=320;local hq=173.42;if ho>65000 then hk=40000;hq=25740 elseif ho>6000 then hk=5120;hq=4720 elseif ho>700 then hk=640;hq=886.72 end;hj=hp-hq;if fuelTankHandlingRocket>0 then hk=hk+hk*fuelTankHandlingRocket*0.1 end;hk=hi(hj,hk)aJ[#aJ+1]={ap[bV],hl(ap[bV]),hk,hq,hj,dJ}end;if type=="Space Fuel Tank"then local hk=2400;local hq=182.67;if ho>10000 then hk=76800;hq=5480 elseif ho>1300 then hk=9600;hq=988.67 end;hj=hp-hq;if fuelTankHandlingSpace>0 then hk=hk+hk*fuelTankHandlingSpace*0.2 end;hk=hi(hj,hk)aI[#aI+1]={ap[bV],hl(ap[bV]),hk,hq,hj,dJ}end end end;if not bF then VertTakeOff,VertTakeOffEngine=false,false end end;local function hr()if gyro~=nil then ar=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(am or not am and ao<10000)then for _,bM in pairs(door)do bM.toggle()end end;if switch then for _,bM in pairs(switch)do bM.toggle()end end;if forcefield and(am or not am==0 and ao<10000)then for _,bM in pairs(forcefield)do bM.toggle()end end;if antigrav then bG=antigrav.getState()==1;if bG and not ExternalAGG then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hs=d8()if hs~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if b9~=nil then s:setTargetGroundAltitude(b9)if b9==0 and not M then GearExtended=true;BrakeIsOn=true end else b9=Nav:getTargetGroundAltitude()if GearExtended then s:setTargetGroundAltitude(LandingGearGroundHeight)else s:setTargetGroundAltitude(TargetHoverHeight)end end;if am and hs~=-1 then b3=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=am end;local function ht(hu,hv,hw,hx,dl,ec,hy,hz,hA)local hB={enableName=hu,disableName=hv,width=hw,height=hx,x=dl,y=ec,toggleVar=hy,toggleFunction=hz,drawCondition=hA,hovered=false}table.insert(aA,hB)return hB end;local function hC()local function hD()if dbHud_1 then local position=bE;local dC=planet.name..". "..#SavedLocations;if radar_1 then local gC,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gC~=nil and gC~=""then dC=dC.." "..radar_1.getConstructName(gC)end end;local cA={}local hE=false;if planet.hasAtmosphere then hE=true end;cA={position=position,name=dC,atmosphere=hE,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cA;table.insert(aW[0],cA)bU()W="Location saved as "..dC else W="Databank must be installed to save locations"end end;local function hF()TurnBurn=not TurnBurn end;local function hG(hH)if hH==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hI()hG(1)end;local function hJ()local cz=-1;cz=cf(aW[0])if cz>-1 then table.remove(aW[0],cz)end;cz=-1;cz=cf(SavedLocations)if cz~=-1 then W=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cz)end;cr()bU()end;local function hK()local dC=AutopilotTargetName;if dC==nil then local f8,ce=ca((bE-CustomTarget.position):len())dC=CustomTarget.name.." "..f8 ..ce end;if dC==nil then dC="None"end;return"Engage Autopilot: "..dC end;local function hL()local dC=AutopilotTargetName;if dC==nil then dC=CustomTarget.name end;if dC==nil then dC="None"end;return"Disable Autopilot: "..dC end;local hM=50;local hN=260;local hO=ht("Enable Brake Toggle","Disable Brake Toggle",hN,hM,aB/2-hN/2,aC/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)ht("Align Prograde","Disable Prograde",hN,hM,aB/2-hN/2-50-hO.width,aC/2-hM+380,function()return ProgradeIsOn end,hI)ht("Align Retrograde","Disable Retrograde",hN,hM,aB/2-hN/2+hO.width+50,aC/2-hM+380,function()return RetrogradeIsOn end,hG,function()return an==0 end)local hP=ht(hK,hL,600,60,aB/2-600/2,aC/2-60/2-400,function()return Autopilot end,ct)ht("Save Position","Save Position",200,hP.height,hP.x+hP.width+30,hP.y,function()return false end,hD,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)ht("Update Position","Update Position",200,hP.height,hP.x+hP.width+30,hP.y,function()return false end,cx,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ht("Clear Position","Clear Position",200,hP.height,hP.x-200-30,hP.y,function()return true end,hJ,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hM=60;hN=300;local dl=10;local ec=aC/2-500;ht("Show Help","Hide Help",hN,hM,dl,ec,function()return showHelp end,function()showHelp=not showHelp end)local ec=aC/2-300;ht("Enable Turn and Burn","Disable Turn and Burn",hN,hM,dl,ec,function()return TurnBurn end,hF)ht("Horizontal Takeoff Mode","Vertical Takeoff Mode",hN,hM,dl+hN+20,ec,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then W="Vertical Takeoff Mode"else W="Horizontal Takeoff Mode"end end,function()return bF end)ec=ec+hM+20;ht("Show Orbit Display","Hide Orbit Display",hN,hM,dl,ec,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)ht("Engage Orbiting","Cancel Orbiting",hN,hM,dl+hN+20,ec,function()return IntoOrbit end,ToggleIntoOrbit,function()return an==0 and unit.getClosestPlanetInfluence()>0 end)ec=ec+hM+20;ht("Glide Re-Entry","Cancel Glide Re-Entry",hN,hM,dl,ec,function()return Reentry end,function()ag=true;hI()end,function()return planet.hasAtmosphere and not am end)ht("Parachute Re-Entry","Cancel Parachute Re-Entry",hN,hM,dl+hN+20,ec,function()return Reentry end,cY,function()return planet.hasAtmosphere and not am end)ec=ec+hM+20;ht("Engage Follow Mode","Disable Follow Mode",hN,hM,dl,ec,function()return U end,cn,function()return n()==1 end)ht("Enable Repair Arrows","Disable Repair Arrows",hN,hM,dl+hN+20,ec,function()return aL end,function()aL=not aL;if aL then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return n()==1 end)ec=ec+hM+20;if not ExternalAGG then ht("Enable AGG","Disable AGG",hN,hM,dl,ec,function()return bG end,d2,function()return antigrav~=nil end)end;ec=ec+hM+20;ht(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,hN*2,hM,dl,ec,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hQ()local hR=nil;local hS=nil;local hT=nil;local hU=nil;aW=fY()for bV,bM in pairs(aW[0])do if hR==nil or bM.center.x<hR then hR=bM.center.x end;if hS==nil or bM.center.x>hS then hS=bM.center.x end;if hT==nil or bM.center.y<hT then hT=bM.center.y end;if hU==nil or bM.center.y>hU then hU=bM.center.y end end;aX=""local hV=1.1*(hS-hR)/1920;local hW=1.4*(hU-hT)/1080;for bV,bM in pairs(aW[0])do local dl=960+bM.center.x/hV;local ec=540+bM.center.y/hW;aX=aX..'<circle cx="'..dl..'" cy="'..ec..'" r="'..bM.radius/hV*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bM.name,"Moon")and not p(bM.name,"Sanctuary")and not p(bM.name,"Space")then aX=aX.."<text x='"..dl.."' y='"..ec+bM.radius/hV*30+20 .."' font-size='28' fill="..at.." text-anchor='middle' font-family='Montserrat'>"..bM.name.."</text>"end end;local fN=bE;local dl=960+fN.x/hV;local ec=540+fN.y/hW;aX=aX..'<circle cx="'..dl..'" cy="'..ec..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aX=aX.."<text x='"..dl.."' y='"..ec-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aX=aX..[[</svg>]]aY=hV;aZ=hW;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aX)local fN=bE;local dl=960+fN.x/hV;local ec=540+fN.y/hW;aX='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aX=aX.."<text x='80' y='105' font-size='18' fill="..at.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"a_=screen_2.addContent((dl-80)/19.20,(ec-80)/10.80,aX)end end;local function hX()for bV,bM in pairs(SavedLocations)do table.insert(aW[0],bM)end;bU()end;local function hY()local b2={}local hZ=30000000/3600;local h_=hZ*hZ;local i0=100;local function i1(bM)return 1/math.sqrt(1-bM*bM/h_)end;function b2.computeAccelerationTime(i2,i3,i4)local i5=hZ*math.asin(i2/hZ)return(hZ*math.asin(i4/hZ)-i5)/i3 end;function b2.computeDistanceAndTime(i2,i4,i6,i7,i8,i9)i8=i8 or 0;i9=i9 or 0;local ia=i2<=i4;local ib=i7*(ia and 1 or-1)/i6;local ic=-i9/i6;local id=ib+ic;if ia and id<=0 or not ia and id>=0 then return-1,-1 end;local ie,ig=0,0;if ib~=0 and i8>0 then local i5=math.asin(i2/hZ)local ih=math.pi*(ib/2+ic)local ii=ib*i8;local ij=hZ*math.pi;local bM=function(g3)local ik=(ih*g3-ii*math.sin(math.pi*g3/2/i8)+ij*i5)/ij;local il=math.tan(ik)return hZ*il/math.sqrt(il*il+1)end;local im=ia and function(g5)return g5>=i4 end or function(g5)return g5<=i4 end;ig=2*i8;if im(bM(ig))then local io=0;while e(ig-io)>0.5 do local g3=(ig+io)/2;if im(bM(g3))then ig=g3 else io=g3 end end end;local ip=i2;local iq=ig/i0;for ir=1,i0 do local bS=bM(ir*iq)ie=ie+(bS+ip)*iq/2;ip=bS end;if ig<2*i8 then return ie,ig end;i2=ip end;local i5=hZ*math.asin(i2/hZ)local bx=(hZ*math.asin(i4/hZ)-i5)/id;local is=h_*math.cos(i5/hZ)/id;local ac=is-h_*math.cos((id*bx+i5)/hZ)/id;return ac+ie,bx+ig end;function b2.computeTravelTime(i2,i3,ac)if ac==0 then return 0 end;if i3>0 then local i5=hZ*math.asin(i2/hZ)local is=h_*math.cos(i5/hZ)/i3;return(hZ*math.acos(i3*(is-ac)/h_)-i5)/i3 end;if i2==0 then return-1 end;assert(i2>0,'Acceleration and initial speed are both zero.')return ac/i2 end;function b2.lorentz(bM)return i1(bM)end;return b2 end;local function it()local vec3=require('cpml.vec3')local fZ=fZ()local function g4(g5)return type(g5)=='string'end;local function g2(g3)return type(g3)=='table'end;local function bZ(b_,c0)if b_==0 then return e(c0)<1e-09 end;if c0==0 then return e(b_)<1e-09 end;return e(b_-c0)<math.max(e(b_),e(c0))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(c6)assert(self.body)local ac=c6+self.body.radius;if not bZ(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gu,bR)assert(self.body)assert(g2(gu)or g4(gu))assert(g2(bR))local fN=(g4(gu)or fZ.isMapPosition(gu))and self.body:convertToWorldCoordinates(gu)or vec3(gu)local bM=vec3(bR)local iu=fN-self.body.center;local gZ=bM:len2()local iv=iu:len()local iw=self.body.GM;local ix=((gZ-iw/iv)*iu-iu:dot(bM)*bM)/iw;local b_=iw/(2*iw/iv-gZ)local iy=ix:len()local g_=ix:normalize()local iz=b_*(1-iy)local iA=b_*(1+iy)local iB=iz*g_+self.body.center;local iC=iy<=1 and-iA*g_+self.body.center or nil;local iD=math.sqrt(b_*iw*(1-iy*iy))local iE=iC and 2*math.pi*math.sqrt(b_^3/iw)local iF=math.acos(ix:dot(iu)/(iy*iv))if iu:dot(bM)<0 then iF=-(iF-2*math.pi)end;local iG=math.acos((math.cos(iF)+iy)/(1+iy*math.cos(iF)))local iH=iG;if iH<0 then iH=iH+2*math.pi end;local iI=iH-iy*math.sin(iH)local iJ=0;local iK=0;local iL=0;if iE~=nil then iJ=iI/(2*math.pi/iE)iK=iE-iJ;iL=iK+iE/2;if iF-math.pi>0 then iK=iJ;iL=iK+iE/2 end;if iL>iE then iL=iL-iE end end;return{periapsis={position=iB,speed=iD/iz,circularOrbitSpeed=math.sqrt(iw/iz),altitude=iz-self.body.radius},apoapsis=iC and{position=iC,speed=iD/iA,circularOrbitSpeed=math.sqrt(iw/iA),altitude=iA-self.body.radius},currentVelocity=bM,currentPosition=fN,eccentricity=iy,period=iE,eccentricAnomaly=iG,meanAnomaly=iI,timeToPeriapsis=iK,timeToApoapsis=iL}end;local function iM(iN)local h7=fZ.BodyParameters(iN.planetarySystemId,iN.bodyId,iN.radius,iN.center,iN.GM)return setmetatable({body=h7},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iM(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()s:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hd()coroutine.yield()hh()coroutine.yield()hr()hC()coroutine.yield()hQ()b0=fZ()b1=b0(fY())b2=hY()b4=it()b5=dd()hX()bU()co()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(an>0 or an==0 and ao<10000)then for _,bM in pairs(door)do bM.toggle()end end;if switch then for _,bM in pairs(switch)do bM.toggle()end end;if forcefield and(an>0 or an==0 and ao<10000)then for _,bM in pairs(forcefield)do bM.toggle()end end;db()if button then button.activate()end end;function script.onTick(iO)local function iP()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iQ()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iR(iS)local gq=500000;local iT,iU,iV=math.huge;local iW=false;local iX=vec3({13771471,7435803,-128971})local iY=18000000;iT=vec3(iS):dist(iX)if iT<iY then return true,e(iT-iY),"Safe Zone",0 end;iU=vec3(iS):dist(vec3(planet.center))if iU<gq then iW=true end;if e(iU-gq)<e(iT-iY)then return iW,e(iU-gq),planet.name,planet.bodyId else return iW,e(iT-iY),"Safe Zone",0 end end;local function iZ(dk)local i_=0;ay=""local j0=aK;local j1=0;local j2=0;local j3=0;local dL=0;local dM=""local j4=core.getElementHitPointsById;for bV in pairs(ap)do local ho=0;local j5=0;j5=j(ap[bV])ho=j4(ap[bV])j1=j1+ho;if ho<j5 then if ho==0 then j3=j3+1 else j2=j2+1 end;if aL and#av==0 then position=vec3(core.getElementPositionById(ap[bV]))local dl=position.x-aU;local ec=position.y-aU;local j6=position.z-aU;table.insert(av,core.spawnArrowSticker(dl,ec,j6+1,"down"))table.insert(av,core.spawnArrowSticker(dl,ec,j6+1,"down"))core.rotateSticker(av[2],0,0,90)table.insert(av,core.spawnArrowSticker(dl+1,ec,j6,"north"))table.insert(av,core.spawnArrowSticker(dl+1,ec,j6,"north"))core.rotateSticker(av[4],90,90,0)table.insert(av,core.spawnArrowSticker(dl-1,ec,j6,"south"))table.insert(av,core.spawnArrowSticker(dl-1,ec,j6,"south"))core.rotateSticker(av[6],90,-90,0)table.insert(av,core.spawnArrowSticker(dl,ec-1,j6,"east"))table.insert(av,core.spawnArrowSticker(dl,ec-1,j6,"east"))core.rotateSticker(av[8],90,0,90)table.insert(av,core.spawnArrowSticker(dl,ec+1,j6,"west"))table.insert(av,core.spawnArrowSticker(dl,ec+1,j6,"west"))core.rotateSticker(av[10],-90,0,90)table.insert(av,ap[bV])end elseif aL and#av>0 and av[11]==ap[bV]then for dE in pairs(av)do core.deleteSticker(av[dE])end;av={}end end;i_=d(j1/j0*100)if i_<100 then dk[#dk+1]=[[<g class="pbright txt">]]dL=d(i_*2.55)dM=f("rgb(%d,%d,%d)",255-dL,dL,0)if i_<100 then dk[#dk+1]=f([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dM,i_)if j3>0 then dk[#dk+1]=f([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dM,j3,j2)elseif j2>0 then dk[#dk+1]=f([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dM,j2)end end;dk[#dk+1]=[[<\g>]]end end;local function j7(dk)local j8=d(c(ac/(aB/4)*255,0,255))dk[#dk+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(x+0.5)+j8,d(z+0.5)-j8,d(y+0.5)-j8)end;local function j9()local ja=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return ja end;local function jb()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-bE):len()else AutopilotDistance=(CustomTarget.position-bE):len()end end;local bS=bC;local jc=unit.getThrottle()/100;if AtmoSpeedAssist then jc=C end;local jd,je=b2.computeDistanceAndTime(bC,MaxGameVelocity,m(),Nav:maxForceForward()*jc,warmup,0)local a0,a1;if not TurnBurn then a0,a1=d0(MaxGameVelocity)else a0,a1=d1(MaxGameVelocity)end;local _,jf;if not TurnBurn and bS>0 then _,jf=d0(bS)else _,jf=d1(bS)end;local jg=0;local jh=0;if AutopilotCruising or not Autopilot and bS>5 then jh=b2.computeTravelTime(bS,0,AutopilotDistance)elseif a0+jd<AutopilotDistance then jg=AutopilotDistance-(a0+jd)jh=b2.computeTravelTime(8333.0556,0,jg)else local ji=(AutopilotDistance-a0)/jd;jd=AutopilotDistance-a0;je=je*ji end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return jh elseif AutopilotBraking then return jf elseif AutopilotCruising then return jh+jf else return je+a1+jh end end;local function jj()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function jk()if radar_1 then local jl=radar_1.getEntries()local jm=radar_1.getData()local jn=bL(1770)local jo=bN(330)if#jl>0 then local jp=jm:find('identifiedConstructs":%[%]')if jp==nil and perisPanelID==nil then af=1;ch()end;if jp~=nil and perisPanelID~=nil then ch()end;if radarPanelID==nil then ch()end;ad=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jn,jo,#jl)local jq={}for bV,bM in pairs(jl)do if radar_1.hasMatchingTransponder(bM)==1 then table.insert(jq,bM)end end;if#jq>0 then local ec=bN(15)local dl=bL(1370)ad=f([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,dl,ec)for bV,bM in pairs(jq)do ec=ec+20;ad=f([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,dl,ec,radar_1.getConstructName(bM))end end else local jr;jr=jm:find('worksInEnvironment":false')if jr then ad=f([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jn,jo)else ad=f([[
                                        <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jn,jo)end;if radarPanelID~=nil then af=0;ch()end end end end;local function js()local dJ=r()local eX=bC;local jt=dJ-aq;if eX>1.38889 then eX=eX/1000;local ju=eX*(dJ-aq)TotalDistanceTravelled=TotalDistanceTravelled+ju;a5=a5+ju end;a6=a6+jt;TotalFlightTime=TotalFlightTime+jt;aq=dJ end;local function jv()for _,bM in pairs(aA)do if bM.hovered then if not bM.drawCondition or bM.drawCondition()then bM.toggleFunction()end;bM.hovered=false end end end;local function jw()local function jx(jy,jz,dl,ec,hw,hx)if jy>dl and jy<dl+hw and jz>ec and jz<ec+hx then return true else return false end end;local dl=a9+aB/2;local ec=aa+aC/2;for _,bM in pairs(aA)do bM.hovered=jx(dl,ec,bM.x,bM.y,bM.width,bM.height)end end;local function jA(dk)local function jB(dk,jC,hover,dl,ec,ik,jD,jE,jF,jG,jH)if type(jG)=="function"then jG=jG()end;if type(jH)=="function"then jH=jH()end;dk[#dk+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",dl,ec,ik,jD)if jC then dk[#dk+1]=f("%s'",jE)else dk[#dk+1]=jF end;if hover then dk[#dk+1]=" style='stroke:white; stroke-width:2'"else dk[#dk+1]=" style='stroke:black; stroke-width:1'"end;dk[#dk+1]="></rect>"dk[#dk+1]=f("<text x='%f' y='%f' font-size='24' fill='",dl+ik/2,ec+jD/2+5)if jC then dk[#dk+1]="black"else dk[#dk+1]="white"end;dk[#dk+1]="' text-anchor='middle' font-family='Montserrat'>"if jC then dk[#dk+1]=f("%s</text>",jG)else dk[#dk+1]=f("%s</text>",jH)end end;local jI="rgb(50,50,50)'"local jJ="rgb(210,200,200)"local jK=jB;for _,bM in pairs(aA)do local hv=bM.disableName;local hu=bM.enableName;if type(hv)=="function"then hv=hv()end;if type(hu)=="function"then hu=hu()end;if not bM.drawCondition or bM.drawCondition()then jK(dk,bM.toggleVar(),bM.hovered,bM.x,bM.y,bM.width,bM.height,jJ,jI,hv,hu)end end end;if iO=="tenthSecond"then if an>0 and not WasInAtmo then if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then C=1;Nav.control.cancelCurrentControlMasterMode()G=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iP()end;if AutopilotTargetName~=nil then local jL=CustomTarget~=nil;planetMaxMass=j9()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=jb()if jL and not Autopilot then ac=(bE-CustomTarget.position):len()else ac=(AutopilotTargetCoords-bE):len()end;if not TurnBurn then a0,a1=d0(bC)a2,a3=d0(MaxGameVelocity)else a0,a1=d1(bC)a2,a3=d1(MaxGameVelocity)end;local f8,ce=ca(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..f8 ..'", "unit":"'..ce..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..d3(travelTime)..'", "unit":""}')f8,ce=ca(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f8 ..'", "unit":"'..ce..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..d3(a1)..'", "unit":""}')f8,ce=ca(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f8 ..'", "unit":"'..ce..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..d3(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..f("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f8,ce=ca(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..f("%.2f",f8)..'", "unit":"'..ce..'"}')if an>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if k()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iQ()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iO=="oneSecond"then ak=false;bO(nil,true)js()jk()jj()local dk={}dk=b5.DrawOdometer(dk,a5,TotalDistanceTravelled,a6)if ShouldCheckDamage then iZ(dk)end;ae=table.concat(dk,"")collectgarbage("collect")elseif iO=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local cd=g(dbHud_1.getStringValue("SavedLocations"))if cd~=nil then _G["SavedLocations"]=cd;local cz=-1;local cA;for bV,bM in pairs(SavedLocations)do if bM.name and bM.name=="SatNav Location"then cz=bV;break end end;if cz~=-1 then cA=SavedLocations[cz]cz=-1;for bV,bM in pairs(aW[0])do if bM.name and bM.name=="SatNav Location"then cz=bV;break end end;if cz>-1 then aW[0][cz]=cA end;bU()W=cA.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)co()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iO=="msgTick"then local dk={}b5.DisplayMessage(dk,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif iO=="animateTick"then b7=true;b6=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif iO=="hudTick"then local dk={}b5.HUDPrologue(dk)if showHud then b5.UpdateHud(dk)else b5.DisplayOrbitScreen(dk)b5.DrawWarnings(dk)end;b5.HUDEpilogue(dk)dk[#dk+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aB,aC)if W~="empty"then b5.DisplayMessage(dk,W)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then b5.DrawDeadZone(dk)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then jw()jA(dk)if screen_1.getMouseState()==1 then jv()end;dk[#dk+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)elseif system.isViewLocked()==0 then if n()==1 and V then jw()jA(dk)if not b6 and not b7 then local jM=table.concat(dk,"")dk={}dk[#dk+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aB,aC)dk[#dk+1]=aX;dk[#dk+1]=jM;dk[#dk+1]="</body>"b6=true;dk[#dk+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(dk,"")system.setScreen(content)elseif b7 then local jM=table.concat(dk,"")dk={}dk[#dk+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aB,aC)dk[#dk+1]=aX;dk[#dk+1]=jM;dk[#dk+1]="</body>"end;if not b6 then dk[#dk+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)end else jv()end else if not V and n()==0 then jv()if ac>DeadZone then if DisplayDeadZone then j7(dk)end end else jw()jA(dk)end;dk[#dk+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],H,I,a9,aa)end;dk[#dk+1]=[[</svg></body>]]content=table.concat(dk,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iO=="apTick"then am=k()>0;an=k()ao=core.getAltitude()if antigrav then bG=antigrav.getState()==1 end;bx=r()local jN=bx-bd;bd=bx;local fG=getRoll(bD,bz,bA)local fH=fG/180*math.pi;local fI=math.cos(fH)local fJ=math.sin(fH)local jO=cC(bD,bz,bA*fI+by*fJ)local jP=-math.deg(cH(by,bB,bz))local jQ=math.deg(cH(bA,bB,bz))local jR=1;local jS=1;bc=am and jP<-YawStallAngle or jP>YawStallAngle or jQ<-PitchStallAngle or jQ>PitchStallAngle;ba=system.getMouseDeltaX()bb=system.getMouseDeltaY()if InvertMouse and not V then bb=-bb end;P=0;T=0;O=0;sys=b1[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b4(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bB)if ao==0 then ao=(bE-planet.center):len()-planet.radius end;aj=ci()local bP=planet:getGravity(core.getConstructWorldPos()):len()*m()be=0;b3=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not am then A,B,_,_=iR(bE)else A=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*aB;aa=screen_1.getMouseY()*aC elseif system.isViewLocked()==0 then if n()==1 and V then if not b6 then a9=a9+ba;aa=aa+bb end else a9=0;aa=0 end else a9=a9+ba;aa=aa+bb;ac=math.sqrt(a9*a9+aa*aa)if not V and n()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bb,-100,100)+0.5)*2*jR;P=(-utils.smoothstep(ba,-100,100)+0.5)*2*jS else a9=0;aa=0 end end end;local jT=bC>8334;if bC>SpaceSpeedLimit/3.6 and not am and not Autopilot and not jT then W="Space Speed Engine Shutoff reached"if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,0)C=0 end;if not jT and LastIsWarping then if not BrakeIsOn then cL()end;if Autopilot then ct()end end;LastIsWarping=jT;if am and an>0.09 then if bC>bh/3.6 and not AtmoSpeedAssist and not as then BrakeIsOn=true;as=true elseif not AtmoSpeedAssist and as then if bC<bh/3.6 then BrakeIsOn=false;as=false end end end;if BrakeIsOn then S=1 else S=0 end;if ProgradeIsOn then if ag then BrakeIsOn=false;local jU=false;if CustomTarget~=nil then jU=cP(CustomTarget.position-bE,0.01)else jU=cP(vec3(bB),0.01)end;b8=true;if jU and(e(fG)<2 or e(jO)>85)and bC>=bh/3.6-1 then if(vec3(targetCoords)-bE):len()>40000 then ProgradeIsOn=false;IntoOrbit=true else BrakeIsOn=false;ProgradeIsOn=false;L=true;ag=false;ai=true;Autopilot=false;cY()end elseif am and AtmoSpeedAssist then bH(1)else bK(d(bh))C=0 end elseif bC>K then cP(vec3(bB),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif bC>K then cP(-vec3(bB))end end;if not ProgradeIsOn and ag and not IntoOrbit then if an==0 then L=true;cY()ag=false;ai=true else ag=false;ct()end end;local cs=bD*-1;local dP=bB.x*cs.x+bB.y*cs.y+bB.z*cs.z;if ai and CustomTarget~=nil and(ao<HoldAltitude+200 and ao>HoldAltitude-200)and bC*3.6>bh-100 and e(dP)<20 and an>=0.1 and(CustomTarget.position-bE):len()>2000+ao then ct()ai=false end;if VertTakeOff then b8=true;if dP<-30 then W="Unable to achieve lift. Safety Landing."a8=0;b8=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bG or HoldAltitude<planet.spaceEngineMinAltitude then local jV=HoldAltitude;if bG then jV=antigrav.getBaseAltitude()end;if ao<jV-100 then bi=0;a8=15;BrakeIsOn=false elseif dP>0 then BrakeIsOn=true;a8=0 elseif dP<-30 then BrakeIsOn=true;a8=15 elseif ao>=jV then if bG then BrakeIsOn=true;W="Takeoff complete. Singularity engaged"VertTakeOff=false else BrakeIsOn=false;W="VTO complete. Engaging Horizontal Flight"cl()end;a8=0 end else if an>0.08 then bi=0;BrakeIsOn=false;a8=20 elseif an<0.08 and an>0 then BrakeIsOn=false;if bu then bi=0;a8=20 else a8=0;bi=36;bK(3500)end else b8=autoRollPreference;IntoOrbit=true;bs=false;CancelIntoOrbit=false;bm=false;bk=nil;bl=nil;if br==nil then br=planet end;bq=HoldAltitude;bp=true;VertTakeOff=false end end;if bi~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jW=c(bi-jO,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jW)local jX=c(vTpitchPID:get(),-1,1)O=jX end end;if IntoOrbit then if br==nil then if VectorToTarget then br=a4 else br=planet end end;if not bp then if br.hasAtmosphere then bq=d(br.radius*(TargetOrbitRadius-1)+br.noAtmosphericDensityAltitude)else bq=d(br.radius*(TargetOrbitRadius-1)+br.surfaceMaxAltitude)end;bp=true end;if AltitudeHold or VectorToTarget then if not ah then bq=t(HoldAltitude,1)bm=true;AltitudeHold=false end;if VectorToTarget then bo.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jY,jZ=ca(bq,2)local j_=jY..jZ;local k0,k1=b4(br):escapeAndOrbitalSpeed((bE-br.center):len()-br.radius)local k2=fG;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ao>bq*0.9 and ao<bq*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bq*0.99 and orbit.apoapsis.altitude>=bq*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bs then if bs then BrakeIsOn=false;C=0;bH(0)bs=true;bk=0;if bo.VectorToTarget or ag then local cV=CustomTarget.position-bE;local a0,_=b2.computeDistanceAndTime(bC,bh/3.6,m(),0,0,LastMaxBrake)if bB:normalize():dot(cV:normalize())>0.5 and cV:len()>15000+a0+ao then bj="Orbiting to Target"else W="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;L=true;ag=false;ai=true;cY()bo.VectorToTarget=false end end;if not bo.VectorToTarget and not ag then bj=nil;bn=false;bp=false;br=nil;b8=autoRollPreference;if not ai then W="Orbit established"end;bo.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bm=false;bk=nil;bl=nil;br=nil;bs=false;bw=0 end else bw=bw+1;if bw>=2 then bs=true end end else bj="Adjusting Orbit - OrbitHeight: "..j_;bn=true;bK(k1*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local k3=dP;local k4=ao-bq;local k5=e(k4)if dP<10 and e(jO)<10 and k5<100 then k3=dP*2 end;if k3<10 and e(jO)<10 and k5<100 then k3=k3*2 end;if k3<5 and e(jO)<5 and k5<100 then k3=k3*4 end;VSpdPID:inject(k3)bk=c(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(k4)bk=c(bk-c(OrbitAltPID:get(),-15,15),-90,90)end end else local k6=2.75;local k7=e(q(k0*k6))local k8=k7%50;if k8>0 then k7=k7-k8+50 end;BrakeIsOn=false;if not bm then local k9=false;local ka=false;if ao<bq then bj="Aligning to orbital path - OrbitHeight: "..j_ else bj="Aligning to orbital point - OrbitHeight: "..j_ end;bk=0;bl=0;if jO<=bk+1 and jO>=bk-1 then k9=true else k9=false end;if k2<=bl+1 and k2>=bl-1 then ka=true else ka=false end;if k9 and ka then bk=nil;bl=nil;bm=true end else if ao<bq*0.8 then bj="Escaping planet gravity - OrbitHeight: "..j_;bk=utils.map(dP,200,0,-15,80)elseif ao>=bq*0.8 and ao<bq*1.15 then bj="Approaching orbital corridor - OrbitHeight: "..j_;k7=k7*0.75;bk=utils.map(dP,100,-100,-15,65)elseif ao>=bq*1.15 and ao<bq*1.5 then bj="Approaching orbital corridor - OrbitHeight: "..j_;k7=k7*0.75;if dP<0 or bn then bk=utils.map(ao,bq*1.5,bq*1.01,-30,0)else bk=utils.map(ao,bq*0.99,bq*1.5,0,30)end elseif ao>bq*1.5 then bj="Reentering orbital corridor - OrbitHeight: "..j_;bk=utils.map(dP,100,-100,-65,0)k7=k7*0.75 end end;bK(d(k7))end;if bk~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local kb=bk-jO;OrbitPitchPID:inject(kb)local kc=c(OrbitPitchPID:get(),-0.5,0.5)O=kc end;if bl~=nil then if jO<85 then local kd=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(kd*0.01,0,kd*0.1)end;local ke=bl-k2;OrbitRollPID:inject(ke)local kf=c(OrbitRollPID:get(),-0.5,0.5)T=kf end end elseif CancelIntoOrbit then bp=false;br=nil;bH(0)CancelIntoOrbit=false end;if Autopilot and an==0 and not ag then local targetCoords,kg=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kh=(CustomTarget.position-a4.center):normalize()local ki=kh:project_on_plane((a4.center-bE):normalize()):normalize()local kj=a4.center+ki*(a4.radius+AutopilotTargetOrbit)local kk=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(bE-kj):len()<(bE-kk):len()then targetCoords=kj;AutopilotTargetCoords=targetCoords else targetCoords=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=targetCoords end;local cv=c1(a4,AutopilotTargetCoords)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)kg=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;kg=true;TargetSet=true;AutopilotRealigned=true;targetCoords=CustomTarget.position+(bE-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kh=(bE+bB*100000-a4.center):normalize()local ki=kh:project_on_plane((a4.center-bE):normalize()):normalize()if ki:len()<1 then kh=(bE+bz*100000-a4.center):normalize()ki=kh:project_on_plane((a4.center-bE):normalize()):normalize()end;targetCoords=a4.center+ki*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=targetCoords;TargetSet=true;kg=true;AutopilotRealigned=true;local cv=c1(a4,AutopilotTargetCoords)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)end end;AutopilotDistance=(vec3(targetCoords)-bE):len()local f9,fa,fb=b1:getPlanetarySystem(0):castIntersections(bE,bB:normalize(),function(fc)if fc.noAtmosphericDensityAltitude>0 then return fc.radius+fc.noAtmosphericDensityAltitude else return fc.radius+fc.surfaceMaxAltitude*1.5 end end)local fd=fa;if fb~=nil and fa~=nil then fd=math.min(fb,fa)end;if fd~=nil and fd<AutopilotDistance and f9.name==a4.name then AutopilotDistance=fd end;local jU=true;local kl=(a4.center-(bE+vec3(bB):normalize()*AutopilotDistance)):len()-a4.radius;local f8,ce=ca(kl)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f8 ..'", "unit":"'..ce..'"}')local a0,a1;if not TurnBurn then a0,a1=d0(bC)else a0,a1=d1(bC)end;if bC>300 and AutopilotAccelerating then local cV=vec3(targetCoords)-bE;local km=c(math.deg(cH(by,bB:normalize(),cV:normalize()))*bC/500,-90,90)local kn=c(math.deg(cH(bA,bB:normalize(),cV:normalize()))*bC/500,-90,90)if e(km)<20 and e(kn)<20 then km=km*2;kn=kn*2 end;if e(km)<2 and e(kn)<2 then km=km*2;kn=kn*2 end;local jP=-math.deg(cH(by,bz,bB:normalize()))local jQ=-math.deg(cH(bA,bz,bB:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kn-jQ)local ko=c(apPitchPID:get(),-1,1)O=O+ko;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(km-jP)local kp=c(apYawPID:get(),-1,1)P=P+kp;kg=true;if e(km)>2 or e(kn)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kl<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b4(a4):escapeAndOrbitalSpeed(kl)end end;if not AutopilotCruising and not AutopilotBraking and not kg then jU=cP((targetCoords-bE):normalize())elseif TurnBurn then jU=cP(-vec3(bB):normalize())end;if AutopilotAccelerating then if not J then BrakeIsOn=false;bH(AutopilotInterplanetaryThrottle)C=t(AutopilotInterplanetaryThrottle,2)J=true end;local jc=unit.getThrottle()if AtmoSpeedAssist then jc=C end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jc==0 and J then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bH(0)C=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bH(0)C=0;J=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then bH(100,true)C=1 end;local _,k1=b4(a4):escapeAndOrbitalSpeed((bE-planet.center):len()-planet.radius)local cV;if CustomTarget~=nil then cV=CustomTarget.position-bE end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bC<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bC<=k1 and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bH(0)C=0;J=false;ProgradeIsOn=true;ag=true;local cv=c1(a4,AutopilotTargetCoords)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,k1=b4(a4):escapeAndOrbitalSpeed((bE-planet.center):len()-planet.radius)if bC<=k1 then if CustomTarget~=nil then if bB:normalize():dot(cV:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cv=c1(a4,CustomTarget.position)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bH(0)C=0;J=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cv=c1(a4,CustomTarget.position)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;C=0;J=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ag=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jc=unit.getThrottle()if AtmoSpeedAssist then jc=C end;if jc>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jU then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*bA;AutopilotShipUp=by;AutopilotShipRight=bA end;AutopilotRealigned=true elseif jU then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not J then bH(AutopilotInterplanetaryThrottle,true)C=t(AutopilotInterplanetaryThrottle,2)J=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and an>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;bH(0)C=0;J=false;ProgradeIsOn=true;ag=true;local cv=c1(a4,CustomTarget.position)cv="::pos{"..cv.systemId..","..cv.bodyId..","..cv.latitude..","..cv.longitude..","..cv.altitude.."}"system.setWaypoint(cv)end;if U then b8=true;local kn=0;local fN=bE+vec3(unit.getMasterPlayerRelativePosition())local kq=fN-bE;local kr=vec3(kq):project_on(bz):len()local ks=vec3(kq):project_on(bA):len()local ac=math.sqrt(kr*kr+ks*ks)cP(kq:normalize())local kt=40;local ku=ac<kt;local kv=100;local kw=c((ac-kt)/2,10,kv)O=0;local jU=e(P)<0.1;if jU and bC<kw and not ku then BrakeIsOn=false;kn=-20 else BrakeIsOn=true;kn=0 end;local kx=0;if e(kn-jO)>kx then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kn-jO)local ko=pitchPID:get()O=ko end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cw=unit.getClosestPlanetInfluence()>0;local ky=HoldAltitude-ao;local kz=500+bC;local kA=1;if AutoTakeoff then kA=c(bC/100,0.1,1)end;local kn=(utils.smoothstep(ky,-kz,kz)-0.5)*2*MaxPitch*kA;if not Reentry and not ag and not VectorToTarget and bz:dot(bB:normalize())<0.99 then kn=(utils.smoothstep(ky,-kz*c(20-19*an*10,1,20),kz*c(20-19*an*10,1,20))-0.5)*2*MaxPitch*c(2-an*10,1,2)*kA end;if not AltitudeHold then kn=0 end;if LockPitch~=nil then if am and not IntoOrbit then kn=LockPitch else LockPitch=nil end end;b8=true;local kB=O;if Reentry then local kC=d(bh)local kD,kE=b2.computeDistanceAndTime(bC,kC/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kF=ao-(planet.noAtmosphericDensityAltitude+5000)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ao>planet.noAtmosphericDensityAltitude+5000 and bC<=kC/3.6 and bC>kC/3.6-10 and e(bB:normalize():dot(bz))>0.9 then Nav.control.cancelCurrentControlMasterMode()C=0 elseif s:getAxisCommandType(0)==axisCommandType.byThrottle and(kD>-1 and kF<=kD or ao<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bK(kC,true)if not L then kn=-80;if an>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kn=0;b8=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ao>planet.noAtmosphericDensityAltitude+5000 then b8=true elseif ao<=planet.noAtmosphericDensityAltitude+5000 then bK(kC)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and s:getTargetSpeed(axisCommandId.longitudinal)==bh then L=false;Reentry=false;b8=true end end end;if bC>K and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then cP(vec3(bB))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and an>0.01 then local cV;if CustomTarget~=nil then cV=CustomTarget.position-bE else cV=a4.center-bE end;local km=math.deg(cH(bD:normalize(),bB,cV))*2;local kG=math.rad(e(fG))if bC>minRollVelocity and an>0.01 then local kH=c(90-kn*2,-90,90)be=c(km*2,-kH,kH)local kI=km;km=c(c(km,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kG)+4*(jO-kn)*math.sin(math.rad(fG)),-YawStallAngle*0.85,YawStallAngle*0.85)kn=c(c(kn*math.cos(kG),-PitchStallAngle*0.85,PitchStallAngle*0.85)+e(c(e(kI)*math.sin(kG),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else be=0;km=c(km,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kJ=jP-km;if not bc and bC>minRollVelocity and an>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kJ)local kp=c(yawPID:get(),-1,1)P=P+kp elseif am and aj>-1 or bC<minRollVelocity then cP(cV)elseif bc and an>0.01 then if(jP<-YawStallAngle or jP>YawStallAngle)and an>0.01 then cP(bB)end;if(jQ<-PitchStallAngle or jQ>PitchStallAngle)and an>0.01 then kn=c(jO-jQ,jO-PitchStallAngle*0.85,jO+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ah then local jV=planet:getAltitude(CustomTarget.position)local kF=math.sqrt(cV:len()^2-(ao-jV)^2)local kK=LastMaxBrakeInAtmo;if kK then kK=kK*c(bC/100,0.1,1)*an else kK=LastMaxBrake end;if an<0.01 then kK=LastMaxBrake end;local kL=bB:len()-e(dP)local kM=vec3(core.getWorldAirFrictionAcceleration())local kN=math.sqrt(kM:len()-kM:project_on(cs):len())*m()if bC>100 then a0,a1=b2.computeDistanceAndTime(bC,100,m(),0,0,kK+kN)local kO,kP=b2.computeDistanceAndTime(100,0,m(),0,0,kK/2)a0=a0+kO else a0,a1=b2.computeDistanceAndTime(bC,0,m(),0,0,kK/2)end;StrongBrakes=true;if not ah and not Reentry and kF<=a0+bC*jN/2 and(bB:project_on_plane(bD):normalize():dot(cV:project_on_plane(bD):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bH(0)C=0;if AltitudeHold then cm()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kL<0.1 or kF<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kF)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kF end elseif VectorToTarget and an==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ah or Reentry)then if CustomTarget~=nil and a4.name==planet.name then local cV=CustomTarget.position-bE;local jV=planet:getAltitude(CustomTarget.position)local kF=math.sqrt(cV:len()^2-(ao-jV)^2)local kK=LastMaxBrakeInAtmo;if not bs then bp=false;IntoOrbit=true else kK=LastMaxBrake;a0,a1=b2.computeDistanceAndTime(bC,0,m(),0,0,kK/2)StrongBrakes=true;if kF<=a0+bC*jN/2 and bB:project_on_plane(bD):normalize():dot(cV:project_on_plane(bD):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;L=true;ag=false;ai=true;Autopilot=false;cY()end end;LastDistanceToTarget=kF end end end;if an==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ah or VectorToTarget or IntoOrbit or Reentry)then if not bs then IntoOrbit=true end end;if bc and an>0.01 and aj==-1 and bC>minRollVelocity and VectorStatus~="Finalizing Approach"then cP(bB)kn=c(jO-jQ,jO-PitchStallAngle*0.85,jO+PitchStallAngle*0.85)end;O=kB;local d9=-1;if BrakeLanding then kn=0;local kQ=false;local kR=30;if b3~=nil and b3>0 then local kN=0;local fO=c(an,0.4,2)local kK=LastMaxBrakeInAtmo*c(bC/100,0.1,1)*fO;local kS=b3*fO+kK+kN-bP;local kT=kK/2+kN-bP;local kU=bC-math.sqrt(e(kT/2)*20/(0.5*m()))*utils.sign(kT)if kU<0 then kU=0 end;local kV;if bC>100 then local kW,_=b2.computeDistanceAndTime(bC,100,m(),0,0,kK)local kX,_=b2.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kK))kV=kW+kX else kV=b2.computeDistanceAndTime(bC,0,m(),0,0,math.sqrt(kK))end;if kV<20 then BrakeIsOn=false else local kY=0;if kU>100 then local kZ,_=b2.computeDistanceAndTime(kU,100,m(),0,0,kS)local k_,_=b2.computeDistanceAndTime(100,0,m(),0,0,b3*fO+math.sqrt(kK)+kN-bP)kY=kZ+k_ else kY,_=b2.computeDistanceAndTime(kU,0,m(),0,0,b3*fO+math.sqrt(kK)+kN-bP)end;kY=(kY+15+bC*jN)*1.1;local l0=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if l0 then local jV=planet:getAltitude(CustomTarget.position)local l1=ao-jV-100;local cV=CustomTarget.position-bE;local l2=math.sqrt(cV:len()^2-(ao-jV)^2)if l2>100 then l0=false elseif l1<=kY or kY==-1 then BrakeIsOn=true;kQ=true else BrakeIsOn=false;kQ=true end end;if not l0 and CalculateBrakeLandingSpeed then if kY>=kR then BrakeIsOn=true else BrakeIsOn=false end;kQ=true end end end;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setTargetGroundAltitude(500)s:activateGroundEngineAltitudeStabilization(500)d9=aj;if d9>-1 then b8=autoRollPreference;if bC<1 or bB:normalize():dot(bD)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bB:normalize():dot(-cs)<0.999 then BrakeIsOn=true elseif dP<-brakeLandingRate and not kQ then BrakeIsOn=true elseif not kQ then BrakeIsOn=false end end;if AutoTakeoff or ah then local f9,fb,fa;if AutopilotTargetCoords~=nil then f9,fb,fa=b1:getPlanetarySystem(0):castIntersections(bE,(AutopilotTargetCoords-bE):normalize(),function(fc)return fc.radius+fc.noAtmosphericDensityAltitude end)end;if bG then if ao>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bH(0)C=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif e(kn)<15 and ao/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if s:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and bC<K then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;bH(0)C=0 elseif ah then bH(0)C=0;BrakeIsOn=true end elseif ah and an==0 and a4~=nil and(f9==nil or f9.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local l3=ci()>-1;local l4=jO;if(VectorToTarget or ah)and not l3 and bC>minRollVelocity and an>0.01 then local kG=math.rad(e(fG))l4=jO*e(math.cos(kG))+jQ*math.sin(kG)end;local l5=c(kn-l4,-PitchStallAngle*0.85,PitchStallAngle*0.85)if an<0.01 and VectorToTarget then l5=c(kn-l4,-85,MaxPitch)elseif an<0.01 then l5=c(kn-l4,-MaxPitch,MaxPitch)end;if e(fG)<5 or VectorToTarget or BrakeLanding or l3 or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(l5)local ko=pitchPID:get()O=O+ko end end;if antigrav~=nil and(antigrav and not ExternalAGG and ao<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function l6(l7,kw)local l8=vec3()local l9=vec3()if l7==axisCommandId.longitudinal then l8=vec3(core.getConstructOrientationForward())l9=bz elseif l7==axisCommandId.vertical then l8=vec3(core.getConstructOrientationUp())l9=by elseif l7==axisCommandId.lateral then l8=vec3(core.getConstructOrientationRight())l9=bA else return vec3()end;local la=vec3(core.getWorldGravity())local lb=la:dot(l9)local lc=vec3(core.getWorldAirFrictionAcceleration())local ld=lc:dot(l9)local le=vec3(core.getVelocity())local lf=le:dot(l8)local lg=kw*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lg-lf)local lh=targetSpeedPID2:get()local li=(lh-ld-lb)*l9;return li end;local function lj(l7,kw)local l8=vec3()local l9=vec3()if l7==axisCommandId.longitudinal then l8=vec3(core.getConstructOrientationForward())l9=bz elseif l7==axisCommandId.vertical then l8=vec3(core.getConstructOrientationUp())l9=by elseif l7==axisCommandId.lateral then l8=vec3(core.getConstructOrientationRight())l9=bA else return vec3()end;local la=vec3(core.getWorldGravity())local lb=la:dot(l9)local lc=vec3(core.getWorldAirFrictionAcceleration())local ld=lc:dot(l9)local le=vec3(core.getVelocity())local lf=le:dot(l8)local lg=kw*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lg-lf)local lh=targetSpeedPID:get()local li=(lh-ld-lb)*l9;return li end;if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if s:getAxisCommandType(0)==axisCommandType.byThrottle and G then C=0;s:setThrottleCommand(axisCommandId.longitudinal,C)G=false elseif s:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not G then C=0;G=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lk=c(N+O+system.getControlDeviceForwardInput(),-1,1)local ll=c(Q+T+system.getControlDeviceYawInput(),-1,1)local lm=c(R+P-system.getControlDeviceLeftRightInput(),-1,1)local ln=S;bD=vec3(core.getWorldVertical())if bD==nil or bD:len()==0 then bD=(planet.center-bE):normalize()end;bE=vec3(core.getConstructWorldPos())by=vec3(core.getConstructWorldOrientationUp())bz=vec3(core.getConstructWorldOrientationForward())bA=vec3(core.getConstructWorldOrientationRight())bB=vec3(core.getWorldVelocity())bC=vec3(bB):len()local lo=bB:normalize()local lp=getRoll(bD,bz,bA)local lq=e(lp)local lr=utils.sign(lp)local ls=vec3(core.getWorldAngularVelocity())local lt=lk*pitchSpeedFactor*bA+ll*rollSpeedFactor*bz+lm*yawSpeedFactor*by;if bD:len()>0.01 and(an>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local fG=getRoll(bD,bz,bA)local fH=fG/180*math.pi;local fI=math.cos(fH)local fJ=math.sin(fH)local jO=cC(bD,bz,bA*fI+by*fJ)if b8==true and e(be-lp)>autoRollRollThreshold and ll==0 and e(jO)<85 then local lu=be;local kd=autoRollFactor;if an==0 then kd=kd/4;be=0;lu=0 end;if rollPID==nil then rollPID=pid.new(kd*0.01,0,kd*0.1)end;rollPID:inject(lu-lp)local lv=rollPID:get()lt=lt+lv*bz end end;if bD:len()>0.01 and an>0.0 then local lw=20.0;if turnAssist==true and lq>lw and lk==0 and lm==0 then local lx=turnAssistFactor*0.1;local ly=turnAssistFactor*0.025;local lz=(lq-lw)/(180-lw)*180;local lA=0;if lz<90 then lA=lz/90 elseif lz<180 then lA=(180-lz)/90 end;lA=lA*lA;local lB=-lr*ly*(1.0-lA)local lC=lx*lA;lt=lt+lC*bA+lB*by end end;local lD=1;local lE=0;local lF=1;if system.getMouseWheel()>0 then if AltIsOn then if an>0 or Reentry then bh=c(bh+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=c(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else C=t(c(C+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if an>0 or Reentry then bh=c(bh-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=c(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else C=t(c(C-speedChangeLarge/100,-1,1),2)end end;D=0;local dP=-bD:dot(bB)if am and AtmoSpeedAssist and s:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bh/3.6-bB:dot(bz))local lG=throttlePID:get()F=c(lG,-1,1)if F<C and an>0.005 then E=true;s:setThrottleCommand(axisCommandId.longitudinal,c(F,0.01,1))else E=false;s:setThrottleCommand(axisCommandId.longitudinal,C)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-bh/3.6)local lH=c(brakePID:get(),0,1)if an>0 and dP<-80 or an>0.005 then D=lH end;if D>0 then if E and F==0.01 then s:setThrottleCommand(axisCommandId.longitudinal,0)end else F=c(F,0.01,1)end;local lI=''local lJ=vec3()local lK=l6(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lK,lE)local lL='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lL=lL..ExtraLongitudeTags end;local lM=s:getAxisCommandType(axisCommandId.longitudinal)local lN=s:composeAxisAccelerationFromThrottle(lL,axisCommandId.longitudinal)local lO=lj(axisCommandId.lateral,LeftAmount*1000)lI=lI..' , '.."lateral airfoil , lateral ground "lJ=lJ+lO;if lJ:len()>constants.epsilon then Nav:setEngineForceCommand(lI,lJ,lE,'','','',lF)end;Nav:setEngineForceCommand(lL,lN,lD)local lP='thrust analog vertical fueled 'local lQ='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lQ=lQ..ExtraLateralTags end;if ExtraVerticalTags~="none"then lP=lP..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lP,lK,lD)else Nav:setEngineForceCommand(lP,vec3(),lD)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lQ,lO,lD)else Nav:setEngineForceCommand(lQ,vec3(),lD)end;if ln==0 then ln=D end;local lR=-ln*(brakeSpeedFactor*bB+brakeFlatFactor*lo)Nav:setEngineForceCommand('brake',lR)else if AtmoSpeedAssist then s:setThrottleCommand(axisCommandId.longitudinal,C)end;local kw=unit.getAxisCommandValue(0)if s:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bB:len()-kw/3.6)local lH=c(brakePID:get(),0,1)ln=c(ln+lH,0,1)end;local lR=-ln*(brakeSpeedFactor*bB+brakeFlatFactor*lo)Nav:setEngineForceCommand('brake',lR)local lI=''local lJ=vec3()local lS=false;local lL='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lL=lL..ExtraLongitudeTags end;local lM=s:getAxisCommandType(axisCommandId.longitudinal)if lM==axisCommandType.byThrottle then local lN=s:composeAxisAccelerationFromThrottle(lL,axisCommandId.longitudinal)Nav:setEngineForceCommand(lL,lN,lD)elseif lM==axisCommandType.byTargetSpeed then local lN=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lI=lI..' , '..lL;lJ=lJ+lN;if s:getTargetSpeed(axisCommandId.longitudinal)==0 or s:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-s:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lS=true end end;local lQ='thrust analog lateral 'if ExtraLateralTags~="none"then lQ=lQ..ExtraLateralTags end;local lT=s:getAxisCommandType(axisCommandId.lateral)if lT==axisCommandType.byThrottle then local lU=s:composeAxisAccelerationFromThrottle(lQ,axisCommandId.lateral)Nav:setEngineForceCommand(lQ,lU,lD)elseif lT==axisCommandType.byTargetSpeed then local lO=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lI=lI..' , '..lQ;lJ=lJ+lO end;local lP='thrust analog vertical 'if ExtraVerticalTags~="none"then lP=lP..ExtraVerticalTags end;local lV=s:getAxisCommandType(axisCommandId.vertical)if lV==axisCommandType.byThrottle then local lK=s:composeAxisAccelerationFromThrottle(lP,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lP,lK,lD,'airfoil','ground','',lF)else Nav:setEngineForceCommand(lP,vec3(),lD)Nav:setEngineForceCommand('airfoil vertical',lK,lD,'airfoil','','',lF)Nav:setEngineForceCommand('ground vertical',lK,lD,'ground','','',lF)end elseif lV==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),lD)end;local lW=s:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lI=lI..' , '..lP;lJ=lJ+lW end;if lJ:len()>constants.epsilon then if S~=0 or lS or e(lo:dot(bz))<0.8 then lI=lI..', brake'end;Nav:setEngineForceCommand(lI,lJ,lE,'','','',lF)end end;local lX=torqueFactor*(lt-ls)local lY=vec3(core.getWorldAirFrictionAngularAcceleration())lX=lX-lY;Nav:setEngineTorqueCommand('torque',lX,lD,'airfoil','','',lF)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bS=vec3(core.getVelocity()):len()local lZ=0.15;if s:getAxisCommandType(0)==1 then local l_=s:getTargetSpeed(axisCommandId.longitudinal)if bS*3.6>l_*(1-lZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS*3.6<l_*(1-lZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jc=unit.getThrottle()if AtmoSpeedAssist then jc=C*100 end;local kw=jc/100;if k==0 then kw=kw*MaxGameVelocity;if bS>=kw*(1-lZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS<kw*(1-lZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local kC=d(bh)kw=kw*kC/3.6;if bS>=kw*(1-lZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bS<kw*(1-lZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cd=coroutine.resume(beginSetup)if cd then SetupComplete=true end else Nav:update()if not b6 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(m0)local function m1()az=not az;if not az then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function m2()if LockPitch==nil and am then LockPitch=cC(bD,bz,bA)AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function m3()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;J=false;ag=false;ah=false;L=false;b8=autoRollPreference;VectorToTarget=false;TurnBurn=false;ar=false;LockPitch=nil;IntoOrbit=false else ak=true end end;if m0=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if s:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;s:setThrottleCommand(axisCommandId.longitudinal,0)C=0;if(vBooster or hover)and aj==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;b8=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()s:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;s:setTargetGroundAltitude(TargetHoverHeight)end elseif m0=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif m0=="forward"then N=N-1 elseif m0=="backward"then N=N+1 elseif m0=="left"then Q=Q-1 elseif m0=="right"then Q=Q+1 elseif m0=="yawright"then R=R-1 elseif m0=="yawleft"then R=R+1 elseif m0=="straferight"then s:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif m0=="strafeleft"then s:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif m0=="up"then a8=a8+1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif m0=="down"then a8=a8-1;s:deactivateGroundEngineAltitudeStabilization()s:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif m0=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+X else s:updateTargetGroundAltitudeFromActionStart(1.0)end elseif m0=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-X else s:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif m0=="option1"then cr()toggleView=false elseif m0=="option2"then cr(1)toggleView=false elseif m0=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;m1()toggleView=false elseif m0=="option4"then ct()toggleView=false elseif m0=="option5"then m2()toggleView=false elseif m0=="option6"then cm()toggleView=false elseif m0=="option7"then toggleView=false elseif m0=="option8"then cn()toggleView=false elseif m0=="option9"then if gyro~=nil then gyro.toggle()ar=gyro.getState()==1 end;toggleView=false elseif m0=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then V=true;b7=false;b6=false end elseif m0=="brake"then if BrakeToggleStatus then cL()elseif not BrakeIsOn then cL()else BrakeIsOn=true end elseif m0=="lalt"then AltIsOn=true;if n()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif m0=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif m0=="stopengines"then s:resetCommand(axisCommandId.longitudinal)m3()C=0 elseif m0=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then C=c(C+speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cr()end elseif m0=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then C=c(C-speedChangeLarge/100,-1,1)else s:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cr(1)end elseif m0=="antigravity"and not ExternalAGG then if antigrav~=nil then d2()end end end;function script.onActionStop(m0)if m0=="forward"then N=0 elseif m0=="backward"then N=0 elseif m0=="left"then Q=0 elseif m0=="right"then Q=0 elseif m0=="yawright"then R=0 elseif m0=="yawleft"then R=0 elseif m0=="straferight"then s:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif m0=="strafeleft"then s:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif m0=="up"then a8=0;s:updateCommandFromActionStop(axisCommandId.vertical,-1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif m0=="down"then a8=0;s:updateCommandFromActionStop(axisCommandId.vertical,1.0)s:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif m0=="groundaltitudeup"then if not ExternalAGG and bG then Y=OldAntiMod end;if AltitudeHold or VertTakeOff then X=OldButtonMod end elseif m0=="groundaltitudedown"then if not ExternalAGG and bG then Y=OldAntiMod end;if AltitudeHold or VertTakeOff then X=OldButtonMod end elseif m0=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then V=false;b7=false;b6=false end elseif m0=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cL()else BrakeIsOn=false end end elseif m0=="lalt"then if n()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(m0)if m0=="groundaltitudeup"then if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude+X;X=X*1.05 else s:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif m0=="groundaltitudedown"then if not ExternalAGG and bG then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff then HoldAltitude=HoldAltitude-X;X=X*1.05 else s:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif m0=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then C=c(C+speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif m0=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then C=c(C-speedChangeSmall/100,-1,1)else s:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(cZ)local function m4()for bV,bM in pairs(a)do dbHud_1.setStringValue(bM,h(nil))end;for bV,bM in pairs(b)do if bM~="SavedLocations"then dbHud_1.setStringValue(bM,h(nil))end end;W="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ab=5;aD=false;a7=true end;local function m5(m6,planet,fN)local function m7(fN)local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gb='::pos{'..u..','..u..','..u..','..u..','..u..'}'local go,gp,c7,c8,c6=p(fN,gb)if go=="0"and gp=="0"then return vec3(tonumber(c7),tonumber(c8),tonumber(c6))end;c8=math.rad(c8)c7=math.rad(c7)local planet=aW[tonumber(go)][tonumber(gp)]local ha=math.cos(c7)local m8=vec3(ha*math.cos(c8),ha*math.sin(c8),math.sin(c7))return planet.center+(planet.radius+c6)*m8 end;if dbHud_1 then local cA={}local position=m7(fN)if planet.name=="Space"then cA={position=position,name=m6,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hE=false;if planet.hasAtmosphere then hE=true else hE=false end;cA={position=position,name=m6,atmosphere=hE,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cA;table.insert(aW[0],cA)bU()else W="Databank must be installed to save locations"end end;local i;local m9="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local ma,mb=nil,nil;local mc="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cZ," ")ma=cZ;if i~=nil then ma=string.sub(cZ,0,i-1)mb=string.sub(cZ,i+1)elseif not string.find(m9,ma)then for fX in string.gmatch(mc,"([^\n]+)")do system.print(fX)end;return end;if ma=="ah-setname"then if mb==nil or mb==""then W="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cx(mb)else W="Select a saved target to rename first"end elseif ma=="ah-addlocation"then if mb==nil or mb==""or string.find(mb,"::")==nil then W="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mb,"::")local m6=string.sub(mb,1,i-2)local fN=string.sub(mb,i)local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gb='::pos{'..u..','..u..','..u..','..u..','..u..'}'local go,gp,c7,c8,c6=p(fN,gb)local planet=aW[tonumber(go)][tonumber(gp)]m5(m6,planet,fN)W="Added "..m6 .." to saved locations,\nplanet "..planet.name.." at "..fN;ab=5 elseif ma=="ah-agg"then if mb==nil or mb==""then W="Usage: ah-agg targetheight"return end;mb=tonumber(mb)if mb<1000 then mb=1000 end;AntigravTargetAltitude=mb;W="AGG Target Height set to "..mb elseif ma=="ah-G"then if mb==nil or mb==""then W="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mb=="dump"then for bV,bM in pairs(a)do if type(_G[bM])=="boolean"then if _G[bM]==true then system.print(bM.." true")else system.print(bM.." false")end elseif _G[bM]==nil then system.print(bM.." nil")else system.print(bM.." ".._G[bM])end end;return end;i=string.find(mb," ")local md=string.sub(mb,0,i-1)local me=string.sub(mb,i+1)for bV,bM in pairs(a)do if bM==md then W="Variable "..md.." changed to "..me;local mf=type(_G[bM])if mf=="number"then me=tonumber(me)elseif mf=="boolean"then if string.lower(me)=="true"then me=true else me=false end end;_G[bM]=me;return end end;W="No such global variable: "..md elseif ma=="ah-copydatabank"then if dbHud_2 then db(true)else W="Spare Databank required to copy databank"end elseif ma=="ah-wipedatabank"then if dbHud_1 then m4()else W="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
