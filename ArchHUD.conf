name: ArchHud - Archaegeo v1.013 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        VertTakeOffEngine = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.013;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementHitPointsById;local k=core.getElementMassById;local l=core.getElementNameById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local function s(t,u)local v=10^(u or 0)return c(t*v+0.5)/v end;local w=SafeR;local x=SafeB;local y=SafeG;local z=false;local A=0;local B=0;local C=0;local D=false;local E=0;local F=false;local G=s(ResolutionX/2,0)local H=s(ResolutionY/2,0)local I=false;local J=55;local K=false;local L=1;local M=1;local N=false;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=false;local W=false;local X="empty"local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=nil;local a6=0;local a7=0;local a8=false;local a9=0;local aa=0;local ab=0;local ac=3;local ad=0;local ae=""local af=""local ag=0;local ah=false;local ai=false;local aj=false;local ak=-1;local al=false;local am=""local an=h()>0;local ao=h()local ap=core.getAltitude()local aq=core.getElementIdList()local ar=r()local as=nil;local at=false;local au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]local av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=c(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=LandingGearGroundHeight;local bh=system.getMouseDeltaX()local bi=system.getMouseDeltaY()local bj=false;local bk=r()local bl=0;local bm=0;local bn=0;local bo=AtmoSpeedLimit;local bp=0;local bq=nil;local br=0;local bs=0;local bt=false;local bu=false;local bv={VectorToTarget=false}local bw=false;local bx=0;local by=nil;local bz=false;local bA=false;local bB=false;local bC=false;local bD=0;local bE=r()local bF=vec3(core.getConstructWorldOrientationUp())local bG=vec3(core.getConstructWorldOrientationForward())local bH=vec3(core.getConstructWorldOrientationRight())local bI=vec3(core.getWorldVelocity())local bJ=vec3(bI):len()local bK=vec3(core.getWorldVertical())local bL=vec3(core.getConstructWorldPos())local function bM(bN,bO)if bO==nil then bO=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not bO then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bN)B=s(bN*100,0)end;local function bP(bN,bO)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bO then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bN)end;local function bQ(bR)if ResolutionX==1920 then return bR else return s(ResolutionX*bR/1920,0)end end;local function bS(bR)if ResolutionY==1080 then return bR else return s(ResolutionY*bR/1080,0)end end;local function bT(bU,bV)if bU==nil then bU=core.g()end;bU=s(bU,5)if bV~=nil and bV or(aN==nil or aN~=bU)then local bW=core.getVelocity()local bX=vec3(bW):len()local bY=e(unit.getData()).maxBrake;if bY~=nil and bY>0 and an then bY=bY/utils.clamp(bX/100,0.1,1)bY=bY/ao;if ao>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bY)/2 else LastMaxBrakeInAtmo=bY end end end;if bY~=nil and bY>0 then LastMaxBrake=bY end;aN=bU end end;local function bZ()AtlasOrdered={}for b_,bR in pairs(b2[0])do table.insert(AtlasOrdered,{name=bR.name,index=b_})end;local function c0(c1,c2)return c1.name<c2.name end;table.sort(AtlasOrdered,c0)end;local function c3(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*epsilon end;local function c6(c7,c8)local c9=vec3(c8)if c7.bodyId==0 then return setmetatable({latitude=c9.x,longitude=c9.y,altitude=c9.z,bodyId=0,systemId=c7.planetarySystemId},MapPosition)end;local ca=c9-c7.center;local ad=ca:len()local cb=ad-c7.radius;local cc=0;local cd=0;if not c3(ad,0)then local ce=math.atan(ca.y,ca.x)cd=ce>=0 and ce or 2*math.pi+ce;cc=math.pi/2-math.acos(ca.z/ad)end;return setmetatable({latitude=math.deg(cc),longitude=math.deg(cd),altitude=cb,bodyId=c7.bodyId,systemId=c7.planetarySystemId},MapPosition)end;local function cf(ad,cg)local ch=ad>100000;local ci,cj=""if cg==nil then cg=1 end;if ch then ci,cj=s(ad/1000/200,cg),"SU"elseif ad<1000 then ci,cj=s(ad,cg),"M"else ci,cj=s(ad/1000,cg),"KM"end;return ci,cj end;local function ck(cl)for b_,bR in pairs(cl)do if bR.name and bR.name==CustomTarget.name then return b_ end end;return-1 end;local function cm()if radarPanelID~=nil and ag==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ag==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ag=0 end end;local function cn()local co=-1;local cp=-1;if vBooster then co=vBooster.distance()end;if hover then cp=hover.distance()end;if co~=-1 and cp~=-1 then if co<cp then return co else return cp end elseif co~=-1 then return co elseif cp~=-1 then return cp else return-1 end end;local function cq()if bE-bm<1.5 then if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bm=-1;if AltitudeHold then return end end else bm=bE end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;V=false;bf=true;LockPitch=nil;bz=false;if cn()==-1 then AutoTakeoff=false;if bm>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ap end end;if not an then bz=false;bw=true;IntoOrbit=true;if not ai and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bm>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ai then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function ToggleIntoOrbit()bt=false;br=nil;bs=nil;bD=0;if IntoOrbit then if bz then CancelIntoOrbit=false else CancelIntoOrbit=true end;bz=false;IntoOrbit=false;by=nil elseif unit.getClosestPlanetInfluence()>0 and ao==0 then IntoOrbit=true;bz=false;CancelIntoOrbit=false;if by==nil then by=planet end else X="Unable to engage orbiting, not near planet or in atmosphere"end end;local function cr()if n()==1 then V=not V;if V then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else X="Follow Mode only works with Remote controller"V=false end end;local function cs()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a5=nil;CustomTarget=nil;return true end;local ct=AtlasOrdered[AutopilotTargetIndex].index;local cu=b2[0][ct]if cu.center then AutopilotTargetName=cu.name;a5=b8[0][ct]if CustomTarget~=nil then if ao==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=cu;for _,bR in pairs(b8[0])do if bR.name==CustomTarget.planetname then a5=bR;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a5.center)else AutopilotTargetCoords=CustomTarget.position end;if a5.planetname~="Space"then if a5.hasAtmosphere then AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cv(cw)if not Autopilot and not VectorToTarget and not ai then if cw==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cs()else local ct=AtlasOrdered[AutopilotTargetIndex].index;local cu=b2[0][ct]if cu.name=="Space"then if cw==nil then cv()else cv(1)end else cs()end end else X="Disengage autopilot before changing Interplanetary Helper"end end;local function cx()local function cy(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cq()end end;VectorStatus="Proceeding to Waypoint"end;if bE-bn<1.5 and ao>0 then if not bC then X="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bn=-1;if Autopilot or VectorToTarget then return end end else bn=bE end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ai then cs()local cz=c6(a5,AutopilotTargetCoords)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ao~=0 then ai=true;cq()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ao>0 then bz=false;if not VectorToTarget then cy(SpaceTarget)end else if ap>100000 or ap==0 then bz=false;Autopilot=true else ah=true;ProgradeIsOn=true;if AltitudeHold then cq()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ao~=0 then ai=true;cq()else Autopilot=true end end elseif ao==0 then local cA=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a5.name==planet.name and cA)then bz=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;V=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;I=false;LockPitch=nil;WaypointSet=false end else ai=true;cq()end else ai=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;I=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false;Reentry=false end end;local function cB(cC)local cD=-1;local cE;cD=ck(SavedLocations)if cD~=-1 then local cF;if cC~=nil then cE={position=SavedLocations[cD].position,name=cC,atmosphere=SavedLocations[cD].atmosphere,planetname=SavedLocations[cD].planetname,gravity=SavedLocations[cD].gravity}else cE={position=bL,name=SavedLocations[cD].name,atmosphere=ao,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cD]=cE;cD=-1;cD=ck(b2[0])if cD>-1 then b2[0][cD]=cE end;bZ()X=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cs()else X="Name Not Found"end end;local function cG(cH,cI,c2)local cJ=cH:cross(c2):normalize_inplace()local cK=math.acos(utils.clamp(cJ:dot(-cI),-1,1))*constants.rad2deg;if cJ:cross(-cI):dot(c2)<0 then cK=-cK end;return cK end;local function cL(cM,cN,cO)cN=cN:project_on_plane(cM)cO=cO:project_on_plane(cM)return o(cN:cross(cO):dot(cM),cN:dot(cO))end;local function cn()local co=-1;local cp=-1;if vBooster then co=vBooster.distance()end;if hover then cp=hover.distance()end;if co~=-1 and cp~=-1 then if co<cp then return co else return cp end elseif co~=-1 then return co elseif cp~=-1 then return cp else return-1 end end;local function cP()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bf=autoRollPreference;ah=false;aj=false;a9=0 end end;local function cQ(cR,cS)cR=vec3(cR)cS=vec3(cS):normalize()local ci=cR*cS;return ci.x+ci.y+ci.z end;local function cT(cR,cU,cV)if not an or not bj or ak~=-1 or bJ<J then local cW=cV;if cW==nil then cW=DampingMultiplier end;if cU==nil then cU=aD end;cR=vec3(cR):normalize()local cX=vec3()-cR;local cY=-cQ(cX,core.getConstructWorldOrientationRight())*aC;local cZ=-cQ(cX,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=cY/2 end;if ay==0 then ay=cZ/2 end;if math.abs(cY)<0.1 then Q=Q-cY*2 else Q=Q-(cY+(cY-ax)*cW)end;if math.abs(cZ)<0.1 then P=P+cZ*2 else P=P+cZ+(cZ-ay)*cW end;ax=cY;ay=cZ;if math.abs(cY)<cU and math.abs(cZ)<cU then return true end;return false elseif bj and ak==-1 then cR=bI;local cW=cV;if cW==nil then cW=DampingMultiplier end;if cU==nil then cU=aD end;cR=vec3(cR):normalize()local cX=bG-cR;local cY=-cQ(cX,core.getConstructWorldOrientationRight())*aC;local cZ=-cQ(cX,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=cY/2 end;if ay==0 then ay=cZ/2 end;if math.abs(cY)<0.1 then Q=Q-cY*5 else Q=Q-(cY+(cY-ax)*cW)end;if math.abs(cZ)<0.1 then P=P+cZ*5 else P=P+cZ+(cZ-ay)*cW end;ax=cY;ay=cZ;if math.abs(cY)<cU and math.abs(cZ)<cU then return true end;return false end end;local function c_()if Reentry then X="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then X="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ac=5 elseif not K then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then X="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;X="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local d0,d1=cf(HoldAltitude)X="Beginning Re-entry.  Target speed: "..bo.." Target Altitude: "..d0 ..d1;bP(math.floor(bo))end;AutoTakeoff=false end;local function d2(bX)if not an then bT()return b9.computeDistanceAndTime(bX,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bX,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function d3(bX)bT()return b9.computeDistanceAndTime(bX,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;local function d4()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function d5(d6)local d7=0;local d8=0;local d9=0;if d6<60 then d6=c(d6)elseif d6<3600 then d7=c(d6/60)d6=c(d6%60)elseif d6<86400 then d8=c(d6/3600)d7=c(d6%3600/60)else d9=c(d6/86400)d8=c(d6%86400/3600)end;if d9>0 then return d9 .."d "..d8 .."h "elseif d8>0 then return d8 .."h "..d7 .."m "elseif d7>0 then return d7 .."m "..d6 .."s"elseif d6>0 then return d6 .."s"else return"0s"end end;local function da()local db=-1;local dc=cn()if telemeter_1 then db=telemeter_1.getDistance()end;if dc~=-1 and db~=-1 then if dc<db then return dc else return db end elseif dc~=-1 then return dc else return db end end;local function dd()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function de()local function df(dg)return type(dg)=='number'end;local function dh(dg)return type(tonumber(dg))=='number'end;local function di(dj)return type(dj)=='table'end;local function dk(dl)return type(dl)=='string'end;local function dm(bR)return di(bR)and df(bR.x and bR.y and bR.z)end;local function dn(dp)return di(dp)and df(dp.latitude and dp.longitude and dp.altitude and dp.bodyId and dp.systemId)end;local dq=math.pi/180;local dr=180/math.pi;local epsilon=1e-10;local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..t..','..t..','..t..','..t..','..t..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dt=utils.clamp;local function c3(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*epsilon end;local function du(dg)local ci=string.gsub(string.reverse(d('%.4f',dg)),'^0*%.?','')return ci==''and'0'or string.reverse(ci)end;local function dv(dw)if dm(dw)then return d('{x=%.3f,y=%.3f,z=%.3f}',dw.x,dw.y,dw.z)end;if di(dw)and not getmetatable(dw)then local dx={}local dy=next(dw)if type(dy)=='nil'or dy==1 then dx=dw else for b_,bR in pairs(dw)do local bN=dv(bR)if type(b_)=='number'then table.insert(dx,d('[%s]=%s',b_,bN))else table.insert(dx,d('%s=%s',b_,bN))end end end;return d('{%s}',table.concat(dx,','))end;if dk(dw)then return d("'%s'",dw:gsub("'",[[\']]))end;return tostring(dw)end;local dz={}dz.__index=dz;dz.__tostring=function(dw,dA)local dB={}for b_ in pairs(dw)do table.insert(dB,b_)end;table.sort(dB)local dx={}for _,b_ in ipairs(dB)do local bN=dv(dw[b_])if type(b_)=='number'then table.insert(dx,d('[%s]=%s',b_,bN))else table.insert(dx,d('%s=%s',b_,bN))end end;if dA then return d('%s%s',dA,table.concat(dx,',\n'..dA))end;return d('{%s}',table.concat(dx,','))end;dz.__eq=function(dC,dD)return dC.planetarySystemId==dD.planetarySystemId and dC.bodyId==dD.bodyId and c3(dC.radius,dD.radius)and c3(dC.center.x,dD.center.x)and c3(dC.center.y,dD.center.y)and c3(dC.center.z,dD.center.z)and c3(dC.GM,dD.GM)end;local function dE(dF,dG,dH,c8,dI)assert(dh(dF),'Argument 1 (planetarySystemId) must be a number:'..type(dF))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(dH),'Argument 3 (radius) must be a number:'..type(dH))assert(di(c8),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(c8))assert(dh(dI),'Argument 5 (GM) must be a number:'..type(dI))return setmetatable({planetarySystemId=tonumber(dF),bodyId=tonumber(dG),radius=tonumber(dH),center=vec3(c8),GM=tonumber(dI)},dz)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dJ)return d('::pos{%d,%d,%s,%s,%s}',dJ.systemId,dJ.bodyId,du(dJ.latitude*dr),du(dJ.longitude*dr),du(dJ.altitude))end;MapPosition.__eq=function(dC,dD)return dC.bodyId==dD.bodyId and dC.systemId==dD.systemId and c3(dC.latitude,dD.latitude)and c3(dC.altitude,dD.altitude)and(c3(dC.longitude,dD.longitude)or c3(dC.latitude,math.pi/2)or c3(dC.latitude,-math.pi/2))end;local function dK(dL,dG,cc,cd,cb)local dF=dL;if dk(dL)and not cd and not cb and not dG and not cc then dF,dG,cc,cd,cb=p(dL,ds)assert(dF,'Argument 1 (position string) is malformed.')else assert(dh(dF),'Argument 1 (systemId) must be a number:'..type(dF))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(cc),'Argument 3 (latitude) must be in degrees:'..type(cc))assert(dh(cd),'Argument 4 (longitude) must be in degrees:'..type(cd))assert(dh(cb),'Argument 5 (altitude) must be in meters:'..type(cb))end;dF=tonumber(dF)dG=tonumber(dG)cc=tonumber(cc)cd=tonumber(cd)cb=tonumber(cb)if dG==0 then return setmetatable({latitude=cc,longitude=cd,altitude=cb,bodyId=dG,systemId=dF},MapPosition)end;return setmetatable({latitude=dq*dt(cc,-90,90),longitude=dq*(cd%360),altitude=cb,bodyId=dG,systemId=dF},MapPosition)end;local dM={}dM.__index=dM;dM.__tostring=function(dw,dA)local dN=dA and dA..'  'local dO={}local dB={}for b_ in pairs(dw)do table.insert(dB,b_)end;table.sort(dB)for _,dP in ipairs(dB)do bdy=dw[dP]local dQ=dz.__tostring(bdy,dN)if dA then table.insert(dO,d('[%s]={\n%s\n%s}',dP,dQ,dA))else table.insert(dO,d('  [%s]=%s',dP,dQ))end end;if dA then return d('\n%s%s%s',dA,table.concat(dO,',\n'..dA),dA)end;return d('{\n%s\n}',table.concat(dO,',\n'))end;local function dR(dS)local b2={}local pid;for _,bR in pairs(dS)do local dT=bR.planetarySystemId;if type(dT)~='number'then error('Invalid planetary system ID: '..tostring(dT))elseif pid and dT~=pid then error('Mistringmatch planetary system IDs: '..dT..' and '..pid)end;local dU=bR.bodyId;if type(dU)~='number'then error('Invalid body ID: '..tostring(dU))elseif b2[dU]then error('Duplicate body ID: '..tostring(dU))end;setmetatable(bR.center,getmetatable(vec3.unit_x))b2[dU]=setmetatable(bR,dz)pid=dT end;return setmetatable(b2,dM)end;b7={}local function dV(dS)return setmetatable({galaxyAtlas=dS or{}},b7)end;b7.__index=function(dj,i)if type(i)=='number'then local system=dj.galaxyAtlas[i]return dR(system)end;return rawget(b7,i)end;b7.__pairs=function(dw)return function(dj,b_)local dW,nv=next(dj,b_)return dW,nv and dR(nv)end,dw.galaxyAtlas,nil end;b7.__tostring=function(dw)local dX={}for _,dY in pairs(dw or{})do local dZ=dY:getPlanetarySystemId()local d_=dM.__tostring(dY,'    ')table.insert(dX,d('  [%s]={%s\n  }',dZ,d_))end;return d('{\n%s\n}\n',table.concat(dX,',\n'))end;b7.BodyParameters=dE;b7.MapPosition=dK;b7.PlanetarySystem=dR;function b7.createBodyParameters(e0,dG,e1,e2,e3,e4,e5)assert(dh(e0),'Argument 1 (planetarySystemId) must be a number:'..type(e0))assert(dh(dG),'Argument 2 (bodyId) must be a number:'..type(dG))assert(dh(e1),'Argument 3 (surfaceArea) must be a number:'..type(e1))assert(di(e2),'Argument 4 (aPosition) must be an array or vec3:'..type(e2))assert(di(e3),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(e3))assert(dh(e4),'Argument 6 (altitude) must be in meters:'..type(e4))assert(dh(e5),'Argument 7 (gravityAtPosition) must be number:'..type(e5))local dH=math.sqrt(e1/4/math.pi)local ad=dH+e4;local e6=vec3(e2)+ad*vec3(e3)local dI=e5*ad*ad;return dE(e0,dG,dH,e6,dI)end;b7.isMapPosition=dn;function b7:getPlanetarySystem(dL)if i==nil then i=0 end;if nv==nil then nv=0 end;local e0=dL;if dn(dL)then e0=dL.systemId end;if type(e0)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dM then system=dR(system)end;return system end end end;function dM:castIntersections(e7,cS,e8,e9)local e8=e8 or function(ea)return 1.05*ea.radius end;local eb={}if e9 then for _,i in ipairs(e9)do eb[i]=self[i]end else e9={}for b_,ea in pairs(self)do table.insert(e9,b_)eb[b_]=ea end end;local function ec(ed,ee)local ef=eb[ed].center-e7;local eg=eb[ee].center-e7;return ef:len()<eg:len()end;table.sort(e9,ec)local eh=cS:normalize()for i,dT in ipairs(e9)do local ea=eb[dT]local ei=ea.center-e7;local dH=e8(ea)local ej=ei:dot(eh)local ek=ej^2-(ei:len2()-dH^2)if ek>=0 then local el=math.sqrt(ek)local em=ej+el;local en=ej-el;if en>0 then return ea,em,en elseif em>0 then return ea,em,nil end end end;return nil,nil,nil end;function dM:closestBody(eo)assert(type(eo)=='table','Invalid coordinates.')local ep,ea;local eq=vec3(eo)for _,er in pairs(self)do local es=(er.center-eq):len2()if(not ea or es<ep)and er.name~="Space"then ea=er;ep=es end end;return ea end;function dM:convertToBodyIdAndWorldCoordinates(dL)local et=dL;if dk(dL)then et=dK(dL)end;if et.bodyId==0 then return 0,vec3(et.latitude,et.longitude,et.altitude)end;local er=self:getBodyParameters(et)if er then return et.bodyId,er:convertToWorldCoordinates(et)end end;function dM:getBodyParameters(dL)local dG=dL;if dn(dL)then dG=dL.bodyId end;assert(dh(dG),'Argument 1 (bodyId) must be a number:'..type(dG))return self[dG]end;function dM:getPlanetarySystemId()local _,bR=next(self)return bR and bR.planetarySystemId end;function dz:convertToMapPosition(c8)assert(di(c8),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(c8))local c9=vec3(c8)if self.bodyId==0 then return setmetatable({latitude=c9.x,longitude=c9.y,altitude=c9.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ca=c9-self.center;local ad=ca:len()local cb=ad-self.radius;local cc=0;local cd=0;if not c3(ad,0)then local ce=math.atan(ca.y,ca.x)cd=ce>=0 and ce or 2*math.pi+ce;cc=math.pi/2-math.acos(ca.z/ad)end;return setmetatable({latitude=cc,longitude=cd,altitude=cb,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dz:convertToWorldCoordinates(dL)local et=dk(dL)and dK(dL)or dL;if et.bodyId==0 then return vec3(et.latitude,et.longitude,et.altitude)end;assert(dn(et),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(et.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(et.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local eu=math.cos(et.latitude)return self.center+(self.radius+et.altitude)*vec3(eu*math.cos(et.longitude),eu*math.sin(et.longitude),math.sin(et.latitude))end;function dz:getAltitude(c8)return(vec3(c8)-self.center):len()-self.radius end;function dz:getDistance(c8)return(vec3(c8)-self.center):len()end;function dz:getGravity(c8)local ev=self.center-vec3(c8)local ew=ev:len2()return self.GM/ew*ev/math.sqrt(ew)end;return setmetatable(b7,{__call=function(_,...)return dV(...)end})end;local function ex(ey)if dbHud_1 then if not a8 then for b_,bR in pairs(b)do dbHud_1.setStringValue(bR,f(_G[bR]))if ey and dbHud_2 then dbHud_2.setStringValue(bR,f(_G[bR]))end end;for b_,bR in pairs(a)do dbHud_1.setStringValue(bR,f(_G[bR]))if ey and dbHud_2 then dbHud_2.setStringValue(bR,f(_G[bR]))end end;system.print("Saved Variables to Datacore")if ey and dbHud_2 then X="Databank copied.  Remove copy when ready."end end end end;local function ez()local eA={}local function eB()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;local function eC()local eD=Nav.axisCommandManager:getAxisCommandType(0)local eE="TRAVEL"if eD==1 then eE="CRUISE"end;if Autopilot then eE="AUTOPILOT"end;return eE end;local function eF(eG,a_,eH,eI,eJ,eK,eL,eM)local eN=1;local eO=2;local eP=3;local eQ=4;local eR=5;local eS=6;local eT=""local eU=0;local eV=fuelY;local eW=fuelY+10;if n()==1 and not RemoteHud then eV=eV-50;eW=eW-50 end;eG[#eG+1]=[[<g class="pdim txtfuel">]]if eJ=="ATMO"then eT="atmofueltank"elseif eJ=="SPACE"then eT="spacefueltank"else eT="rocketfueltank"end;eU=_G[eT.."_size"]if#eK>0 then for i=1,#eK do local eX=string.sub(eK[i][eO],1,12)local eY=0;for eZ=1,eU do if eK[i][eO]==e(unit[eT.."_"..eZ].getData()).name then eY=eZ;break end end;if a_ or eL[i]==nil or eM[i]==nil then local e_=0;local f0=0;local f1=0;local f2=0;local f3=r()if eY~=0 then eM[i]=e(unit[eT.."_"..eY].getData()).percentage;eL[i]=e(unit[eT.."_"..eY].getData()).timeLeft;if eL[i]=="n/a"then eL[i]=0 end else f1=k(eK[i][eN])-eK[i][eQ]e_=eK[i][eP]eM[i]=c(0.5+f1*100/e_)f0=eK[i][eR]f2=eK[i][eS]if f0<=f1 then eL[i]=0 else eL[i]=c(0.5+f1/((f0-f1)/(f3-f2)))end;eK[i][eR]=f1;eK[i][eS]=f3 end end;if eX==eI then eX=d("%s %d",eJ,i)end;if eY==0 then eX=eX.." *"end;local f4;if eL[i]==0 then f4="n/a"else f4=d5(eL[i])end;if eM[i]~=nil then local f5=c(eM[i]*2.55)local f6=d("rgb(%d,%d,%d)",255-f5,f5,0)local f7=""if f4~="n/a"and eL[i]<120 or eM[i]<5 then if a_ then f7=[[class="red"]]end end;eG[#eG+1]=d([[
                                <text x=%d y="%d" %s>%s</text>
                                <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                            ]],eH,eV,f7,eX,eH,eW,f6,eM[i],f4)eV=eV+30;eW=eW+30 end end end;eG[#eG+1]="</g>"end;local function f8(eG,cb)if cb<200000 and not an or cb and an then local f9=-bK:dot(bI)local fa=0;if math.abs(f9)>1 then fa=45*math.log(math.abs(f9),10)if f9<0 then fa=-fa end end;eG[#eG+1]=d([[
                        <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                <text x="31" y="-41">1000</text>
                                <text x="-10" y="-65">100</text>
                                <text x="-54" y="-45">10</text>
                                <text x="-73" y="3">O</text>
                                <text x="-56" y="52">-10</text>
                                <text x="-14" y="72">-100</text>
                                <text x="29" y="50">-1000</text>
                                <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                            <g class="linethick">
                                <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                <circle r="90" />
                            </g>
                            <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                        </g>
                    ]],vSpdMeterX,vSpdMeterY,c(f9),c(fa))end;return eG end;local function fb(cI)local cw=-bK;cI=cI-cI:project_on(cw)local fc=vec3(0,0,1)fc=fc-fc:project_on(cw)local fd=fc:cross(cw)local fa=fc:angle_between(cI)*constants.rad2deg;if cI:dot(fd)<0 then fa=360-fa end;return fa end;local function fe(eG,centerX,centerY,ff,fg,cA)local fh=circleRad;local fi=20;fi=c(fi)local fj=c(ff)if cA then for i=-45,45,5 do local fk=i;eG[#eG+1]=d([[<g transform="rotate(%f,%d,%d)">]],fk,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;eG[#eG+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+fh+fi-len,centerX,centerY+fh+fi)end;eG[#eG+1]=d([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY+fh+fi-35,fg,centerX,centerY+fh+fi-25,fj)eG[#eG+1]=d([[<g transform="rotate(%f,%d,%d)">]],-ff,centerX,centerY)eG[#eG+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+fh+fi-20,centerX+5,centerY+fh+fi-20,centerX,centerY+fh+fi-15)eG[#eG+1]="</g>"end;local fl=fj;if cA then fl=fb(bG)end;local fm=20;local fn=c(fl)local fo=0;local fp=centerY+fh+fi+20;local fq=centerX;if fg~="YAW"then fp=bS(130)fq=bQ(960)end;local fr=[[<path class="txttick line" d="]]for i=c(fn-(fm+10)-fn%5+0.5),c(fn+fm+10+fn%5+0.5),5 do local eH=fq+-i*5+fl*5;if i%10==0 then fo=10;local t=i;if t==360 then t=0 elseif t>360 then t=t-360 elseif t<0 then t=t+360 end;eG[#eG+1]=d([[
                                <text x="%f" y="%f">%d</text>]],eH+5,fp-12,t)elseif i%5==0 then fo=5 end;if fo==10 then fr=d([[%s M %f %f v %d]],fr,eH,fp-5,fo)else fr=d([[%s M %f %f v %d]],fr,eH,fp-2.5,fo)end end;eG[#eG+1]=fr..[["/>]]eG[#eG+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fq-5,fp+10,fq+5,fp+10,fq,fp+5)if cA then fg="HDG"end;eG[#eG+1]=d([["
                    <g class="pdim txt txtmid">
                    <text x="%d" y="%d">%d deg</text>
                    <text x="%d" y="%d">%s</text>
                    </g>
                    ]],fq,fp+25,fn,fq,fp+35,fg)end;local function fs(eG,ft,ff,centerX,centerY,cA,fu,bX)local fh=circleRad;local fv=c(fh*3/5)if fh>0 then local fw=c(ft)local len=0;local fr=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*ff,centerX,centerY)if not an then fr=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;eG[#eG+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],fh-1,centerX,centerY)eG[#eG+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(fw-30-fw%5+0.5),c(fw+30+fw%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local fx=centerY+-i*5+ft*5;if len==30 then fr=d([[%s M %d %f h %d]],fr,centerX-fv-len,fx,len)if an then eG[#eG+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*ff,centerX,centerY,centerX-fv+10,fx,i)eG[#eG+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*ff,centerX,centerY,centerX+fv-10,fx,i)if i==0 or i==180 or i==-180 then eG[#eG+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*ff,centerX,centerY,centerX-fv+20,fx,fv*2-40)end else eG[#eG+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-fv+10,fx,i)eG[#eG+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+fv-10,fx,i)end;fr=d([[%s M %d %f h %d]],fr,centerX+fv,fx,len)else fr=d([[%s M %d %f h %d]],fr,centerX-fv-len,fx,len)fr=d([[%s M %d %f h %d]],fr,centerX+fv,fx,len)end end;eG[#eG+1]=fr..[["/>]]local fy="PITCH"if not cA then fy="REL PITCH"end;if ft>90 and not an then ft=90-(ft-90)elseif ft<-90 and not an then ft=-90-(ft+90)end;if fh>200 then if an then if bX>J then eG[#eG+1]=d([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-15,"Yaw",centerX,centerY+20,fu)end;eG[#eG+1]=d([[<g transform="rotate(%f,%d,%d)">]],-ff,centerX,centerY)else eG[#eG+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;eG[#eG+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-fv+25,centerY-5,centerX-fv+20,centerY,centerX-fv+25,centerY+5,centerX-fv+50,centerY+4,fw)eG[#eG+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+fv-25,centerY-5,centerX+fv-20,centerY,centerX+fv-25,centerY+5,centerX+fv-30,centerY+4,fw)eG[#eG+1]="</g>"end;local fz=c(fh/3)eG[#eG+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fz,centerY,fh-fz)if not an and cA then eG[#eG+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*ff,centerX,centerY,centerX-fv+10,centerY,fv*2-20)end;eG[#eG+1]="</g>"if fh<200 then if an and bX>J then eG[#eG+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-fh,fy,centerX,centerY-fh+10,fw,centerX,centerY-15,"Yaw",centerX,centerY+20,fu)else eG[#eG+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-fh,fy,centerX,centerY-fh+15,fw)end end end end;local function fA(eG,cb,cA)local fB=altMeterX;local fC=altMeterY;local fD=78;local fE=19;local fF=da()if fF~=-1 then table.insert(eG,d([[
                    <g class="pdim altsm txtend">
                    <text x="%d" y="%d">AGL: %.1fm</text>
                    </g>
                    ]],fB+fD,fC+fE+20,fF))end;if cA and(cb<200000 and not an or cb and an)then table.insert(eG,d([[
                        <g class="pdim">                        
                            <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                            <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                            <g clip-path="url(#alt)">]],fB-1,fC-4,fD+2,fE+6,fB+1,fC-1,fD-4,fE))local cD=0;local fG=1;local fH=0;local fI=cb<0;local fJ=9;if fI then fJ=0 end;local cb=math.abs(cb)while cD<6 do local fK=11;local fL=16;local fM=9;local fN=14;local f7="altsm"if cD>2 then fL=fL+3;fK=fK+2;fN=fN+2;fM=fM-6;f7="altbig"end;if fI then f7=f7 .." red"end;local fO=cb/fG%10;local fP=c(fO)local fQ=c((fP+1)%10)local fR=fH;if cD==0 then fR=fO-fP;if fI then fR=1-fR end end;if fI and(cD==0 or fH~=0)then local fS=fQ;fQ=fP;fP=fS end;local fT=fL*(fR-1)local fU=fT+fL;local eH=fB+fM+(6-cD)*fK;local fx=fC+fN;table.insert(eG,d([[
                            <g class="%s">
                            <text x="%d" y="%f">%d</text>
                            <text x="%d" y="%f">%d</text>
                            </g>
                        ]],f7,eH,fx+fT,fQ,eH,fx+fU,fP))cD=cD+1;fG=fG*10;if fP==fJ then fH=fR else fH=0 end end;table.insert(eG,[[</g></g>]])end end;local function fV(bW)bW=vec3(bW)local cK=-math.deg(math.atan(bW.y,bW.z))+180;cK=cK-90;if cK<0 then cK=360+cK end;if cK>180 then cK=-180+cK-180 end;return-cK end;local function fW(bW)bW=vec3(bW)local fl=math.deg(math.atan(bW.y,bW.x))-90;if fl<-180 then fl=360+fl end;return fl end;local function fX(eG,bW,bX,centerX,centerY)if bX>5 and not an or bX>J then local fh=circleRad;local fY=20;local fZ=20;local f_=vec3(bW)local g0=fV(f_)local g1=fW(f_)local g2=14;local g3=g2/2;local g4=-g1/fZ*fh;local g5=g0/fY*fh;local eH=centerX+g4;local fx=centerY+g5;local ad=math.sqrt(g4^2+g5^2)local g6=[[<circle
                    cx="]]..eH..[["
                    cy="]]..fx..[["
                    r="]]..g3/g2 ..[["
                    style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                 <circle
                    cx="]]..eH..[["
                    cy="]]..fx..[["
                    r="]]..g3 ..[["
                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                 <path
                    d="M ]]..eH-g2 ..[[,]]..fx..[[ h ]]..g3 ..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..eH+g3 ..[[,]]..fx..[[ h ]]..g3 ..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />
                 <path
                    d="M ]]..eH..[[,]]..fx-g2 ..[[ v ]]..g3 ..[["
                    style="stroke:#d7fe00;stroke-opacity:1" />]]if ad<fh then eG[#eG+1]=g6 else local fa=math.atan(g5,g4)local g7=4;local g8=centerX+fh*math.cos(fa)local g9=centerY+fh*math.sin(fa)eG[#eG+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fa*180/math.pi,g8,g9,g8-g7,g9-g7/2,g7*2,g7,g8+g7,g9-g7,g7,g7,-g7,g7)end;if not an then g0=fV(-f_)g1=fW(-f_)g4=-g1/fZ*fh;g5=g0/fY*fh;eH=centerX+g4;fx=centerY+g5;ad=math.sqrt(g4^2+g5^2)if ad<fh then local ga=[[<circle
                            cx="]]..eH..[["
                            cy="]]..fx..[["
                            r="]]..g3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                         <path
                            d="M ]]..eH..[[,]]..fx-g2 ..[[ v ]]..g3 ..[["
                            style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                         <use
                            xlink:href="#l"
                            transform="rotate(120,]]..eH..[[,]]..fx..[[)" />
                         <use
                            xlink:href="#l"
                            transform="rotate(-120,]]..eH..[[,]]..fx..[[)" />
                         <path
                            d="M ]]..eH-g3 ..[[,]]..fx..[[ h ]]..g2 ..[["
                            style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                            transform="rotate(-45,]]..eH..[[,]]..fx..[[)" id="c"/>
                        <use
                            xlink:href="#c"
                            transform="rotate(-90,]]..eH..[[,]]..fx..[[)"/>]]eG[#eG+1]=ga end end end end;local function gb(eG,eE,gc,gd)gc=math.floor(gc+0.5)local eV=throtPosY+10;local eW=throtPosY+20;if n()==1 and not RemoteHud then eV=55;eW=65 end;local ge="CRUISE"local unit="km/h"local bN=gd;if eE=="TRAVEL"or eE=="AUTOPILOT"then ge="THROT"unit="%"bN=gc;local gf="dim"if gc<0 then gf="red"end;eG[#eG+1]=d([[<g class="%s">
                        <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                        <g transform="translate(0 %.0f)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g>]],gf,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(gc),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;eG[#eG+1]=d([[
                    <g class="pbright txtstart">
                            <text x="%s" y="%s">%s</text>
                            <text x="%s" y="%s">%.0f %s</text>
                    </g>
                </g>]],throtPosX+10,eV,ge,throtPosX+10,eW,bN,unit)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then gc=math.floor(E*100+0.5)local gf="red"if gc<0 then gf="red"end;eG[#eG+1]=d([[<g class="%s">
                        <g transform="translate(0 %d)">
                            <polygon points="%d,%d %d,%d %d,%d"/>
                        </g></g>]],gf,1-math.abs(gc),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)eG[#eG+1]=d([[
                            <g class="pbright txtstart">
                                    <text x="%s" y="%s">%s</text>
                                    <text x="%s" y="%s">%d %s</text>
                            </g>]],throtPosX+10,eV+40,"LIMIT",throtPosX+10,eW+40,gc,"%")end;if an and AtmoSpeedAssist or Reentry then eG[#eG+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,eV-40,"LIMIT: ",bo.." km/h")elseif not an and Autopilot then eG[#eG+1]=d([[
                        <g class="dim txtstart">
                            <text x="%s" y="%s">%s %s</text>
                        </g>
                    ]],throtPosX+10,eV-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;local function gg(eG,gh)local gi=throtPosY-10;local gj=throtPosX+10;eG[#eG+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then gi=75 end;eG[#eG+1]=d([[
                    <g class="pbright txtstart">
                        <text class="txtbig" x="%d" y="%d">%d km/h</text>
                    </g>
                </g>]],gj,gi,c(gh))end;local function gk(eG)eG[#eG+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],bQ(1900),bS(1070),VERSION_NUMBER)eG[#eG+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then eG[#eG+1]=d([[
                        <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bQ(960),bS(550))eG[#eG+1]=d([[
                        <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bQ(960),bS(600))eG[#eG+1]=d([[
                        <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bQ(960),bS(650))end;local gl=bQ(960)local gm=bS(860)local gn=bS(880)local go=bS(900)local gp=bS(960)local gq=bS(200)local gr=bS(150)local gs=bS(960)if n()==1 and not RemoteHud then gm=bS(135)gn=bS(155)go=bS(175)gq=bS(115)gr=bS(95)end;if BrakeIsOn then eG[#eG+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],gl,gm)elseif C>0 then eG[#eG+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],gl,gm,C)end;if an and bj and cn()==-1 then eG[#eG+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],gl,gq+50)end;if as then eG[#eG+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],gl,gs)end;if GearExtended then if N then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],gl,gn)else eG[#eG+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],gl,gn)end;local gt,cj=cf(Nav:getTargetGroundAltitude())eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],gl,go,gt..cj)end;if a0 then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],gl,gp+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],gl,gq+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else eG[#eG+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],gl,gq+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],gl,gq+20,AutopilotStatus)elseif LockPitch~=nil then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],gl,gq+20,c(LockPitch))elseif V then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],gl,gq+20)elseif Reentry then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],gl,gq+20)end;local gu,em,en=b8:getPlanetarySystem(0):castIntersections(bL,bI:normalize(),function(ea)if ea.noAtmosphericDensityAltitude>0 then return ea.radius+ea.noAtmosphericDensityAltitude else return ea.radius+ea.surfaceMaxAltitude*1.5 end end)local gv=em;if en~=nil and em~=nil then gv=math.min(en,em)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local gt,cj=cf(HoldAltitude,2)eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],gl,gq,gt..cj)if BrakeIsOn then eG[#eG+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],gl,gq+50)end else local gt,cj=cf(HoldAltitude,2)eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],gl,gq,gt..cj)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ao>0.1 then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],gl,gq)elseif ao<0.09 and ao>0.05 then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],gl,gq)elseif ao<0.05 then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],gl,gq)end end;if IntoOrbit then if bq~=nil then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],gl,gq,bq)end end;if BrakeLanding then if StrongBrakes then eG[#eG+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],gl,gq)else eG[#eG+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],gl,gq)end end;if ProgradeIsOn then eG[#eG+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],gl,gq)end;if RetrogradeIsOn then eG[#eG+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],gl,gq)end;if TurnBurn then eG[#eG+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],gl,gr)elseif gv~=nil and ao==0 then local gt,cj=cf(gv)local travelTime=b9.computeTravelTime(bJ,0,gv)local gw="Collision"if gu.noAtmosphericDensityAltitude>0 then gw="Atmosphere"end;eG[#eG+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],gl,gr,gu.name,gw,d5(travelTime),gt..cj)end;if VectorToTarget and not IntoOrbit then eG[#eG+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],gl,gq+30,VectorStatus)end;eG[#eG+1]="</g>"return eG end;local function gx(bX)return c(s(bX*3.6,0)+0.5).." km/h"end;local function gy(eG)if orbit~=nil and ao<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local gz=OrbitMapX;local gA=OrbitMapY;local gB=OrbitMapSize;local gC=4;gA=gA+gC;local gD=15;local eH=gz+gB+gz/2+gC;local fx=gA+gB/2+5+gC;local gE,gF,gG,gH;gE=gB/4;gH=0;eG[#eG+1]=[[<g class="pbright txtorb txtmid">]]eG[#eG+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',gB+gz*2,gB+gA,gC,gC)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gG=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(gE*2)gF=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gG*(1-orbit.eccentricity)gH=gE-orbit.periapsis.altitude/gG-planet.radius/gG;local gI=""if orbit.periapsis.altitude<=0 then gI='redout'end;eG[#eG+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],gI,gz+gB/2+gH+gC,gA+gB/2+gC,gE,gF)eG[#eG+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',gz+gB/2+gC,gA+gB/2+gC,planet.radius/gG)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then eG[#eG+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],eH-35,fx-5,gz+gB/2+gE+gH,fx-5)eG[#eG+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],eH,fx)fx=fx+gD;local gt,cj=cf(orbit.apoapsis.altitude)eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,gt..cj)fx=fx+gD;eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,d5(orbit.timeToApoapsis))fx=fx+gD;eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,gx(orbit.apoapsis.speed))end;fx=gA+gB/2+5+gC;eH=gz-gz/2+10+gC;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then eG[#eG+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],eH+35,fx-5,gz+gB/2-gE+gH,fx-5)eG[#eG+1]=d([[<text x="%f" y="%f">Periapsis</text>]],eH,fx)fx=fx+gD;local gt,cj=cf(orbit.periapsis.altitude)eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,gt..cj)fx=fx+gD;eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,d5(orbit.timeToPeriapsis))fx=fx+gD;eG[#eG+1]=d([[<text x="%f" y="%f">%s</text>]],eH,fx,gx(orbit.periapsis.speed))end;eG[#eG+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],gz+gB/2+gC,20+gC,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gJ=orbit.timeToApoapsis/orbit.period*2*math.pi;local gK=gE*math.cos(gJ)local gL=gF*math.sin(gJ)eG[#eG+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',gz+gB/2+gK+gH+gC,gA+gB/2+gL+gC)end;eG[#eG+1]=[[</g>]]return eG else return eG end end;function eA.HUDPrologue(eG)if not z then w=PvPR;y=PvPG;x=PvPB else w=SafeR;y=SafeG;x=SafeB end;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local gM=au;local gN=av;local gO=au;local gP=av;if eB()and not brightHud then gM=[[rgb(]]..c(w*0.4+0.5)..","..c(y*0.4+0.5)..","..c(x*0.3+0.5)..[[)]]gN=[[rgb(]]..c(w*0.3+0.5)..","..c(y*0.3+0.5)..","..c(x*0.2+0.5)..[[)]]end;eG[#eG+1]=d([[
                    <head>
                        <style>
                            body {margin: 0}
                            svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                            .txt {font-size:10px;font-weight:bold;}
                            .txttick {font-size:12px;font-weight:bold;}
                            .txtbig {font-size:14px;font-weight:bold;}
                            .altsm {font-size:16px;font-weight:normal;}
                            .altbig {font-size:21px;font-weight:normal;}
                            .line {stroke-width:2px;fill:none}
                            .linethick {stroke-width:3px;fill:none}
                            .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                            .warn {fill:orange;font-size:24px}
                            .crit {fill:darkred;font-size:28px}
                            .bright {fill:%s;stroke:%s}
                            .pbright {fill:%s;stroke:%s}
                            .dim {fill:%s;stroke:%s}
                            .pdim {fill:%s;stroke:%s}
                            .red {fill:red;stroke:red}
                            .redout {fill:none;stroke:red}
                            .op30 {opacity:0.3}
                            .op10 {opacity:0.1}
                            .txtstart {text-anchor:start}
                            .txtend {text-anchor:end}
                            .txtmid {text-anchor:middle}
                            .txtvspd {font-family:sans-serif;font-weight:normal}
                            .txtvspdval {font-size:20px}
                            .txtfuel {font-size:11px;font-weight:bold}
                            .txtorb {font-size:12px}
                            .txtorbbig {font-size:18px}
                            .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                            .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                            .cursor {stroke:white}
                        </style>
                    </head>
                    <body>
                        <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                        ]],gM,gM,gO,gO,gN,gN,gP,gP,ResolutionX,ResolutionY)return eG end;function eA.UpdateHud(eG)local cb=ap;local bW=core.getVelocity()local bX=vec3(bW):len()local gQ=getRoll(bK,bG,bH)local gR=gQ/180*math.pi;local gS=math.cos(gR)local gT=math.sin(gR)local cK=cG(bK,bG,bH*gS+bF*gT)local ff=gQ;local ft=cK;local gc=c(unit.getThrottle())local gh=bX*3.6;local gd=unit.getAxisCommandValue(0)local gU=bQ(1770)local gV=bS(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then gd=B;gc=B*100 end;local eE=eC()local fg="ROLL"local cA=unit.getClosestPlanetInfluence()>0;if gc==nil then gc=0 end;if not cA then if bX>5 then cK=fV(bW)gQ=fW(bW)else cK=0;gQ=0 end;fg="YAW"end;if A>50000 and not an then local gW;if A>200000 then gW=s(A/200000,2).." su"else gW=s(A/1000,1).." km"end;eG[#eG+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],gU,gV,gW)end;eG[#eG+1]=af;eG[#eG+1]=az;eG[#eG+1]=ae;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then eF(eG,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)eF(eG,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)eF(eG,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;f8(eG,cb)if n()==0 or RemoteHud then if not eB()or brightHud then if cA then fe(eG,centerX,centerY,ff,fg,cA)fs(eG,ft,ff,centerX,centerY,cA,c(fW(bW)),bX)else fe(eG,centerX,centerY,gQ,fg,cA)fs(eG,cK,gQ,centerX,centerY,cA,c(gQ),bX)end;fA(eG,cb,cA)fX(eG,bW,bX,centerX,centerY)end end;gb(eG,eE,gc,gd)gg(eG,gh)gk(eG)gy(eG)if screen_2 then local gX=bL;local eH=960+gX.x/b4;local fx=450+gX.y/b5;screen_2.moveContent(b6,(eH-80)/19.2,(fx-80)/10.8)end;return eG end;function eA.HUDEpilogue(eG)eG[#eG+1]="</svg>"return eG end;function eA.DrawOdometer(eG,a6,TotalDistanceTravelled,a7,gY)local gZ=bQ(1240)local g_=bS(55)local h0=g_+10;local bU=core.g()local h1=0;local h2=0;local h3=0;local eE=eC()bT(bU)if an then h3=LastMaxBrakeInAtmo else h3=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=m()if not ShowOdometer then return end;local h4=vec3(core.getWorldAcceleration()):len()/9.80665;if bU>0.1 then h2=aM*bU;h1=maxThrust/bU end;eG[#eG+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then gZ=bQ(1120)g_=bS(55)h0=g_+10 elseif an then local h5=bQ(770)eG[#eG+1]=d([[
                        <text x="%d" y="%d">ATMOSPHERE</text>
                        <text x="%d" y="%d">%.2f</text>
                    ]],h5,g_,h5,h0,ao)end;eG[#eG+1]=d([[
                    <g class="pbright txtend">
                    </g>
                    <text x="%d" y="%d">GRAVITY</text>
                    <text x="%d" y="%d">%.2f g</text>
                    <text x="%d" y="%d">ACCEL</text>
                    <text x="%d" y="%d">%.2f g</text>
                    ]],gZ,g_,gZ,h0,bU/9.80665,gZ,g_+20,gZ,h0+20,h4)eG[#eG+1]=d([[
                    <g class="pbright txt">
                    <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bQ(660),bQ(700),bS(35),bQ(960),bS(55),bQ(1240),bS(35),bQ(1280))if n()==0 or RemoteHud then eG[#eG+1]=d([[
                        <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                        <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                        <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                        <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                        <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                        <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                        <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bQ(700),bS(20),a6,bQ(700),bS(30),TotalDistanceTravelled/1000,bQ(830),bS(20),d5(a7),bQ(830),bS(30),d5(TotalFlightTime),bQ(970),bS(20),aM/1000,bQ(1240),bS(10),h3/1000,bQ(1240),bS(30),maxThrust/1000,bQ(960),bS(180),eE)if bU>0.1 then eG[#eG+1]=d([[
                                <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                        ]],bQ(970),bS(30),h1/1000,bQ(1240),bS(20),h2/1000)else eG[#eG+1]=d([[
                            <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                            <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                        ]],bQ(970),bS(30),bQ(1240),bS(20))end else eG[#eG+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bQ(960),bS(33),eE)end;eG[#eG+1]="</g>"return eG end;function eA.DrawWarnings(eG)return gk(eG)end;function eA.DisplayOrbitScreen(eG)return gy(eG)end;function eA.DisplayMessage(eG,gt)if gt~="empty"then eG[#eG+1]=[[<text class="msg" x="50%%" y="310" >]]for h6 in string.gmatch(gt,"([^\n]+)")do eG[#eG+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],h6)end;eG[#eG+1]=[[</text>]]end;if ac~=0 then unit.setTimer("msgTick",ac)ac=0 end end;function eA.DrawDeadZone(eG)eG[#eG+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;return eA end;function script.onStart()local function h7()local function h8(h9)local ha=dbHud_1.hasKey;for b_,bR in pairs(h9)do if ha(bR)then local ci=e(dbHud_1.getStringValue(bR))if ci~=nil then _G[bR]=ci;aK=true end end end end;if dbHud_1 then local ha=dbHud_1.hasKey;if not useTheseSettings then h8(a)else X="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ac=5 end;coroutine.yield()h8(b)if aK then X="Loaded Saved Variables (see Lua Chat Tab for list)"G=s(ResolutionX/2,0)H=s(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bo=AtmoSpeedLimit;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]else X="No Saved Variables Found - Stand up / leave remote to save settings"end else X="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bE then LastMaxBrakeInAtmo=0 end;LastStartTime=bE;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then X="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ac=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hb()local function hc(hd,he)if hd>he then he=hd end;if ContainerOptimization>0 then he=he-he*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then he=he-he*FuelTankOptimization*0.05 end;return he end;local hf=fuelX~=0 and fuelY~=0;for b_ in pairs(aq)do local type=core.getElementTypeById(aq[b_])if p(type,'^.*Space Engine$')then bC=true;if p(tostring(core.getElementTagsById(aq[b_])),'^.*vertical.*$')then local hg=core.getElementRotationById(aq[b_])if hg[4]<0 then if q(-hg[4],0.1)==0.5 then bA=true end else if q(hg[4],0.1)==0.5 then bB=true end end end end;if type=="Landing Gear"then N=true end;if type=="Dynamic Core Unit"then local hh=g(aq[b_])if hh>10000 then b0=128 elseif hh>1000 then b0=64 elseif hh>150 then b0=32 end end;aR=aR+g(aq[b_])if hf and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hh=g(aq[b_])local hi=k(aq[b_])local hd=0;local f3=r()if type=="Atmospheric Fuel Tank"then local he=400;local hj=35.03;if hh>10000 then he=51200;hj=5480 elseif hh>1300 then he=6400;hj=988.67 elseif hh>150 then he=1600;hj=182.67 end;hd=hi-hj;if fuelTankHandlingAtmo>0 then he=he+he*fuelTankHandlingAtmo*0.2 end;he=hc(hd,he)aO[#aO+1]={aq[b_],l(aq[b_]),he,hj,hd,f3}end;if type=="Rocket Fuel Tank"then local he=320;local hj=173.42;if hh>65000 then he=40000;hj=25740 elseif hh>6000 then he=5120;hj=4720 elseif hh>700 then he=640;hj=886.72 end;hd=hi-hj;if fuelTankHandlingRocket>0 then he=he+he*fuelTankHandlingRocket*0.1 end;he=hc(hd,he)aQ[#aQ+1]={aq[b_],l(aq[b_]),he,hj,hd,f3}end;if type=="Space Fuel Tank"then local he=2400;local hj=182.67;if hh>10000 then he=76800;hj=5480 elseif hh>1300 then he=9600;hj=988.67 end;hd=hi-hj;if fuelTankHandlingSpace>0 then he=he+he*fuelTankHandlingSpace*0.2 end;he=hc(hd,he)aP[#aP+1]={aq[b_],l(aq[b_]),he,hj,hd,f3}end end end end;local function hk()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(an or not an and ap<10000)then for _,bR in pairs(door)do bR.toggle()end end;if switch then for _,bR in pairs(switch)do bR.toggle()end end;if forcefield and(an or not an==0 and ap<10000)then for _,bR in pairs(forcefield)do bR.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if N then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local hl=da()if hl~=-1 or not an and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not N then GearExtended=true end else BrakeIsOn=false end;if bg~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bg)if bg==0 and not N then GearExtended=true;BrakeIsOn=true end else bg=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if an and hl~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=an end;local function hm(hn,ho,hp,hq,eH,fx,hr,hs,ht)local hu={enableName=hn,disableName=ho,width=hp,height=hq,x=eH,y=fx,toggleVar=hr,toggleFunction=hs,drawCondition=ht,hovered=false}table.insert(aB,hu)return hu end;local function hv()local function hw()if dbHud_1 then local position=bL;local eX=planet.name..". "..#SavedLocations;if radar_1 then local dT,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dT~=nil and dT~=""then eX=eX.." "..radar_1.getConstructName(dT)end end;local cE={}local hx=false;if planet.hasAtmosphere then hx=true end;cE={position=position,name=eX,atmosphere=hx,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cE;table.insert(b2[0],cE)bZ()X="Location saved as "..eX else X="Databank must be installed to save locations"end end;local function hy()TurnBurn=not TurnBurn end;local function hz(hA)if hA==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;V=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hB()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end end;local function hC()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then cq()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then cq()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;bz=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function hD()hz(1)end;local function hE()local cD=-1;cD=ck(b2[0])if cD>-1 then table.remove(b2[0],cD)end;cD=-1;cD=ck(SavedLocations)if cD~=-1 then X=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cD)end;cv()bZ()end;local function hF()local eX=AutopilotTargetName;if eX==nil then local gt,cj=cf((bL-CustomTarget.position):len())eX=CustomTarget.name.." "..gt..cj end;if eX==nil then eX="None"end;return"Engage Autopilot: "..eX end;local function hG()local eX=AutopilotTargetName;if eX==nil then eX=CustomTarget.name end;if eX==nil then eX="None"end;return"Disable Autopilot: "..eX end;local hH=50;local hI=260;local hJ=hm("Enable Brake Toggle","Disable Brake Toggle",hI,hH,aE/2-hI/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then X="Brakes in Toggle Mode"else X="Brakes in Default Mode"end end)hm("Align Prograde","Disable Prograde",hI,hH,aE/2-hI/2-50-hJ.width,aF/2-hH+380,function()return ProgradeIsOn end,hD)hm("Align Retrograde","Disable Retrograde",hI,hH,aE/2-hI/2+hJ.width+50,aF/2-hH+380,function()return RetrogradeIsOn end,hz,function()return ao==0 end)local hK=hm(hF,hG,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,cx)hm("Save Position","Save Position",200,hK.height,hK.x+hK.width+30,hK.y,function()return false end,hw,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hm("Update Position","Update Position",200,hK.height,hK.x+hK.width+30,hK.y,function()return false end,cB,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hm("Clear Position","Clear Position",200,hK.height,hK.x-200-30,hK.y,function()return true end,hE,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hH=60;hI=300;local eH=10;local fx=aF/2-300;hm("Enable Turn and Burn","Disable Turn and Burn",hI,hH,eH,fx,function()return TurnBurn end,hy)hm("Engage Altitude Hold","Disable Altitude Hold",hI,hH,eH+hI+20,fx,function()return AltitudeHold end,cq)fx=fx+hH+20;hm("Engage Autoland","Disable Autoland",hI,hH,eH,fx,function()return AutoLanding end,hB)local hL,hM,hN;if VertTakeOffEngine then hL="Engage Vertical Takeoff"hM="Disable Vertical Takeoff"hN=VertTakeOff else hL="Engage Auto Takeoff"hM="Disable Auto Takeoff"hN=AutoTakeoff end;hm(hL,hM,hI,hH,eH+hI+20,fx,function()return hN end,hC)fx=fx+hH+20;hm("Show Orbit Display","Hide Orbit Display",hI,hH,eH,fx,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then X="Orbit Display Enabled"else X="Orbit Display Disabled"end end)hm("Engage Orbiting","Cancel Orbiting",hI,hH,eH+hI+20,fx,function()return IntoOrbit end,ToggleIntoOrbit,function()return ao==0 and unit.getClosestPlanetInfluence()>0 end)fx=fx+hH+20;hm("Glide Re-Entry","Cancel Glide Re-Entry",hI,hH,eH,fx,function()return Reentry end,function()ah=true;hD()end,function()return ap>ReentryAltitude end)hm("Parachute Re-Entry","Cancel Parachute Re-Entry",hI,hH,eH+hI+20,fx,function()return Reentry end,c_,function()return ap>ReentryAltitude end)fx=fx+hH+20;hm("Engage Follow Mode","Disable Follow Mode",hI,hH,eH,fx,function()return V end,cr,function()return n()==1 end)hm("Enable Repair Arrows","Disable Repair Arrows",hI,hH,eH+hI+20,fx,function()return aS end,function()aS=not aS;if aS then X="Repair Arrows Enabled"else X="Repair Arrows Diabled"end end,function()return n()==1 end)fx=fx+hH+20;if not ExternalAGG then hm("Enable AGG","Disable AGG",hI,hH,eH,fx,function()return antigrav.getState()==1 end,d4,function()return antigrav~=nil end)end;fx=fx+hH+20;hm(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,hI*2,hH,eH,fx,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hO()b2=dd()for b_,bR in pairs(b2[0])do if aG==nil or bR.center.x<aG then aG=bR.center.x end;if aH==nil or bR.center.x>aH then aH=bR.center.x end;if aI==nil or bR.center.y<aI then aI=bR.center.y end;if aJ==nil or bR.center.y>aJ then aJ=bR.center.y end end;b3=""local hP=1.1*(aH-aG)/1920;local hQ=1.4*(aJ-aI)/1080;for b_,bR in pairs(b2[0])do local eH=960+bR.center.x/hP;local fx=540+bR.center.y/hQ;b3=b3 ..'<circle cx="'..eH..'" cy="'..fx..'" r="'..bR.radius/hP*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bR.name,"Moon")and not p(bR.name,"Sanctuary")and not p(bR.name,"Space")then b3=b3 .."<text x='"..eH.."' y='"..fx+bR.radius/hP*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bR.name.."</text>"end end;local gX=bL;local eH=960+gX.x/hP;local fx=540+gX.y/hQ;b3=b3 ..'<circle cx="'..eH..'" cy="'..fx..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..eH.."' y='"..fx-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=hP;b5=hQ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local gX=bL;local eH=960+gX.x/hP;local fx=540+gX.y/hQ;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((eH-80)/19.20,(fx-80)/10.80,b3)end end;local function hR()for b_,bR in pairs(SavedLocations)do table.insert(b2[0],bR)end;bZ()end;local function hS()local b9={}local hT=30000000/3600;local hU=hT*hT;local hV=100;local function hW(bR)return 1/math.sqrt(1-bR*bR/hU)end;function b9.computeAccelerationTime(hX,hY,hZ)local h_=hT*math.asin(hX/hT)return(hT*math.asin(hZ/hT)-h_)/hY end;function b9.computeDistanceAndTime(hX,hZ,i0,i1,i2,i3)i2=i2 or 0;i3=i3 or 0;local i4=hX<=hZ;local i5=i1*(i4 and 1 or-1)/i0;local i6=-i3/i0;local i7=i5+i6;if i4 and i7<=0 or not i4 and i7>=0 then return-1,-1 end;local i8,i9=0,0;if i5~=0 and i2>0 then local h_=math.asin(hX/hT)local ia=math.pi*(i5/2+i6)local ib=i5*i2;local ic=hT*math.pi;local bR=function(dj)local id=(ia*dj-ib*math.sin(math.pi*dj/2/i2)+ic*h_)/ic;local ie=math.tan(id)return hT*ie/math.sqrt(ie*ie+1)end;local ig=i4 and function(dl)return dl>=hZ end or function(dl)return dl<=hZ end;i9=2*i2;if ig(bR(i9))then local ih=0;while math.abs(i9-ih)>0.5 do local dj=(i9+ih)/2;if ig(bR(dj))then i9=dj else ih=dj end end end;local ii=hX;local ij=i9/hV;for ik=1,hV do local bX=bR(ik*ij)i8=i8+(bX+ii)*ij/2;ii=bX end;if i9<2*i2 then return i8,i9 end;hX=ii end;local h_=hT*math.asin(hX/hT)local bE=(hT*math.asin(hZ/hT)-h_)/i7;local il=hU*math.cos(h_/hT)/i7;local ad=il-hU*math.cos((i7*bE+h_)/hT)/i7;return ad+i8,bE+i9 end;function b9.computeTravelTime(hX,hY,ad)if ad==0 then return 0 end;if hY>0 then local h_=hT*math.asin(hX/hT)local il=hU*math.cos(h_/hT)/hY;return(hT*math.acos(hY*(il-ad)/hU)-h_)/hY end;if hX==0 then return-1 end;assert(hX>0,'Acceleration and initial speed are both zero.')return ad/hX end;function b9.lorentz(bR)return hW(bR)end;return b9 end;local function im()local vec3=require('cpml.vec3')local de=de()local function dk(dl)return type(dl)=='string'end;local function di(dj)return type(dj)=='table'end;local function c3(c4,c5)if c4==0 then return math.abs(c5)<1e-09 end;if c5==0 then return math.abs(c4)<1e-09 end;return math.abs(c4-c5)<math.max(math.abs(c4),math.abs(c5))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cb)assert(self.body)local ad=cb+self.body.radius;if not c3(ad,0)then local orbit=math.sqrt(self.body.GM/ad)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dL,bW)assert(self.body)assert(di(dL)or dk(dL))assert(di(bW))local gX=(dk(dL)or de.isMapPosition(dL))and self.body:convertToWorldCoordinates(dL)or vec3(dL)local bR=vec3(bW)local io=gX-self.body.center;local eg=bR:len2()local ip=io:len()local iq=self.body.GM;local ir=((eg-iq/ip)*io-io:dot(bR)*bR)/iq;local c4=iq/(2*iq/ip-eg)local is=ir:len()local eh=ir:normalize()local it=c4*(1-is)local iu=c4*(1+is)local iv=it*eh+self.body.center;local iw=is<=1 and-iu*eh+self.body.center or nil;local ix=math.sqrt(c4*iq*(1-is*is))local iy=iw and 2*math.pi*math.sqrt(c4^3/iq)local iz=math.acos(ir:dot(io)/(is*ip))if io:dot(bR)<0 then iz=-(iz-2*math.pi)end;local iA=math.acos((math.cos(iz)+is)/(1+is*math.cos(iz)))local iB=iA;if iB<0 then iB=iB+2*math.pi end;local iC=iB-is*math.sin(iB)local iD=0;local iE=0;local iF=0;if iy~=nil then iD=iC/(2*math.pi/iy)iE=iy-iD;iF=iE+iy/2;if iz-math.pi>0 then iE=iD;iF=iE+iy/2 end;if iF>iy then iF=iF-iy end end;return{periapsis={position=iv,speed=ix/it,circularOrbitSpeed=math.sqrt(iq/it),altitude=it-self.body.radius},apoapsis=iw and{position=iw,speed=ix/iu,circularOrbitSpeed=math.sqrt(iq/iu),altitude=iu-self.body.radius},currentVelocity=bR,currentPosition=gX,eccentricity=is,period=iy,eccentricAnomaly=iA,meanAnomaly=iC,timeToPeriapsis=iE,timeToApoapsis=iF}end;local function iG(iH)local er=de.BodyParameters(iH.planetarySystemId,iH.bodyId,iH.radius,iH.center,iH.GM)return setmetatable({body=er},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iG(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})h7()coroutine.yield()hb()coroutine.yield()hk()hv()coroutine.yield()hO()b7=de()b8=b7(dd())b9=hS()bb=im()bc=ez()hR()bZ()cs()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ao>0 or ao==0 and ap<10000)then for _,bR in pairs(door)do bR.toggle()end end;if switch then for _,bR in pairs(switch)do bR.toggle()end end;if forcefield and(ao>0 or ao==0 and ap<10000)then for _,bR in pairs(forcefield)do bR.toggle()end end;ex()if button then button.activate()end end;function script.onTick(iI)local function iJ()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not an then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iK()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function iL(iM)local dH=500000;local iN,iO,iP=math.huge;local iQ=false;local iR=vec3({13771471,7435803,-128971})local iS=18000000;iN=vec3(iM):dist(iR)if iN<iS then return true,math.abs(iN-iS),"Safe Zone",0 end;iO=vec3(iM):dist(vec3(planet.center))if iO<dH then iQ=true end;if math.abs(iO-dH)<math.abs(iN-iS)then return iQ,math.abs(iO-dH),planet.name,planet.bodyId else return iQ,math.abs(iN-iS),"Safe Zone",0 end end;local function iT(eG)local iU=0;az=""local iV=aR;local iW=0;local iX=0;local iY=0;local f5=0;local f6=""for b_ in pairs(aq)do local hh=0;local iZ=0;iZ=g(aq[b_])hh=j(aq[b_])iW=iW+hh;if hh<iZ then if hh==0 then iY=iY+1 else iX=iX+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[b_]))local eH=position.x-b0;local fx=position.y-b0;local i_=position.z-b0;table.insert(aw,core.spawnArrowSticker(eH,fx,i_+1,"down"))table.insert(aw,core.spawnArrowSticker(eH,fx,i_+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(eH+1,fx,i_,"north"))table.insert(aw,core.spawnArrowSticker(eH+1,fx,i_,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(eH-1,fx,i_,"south"))table.insert(aw,core.spawnArrowSticker(eH-1,fx,i_,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(eH,fx-1,i_,"east"))table.insert(aw,core.spawnArrowSticker(eH,fx-1,i_,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(eH,fx+1,i_,"west"))table.insert(aw,core.spawnArrowSticker(eH,fx+1,i_,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[b_])end elseif aS and#aw>0 and aw[11]==aq[b_]then for eZ in pairs(aw)do core.deleteSticker(aw[eZ])end;aw={}end end;iU=c(iW/iV*100)if iU<100 then eG[#eG+1]=[[<g class="pbright txt">]]f5=c(iU*2.55)f6=d("rgb(%d,%d,%d)",255-f5,f5,0)if iU<100 then eG[#eG+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],f6,iU)if iY>0 then eG[#eG+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],f6,iY,iX)elseif iX>0 then eG[#eG+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],f6,iX)end end;eG[#eG+1]=[[<\g>]]end end;local function j0(eG)local j1=c(utils.clamp(ad/(aE/4)*255,0,255))eG[#eG+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",aa,ab,c(w+0.5)+j1,c(y+0.5)-j1,c(x+0.5)-j1)end;local function j2()local j3=LastMaxBrakeInAtmo/a5:getGravity(a5.center+vec3(0,0,1)*a5.radius):len()return j3 end;local function j4()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a5.center-bL):len()else AutopilotDistance=(CustomTarget.position-bL):len()end end;local bX=bJ;local j5=unit.getThrottle()/100;if AtmoSpeedAssist then j5=B end;local j6,j7=b9.computeDistanceAndTime(bJ,MaxGameVelocity,m(),Nav:maxForceForward()*j5,warmup,0)local a1,a2;if not TurnBurn then a1,a2=d2(MaxGameVelocity)else a1,a2=d3(MaxGameVelocity)end;local _,j8;if not TurnBurn and bX>0 then _,j8=d2(bX)else _,j8=d3(bX)end;local j9=0;local ja=0;if AutopilotCruising or not Autopilot and bX>5 then ja=b9.computeTravelTime(bX,0,AutopilotDistance)elseif a1+j6<AutopilotDistance then j9=AutopilotDistance-(a1+j6)ja=b9.computeTravelTime(8333.0556,0,j9)else local jb=(AutopilotDistance-a1)/j6;j6=AutopilotDistance-a1;j7=j7*jb end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ja elseif AutopilotBraking then return j8 elseif AutopilotCruising then return ja+j8 else return j7+a2+ja end end;local function jc()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;local function jd()if radar_1 then local je=radar_1.getEntries()local jf=radar_1.getData()local jg=bQ(1770)local jh=bS(330)if#je>0 then local ji=jf:find('identifiedConstructs":%[%]')if ji==nil and perisPanelID==nil then ag=1;cm()end;if ji~=nil and perisPanelID~=nil then cm()end;if radarPanelID==nil then cm()end;ae=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],jg,jh,#je)local jj={}for b_,bR in pairs(je)do if radar_1.hasMatchingTransponder(bR)==1 then table.insert(jj,bR)end end;if#jj>0 then local fx=bS(15)local eH=bQ(1370)ae=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ae,eH,fx)for b_,bR in pairs(jj)do fx=fx+20;ae=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ae,eH,fx,radar_1.getConstructName(bR))end end else local jk;jk=jf:find('worksInEnvironment":false')if jk then ae=d([[
                                <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],jg,jh)else ae=d([[
                                <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],jg,jh)end;if radarPanelID~=nil then ag=0;cm()end end end end;local function jl()local f3=r()local gh=bJ;local jm=f3-ar;if gh>1.38889 then gh=gh/1000;local jn=gh*(f3-ar)TotalDistanceTravelled=TotalDistanceTravelled+jn;a6=a6+jn end;a7=a7+jm;TotalFlightTime=TotalFlightTime+jm;ar=f3 end;local function jo()for _,bR in pairs(aB)do if bR.hovered then if not bR.drawCondition or bR.drawCondition()then bR.toggleFunction()end;bR.hovered=false end end end;local function jp()local function jq(jr,js,eH,fx,hp,hq)if jr>eH and jr<eH+hp and js>fx and js<fx+hq then return true else return false end end;local eH=aa+aE/2;local fx=ab+aF/2;for _,bR in pairs(aB)do bR.hovered=jq(eH,fx,bR.x,bR.y,bR.width,bR.height)end end;local function jt(eG)local function ju(eG,jv,hover,eH,fx,id,jw,jx,jy,jz,jA)if type(jz)=="function"then jz=jz()end;if type(jA)=="function"then jA=jA()end;eG[#eG+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",eH,fx,id,jw)if jv then eG[#eG+1]=d("%s'",jx)else eG[#eG+1]=jy end;if hover then eG[#eG+1]=" style='stroke:white; stroke-width:2'"else eG[#eG+1]=" style='stroke:black; stroke-width:1'"end;eG[#eG+1]="></rect>"eG[#eG+1]=d("<text x='%f' y='%f' font-size='24' fill='",eH+id/2,fx+jw/2+5)if jv then eG[#eG+1]="black"else eG[#eG+1]="white"end;eG[#eG+1]="' text-anchor='middle' font-family='Montserrat'>"if jv then eG[#eG+1]=d("%s</text>",jz)else eG[#eG+1]=d("%s</text>",jA)end end;local jB="rgb(50,50,50)'"local jC="rgb(210,200,200)"local jD=ju;for _,bR in pairs(aB)do local ho=bR.disableName;local hn=bR.enableName;if type(ho)=="function"then ho=ho()end;if type(hn)=="function"then hn=hn()end;if not bR.drawCondition or bR.drawCondition()then jD(eG,bR.toggleVar(),bR.hovered,bR.x,bR.y,bR.width,bR.height,jC,jB,ho,hn)end end end;if iI=="tenthSecond"then if ao>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then B=1;Nav.control.cancelCurrentControlMasterMode()F=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iJ()end;if AutopilotTargetName~=nil then local jE=CustomTarget~=nil;planetMaxMass=j2()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=j4()if jE and not Autopilot then ad=(bL-CustomTarget.position):len()else ad=(AutopilotTargetCoords-bL):len()end;if not TurnBurn then a1,a2=d2(bJ)a3,a4=d2(MaxGameVelocity)else a1,a2=d3(bJ)a3,a4=d3(MaxGameVelocity)end;local gt,cj=cf(ad)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..gt..'", "unit":"'..cj..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..d5(travelTime)..'", "unit":""}')gt,cj=cf(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..gt..'", "unit":"'..cj..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..d5(a2)..'", "unit":""}')gt,cj=cf(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..gt..'", "unit":"'..cj..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..d5(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')gt,cj=cf(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",gt)..'", "unit":"'..cj..'"}')if ao>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iK()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iI=="oneSecond"then al=false;bT(nil,true)jl()jd()jc()local eG={}eG=bc.DrawOdometer(eG,a6,TotalDistanceTravelled,a7)if ShouldCheckDamage then iT(eG)end;af=table.concat(eG,"")collectgarbage("collect")elseif iI=="fiveSecond"then am=dbHud_1.getStringValue("SPBAutopilotTargetName")if am~=nil and am~=""and am~="SatNavNotChanged"then local ci=json.decode(dbHud_1.getStringValue("SavedLocations"))if ci~=nil then _G["SavedLocations"]=ci;local cD=-1;local cE;for b_,bR in pairs(SavedLocations)do if bR.name and bR.name=="SatNav Location"then cD=b_;break end end;if cD~=-1 then cE=SavedLocations[cD]cD=-1;for b_,bR in pairs(b2[0])do if bR.name and bR.name=="SatNav Location"then cD=b_;break end end;if cD>-1 then b2[0][cD]=cE end;bZ()X=cE.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==am then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cs()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iI=="msgTick"then local eG={}bc.DisplayMessage(eG,"empty")X="empty"unit.stopTimer("msgTick")ac=3 elseif iI=="animateTick"then be=true;bd=false;aa=0;ab=0;unit.stopTimer("animateTick")elseif iI=="hudTick"then local eG={}bc.HUDPrologue(eG)if showHud then bc.UpdateHud(eG)else bc.DisplayOrbitScreen(eG)bc.DrawWarnings(eG)end;bc.HUDEpilogue(eG)eG[#eG+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if X~="empty"then bc.DisplayMessage(eG,X)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bc.DrawDeadZone(eG)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then jp()jt(eG)if screen_1.getMouseState()==1 then jo()end;eG[#eG+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)elseif system.isViewLocked()==0 then if n()==1 and W then jp()jt(eG)if not bd and not be then local jF=table.concat(eG,"")eG={}eG[#eG+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)eG[#eG+1]=b3;eG[#eG+1]=jF;eG[#eG+1]="</body>"bd=true;eG[#eG+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(eG,"")system.setScreen(content)elseif be then local jF=table.concat(eG,"")eG={}eG[#eG+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)eG[#eG+1]=b3;eG[#eG+1]=jF;eG[#eG+1]="</body>"end;if not bd then eG[#eG+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end else jo()end else if not W and n()==0 then jo()if ad>DeadZone then if DisplayDeadZone then j0(eG)end end else jp()jt(eG)end;eG[#eG+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end;eG[#eG+1]=[[</svg></body>]]content=table.concat(eG,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iI=="apTick"then an=h()>0;ao=h()bE=r()local jG=bE-bk;bk=bE;local gQ=getRoll(bK,bG,bH)local gR=gQ/180*math.pi;local gS=math.cos(gR)local gT=math.sin(gR)local cK=cG(bK,bG,bH)local jH=cG(bK,bG,bH*gS+bF*gT)local jI=-math.deg(cL(bF,bI,bG))local jJ=math.deg(cL(bH,bI,bG))bj=an and jI<-YawStallAngle or jI>YawStallAngle or jJ<-PitchStallAngle or jJ>PitchStallAngle;bh=system.getMouseDeltaX()bi=system.getMouseDeltaY()if InvertMouse and not W then bi=-bi end;Q=0;U=0;P=0;sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bI)ap=core.getAltitude()if ap==0 then ap=(bL-planet.center):len()-planet.radius end;ak=cn()local bU=planet:getGravity(core.getConstructWorldPos()):len()*m()bl=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not an then z,A,_,_=iL(bL)else z=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then aa=screen_1.getMouseX()*ResolutionX;ab=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if n()==1 and W then if not bd then aa=aa+bh;ab=ab+bi end else aa=0;ab=0 end else aa=aa+bh;ab=ab+bi;ad=math.sqrt(aa*aa+ab*ab)if not W and n()==0 then if userControlScheme=="virtual joystick"then if aa>0 and aa>DeadZone then Q=Q-(aa-DeadZone)*MouseXSensitivity elseif aa<0 and aa<DeadZone*-1 then Q=Q-(aa+DeadZone)*MouseXSensitivity else Q=0 end;if ab>0 and ab>DeadZone then P=P-(ab-DeadZone)*MouseYSensitivity elseif ab<0 and ab<DeadZone*-1 then P=P-(ab+DeadZone)*MouseYSensitivity else P=0 end elseif userControlScheme=="mouse"then aa=0;ab=0;P=(-utils.smoothstep(bi,-100,100)+0.5)*2*L;Q=(-utils.smoothstep(bh,-100,100)+0.5)*2*M else aa=0;ab=0 end end end;local jK=bJ>8334;if bJ>SpaceSpeedLimit/3.6 and not an and not Autopilot and not jK then X="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end;if not jK and LastIsWarping then if not BrakeIsOn then cP()end;if Autopilot then cx()end end;LastIsWarping=jK;if an and ao>0.09 then if bJ>bo/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bJ<bo/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then T=1 else T=0 end;if ProgradeIsOn then if ah then BrakeIsOn=false;local jL=false;if CustomTarget~=nil then jL=cT(CustomTarget.position-bL,0.01)else jL=cT(vec3(bI),0.01)end;bf=true;if jL and(math.abs(gQ)<2 or math.abs(jH)>85)and bJ>=bo/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;c_()elseif an and AtmoSpeedAssist then bM(1)else bP(math.floor(bo))B=0 end elseif bJ>J then cT(vec3(bI),0.01)end end;if RetrogradeIsOn then if an then RetrogradeIsOn=false elseif bJ>J then cT(-vec3(bI))end end;if not ProgradeIsOn and ah then if ao==0 then K=true;c_()ah=false;aj=true else ah=false;cx()end end;local cw=bK*-1;local f9=bI.x*cw.x+bI.y*cw.y+bI.z*cw.z;if aj and CustomTarget~=nil and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bJ*3.6>bo-100 and math.abs(f9)<20 and ao>=0.1 and(CustomTarget.position-bL):len()>2000+ap then cx()aj=false end;if VertTakeOff then bf=true;if f9<-30 then X="Unable to achieve lift. Safety Landing."a9=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if ap<antigrav.getBaseAltitude()-100 then bp=0;a9=15;BrakeIsOn=false elseif f9>0 then BrakeIsOn=true;a9=0 elseif f9<-30 then BrakeIsOn=true;a9=15 elseif ap>=antigrav.getBaseAltitude()then BrakeIsOn=true;a9=0;VertTakeOff=false;X="Takeoff complete. Singularity engaged"end else if ao>0.08 then bp=0;BrakeIsOn=false;a9=20 elseif ao<0.08 and ao>0 then BrakeIsOn=false;if bB then bp=0;a9=20 else a9=0;bp=36;bP(3500)end else bf=autoRollPreference;IntoOrbit=true;bz=false;CancelIntoOrbit=false;bt=false;br=nil;bs=nil;if by==nil then by=planet end;VertTakeOff=false end end;if bp~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local jM=utils.clamp(bp-jH,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(jM)local jN=utils.clamp(vTpitchPID:get(),-1,1)P=jN end end;if IntoOrbit then if by==nil then if VectorToTarget then by=a5 else by=planet end end;if not bw then if by.hasAtmosphere then bx=math.floor(by.radius*(TargetOrbitRadius-1)+by.noAtmosphericDensityAltitude)else bx=math.floor(by.radius*(TargetOrbitRadius-1)+by.surfaceMaxAltitude)end;bw=true end;if AltitudeHold or VectorToTarget then if not ai then bx=s(HoldAltitude,1)bt=true;AltitudeHold=false end;if VectorToTarget then bv.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local jO,jP=cf(bx,2)local jQ=jO..jP;local jR,jS=bb(by):escapeAndOrbitalSpeed((bL-by.center):len()-by.radius)local jT=gQ;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ap>bx*0.9 and ap<bx*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bx*0.99 and orbit.apoapsis.altitude>=bx*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bz then if bz then BrakeIsOn=false;B=0;bM(0)bz=true;br=0;if bv.VectorToTarget then local cX=CustomTarget.position-bL;local a1,_=b9.computeDistanceAndTime(bJ,bo/3.6,m(),0,0,LastMaxBrake)if bI:normalize():dot(cX:normalize())>0.5 and cX:len()>15000+a1+ap then bq="Orbiting to Target"else X="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;K=true;aj=true;c_()bv.VectorToTarget=false end end;if not bv.VectorToTarget then bq=nil;bu=false;bw=false;by=nil;bf=autoRollPreference;if not aj then X="Orbit established"end;bv.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bt=false;br=nil;bs=nil;by=nil;bz=false;bD=0 end else bD=bD+1;if bD>=2 then bz=true end end else bq="Adjusting Orbit - OrbitHeight: "..jQ;bu=true;bP(jS*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jU=f9;local jV=ap-bx;local jW=math.abs(jV)if f9<10 and math.abs(jH)<10 and jW<100 then jU=f9*2 end;if jU<10 and math.abs(jH)<10 and jW<100 then jU=jU*2 end;if jU<5 and math.abs(jH)<5 and jW<100 then jU=jU*4 end;VSpdPID:inject(jU)br=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jV)br=utils.clamp(br-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jX=2.75;local jY=math.abs(q(jR*jX))local jZ=jY%50;if jZ>0 then jY=jY-jZ+50 end;BrakeIsOn=false;if not bt then local j_=false;local k0=false;if ap<bx then bq="Aligning to orbital path - OrbitHeight: "..jQ else bq="Aligning to orbital point - OrbitHeight: "..jQ end;br=0;bs=0;if jH<=br+1 and jH>=br-1 then j_=true else j_=false end;if jT<=bs+1 and jT>=bs-1 then k0=true else k0=false end;if j_ and k0 then br=nil;bs=nil;bt=true end else if ap<bx*0.8 then bq="Escaping planet gravity - OrbitHeight: "..jQ;br=utils.map(f9,200,0,-15,80)elseif ap>=bx*0.8 and ap<bx*1.15 then bq="Approaching orbital corridor - OrbitHeight: "..jQ;jY=jY*0.75;br=utils.map(f9,100,-100,-15,65)elseif ap>=bx*1.15 and ap<bx*1.5 then bq="Approaching orbital corridor - OrbitHeight: "..jQ;jY=jY*0.75;if f9<0 or bu then br=utils.map(ap,bx*1.5,bx*1.01,-30,0)else br=utils.map(ap,bx*0.99,bx*1.5,0,30)end elseif ap>bx*1.5 then bq="Reentering orbital corridor - OrbitHeight: "..jQ;br=utils.map(f9,100,-100,-65,0)jY=jY*0.75 end end;bP(math.floor(jY))end;if br~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local k1=br-jH;OrbitPitchPID:inject(k1)local k2=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)P=k2 end;if bs~=nil then if jH<85 then local k3=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(k3*0.01,0,k3*0.1)end;local k4=bs-jT;OrbitRollPID:inject(k4)local k5=utils.clamp(OrbitRollPID:get(),-0.5,0.5)U=k5 end end elseif CancelIntoOrbit then bw=false;by=nil;bM(0)CancelIntoOrbit=false end;if Autopilot and ao==0 and not ah then local k6,k7=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local k8=(CustomTarget.position-a5.center):normalize()local k9=k8:project_on_plane((a5.center-bL):normalize()):normalize()local ka=a5.center+k9*(a5.radius+AutopilotTargetOrbit)local kb=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))if(bL-ka):len()<(bL-kb):len()then k6=ka;AutopilotTargetCoords=k6 else k6=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))AutopilotTargetCoords=k6 end;local cz=c6(a5,AutopilotTargetCoords)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)k7=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;k7=true;TargetSet=true;AutopilotRealigned=true;k6=CustomTarget.position+(bL-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local k8=(bL+bI*100000-a5.center):normalize()local k9=k8:project_on_plane((a5.center-bL):normalize()):normalize()if k9:len()<1 then k8=(bL+bG*100000-a5.center):normalize()k9=k8:project_on_plane((a5.center-bL):normalize()):normalize()end;k6=a5.center+k9*(a5.radius+AutopilotTargetOrbit)AutopilotTargetCoords=k6;TargetSet=true;k7=true;AutopilotRealigned=true;local cz=c6(a5,AutopilotTargetCoords)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)end end;AutopilotDistance=(vec3(k6)-bL):len()local gu,em,en=b8:getPlanetarySystem(0):castIntersections(bL,bI:normalize(),function(ea)if ea.noAtmosphericDensityAltitude>0 then return ea.radius+ea.noAtmosphericDensityAltitude else return ea.radius+ea.surfaceMaxAltitude*1.5 end end)local gv=em;if en~=nil and em~=nil then gv=math.min(en,em)end;if gv~=nil and gv<AutopilotDistance and gu.name==a5.name then AutopilotDistance=gv end;local jL=true;local kc=(a5.center-(bL+vec3(bI):normalize()*AutopilotDistance)):len()-a5.radius;local gt,cj=cf(kc)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..gt..'", "unit":"'..cj..'"}')local a1,a2;if not TurnBurn then a1,a2=d2(bJ)else a1,a2=d3(bJ)end;if bJ>300 and AutopilotAccelerating then local cX=vec3(k6)-bL;local kd=utils.clamp(math.deg(cL(bF,bI:normalize(),cX:normalize()))*bJ/500,-90,90)local ke=utils.clamp(math.deg(cL(bH,bI:normalize(),cX:normalize()))*bJ/500,-90,90)if math.abs(kd)<20 and math.abs(ke)<20 then kd=kd*2;ke=ke*2 end;if math.abs(kd)<2 and math.abs(ke)<2 then kd=kd*2;ke=ke*2 end;local jI=-math.deg(cL(bF,bG,bI:normalize()))local jJ=-math.deg(cL(bH,bG,bI:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(ke-jJ)local kf=utils.clamp(apPitchPID:get(),-1,1)P=P+kf;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(kd-jI)local kg=utils.clamp(apYawPID:get(),-1,1)Q=Q+kg;k7=true;if math.abs(kd)>2 or math.abs(ke)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kc<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(kc)end end;if not AutopilotCruising and not AutopilotBraking and not k7 then jL=cT((k6-bL):normalize())elseif TurnBurn then jL=cT(-vec3(bI):normalize())end;if AutopilotAccelerating then if not I then BrakeIsOn=false;bM(AutopilotInterplanetaryThrottle)B=s(AutopilotInterplanetaryThrottle,2)I=true end;local j5=unit.getThrottle()if AtmoSpeedAssist then j5=B end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or j5==0 and I then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bM(0)B=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bM(0)B=0;I=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;T=1 end;if TurnBurn then bM(100,true)B=1 end;local _,jS=bb(a5):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)local cX;if CustomTarget~=nil then cX=CustomTarget.position-bL end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bJ<50 then X="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bJ<=jS and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bM(0)B=0;I=false;ProgradeIsOn=true;ah=true;local cz=c6(a5,AutopilotTargetCoords)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jS=bb(a5):escapeAndOrbitalSpeed((bL-planet.center):len()-planet.radius)if bJ<=jS then if CustomTarget~=nil then if bI:normalize():dot(cX:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cz=c6(a5,CustomTarget.position)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)WaypointSet=true end else X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bM(0)B=0;I=false;ProgradeIsOn=true;ah=true;BrakeIsOn=false;local cz=c6(a5,CustomTarget.position)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X="Autopilot completed, orbit established"T=0;B=0;I=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ah=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local j5=unit.getThrottle()if AtmoSpeedAssist then j5=B end;if j5>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jL then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ah then AutopilotTargetCoords=vec3(a5.center)+(AutopilotTargetOrbit+a5.radius)*bH;AutopilotShipUp=bF;AutopilotShipRight=bH end;AutopilotRealigned=true elseif jL then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not I then bM(AutopilotInterplanetaryThrottle,true)B=s(AutopilotInterplanetaryThrottle,2)I=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ao>0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T=0;bM(0)B=0;I=false;ProgradeIsOn=true;ah=true;local cz=c6(a5,CustomTarget.position)cz="::pos{"..cz.systemId..","..cz.bodyId..","..cz.latitude..","..cz.longitude..","..cz.altitude.."}"system.setWaypoint(cz)end;if V then bf=true;local ke=0;local gX=bL+vec3(unit.getMasterPlayerRelativePosition())local kh=gX-bL;local ki=vec3(kh):project_on(bG):len()local kj=vec3(kh):project_on(bH):len()local ad=math.sqrt(ki*ki+kj*kj)cT(kh:normalize())local kk=40;local kl=ad<kk;local km=100;local kn=utils.clamp((ad-kk)/2,10,km)P=0;local jL=math.abs(Q)<0.1;if jL and bJ<kn and not kl then BrakeIsOn=false;ke=-20 else BrakeIsOn=true;ke=0 end;local ko=0;if math.abs(ke-cK)>ko then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ke-cK)local kf=pitchPID:get()P=kf end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cA=unit.getClosestPlanetInfluence()>0;local kp=HoldAltitude-ap;local kq=500+bJ;local kr=1;if AutoTakeoff then kr=utils.clamp(bJ/100,0.1,1)end;local ke=(utils.smoothstep(kp,-kq,kq)-0.5)*2*MaxPitch*kr;if not Reentry and not ah and not VectorToTarget and bG:dot(bI:normalize())<0.99 then ke=(utils.smoothstep(kp,-kq*utils.clamp(20-19*ao*10,1,20),kq*utils.clamp(20-19*ao*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ao*10,1,2)*kr end;if not AltitudeHold then ke=0 end;if LockPitch~=nil then if cA and not IntoOrbit then ke=LockPitch else LockPitch=nil end end;bf=true;local ks=P;if Reentry then local ReentrySpeed=math.floor(bo)local kt,ku=b9.computeDistanceAndTime(bJ,ReentrySpeed/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kv=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bJ<=ReentrySpeed/3.6 and bJ>ReentrySpeed/3.6-10 and math.abs(bI:normalize():dot(bG))>0.9 then Nav.control.cancelCurrentControlMasterMode()B=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(kt>-1 and kv<=kt or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bP(ReentrySpeed,true)if not K then ke=-80;if ao>0.02 then X="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ke=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then bP(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bo then K=false;Reentry=false;bf=true end end end;if bJ>J and not ai and not VectorToTarget and not BrakeLanding and ForceAlignment then cT(vec3(bI))end;if(VectorToTarget or ai)and AutopilotTargetIndex>0 and ao>0.01 then local cX;if CustomTarget~=nil then cX=CustomTarget.position-bL else cX=a5.center-bL end;local kd=math.deg(cL(bK:normalize(),bI,cX))*2;local kw=math.rad(math.abs(gQ))if bJ>minRollVelocity and ao>0.01 then local kx=utils.clamp(90-ke*2,-90,90)bl=utils.clamp(kd*2,-kx,kx)local ky=kd;kd=utils.clamp(utils.clamp(kd,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kw)+4*(jH-ke)*math.sin(math.rad(gQ)),-YawStallAngle*0.85,YawStallAngle*0.85)ke=utils.clamp(utils.clamp(ke*math.cos(kw),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(ky)*math.sin(kw),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bl=0;kd=utils.clamp(kd,-YawStallAngle*0.85,YawStallAngle*0.85)end;local kz=jI-kd;if not bj and bJ>minRollVelocity and ao>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kz)local kg=utils.clamp(yawPID:get(),-1,1)Q=Q+kg elseif an and ak>-1 or bJ<minRollVelocity then cT(cX)elseif bj and ao>0.01 then if(jI<-YawStallAngle or jI>YawStallAngle)and ao>0.01 then cT(bI)end;if(jJ<-PitchStallAngle or jJ>PitchStallAngle)and ao>0.01 then ke=utils.clamp(jH-jJ,jH-PitchStallAngle*0.85,jH+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ai then local kA=planet:getAltitude(CustomTarget.position)local kv=math.sqrt(cX:len()^2-(ap-kA)^2)local kB=LastMaxBrakeInAtmo;if kB then kB=kB*utils.clamp(bJ/100,0.1,1)*ao else kB=LastMaxBrake end;if ao<0.01 then kB=LastMaxBrake end;local kC=bI:len()-math.abs(f9)local kD=vec3(core.getWorldAirFrictionAcceleration())local kE=math.sqrt(kD:len()-kD:project_on(cw):len())*m()if bJ>100 then a1,a2=b9.computeDistanceAndTime(bJ,100,m(),0,0,kB+kE)local kF,kG=b9.computeDistanceAndTime(100,0,m(),0,0,kB/2)a1=a1+kF else a1,a2=b9.computeDistanceAndTime(bJ,0,m(),0,0,kB/2)end;StrongBrakes=true;if not ai and not Reentry and kv<=a1+bJ*jG/2 and(bI:project_on_plane(bK):normalize():dot(cX:project_on_plane(bK):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bM(0)B=0;if AltitudeHold then cq()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kC<0.1 or kv<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kv)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kv end elseif VectorToTarget and ao==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ai or Reentry)then if CustomTarget~=nil and a5.name==planet.name then local cX=CustomTarget.position-bL;local kA=planet:getAltitude(CustomTarget.position)local kv=math.sqrt(cX:len()^2-(ap-kA)^2)local kB=LastMaxBrakeInAtmo;if not bz then bw=false;IntoOrbit=true else kB=LastMaxBrake;a1,a2=b9.computeDistanceAndTime(bJ,0,m(),0,0,kB/2)StrongBrakes=true;if kv<=a1+bJ*jG/2 and bI:project_on_plane(bK):normalize():dot(cX:project_on_plane(bK):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;c_()end end;LastDistanceToTarget=kv end end end;if ao==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ai or VectorToTarget or IntoOrbit or Reentry)then if not bz then IntoOrbit=true end end;if bj and ao>0.01 and ak==-1 and bJ>minRollVelocity and VectorStatus~="Finalizing Approach"then cT(bI)ke=utils.clamp(jH-jJ,jH-PitchStallAngle*0.85,jH+PitchStallAngle*0.85)end;P=ks;local db=-1;if BrakeLanding then ke=0;local kH=false;local kI=30;if ba~=nil and ba>0 then local kE=0;local gY=utils.clamp(ao,0.4,2)local kB=LastMaxBrakeInAtmo*utils.clamp(bJ/100,0.1,1)*gY;local kJ=ba*gY+kB+kE-bU;local kK=kB/2+kE-bU;local kL=bJ-math.sqrt(math.abs(kK/2)*20/(0.5*m()))*utils.sign(kK)if kL<0 then kL=0 end;local kM;if bJ>100 then local kN,_=b9.computeDistanceAndTime(bJ,100,m(),0,0,kB)local kO,_=b9.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kB))kM=kN+kO else kM=b9.computeDistanceAndTime(bJ,0,m(),0,0,math.sqrt(kB))end;if kM<20 then BrakeIsOn=false else local kP=0;if kL>100 then local kQ,_=b9.computeDistanceAndTime(kL,100,m(),0,0,kJ)local kR,_=b9.computeDistanceAndTime(100,0,m(),0,0,ba*gY+math.sqrt(kB)+kE-bU)kP=kQ+kR else kP,_=b9.computeDistanceAndTime(kL,0,m(),0,0,ba*gY+math.sqrt(kB)+kE-bU)end;kP=(kP+15+bJ*jG)*1.1;local kS=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kS then local kA=planet:getAltitude(CustomTarget.position)local kT=ap-kA-100;local cX=CustomTarget.position-bL;local kU=math.sqrt(cX:len()^2-(ap-kA)^2)if kU>100 then kS=false elseif kT<=kP or kP==-1 then BrakeIsOn=true;kH=true else BrakeIsOn=false;kH=true end end;if not kS and CalculateBrakeLandingSpeed then if kP>=kI then BrakeIsOn=true else BrakeIsOn=false end;kH=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)db=ak;if db>-1 then bf=autoRollPreference;if bJ<1 or bI:normalize():dot(bK)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a9=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bI:normalize():dot(-cw)<0.999 then BrakeIsOn=true elseif f9<-brakeLandingRate and not kH then BrakeIsOn=true elseif not kH then BrakeIsOn=false end end;if AutoTakeoff or ai then local gu,en,em;if AutopilotTargetCoords~=nil then gu,en,em=b8:getPlanetarySystem(0):castIntersections(bL,(AutopilotTargetCoords-bL):normalize(),function(ea)return ea.radius+ea.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if ap>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bM(0)B=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(ke)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not ai then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ai and bJ<J then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;bM(0)B=0 elseif ai then bM(0)B=0;BrakeIsOn=true end elseif ai and ao==0 and a5~=nil and(gu==nil or gu.name==a5.name)then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kV=cn()>-1;local kW=cK;if(VectorToTarget or ai)and not kV and bJ>minRollVelocity and ao>0.01 then local kw=math.rad(math.abs(gQ))kW=cK*math.abs(math.cos(kw))+jJ*math.sin(kw)end;local kX=utils.clamp(ke-kW,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ao<0.01 and VectorToTarget then kX=utils.clamp(ke-kW,-85,MaxPitch)elseif ao<0.01 then kX=utils.clamp(ke-kW,-MaxPitch,MaxPitch)end;if math.abs(gQ)<5 or VectorToTarget or BrakeLanding or kV or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kX)local kf=pitchPID:get()P=P+kf end end;if antigrav~=nil and(antigrav and not ExternalAGG and ap<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function kY(kZ,kn)local k_=vec3()local l0=vec3()if kZ==axisCommandId.longitudinal then k_=vec3(core.getConstructOrientationForward())l0=bG elseif kZ==axisCommandId.vertical then k_=vec3(core.getConstructOrientationUp())l0=bF elseif kZ==axisCommandId.lateral then k_=vec3(core.getConstructOrientationRight())l0=bH else return vec3()end;local l1=vec3(core.getWorldGravity())local l2=l1:dot(l0)local l3=vec3(core.getWorldAirFrictionAcceleration())local l4=l3:dot(l0)local l5=vec3(core.getVelocity())local l6=l5:dot(k_)local l7=kn*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(l7-l6)local l8=targetSpeedPID2:get()local l9=(l8-l4-l2)*l0;return l9 end;local function la(kZ,kn)local k_=vec3()local l0=vec3()if kZ==axisCommandId.longitudinal then k_=vec3(core.getConstructOrientationForward())l0=bG elseif kZ==axisCommandId.vertical then k_=vec3(core.getConstructOrientationUp())l0=bF elseif kZ==axisCommandId.lateral then k_=vec3(core.getConstructOrientationRight())l0=bH else return vec3()end;local l1=vec3(core.getWorldGravity())local l2=l1:dot(l0)local l3=vec3(core.getWorldAirFrictionAcceleration())local l4=l3:dot(l0)local l5=vec3(core.getVelocity())local l6=l5:dot(k_)local l7=kn*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(l7-l6)local l8=targetSpeedPID:get()local l9=(l8-l4-l2)*l0;return l9 end;if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and F then B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)F=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not F then B=0;F=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lb=utils.clamp(O+P+system.getControlDeviceForwardInput(),-1,1)local lc=utils.clamp(R+U+system.getControlDeviceYawInput(),-1,1)local ld=utils.clamp(S+Q-system.getControlDeviceLeftRightInput(),-1,1)local le=T;bK=vec3(core.getWorldVertical())if bK==nil or bK:len()==0 then bK=(planet.center-bL):normalize()end;bL=vec3(core.getConstructWorldPos())bF=vec3(core.getConstructWorldOrientationUp())bG=vec3(core.getConstructWorldOrientationForward())bH=vec3(core.getConstructWorldOrientationRight())bI=vec3(core.getWorldVelocity())bJ=vec3(bI):len()local lf=bI:normalize()local lg=getRoll(bK,bG,bH)local lh=math.abs(lg)local li=utils.sign(lg)local lj=vec3(core.getWorldAngularVelocity())local lk=lb*pitchSpeedFactor*bH+lc*rollSpeedFactor*bG+ld*yawSpeedFactor*bF;if bK:len()>0.01 and(ao>0.0 or ProgradeIsOn or Reentry or ah or AltitudeHold)then local gQ=getRoll(bK,bG,bH)local gR=gQ/180*math.pi;local gS=math.cos(gR)local gT=math.sin(gR)local jH=cG(bK,bG,bH*gS+bF*gT)if bf==true and math.abs(bl-lg)>autoRollRollThreshold and lc==0 and math.abs(jH)<85 then local ll=bl;local k3=autoRollFactor;if ao==0 then k3=k3/4;bl=0;ll=0 end;if rollPID==nil then rollPID=pid.new(k3*0.01,0,k3*0.1)end;rollPID:inject(ll-lg)local lm=rollPID:get()lk=lk+lm*bG end end;if bK:len()>0.01 and ao>0.0 then local ln=20.0;if turnAssist==true and lh>ln and lb==0 and ld==0 then local lo=turnAssistFactor*0.1;local lp=turnAssistFactor*0.025;local lq=(lh-ln)/(180-ln)*180;local lr=0;if lq<90 then lr=lq/90 elseif lq<180 then lr=(180-lq)/90 end;lr=lr*lr;local ls=-li*lp*(1.0-lr)local lt=lo*lr;lk=lk+lt*bH+ls*bF end end;local lu=1;local lv=0;local lw=1;if system.getMouseWheel()>0 then if AltIsOn then if ao>0 or Reentry then bo=utils.clamp(bo+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ao>0 or Reentry then bo=utils.clamp(bo-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B-speedChangeLarge/100,-1,1),2)end end;C=0;local f9=-bK:dot(bI)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bo/3.6-bI:dot(bG))local lx=throttlePID:get()E=utils.clamp(lx,-1,1)if E<B and ao>0.005 then D=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(E,0.01,1))else D=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bI:len()-bo/3.6)local ly=utils.clamp(brakePID:get(),0,1)if ao>0 and f9<-80 or ao>0.005 then C=ly end;if C>0 then if D and E==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else E=utils.clamp(E,0.01,1)end;local lz=''local lA=vec3()local lB=kY(axisCommandId.vertical,a9*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",lB,lv)local lC='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lC=lC..ExtraLongitudeTags end;local lD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local lE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lC,axisCommandId.longitudinal)local lF=la(axisCommandId.lateral,LeftAmount*1000)lz=lz..' , '.."lateral airfoil , lateral ground "lA=lA+lF;if lA:len()>constants.epsilon then Nav:setEngineForceCommand(lz,lA,lv,'','','',lw)end;Nav:setEngineForceCommand(lC,lE,lu)local lG='thrust analog vertical fueled 'local lH='thrust analog lateral fueled 'if ExtraLateralTags~="none"then lH=lH..ExtraLateralTags end;if ExtraVerticalTags~="none"then lG=lG..ExtraVerticalTags end;if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lG,lB,lu)else Nav:setEngineForceCommand(lG,vec3(),lu)end;if LeftAmount~=0 then Nav:setEngineForceCommand(lH,lF,lu)else Nav:setEngineForceCommand(lH,vec3(),lu)end;if le==0 then le=C end;local lI=-le*(brakeSpeedFactor*bI+brakeFlatFactor*lf)Nav:setEngineForceCommand('brake',lI)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;local kn=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bI:len()-kn/3.6)local ly=utils.clamp(brakePID:get(),0,1)le=utils.clamp(le+ly,0,1)end;local lI=-le*(brakeSpeedFactor*bI+brakeFlatFactor*lf)Nav:setEngineForceCommand('brake',lI)local lz=''local lA=vec3()local lJ=false;local lC='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then lC=lC..ExtraLongitudeTags end;local lD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if lD==axisCommandType.byThrottle then local lE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lC,axisCommandId.longitudinal)Nav:setEngineForceCommand(lC,lE,lu)elseif lD==axisCommandType.byTargetSpeed then local lE=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lz=lz..' , '..lC;lA=lA+lE;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lJ=true end end;local lH='thrust analog lateral 'if ExtraLateralTags~="none"then lH=lH..ExtraLateralTags end;local lK=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if lK==axisCommandType.byThrottle then local lL=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lH,axisCommandId.lateral)Nav:setEngineForceCommand(lH,lL,lu)elseif lK==axisCommandType.byTargetSpeed then local lF=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lz=lz..' , '..lH;lA=lA+lF end;local lG='thrust analog vertical 'if ExtraVerticalTags~="none"then lG=lG..ExtraVerticalTags end;local lM=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if lM==axisCommandType.byThrottle then local lB=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lG,axisCommandId.vertical)if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lG,lB,lu,'airfoil','ground','',lw)else Nav:setEngineForceCommand(lG,vec3(),lu)Nav:setEngineForceCommand('airfoil vertical',lB,lu,'airfoil','','',lw)Nav:setEngineForceCommand('ground vertical',lB,lu,'ground','','',lw)end elseif lM==axisCommandType.byTargetSpeed then if a9<0 then Nav:setEngineForceCommand('hover',vec3(),lu)end;local lN=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lz=lz..' , '..lG;lA=lA+lN end;if lA:len()>constants.epsilon then if T~=0 or lJ or math.abs(lf:dot(bG))<0.8 then lz=lz..', brake'end;Nav:setEngineForceCommand(lz,lA,lv,'','','',lw)end end;local lO=torqueFactor*(lk-lj)local lP=vec3(core.getWorldAirFrictionAngularAcceleration())lO=lO-lP;Nav:setEngineTorqueCommand('torque',lO,lu,'airfoil','','',lw)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local bX=vec3(core.getVelocity()):len()local lQ=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local lR=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bX*3.6>lR*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bX*3.6<lR*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local j5=unit.getThrottle()if AtmoSpeedAssist then j5=B*100 end;local kn=j5/100;if h==0 then kn=kn*MaxGameVelocity;if bX>=kn*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bX<kn*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else kn=kn*ReentrySpeed/3.6;if bX>=kn*(1-lQ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bX<kn*(1-lQ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,ci=coroutine.resume(beginSetup)if ci then SetupComplete=true end else Nav:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lS)local function lT()aA=not aA;if not aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function lU()if LockPitch==nil then local cK=cG(bK,bG,bH)LockPitch=cK;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function lV()if al then al=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;V=false;I=false;ah=false;ai=false;K=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil;IntoOrbit=false else al=true end end;if lS=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0;if(vBooster or hover)and ak==-1 and(ao>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if N and not BrakeLanding then Nav.control.extendLandingGears()end else if N then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lS=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lS=="forward"then O=O-1 elseif lS=="backward"then O=O+1 elseif lS=="left"then R=R-1 elseif lS=="right"then R=R+1 elseif lS=="yawright"then S=S-1 elseif lS=="yawleft"then S=S+1 elseif lS=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lS=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lS=="up"then a9=a9+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lS=="down"then a9=a9-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lS=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lS=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lS=="option1"then cv()elseif lS=="option2"then cv(1)elseif lS=="option3"then if n()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif lS=="option4"then cx()elseif lS=="option5"then lU()elseif lS=="option6"then cq()elseif lS=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;lT()elseif lS=="option8"then cr()elseif lS=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end elseif lS=="lshift"then if system.isViewLocked()==1 then W=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then W=true;be=false;bd=false end elseif lS=="brake"then if BrakeToggleStatus then cP()elseif not BrakeIsOn then cP()else BrakeIsOn=true end elseif lS=="lalt"then AltIsOn=true elseif lS=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif lS=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)lV()B=0 elseif lS=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else cv()end elseif lS=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else cv(1)end elseif lS=="antigravity"and not ExternalAGG then if antigrav~=nil then d4()end end end;function script.onActionStop(lS)if lS=="forward"then O=0 elseif lS=="backward"then O=0 elseif lS=="left"then R=0 elseif lS=="right"then R=0 elseif lS=="yawright"then S=0 elseif lS=="yawleft"then S=0 elseif lS=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lS=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lS=="up"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lS=="down"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lS=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lS=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lS=="lshift"then if system.isViewLocked()==1 then W=false;aa=0;ab=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then W=false;be=false;bd=false end elseif lS=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cP()else BrakeIsOn=false end end elseif lS=="lalt"then AltIsOn=false end end;function script.onActionLoop(lS)if lS=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lS=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lS=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lS=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(d0)local function lW()for b_,bR in pairs(a)do dbHud_1.setStringValue(bR,f(nil))end;for b_,bR in pairs(b)do if bR~="SavedLocations"then dbHud_1.setStringValue(bR,f(nil))end end;X="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ac=5;aK=false;a8=true end;local function lX(lY,planet,gX)local function lZ(gX)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..t..','..t..','..t..','..t..','..t..'}'local dF,dG,cc,cd,cb=p(gX,ds)if dF=="0"and dG=="0"then return vec3(tonumber(cc),tonumber(cd),tonumber(cb))end;cd=math.rad(cd)cc=math.rad(cc)local planet=b2[tonumber(dF)][tonumber(dG)]local eu=math.cos(cc)local l_=vec3(eu*math.cos(cd),eu*math.sin(cd),math.sin(cc))return planet.center+(planet.radius+cb)*l_ end;if dbHud_1 then local cE={}local position=lZ(gX)if planet.name=="Space"then cE={position=position,name=lY,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local hx=false;if planet.hasAtmosphere then hx=true else hx=false end;cE={position=position,name=lY,atmosphere=hx,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cE;table.insert(b2[0],cE)bZ()else X="Databank must be installed to save locations"end end;local i;local m0="ah-commands ah-setname ah-G ah-agg ah-addlocation ah-copydatabank ah-wipedatabank"local m1,m2=nil,nil;local m3="Command List:\nah-commands \nah-setname <newname> - Updates current selected saved position name\nah-G VariableName newValue - Updates global variable to new value\n".."ah-G dump - shows all updatable variables with ah-G\nah-agg <targetheight> - Manually set agg target height\n".."ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."ah-copydatabank - copies dbHud databank to a blank databank\nah-wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(d0," ")m1=d0;if i~=nil then m1=string.sub(d0,0,i-1)m2=string.sub(d0,i+1)elseif not string.find(m0,m1)then for h6 in string.gmatch(m3,"([^\n]+)")do system.print(h6)end;return end;if m1=="ah-setname"then if m2==nil or m2==""then X="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cB(m2)else X="Select a saved target to rename first"end elseif m1=="ah-addlocation"then if m2==nil or m2==""or string.find(m2,"::")==nil then X="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(m2,"::")local lY=string.sub(m2,1,i-2)local gX=string.sub(m2,i)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ds='::pos{'..t..','..t..','..t..','..t..','..t..'}'local dF,dG,cc,cd,cb=p(gX,ds)local planet=b2[tonumber(dF)][tonumber(dG)]lX(lY,planet,gX)X="Added "..lY.." to saved locations,\nplanet "..planet.name.." at "..gX;ac=5 elseif m1=="ah-agg"then if m2==nil or m2==""then X="Usage: ah-agg targetheight"return end;m2=tonumber(m2)if m2<1000 then m2=1000 end;AntigravTargetAltitude=m2;X="AGG Target Height set to "..m2 elseif m1=="ah-G"then if m2==nil or m2==""then X="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if m2=="dump"then for b_,bR in pairs(a)do if type(_G[bR])=="boolean"then if _G[bR]==true then system.print(bR.." true")else system.print(bR.." false")end elseif _G[bR]==nil then system.print(bR.." nil")else system.print(bR.." ".._G[bR])end end;return end;i=string.find(m2," ")local m4=string.sub(m2,0,i-1)local m5=string.sub(m2,i+1)for b_,bR in pairs(a)do if bR==m4 then X="Variable "..m4 .." changed to "..m5;local m6=type(_G[bR])if m6=="number"then m5=tonumber(m5)elseif m6=="boolean"then if string.lower(m5)=="true"then m5=true else m5=false end end;_G[bR]=m5;return end end;X="No such global variable: "..m4 elseif m1=="ah-copydatabank"then if dbHud_2 then ex(true)else X="Spare Databank required to copy databank"end elseif m1=="ah-wipedatabank"then if dbHud_1 then lW()else X="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
