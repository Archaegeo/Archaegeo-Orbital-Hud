name: ArchHud - Archaegeo v1.139 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 300 --export: (Default: 300)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 0 --export: (Default: 0)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        minRollVelocity = 150 --export: (Default: 150)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.139;SetWaypointOnExit=true;local b={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","AtmoSpeedLimit","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","SetWaypointOnExit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","PvPR","PvPG","PvPB","DisplayDeadZone"}BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;showHelp=true;local c={"showHelp","VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local d=math.abs;local e=math.floor;local f=string.format;local g=json.decode;local h=json.encode;local j=core.getElementMaxHitPointsById;local k=unit.getAtmosphereDensity;local l=core.getElementMassById;local m=core.getConstructMass;local n=a.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local vec3=vec3;local s=utils.clamp;local t=a.axisCommandManager;local u=system.destroyWidgetPanel;local v=system.updateData;local w=system.addDataToWidget;local x=system.lockView;local y=system.isViewLocked;local function z(A,B)local C=10^(B or 0)return e(A*C+0.5)/C end;local D=SafeR;local E=SafeB;local F=SafeG;local G=false;local H=0;local I=0;local J=0;local K=false;local L=0;local M=false;local N=z(ResolutionX/2,0)local O=z(ResolutionY/2,0)local P=false;local Q=55;local R=false;local S=false;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=0;local a0=false;local a1=false;local a2="empty"local a3=5;local a4=5;local a5=a3;local a6=a4;local a7=false;local a8,a9=0;local aa,ab=0;local ac=nil;local ad=0;local ae=0;local af=false;local ag=0;local ah=0;local ai=0;local aj=3;local ak=0;local al=""local am=""local an=0;local ao=false;local ap=false;local aq=false;local ar=-1;local as=false;local at=""local au=k()>0;local av=k()local aw=core.getAltitude()local ax=core.getElementIdList()local ay=r()local az=nil;local aA=false;local aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]local aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local aD={}local aE=0;local aF=0;local aG=""local aH=true;local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=0;local aO=nil;local aP={}local aQ={}local aR={}local aS=0;local aT=false;local aU={}local aV={}local aW=e(1/apTickRate)*2;local aX={}local aY={}local aZ={}local a_={}local b0=false;local b1=16;local b2=0;local b3=nil;local b4=""local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=nil;local be=false;local bf=false;local bg=autoRollPreference;local bh=LandingGearGroundHeight;local bi=system.getMouseDeltaX()local bj=system.getMouseDeltaY()local bk=false;local bl=r()local bm=0;local bn=0;local bo=0;local bp=AtmoSpeedLimit;local bq=0;local br=nil;local bs=0;local bt=0;local bu=false;local bv=false;local bw={VectorToTarget=false}local bx=false;local by=0;local bz=nil;local bA=false;local bB=false;local bC=false;local bD=false;local bE=0;local bF=r()local bG=vec3(core.getConstructWorldOrientationUp())local bH=vec3(core.getConstructWorldOrientationForward())local bI=vec3(core.getConstructWorldOrientationRight())local bJ=vec3(core.getWorldVelocity())local bK=vec3(bJ):len()local bL=vec3(core.getWorldVertical())local bM=vec3(core.getConstructWorldPos())local bN=false;local bO=false;local bP=nil;local bQ=true;local bR=0;local bS=0;local function bT(bU,bV)if t:getAxisCommandType(0)~=axisCommandType.byThrottle and not bV then a.control.cancelCurrentControlMasterMode()end;t:setThrottleCommand(axisCommandId.longitudinal,bU)I=s(z(bU*100,0)/100,-1,1)end;local function bW(bU,bV)if t:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bV then a.control.cancelCurrentControlMasterMode()end;t:setTargetSpeedCommand(axisCommandId.longitudinal,bU)bP=bU end;local function bX()AtlasOrdered={}for bY,bZ in pairs(b3[0])do table.insert(AtlasOrdered,{name=bZ.name,index=bY})end;local function b_(c0,c1)return c0.name<c1.name end;table.sort(AtlasOrdered,b_)end;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*epsilon end;local function c5(ak,c6)local c7=ak>100000;local c8,c9=""if c6==nil then c6=1 end;if c7 then c8,c9=z(ak/1000/200,c6),"SU"elseif ak<1000 then c8,c9=z(ak,c6),"M"else c8,c9=z(ak/1000,c6),"KM"end;return c8,c9 end;local function ca(cb)for bY,bZ in pairs(cb)do if bZ.name and bZ.name==CustomTarget.name then return bY end end;return-1 end;local function cc()if VertTakeOff then AltitudeHold=false;StrongBrakes=true;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;VertTakeOff=false;bg=true;ag=0;if au and ar==-1 then BrakeLanding=false;AltitudeHold=true;ag=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)bW(e(bp))end else VertTakeOff=true;AltitudeHold=false;bA=false;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end end;local function cd()bA=false;bs=nil;bt=nil;bE=0;if av==0 then if IntoOrbit then IntoOrbit=false;bu=false;bz=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bg=true;if bz==nil then bz=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else a2="Unable to engage orbiting, not near planet"end else IntoOrbit=false;bu=false;bz=nil;bg=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false end end;local function ce()if bF-bn<1.5 then if planet.hasAtmosphere then if av>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000;by=HoldAltitude;bx=true;if not IntoOrbit then cd()end;bu=true end end;bn=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bn=bF end;if unit.getClosestPlanetInfluence()>0 and av==0 then by=aw;bx=true;bu=true;cd()if IntoOrbit then bn=bF else bn=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;a0=false;bg=true;LockPitch=nil;bA=false;if ar==-1 then AutoTakeoff=false;if bn>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=aw end end;if VertTakeOff then cc()end else AutoTakeoff=true;if bn>-1 then HoldAltitude=aw+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;t:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bN then cc()end end;if ap then HoldAltitude=100000 end else if IntoOrbit then cd()end;if VertTakeOff then cc()end;bg=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bn=0 end end;local function cf()if n()==1 then a0=not a0;if a0 then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()t:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bg=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end end else a2="Follow Mode only works with Remote controller"a0=false end end;local function cg()if AutopilotTargetIndex==0 then AutopilotTargetName="None"ac=nil;CustomTarget=nil;return true end;local ch=AtlasOrdered[AutopilotTargetIndex].index;local ci=b3[0][ch]if ci.center then AutopilotTargetName=ci.name;ac=b9[0][ch]if CustomTarget~=nil then if av==0 then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end;if v(widgetTargetOrbitText,widgetTargetOrbit)~=1 then w(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ci;for _,bZ in pairs(b9[0])do if bZ.name==CustomTarget.planetname then ac=bZ;AutopilotTargetName=CustomTarget.name;break end end;if v(widgetMaxMassText,widgetMaxMass)~=1 then w(widgetMaxMassText,widgetMaxMass)end;if v(widgetTravelTimeText,widgetTravelTime)~=1 then w(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(ac.center)else AutopilotTargetCoords=CustomTarget.position end;if ac.planetname~="Space"then if ac.hasAtmosphere then AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=e(ac.radius*(TargetOrbitRadius-1)+ac.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bc(ac):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function cj(ck)if not Autopilot and not VectorToTarget and not ap and not IntoOrbit then if ck==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then cg()else local ch=AtlasOrdered[AutopilotTargetIndex].index;local ci=b3[0][ch]if ci.name=="Space"then if ck==nil then cj()else cj(1)end else cg()end end else a2="Disengage autopilot before changing Interplanetary Helper"end end;local function cl(planet,cm)local function cn(co,cp)local cq=vec3(cp)if co.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=co.planetarySystemId},MapPosition)end;local cr=cq-co.center;local ak=cr:len()local cs=ak-co.radius;local ct=0;local cu=0;if not c2(ak,0)then local cv=o(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ak)end;return setmetatable({latitude=math.deg(ct),longitude=math.deg(cu),altitude=cs,bodyId=co.bodyId,systemId=co.planetarySystemId},MapPosition)end;local cw=cn(planet,cm)cw="::pos{"..cw.systemId..","..cw.bodyId..","..cw.latitude..","..cw.longitude..","..cw.altitude.."}"system.setWaypoint(cw)end;local function cx()local function cy(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ce()end end;VectorStatus="Proceeding to Waypoint"end;if bF-bo<1.5 and av>0 then if not bD then a2="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if av>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bo=-1;if Autopilot or VectorToTarget then return end end else bo=bF end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ap then cg()cl(ac,AutopilotTargetCoords)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if av~=0 then ap=true;ce()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if av>0 then if not VectorToTarget then cy(SpaceTarget)end else if aw>AutopilotTargetOrbit*1.5 or aw==0 then bA=false;Autopilot=true elseif not au then if IntoOrbit then cd()end;by=planet.noAtmosphericDensityAltitude+1000;bx=true;bw.AutopilotAlign=true;bw.VectorToTarget=true;bu=false;if not IntoOrbit then cd()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if av~=0 then ap=true;ce()else Autopilot=true end end elseif av==0 then local cz=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(ac.name==planet.name and cz)and not IntoOrbit then WaypointSet=false;bA=false;bu=false;cd()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;a0=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;P=false;LockPitch=nil;WaypointSet=false end else ap=true;ce()end else ap=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;P=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=aw;TargetSet=false;Reentry=false;if IntoOrbit then cd()end end end;local function cA(cB)local cC=-1;local cD;cC=ca(SavedLocations)if cC~=-1 then local cE;if cB~=nil then cD={position=SavedLocations[cC].position,name=cB,atmosphere=SavedLocations[cC].atmosphere,planetname=SavedLocations[cC].planetname,gravity=SavedLocations[cC].gravity}else cD={position=bM,name=SavedLocations[cC].name,atmosphere=av,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cC]=cD;cC=-1;cC=ca(b3[0])if cC>-1 then b3[0][cC]=cD end;bX()a2=CustomTarget.name.." position updated"AutopilotTargetIndex=0;cg()else a2="Name Not Found"end end;local function cF()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bg=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if VertTakeOff then cc()end;if IntoOrbit then cd()end;LockPitch=nil;bg=autoRollPreference;ao=false;aq=false;ag=0 end end;local function cG(cH,cI,cJ)local function cK(cH,cL)cH=vec3(cH)cL=vec3(cL):normalize()local c8=cH*cL;return c8.x+c8.y+c8.z end;local cM=0.001;local cN=1;if not au or not bk or ar~=-1 or bK<Q then local cO=cJ;if cO==nil then cO=DampingMultiplier end;if cI==nil then cI=cM end;cH=vec3(cH):normalize()local cP=vec3()-cH;local cQ=-cK(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cK(cP,core.getConstructWorldOrientationUp())*cN;if aE==0 then aE=cQ/2 end;if aF==0 then aF=cR/2 end;if d(cQ)<0.1 then V=V-cQ*2 else V=V-(cQ+(cQ-aE)*cO)end;if d(cR)<0.1 then U=U+cR*2 else U=U+cR+(cR-aF)*cO end;aE=cQ;aF=cR;if d(cQ)<cI and d(cR)<cI then return true end;return false elseif bk and ar==-1 then cH=bJ;local cO=cJ;if cO==nil then cO=DampingMultiplier end;if cI==nil then cI=cM end;cH=vec3(cH):normalize()local cP=bH-cH;local cQ=-cK(cP,core.getConstructWorldOrientationRight())*cN;local cR=-cK(cP,core.getConstructWorldOrientationUp())*cN;if aE==0 then aE=cQ/2 end;if aF==0 then aF=cR/2 end;if d(cQ)<0.1 then V=V-cQ*5 else V=V-(cQ+(cQ-aE)*cO)end;if d(cR)<0.1 then U=U+cR*5 else U=U+cR+(cR-aF)*cO end;aE=cQ;aF=cR;if d(cQ)<cI and d(cR)<cI then return true end;return false end end;local function cS()if Reentry then a2="Re-Entry cancelled"Reentry=false;bg=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a2="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"aj=5 elseif not R then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then a2="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if t:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bg=true;BrakeIsOn=false;a2="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bp end else Reentry=true;AltitudeHold=true;bg=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local cT,cU=c5(HoldAltitude)a2="Beginning Re-entry.  Target speed: "..bp.." Target Altitude: "..cT..cU;bW(e(bp))end;AutoTakeoff=false end;local function cV()if antigrav and not ExternalAGG then if bO then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=aw end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cW(cX)local cY=0;local cZ=0;local c_=0;if cX<60 then cX=e(cX)elseif cX<3600 then cY=e(cX/60)cX=e(cX%60)elseif cX<86400 then cZ=e(cX/3600)cY=e(cX%3600/60)else c_=e(cX/86400)cZ=e(cX%86400/3600)end;if c_>0 then return c_.."d "..cZ.."h "elseif cZ>0 then return cZ.."h "..cY.."m "elseif cY>0 then return cY.."m "..cX.."s"elseif cX>0 then return cX.."s"else return"0s"end end;local function d0()local d1=-1;if telemeter_1 then d1=telemeter_1.getDistance()end;if ar~=-1 and d1~=-1 then if ar<d1 then return ar else return d1 end elseif ar~=-1 then return ar else return d1 end end;local function d2(d3)local function d4(d5)for bY,bZ in pairs(d5)do dbHud_1.setStringValue(bZ,h(_G[bZ]))if d3 and dbHud_2 then dbHud_2.setStringValue(bZ,h(_G[bZ]))end end end;if dbHud_1 then if not af then d4(c)d4(b)system.print("Saved Variables to Datacore")if d3 and dbHud_2 then a2="Databank copied.  Remove copy when ready."end end end end;local function d6()local function d7(bZ)if aJ==1920 then return bZ else return z(aJ*bZ/1920,0)end end;local function d8(bZ)if aK==1080 then return bZ else return z(aK*bZ/1080,0)end end;local function d9()return y()==0 and userControlScheme~="keyboard"and n()==0 end;local function da()local db=t:getAxisCommandType(0)local dc="TRAVEL"if db==1 then dc="CRUISE"end;if Autopilot then dc="AUTOPILOT"end;return dc end;local function dd(de,b0,df,dg,dh,di,dj,dk)local dl=1;local dm=2;local dn=3;local dp=4;local dq=5;local dr=6;local ds=""local dt=0;local du=fuelY;local dv=fuelY+10;if n()==1 and not RemoteHud then du=du-50;dv=dv-50 end;de[#de+1]=[[<g class="pdim txtfuel">]]if dh=="ATMO"then ds="atmofueltank"elseif dh=="SPACE"then ds="spacefueltank"else ds="rocketfueltank"end;dt=_G[ds.."_size"]if#di>0 then for i=1,#di do local dw=string.sub(di[i][dm],1,12)local dx=0;for dy=1,dt do if di[i][dm]==g(unit[ds.."_"..dy].getData()).name then dx=dy;break end end;if b0 or dj[i]==nil or dk[i]==nil then local dz=0;local dA=0;local dB=0;local dC=0;local dD=r()if dx~=0 then dk[i]=g(unit[ds.."_"..dx].getData()).percentage;dj[i]=g(unit[ds.."_"..dx].getData()).timeLeft;if dj[i]=="n/a"then dj[i]=0 end else dB=l(di[i][dl])-di[i][dp]dz=di[i][dn]dk[i]=e(0.5+dB*100/dz)dA=di[i][dq]dC=di[i][dr]if dA<=dB then dj[i]=0 else dj[i]=e(0.5+dB/((dA-dB)/(dD-dC)))end;di[i][dq]=dB;di[i][dr]=dD end end;if dw==dg then dw=f("%s %d",dh,i)end;if dx==0 then dw=dw.." *"end;local dE;if dj[i]==0 then dE="n/a"else dE=cW(dj[i])end;if dk[i]~=nil then local dF=e(dk[i]*2.55)local dG=f("rgb(%d,%d,%d)",255-dF,dF,0)local dH=""if dE~="n/a"and dj[i]<120 or dk[i]<5 then if b0 then dH=[[class="red"]]end end;de[#de+1]=f([[
                                        <text x=%d y="%d" %s>%s</text>
                                        <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                    ]],df,du,dH,dw,df,dv,dG,dk[i],dE)du=du+30;dv=dv+30 end end end;de[#de+1]="</g>"end;local function dI(de,cs)if cs<200000 and not au or cs and au then local dJ=-bL:dot(bJ)local dK=0;if d(dJ)>1 then dK=45*math.log(d(dJ),10)if dJ<0 then dK=-dK end end;de[#de+1]=f([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,e(dJ),e(dK))end;return de end;local function dL(dM)local ck=-bL;dM=dM-dM:project_on(ck)local dN=vec3(0,0,1)dN=dN-dN:project_on(ck)local dO=dN:cross(ck)local dK=dN:angle_between(dM)*constants.rad2deg;if dM:dot(dO)<0 then dK=360-dK end;return dK end;local function dP(de,centerX,centerY,dQ,dR,cz)local dS=circleRad;local dT=20;dT=e(dT)local dU=e(dQ)if cz then for i=-45,45,5 do local dV=i;de[#de+1]=f([[<g transform="rotate(%f,%d,%d)">]],dV,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;de[#de+1]=f([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dS+dT-len,centerX,centerY+dS+dT)end;de[#de+1]=f([["
                                <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY+dS+dT-35,dR,centerX,centerY+dS+dT-25,dU)de[#de+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dQ,centerX,centerY)de[#de+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dS+dT-20,centerX+5,centerY+dS+dT-20,centerX,centerY+dS+dT-15)de[#de+1]="</g>"end;local dW=dU;if cz then dW=dL(bH)end;local dX=20;local dY=e(dW)local dZ=0;local d_=centerY+dS+dT+20;local e0=centerX;if dR~="YAW"then d_=d8(130)e0=d7(960)end;local e1=[[<path class="txttick line" d="]]for i=e(dY-(dX+10)-dY%5+0.5),e(dY+dX+10+dY%5+0.5),5 do local df=e0+-i*5+dW*5;if i%10==0 then dZ=10;local A=i;if A==360 then A=0 elseif A>360 then A=A-360 elseif A<0 then A=A+360 end;de[#de+1]=f([[
                                        <text x="%f" y="%f">%d</text>]],df+5,d_-12,A)elseif i%5==0 then dZ=5 end;if dZ==10 then e1=f([[%s M %f %f v %d]],e1,df,d_-5,dZ)else e1=f([[%s M %f %f v %d]],e1,df,d_-2.5,dZ)end end;de[#de+1]=e1 ..[["/>]]de[#de+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/>]],e0-5,d_+10,e0+5,d_+10,e0,d_+5)if cz then dR="HDG"end;de[#de+1]=f([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%d deg</text>
                            <text x="%d" y="%d">%s</text>
                            </g>
                            ]],e0,d_+25,dY,e0,d_+35,dR)end;local function e2(de,e3,dQ,centerX,centerY,cz,e4,e5)local dS=circleRad;local e6=e(dS*3/5)if dS>0 then local e7=e(e3)local len=0;local e1=f([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dQ,centerX,centerY)if not au then e1=f([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;de[#de+1]=f([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dS-1,centerX,centerY)de[#de+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=e(e7-30-e7%5+0.5),e(e7+30+e7%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local e8=centerY+-i*5+e3*5;if len==30 then e1=f([[%s M %d %f h %d]],e1,centerX-e6-len,e8,len)if au then de[#de+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dQ,centerX,centerY,centerX-e6+10,e8,i)de[#de+1]=f([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dQ,centerX,centerY,centerX+e6-10,e8,i)if i==0 or i==180 or i==-180 then de[#de+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dQ,centerX,centerY,centerX-e6+20,e8,e6*2-40)end else de[#de+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-e6+10,e8,i)de[#de+1]=f([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+e6-10,e8,i)end;e1=f([[%s M %d %f h %d]],e1,centerX+e6,e8,len)else e1=f([[%s M %d %f h %d]],e1,centerX-e6-len,e8,len)e1=f([[%s M %d %f h %d]],e1,centerX+e6,e8,len)end end;de[#de+1]=e1 ..[["/>]]local e9="PITCH"if not cz then e9="REL PITCH"end;if e3>90 and not au then e3=90-(e3-90)elseif e3<-90 and not au then e3=-90-(e3+90)end;if dS>200 then if au then if e5>Q then de[#de+1]=f([["
                                        <g class="pdim txt txtmid">
                                        <text x="%d" y="%d">%s</text>
                                        <text x="%d" y="%d">%d deg</text>
                                        </g>
                                        ]],centerX,centerY-15,"Yaw",centerX,centerY+20,e4)end;de[#de+1]=f([[<g transform="rotate(%f,%d,%d)">]],-dQ,centerX,centerY)else de[#de+1]=f([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;de[#de+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-e6+25,centerY-5,centerX-e6+20,centerY,centerX-e6+25,centerY+5,centerX-e6+50,centerY+4,e7)de[#de+1]=f([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+e6-25,centerY-5,centerX+e6-20,centerY,centerX+e6-25,centerY+5,centerX+e6-30,centerY+4,e7)de[#de+1]="</g>"end;local ea=e(dS/3)de[#de+1]=f([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ea,centerY,dS-ea)if not au and cz then de[#de+1]=f([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dQ,centerX,centerY,centerX-e6+10,centerY,e6*2-20)end;de[#de+1]="</g>"if dS<200 then if au and e5>Q then de[#de+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-dS,e9,centerX,centerY-dS+10,e7,centerX,centerY-15,"Yaw",centerX,centerY+20,e4)else de[#de+1]=f([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-dS,e9,centerX,centerY-dS+15,e7)end end end end;local function eb(de,cs,cz)local ec=altMeterX;local ed=altMeterY;local ee=78;local ef=19;local eg=d0()if eg~=-1 then table.insert(de,f([[
                            <g class="pdim altsm txtend">
                            <text x="%d" y="%d">AGL: %.1fm</text>
                            </g>
                            ]],ec+ee,ed+ef+20,eg))end;if cz and(cs<200000 and not au or cs and au)then table.insert(de,f([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],ec-1,ed-4,ee+2,ef+6,ec+1,ed-1,ee-4,ef))local cC=0;local eh=1;local ei=0;local ej=cs<0;local ek=9;if ej then ek=0 end;local cs=d(cs)while cC<6 do local el=11;local em=16;local en=9;local eo=14;local dH="altsm"if cC>2 then em=em+3;el=el+2;eo=eo+2;en=en-6;dH="altbig"end;if ej then dH=dH.." red"end;local ep=cs/eh%10;local eq=e(ep)local er=e((eq+1)%10)local es=ei;if cC==0 then es=ep-eq;if ej then es=1-es end end;if ej and(cC==0 or ei~=0)then local et=er;er=eq;eq=et end;local eu=em*(es-1)local ev=eu+em;local df=ec+en+(6-cC)*el;local e8=ed+eo;table.insert(de,f([[
                                    <g class="%s">
                                    <text x="%d" y="%f">%d</text>
                                    <text x="%d" y="%f">%d</text>
                                    </g>
                                ]],dH,df,e8+eu,er,df,e8+ev,eq))cC=cC+1;eh=eh*10;if eq==ek then ei=es else ei=0 end end;table.insert(de,[[</g></g>]])end end;local function ew(ex)ex=vec3(ex)local ey=-math.deg(o(ex.y,ex.z))+180;ey=ey-90;if ey<0 then ey=360+ey end;if ey>180 then ey=-180+ey-180 end;return-ey end;local function ez(ex)ex=vec3(ex)local dW=math.deg(o(ex.y,ex.x))-90;if dW<-180 then dW=360+dW end;return dW end;local function eA(de,ex,e5,centerX,centerY)if e5>5 and not au or e5>Q then local dS=circleRad;local eB=20;local eC=20;local eD=vec3(ex)local eE=ew(eD)local eF=ez(eD)local eG=14;local eH=eG/2;local eI=-eF/eC*dS;local eJ=eE/eB*dS;local df=centerX+eI;local e8=centerY+eJ;local ak=math.sqrt(eI^2+eJ^2)local eK=[[<circle
                            cx="]]..df..[["
                            cy="]]..e8 ..[["
                            r="]]..eH/eG..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..df..[["
                            cy="]]..e8 ..[["
                            r="]]..eH..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..df-eG..[[,]]..e8 ..[[ h ]]..eH..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..df+eH..[[,]]..e8 ..[[ h ]]..eH..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..df..[[,]]..e8-eG..[[ v ]]..eH..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ak<dS then de[#de+1]=eK else local dK=o(eJ,eI)local eL=4;local eM=centerX+dS*math.cos(dK)local eN=centerY+dS*math.sin(dK)de[#de+1]=f('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dK*180/math.pi,eM,eN,eM-eL,eN-eL/2,eL*2,eL,eM+eL,eN-eL,eL,eL,-eL,eL)end;if not au then eE=ew(-eD)eF=ez(-eD)eI=-eF/eC*dS;eJ=eE/eB*dS;df=centerX+eI;e8=centerY+eJ;ak=math.sqrt(eI^2+eJ^2)if ak<dS then local eO=[[<circle
                                    cx="]]..df..[["
                                    cy="]]..e8 ..[["
                                    r="]]..eH..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..df..[[,]]..e8-eG..[[ v ]]..eH..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..df..[[,]]..e8 ..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..df..[[,]]..e8 ..[[)" />
                                <path
                                    d="M ]]..df-eH..[[,]]..e8 ..[[ h ]]..eG..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..df..[[,]]..e8 ..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..df..[[,]]..e8 ..[[)"/>]]de[#de+1]=eO end end end end;local function eP(de,dc,eQ,eR)eQ=e(eQ+0.5)local du=throtPosY+10;local dv=throtPosY+20;if n()==1 and not RemoteHud then du=55;dv=65 end;local eS="CRUISE"local unit="km/h"local bU=eR;if dc=="TRAVEL"or dc=="AUTOPILOT"then eS="THROT"unit="%"bU=eQ;local eT="dim"if eQ<0 then eT="red"end;de[#de+1]=f([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],eT,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-d(eQ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;de[#de+1]=f([[
                            <g class="pbright txtstart">
                                    <text x="%s" y="%s">%s</text>
                                    <text x="%s" y="%s">%.0f %s</text>
                            </g>
                        </g>]],throtPosX+10,du,eS,throtPosX+10,dv,bU,unit)if au and AtmoSpeedAssist and bQ and K then eQ=e(L*100+0.5)local eT="red"if eQ<0 then eT="red"end;de[#de+1]=f([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],eT,1-d(eQ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)de[#de+1]=f([[
                                    <g class="pbright txtstart">
                                            <text x="%s" y="%s">%s</text>
                                            <text x="%s" y="%s">%d %s</text>
                                    </g>]],throtPosX+10,du+40,"LIMIT",throtPosX+10,dv+40,eQ,"%")end;if au and AtmoSpeedAssist or Reentry then de[#de+1]=f([[
                                <g class="dim txtstart">
                                    <text x="%s" y="%s">%s %s</text>
                                </g>
                            ]],throtPosX+10,du-40,"LIMIT: ",bp.." km/h")elseif not au and Autopilot then de[#de+1]=f([[
                                <g class="dim txtstart">
                                    <text x="%s" y="%s">%s %s</text>
                                </g>
                            ]],throtPosX+10,du-40,"LIMIT: ",e(MaxGameVelocity*3.6+0.5).." km/h")end end;local function eU(de,eV)local eW=throtPosY-10;local eX=throtPosX+10;de[#de+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then eW=75 end;de[#de+1]=f([[
                            <g class="pbright txtstart">
                                <text class="txtbig" x="%d" y="%d">%d km/h</text>
                            </g>
                        </g>]],eX,eW,e(eV))end;local function eY(de)de[#de+1]=f([[<text class="hudver" x="%d" y="%d">ARCH Hud Version: %.3f</text>]],d7(1900),d8(1070),VERSION_NUMBER)de[#de+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then de[#de+1]=f([[
                                <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],d7(960),d8(550))de[#de+1]=f([[
                                <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],d7(960),d8(600))de[#de+1]=f([[
                                <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],d7(960),d8(650))end;local eZ=d7(960)local e_=d8(860)local f0=d8(880)local f1=d8(900)local f2=d8(960)local f3=d8(200)local f4=d8(150)local f5=d8(960)if n()==1 and not RemoteHud then e_=d8(135)f0=d8(155)f1=d8(175)f3=d8(115)f4=d8(95)end;if BrakeIsOn then de[#de+1]=f([[<text x="%d" y="%d">Brake Engaged</text>]],eZ,e_)elseif J>0 then de[#de+1]=f([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],eZ,e_,J)end;if au and bk and ar==-1 then de[#de+1]=f([[<text x="%d" y="%d">** STALL WARNING **</text>]],eZ,f3+50)end;if az then de[#de+1]=f([[<text x="%d" y="%d">Gyro Enabled</text>]],eZ,f5)end;if GearExtended then if S then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eZ,f0)else de[#de+1]=f([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eZ,f0)end;local f6,c9=c5(a:getTargetGroundAltitude())de[#de+1]=f([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eZ,f1,f6 ..c9)end;if a7 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eZ,f2+20)end;if antigrav and not ExternalAGG and bO and AntigravTargetAltitude~=nil then if d(aw-antigrav.getBaseAltitude())<501 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singularity Altitude: %d</text>]],eZ,f3+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))else de[#de+1]=f([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eZ,f3+15,e(AntigravTargetAltitude),e(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eZ,f3+20,AutopilotStatus)elseif LockPitch~=nil then de[#de+1]=f([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eZ,f3+20,e(LockPitch))elseif a0 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eZ,f3+20)elseif Reentry then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],eZ,f3+20)end;local f7,f8,f9=b9:getPlanetarySystem(0):castIntersections(bM,bJ:normalize(),function(fa)if fa.noAtmosphericDensityAltitude>0 then return fa.radius+fa.noAtmosphericDensityAltitude else return fa.radius+fa.surfaceMaxAltitude*1.5 end end)local fb=f8;if f9~=nil and f8~=nil then fb=math.min(f9,f8)end;if AltitudeHold or VertTakeOff then local f6,c9=c5(HoldAltitude,2)if VertTakeOff then if bO then f6,c9=c5(antigrav.getBaseAltitude(),2)end;de[#de+1]=f([[<text class="warn" x="%d" y="%d">VTO to %s</text>]],eZ,f3,f6 ..c9)elseif AutoTakeoff and not IntoOrbit then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Takeoff to %s</text>]],eZ,f3,f6 ..c9)if BrakeIsOn and not VertTakeOff then de[#de+1]=f([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eZ,f3+50)end else de[#de+1]=f([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eZ,f3,f6 ..c9)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if av>0.1 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],eZ,f3)elseif av<0.09 and av>0.05 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],eZ,f3)elseif av<0.05 then de[#de+1]=f([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],eZ,f3)end end;if IntoOrbit then if br~=nil then de[#de+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eZ,f3,br)end end;if BrakeLanding then if StrongBrakes then de[#de+1]=f([[<text x="%d" y="%d">Brake-Landing</text>]],eZ,f3)else de[#de+1]=f([[<text x="%d" y="%d">Coast-Landing</text>]],eZ,f3)end end;if ProgradeIsOn then de[#de+1]=f([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eZ,f3)end;if RetrogradeIsOn then de[#de+1]=f([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eZ,f3)end;if fb~=nil and av==0 then local f6,c9=c5(fb)local travelTime=ba.computeTravelTime(bK,0,fb)local fc="Collision"if f7.noAtmosphericDensityAltitude>0 then fc="Atmosphere"end;de[#de+1]=f([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],eZ,f4,f7.name,fc,cW(travelTime),f6 ..c9)end;if VectorToTarget and not IntoOrbit then de[#de+1]=f([[<text class="warn" x="%d" y="%d">%s</text>]],eZ,f3+35,VectorStatus)end;de[#de+1]="</g>"return de end;local function fd(e5)return e(z(e5*3.6,0)+0.5).." km/h"end;local function fe(de)if orbit~=nil and av<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ff=OrbitMapX;local fg=OrbitMapY;local fh=OrbitMapSize;local fi=4;fg=fg+fi;local fj=15;local df=ff+fh+ff/2+fi;local e8=fg+fh/2+5+fi;local fk,fl,fm,fn;fk=fh/4;fn=0;de[#de+1]=[[<g class="pbright txtorb txtmid">]]de[#de+1]=f('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fh+ff*2,fh+fg,fi,fi)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fm=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fk*2)fl=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fm*(1-orbit.eccentricity)fn=fk-orbit.periapsis.altitude/fm-planet.radius/fm;local fo=""if orbit.periapsis.altitude<=0 then fo='redout'end;de[#de+1]=f([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fo,ff+fh/2+fn+fi,fg+fh/2+fi,fk,fl)de[#de+1]=f('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ff+fh/2+fi,fg+fh/2+fi,planet.radius/fm)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then de[#de+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],df-35,e8-5,ff+fh/2+fk+fn,e8-5)de[#de+1]=f([[<text x="%f" y="%f">Apoapsis</text>]],df,e8)e8=e8+fj;local f6,c9=c5(orbit.apoapsis.altitude)de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,f6 ..c9)e8=e8+fj;de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,cW(orbit.timeToApoapsis))e8=e8+fj;de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,fd(orbit.apoapsis.speed))end;e8=fg+fh/2+5+fi;df=ff-ff/2+10+fi;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then de[#de+1]=f([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],df+35,e8-5,ff+fh/2-fk+fn,e8-5)de[#de+1]=f([[<text x="%f" y="%f">Periapsis</text>]],df,e8)e8=e8+fj;local f6,c9=c5(orbit.periapsis.altitude)de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,f6 ..c9)e8=e8+fj;de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,cW(orbit.timeToPeriapsis))e8=e8+fj;de[#de+1]=f([[<text x="%f" y="%f">%s</text>]],df,e8,fd(orbit.periapsis.speed))end;de[#de+1]=f([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ff+fh/2+fi,20+fi,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fp=orbit.timeToApoapsis/orbit.period*2*math.pi;local fq=fk*math.cos(fp)local fr=fl*math.sin(fp)de[#de+1]=f('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ff+fh/2+fq+fn+fi,fg+fh/2+fr+fi)end;de[#de+1]=[[</g>]]return de else return de end end;local function fs()if radarPanelID~=nil and an==0 then u(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then u(perisPanelID)perisPanelID=nil end else if an==1 then u(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;an=0 end end;local function ft(de)local function fu(fv,fw)for i=1,#fw do table.insert(fv,fw[i])end;return fv end;local df=50;local e8=525;local fx={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local fy={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local fz={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local fA={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if au then fu(fx,fy)table.insert(fx,"---------------------------------------")if VertTakeOff then table.insert(fx,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if ar~=-1 then if antigrav then if bO then table.insert(fx,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(fx,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(fx,"Alt-6: Begins Vertical Takeoff.")else table.insert(fx,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(fx,"G: Begin BrakeLanding or Land")end else fu(fx,fz)end;if AltitudeHold then table.insert(fx,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(fx,"---------------------------------------")fu(fx,fA)de[#de+1]=[[<g class="pdim txt txtstart">]]for i=1,#fx do e8=e8+10;de[#de+1]=f([[<text x=%d y="%d">%s</text>]],df,e8,fx[i])end;de[#de+1]="</g>"end;local fB={}function fB.HUDPrologue(de)if not G then D=PvPR;F=PvPG;E=PvPB else D=SafeR;F=SafeG;E=SafeB end;aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]local fC=aB;local fD=aC;local fE=aB;local fF=aC;if d9()and not brightHud then fC=[[rgb(]]..e(D*0.4+0.5)..","..e(F*0.4+0.5)..","..e(E*0.3+0.5)..[[)]]fD=[[rgb(]]..e(D*0.3+0.5)..","..e(F*0.3+0.5)..","..e(E*0.2+0.5)..[[)]]end;de[#de+1]=f([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],fC,fC,fE,fE,fD,fD,fF,fF,aJ,aK)return de end;function fB.UpdateHud(de)local cs=aw;local ex=core.getVelocity()local e5=vec3(ex):len()local ey=bR;local fG=bS;local dQ=fG;local e3=bR;local eQ=e(unit.getThrottle())local eV=e5*3.6;local eR=unit.getAxisCommandValue(0)local fH=d7(1770)local fI=d8(310)if AtmoSpeedAssist and bQ then eR=I;eQ=I*100 end;local dc=da()local dR="ROLL"local cz=unit.getClosestPlanetInfluence()>0;if eQ==nil then eQ=0 end;if not cz then if e5>5 then ey=ew(ex)fG=ez(ex)else ey=0;fG=0 end;dR="YAW"end;if H>50000 and not au then local fJ;if H>200000 then fJ=z(H/200000,2).." su"else fJ=z(H/1000,1).." km"end;de[#de+1]=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],fH,fI,fJ)end;de[#de+1]=am;de[#de+1]=aG;de[#de+1]=al;if b2%aW==0 then b0=true end;if fuelX~=0 and fuelY~=0 then dd(de,b0,fuelX,"Atmospheric ","ATMO",aP,aZ,a_)dd(de,b0,fuelX+100,"Space fuel t","SPACE",aQ,aX,aY)dd(de,b0,fuelX+200,"Rocket fuel ","ROCKET",aR,aU,aV)end;if b0 then b0=false;b2=0 end;b2=b2+1;dI(de,cs)if n()==0 or RemoteHud then if not d9()or brightHud then if cz then dP(de,centerX,centerY,dQ,dR,cz)e2(de,e3,dQ,centerX,centerY,cz,e(ez(ex)),e5)else dP(de,centerX,centerY,fG,dR,cz)e2(de,ey,fG,centerX,centerY,cz,e(fG),e5)end;eb(de,cs,cz)eA(de,ex,e5,centerX,centerY)end end;eP(de,dc,eQ,eR)eU(de,eV)eY(de)fe(de)if showHelp then ft(de)end;if screen_2 then local fK=bM;local df=960+fK.x/b5;local e8=450+fK.y/b6;screen_2.moveContent(b7,(df-80)/19.2,(e8-80)/10.8)end;return de end;function fB.HUDEpilogue(de)de[#de+1]="</svg>"return de end;function fB.DrawOdometer(de,ad,TotalDistanceTravelled,ae,fL)local fM=d7(1240)local fN=d8(55)local fO=fN+10;local fP=core.g()local fQ=0;local fR=0;local fS=0;local dc=da()if VertTakeOffEngine then dc=dc.."-VERTICAL"end;if TurnBurn then dc="TB-"..dc end;if au then fS=LastMaxBrakeInAtmo else fS=LastMaxBrake end;maxThrust=a:maxForceForward()aN=m()if not ShowOdometer then return end;local fT=vec3(core.getWorldAcceleration()):len()/9.80665;fP=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()if fP>0.1 then fR=aN*fP;fQ=maxThrust/fP end;de[#de+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then fM=d7(1120)fN=d8(55)fO=fN+10 elseif au then local fU=d7(770)de[#de+1]=f([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],fU,fN,fU,fO,av)end;de[#de+1]=f([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],fM,fN,fM,fO,fP/9.80665,fM,fN+20,fM,fO+20,fT)de[#de+1]=f([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],d7(660),d7(700),d8(35),d7(960),d8(55),d7(1240),d8(35),d7(1280))if n()==0 or RemoteHud then de[#de+1]=f([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],d7(700),d8(20),ad,d7(700),d8(30),TotalDistanceTravelled/1000,d7(830),d8(20),cW(ae),d7(830),d8(30),cW(TotalFlightTime),d7(970),d8(20),aN/1000,d7(1240),d8(10),fS/1000,d7(1240),d8(30),maxThrust/1000,d7(960),d8(180),dc)if fP>0.1 then de[#de+1]=f([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],d7(970),d8(30),fQ/1000,d7(1240),d8(20),fR/1000)else de[#de+1]=f([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],d7(970),d8(30),d7(1240),d8(20))end else de[#de+1]=f([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],d7(960),d8(33),dc)end;de[#de+1]="</g>"return de end;function fB.DrawWarnings(de)return eY(de)end;function fB.DisplayOrbitScreen(de)return fe(de)end;function fB.DisplayMessage(de,f6)if f6~="empty"then de[#de+1]=[[<text class="msg" x="50%%" y="310" >]]for fV in string.gmatch(f6,"([^\n]+)")do de[#de+1]=f([[<tspan x="50%%" dy="35">%s</tspan>]],fV)end;de[#de+1]=[[</text>]]end;if aj~=0 then unit.setTimer("msgTick",aj)aj=0 end end;function fB.DrawDeadZone(de)de[#de+1]=f([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function fB.UpdateRadar()if radar_1 then local fW=radar_1.getEntries()local fX=radar_1.getData()local fY=d7(1770)local fZ=d8(330)if#fW>0 then local f_=fX:find('identifiedConstructs":%[%]')if f_==nil and perisPanelID==nil then an=1;fs()end;if f_~=nil and perisPanelID~=nil then fs()end;if radarPanelID==nil then fs()end;al=f([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fY,fZ,#fW)local g0={}for bY,bZ in pairs(fW)do if radar_1.hasMatchingTransponder(bZ)==1 then table.insert(g0,bZ)end end;if#g0>0 then local e8=d8(15)local df=d7(1370)al=f([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],al,df,e8)for bY,bZ in pairs(g0)do e8=e8+20;al=f([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],al,df,e8,radar_1.getConstructName(bZ))end end else local g1;g1=fX:find('worksInEnvironment":false')if g1 then al=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fY,fZ)else al=f([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fY,fZ)end;if radarPanelID~=nil then an=0;fs()end end end end;return fB end;local function g2()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function g3()local function g4(g5)return type(g5)=='number'end;local function g6(g5)return type(tonumber(g5))=='number'end;local function g7(g8)return type(g8)=='table'end;local function g9(ga)return type(ga)=='string'end;local function gb(bZ)return g7(bZ)and g4(bZ.x and bZ.y and bZ.z)end;local function gc(gd)return g7(gd)and g4(gd.latitude and gd.longitude and gd.altitude and gd.bodyId and gd.systemId)end;local ge=math.pi/180;local gf=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gg='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gh=s;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*epsilon end;local function gi(g5)local c8=string.gsub(string.reverse(f('%.4f',g5)),'^0*%.?','')return c8==''and'0'or string.reverse(c8)end;local function gj(gk)if gb(gk)then return f('{x=%.3f,y=%.3f,z=%.3f}',gk.x,gk.y,gk.z)end;if g7(gk)and not getmetatable(gk)then local gl={}local gm=next(gk)if type(gm)=='nil'or gm==1 then gl=gk else for bY,bZ in pairs(gk)do local bU=gj(bZ)if type(bY)=='number'then table.insert(gl,f('[%s]=%s',bY,bU))else table.insert(gl,f('%s=%s',bY,bU))end end end;return f('{%s}',table.concat(gl,','))end;if g9(gk)then return f("'%s'",gk:gsub("'",[[\']]))end;return tostring(gk)end;local gn={}gn.__index=gn;gn.__tostring=function(gk,go)local gp={}for bY in pairs(gk)do table.insert(gp,bY)end;table.sort(gp)local gl={}for _,bY in ipairs(gp)do local bU=gj(gk[bY])if type(bY)=='number'then table.insert(gl,f('[%s]=%s',bY,bU))else table.insert(gl,f('%s=%s',bY,bU))end end;if go then return f('%s%s',go,table.concat(gl,',\n'..go))end;return f('{%s}',table.concat(gl,','))end;gn.__eq=function(gq,gr)return gq.planetarySystemId==gr.planetarySystemId and gq.bodyId==gr.bodyId and c2(gq.radius,gr.radius)and c2(gq.center.x,gr.center.x)and c2(gq.center.y,gr.center.y)and c2(gq.center.z,gr.center.z)and c2(gq.GM,gr.GM)end;local function gs(gt,gu,gv,cp,gw)assert(g6(gt),'Argument 1 (planetarySystemId) must be a number:'..type(gt))assert(g6(gu),'Argument 2 (bodyId) must be a number:'..type(gu))assert(g6(gv),'Argument 3 (radius) must be a number:'..type(gv))assert(g7(cp),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cp))assert(g6(gw),'Argument 5 (GM) must be a number:'..type(gw))return setmetatable({planetarySystemId=tonumber(gt),bodyId=tonumber(gu),radius=tonumber(gv),center=vec3(cp),GM=tonumber(gw)},gn)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gx)return f('::pos{%d,%d,%s,%s,%s}',gx.systemId,gx.bodyId,gi(gx.latitude*gf),gi(gx.longitude*gf),gi(gx.altitude))end;MapPosition.__eq=function(gq,gr)return gq.bodyId==gr.bodyId and gq.systemId==gr.systemId and c2(gq.latitude,gr.latitude)and c2(gq.altitude,gr.altitude)and(c2(gq.longitude,gr.longitude)or c2(gq.latitude,math.pi/2)or c2(gq.latitude,-math.pi/2))end;local function gy(gz,gu,ct,cu,cs)local gt=gz;if g9(gz)and not cu and not cs and not gu and not ct then gt,gu,ct,cu,cs=p(gz,gg)assert(gt,'Argument 1 (position string) is malformed.')else assert(g6(gt),'Argument 1 (systemId) must be a number:'..type(gt))assert(g6(gu),'Argument 2 (bodyId) must be a number:'..type(gu))assert(g6(ct),'Argument 3 (latitude) must be in degrees:'..type(ct))assert(g6(cu),'Argument 4 (longitude) must be in degrees:'..type(cu))assert(g6(cs),'Argument 5 (altitude) must be in meters:'..type(cs))end;gt=tonumber(gt)gu=tonumber(gu)ct=tonumber(ct)cu=tonumber(cu)cs=tonumber(cs)if gu==0 then return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=gu,systemId=gt},MapPosition)end;return setmetatable({latitude=ge*gh(ct,-90,90),longitude=ge*(cu%360),altitude=cs,bodyId=gu,systemId=gt},MapPosition)end;local gA={}gA.__index=gA;gA.__tostring=function(gk,go)local gB=go and go..'  'local gC={}local gp={}for bY in pairs(gk)do table.insert(gp,bY)end;table.sort(gp)for _,gD in ipairs(gp)do bdy=gk[gD]local gE=gn.__tostring(bdy,gB)if go then table.insert(gC,f('[%s]={\n%s\n%s}',gD,gE,go))else table.insert(gC,f('  [%s]=%s',gD,gE))end end;if go then return f('\n%s%s%s',go,table.concat(gC,',\n'..go),go)end;return f('{\n%s\n}',table.concat(gC,',\n'))end;local function gF(gG)local b3={}local pid;for _,bZ in pairs(gG)do local gH=bZ.planetarySystemId;if type(gH)~='number'then error('Invalid planetary system ID: '..tostring(gH))elseif pid and gH~=pid then error('Mistringmatch planetary system IDs: '..gH..' and '..pid)end;local gI=bZ.bodyId;if type(gI)~='number'then error('Invalid body ID: '..tostring(gI))elseif b3[gI]then error('Duplicate body ID: '..tostring(gI))end;setmetatable(bZ.center,getmetatable(vec3.unit_x))b3[gI]=setmetatable(bZ,gn)pid=gH end;return setmetatable(b3,gA)end;b8={}local function gJ(gG)return setmetatable({galaxyAtlas=gG or{}},b8)end;b8.__index=function(g8,i)if type(i)=='number'then local system=g8.galaxyAtlas[i]return gF(system)end;return rawget(b8,i)end;b8.__pairs=function(gk)return function(g8,bY)local gK,nv=next(g8,bY)return gK,nv and gF(nv)end,gk.galaxyAtlas,nil end;b8.__tostring=function(gk)local gL={}for _,gM in pairs(gk or{})do local gN=gM:getPlanetarySystemId()local gO=gA.__tostring(gM,'    ')table.insert(gL,f('  [%s]={%s\n  }',gN,gO))end;return f('{\n%s\n}\n',table.concat(gL,',\n'))end;b8.BodyParameters=gs;b8.MapPosition=gy;b8.PlanetarySystem=gF;function b8.createBodyParameters(gP,gu,gQ,gR,gS,gT,gU)assert(g6(gP),'Argument 1 (planetarySystemId) must be a number:'..type(gP))assert(g6(gu),'Argument 2 (bodyId) must be a number:'..type(gu))assert(g6(gQ),'Argument 3 (surfaceArea) must be a number:'..type(gQ))assert(g7(gR),'Argument 4 (aPosition) must be an array or vec3:'..type(gR))assert(g7(gS),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gS))assert(g6(gT),'Argument 6 (altitude) must be in meters:'..type(gT))assert(g6(gU),'Argument 7 (gravityAtPosition) must be number:'..type(gU))local gv=math.sqrt(gQ/4/math.pi)local ak=gv+gT;local gV=vec3(gR)+ak*vec3(gS)local gw=gU*ak*ak;return gs(gP,gu,gv,gV,gw)end;b8.isMapPosition=gc;function b8:getPlanetarySystem(gz)if i==nil then i=0 end;if nv==nil then nv=0 end;local gP=gz;if gc(gz)then gP=gz.systemId end;if type(gP)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gA then system=gF(system)end;return system end end end;function gA:castIntersections(gW,cL,gX,gY)local gX=gX or function(fa)return 1.05*fa.radius end;local gZ={}if gY then for _,i in ipairs(gY)do gZ[i]=self[i]end else gY={}for bY,fa in pairs(self)do table.insert(gY,bY)gZ[bY]=fa end end;local function g_(h0,h1)local h2=gZ[h0].center-gW;local h3=gZ[h1].center-gW;return h2:len()<h3:len()end;table.sort(gY,g_)local h4=cL:normalize()for i,gH in ipairs(gY)do local fa=gZ[gH]local h5=fa.center-gW;local gv=gX(fa)local h6=h5:dot(h4)local h7=h6^2-(h5:len2()-gv^2)if h7>=0 then local h8=math.sqrt(h7)local f8=h6+h8;local f9=h6-h8;if f9>0 then return fa,f8,f9 elseif f8>0 then return fa,f8,nil end end end;return nil,nil,nil end;function gA:closestBody(cm)assert(type(cm)=='table','Invalid coordinates.')local h9,fa;local ha=vec3(cm)for _,hb in pairs(self)do local hc=(hb.center-ha):len2()if(not fa or hc<h9)and hb.name~="Space"then fa=hb;h9=hc end end;return fa end;function gA:convertToBodyIdAndWorldCoordinates(gz)local hd=gz;if g9(gz)then hd=gy(gz)end;if hd.bodyId==0 then return 0,vec3(hd.latitude,hd.longitude,hd.altitude)end;local hb=self:getBodyParameters(hd)if hb then return hd.bodyId,hb:convertToWorldCoordinates(hd)end end;function gA:getBodyParameters(gz)local gu=gz;if gc(gz)then gu=gz.bodyId end;assert(g6(gu),'Argument 1 (bodyId) must be a number:'..type(gu))return self[gu]end;function gA:getPlanetarySystemId()local _,bZ=next(self)return bZ and bZ.planetarySystemId end;function gn:convertToMapPosition(cp)assert(g7(cp),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cp))local cq=vec3(cp)if self.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cr=cq-self.center;local ak=cr:len()local cs=ak-self.radius;local ct=0;local cu=0;if not c2(ak,0)then local cv=o(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ak)end;return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gn:convertToWorldCoordinates(gz)local hd=g9(gz)and gy(gz)or gz;if hd.bodyId==0 then return vec3(hd.latitude,hd.longitude,hd.altitude)end;assert(gc(hd),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hd.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hd.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local he=math.cos(hd.latitude)return self.center+(self.radius+hd.altitude)*vec3(he*math.cos(hd.longitude),he*math.sin(hd.longitude),math.sin(hd.latitude))end;function gn:getAltitude(cp)return(vec3(cp)-self.center):len()-self.radius end;function gn:getDistance(cp)return(vec3(cp)-self.center):len()end;function gn:getGravity(cp)local hf=self.center-vec3(cp)local hg=hf:len2()return self.GM/hg*hf/math.sqrt(hg)end;return setmetatable(b8,{__call=function(_,...)return gJ(...)end})end;function script.onStart()local function hh()local function hi(hj)local hk=dbHud_1.hasKey;for bY,bZ in pairs(hj)do if hk(bZ)then local c8=g(dbHud_1.getStringValue(bZ))if c8~=nil then _G[bZ]=c8;aL=true end end end end;if dbHud_1 then local hk=dbHud_1.hasKey;if not useTheseSettings then hi(b)else a2="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"aj=5 end;coroutine.yield()hi(c)if aL then a2="Loaded Saved Variables (see Lua Chat Tab for list)"N=z(ResolutionX/2,0)O=z(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bg=autoRollPreference;bp=AtmoSpeedLimit;aB=[[rgb(]]..e(D+0.5)..","..e(F+0.5)..","..e(E+0.5)..[[)]]aC=[[rgb(]]..e(D*0.9+0.5)..","..e(F*0.9+0.5)..","..e(E*0.9+0.5)..[[)]]else a2="No Saved Variables Found - Stand up / leave remote to save settings"end else a2="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bF then LastMaxBrakeInAtmo=0 end;LastStartTime=bF;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a2="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"aj=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=aw end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function hl()local function hm(hn,ho)if hn>ho then ho=hn end;if ContainerOptimization>0 then ho=ho-ho*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then ho=ho-ho*FuelTankOptimization*0.05 end;return ho end;local hp=core.getElementNameById;local hq=fuelX~=0 and fuelY~=0;for bY in pairs(ax)do local type=core.getElementTypeById(ax[bY])if p(type,'^.*Atmospheric Engine$')then if p(tostring(core.getElementTagsById(ax[bY])),'^.*vertical.*$')then bN=true end end;if p(type,'^.*Space Engine$')then bD=true;if p(tostring(core.getElementTagsById(ax[bY])),'^.*vertical.*$')then local hr=core.getElementRotationById(ax[bY])if hr[4]<0 then if q(-hr[4],0.1)==0.5 then bB=true end else if q(hr[4],0.1)==0.5 then bC=true end end end end;if type=="Landing Gear"then S=true end;if type=="Dynamic Core Unit"then local hs=j(ax[bY])if hs>10000 then b1=128 elseif hs>1000 then b1=64 elseif hs>150 then b1=32 end end;aS=aS+j(ax[bY])if hq and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local hs=j(ax[bY])local ht=l(ax[bY])local hn=0;local dD=r()if type=="Atmospheric Fuel Tank"then local ho=400;local hu=35.03;if hs>10000 then ho=51200;hu=5480 elseif hs>1300 then ho=6400;hu=988.67 elseif hs>150 then ho=1600;hu=182.67 end;hn=ht-hu;if fuelTankHandlingAtmo>0 then ho=ho+ho*fuelTankHandlingAtmo*0.2 end;ho=hm(hn,ho)aP[#aP+1]={ax[bY],hp(ax[bY]),ho,hu,hn,dD}end;if type=="Rocket Fuel Tank"then local ho=320;local hu=173.42;if hs>65000 then ho=40000;hu=25740 elseif hs>6000 then ho=5120;hu=4720 elseif hs>700 then ho=640;hu=886.72 end;hn=ht-hu;if fuelTankHandlingRocket>0 then ho=ho+ho*fuelTankHandlingRocket*0.1 end;ho=hm(hn,ho)aR[#aR+1]={ax[bY],hp(ax[bY]),ho,hu,hn,dD}end;if type=="Space Fuel Tank"then local ho=2400;local hu=182.67;if hs>10000 then ho=76800;hu=5480 elseif hs>1300 then ho=9600;hu=988.67 end;hn=ht-hu;if fuelTankHandlingSpace>0 then ho=ho+ho*fuelTankHandlingSpace*0.2 end;ho=hm(hn,ho)aQ[#aQ+1]={ax[bY],hp(ax[bY]),ho,hu,hn,dD}end end end;if not bN then VertTakeOff,VertTakeOffEngine=false,false end end;local function hv()if gyro~=nil then az=gyro.getState()==1 end;if userControlScheme~="keyboard"then x(1)else x(0)end;if door and(au or not au and aw<10000)then for _,bZ in pairs(door)do bZ.toggle()end end;if switch then for _,bZ in pairs(switch)do bZ.toggle()end end;if forcefield and(au or not au==0 and aw<10000)then for _,bZ in pairs(forcefield)do bZ.toggle()end end;if antigrav then bO=antigrav.getState()==1;if bO and not ExternalAGG then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if S then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;local hw=d0()if hw~=-1 or not au and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not S then GearExtended=true end else BrakeIsOn=false end;if bh~=nil then t:setTargetGroundAltitude(bh)if bh==0 and not S then GearExtended=true;BrakeIsOn=true end else bh=a:getTargetGroundAltitude()if GearExtended then t:setTargetGroundAltitude(LandingGearGroundHeight)else t:setTargetGroundAltitude(TargetHoverHeight)end end;if au and hw~=-1 then bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=au end;local function hx(hy,hz,hA,hB,df,e8,hC,hD,hE)local hF={enableName=hy,disableName=hz,width=hA,height=hB,x=df,y=e8,toggleVar=hC,toggleFunction=hD,drawCondition=hE,hovered=false}table.insert(aI,hF)return hF end;local function hG()local function hH()if dbHud_1 then local position=bM;local dw=planet.name..". "..#SavedLocations;if radar_1 then local gH,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if gH~=nil and gH~=""then dw=dw.." "..radar_1.getConstructName(gH)end end;local cD={}cD={position=position,name=dw,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cD;table.insert(b3[0],cD)bX()a2="Location saved as "..dw else a2="Databank must be installed to save locations"end end;local function hI()TurnBurn=not TurnBurn end;local function hJ(hK)if hK==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;a0=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function hL()hJ(1)end;local function hM()local cC=-1;cC=ca(b3[0])if cC>-1 then table.remove(b3[0],cC)end;cC=-1;cC=ca(SavedLocations)if cC~=-1 then a2=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cC)end;cj()bX()end;local function hN()local dw=AutopilotTargetName;if dw==nil then local f6,c9=c5((bM-CustomTarget.position):len())dw=CustomTarget.name.." "..f6 ..c9 end;if dw==nil then dw="None"end;return"Engage Autopilot: "..dw end;local function hO()local dw=AutopilotTargetName;if dw==nil then dw=CustomTarget.name end;if dw==nil then dw="None"end;return"Disable Autopilot: "..dw end;local hP=50;local hQ=260;local hR=hx("Enable Brake Toggle","Disable Brake Toggle",hQ,hP,aJ/2-hQ/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a2="Brakes in Toggle Mode"else a2="Brakes in Default Mode"end end)hx("Align Prograde","Disable Prograde",hQ,hP,aJ/2-hQ/2-50-hR.width,aK/2-hP+380,function()return ProgradeIsOn end,hL)hx("Align Retrograde","Disable Retrograde",hQ,hP,aJ/2-hQ/2+hR.width+50,aK/2-hP+380,function()return RetrogradeIsOn end,hJ,function()return av==0 end)local hS=hx(hN,hO,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,cx)hx("Save Position","Save Position",200,hS.height,hS.x+hS.width+30,hS.y,function()return false end,hH,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)hx("Update Position","Update Position",200,hS.height,hS.x+hS.width+30,hS.y,function()return false end,cA,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hx("Clear Position","Clear Position",200,hS.height,hS.x-200-30,hS.y,function()return true end,hM,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)hP=60;hQ=300;local df=10;local e8=aK/2-500;hx("Show Help","Hide Help",hQ,hP,df,e8,function()return showHelp end,function()showHelp=not showHelp end)local e8=aK/2-300;hx("Enable Turn and Burn","Disable Turn and Burn",hQ,hP,df,e8,function()return TurnBurn end,hI)hx("Horizontal Takeoff Mode","Vertical Takeoff Mode",hQ,hP,df+hQ+20,e8,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then a2="Vertical Takeoff Mode"else a2="Horizontal Takeoff Mode"end end,function()return bN end)e8=e8+hP+20;hx("Show Orbit Display","Hide Orbit Display",hQ,hP,df,e8,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a2="Orbit Display Enabled"else a2="Orbit Display Disabled"end end)hx("Engage Orbiting","Cancel Orbiting",hQ,hP,df+hQ+20,e8,function()return IntoOrbit end,cd,function()return av==0 and unit.getClosestPlanetInfluence()>0 end)e8=e8+hP+20;hx("Glide Re-Entry","Cancel Glide Re-Entry",hQ,hP,df,e8,function()return Reentry end,function()ao=true;hL()end,function()return planet.hasAtmosphere and not au end)hx("Parachute Re-Entry","Cancel Parachute Re-Entry",hQ,hP,df+hQ+20,e8,function()return Reentry end,cS,function()return planet.hasAtmosphere and not au end)e8=e8+hP+20;hx("Engage Follow Mode","Disable Follow Mode",hQ,hP,df,e8,function()return a0 end,cf,function()return n()==1 end)hx("Enable Repair Arrows","Disable Repair Arrows",hQ,hP,df+hQ+20,e8,function()return aT end,function()aT=not aT;if aT then a2="Repair Arrows Enabled"else a2="Repair Arrows Diabled"end end,function()return n()==1 end)e8=e8+hP+20;if not ExternalAGG then hx("Enable AGG","Disable AGG",hQ,hP,df,e8,function()return bO end,cV,function()return antigrav~=nil end)end;e8=e8+hP+20;hx(function()return f("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return f("Control Scheme: %s",userControlScheme)end,hQ*2,hP,df,e8,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;local function hT()local hU=nil;local hV=nil;local hW=nil;local hX=nil;b3=g2()for bY,bZ in pairs(b3[0])do if hU==nil or bZ.center.x<hU then hU=bZ.center.x end;if hV==nil or bZ.center.x>hV then hV=bZ.center.x end;if hW==nil or bZ.center.y<hW then hW=bZ.center.y end;if hX==nil or bZ.center.y>hX then hX=bZ.center.y end end;b4=""local hY=1.1*(hV-hU)/1920;local hZ=1.4*(hX-hW)/1080;for bY,bZ in pairs(b3[0])do local df=960+bZ.center.x/hY;local e8=540+bZ.center.y/hZ;b4=b4 ..'<circle cx="'..df..'" cy="'..e8 ..'" r="'..bZ.radius/hY*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bZ.name,"Moon")and not p(bZ.name,"Sanctuary")and not p(bZ.name,"Space")then b4=b4 .."<text x='"..df.."' y='"..e8+bZ.radius/hY*30+20 .."' font-size='28' fill="..aB.." text-anchor='middle' font-family='Montserrat'>"..bZ.name.."</text>"end end;local fK=bM;local df=960+fK.x/hY;local e8=540+fK.y/hZ;b4=b4 ..'<circle cx="'..df..'" cy="'..e8 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='"..df.."' y='"..e8-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b4=b4 ..[[</svg>]]b5=hY;b6=hZ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b4)local fK=bM;local df=960+fK.x/hY;local e8=540+fK.y/hZ;b4='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b4=b4 .."<text x='80' y='105' font-size='18' fill="..aB.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b7=screen_2.addContent((df-80)/19.20,(e8-80)/10.80,b4)end end;local function h_()for bY,bZ in pairs(SavedLocations)do table.insert(b3[0],bZ)end;bX()end;local function i0()local ba={}local i1=30000000/3600;local i2=i1*i1;local i3=100;local function i4(bZ)return 1/math.sqrt(1-bZ*bZ/i2)end;function ba.computeAccelerationTime(i5,i6,i7)local i8=i1*math.asin(i5/i1)return(i1*math.asin(i7/i1)-i8)/i6 end;function ba.computeDistanceAndTime(i5,i7,i9,ia,ib,ic)ib=ib or 0;ic=ic or 0;local id=i5<=i7;local ie=ia*(id and 1 or-1)/i9;local ig=-ic/i9;local ih=ie+ig;if id and ih<=0 or not id and ih>=0 then return-1,-1 end;local ii,ij=0,0;if ie~=0 and ib>0 then local i8=math.asin(i5/i1)local ik=math.pi*(ie/2+ig)local il=ie*ib;local im=i1*math.pi;local bZ=function(g8)local io=(ik*g8-il*math.sin(math.pi*g8/2/ib)+im*i8)/im;local ip=math.tan(io)return i1*ip/math.sqrt(ip*ip+1)end;local iq=id and function(ga)return ga>=i7 end or function(ga)return ga<=i7 end;ij=2*ib;if iq(bZ(ij))then local ir=0;while d(ij-ir)>0.5 do local g8=(ij+ir)/2;if iq(bZ(g8))then ij=g8 else ir=g8 end end end;local is=i5;local it=ij/i3;for iu=1,i3 do local e5=bZ(iu*it)ii=ii+(e5+is)*it/2;is=e5 end;if ij<2*ib then return ii,ij end;i5=is end;local i8=i1*math.asin(i5/i1)local bF=(i1*math.asin(i7/i1)-i8)/ih;local iv=i2*math.cos(i8/i1)/ih;local ak=iv-i2*math.cos((ih*bF+i8)/i1)/ih;return ak+ii,bF+ij end;function ba.computeTravelTime(i5,i6,ak)if ak==0 then return 0 end;if i6>0 then local i8=i1*math.asin(i5/i1)local iv=i2*math.cos(i8/i1)/i6;return(i1*math.acos(i6*(iv-ak)/i2)-i8)/i6 end;if i5==0 then return-1 end;assert(i5>0,'Acceleration and initial speed are both zero.')return ak/i5 end;function ba.lorentz(bZ)return i4(bZ)end;return ba end;local function iw()local vec3=require('cpml.vec3')local g3=g3()local function g9(ga)return type(ga)=='string'end;local function g7(g8)return type(g8)=='table'end;local function c2(c3,c4)if c3==0 then return d(c4)<1e-09 end;if c4==0 then return d(c3)<1e-09 end;return d(c3-c4)<math.max(d(c3),d(c4))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cs)assert(self.body)local ak=cs+self.body.radius;if not c2(ak,0)then local orbit=math.sqrt(self.body.GM/ak)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gz,ex)assert(self.body)assert(g7(gz)or g9(gz))assert(g7(ex))local fK=(g9(gz)or g3.isMapPosition(gz))and self.body:convertToWorldCoordinates(gz)or vec3(gz)local bZ=vec3(ex)local ix=fK-self.body.center;local h3=bZ:len2()local iy=ix:len()local iz=self.body.GM;local iA=((h3-iz/iy)*ix-ix:dot(bZ)*bZ)/iz;local c3=iz/(2*iz/iy-h3)local iB=iA:len()local h4=iA:normalize()local iC=c3*(1-iB)local iD=c3*(1+iB)local iE=iC*h4+self.body.center;local iF=iB<=1 and-iD*h4+self.body.center or nil;local iG=math.sqrt(c3*iz*(1-iB*iB))local iH=iF and 2*math.pi*math.sqrt(c3^3/iz)local iI=math.acos(iA:dot(ix)/(iB*iy))if ix:dot(bZ)<0 then iI=-(iI-2*math.pi)end;local iJ=math.acos((math.cos(iI)+iB)/(1+iB*math.cos(iI)))local iK=iJ;if iK<0 then iK=iK+2*math.pi end;local iL=iK-iB*math.sin(iK)local iM=0;local iN=0;local iO=0;if iH~=nil then iM=iL/(2*math.pi/iH)iN=iH-iM;iO=iN+iH/2;if iI-math.pi>0 then iN=iM;iO=iN+iH/2 end;if iO>iH then iO=iO-iH end end;return{periapsis={position=iE,speed=iG/iC,circularOrbitSpeed=math.sqrt(iz/iC),altitude=iC-self.body.radius},apoapsis=iF and{position=iF,speed=iG/iD,circularOrbitSpeed=math.sqrt(iz/iD),altitude=iD-self.body.radius},currentVelocity=bZ,currentPosition=fK,eccentricity=iB,period=iH,eccentricAnomaly=iJ,meanAnomaly=iL,timeToPeriapsis=iN,timeToApoapsis=iO}end;local function iP(iQ)local hb=g3.BodyParameters(iQ.planetarySystemId,iQ.bodyId,iQ.radius,iQ.center,iQ.GM)return setmetatable({body=hb},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iP(...)end})end;SetupComplete=false;beginSetup=coroutine.create(function()t:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})hh()coroutine.yield()hl()coroutine.yield()hv()hG()coroutine.yield()hT()b8=g3()b9=b8(g2())ba=i0()bc=iw()bd=d6()h_()bX()cg()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(av>0 or av==0 and aw<10000)then for _,bZ in pairs(door)do bZ.toggle()end end;if switch then for _,bZ in pairs(switch)do bZ.toggle()end end;if forcefield and(av>0 or av==0 and aw<10000)then for _,bZ in pairs(forcefield)do bZ.toggle()end end;d2()if button then button.activate()end;if SetWaypointOnExit then cl(planet,bM)end end;function script.onTick(iR)local function iS(e5)if not au then return ba.computeDistanceAndTime(e5,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return ba.computeDistanceAndTime(e5,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function iT(e5)return ba.computeDistanceAndTime(e5,AutopilotEndSpeed,m(),a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;if iR=="tenthSecond"then local function iU()local iV=system.createData;local iW=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=iW(panelInterplanetary,"value")interplanetaryHeaderText=iV('{"label": "Target Planet", "value": "N/A", "unit":""}')w(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=iW(panelInterplanetary,"value")widgetDistanceText=iV('{"label": "distance", "value": "N/A", "unit":""}')w(widgetDistanceText,widgetDistance)widgetTravelTime=iW(panelInterplanetary,"value")widgetTravelTimeText=iV('{"label": "Travel Time", "value": "N/A", "unit":""}')w(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=iW(panelInterplanetary,"value")widgetMaxMassText=iV('{"label": "Maximum Mass", "value": "N/A", "unit":""}')w(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=iW(panelInterplanetary,"value")widgetTargetOrbitText=iV('{"label": "Target Altitude", "value": "N/A", "unit":""}')w(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=iW(panelInterplanetary,"value")widgetCurBrakeDistanceText=iV('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=iW(panelInterplanetary,"value")widgetCurBrakeTimeText=iV('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=iW(panelInterplanetary,"value")widgetMaxBrakeDistanceText=iV('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=iW(panelInterplanetary,"value")widgetMaxBrakeTimeText=iV('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=iW(panelInterplanetary,"value")widgetTrajectoryAltitudeText=iV('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not au then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)w(widgetCurBrakeTimeText,widgetCurBrakeTime)w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function iX()u(panelInterplanetary)panelInterplanetary=nil end;local function iY()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(ac.center-bM):len()else AutopilotDistance=(CustomTarget.position-bM):len()end end;local e5=bK;local iZ=unit.getThrottle()/100;if AtmoSpeedAssist then iZ=I end;local i_,j0=ba.computeDistanceAndTime(bK,MaxGameVelocity,m(),a:maxForceForward()*iZ,warmup,0)local a8,a9;if not TurnBurn then a8,a9=iS(MaxGameVelocity)else a8,a9=iT(MaxGameVelocity)end;local _,j1;if not TurnBurn and e5>0 then _,j1=iS(e5)else _,j1=iT(e5)end;local j2=0;local j3=0;if AutopilotCruising or not Autopilot and e5>5 then j3=ba.computeTravelTime(e5,0,AutopilotDistance)elseif a8+i_<AutopilotDistance then j2=AutopilotDistance-(a8+i_)j3=ba.computeTravelTime(8333.0556,0,j2)else local j4=(AutopilotDistance-a8)/i_;i_=AutopilotDistance-a8;j0=j0*j4 end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return j3 elseif AutopilotBraking then return j1 elseif AutopilotCruising then return j3+j1 else return j0+a9+j3 end end;local function j5()local j6=LastMaxBrakeInAtmo/ac:getGravity(ac.center+vec3(0,0,1)*ac.radius):len()return j6 end;if av>0 and not WasInAtmo then if not bQ and AtmoSpeedAssist and(AltitudeHold or Reentry)then bT(1)M=false end end;if bP~=nil then if t:getTargetSpeed(axisCommandId.longitudinal)~=bP then bW(bP,TRUE)else bP=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then iU()end;if AutopilotTargetName~=nil then local j7=CustomTarget~=nil;planetMaxMass=j5()v(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=iY()if j7 and not Autopilot then ak=(bM-CustomTarget.position):len()else ak=(AutopilotTargetCoords-bM):len()end;if not TurnBurn then a8,a9=iS(bK)aa,ab=iS(MaxGameVelocity)else a8,a9=iT(bK)aa,ab=iT(MaxGameVelocity)end;local f6,c9=c5(ak)v(widgetDistanceText,'{"label": "distance", "value": "'..f6 ..'", "unit":"'..c9 ..'"}')v(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cW(travelTime)..'", "unit":""}')f6,c9=c5(a8)v(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..f6 ..'", "unit":"'..c9 ..'"}')v(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cW(a9)..'", "unit":""}')f6,c9=c5(aa)v(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..f6 ..'", "unit":"'..c9 ..'"}')v(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cW(ab)..'", "unit":""}')v(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..f("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')f6,c9=c5(AutopilotTargetOrbit)v(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..f("%.2f",f6)..'", "unit":"'..c9 ..'"}')if av>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if av==0 and WasInAtmo then if v(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then w(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if v(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then w(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if v(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then w(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if v(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then w(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if v(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then w(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else iX()end;if warpdrive~=nil then if g(warpdrive.getData()).destination~="Unknown"and g(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iR=="oneSecond"then local function j8(fP,j9)if fP==nil then fP=core.g()end;fP=z(fP,5)if j9~=nil and j9 or(aO==nil or aO~=fP)then local ex=core.getVelocity()local e5=vec3(ex):len()local ja=g(unit.getData()).maxBrake;if ja~=nil and ja>0 and au then ja=ja/s(e5/100,0.1,1)ja=ja/av;if av>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+ja)/2 else LastMaxBrakeInAtmo=ja end end end;if ja~=nil and ja>0 then LastMaxBrake=ja end;aO=fP end end;local function jb(de)local jc=0;aG=""local jd=aS;local je=0;local jf=0;local jg=0;local dF=0;local dG=""local jh=core.getElementHitPointsById;for bY in pairs(ax)do local hs=0;local ji=0;ji=j(ax[bY])hs=jh(ax[bY])je=je+hs;if hs<ji then if hs==0 then jg=jg+1 else jf=jf+1 end;if aT and#aD==0 then position=vec3(core.getElementPositionById(ax[bY]))local df=position.x-b1;local e8=position.y-b1;local jj=position.z-b1;table.insert(aD,core.spawnArrowSticker(df,e8,jj+1,"down"))table.insert(aD,core.spawnArrowSticker(df,e8,jj+1,"down"))core.rotateSticker(aD[2],0,0,90)table.insert(aD,core.spawnArrowSticker(df+1,e8,jj,"north"))table.insert(aD,core.spawnArrowSticker(df+1,e8,jj,"north"))core.rotateSticker(aD[4],90,90,0)table.insert(aD,core.spawnArrowSticker(df-1,e8,jj,"south"))table.insert(aD,core.spawnArrowSticker(df-1,e8,jj,"south"))core.rotateSticker(aD[6],90,-90,0)table.insert(aD,core.spawnArrowSticker(df,e8-1,jj,"east"))table.insert(aD,core.spawnArrowSticker(df,e8-1,jj,"east"))core.rotateSticker(aD[8],90,0,90)table.insert(aD,core.spawnArrowSticker(df,e8+1,jj,"west"))table.insert(aD,core.spawnArrowSticker(df,e8+1,jj,"west"))core.rotateSticker(aD[10],-90,0,90)table.insert(aD,ax[bY])end elseif aT and#aD>0 and aD[11]==ax[bY]then for dy in pairs(aD)do core.deleteSticker(aD[dy])end;aD={}end end;jc=e(je/jd*100)if jc<100 then de[#de+1]=[[<g class="pbright txt">]]dF=e(jc*2.55)dG=f("rgb(%d,%d,%d)",255-dF,dF,0)if jc<100 then de[#de+1]=f([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],dG,jc)if jg>0 then de[#de+1]=f([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],dG,jg,jf)elseif jf>0 then de[#de+1]=f([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],dG,jf)end end;de[#de+1]=[[<\g>]]end end;local function jk()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then u(WeaponPanelID)WeaponPanelID=nil end end end;local function jl()local dD=r()local eV=bK;local jm=dD-ay;if eV>1.38889 then eV=eV/1000;local jn=eV*(dD-ay)TotalDistanceTravelled=TotalDistanceTravelled+jn;ad=ad+jn end;ae=ae+jm;TotalFlightTime=TotalFlightTime+jm;ay=dD end;as=false;j8(nil,true)jl()bd.UpdateRadar()jk()local de={}de=bd.DrawOdometer(de,ad,TotalDistanceTravelled,ae)if ShouldCheckDamage then jb(de)end;am=table.concat(de,"")collectgarbage("collect")elseif iR=="fiveSecond"then at=dbHud_1.getStringValue("SPBAutopilotTargetName")if at~=nil and at~=""and at~="SatNavNotChanged"then local c8=g(dbHud_1.getStringValue("SavedLocations"))if c8~=nil then _G["SavedLocations"]=c8;local cC=-1;local cD;for bY,bZ in pairs(SavedLocations)do if bZ.name and bZ.name=="SatNav Location"then cC=bY;break end end;if cC~=-1 then cD=SavedLocations[cC]cC=-1;for bY,bZ in pairs(b3[0])do if bZ.name and bZ.name=="SatNav Location"then cC=bY;break end end;if cC>-1 then b3[0][cC]=cD end;bX()a2=cD.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==at then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)cg()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iR=="msgTick"then local de={}bd.DisplayMessage(de,"empty")a2="empty"unit.stopTimer("msgTick")aj=3 elseif iR=="animateTick"then bf=true;be=false;ah=0;ai=0;unit.stopTimer("animateTick")elseif iR=="hudTick"then local function jo(de)local jp=e(s(ak/(aJ/4)*255,0,255))de[#de+1]=f("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ah,ai,e(D+0.5)+jp,e(F+0.5)-jp,e(E+0.5)-jp)end;local function jq()for _,bZ in pairs(aI)do if bZ.hovered then if not bZ.drawCondition or bZ.drawCondition()then bZ.toggleFunction()end;bZ.hovered=false end end end;local function jr()local function js(jt,ju,df,e8,hA,hB)if jt>df and jt<df+hA and ju>e8 and ju<e8+hB then return true else return false end end;local df=ah+aJ/2;local e8=ai+aK/2;for _,bZ in pairs(aI)do bZ.hovered=js(df,e8,bZ.x,bZ.y,bZ.width,bZ.height)end end;local function jv(de)local function jw(de,jx,hover,df,e8,io,jy,jz,jA,jB,jC)if type(jB)=="function"then jB=jB()end;if type(jC)=="function"then jC=jC()end;de[#de+1]=f("<rect x='%f' y='%f' width='%f' height='%f' fill='",df,e8,io,jy)if jx then de[#de+1]=f("%s'",jz)else de[#de+1]=jA end;if hover then de[#de+1]=" style='stroke:white; stroke-width:2'"else de[#de+1]=" style='stroke:black; stroke-width:1'"end;de[#de+1]="></rect>"de[#de+1]=f("<text x='%f' y='%f' font-size='24' fill='",df+io/2,e8+jy/2+5)if jx then de[#de+1]="black"else de[#de+1]="white"end;de[#de+1]="' text-anchor='middle' font-family='Montserrat'>"if jx then de[#de+1]=f("%s</text>",jB)else de[#de+1]=f("%s</text>",jC)end end;local jD="rgb(50,50,50)'"local jE="rgb(210,200,200)"local jF=jw;for _,bZ in pairs(aI)do local hz=bZ.disableName;local hy=bZ.enableName;if type(hz)=="function"then hz=hz()end;if type(hy)=="function"then hy=hy()end;if not bZ.drawCondition or bZ.drawCondition()then jF(de,bZ.toggleVar(),bZ.hovered,bZ.x,bZ.y,bZ.width,bZ.height,jE,jD,hz,hy)end end end;local de={}bd.HUDPrologue(de)if showHud then bd.UpdateHud(de)else bd.DisplayOrbitScreen(de)bd.DrawWarnings(de)end;bd.HUDEpilogue(de)de[#de+1]=f([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if a2~="empty"then bd.DisplayMessage(de,a2)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then bd.DrawDeadZone(de)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then jr()jv(de)if screen_1.getMouseState()==1 then jq()end;de[#de+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)elseif y()==0 then if n()==1 and a1 then jr()jv(de)if not be and not bf then local jG=table.concat(de,"")de={}de[#de+1]=f("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)de[#de+1]=b4;de[#de+1]=jG;de[#de+1]="</body>"be=true;de[#de+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(de,"")system.setScreen(content)elseif bf then local jG=table.concat(de,"")de={}de[#de+1]=f("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)de[#de+1]=b4;de[#de+1]=jG;de[#de+1]="</body>"end;if not be then de[#de+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)end else jq()end else if not a1 and n()==0 then jq()if ak>DeadZone then if DisplayDeadZone then jo(de)end end else jr()jv(de)end;de[#de+1]=f([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],N,O,ah,ai)end;de[#de+1]=[[</svg></body>]]content=table.concat(de,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iR=="apTick"then local function jH(jI)local gv=500000;local jJ,jK,jL=math.huge;local jM=false;local jN=vec3({13771471,7435803,-128971})local jO=18000000;jJ=vec3(jI):dist(jN)if jJ<jO then return true,d(jJ-jO),"Safe Zone",0 end;jK=vec3(jI):dist(vec3(planet.center))if jK<gv then jM=true end;if d(jK-gv)<d(jJ-jO)then return jM,d(jK-gv),planet.name,planet.bodyId else return jM,d(jJ-jO),"Safe Zone",0 end end;local function jP()local jQ=-1;local jR=-1;if vBooster then jQ=vBooster.distance()end;if hover then jR=hover.distance()end;if jQ~=-1 and jR~=-1 then if jQ<jR then return jQ else return jR end elseif jQ~=-1 then return jQ elseif jR~=-1 then return jR else return-1 end end;local function jS(jT,jU,jV)jU=jU:project_on_plane(jT)jV=jV:project_on_plane(jT)return o(jU:cross(jV):dot(jT),jU:dot(jV))end;au=k()>0;av=k()aw=core.getAltitude()ar=jP()bF=r()bl=bF;if antigrav then bO=antigrav.getState()==1 end;local jW=1;local jX=1;local jY=bF-bl;local jZ=-math.deg(jS(bG,bJ,bH))local j_=math.deg(jS(bI,bJ,bH))bk=au and jZ<-YawStallAngle or jZ>YawStallAngle or j_<-PitchStallAngle or j_>PitchStallAngle;bi=system.getMouseDeltaX()bj=system.getMouseDeltaY()if InvertMouse and not a1 then bj=-bj end;V=0;Z=0;U=0;sys=b9[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bc(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bJ)if aw==0 then aw=(bM-planet.center):len()-planet.radius end;local fP=planet:getGravity(core.getConstructWorldPos()):len()*m()bm=0;bb=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not au then G,H,_,_=jH(bM)else G=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then ah=screen_1.getMouseX()*aJ;ai=screen_1.getMouseY()*aK elseif y()==0 then if n()==1 and a1 then if not be then ah=ah+bi;ai=ai+bj end else ah=0;ai=0 end else ah=ah+bi;ai=ai+bj;ak=math.sqrt(ah*ah+ai*ai)if not a1 and n()==0 then if userControlScheme=="virtual joystick"then if ah>0 and ah>DeadZone then V=V-(ah-DeadZone)*MouseXSensitivity elseif ah<0 and ah<DeadZone*-1 then V=V-(ah+DeadZone)*MouseXSensitivity else V=0 end;if ai>0 and ai>DeadZone then U=U-(ai-DeadZone)*MouseYSensitivity elseif ai<0 and ai<DeadZone*-1 then U=U-(ai+DeadZone)*MouseYSensitivity else U=0 end elseif userControlScheme=="mouse"then ah=0;ai=0;U=(-utils.smoothstep(bj,-100,100)+0.5)*2*jW;V=(-utils.smoothstep(bi,-100,100)+0.5)*2*jX else ah=0;ai=0 end end end;local k0=bK>8334;if bK>SpaceSpeedLimit/3.6 and not au and not Autopilot and not k0 then a2="Space Speed Engine Shutoff reached"bT(0)end;if not k0 and LastIsWarping then if not BrakeIsOn then cF()end;if Autopilot then cx()end end;LastIsWarping=k0;if au and av>0.09 then if bK>bp/3.6 and not AtmoSpeedAssist and not aA then BrakeIsOn=true;aA=true elseif not AtmoSpeedAssist and aA then if bK<bp/3.6 then BrakeIsOn=false;aA=false end end end;if BrakeIsOn then Y=1 else Y=0 end;if ProgradeIsOn then if ao then BrakeIsOn=false;local k1=false;if CustomTarget~=nil then k1=cG(CustomTarget.position-bM,0.01)else k1=cG(vec3(bJ),0.01)end;bg=true;if k1 and(d(bS)<2 or d(bR)>85)and bK>=bp/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;R=true;ao=false;aq=true;Autopilot=false;cS()elseif au and AtmoSpeedAssist then bT(1)else bW(e(bp))end elseif bK>Q then cG(vec3(bJ),0.01)end end;if RetrogradeIsOn then if au then RetrogradeIsOn=false elseif bK>Q then cG(-vec3(bJ))end end;if not ProgradeIsOn and ao and not IntoOrbit then if av==0 then R=true;cS()ao=false;aq=true else ao=false;cx()end end;local ck=bL*-1;local dJ=bJ.x*ck.x+bJ.y*ck.y+bJ.z*ck.z;if aq and CustomTarget~=nil and(aw<HoldAltitude+200 and aw>HoldAltitude-200)and bK*3.6>bp-100 and d(dJ)<20 and av>=0.1 and(CustomTarget.position-bM):len()>2000+aw then cx()aq=false end;if VertTakeOff then bg=true;local k2=HoldAltitude;if dJ<-30 then a2="Unable to achieve lift. Safety Landing."ag=0;bg=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bO or HoldAltitude<planet.spaceEngineMinAltitude then if bO then k2=antigrav.getBaseAltitude()end;if aw<k2-100 then bq=0;ag=15;BrakeIsOn=false elseif dJ>0 then BrakeIsOn=true;ag=0 elseif dJ<-30 then BrakeIsOn=true;ag=15 elseif aw>=k2 then if bO then if Autopilot or VectorToTarget then cc()else BrakeIsOn=true;VertTakeOff=false end;a2="Takeoff complete. Singularity engaged"else BrakeIsOn=false;a2="VTO complete. Engaging Horizontal Flight"cc()end;ag=0 end else if av>0.08 then bq=0;BrakeIsOn=false;ag=20 elseif av<0.08 and av>0 then BrakeIsOn=false;if bC then bq=0;ag=20 else ag=0;bq=36;bW(3500)end else bg=autoRollPreference;IntoOrbit=true;bA=false;CancelIntoOrbit=false;bu=false;bs=nil;bt=nil;if bz==nil then bz=planet end;by=k2;bx=true;VertTakeOff=false end end;if bq~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local k3=s(bq-bR,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(k3)local k4=s(vTpitchPID:get(),-1,1)U=k4 end end;if IntoOrbit then if bz==nil then if VectorToTarget then bz=ac else bz=planet end end;if not bx then if bz.hasAtmosphere then by=math.floor(bz.radius+bz.noAtmosphericDensityAltitude+1000)else by=math.floor(bz.radius+bz.surfaceMaxAltitude+1000)end;bx=true end;local cP;local k5=false;local k6,k7=c5(by)local k8=k6 ..k7;if bw.VectorToTarget then cP=CustomTarget.position-bM end;local k9,ka=bc(bz):escapeAndOrbitalSpeed((bM-bz.center):len()-bz.radius)local kb=bS;if not bu then bT(0)bt=0;br="Aligning to orbital path - OrbitHeight: "..k8;local kc=false;local kd=false;if bw.VectorToTarget then cG(cP:normalize():project_on_plane(bL))k5=bH:dot(cP:project_on_plane(bG):normalize())>0.95 else cG(bJ)k5=jZ<0.5;if bK<150 then k5=true end end;U=0;bs=0;if bR<=bs+1 and bR>=bs-1 then kc=true else kc=false end;if kb<=bt+1 and kb>=bt-1 then kd=true else kd=false end;if kc and kd and k5 then bs=nil;bt=nil;bu=true end else if bw.VectorToTarget then cG(cP:normalize():project_on_plane(bL))elseif bK>150 then cG(bJ)end;U=0;if bw.VectorToTarget then local a8,_=ba.computeDistanceAndTime(bK,bp/3.6,m(),0,0,LastMaxBrake)if bA and cP:len()>15000+a8+aw then br="Orbiting to Target"elseif bA or cP:len()<15000+a8+aw then a2="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;R=true;aq=true;bw.VectorToTarget,bw.AutopilotAlign=false,false;cd()cS()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and aw>by*0.9 and aw<by*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=by*0.99 and orbit.apoapsis.altitude>=by*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bA then if bA then BrakeIsOn=false;bT(0)bA=true;bs=0;if not bw.VectorToTarget then a2="Orbit complete"cd()end else bE=bE+1;if bE>=2 then bA=true end end else br="Adjusting Orbit - OrbitHeight: "..k8;bv=true;bW(ka*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local ke=dJ;local kf=aw-by;local kg=d(kf)if dJ<10 and d(bR)<10 and kg<100 then ke=dJ*2 end;if ke<10 and d(bR)<10 and kg<100 then ke=ke*2 end;if ke<5 and d(bR)<5 and kg<100 then ke=ke*4 end;VSpdPID:inject(ke)bs=s(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(kf)bs=s(bs-s(OrbitAltPID:get(),-15,15),-90,90)end end else local kh=2.75;local ki=d(q(k9*kh))local kj=ki%50;if kj>0 then ki=ki-kj+50 end;BrakeIsOn=false;if aw<by*0.8 then br="Escaping planet gravity - OrbitHeight: "..k8;bs=utils.map(dJ,200,0,-15,80)elseif aw>=by*0.8 and aw<by*1.15 then br="Approaching orbital corridor - OrbitHeight: "..k8;ki=ki*0.75;bs=utils.map(dJ,100,-100,-15,65)elseif aw>=by*1.15 and aw<by*1.5 then br="Approaching orbital corridor - OrbitHeight: "..k8;ki=ki*0.75;if dJ<0 or bv then bs=utils.map(aw,by*1.5,by*1.01,-30,0)else bs=utils.map(aw,by*0.99,by*1.5,0,30)end elseif aw>by*1.5 then br="Reentering orbital corridor - OrbitHeight: "..k8;bs=-85;local kk=utils.map(dJ,-150,-400,1,0.55)ki=ki*kk end;bW(e(ki))end end;if bs~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local kl=bs-bR;OrbitPitchPID:inject(kl)local km=s(OrbitPitchPID:get(),-0.5,0.5)U=km end end;if Autopilot and av==0 and not ao then local kn,ko=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local kp=(CustomTarget.position-ac.center):normalize()local kq=kp:project_on_plane((ac.center-bM):normalize()):normalize()local kr=ac.center+kq*(ac.radius+AutopilotTargetOrbit)local ks=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))if(bM-kr):len()<(bM-ks):len()then kn=kr;AutopilotTargetCoords=kn else kn=CustomTarget.position+(CustomTarget.position-ac.center):normalize()*(AutopilotTargetOrbit-ac:getAltitude(CustomTarget.position))AutopilotTargetCoords=kn end;cl(ac,AutopilotTargetCoords)ko=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;ko=true;TargetSet=true;AutopilotRealigned=true;kn=CustomTarget.position+(bM-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local kp=(bM+bJ*100000-ac.center):normalize()local kq=kp:project_on_plane((ac.center-bM):normalize()):normalize()if kq:len()<1 then kp=(bM+bH*100000-ac.center):normalize()kq=kp:project_on_plane((ac.center-bM):normalize()):normalize()end;kn=ac.center+kq*(ac.radius+AutopilotTargetOrbit)AutopilotTargetCoords=kn;TargetSet=true;ko=true;AutopilotRealigned=true;cl(ac,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(kn)-bM):len()local f7,f8,f9=b9:getPlanetarySystem(0):castIntersections(bM,bJ:normalize(),function(fa)if fa.noAtmosphericDensityAltitude>0 then return fa.radius+fa.noAtmosphericDensityAltitude else return fa.radius+fa.surfaceMaxAltitude*1.5 end end)local fb=f8;if f9~=nil and f8~=nil then fb=math.min(f9,f8)end;if fb~=nil and fb<AutopilotDistance and f7.name==ac.name then AutopilotDistance=fb end;local k1=true;local kt=(ac.center-(bM+vec3(bJ):normalize()*AutopilotDistance)):len()-ac.radius;local f6,c9=c5(kt)v(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..f6 ..'", "unit":"'..c9 ..'"}')local a8,a9;if not TurnBurn then a8,a9=iS(bK)else a8,a9=iT(bK)end;if bK>300 and AutopilotAccelerating then local cP=vec3(kn)-bM;local ku=s(math.deg(jS(bG,bJ:normalize(),cP:normalize()))*bK/500,-90,90)local kv=s(math.deg(jS(bI,bJ:normalize(),cP:normalize()))*bK/500,-90,90)if d(ku)<20 and d(kv)<20 then ku=ku*2;kv=kv*2 end;if d(ku)<2 and d(kv)<2 then ku=ku*2;kv=kv*2 end;local jZ=-math.deg(jS(bG,bH,bJ:normalize()))local j_=-math.deg(jS(bI,bH,bJ:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(kv-j_)local kw=s(apPitchPID:get(),-1,1)U=U+kw;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(ku-jZ)local kx=s(apYawPID:get(),-1,1)V=V+kx;ko=true;if d(ku)>2 or d(kv)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if kt<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bc(ac):escapeAndOrbitalSpeed(kt)end end;if not AutopilotCruising and not AutopilotBraking and not ko then k1=cG((kn-bM):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then k1=cG(-vec3(bJ):normalize())end;if AutopilotAccelerating then if not P then BrakeIsOn=false;bT(AutopilotInterplanetaryThrottle)I=z(AutopilotInterplanetaryThrottle,2)P=true end;local iZ=unit.getThrottle()if AtmoSpeedAssist then iZ=I end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or iZ==0 and P then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bT(0)end;if AutopilotDistance<=a8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bT(0)P=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;Y=1 end;if TurnBurn then bT(1,true)end;local _,ka=bc(ac):escapeAndOrbitalSpeed((bM-planet.center):len()-planet.radius)local cP;if CustomTarget~=nil then cP=CustomTarget.position-bM end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bK<50 then a2="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bK<=ka and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bT(0)P=false;ProgradeIsOn=true;ao=true;cl(ac,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,ka=bc(ac):escapeAndOrbitalSpeed((bM-planet.center):len()-planet.radius)if bK<=ka then if CustomTarget~=nil then if bJ:normalize():dot(cP:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;cl(ac,CustomTarget.position)WaypointSet=true end else a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bT(0)P=false;ProgradeIsOn=true;ao=true;BrakeIsOn=false;cl(ac,CustomTarget.position)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a2="Autopilot completed, orbit established"Y=0;bT(0)P=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ao=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local iZ=unit.getThrottle()if AtmoSpeedAssist then iZ=I end;if iZ>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if k1 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ao then AutopilotTargetCoords=vec3(ac.center)+(AutopilotTargetOrbit+ac.radius)*bI;AutopilotShipUp=bG;AutopilotShipRight=bI end;AutopilotRealigned=true elseif k1 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not P then bT(AutopilotInterplanetaryThrottle,true)I=z(AutopilotInterplanetaryThrottle,2)P=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and av>0)then a2="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"Y=0;bT(0)P=false;ProgradeIsOn=true;ao=true;cl(ac,CustomTarget.position)end;if a0 then bg=true;local kv=0;local fK=bM+vec3(unit.getMasterPlayerRelativePosition())local ky=fK-bM;local kz=vec3(ky):project_on(bH):len()local kA=vec3(ky):project_on(bI):len()local ak=math.sqrt(kz*kz+kA*kA)cG(ky:normalize())local kB=40;local kC=ak<kB;local kD=100;local kE=s((ak-kB)/2,10,kD)U=0;local k1=d(V)<0.1;if k1 and bK<kE and not kC then BrakeIsOn=false;kv=-20 else BrakeIsOn=true;kv=0 end;local kF=0;if d(kv-bR)>kF then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(kv-bR)local kw=pitchPID:get()U=kw end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cz=unit.getClosestPlanetInfluence()>0;local kG=HoldAltitude-aw;local kH=500+bK;local kI=1;if AutoTakeoff then kI=s(bK/100,0.1,1)end;local kv=(utils.smoothstep(kG,-kH,kH)-0.5)*2*MaxPitch*kI;if not Reentry and not ao and not VectorToTarget and bH:dot(bJ:normalize())<0.99 then kv=(utils.smoothstep(kG,-kH*s(20-19*av*10,1,20),kH*s(20-19*av*10,1,20))-0.5)*2*MaxPitch*s(2-av*10,1,2)*kI end;if not AltitudeHold then kv=0 end;if LockPitch~=nil then if cz and not IntoOrbit then kv=LockPitch else LockPitch=nil end end;bg=true;local kJ=U;if Reentry then local kK=e(bp)local kL,kM=ba.computeDistanceAndTime(bK,kK/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local kN=aw-(planet.noAtmosphericDensityAltitude+5000)if not bQ and aw>planet.noAtmosphericDensityAltitude+5000 and bK<=kK/3.6 and bK>kK/3.6-10 and d(bJ:normalize():dot(bH))>0.9 then bT(0)elseif bQ and(kL>-1 and kN<=kL or aw<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bW(kK,true)if not R then kv=-80;if av>0.02 then a2="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;kv=0;bg=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and aw>planet.noAtmosphericDensityAltitude+5000 then bg=true elseif aw<=planet.noAtmosphericDensityAltitude+5000 then bW(kK)if not bQ and t:getTargetSpeed(axisCommandId.longitudinal)==bp then R=false;Reentry=false;bg=true end end end;if bK>Q and not ap and not VectorToTarget and not BrakeLanding and ForceAlignment then cG(vec3(bJ))end;if(VectorToTarget or ap)and AutopilotTargetIndex>0 and av>0.01 then local cP;if CustomTarget~=nil then cP=CustomTarget.position-bM else cP=ac.center-bM end;local ku=math.deg(jS(bL:normalize(),bJ,cP))*2;local kO=math.rad(d(bS))if bK>minRollVelocity and av>0.01 then local kP=s(90-kv*2,-90,90)bm=s(ku*2,-kP,kP)local kQ=ku;ku=s(s(ku,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(kO)+4*(bR-kv)*math.sin(math.rad(bS)),-YawStallAngle*0.80,YawStallAngle*0.80)kv=s(s(kv*math.cos(kO),-PitchStallAngle*0.80,PitchStallAngle*0.80)+d(s(d(kQ)*math.sin(kO),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bm=0;ku=s(ku,-YawStallAngle*0.80,YawStallAngle*0.80)end;local kR=jZ-ku;if not bk and bK>minRollVelocity and av>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(kR)local kx=s(yawPID:get(),-1,1)V=V+kx elseif au and ar>-1 or bK<minRollVelocity then cG(cP)elseif bk and av>0.01 then if(jZ<-YawStallAngle or jZ>YawStallAngle)and av>0.01 then cG(bJ)end;if(j_<-PitchStallAngle or j_>PitchStallAngle)and av>0.01 then kv=s(bR-j_,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not ap then local k2=planet:getAltitude(CustomTarget.position)local kN=math.sqrt(cP:len()^2-(aw-k2)^2)local kS=LastMaxBrakeInAtmo;if kS then kS=kS*s(bK/100,0.1,1)*av else kS=LastMaxBrake end;if av<0.01 then kS=LastMaxBrake end;local kT=bJ:len()-d(dJ)local kU=vec3(core.getWorldAirFrictionAcceleration())local kV=math.sqrt(kU:len()-kU:project_on(ck):len())*m()if bK>100 then a8,a9=ba.computeDistanceAndTime(bK,100,m(),0,0,kS+kV)local kW,kX=ba.computeDistanceAndTime(100,0,m(),0,0,kS/2)a8=a8+kW else a8,a9=ba.computeDistanceAndTime(bK,0,m(),0,0,kS/2)end;StrongBrakes=true;if not ap and not Reentry and kN<=a8+bK*jY/2 and(bJ:project_on_plane(bL):normalize():dot(cP:project_on_plane(bL):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bT(0)if AltitudeHold then ce()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kT<0.1 or kN<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<kN)then if not bO then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=kN end elseif VectorToTarget and av==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ap or Reentry)then if CustomTarget~=nil and ac.name==planet.name then local cP=CustomTarget.position-bM;local k2=planet:getAltitude(CustomTarget.position)local kN=math.sqrt(cP:len()^2-(aw-k2)^2)local kS=LastMaxBrakeInAtmo;if kS then a8,a9=ba.computeDistanceAndTime(bK,0,m(),0,0,kS/2)StrongBrakes=true;if kN<=a8+bK*jY/2 and bJ:project_on_plane(bL):normalize():dot(cP:project_on_plane(bL):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;R=true;ao=false;aq=true;Autopilot=false;cS()end end;LastDistanceToTarget=kN end end end;if av==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ap or IntoOrbit or Reentry)then if not bA and not IntoOrbit then by=HoldAltitude;bx=true;if VectorToTarget then bw.VectorToTarget=true end;cd()VectorToTarget=false;bu=true end end;if bk and av>0.01 and ar==-1 and bK>minRollVelocity and VectorStatus~="Finalizing Approach"then cG(bJ)kv=s(bR-j_,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end;U=kJ;local d1=-1;if BrakeLanding then kv=0;local kY=false;local kZ=30;if bb~=nil and bb>0 then local kV=0;local fL=s(av,0.4,2)local kS=LastMaxBrakeInAtmo*s(bK/100,0.1,1)*fL;local k_=bb*fL+kS+kV-fP;local l0=kS/2+kV-fP;local l1=bK-math.sqrt(d(l0/2)*20/(0.5*m()))*utils.sign(l0)if l1<0 then l1=0 end;local l2;if bK>100 then local l3,_=ba.computeDistanceAndTime(bK,100,m(),0,0,kS)local l4,_=ba.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kS))l2=l3+l4 else l2=ba.computeDistanceAndTime(bK,0,m(),0,0,math.sqrt(kS))end;if l2<20 then BrakeIsOn=false else local l5=0;if l1>100 then local l6,_=ba.computeDistanceAndTime(l1,100,m(),0,0,k_)local l7,_=ba.computeDistanceAndTime(100,0,m(),0,0,bb*fL+math.sqrt(kS)+kV-fP)l5=l6+l7 else l5,_=ba.computeDistanceAndTime(l1,0,m(),0,0,bb*fL+math.sqrt(kS)+kV-fP)end;l5=(l5+15+bK*jY)*1.1;local l8=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if l8 then local k2=planet:getAltitude(CustomTarget.position)local l9=aw-k2-100;local cP=CustomTarget.position-bM;local la=math.sqrt(cP:len()^2-(aw-k2)^2)if la>100 then l8=false elseif l9<=l5 or l5==-1 then BrakeIsOn=true;kY=true else BrakeIsOn=false;kY=true end end;if not l8 and CalculateBrakeLandingSpeed then if l5>=kZ then BrakeIsOn=true else BrakeIsOn=false end;kY=true end end end;if not bQ then bT(0)end;t:setTargetGroundAltitude(500)t:activateGroundEngineAltitudeStabilization(500)d1=ar;if d1>-1 then bg=autoRollPreference;if bK<1 or bJ:normalize():dot(bL)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)ag=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bJ:normalize():dot(-ck)<0.999 then BrakeIsOn=true elseif dJ<-brakeLandingRate and not kY then BrakeIsOn=true elseif not kY then BrakeIsOn=false end end;if AutoTakeoff or ap then local f7,f9,f8;if AutopilotTargetCoords~=nil then f7,f9,f8=b9:getPlanetarySystem(0):castIntersections(bM,(AutopilotTargetCoords-bM):normalize(),function(fa)return fa.radius+fa.noAtmosphericDensityAltitude end)end;if bO then if aw>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;bT(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif d(kv)<15 and aw/HoldAltitude>0.75 then AutoTakeoff=false;if not ap then if bQ and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif ap and bK<Q then Autopilot=true;ap=false;AltitudeHold=false;AutoTakeoff=false;bT(0)elseif ap then bT(0)BrakeIsOn=true end elseif ap and av==0 and ac~=nil and(f7==nil or f7.name==ac.name)then Autopilot=true;ap=false;AltitudeHold=false;AutoTakeoff=false;if not bQ then bT(0)end;AutopilotAccelerating=true end end;local lb=ar>-1;local lc=bR;if(VectorToTarget or ap)and not lb and bK>minRollVelocity and av>0.01 then local kO=math.rad(d(bS))lc=bR*d(math.cos(kO))+j_*math.sin(kO)end;local ld=s(kv-lc,-PitchStallAngle*0.80,PitchStallAngle*0.80)if av<0.01 and VectorToTarget then ld=s(kv-lc,-85,MaxPitch)elseif av<0.01 then ld=s(kv-lc,-MaxPitch,MaxPitch)end;if d(bS)<5 or VectorToTarget or BrakeLanding or lb or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(ld)local kw=pitchPID:get()U=U+kw end end;if antigrav~=nil and(antigrav and not ExternalAGG and aw<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()local function le(lf,kE)local lg=vec3()local lh=vec3()if lf==axisCommandId.longitudinal then lg=vec3(core.getConstructOrientationForward())lh=bH elseif lf==axisCommandId.vertical then lg=vec3(core.getConstructOrientationUp())lh=bG elseif lf==axisCommandId.lateral then lg=vec3(core.getConstructOrientationRight())lh=bI else return vec3()end;local li=vec3(core.getWorldGravity())local lj=li:dot(lh)local lk=vec3(core.getWorldAirFrictionAcceleration())local ll=lk:dot(lh)local lm=vec3(core.getVelocity())local ln=lm:dot(lg)local lo=kE*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lo-ln)local lp=targetSpeedPID2:get()local lq=(lp-ll-lj)*lh;return lq end;local function lr(lf,kE)local lg=vec3()local lh=vec3()if lf==axisCommandId.longitudinal then lg=vec3(core.getConstructOrientationForward())lh=bH elseif lf==axisCommandId.vertical then lg=vec3(core.getConstructOrientationUp())lh=bG elseif lf==axisCommandId.lateral then lg=vec3(core.getConstructOrientationRight())lh=bI else return vec3()end;local li=vec3(core.getWorldGravity())local lj=li:dot(lh)local lk=vec3(core.getWorldAirFrictionAcceleration())local ll=lk:dot(lh)local lm=vec3(core.getVelocity())local ln=lm:dot(lg)local lo=kE*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lo-ln)local lp=targetSpeedPID:get()local lq=(lp-ll-lj)*lh;return lq end;local function ls(lt,dM,c1)local lu=lt:cross(c1):normalize_inplace()local ey=math.acos(s(lu:dot(-dM),-1,1))*constants.rad2deg;if lu:cross(-dM):dot(c1)<0 then ey=-ey end;return ey end;if antigrav~=nil and(antigrav and not ExternalAGG)then if not bO and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bQ=t:getAxisCommandType(0)==axisCommandType.byThrottle;if bQ and M then bT(0)M=false elseif not bQ and not M then I=0;M=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lv=s(T+U+system.getControlDeviceForwardInput(),-1,1)local lw=s(W+Z+system.getControlDeviceYawInput(),-1,1)local lx=s(X+V-system.getControlDeviceLeftRightInput(),-1,1)local ly=Y;bL=vec3(core.getWorldVertical())if bL==nil or bL:len()==0 then bL=(planet.center-bM):normalize()end;bM=vec3(core.getConstructWorldPos())bG=vec3(core.getConstructWorldOrientationUp())bH=vec3(core.getConstructWorldOrientationForward())bI=vec3(core.getConstructWorldOrientationRight())bJ=vec3(core.getWorldVelocity())bK=vec3(bJ):len()bS=getRoll(bL,bH,bI)local lz=bS/180*math.pi;local lA=math.cos(lz)local lB=math.sin(lz)bR=ls(bL,bH,bI*lA+bG*lB)local lC=bJ:normalize()local lD=getRoll(bL,bH,bI)local lE=d(lD)local lF=utils.sign(lD)local lG=vec3(core.getWorldAngularVelocity())local lH=lv*pitchSpeedFactor*bI+lw*rollSpeedFactor*bH+lx*yawSpeedFactor*bG;if bL:len()>0.01 and(av>0.0 or ProgradeIsOn or Reentry or ao or AltitudeHold or IntoOrbit)then if bg==true and d(bm-lD)>autoRollRollThreshold and lw==0 and d(bR)<85 then local lI=bm;local lJ=autoRollFactor;if av==0 then lJ=lJ/4;bm=0;lI=0 end;if rollPID==nil then rollPID=pid.new(lJ*0.01,0,lJ*0.1)end;rollPID:inject(lI-lD)local lK=rollPID:get()lH=lH+lK*bH end end;if bL:len()>0.01 and av>0.0 then local lL=20.0;if turnAssist==true and lE>lL and lv==0 and lx==0 then local lM=turnAssistFactor*0.1;local lN=turnAssistFactor*0.025;local lO=(lE-lL)/(180-lL)*180;local lP=0;if lO<90 then lP=lO/90 elseif lO<180 then lP=(180-lO)/90 end;lP=lP*lP;local lQ=-lF*lN*(1.0-lP)local lR=lM*lP;lH=lH+lR*bI+lQ*bG end end;local lS=1;local lT=0;local lU=1;if system.getMouseWheel()>0 then if AltIsOn then if av>0 or Reentry then bp=s(bp+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if av>0 or Reentry then bp=s(bp-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=s(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else I=z(s(I-speedChangeLarge/100,-1,1),2)end end;J=0;local dJ=-bL:dot(bJ)if au and AtmoSpeedAssist and bQ then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bp/3.6-bJ:dot(bH))local lV=throttlePID:get()L=s(lV,-1,1)if L<I and av>0.005 then K=true;t:setThrottleCommand(axisCommandId.longitudinal,s(L,0.01,1))else K=false;t:setThrottleCommand(axisCommandId.longitudinal,I)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bJ:len()-bp/3.6)local lW=s(brakePID:get(),0,1)if av>0 and dJ<-80 or av>0.005 then J=lW end;if J>0 then if K and L==0.01 then t:setThrottleCommand(axisCommandId.longitudinal,0)end else L=s(L,0.01,1)end;local lX=''local lY=vec3()local lZ=le(axisCommandId.vertical,ag*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",lZ,lT)local l_='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l_=l_..ExtraLongitudeTags end;local m0=t:getAxisCommandType(axisCommandId.longitudinal)local m1=t:composeAxisAccelerationFromThrottle(l_,axisCommandId.longitudinal)local m2=lr(axisCommandId.lateral,LeftAmount*1000)lX=lX..' , '.."lateral airfoil , lateral ground "lY=lY+m2;if lY:len()>constants.epsilon then a:setEngineForceCommand(lX,lY,lT,'','','',lU)end;a:setEngineForceCommand(l_,m1,lS)local m3='thrust analog vertical fueled 'local m4='thrust analog lateral fueled 'if ExtraLateralTags~="none"then m4=m4 ..ExtraLateralTags end;if ExtraVerticalTags~="none"then m3=m3 ..ExtraVerticalTags end;if ag~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m3,lZ,lS)else a:setEngineForceCommand(m3,vec3(),lS)end;if LeftAmount~=0 then a:setEngineForceCommand(m4,m2,lS)else a:setEngineForceCommand(m4,vec3(),lS)end;if ly==0 then ly=J end;local m5=-ly*(brakeSpeedFactor*bJ+brakeFlatFactor*lC)a:setEngineForceCommand('brake',m5)else if AtmoSpeedAssist then t:setThrottleCommand(axisCommandId.longitudinal,I)end;local kE=unit.getAxisCommandValue(0)if not bQ then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bJ:len()-kE/3.6)local lW=s(brakePID:get(),0,1)ly=s(ly+lW,0,1)end;local m5=-ly*(brakeSpeedFactor*bJ+brakeFlatFactor*lC)a:setEngineForceCommand('brake',m5)local lX=''local lY=vec3()local m6=false;local l_='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l_=l_..ExtraLongitudeTags end;local m0=t:getAxisCommandType(axisCommandId.longitudinal)if m0==axisCommandType.byThrottle then local m1=t:composeAxisAccelerationFromThrottle(l_,axisCommandId.longitudinal)a:setEngineForceCommand(l_,m1,lS)elseif m0==axisCommandType.byTargetSpeed then local m1=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)lX=lX..' , '..l_;lY=lY+m1;if t:getTargetSpeed(axisCommandId.longitudinal)==0 or t:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-t:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then m6=true end end;local m4='thrust analog lateral 'if ExtraLateralTags~="none"then m4=m4 ..ExtraLateralTags end;local m7=t:getAxisCommandType(axisCommandId.lateral)if m7==axisCommandType.byThrottle then local m8=t:composeAxisAccelerationFromThrottle(m4,axisCommandId.lateral)a:setEngineForceCommand(m4,m8,lS)elseif m7==axisCommandType.byTargetSpeed then local m2=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)lX=lX..' , '..m4;lY=lY+m2 end;local m3='thrust analog vertical 'if ExtraVerticalTags~="none"then m3=m3 ..ExtraVerticalTags end;local m9=t:getAxisCommandType(axisCommandId.vertical)if m9==axisCommandType.byThrottle then local lZ=t:composeAxisAccelerationFromThrottle(m3,axisCommandId.vertical)if ag~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(m3,lZ,lS,'airfoil','ground','',lU)else a:setEngineForceCommand(m3,vec3(),lS)a:setEngineForceCommand('airfoil vertical',lZ,lS,'airfoil','','',lU)a:setEngineForceCommand('ground vertical',lZ,lS,'ground','','',lU)end elseif m9==axisCommandType.byTargetSpeed then if ag<0 then a:setEngineForceCommand('hover',vec3(),lS)end;local ma=t:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)lX=lX..' , '..m3;lY=lY+ma end;if lY:len()>constants.epsilon then if Y~=0 or m6 or d(lC:dot(bH))<0.8 then lX=lX..', brake'end;a:setEngineForceCommand(lX,lY,lT,'','','',lU)end end;local mb=torqueFactor*(lH-lG)local mc=vec3(core.getWorldAirFrictionAngularAcceleration())mb=mb-mc;a:setEngineTorqueCommand('torque',mb,lS,'airfoil','','',lU)a:setBoosterCommand('rocket_engine')if a7 and not VanillaRockets then local e5=vec3(core.getVelocity()):len()local md=0.15;if not bQ then local me=t:getTargetSpeed(axisCommandId.longitudinal)if e5*3.6>me*(1-md)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e5*3.6<me*(1-md)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local iZ=unit.getThrottle()if AtmoSpeedAssist then iZ=I*100 end;local kE=iZ/100;if k==0 then kE=kE*MaxGameVelocity;if e5>=kE*(1-md)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e5<kE*(1-md)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local kK=e(bp)kE=kE*kK/3.6;if e5>=kE*(1-md)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif e5<kE*(1-md)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,c8=coroutine.resume(beginSetup)if c8 then SetupComplete=true end else a:update()if not be and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(mf)local C=1;local function mg(mh)if mh then C=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a4;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then by=by+C*a3;if by<planet.noAtmosphericDensityAltitude then by=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a3 end else t:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function mi(mh)if mh then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+C*speedChangeLarge/100,-1,1)else t:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if mh then C=1 else C=nil end;cj(C)end end;if mf=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;bT(0)if(vBooster or hover)and ar==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bg=true;GearExtended=false else BrakeIsOn=true;a.control.extendLandingGears()t:setTargetGroundAltitude(LandingGearGroundHeight)end;if S and not BrakeLanding then a.control.extendLandingGears()end else if S then a.control.retractLandingGears()end;t:setTargetGroundAltitude(TargetHoverHeight)end elseif mf=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mf=="forward"then T=T-1 elseif mf=="backward"then T=T+1 elseif mf=="left"then W=W-1 elseif mf=="right"then W=W+1 elseif mf=="yawright"then X=X-1 elseif mf=="yawleft"then X=X+1 elseif mf=="straferight"then t:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mf=="strafeleft"then t:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mf=="up"then ag=ag+1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mf=="down"then ag=ag-1;t:deactivateGroundEngineAltitudeStabilization()t:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mf=="groundaltitudeup"then mg()elseif mf=="groundaltitudedown"then mg(true)elseif mf=="option1"then cj()toggleView=false elseif mf=="option2"then cj(1)toggleView=false elseif mf=="option3"then local function mj()aH=not aH;if not aH then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then u(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then u(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then u(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mj()toggleView=false elseif mf=="option4"then cx()toggleView=false elseif mf=="option5"then local function mk()if LockPitch==nil then LockPitch=bR;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mk()toggleView=false elseif mf=="option6"then ce()toggleView=false elseif mf=="option7"then toggleView=false elseif mf=="option8"then cf()toggleView=false elseif mf=="option9"then if gyro~=nil then gyro.toggle()az=gyro.getState()==1 end;toggleView=false elseif mf=="lshift"then if y()==1 then a1=true;PrevViewLock=y()x(1)elseif n()==1 and ShiftShowsRemoteButtons then a1=true;bf=false;be=false end elseif mf=="brake"then if BrakeToggleStatus then cF()elseif not BrakeIsOn then cF()else BrakeIsOn=true end elseif mf=="lalt"then AltIsOn=true;if n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(1)end elseif mf=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a7 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a7=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a7=false end elseif mf=="stopengines"then local function ml()if as then as=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;a0=false;P=false;ao=false;ap=false;R=false;bg=autoRollPreference;VectorToTarget=false;TurnBurn=false;az=false;LockPitch=nil;IntoOrbit=false else as=true end end;t:resetCommand(axisCommandId.longitudinal)ml()I=0 elseif mf=="speedup"then mi()elseif mf=="speeddown"then mi(true)elseif mf=="antigravity"and not ExternalAGG then if antigrav~=nil then cV()end end end;function script.onActionStop(mf)local function mm()if not ExternalAGG and bO then a6=a4 end;if AltitudeHold or VertTakeOff or IntoOrbit then a5=a3 end end;if mf=="forward"then T=0 elseif mf=="backward"then T=0 elseif mf=="left"then W=0 elseif mf=="right"then W=0 elseif mf=="yawright"then X=0 elseif mf=="yawleft"then X=0 elseif mf=="straferight"then t:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mf=="strafeleft"then t:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mf=="up"then ag=0;t:updateCommandFromActionStop(axisCommandId.vertical,-1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mf=="down"then ag=0;t:updateCommandFromActionStop(axisCommandId.vertical,1.0)t:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mf=="groundaltitudeup"then mm()toggleView=false elseif mf=="groundaltitudedown"then mm()toggleView=false elseif mf=="lshift"then if y()==1 then a1=false;ah=0;ai=0;x(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then a1=false;bf=false;be=false end elseif mf=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cF()else BrakeIsOn=false end end elseif mf=="lalt"then if n()==0 and freeLookToggle then if toggleView then if y()==1 then x(0)else x(1)end else toggleView=true end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then x(0)end;AltIsOn=false end end;function script.onActionLoop(mf)local C=1;local function mn(mh)if mh then C=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*a6;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a6=a6*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then by=by+C*a5;if by<planet.noAtmosphericDensityAltitude then by=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*a5 end;a5=a5*1.05 else t:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function mo(mh)if mh then C=-1 end;if not a1 then if AtmoSpeedAssist and not AltIsOn then I=s(I+C*speedChangeSmall/100,-1,1)else t:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if mf=="groundaltitudeup"then mn()elseif mf=="groundaltitudedown"then mn(true)elseif mf=="speedup"then mo()elseif mf=="speeddown"then mo(true)end end;function script.onInputText(cT)local function mp()for bY,bZ in pairs(b)do dbHud_1.setStringValue(bZ,h(nil))end;for bY,bZ in pairs(c)do if bZ~="SavedLocations"then dbHud_1.setStringValue(bZ,h(nil))end end;a2="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"aj=5;aL=false;af=true end;local function mq(mr,planet,fK)local function ms(fK)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gg='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gt,gu,ct,cu,cs=p(fK,gg)if gt=="0"and gu=="0"then return vec3(tonumber(ct),tonumber(cu),tonumber(cs))end;cu=math.rad(cu)ct=math.rad(ct)local planet=b3[tonumber(gt)][tonumber(gu)]local he=math.cos(ct)local mt=vec3(he*math.cos(cu),he*math.sin(cu),math.sin(ct))return planet.center+(planet.radius+cs)*mt end;if dbHud_1 then local cD={}local position=ms(fK)if planet.name=="Space"then cD={position=position,name=mr,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cD={position=position,name=mr,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cD;table.insert(b3[0],cD)bX()else a2="Databank must be installed to save locations"end end;local i;local mu="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local mv,mw=nil,nil;local mx="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank\n/wipedatabank - wipes the databank of all hud variables but not save variables"i=string.find(cT," ")mv=cT;if i~=nil then mv=string.sub(cT,0,i-1)mw=string.sub(cT,i+1)end;if mv=="/help"or mv=="/commands"then for fV in string.gmatch(mx,"([^\n]+)")do system.print(fV)end;return elseif mv=="/setname"then if mw==nil or mw==""then a2="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cA(mw)else a2="Select a saved target to rename first"end elseif mv=="/addlocation"then if mw==nil or mw==""or string.find(mw,"::")==nil then a2="Usage: ah-addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(mw,"::")local mr=string.sub(mw,1,i-2)local fK=string.sub(mw,i)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local gg='::pos{'..A..','..A..','..A..','..A..','..A..'}'local gt,gu,ct,cu,cs=p(fK,gg)local planet=b3[tonumber(gt)][tonumber(gu)]mq(mr,planet,fK)a2="Added "..mr.." to saved locations,\nplanet "..planet.name.." at "..fK;aj=5 elseif mv=="/agg"then if mw==nil or mw==""then a2="Usage: ah-agg targetheight"return end;mw=tonumber(mw)if mw<1000 then mw=1000 end;AntigravTargetAltitude=mw;a2="AGG Target Height set to "..mw elseif mv=="/G"then if mw==nil or mw==""then a2="Usage: ah-G VariableName variablevalue\nah-G dump - shows all variables"return end;if mw=="dump"then for bY,bZ in pairs(b)do if type(_G[bZ])=="boolean"then if _G[bZ]==true then system.print(bZ.." true")else system.print(bZ.." false")end elseif _G[bZ]==nil then system.print(bZ.." nil")else system.print(bZ.." ".._G[bZ])end end;return end;i=string.find(mw," ")local my=string.sub(mw,0,i-1)local mz=string.sub(mw,i+1)for bY,bZ in pairs(b)do if bZ==my then a2="Variable "..my.." changed to "..mz;local mA=type(_G[bZ])if mA=="number"then mz=tonumber(mz)elseif mA=="boolean"then if string.lower(mz)=="true"then mz=true else mz=false end end;_G[bZ]=mz;return end end;a2="No such global variable: "..my elseif mv=="/copydatabank"then if dbHud_2 then d2(true)else a2="Spare Databank required to copy databank"end elseif mv=="/wipedatabank"then if dbHud_1 then mp()else a2="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
