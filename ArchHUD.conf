name: ArchHud - Archaegeo v1.007 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.007;freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=math.floor;local d=string.format;local e=json.decode;local f=json.encode;local g=core.getElementMaxHitPointsById;local h=unit.getAtmosphereDensity;local j=core.getElementHitPointsById;local k=core.getElementMassById;local l=core.getElementNameById;local m=core.getConstructMass;local n=Nav.control.isRemoteControlled;local o=math.atan;local p=string.match;local tostring=tostring;local q=utils.round;local r=system.getTime;local function s(t,u)local v=10^(u or 0)return c(t*v+0.5)/v end;local w=SafeR;local x=SafeB;local y=SafeG;local z=false;local A=0;local B=0;local C=0;local D=false;local E=0;local F=false;local G=s(ResolutionX/2,0)local H=s(ResolutionY/2,0)local I=false;local J=55;local K=false;local L=1;local M=1;local N=false;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=false;local W=false;local X="empty"local Y=5;local Z=5;local a0=false;local a1,a2=0;local a3,a4=0;local a5=nil;local a6=0;local a7=0;local a8=false;local a9=0;local aa=0;local ab=0;local ac=3;local ad=0;local ae=""local af=""local ag=0;local ah=false;local ai=false;local aj=false;local ak=-1;local al=false;local am=""local an=h()>0;local ao=h()local ap=core.getAltitude()local aq=core.getElementIdList()local ar=r()local as=nil;local at=false;local au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]local av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=c(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getWorldVelocity())local bg=vec3(bf):len()local bh=LandingGearGroundHeight;local bi=system.getMouseDeltaX()local bj=system.getMouseDeltaY()local bk=false;local bl=r()local bm=0;local bn=0;local bo=0;local bp=AtmoSpeedLimit;local bq=0;local br=nil;local bs=0;local bt=0;local bu=false;local bv=false;local bw={VectorToTarget=false}local bx=false;local by=0;local bz=nil;local bA=false;local bB=false;local bC=false;local bD=false;local bE=0;local bF=r()function processVariableList(bG)local bH=dbHud_1.hasKey;for bI,bJ in pairs(bG)do if bH(bJ)then local bK=e(dbHud_1.getStringValue(bJ))if bK~=nil then _G[bJ]=bK;aK=true end end end end;function LoadVariables()if dbHud_1 then local bH=dbHud_1.hasKey;processVariableList(a)coroutine.yield()processVariableList(b)if aK then X="Loaded Saved Variables (see Lua Chat Tab for list)"G=s(ResolutionX/2,0)H=s(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference;bp=AtmoSpeedLimit;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]else X="No Saved Variables Found - Stand up / leave remote to save settings"end else X="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bF then LastMaxBrakeInAtmo=0 end;LastStartTime=bF;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then X="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ac=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;function CalculateFuelVolume(bL,bM)if bL>bM then bM=bL end;if ContainerOptimization>0 then bM=bM-bM*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bM=bM-bM*FuelTankOptimization*0.05 end;return bM end;function ProcessElements()local bN=fuelX~=0 and fuelY~=0;for bI in pairs(aq)do local type=core.getElementTypeById(aq[bI])if p(type,'^.*Space Engine$')then bD=true;if p(tostring(core.getElementTagsById(aq[bI])),'^.*vertical.*$')then local bO=core.getElementRotationById(aq[bI])if bO[4]<0 then if q(-bO[4],0.1)==0.5 then bB=true end else if q(bO[4],0.1)==0.5 then bC=true end end end end;if type=="Landing Gear"then N=true end;if type=="Dynamic Core Unit"then local bP=g(aq[bI])if bP>10000 then b0=128 elseif bP>1000 then b0=64 elseif bP>150 then b0=32 end end;aR=aR+g(aq[bI])if bN and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bP=g(aq[bI])local bQ=k(aq[bI])local bL=0;local bR=r()if type=="Atmospheric Fuel Tank"then local bM=400;local bS=35.03;if bP>10000 then bM=51200;bS=5480 elseif bP>1300 then bM=6400;bS=988.67 elseif bP>150 then bM=1600;bS=182.67 end;bL=bQ-bS;if fuelTankHandlingAtmo>0 then bM=bM+bM*fuelTankHandlingAtmo*0.2 end;bM=CalculateFuelVolume(bL,bM)aO[#aO+1]={aq[bI],l(aq[bI]),bM,bS,bL,bR}end;if type=="Rocket Fuel Tank"then local bM=320;local bS=173.42;if bP>65000 then bM=40000;bS=25740 elseif bP>6000 then bM=5120;bS=4720 elseif bP>700 then bM=640;bS=886.72 end;bL=bQ-bS;if fuelTankHandlingRocket>0 then bM=bM+bM*fuelTankHandlingRocket*0.1 end;bM=CalculateFuelVolume(bL,bM)aQ[#aQ+1]={aq[bI],l(aq[bI]),bM,bS,bL,bR}end;if type=="Space Fuel Tank"then local bM=2400;local bS=182.67;if bP>10000 then bM=76800;bS=5480 elseif bP>1300 then bM=9600;bS=988.67 end;bL=bQ-bS;if fuelTankHandlingSpace>0 then bM=bM+bM*fuelTankHandlingSpace*0.2 end;bM=CalculateFuelVolume(bL,bM)aP[#aP+1]={aq[bI],l(aq[bI]),bM,bS,bL,bR}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(an or not an and ap<10000)then for _,bJ in pairs(door)do bJ.toggle()end end;if switch then for _,bJ in pairs(switch)do bJ.toggle()end end;if forcefield and(an or not an==0 and ap<10000)then for _,bJ in pairs(forcefield)do bJ.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if n()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if N then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bT=AboveGroundLevel()if bT~=-1 or not an and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not N then GearExtended=true end else BrakeIsOn=false end;if bh~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bh)if bh==0 and not N then GearExtended=true;BrakeIsOn=true end else bh=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if an and bT~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=an end;local function bU(bV,bW)if bW==nil then bW=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not bW then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,bV)B=s(bV*100,0)end;local function bX(bV,bW)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not bW then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,bV)end;local function bY(bJ)if ResolutionX==1920 then return bJ else return s(ResolutionX*bJ/1920,0)end end;local function bZ(bJ)if ResolutionY==1080 then return bJ else return s(ResolutionY*bJ/1080,0)end end;local function b_(c0,c1)if c0==nil then c0=core.g()end;c0=s(c0,5)if c1~=nil and c1 or(aN==nil or aN~=c0)then local bf=core.getVelocity()local c2=vec3(bf):len()local c3=e(unit.getData()).maxBrake;if c3~=nil and c3>0 and an then c3=c3/utils.clamp(c2/100,0.1,1)c3=c3/ao;if ao>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c3)/2 else LastMaxBrakeInAtmo=c3 end end end;if c3~=nil and c3>0 then LastMaxBrake=c3 end;aN=c0 end end;local function c4(c5,c6,c7,c8,c9,ca,cb,cc,cd)local ce={enableName=c5,disableName=c6,width=c7,height=c8,x=c9,y=ca,toggleVar=cb,toggleFunction=cc,drawCondition=cd,hovered=false}table.insert(aB,ce)return ce end;local function cf()AtlasOrdered={}for bI,bJ in pairs(b2[0])do table.insert(AtlasOrdered,{name=bJ.name,index=bI})end;local function cg(ch,ci)return ch.name<ci.name end;table.sort(AtlasOrdered,cg)end;local function cj()for bI,bJ in pairs(SavedLocations)do table.insert(b2[0],bJ)end;cf()end;local function ck(cl,cm)if cl==0 then return math.abs(cm)<1e-09 end;if cm==0 then return math.abs(cl)<1e-09 end;return math.abs(cl-cm)<math.max(math.abs(cl),math.abs(cm))*epsilon end;local function cn(co,cp)local cq=vec3(cp)if co.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=co.planetarySystemId},MapPosition)end;local cr=cq-co.center;local ad=cr:len()local cs=ad-co.radius;local ct=0;local cu=0;if not ck(ad,0)then local cv=math.atan(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ad)end;return setmetatable({latitude=math.deg(ct),longitude=math.deg(cu),altitude=cs,bodyId=co.bodyId,systemId=co.planetarySystemId},MapPosition)end;local function cw(cx)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cy='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cz,cA,ct,cu,cs=p(cx,cy)if cz=="0"and cA=="0"then return vec3(tonumber(ct),tonumber(cu),tonumber(cs))end;cu=math.rad(cu)ct=math.rad(ct)local planet=b2[tonumber(cz)][tonumber(cA)]local cB=math.cos(ct)local cC=vec3(cB*math.cos(cu),cB*math.sin(cu),math.sin(ct))return planet.center+(planet.radius+cs)*cC end;local function cD(cE,planet,cx)if dbHud_1 then local cF={}local position=cw(cx)if planet.name=="Space"then cF={position=position,name=cE,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cG=false;if planet.hasAtmosphere then cG=true else cG=false end;cF={position=position,name=cE,atmosphere=cG,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cF;table.insert(b2[0],cF)cf()else X="Databank must be installed to save locations"end end;local function cH(ad,cI)local cJ=ad>100000;local bK,cK=""if cI==nil then cI=1 end;if cJ then bK,cK=s(ad/1000/200,cI),"SU"elseif ad<1000 then bK,cK=s(ad,cI),"M"else bK,cK=s(ad/1000,cI),"KM"end;return bK,cK end;local function cL(cM)for bI,bJ in pairs(cM)do if bJ.name and bJ.name==CustomTarget.name then return bI end end;return-1 end;local function cN()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cO=planet.name..". "..#SavedLocations;if radar_1 then local cP,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cP~=nil and cP~=""then cO=cO.." "..radar_1.getConstructName(cP)end end;local cF={}local cG=false;if planet.hasAtmosphere then cG=true end;cF={position=position,name=cO,atmosphere=cG,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cF;table.insert(b2[0],cF)cf()X="Location saved as "..cO else X="Databank must be installed to save locations"end end;local function cQ(cR)cR[#cR+1]=d([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;local function cS()if radarPanelID~=nil and ag==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ag==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ag=0 end end;local function cT()aA=not aA;if not aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end end end;local function cU()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not an then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function cV()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;local function cW(cX,cY,c9,ca,c7,c8)if cX>c9 and cX<c9+c7 and cY>ca and cY<ca+c8 then return true else return false end end;local function cZ()TurnBurn=not TurnBurn end;local function c_()local d0=-1;local d1=-1;if vBooster then d0=vBooster.distance()end;if hover then d1=hover.distance()end;if d0~=-1 and d1~=-1 then if d0<d1 then return d0 else return d1 end elseif d0~=-1 then return d0 elseif d1~=-1 then return d1 else return-1 end end;local function d2()if bF-bn<1.5 then if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bn=-1;if AltitudeHold then return end end else bn=bF end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;V=false;be=true;LockPitch=nil;bA=false;if c_()==-1 then AutoTakeoff=false;if bn>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ap end end;if not an then bA=false;bx=true;IntoOrbit=true;if not ai and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bn>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ai then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;be=autoRollPreference;AutoTakeoff=false;VectorToTarget=false end end;local function d3(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then d2()end end;VectorStatus="Proceeding to Waypoint"end;local function d4()BrakeLanding=not BrakeLanding;if BrakeLanding then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end end;local function d5()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then d2()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then d2()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;bA=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;local function ToggleIntoOrbit()bu=false;bs=nil;bt=nil;bE=0;if IntoOrbit then if bA then CancelIntoOrbit=false else CancelIntoOrbit=true end;bA=false;IntoOrbit=false;bz=nil elseif unit.getClosestPlanetInfluence()>0 and ao==0 then IntoOrbit=true;bA=false;CancelIntoOrbit=false;if bz==nil then bz=planet end else X="Unable to engage orbiting, not near planet or in atmosphere"end end;local function d6()local d7=vec3(core.getConstructWorldOrientationForward())local d8=vec3(core.getConstructWorldOrientationRight())local d9=vec3(core.getConstructWorldOrientationUp())local da=vec3(core.getWorldVertical())return d7,d8,d9,da end;local function db()if LockPitch==nil then local d7,d8,_,da=d6()local dc=getPitch(da,d7,d8)LockPitch=dc;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;local function dd()if n()==1 then V=not V;if V then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else X="Follow Mode only works with Remote controller"V=false end end;local function de()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a5=nil;CustomTarget=nil;return true end;local df=AtlasOrdered[AutopilotTargetIndex].index;local dg=b2[0][df]if dg.center then AutopilotTargetName=dg.name;a5=b8[0][df]if CustomTarget~=nil then if ao==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=dg;for _,bJ in pairs(b8[0])do if bJ.name==CustomTarget.planetname then a5=bJ;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a5.center)else AutopilotTargetCoords=CustomTarget.position end;if a5.planetname~="Space"then if a5.hasAtmosphere then AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a5.radius*(TargetOrbitRadius-1)+a5.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function dh(di)if not Autopilot and not VectorToTarget and not ai then if di==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then de()else local df=AtlasOrdered[AutopilotTargetIndex].index;local dg=b2[0][df]if dg.name=="Space"then if di==nil then dh()else dh(1)end else de()end end else X="Disengage autopilot before changing Interplanetary Helper"end end;local function dj()if bF-bo<1.5 and ao>0 then if not bD then X="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ao>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bo=-1;if Autopilot or VectorToTarget then return end end else bo=bF end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ai then de()local dk=cn(a5,AutopilotTargetCoords)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ao~=0 then ai=true;d2()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ao>0 then bA=false;if not VectorToTarget then d3(SpaceTarget)end else if ap>100000 or ap==0 then bA=false;Autopilot=true else ah=true;ProgradeIsOn=true;if AltitudeHold then d2()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ao~=0 then ai=true;d2()else Autopilot=true end end elseif ao==0 then local dl=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a5.name==planet.name and dl)then bA=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;V=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;I=false;LockPitch=nil;WaypointSet=false end else ai=true;d2()end else ai=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;I=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false;Reentry=false end end;local function dm(dn)local dp=-1;local cF;dp=cL(SavedLocations)if dp~=-1 then local dq;if dn~=nil then cF={position=SavedLocations[dp].position,name=dn,atmosphere=SavedLocations[dp].atmosphere,planetname=SavedLocations[dp].planetname,gravity=SavedLocations[dp].gravity}else cF={position=vec3(core.getConstructWorldPos()),name=SavedLocations[dp].name,atmosphere=ao,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[dp]=cF;dp=-1;dp=cL(b2[0])if dp>-1 then b2[0][dp]=cF end;cf()X=CustomTarget.name.." position updated"AutopilotTargetIndex=0;de()else X="Name Not Found"end end;local function dr()local dp=-1;dp=cL(b2[0])if dp>-1 then table.remove(b2[0],dp)end;dp=-1;dp=cL(SavedLocations)if dp~=-1 then X=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,dp)end;dh()cf()end;local function getPitch(ds,dt,ci)local du=ds:cross(ci):normalize_inplace()local dc=math.acos(utils.clamp(du:dot(-dt),-1,1))*constants.rad2deg;if du:cross(-dt):dot(ci)<0 then dc=-dc end;return dc end;local function dv(dw,dx,dy)dx=dx:project_on_plane(dw)dy=dy:project_on_plane(dw)return o(dx:cross(dy):dot(dw),dx:dot(dy))end;local function c_()local d0=-1;local d1=-1;if vBooster then d0=vBooster.distance()end;if hover then d1=hover.distance()end;if d0~=-1 and d1~=-1 then if d0<d1 then return d0 else return d1 end elseif d0~=-1 then return d0 elseif d1~=-1 then return d1 else return-1 end end;local function dz(dA)local dB=500000;local dC,dD,dE=math.huge;local dF=false;local dG=vec3({13771471,7435803,-128971})local dH=18000000;dC=vec3(dA):dist(dG)if dC<dH then return true,math.abs(dC-dH),"Safe Zone",0 end;dD=vec3(dA):dist(vec3(planet.center))if dD<dB then dF=true end;if math.abs(dD-dB)<math.abs(dC-dH)then return dF,math.abs(dD-dB),planet.name,planet.bodyId else return dF,math.abs(dC-dH),"Safe Zone",0 end end;local function dI()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;be=autoRollPreference;ah=false;aj=false;a9=0 end end;local function dJ(dK,dL)dK=vec3(dK)dL=vec3(dL):normalize()local bK=dK*dL;return bK.x+bK.y+bK.z end;local function dM(dK,dN,dO)if not an or not bk or ak~=-1 or bg<J then local dP=dO;if dP==nil then dP=DampingMultiplier end;if dN==nil then dN=aD end;dK=vec3(dK):normalize()local dQ=vec3()-dK;local dR=-dJ(dQ,core.getConstructWorldOrientationRight())*aC;local dS=-dJ(dQ,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dR/2 end;if ay==0 then ay=dS/2 end;if math.abs(dR)<0.1 then Q=Q-dR*2 else Q=Q-(dR+(dR-ax)*dP)end;if math.abs(dS)<0.1 then P=P+dS*2 else P=P+dS+(dS-ay)*dP end;ax=dR;ay=dS;if math.abs(dR)<dN and math.abs(dS)<dN then return true end;return false elseif bk and ak==-1 then dK=vec3(core.getWorldVelocity())local dP=dO;if dP==nil then dP=DampingMultiplier end;if dN==nil then dN=aD end;dK=vec3(dK):normalize()local dQ=vec3(core.getConstructWorldOrientationForward())-dK;local dR=-dJ(dQ,core.getConstructWorldOrientationRight())*aC;local dS=-dJ(dQ,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dR/2 end;if ay==0 then ay=dS/2 end;if math.abs(dR)<0.1 then Q=Q-dR*5 else Q=Q-(dR+(dR-ax)*dP)end;if math.abs(dS)<0.1 then P=P+dS*5 else P=P+dS+(dS-ay)*dP end;ax=dR;ay=dS;if math.abs(dR)<dN and math.abs(dS)<dN then return true end;return false end end;local function dT()if Reentry then X="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then X="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ac=5 elseif not K then StrongBrakes=planet.gravity*9.80665*m()<LastMaxBrakeInAtmo;if not StrongBrakes then X="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;X="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dU,dV=cH(HoldAltitude)X="Beginning Re-entry.  Target speed: "..bp.." Target Altitude: "..dU..dV;bX(math.floor(bp))end;AutoTakeoff=false end;local function dW(c2)if not an then b_()return b9.computeDistanceAndTime(c2,AutopilotEndSpeed,m(),0,0,LastMaxBrake-AutopilotPlanetGravity*m())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(c2,AutopilotEndSpeed,m(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*m())else return 0,0 end end end;local function dX(c2)b_()return b9.computeDistanceAndTime(c2,AutopilotEndSpeed,m(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*m())end;function gradeToggle(dY)if dY==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;V=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function ProgradeToggle()gradeToggle(1)end;function CheckDamage(cR)local dZ=0;az=""local d_=aR;local e0=0;local e1=0;local e2=0;local e3=0;local e4=""for bI in pairs(aq)do local bP=0;local e5=0;e5=g(aq[bI])bP=j(aq[bI])e0=e0+bP;if bP<e5 then if bP==0 then e2=e2+1 else e1=e1+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bI]))local c9=position.x-b0;local ca=position.y-b0;local e6=position.z-b0;table.insert(aw,core.spawnArrowSticker(c9,ca,e6+1,"down"))table.insert(aw,core.spawnArrowSticker(c9,ca,e6+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(c9+1,ca,e6,"north"))table.insert(aw,core.spawnArrowSticker(c9+1,ca,e6,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(c9-1,ca,e6,"south"))table.insert(aw,core.spawnArrowSticker(c9-1,ca,e6,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(c9,ca-1,e6,"east"))table.insert(aw,core.spawnArrowSticker(c9,ca-1,e6,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(c9,ca+1,e6,"west"))table.insert(aw,core.spawnArrowSticker(c9,ca+1,e6,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bI])end elseif aS and#aw>0 and aw[11]==aq[bI]then for e7 in pairs(aw)do core.deleteSticker(aw[e7])end;aw={}end end;dZ=c(e0/d_*100)if dZ<100 then cR[#cR+1]=[[<g class="pbright txt">]]e3=c(dZ*2.55)e4=d("rgb(%d,%d,%d)",255-e3,e3,0)if dZ<100 then cR[#cR+1]=d([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],e4,dZ)if e2>0 then cR[#cR+1]=d([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],e4,e2,e1)elseif e1>0 then cR[#cR+1]=d([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],e4,e1)end end;cR[#cR+1]=[[<\g>]]end end;function DrawCursorLine(cR)local e8=c(utils.clamp(ad/(aE/4)*255,0,255))cR[#cR+1]=d("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",aa,ab,c(w+0.5)+e8,c(y+0.5)-e8,c(x+0.5)-e8)end;function clearAll()if al then al=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;V=false;I=false;ah=false;ai=false;K=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil;IntoOrbit=false else al=true end end;function wipeSaveVariables()for bI,bJ in pairs(a)do dbHud_1.setStringValue(bJ,f(nil))end;for bI,bJ in pairs(b)do if bJ~="SavedLocations"then dbHud_1.setStringValue(bJ,f(nil))end end;X="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"ac=5;aK=false;a8=true end;function CheckButtons()for _,bJ in pairs(aB)do if bJ.hovered then if not bJ.drawCondition or bJ.drawCondition()then bJ.toggleFunction()end;bJ.hovered=false end end end;function SetButtonContains()local c9=aa+aE/2;local ca=ab+aF/2;for _,bJ in pairs(aB)do bJ.hovered=cW(c9,ca,bJ.x,bJ.y,bJ.width,bJ.height)end end;function DrawButton(cR,e9,hover,c9,ca,ea,eb,ec,ed,ee,ef)if type(ee)=="function"then ee=ee()end;if type(ef)=="function"then ef=ef()end;cR[#cR+1]=d("<rect x='%f' y='%f' width='%f' height='%f' fill='",c9,ca,ea,eb)if e9 then cR[#cR+1]=d("%s'",ec)else cR[#cR+1]=ed end;if hover then cR[#cR+1]=" style='stroke:white; stroke-width:2'"else cR[#cR+1]=" style='stroke:black; stroke-width:1'"end;cR[#cR+1]="></rect>"cR[#cR+1]=d("<text x='%f' y='%f' font-size='24' fill='",c9+ea/2,ca+eb/2+5)if e9 then cR[#cR+1]="black"else cR[#cR+1]="white"end;cR[#cR+1]="' text-anchor='middle' font-family='Montserrat'>"if e9 then cR[#cR+1]=d("%s</text>",ee)else cR[#cR+1]=d("%s</text>",ef)end end;function DrawButtons(cR)local eg="rgb(50,50,50)'"local eh="rgb(210,200,200)"local ei=DrawButton;for _,bJ in pairs(aB)do local c6=bJ.disableName;local c5=bJ.enableName;if type(c6)=="function"then c6=c6()end;if type(c5)=="function"then c5=c5()end;if not bJ.drawCondition or bJ.drawCondition()then ei(cR,bJ.toggleVar(),bJ.hovered,bJ.x,bJ.y,bJ.width,bJ.height,eh,eg,c6,c5)end end end;function DrawTank(cR,a_,c9,ej,ek,el,em,en)local eo=1;local ep=2;local eq=3;local er=4;local es=5;local et=6;local eu=""local ev=0;local ew=fuelY;local ex=fuelY+10;if n()==1 and not RemoteHud then ew=ew-50;ex=ex-50 end;cR[#cR+1]=[[<g class="pdim txtfuel">]]if ek=="ATMO"then eu="atmofueltank"elseif ek=="SPACE"then eu="spacefueltank"else eu="rocketfueltank"end;ev=_G[eu.."_size"]if#el>0 then for i=1,#el do local cO=string.sub(el[i][ep],1,12)local ey=0;for e7=1,ev do if el[i][ep]==e(unit[eu.."_"..e7].getData()).name then ey=e7;break end end;if a_ or em[i]==nil or en[i]==nil then local ez=0;local eA=0;local eB=0;local eC=0;local bR=r()if ey~=0 then en[i]=e(unit[eu.."_"..ey].getData()).percentage;em[i]=e(unit[eu.."_"..ey].getData()).timeLeft;if em[i]=="n/a"then em[i]=0 end else eB=k(el[i][eo])-el[i][er]ez=el[i][eq]en[i]=c(0.5+eB*100/ez)eA=el[i][es]eC=el[i][et]if eA<=eB then em[i]=0 else em[i]=c(0.5+eB/((eA-eB)/(bR-eC)))end;el[i][es]=eB;el[i][et]=bR end end;if cO==ej then cO=d("%s %d",ek,i)end;if ey==0 then cO=cO.." *"end;local eD;if em[i]==0 then eD="n/a"else eD=FormatTimeString(em[i])end;if en[i]~=nil then local e3=c(en[i]*2.55)local e4=d("rgb(%d,%d,%d)",255-e3,e3,0)local eE=""if eD~="n/a"and em[i]<120 or en[i]<5 then if a_ then eE=[[class="red"]]end end;cR[#cR+1]=d([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],c9,ew,eE,cO,c9,ex,e4,en[i],eD)ew=ew+30;ex=ex+30 end end end;cR[#cR+1]="</g>"end;function getRelativePitch(bf)bf=vec3(bf)local dc=-math.deg(math.atan(bf.y,bf.z))+180;dc=dc-90;if dc<0 then dc=360+dc end;if dc>180 then dc=-180+dc-180 end;return-dc end;function getRelativeYaw(bf)bf=vec3(bf)local eF=math.deg(math.atan(bf.y,bf.x))-90;if eF<-180 then eF=360+eF end;return eF end;function getAPEnableName()local cO=AutopilotTargetName;if cO==nil then local eG,cK=cH((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cO=CustomTarget.name.." "..eG..cK end;if cO==nil then cO="None"end;return"Engage Autopilot: "..cO end;function getAPDisableName()local cO=AutopilotTargetName;if cO==nil then cO=CustomTarget.name end;if cO==nil then cO="None"end;return"Disable Autopilot: "..cO end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function SetupButtons()local eH=50;local eI=260;local eJ=c4("Enable Brake Toggle","Disable Brake Toggle",eI,eH,aE/2-eI/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then X="Brakes in Toggle Mode"else X="Brakes in Default Mode"end end)c4("Align Prograde","Disable Prograde",eI,eH,aE/2-eI/2-50-eJ.width,aF/2-eH+380,function()return ProgradeIsOn end,ProgradeToggle)c4("Align Retrograde","Disable Retrograde",eI,eH,aE/2-eI/2+eJ.width+50,aF/2-eH+380,function()return RetrogradeIsOn end,gradeToggle,function()return ao==0 end)local eK=c4(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,dj)c4("Save Position","Save Position",200,eK.height,eK.x+eK.width+30,eK.y,function()return false end,cN,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)c4("Update Position","Update Position",200,eK.height,eK.x+eK.width+30,eK.y,function()return false end,dm,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)c4("Clear Position","Clear Position",200,eK.height,eK.x-200-30,eK.y,function()return true end,dr,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)eH=60;eI=300;local c9=10;local ca=aF/2-300;c4("Enable Turn and Burn","Disable Turn and Burn",eI,eH,c9,ca,function()return TurnBurn end,cZ)c4("Engage Altitude Hold","Disable Altitude Hold",eI,eH,c9+eI+20,ca,function()return AltitudeHold end,d2)ca=ca+eH+20;c4("Engage Autoland","Disable Autoland",eI,eH,c9,ca,function()return AutoLanding end,d4)local eL,eM,eN;if VertTakeOffEngine then eL="Engage Vertical Takeoff"eM="Disable Vertical Takeoff"eN=VertTakeOff else eL="Engage Auto Takeoff"eM="Disable Auto Takeoff"eN=AutoTakeoff end;c4(eL,eM,eI,eH,c9+eI+20,ca,function()return eN end,d5)ca=ca+eH+20;c4("Show Orbit Display","Hide Orbit Display",eI,eH,c9,ca,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then X="Orbit Display Enabled"else X="Orbit Display Disabled"end end)c4("Engage Orbiting","Cancel Orbiting",eI,eH,c9+eI+20,ca,function()return IntoOrbit end,ToggleIntoOrbit,function()return ao==0 and unit.getClosestPlanetInfluence()>0 end)ca=ca+eH+20;c4("Glide Re-Entry","Cancel Glide Re-Entry",eI,eH,c9,ca,function()return Reentry end,function()ah=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)c4("Parachute Re-Entry","Cancel Parachute Re-Entry",eI,eH,c9+eI+20,ca,function()return Reentry end,dT,function()return ap>ReentryAltitude end)ca=ca+eH+20;c4("Engage Follow Mode","Disable Follow Mode",eI,eH,c9,ca,function()return V end,dd,function()return n()==1 end)c4("Enable Repair Arrows","Disable Repair Arrows",eI,eH,c9+eI+20,ca,function()return aS end,function()aS=not aS;if aS then X="Repair Arrows Enabled"else X="Repair Arrows Diabled"end end,function()return n()==1 end)ca=ca+eH+20;if not ExternalAGG then c4("Enable AGG","Disable AGG",eI,eH,c9,ca,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;ca=ca+eH+20;c4(function()return d("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return d("Control Scheme: %s",userControlScheme)end,eI*2,eH,c9,ca,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local eO=Nav.axisCommandManager:getAxisCommandType(0)local eP="TRAVEL"if eO==1 then eP="CRUISE"end;if Autopilot then eP="AUTOPILOT"end;return eP end;function UpdateHud(cR)local cs=ap;local bf=core.getVelocity()local c2=vec3(bf):len()local d7,d8,d9,da=d6()local eQ=getRoll(da,d7,d8)local eR=eQ/180*math.pi;local eS=math.cos(eR)local eT=math.sin(eR)local dc=getPitch(da,d7,d8*eS+d9*eT)local eU=eQ;local eV=dc;local eW=c(unit.getThrottle())local eX=c2*3.6;local eY=unit.getAxisCommandValue(0)local eZ=bY(1770)local e_=bZ(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then eY=B;eW=B*100 end;local eP=GetFlightStyle()local f0="ROLL"local dl=unit.getClosestPlanetInfluence()>0;if eW==nil then eW=0 end;if not dl then if c2>5 then dc=getRelativePitch(bf)eQ=getRelativeYaw(bf)else dc=0;eQ=0 end;f0="YAW"end;if A>50000 and not an then local f1;if A>200000 then f1=s(A/200000,2).." su"else f1=s(A/1000,1).." km"end;cR[#cR+1]=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],eZ,e_,f1)end;cR[#cR+1]=af;cR[#cR+1]=az;cR[#cR+1]=ae;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cR,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cR,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cR,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cR,cs)if n()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dl then DrawRollLines(cR,centerX,centerY,eU,f0,dl)DrawArtificialHorizon(cR,eV,eU,centerX,centerY,dl,c(getRelativeYaw(bf)),c2)else DrawRollLines(cR,centerX,centerY,eQ,f0,dl)DrawArtificialHorizon(cR,dc,eQ,centerX,centerY,dl,c(eQ),c2)end;DrawAltitudeDisplay(cR,cs,dl)DrawPrograde(cR,bf,c2,centerX,centerY)end end;DrawThrottle(cR,eP,eW,eY)DrawSpeed(cR,eX)DrawWarnings(cR)DisplayOrbitScreen(cR)if screen_2 then local cx=vec3(core.getConstructWorldPos())local c9=960+cx.x/b4;local ca=450+cx.y/b5;screen_2.moveContent(b6,(c9-80)/19.2,(ca-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and n()==0 end;function HUDPrologue(cR)if not z then w=PvPR;y=PvPG;x=PvPB else w=SafeR;y=SafeG;x=SafeB end;au=[[rgb(]]..c(w+0.5)..","..c(y+0.5)..","..c(x+0.5)..[[)]]av=[[rgb(]]..c(w*0.9+0.5)..","..c(y*0.9+0.5)..","..c(x*0.9+0.5)..[[)]]local f2=au;local f3=av;local f4=au;local f5=av;if IsInFreeLook()and not brightHud then f2=[[rgb(]]..c(w*0.4+0.5)..","..c(y*0.4+0.5)..","..c(x*0.3+0.5)..[[)]]f3=[[rgb(]]..c(w*0.3+0.5)..","..c(y*0.3+0.5)..","..c(x*0.2+0.5)..[[)]]end;cR[#cR+1]=d([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],f2,f2,f4,f4,f3,f3,f5,f5,ResolutionX,ResolutionY)end;function HUDEpilogue(cR)cR[#cR+1]="</svg>"end;function DrawSpeed(cR,eX)local f6=throtPosY-10;local f7=throtPosX+10;cR[#cR+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then f6=75 end;cR[#cR+1]=d([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],f7,f6,c(eX))end;function DrawOdometer(cR,a6,TotalDistanceTravelled,eP,a7,f8)local f9=bY(1240)local fa=bZ(55)local fb=fa+10;local c0=core.g()local fc=0;local fd=0;local fe=0;b_(c0)if an then fe=LastMaxBrakeInAtmo else fe=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=m()if not ShowOdometer then return end;local ff=vec3(core.getWorldAcceleration()):len()/9.80665;if c0>0.1 then fd=aM*c0;fc=maxThrust/c0 end;cR[#cR+1]=[[<g class="pdim txt txtend">]]if n()==1 and not RemoteHud then f9=bY(1120)fa=bZ(55)fb=fa+10 elseif an then local fg=bY(770)cR[#cR+1]=d([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],fg,fa,fg,fb,ao)end;cR[#cR+1]=d([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],f9,fa,f9,fb,c0/9.80665,f9,fa+20,f9,fb+20,ff)cR[#cR+1]=d([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],bY(660),bY(700),bZ(35),bY(960),bZ(55),bY(1240),bZ(35),bY(1280))if n()==0 or RemoteHud then cR[#cR+1]=d([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],bY(700),bZ(20),a6,bY(700),bZ(30),TotalDistanceTravelled/1000,bY(830),bZ(20),FormatTimeString(a7),bY(830),bZ(30),FormatTimeString(TotalFlightTime),bY(970),bZ(20),aM/1000,bY(1240),bZ(10),fe/1000,bY(1240),bZ(30),maxThrust/1000,bY(960),bZ(180),eP)if c0>0.1 then cR[#cR+1]=d([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],bY(970),bZ(30),fc/1000,bY(1240),bZ(20),fd/1000)else cR[#cR+1]=d([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],bY(970),bZ(30),bY(1240),bZ(20))end else cR[#cR+1]=d([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bY(960),bZ(33),eP)end;cR[#cR+1]="</g>"end;function DrawThrottle(cR,eP,eW,eY)eW=math.floor(eW+0.5)local ew=throtPosY+10;local ex=throtPosY+20;if n()==1 and not RemoteHud then ew=55;ex=65 end;local fh="CRUISE"local unit="km/h"local bV=eY;if eP=="TRAVEL"or eP=="AUTOPILOT"then fh="THROT"unit="%"bV=eW;local fi="dim"if eW<0 then fi="red"end;cR[#cR+1]=d([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],fi,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(eW),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cR[#cR+1]=d([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,ew,fh,throtPosX+10,ex,bV,unit)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then eW=math.floor(E*100+0.5)local fi="red"if eW<0 then fi="red"end;cR[#cR+1]=d([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],fi,1-math.abs(eW),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cR[#cR+1]=d([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,ew+40,"LIMIT",throtPosX+10,ex+40,eW,"%")end;if an and AtmoSpeedAssist or Reentry then cR[#cR+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,ew-40,"LIMIT: ",bp.." km/h")elseif not an and Autopilot then cR[#cR+1]=d([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,ew-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cR,cs)if cs<200000 and not an or cs and an then local fj=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local fk=0;if math.abs(fj)>1 then fk=45*math.log(math.abs(fj),10)if fj<0 then fk=-fk end end;cR[#cR+1]=d([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,c(fj),c(fk))end end;function getHeading(dt)local di=-vec3(core.getWorldVertical())dt=dt-dt:project_on(di)local fl=vec3(0,0,1)fl=fl-fl:project_on(di)local fm=fl:cross(di)local fk=fl:angle_between(dt)*constants.rad2deg;if dt:dot(fm)<0 then fk=360-fk end;return fk end;function DrawRollLines(cR,centerX,centerY,eU,f0,dl)local fn=circleRad;local fo=20;fo=c(fo)local fp=c(eU)if dl then for i=-45,45,5 do local fq=i;cR[#cR+1]=d([[<g transform="rotate(%f,%d,%d)">]],fq,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cR[#cR+1]=d([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+fn+fo-len,centerX,centerY+fn+fo)end;cR[#cR+1]=d([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+fn+fo-35,f0,centerX,centerY+fn+fo-25,fp)cR[#cR+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eU,centerX,centerY)cR[#cR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+fn+fo-20,centerX+5,centerY+fn+fo-20,centerX,centerY+fn+fo-15)cR[#cR+1]="</g>"end;local eF=fp;if dl then eF=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local fr=20;local fs=c(eF)local ft=0;local fu=centerY+fn+fo+20;local fv=centerX;if f0~="YAW"then fu=bZ(130)fv=bY(960)end;local fw=[[<path class="txttick line" d="]]for i=c(fs-(fr+10)-fs%5+0.5),c(fs+fr+10+fs%5+0.5),5 do local c9=fv+-i*5+eF*5;if i%10==0 then ft=10;local t=i;if t==360 then t=0 elseif t>360 then t=t-360 elseif t<0 then t=t+360 end;cR[#cR+1]=d([[
                            <text x="%f" y="%f">%d</text>]],c9+5,fu-12,t)elseif i%5==0 then ft=5 end;if ft==10 then fw=d([[%s M %f %f v %d]],fw,c9,fu-5,ft)else fw=d([[%s M %f %f v %d]],fw,c9,fu-2.5,ft)end end;cR[#cR+1]=fw..[["/>]]cR[#cR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/>]],fv-5,fu+10,fv+5,fu+10,fv,fu+5)if dl then f0="HDG"end;cR[#cR+1]=d([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],fv,fu+25,fs,fv,fu+35,f0)end;function DrawArtificialHorizon(cR,eV,eU,centerX,centerY,dl,fx,c2)local fn=circleRad;local fy=c(fn*3/5)if fn>0 then local fz=c(eV)local len=0;local fw=d([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*eU,centerX,centerY)if not an then fw=d([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cR[#cR+1]=d([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],fn-1,centerX,centerY)cR[#cR+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=c(fz-30-fz%5+0.5),c(fz+30+fz%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ca=centerY+-i*5+eV*5;if len==30 then fw=d([[%s M %d %f h %d]],fw,centerX-fy-len,ca,len)if an then cR[#cR+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eU,centerX,centerY,centerX-fy+10,ca,i)cR[#cR+1]=d([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eU,centerX,centerY,centerX+fy-10,ca,i)if i==0 or i==180 or i==-180 then cR[#cR+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eU,centerX,centerY,centerX-fy+20,ca,fy*2-40)end else cR[#cR+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-fy+10,ca,i)cR[#cR+1]=d([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+fy-10,ca,i)end;fw=d([[%s M %d %f h %d]],fw,centerX+fy,ca,len)else fw=d([[%s M %d %f h %d]],fw,centerX-fy-len,ca,len)fw=d([[%s M %d %f h %d]],fw,centerX+fy,ca,len)end end;cR[#cR+1]=fw..[["/>]]local fA="PITCH"if not dl then fA="REL PITCH"end;if eV>90 and not an then eV=90-(eV-90)elseif eV<-90 and not an then eV=-90-(eV+90)end;if fn>200 then if an then if c2>J then cR[#cR+1]=d([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,fx)end;cR[#cR+1]=d([[<g transform="rotate(%f,%d,%d)">]],-eU,centerX,centerY)else cR[#cR+1]=d([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cR[#cR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-fy+25,centerY-5,centerX-fy+20,centerY,centerX-fy+25,centerY+5,centerX-fy+50,centerY+4,fz)cR[#cR+1]=d([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+fy-25,centerY-5,centerX+fy-20,centerY,centerX+fy-25,centerY+5,centerX+fy-30,centerY+4,fz)cR[#cR+1]="</g>"end;local fB=c(fn/3)cR[#cR+1]=d([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-fB,centerY,fn-fB)if not an and dl then cR[#cR+1]=d([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eU,centerX,centerY,centerX-fy+10,centerY,fy*2-20)end;cR[#cR+1]="</g>"if fn<200 then if an and c2>J then cR[#cR+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-fn,fA,centerX,centerY-fn+10,fz,centerX,centerY-15,"Yaw",centerX,centerY+20,fx)else cR[#cR+1]=d([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-fn,fA,centerX,centerY-fn+15,fz)end end end end;function DrawAltitudeDisplay(cR,cs,dl)local fC=altMeterX;local fD=altMeterY;local fE=78;local fF=19;local fG=AboveGroundLevel()if fG~=-1 then table.insert(cR,d([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],fC+fE,fD+fF+20,fG))end;if dl and(cs<200000 and not an or cs and an)then table.insert(cR,d([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],fC-1,fD-4,fE+2,fF+6,fC+1,fD-1,fE-4,fF))local dp=0;local fH=1;local fI=0;local fJ=cs<0;local fK=9;if fJ then fK=0 end;local cs=math.abs(cs)while dp<6 do local fL=11;local fM=16;local fN=9;local fO=14;local eE="altsm"if dp>2 then fM=fM+3;fL=fL+2;fO=fO+2;fN=fN-6;eE="altbig"end;if fJ then eE=eE.." red"end;local fP=cs/fH%10;local fQ=c(fP)local fR=c((fQ+1)%10)local fS=fI;if dp==0 then fS=fP-fQ;if fJ then fS=1-fS end end;if fJ and(dp==0 or fI~=0)then local fT=fR;fR=fQ;fQ=fT end;local fU=fM*(fS-1)local fV=fU+fM;local c9=fC+fN+(6-dp)*fL;local ca=fD+fO;table.insert(cR,d([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],eE,c9,ca+fU,fR,c9,ca+fV,fQ))dp=dp+1;fH=fH*10;if fQ==fK then fI=fS else fI=0 end end;table.insert(cR,[[</g></g>]])end end;function DrawPrograde(cR,bf,c2,centerX,centerY)if c2>5 and not an or c2>J then local fn=circleRad;local fW=20;local fX=20;local fY=vec3(bf)local fZ=getRelativePitch(fY)local f_=getRelativeYaw(fY)local g0=14;local g1=g0/2;local g2=-f_/fX*fn;local g3=fZ/fW*fn;local c9=centerX+g2;local ca=centerY+g3;local ad=math.sqrt(g2^2+g3^2)local g4=[[<circle
                cx="]]..c9 ..[["
                cy="]]..ca..[["
                r="]]..g1/g0 ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..c9 ..[["
                cy="]]..ca..[["
                r="]]..g1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..c9-g0 ..[[,]]..ca..[[ h ]]..g1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c9+g1 ..[[,]]..ca..[[ h ]]..g1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c9 ..[[,]]..ca-g0 ..[[ v ]]..g1 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ad<fn then cR[#cR+1]=g4 else local fk=math.atan(g3,g2)local g5=4;local g6=centerX+fn*math.cos(fk)local g7=centerY+fn*math.sin(fk)cR[#cR+1]=d('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fk*180/math.pi,g6,g7,g6-g5,g7-g5/2,g5*2,g5,g6+g5,g7-g5,g5,g5,-g5,g5)end;if not an then fZ=getRelativePitch(-fY)f_=getRelativeYaw(-fY)g2=-f_/fX*fn;g3=fZ/fW*fn;c9=centerX+g2;ca=centerY+g3;ad=math.sqrt(g2^2+g3^2)if ad<fn then local g8=[[<circle
                        cx="]]..c9 ..[["
                        cy="]]..ca..[["
                        r="]]..g1 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..c9 ..[[,]]..ca-g0 ..[[ v ]]..g1 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..c9 ..[[,]]..ca..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..c9 ..[[,]]..ca..[[)" />
                     <path
                        d="M ]]..c9-g1 ..[[,]]..ca..[[ h ]]..g0 ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..c9 ..[[,]]..ca..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..c9 ..[[,]]..ca..[[)"/>]]cR[#cR+1]=g8 end end end end;function DrawWarnings(cR)cR[#cR+1]=d([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],bY(1900),bZ(1070),VERSION_NUMBER)cR[#cR+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cR[#cR+1]=d([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],bY(960),bZ(550))cR[#cR+1]=d([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],bY(960),bZ(600))cR[#cR+1]=d([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],bY(960),bZ(650))end;local g9=bY(960)local ga=bZ(860)local gb=bZ(880)local gc=bZ(900)local gd=bZ(960)local ge=bZ(200)local gf=bZ(150)local gg=bZ(960)if n()==1 and not RemoteHud then ga=bZ(135)gb=bZ(155)gc=bZ(175)ge=bZ(115)gf=bZ(95)end;if BrakeIsOn then cR[#cR+1]=d([[<text x="%d" y="%d">Brake Engaged</text>]],g9,ga)elseif C>0 then cR[#cR+1]=d([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],g9,ga,C)end;if an and bk and c_()==-1 then cR[#cR+1]=d([[<text x="%d" y="%d">** STALL WARNING **</text>]],g9,ge+50)end;if as then cR[#cR+1]=d([[<text x="%d" y="%d">Gyro Enabled</text>]],g9,gg)end;if GearExtended then if N then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],g9,gb)else cR[#cR+1]=d([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],g9,gb)end;local eG,cK=cH(Nav:getTargetGroundAltitude())cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],g9,gc,eG..cK)end;if a0 then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],g9,gd+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],g9,ge+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))else cR[#cR+1]=d([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],g9,ge+20,c(AntigravTargetAltitude),c(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],g9,ge+20,AutopilotStatus)elseif LockPitch~=nil then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],g9,ge+20,c(LockPitch))elseif V then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],g9,ge+20)elseif Reentry then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],g9,ge+20)end;local gh,gi,gj=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bf:normalize(),function(gk)if gk.noAtmosphericDensityAltitude>0 then return gk.radius+gk.noAtmosphericDensityAltitude else return gk.radius+gk.surfaceMaxAltitude*1.5 end end)local gl=gi;if gj~=nil and gi~=nil then gl=math.min(gj,gi)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local eG,cK=cH(HoldAltitude,2)cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],g9,ge,eG..cK)if BrakeIsOn then cR[#cR+1]=d([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],g9,ge+50)end else local eG,cK=cH(HoldAltitude,2)cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],g9,ge,eG..cK)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ao>0.1 then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],g9,ge)elseif ao<0.09 and ao>0.05 then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],g9,ge)elseif ao<0.05 then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],g9,ge)end end;if IntoOrbit then if br~=nil then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],g9,ge,br)end end;if BrakeLanding then if StrongBrakes then cR[#cR+1]=d([[<text x="%d" y="%d">Brake-Landing</text>]],g9,ge)else cR[#cR+1]=d([[<text x="%d" y="%d">Coast-Landing</text>]],g9,ge)end end;if ProgradeIsOn then cR[#cR+1]=d([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],g9,ge)end;if RetrogradeIsOn then cR[#cR+1]=d([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],g9,ge)end;if TurnBurn then cR[#cR+1]=d([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],g9,gf)elseif gl~=nil and ao==0 then local eG,cK=cH(gl)local travelTime=b9.computeTravelTime(bg,0,gl)local gm="Collision"if gh.noAtmosphericDensityAltitude>0 then gm="Atmosphere"end;cR[#cR+1]=d([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],g9,gf,gh.name,gm,FormatTimeString(travelTime),eG..cK)end;if VectorToTarget and not IntoOrbit then cR[#cR+1]=d([[<text class="warn" x="%d" y="%d">%s</text>]],g9,ge+30,VectorStatus)end;cR[#cR+1]="</g>"end;function DisplayOrbitScreen(cR)if orbit~=nil and ao<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local gn=OrbitMapX;local go=OrbitMapY;local gp=OrbitMapSize;local gq=4;go=go+gq;local gr=15;local c9=gn+gp+gn/2+gq;local ca=go+gp/2+5+gq;local gs,gt,gu,gv;gs=gp/4;gv=0;cR[#cR+1]=[[<g class="pbright txtorb txtmid">]]cR[#cR+1]=d('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',gp+gn*2,gp+go,gq,gq)if orbit.periapsis~=nil and orbit.apoapsis~=nil then gu=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(gs*2)gt=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/gu*(1-orbit.eccentricity)gv=gs-orbit.periapsis.altitude/gu-planet.radius/gu;local gw=""if orbit.periapsis.altitude<=0 then gw='redout'end;cR[#cR+1]=d([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],gw,gn+gp/2+gv+gq,go+gp/2+gq,gs,gt)cR[#cR+1]=d('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',gn+gp/2+gq,go+gp/2+gq,planet.radius/gu)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cR[#cR+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9-35,ca-5,gn+gp/2+gs+gv,ca-5)cR[#cR+1]=d([[<text x="%f" y="%f">Apoapsis</text>]],c9,ca)ca=ca+gr;local eG,cK=cH(orbit.apoapsis.altitude)cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,eG..cK)ca=ca+gr;cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,FormatTimeString(orbit.timeToApoapsis))ca=ca+gr;cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,getSpeedDisplayString(orbit.apoapsis.speed))end;ca=go+gp/2+5+gq;c9=gn-gn/2+10+gq;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cR[#cR+1]=d([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9+35,ca-5,gn+gp/2-gs+gv,ca-5)cR[#cR+1]=d([[<text x="%f" y="%f">Periapsis</text>]],c9,ca)ca=ca+gr;local eG,cK=cH(orbit.periapsis.altitude)cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,eG..cK)ca=ca+gr;cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,FormatTimeString(orbit.timeToPeriapsis))ca=ca+gr;cR[#cR+1]=d([[<text x="%f" y="%f">%s</text>]],c9,ca,getSpeedDisplayString(orbit.periapsis.speed))end;cR[#cR+1]=d([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],gn+gp/2+gq,20+gq,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local gx=orbit.timeToApoapsis/orbit.period*2*math.pi;local gy=gs*math.cos(gx)local gz=gt*math.sin(gx)cR[#cR+1]=d('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',gn+gp/2+gy+gv+gq,go+gp/2+gz+gq)end;cR[#cR+1]=[[</g>]]end end;function getSpeedDisplayString(c2)return c(s(c2*3.6,0)+0.5).." km/h"end;function FormatTimeString(gA)local gB=0;local gC=0;local gD=0;if gA<60 then gA=c(gA)elseif gA<3600 then gB=c(gA/60)gA=c(gA%60)elseif gA<86400 then gC=c(gA/3600)gB=c(gA%3600/60)else gD=c(gA/86400)gC=c(gA%86400/3600)end;if gD>0 then return gD.."d "..gC.."h "elseif gC>0 then return gC.."h "..gB.."m "elseif gB>0 then return gB.."m "..gA.."s"elseif gA>0 then return gA.."s"else return"0s"end end;function GetAutopilotMaxMass()local gE=LastMaxBrakeInAtmo/a5:getGravity(a5.center+vec3(0,0,1)*a5.radius):len()return gE end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a5.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bf=core.getWorldVelocity()local c2=vec3(bf):len()local gF=unit.getThrottle()/100;if AtmoSpeedAssist then gF=B end;local gG,gH=b9.computeDistanceAndTime(vec3(bf):len(),MaxGameVelocity,m(),Nav:maxForceForward()*gF,warmup,0)local a1,a2;if not TurnBurn then a1,a2=dW(MaxGameVelocity)else a1,a2=dX(MaxGameVelocity)end;local _,gI;if not TurnBurn and c2>0 then _,gI=dW(c2)else _,gI=dX(c2)end;local gJ=0;local gK=0;if AutopilotCruising or not Autopilot and c2>5 then gK=b9.computeTravelTime(c2,0,AutopilotDistance)elseif a1+gG<AutopilotDistance then gJ=AutopilotDistance-(a1+gG)gK=b9.computeTravelTime(8333.0556,0,gJ)else local gL=(AutopilotDistance-a1)/gG;gG=AutopilotDistance-a1;gH=gH*gL end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gK elseif AutopilotBraking then return gI elseif AutopilotCruising then return gK+gI else return gH+a2+gK end end;function AboveGroundLevel()local gM=-1;local gN=c_()if telemeter_1 then gM=telemeter_1.getDistance()end;if gN~=-1 and gM~=-1 then if gN<gM then return gN else return gM end elseif gN~=-1 then return gN else return gM end end;function tablelength(gO)local gP=0;for _ in pairs(gO)do gP=gP+1 end;return gP end;function BeginProfile(gQ)ProfileTimeStart=r()end;function EndProfile(gQ)local gR=r()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gR;ProfileCount=ProfileCount+1;if gR>ProfileTimeMax then ProfileTimeMax=gR end;if gR<ProfileTimeMin then ProfileTimeMin=gR end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gS=ProfileTimeSum;local gT=ProfileTimeSum/ProfileCount;local gU=ProfileTimeMin;local gV=ProfileTimeMax;local gW=ProfileCount;system.print(d("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gS,gT,gU,gV,gW))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gX=radar_1.getEntries()local gY=radar_1.getData()local gZ=bY(1770)local g_=bZ(330)if#gX>0 then local h0=gY:find('identifiedConstructs":%[%]')if h0==nil and perisPanelID==nil then ag=1;cS()end;if h0~=nil and perisPanelID~=nil then cS()end;if radarPanelID==nil then cS()end;ae=d([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gZ,g_,#gX)local h1={}for bI,bJ in pairs(gX)do if radar_1.hasMatchingTransponder(bJ)==1 then table.insert(h1,bJ)end end;if#h1>0 then local ca=bZ(15)local c9=bY(1370)ae=d([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ae,c9,ca)for bI,bJ in pairs(h1)do ca=ca+20;ae=d([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ae,c9,ca,radar_1.getConstructName(bJ))end end else local h2;h2=gY:find('worksInEnvironment":false')if h2 then ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gZ,g_)else ae=d([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gZ,g_)end;if radarPanelID~=nil then ag=0;cS()end end end end;function DisplayMessage(cR,eG)if eG~="empty"then cR[#cR+1]=[[<text class="msg" x="50%%" y="310" >]]for h3 in string.gmatch(eG,"([^\n]+)")do cR[#cR+1]=d([[<tspan x="50%%" dy="35">%s</tspan>]],h3)end;cR[#cR+1]=[[</text>]]end;if ac~=0 then unit.setTimer("msgTick",ac)ac=0 end end;function updateDistance()local bR=r()local bf=vec3(core.getWorldVelocity())local eX=vec3(bf):len()local h4=bR-ar;if eX>1.38889 then eX=eX/1000;local h5=eX*(bR-ar)TotalDistanceTravelled=TotalDistanceTravelled+h5;a6=a6+h5 end;a7=a7+h4;TotalFlightTime=TotalFlightTime+h4;ar=bR end;function composeAxisAccelerationFromTargetSpeedV(h6,h7)local h8=vec3()local h9=vec3()if h6==axisCommandId.longitudinal then h8=vec3(core.getConstructOrientationForward())h9=vec3(core.getConstructWorldOrientationForward())elseif h6==axisCommandId.vertical then h8=vec3(core.getConstructOrientationUp())h9=vec3(core.getConstructWorldOrientationUp())elseif h6==axisCommandId.lateral then h8=vec3(core.getConstructOrientationRight())h9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ha=vec3(core.getWorldGravity())local hb=ha:dot(h9)local hc=vec3(core.getWorldAirFrictionAcceleration())local hd=hc:dot(h9)local he=vec3(core.getVelocity())local hf=he:dot(h8)local hg=h7*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(hg-hf)local hh=targetSpeedPID2:get()local hi=(hh-hd-hb)*h9;return hi end;function composeAxisAccelerationFromTargetSpeed(h6,h7)local h8=vec3()local h9=vec3()if h6==axisCommandId.longitudinal then h8=vec3(core.getConstructOrientationForward())h9=vec3(core.getConstructWorldOrientationForward())elseif h6==axisCommandId.vertical then h8=vec3(core.getConstructOrientationUp())h9=vec3(core.getConstructWorldOrientationUp())elseif h6==axisCommandId.lateral then h8=vec3(core.getConstructOrientationRight())h9=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local ha=vec3(core.getWorldGravity())local hb=ha:dot(h9)local hc=vec3(core.getWorldAirFrictionAcceleration())local hd=hc:dot(h9)local he=vec3(core.getVelocity())local hf=he:dot(h8)local hg=h7*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(hg-hf)local hh=targetSpeedPID:get()local hi=(hh-hd-hb)*h9;return hi end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bI,bJ in pairs(b2[0])do if aG==nil or bJ.center.x<aG then aG=bJ.center.x end;if aH==nil or bJ.center.x>aH then aH=bJ.center.x end;if aI==nil or bJ.center.y<aI then aI=bJ.center.y end;if aJ==nil or bJ.center.y>aJ then aJ=bJ.center.y end end;b3=""local hj=1.1*(aH-aG)/1920;local hk=1.4*(aJ-aI)/1080;for bI,bJ in pairs(b2[0])do local c9=960+bJ.center.x/hj;local ca=540+bJ.center.y/hk;b3=b3 ..'<circle cx="'..c9 ..'" cy="'..ca..'" r="'..bJ.radius/hj*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not p(bJ.name,"Moon")and not p(bJ.name,"Sanctuary")and not p(bJ.name,"Space")then b3=b3 .."<text x='"..c9 .."' y='"..ca+bJ.radius/hj*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bJ.name.."</text>"end end;local cx=vec3(core.getConstructWorldPos())local c9=960+cx.x/hj;local ca=540+cx.y/hk;b3=b3 ..'<circle cx="'..c9 ..'" cy="'..ca..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..c9 .."' y='"..ca-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=hj;b5=hk;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cx=vec3(core.getConstructWorldPos())local c9=960+cx.x/hj;local ca=540+cx.y/hk;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((c9-80)/19.20,(ca-80)/10.80,b3)end end;function PlanetRef()local function hl(hm)return type(hm)=='number'end;local function hn(hm)return type(tonumber(hm))=='number'end;local function ho(hp)return type(hp)=='table'end;local function hq(hr)return type(hr)=='string'end;local function hs(bJ)return ho(bJ)and hl(bJ.x and bJ.y and bJ.z)end;local function ht(hu)return ho(hu)and hl(hu.latitude and hu.longitude and hu.altitude and hu.bodyId and hu.systemId)end;local hv=math.pi/180;local hw=180/math.pi;local epsilon=1e-10;local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cy='::pos{'..t..','..t..','..t..','..t..','..t..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local hx=utils.clamp;local function ck(cl,cm)if cl==0 then return math.abs(cm)<1e-09 end;if cm==0 then return math.abs(cl)<1e-09 end;return math.abs(cl-cm)<math.max(math.abs(cl),math.abs(cm))*epsilon end;local function hy(hm)local bK=string.gsub(string.reverse(d('%.4f',hm)),'^0*%.?','')return bK==''and'0'or string.reverse(bK)end;local function hz(hA)if hs(hA)then return d('{x=%.3f,y=%.3f,z=%.3f}',hA.x,hA.y,hA.z)end;if ho(hA)and not getmetatable(hA)then local hB={}local hC=next(hA)if type(hC)=='nil'or hC==1 then hB=hA else for bI,bJ in pairs(hA)do local bV=hz(bJ)if type(bI)=='number'then table.insert(hB,d('[%s]=%s',bI,bV))else table.insert(hB,d('%s=%s',bI,bV))end end end;return d('{%s}',table.concat(hB,','))end;if hq(hA)then return d("'%s'",hA:gsub("'",[[\']]))end;return tostring(hA)end;local hD={}hD.__index=hD;hD.__tostring=function(hA,hE)local hF={}for bI in pairs(hA)do table.insert(hF,bI)end;table.sort(hF)local hB={}for _,bI in ipairs(hF)do local bV=hz(hA[bI])if type(bI)=='number'then table.insert(hB,d('[%s]=%s',bI,bV))else table.insert(hB,d('%s=%s',bI,bV))end end;if hE then return d('%s%s',hE,table.concat(hB,',\n'..hE))end;return d('{%s}',table.concat(hB,','))end;hD.__eq=function(hG,hH)return hG.planetarySystemId==hH.planetarySystemId and hG.bodyId==hH.bodyId and ck(hG.radius,hH.radius)and ck(hG.center.x,hH.center.x)and ck(hG.center.y,hH.center.y)and ck(hG.center.z,hH.center.z)and ck(hG.GM,hH.GM)end;local function hI(cz,cA,dB,cp,hJ)assert(hn(cz),'Argument 1 (planetarySystemId) must be a number:'..type(cz))assert(hn(cA),'Argument 2 (bodyId) must be a number:'..type(cA))assert(hn(dB),'Argument 3 (radius) must be a number:'..type(dB))assert(ho(cp),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cp))assert(hn(hJ),'Argument 5 (GM) must be a number:'..type(hJ))return setmetatable({planetarySystemId=tonumber(cz),bodyId=tonumber(cA),radius=tonumber(dB),center=vec3(cp),GM=tonumber(hJ)},hD)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(hK)return d('::pos{%d,%d,%s,%s,%s}',hK.systemId,hK.bodyId,hy(hK.latitude*hw),hy(hK.longitude*hw),hy(hK.altitude))end;MapPosition.__eq=function(hG,hH)return hG.bodyId==hH.bodyId and hG.systemId==hH.systemId and ck(hG.latitude,hH.latitude)and ck(hG.altitude,hH.altitude)and(ck(hG.longitude,hH.longitude)or ck(hG.latitude,math.pi/2)or ck(hG.latitude,-math.pi/2))end;local function hL(hM,cA,ct,cu,cs)local cz=hM;if hq(hM)and not cu and not cs and not cA and not ct then cz,cA,ct,cu,cs=p(hM,cy)assert(cz,'Argument 1 (position string) is malformed.')else assert(hn(cz),'Argument 1 (systemId) must be a number:'..type(cz))assert(hn(cA),'Argument 2 (bodyId) must be a number:'..type(cA))assert(hn(ct),'Argument 3 (latitude) must be in degrees:'..type(ct))assert(hn(cu),'Argument 4 (longitude) must be in degrees:'..type(cu))assert(hn(cs),'Argument 5 (altitude) must be in meters:'..type(cs))end;cz=tonumber(cz)cA=tonumber(cA)ct=tonumber(ct)cu=tonumber(cu)cs=tonumber(cs)if cA==0 then return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=cA,systemId=cz},MapPosition)end;return setmetatable({latitude=hv*hx(ct,-90,90),longitude=hv*(cu%360),altitude=cs,bodyId=cA,systemId=cz},MapPosition)end;local hN={}hN.__index=hN;hN.__tostring=function(hA,hE)local hO=hE and hE..'  'local hP={}local hF={}for bI in pairs(hA)do table.insert(hF,bI)end;table.sort(hF)for _,hQ in ipairs(hF)do bdy=hA[hQ]local hR=hD.__tostring(bdy,hO)if hE then table.insert(hP,d('[%s]={\n%s\n%s}',hQ,hR,hE))else table.insert(hP,d('  [%s]=%s',hQ,hR))end end;if hE then return d('\n%s%s%s',hE,table.concat(hP,',\n'..hE),hE)end;return d('{\n%s\n}',table.concat(hP,',\n'))end;local function hS(hT)local b2={}local pid;for _,bJ in pairs(hT)do local cP=bJ.planetarySystemId;if type(cP)~='number'then error('Invalid planetary system ID: '..tostring(cP))elseif pid and cP~=pid then error('Mistringmatch planetary system IDs: '..cP..' and '..pid)end;local hU=bJ.bodyId;if type(hU)~='number'then error('Invalid body ID: '..tostring(hU))elseif b2[hU]then error('Duplicate body ID: '..tostring(hU))end;setmetatable(bJ.center,getmetatable(vec3.unit_x))b2[hU]=setmetatable(bJ,hD)pid=cP end;return setmetatable(b2,hN)end;b7={}local function hV(hT)return setmetatable({galaxyAtlas=hT or{}},b7)end;b7.__index=function(hp,i)if type(i)=='number'then local system=hp.galaxyAtlas[i]return hS(system)end;return rawget(b7,i)end;b7.__pairs=function(hA)return function(hp,bI)local hW,nv=next(hp,bI)return hW,nv and hS(nv)end,hA.galaxyAtlas,nil end;b7.__tostring=function(hA)local hX={}for _,hY in pairs(hA or{})do local hZ=hY:getPlanetarySystemId()local h_=hN.__tostring(hY,'    ')table.insert(hX,d('  [%s]={%s\n  }',hZ,h_))end;return d('{\n%s\n}\n',table.concat(hX,',\n'))end;b7.BodyParameters=hI;b7.MapPosition=hL;b7.PlanetarySystem=hS;function b7.createBodyParameters(i0,cA,i1,i2,i3,i4,i5)assert(hn(i0),'Argument 1 (planetarySystemId) must be a number:'..type(i0))assert(hn(cA),'Argument 2 (bodyId) must be a number:'..type(cA))assert(hn(i1),'Argument 3 (surfaceArea) must be a number:'..type(i1))assert(ho(i2),'Argument 4 (aPosition) must be an array or vec3:'..type(i2))assert(ho(i3),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(i3))assert(hn(i4),'Argument 6 (altitude) must be in meters:'..type(i4))assert(hn(i5),'Argument 7 (gravityAtPosition) must be number:'..type(i5))local dB=math.sqrt(i1/4/math.pi)local ad=dB+i4;local i6=vec3(i2)+ad*vec3(i3)local hJ=i5*ad*ad;return hI(i0,cA,dB,i6,hJ)end;b7.isMapPosition=ht;function b7:getPlanetarySystem(hM)if i==nil then i=0 end;if nv==nil then nv=0 end;local i0=hM;if ht(hM)then i0=hM.systemId end;if type(i0)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=hN then system=hS(system)end;return system end end end;function hN:castIntersections(i7,dL,i8,i9)local i8=i8 or function(gk)return 1.05*gk.radius end;local ia={}if i9 then for _,i in ipairs(i9)do ia[i]=self[i]end else i9={}for bI,gk in pairs(self)do table.insert(i9,bI)ia[bI]=gk end end;local function ib(ic,id)local ie=ia[ic].center-i7;local ig=ia[id].center-i7;return ie:len()<ig:len()end;table.sort(i9,ib)local ih=dL:normalize()for i,cP in ipairs(i9)do local gk=ia[cP]local ii=gk.center-i7;local dB=i8(gk)local ij=ii:dot(ih)local ik=ij^2-(ii:len2()-dB^2)if ik>=0 then local il=math.sqrt(ik)local gi=ij+il;local gj=ij-il;if gj>0 then return gk,gi,gj elseif gi>0 then return gk,gi,nil end end end;return nil,nil,nil end;function hN:closestBody(im)assert(type(im)=='table','Invalid coordinates.')local io,gk;local ip=vec3(im)for _,iq in pairs(self)do local ir=(iq.center-ip):len2()if(not gk or ir<io)and iq.name~="Space"then gk=iq;io=ir end end;return gk end;function hN:convertToBodyIdAndWorldCoordinates(hM)local is=hM;if hq(hM)then is=hL(hM)end;if is.bodyId==0 then return 0,vec3(is.latitude,is.longitude,is.altitude)end;local iq=self:getBodyParameters(is)if iq then return is.bodyId,iq:convertToWorldCoordinates(is)end end;function hN:getBodyParameters(hM)local cA=hM;if ht(hM)then cA=hM.bodyId end;assert(hn(cA),'Argument 1 (bodyId) must be a number:'..type(cA))return self[cA]end;function hN:getPlanetarySystemId()local _,bJ=next(self)return bJ and bJ.planetarySystemId end;function hD:convertToMapPosition(cp)assert(ho(cp),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cp))local cq=vec3(cp)if self.bodyId==0 then return setmetatable({latitude=cq.x,longitude=cq.y,altitude=cq.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cr=cq-self.center;local ad=cr:len()local cs=ad-self.radius;local ct=0;local cu=0;if not ck(ad,0)then local cv=math.atan(cr.y,cr.x)cu=cv>=0 and cv or 2*math.pi+cv;ct=math.pi/2-math.acos(cr.z/ad)end;return setmetatable({latitude=ct,longitude=cu,altitude=cs,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function hD:convertToWorldCoordinates(hM)local is=hq(hM)and hL(hM)or hM;if is.bodyId==0 then return vec3(is.latitude,is.longitude,is.altitude)end;assert(ht(is),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(is.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(is.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cB=math.cos(is.latitude)return self.center+(self.radius+is.altitude)*vec3(cB*math.cos(is.longitude),cB*math.sin(is.longitude),math.sin(is.latitude))end;function hD:getAltitude(cp)return(vec3(cp)-self.center):len()-self.radius end;function hD:getDistance(cp)return(vec3(cp)-self.center):len()end;function hD:getGravity(cp)local it=self.center-vec3(cp)local iu=it:len2()return self.GM/iu*it/math.sqrt(iu)end;return setmetatable(b7,{__call=function(_,...)return hV(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function hq(hr)return type(hr)=='string'end;local function ho(hp)return type(hp)=='table'end;local function ck(cl,cm)if cl==0 then return math.abs(cm)<1e-09 end;if cm==0 then return math.abs(cl)<1e-09 end;return math.abs(cl-cm)<math.max(math.abs(cl),math.abs(cm))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cs)assert(self.body)local ad=cs+self.body.radius;if not ck(ad,0)then local orbit=math.sqrt(self.body.GM/ad)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(hM,bf)assert(self.body)assert(ho(hM)or hq(hM))assert(ho(bf))local cx=(hq(hM)or PlanetRef.isMapPosition(hM))and self.body:convertToWorldCoordinates(hM)or vec3(hM)local bJ=vec3(bf)local iv=cx-self.body.center;local ig=bJ:len2()local iw=iv:len()local ix=self.body.GM;local iy=((ig-ix/iw)*iv-iv:dot(bJ)*bJ)/ix;local cl=ix/(2*ix/iw-ig)local iz=iy:len()local ih=iy:normalize()local iA=cl*(1-iz)local iB=cl*(1+iz)local iC=iA*ih+self.body.center;local iD=iz<=1 and-iB*ih+self.body.center or nil;local iE=math.sqrt(cl*ix*(1-iz*iz))local iF=iD and 2*math.pi*math.sqrt(cl^3/ix)local iG=math.acos(iy:dot(iv)/(iz*iw))if iv:dot(bJ)<0 then iG=-(iG-2*math.pi)end;local iH=math.acos((math.cos(iG)+iz)/(1+iz*math.cos(iG)))local iI=iH;if iI<0 then iI=iI+2*math.pi end;local iJ=iI-iz*math.sin(iI)local iK=0;local iL=0;local iM=0;if iF~=nil then iK=iJ/(2*math.pi/iF)iL=iF-iK;iM=iL+iF/2;if iG-math.pi>0 then iL=iK;iM=iL+iF/2 end;if iM>iF then iM=iM-iF end end;return{periapsis={position=iC,speed=iE/iA,circularOrbitSpeed=math.sqrt(ix/iA),altitude=iA-self.body.radius},apoapsis=iD and{position=iD,speed=iE/iB,circularOrbitSpeed=math.sqrt(ix/iB),altitude=iB-self.body.radius},currentVelocity=bJ,currentPosition=cx,eccentricity=iz,period=iF,eccentricAnomaly=iH,meanAnomaly=iJ,timeToPeriapsis=iL,timeToApoapsis=iM}end;local function iN(iO)local iq=PlanetRef.BodyParameters(iO.planetarySystemId,iO.bodyId,iO.radius,iO.center,iO.GM)return setmetatable({body=iq},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return iN(...)end})end;function Kinematics()local b9={}local iP=30000000/3600;local iQ=iP*iP;local iR=100;local function iS(bJ)return 1/math.sqrt(1-bJ*bJ/iQ)end;function b9.computeAccelerationTime(iT,iU,iV)local iW=iP*math.asin(iT/iP)return(iP*math.asin(iV/iP)-iW)/iU end;function b9.computeDistanceAndTime(iT,iV,iX,iY,iZ,i_)iZ=iZ or 0;i_=i_ or 0;local j0=iT<=iV;local j1=iY*(j0 and 1 or-1)/iX;local j2=-i_/iX;local j3=j1+j2;if j0 and j3<=0 or not j0 and j3>=0 then return-1,-1 end;local j4,j5=0,0;if j1~=0 and iZ>0 then local iW=math.asin(iT/iP)local j6=math.pi*(j1/2+j2)local j7=j1*iZ;local j8=iP*math.pi;local bJ=function(hp)local ea=(j6*hp-j7*math.sin(math.pi*hp/2/iZ)+j8*iW)/j8;local j9=math.tan(ea)return iP*j9/math.sqrt(j9*j9+1)end;local ja=j0 and function(hr)return hr>=iV end or function(hr)return hr<=iV end;j5=2*iZ;if ja(bJ(j5))then local jb=0;while math.abs(j5-jb)>0.5 do local hp=(j5+jb)/2;if ja(bJ(hp))then j5=hp else jb=hp end end end;local jc=iT;local jd=j5/iR;for je=1,iR do local c2=bJ(je*jd)j4=j4+(c2+jc)*jd/2;jc=c2 end;if j5<2*iZ then return j4,j5 end;iT=jc end;local iW=iP*math.asin(iT/iP)local bF=(iP*math.asin(iV/iP)-iW)/j3;local jf=iQ*math.cos(iW/iP)/j3;local ad=jf-iQ*math.cos((j3*bF+iW)/iP)/j3;return ad+j4,bF+j5 end;function b9.computeTravelTime(iT,iU,ad)if ad==0 then return 0 end;if iU>0 then local iW=iP*math.asin(iT/iP)local jf=iQ*math.cos(iW/iP)/iU;return(iP*math.acos(iU*(jf-ad)/iQ)-iW)/iU end;if iT==0 then return-1 end;assert(iT>0,'Acceleration and initial speed are both zero.')return ad/iT end;function b9.lorentz(bJ)return iS(bJ)end;return b9 end;function SaveDataBank(jg)if dbHud_1 then if not a8 then for bI,bJ in pairs(b)do dbHud_1.setStringValue(bJ,f(_G[bJ]))if jg and dbHud_2 then dbHud_2.setStringValue(bJ,f(_G[bJ]))end end;for bI,bJ in pairs(a)do dbHud_1.setStringValue(bJ,f(_G[bJ]))if jg and dbHud_2 then dbHud_2.setStringValue(bJ,f(_G[bJ]))end end;system.print("Saved Variables to Datacore")if jg and dbHud_2 then X="Databank copied.  Remove copy when ready."end end end end;function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()cj()cf()de()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()if door and(ao>0 or ao==0 and ap<10000)then for _,bJ in pairs(door)do bJ.toggle()end end;if switch then for _,bJ in pairs(switch)do bJ.toggle()end end;if forcefield and(ao>0 or ao==0 and ap<10000)then for _,bJ in pairs(forcefield)do bJ.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(jh)if jh=="tenthSecond"then if ao>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then B=1;Nav.control.cancelCurrentControlMasterMode()F=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then cU()end;if AutopilotTargetName~=nil then local ji=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if ji and not Autopilot then ad=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ad=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a1,a2=dW(bg)a3,a4=dW(MaxGameVelocity)else a1,a2=dX(bg)a3,a4=dX(MaxGameVelocity)end;local eG,cK=cH(ad)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..eG..'", "unit":"'..cK..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')eG,cK=cH(a1)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..eG..'", "unit":"'..cK..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a2)..'", "unit":""}')eG,cK=cH(a3)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..eG..'", "unit":"'..cK..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a4)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..d("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')eG,cK=cH(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..d("%.2f",eG)..'", "unit":"'..cK..'"}')if ao>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if h()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else cV()end;if warpdrive~=nil then if e(warpdrive.getData()).destination~="Unknown"and e(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif jh=="oneSecond"then al=false;b_(nil,true)updateDistance()updateRadar()updateWeapons()local cR={}local eP=GetFlightStyle()DrawOdometer(cR,a6,TotalDistanceTravelled,eP,a7)if ShouldCheckDamage then CheckDamage(cR)end;af=table.concat(cR,"")collectgarbage("collect")elseif jh=="fiveSecond"then am=dbHud_1.getStringValue("SPBAutopilotTargetName")if am~=nil and am~=""and am~="SatNavNotChanged"then local bK=json.decode(dbHud_1.getStringValue("SavedLocations"))if bK~=nil then _G["SavedLocations"]=bK;local dp=-1;local cF;for bI,bJ in pairs(SavedLocations)do if bJ.name and bJ.name=="SatNav Location"then dp=bI;break end end;if dp~=-1 then cF=SavedLocations[dp]dp=-1;for bI,bJ in pairs(b2[0])do if bJ.name and bJ.name=="SatNav Location"then dp=bI;break end end;if dp>-1 then b2[0][dp]=cF end;cf()X=cF.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==am then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)de()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif jh=="msgTick"then local cR={}DisplayMessage(cR,"empty")X="empty"unit.stopTimer("msgTick")ac=3 elseif jh=="animateTick"then bd=true;bc=false;aa=0;ab=0;unit.stopTimer("animateTick")elseif jh=="hudTick"then local cR={}HUDPrologue(cR)if showHud then UpdateHud(cR)else DisplayOrbitScreen(cR)DrawWarnings(cR)end;HUDEpilogue(cR)cR[#cR+1]=d([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if X~="empty"then DisplayMessage(cR,X)end;if n()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then cQ(cR)end end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cR)if screen_1.getMouseState()==1 then CheckButtons()end;cR[#cR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)elseif system.isViewLocked()==0 then if n()==1 and W then SetButtonContains()DrawButtons(cR)if not bc and not bd then local jj=table.concat(cR,"")cR={}cR[#cR+1]=d("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cR[#cR+1]=b3;cR[#cR+1]=jj;cR[#cR+1]="</body>"bc=true;cR[#cR+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cR,"")system.setScreen(content)elseif bd then local jj=table.concat(cR,"")cR={}cR[#cR+1]=d("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cR[#cR+1]=b3;cR[#cR+1]=jj;cR[#cR+1]="</body>"end;if not bc then cR[#cR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end else CheckButtons()end else if not W and n()==0 then CheckButtons()if ad>DeadZone then if DisplayDeadZone then DrawCursorLine(cR)end end else SetButtonContains()DrawButtons(cR)end;cR[#cR+1]=d([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],G,H,aa,ab)end;cR[#cR+1]=[[</svg></body>]]content=table.concat(cR,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif jh=="apTick"then an=h()>0;ao=h()bF=r()local jk=bF-bl;bl=bF;local d7,d8,jl,da=d6()local jm=vec3(core.getConstructWorldPos())local eQ=getRoll(da,d7,d8)local eR=eQ/180*math.pi;local eS=math.cos(eR)local eT=math.sin(eR)local dc=getPitch(da,d7,d8)local jn=getPitch(da,d7,d8*eS+jl*eT)local jo=-math.deg(dv(jl,bf,d7))local jp=math.deg(dv(d8,bf,d7))bk=an and jo<-YawStallAngle or jo>YawStallAngle or jp<-PitchStallAngle or jp>PitchStallAngle;bi=system.getMouseDeltaX()bj=system.getMouseDeltaY()if InvertMouse and not W then bj=-bj end;Q=0;U=0;P=0;bf=vec3(core.getWorldVelocity())bg=vec3(bf):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bf)ap=core.getAltitude()if ap==0 then ap=(jm-planet.center):len()-planet.radius end;ak=c_()local c0=planet:getGravity(core.getConstructWorldPos()):len()*m()bm=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if not an then z,A,_,_=dz(jm)else z=true end;if n()==1 and screen_1 and screen_1.getMouseY()~=-1 then aa=screen_1.getMouseX()*ResolutionX;ab=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if n()==1 and W then if not bc then aa=aa+bi;ab=ab+bj end else aa=0;ab=0 end else aa=aa+bi;ab=ab+bj;ad=math.sqrt(aa*aa+ab*ab)if not W and n()==0 then if userControlScheme=="virtual joystick"then if aa>0 and aa>DeadZone then Q=Q-(aa-DeadZone)*MouseXSensitivity elseif aa<0 and aa<DeadZone*-1 then Q=Q-(aa+DeadZone)*MouseXSensitivity else Q=0 end;if ab>0 and ab>DeadZone then P=P-(ab-DeadZone)*MouseYSensitivity elseif ab<0 and ab<DeadZone*-1 then P=P-(ab+DeadZone)*MouseYSensitivity else P=0 end elseif userControlScheme=="mouse"then aa=0;ab=0;P=(-utils.smoothstep(bj,-100,100)+0.5)*2*L;Q=(-utils.smoothstep(bi,-100,100)+0.5)*2*M else aa=0;ab=0 end end end;local jq=bg>8334;if bg>SpaceSpeedLimit/3.6 and not an and not Autopilot and not jq then X="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0 end;if not jq and LastIsWarping then if not BrakeIsOn then dI()end;if Autopilot then dj()end end;LastIsWarping=jq;if an and ao>0.09 then if bg>bp/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bg<bp/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then T=1 else T=0 end;if ProgradeIsOn then if ah then BrakeIsOn=false;local jr=false;if CustomTarget~=nil then jr=dM(CustomTarget.position-jm,0.01)else jr=dM(vec3(bf),0.01)end;be=true;if jr and(math.abs(eQ)<2 or math.abs(jn)>85)and bg>=bp/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dT()elseif an and AtmoSpeedAssist then bU(1)else bX(math.floor(bp))B=0 end elseif bg>J then dM(vec3(bf),0.01)end end;if RetrogradeIsOn then if an then RetrogradeIsOn=false elseif bg>J then dM(-vec3(bf))end end;if not ProgradeIsOn and ah then if ao==0 then K=true;dT()ah=false;aj=true else ah=false;dj()end end;local di=vec3(core.getWorldVertical())*-1;local fj=bf.x*di.x+bf.y*di.y+bf.z*di.z;if aj and CustomTarget~=nil and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bg*3.6>bp-100 and math.abs(fj)<20 and ao>=0.1 and(CustomTarget.position-jm):len()>2000+ap then dj()aj=false end;if VertTakeOff then be=true;if fj<-30 then X="Unable to achieve lift. Safety Landing."a9=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if ap<antigrav.getBaseAltitude()-100 then bq=0;a9=15;BrakeIsOn=false elseif fj>0 then BrakeIsOn=true;a9=0 elseif fj<-30 then BrakeIsOn=true;a9=15 elseif ap>=antigrav.getBaseAltitude()then BrakeIsOn=true;a9=0;VertTakeOff=false;X="Takeoff complete. Singularity engaged"end else if ao>0.08 then bq=0;BrakeIsOn=false;a9=20 elseif ao<0.08 and ao>0 then BrakeIsOn=false;if bC then bq=0;a9=20 else a9=0;bq=36;bX(3500)end else be=autoRollPreference;IntoOrbit=true;bA=false;CancelIntoOrbit=false;bu=false;bs=nil;bt=nil;if bz==nil then bz=planet end;VertTakeOff=false end end;if bq~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local js=utils.clamp(bq-jn,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(js)local jt=utils.clamp(vTpitchPID:get(),-1,1)P=jt end end;if IntoOrbit then if bz==nil then if VectorToTarget then bz=a5 else bz=planet end end;if not bx then if bz.hasAtmosphere then by=math.floor(bz.radius*(TargetOrbitRadius-1)+bz.noAtmosphericDensityAltitude)else by=math.floor(bz.radius*(TargetOrbitRadius-1)+bz.surfaceMaxAltitude)end;bx=true end;if AltitudeHold or VectorToTarget then if not ai then by=s(HoldAltitude,1)bu=true;AltitudeHold=false end;if VectorToTarget then bw.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local ju,jv=cH(by,2)local jw=ju..jv;local jx,jy=bb(bz):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bz.center):len()-bz.radius)local jz=eQ;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ap>by*0.9 and ap<by*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=by*0.99 and orbit.apoapsis.altitude>=by*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bA then if bA then BrakeIsOn=false;B=0;bU(0)bA=true;bs=0;if bw.VectorToTarget then local dQ=CustomTarget.position-jm;local a1,_=b9.computeDistanceAndTime(bg,bp/3.6,m(),0,0,LastMaxBrake)if bf:normalize():dot(dQ:normalize())>0.5 and dQ:len()>15000+a1+ap then br="Orbiting to Target"else X="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;K=true;aj=true;dT()bw.VectorToTarget=false end end;if not bw.VectorToTarget then br=nil;bv=false;bx=false;bz=nil;be=autoRollPreference;if not aj then X="Orbit established"end;bw.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bu=false;bs=nil;bt=nil;bz=nil;bA=false;bE=0 end else bE=bE+1;if bE>=2 then bA=true end end else br="Adjusting Orbit - OrbitHeight: "..jw;bv=true;bX(jy*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jA=fj;local jB=ap-by;local jC=math.abs(jB)if fj<10 and math.abs(jn)<10 and jC<100 then jA=fj*2 end;if jA<10 and math.abs(jn)<10 and jC<100 then jA=jA*2 end;if jA<5 and math.abs(jn)<5 and jC<100 then jA=jA*4 end;VSpdPID:inject(jA)bs=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jB)bs=utils.clamp(bs-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jD=2.75;local jE=math.abs(q(jx*jD))local jF=jE%50;if jF>0 then jE=jE-jF+50 end;BrakeIsOn=false;if not bu then local jG=false;local jH=false;if ap<by then br="Aligning to orbital path - OrbitHeight: "..jw else br="Aligning to orbital point - OrbitHeight: "..jw end;bs=0;bt=0;if jn<=bs+1 and jn>=bs-1 then jG=true else jG=false end;if jz<=bt+1 and jz>=bt-1 then jH=true else jH=false end;if jG and jH then bs=nil;bt=nil;bu=true end else if ap<by*0.8 then br="Escaping planet gravity - OrbitHeight: "..jw;bs=utils.map(fj,200,0,-15,80)elseif ap>=by*0.8 and ap<by*1.15 then br="Approaching orbital corridor - OrbitHeight: "..jw;jE=jE*0.75;bs=utils.map(fj,100,-100,-15,65)elseif ap>=by*1.15 and ap<by*1.5 then br="Approaching orbital corridor - OrbitHeight: "..jw;jE=jE*0.75;if fj<0 or bv then bs=utils.map(ap,by*1.5,by*1.01,-30,0)else bs=utils.map(ap,by*0.99,by*1.5,0,30)end elseif ap>by*1.5 then br="Reentering orbital corridor - OrbitHeight: "..jw;bs=utils.map(fj,100,-100,-65,0)jE=jE*0.75 end end;bX(math.floor(jE))end;if bs~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jI=bs-jn;OrbitPitchPID:inject(jI)local jJ=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)P=jJ end;if bt~=nil then if jn<85 then local jK=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jK*0.01,0,jK*0.1)end;local jL=bt-jz;OrbitRollPID:inject(jL)local jM=utils.clamp(OrbitRollPID:get(),-0.5,0.5)U=jM end end elseif CancelIntoOrbit then bx=false;bz=nil;bU(0)CancelIntoOrbit=false end;if Autopilot and ao==0 and not ah then local jN,jO=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jP=(CustomTarget.position-a5.center):normalize()local jQ=jP:project_on_plane((a5.center-jm):normalize()):normalize()local jR=a5.center+jQ*(a5.radius+AutopilotTargetOrbit)local jS=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))if(jm-jR):len()<(jm-jS):len()then jN=jR;AutopilotTargetCoords=jN else jN=CustomTarget.position+(CustomTarget.position-a5.center):normalize()*(AutopilotTargetOrbit-a5:getAltitude(CustomTarget.position))AutopilotTargetCoords=jN end;local dk=cn(a5,AutopilotTargetCoords)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)jO=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jO=true;TargetSet=true;AutopilotRealigned=true;jN=CustomTarget.position+(jm-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jP=(jm+bf*100000-a5.center):normalize()local jQ=jP:project_on_plane((a5.center-jm):normalize()):normalize()if jQ:len()<1 then jP=(jm+d7*100000-a5.center):normalize()jQ=jP:project_on_plane((a5.center-jm):normalize()):normalize()end;jN=a5.center+jQ*(a5.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jN;TargetSet=true;jO=true;AutopilotRealigned=true;local dk=cn(a5,AutopilotTargetCoords)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)end end;AutopilotDistance=(vec3(jN)-vec3(core.getConstructWorldPos())):len()local gh,gi,gj=b8:getPlanetarySystem(0):castIntersections(jm,bf:normalize(),function(gk)if gk.noAtmosphericDensityAltitude>0 then return gk.radius+gk.noAtmosphericDensityAltitude else return gk.radius+gk.surfaceMaxAltitude*1.5 end end)local gl=gi;if gj~=nil and gi~=nil then gl=math.min(gj,gi)end;if gl~=nil and gl<AutopilotDistance and gh.name==a5.name then AutopilotDistance=gl end;local jr=true;local jT=(a5.center-(vec3(core.getConstructWorldPos())+vec3(bf):normalize()*AutopilotDistance)):len()-a5.radius;local eG,cK=cH(jT)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..eG..'", "unit":"'..cK..'"}')local a1,a2;if not TurnBurn then a1,a2=dW(bg)else a1,a2=dX(bg)end;if bg>300 and AutopilotAccelerating then local dQ=vec3(jN)-vec3(core.getConstructWorldPos())local jU=utils.clamp(math.deg(dv(jl,bf:normalize(),dQ:normalize()))*bg/500,-90,90)local jV=utils.clamp(math.deg(dv(d8,bf:normalize(),dQ:normalize()))*bg/500,-90,90)if math.abs(jU)<20 and math.abs(jV)<20 then jU=jU*2;jV=jV*2 end;if math.abs(jU)<2 and math.abs(jV)<2 then jU=jU*2;jV=jV*2 end;local jo=-math.deg(dv(jl,d7,bf:normalize()))local jp=-math.deg(dv(d8,d7,bf:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jV-jp)local jW=utils.clamp(apPitchPID:get(),-1,1)P=P+jW;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jU-jo)local jX=utils.clamp(apYawPID:get(),-1,1)Q=Q+jX;jO=true;if math.abs(jU)>2 or math.abs(jV)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jT<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a5):escapeAndOrbitalSpeed(jT)end end;if not AutopilotCruising and not AutopilotBraking and not jO then jr=dM((jN-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then jr=dM(-vec3(bf):normalize())end;if AutopilotAccelerating then if not I then BrakeIsOn=false;bU(AutopilotInterplanetaryThrottle)B=s(AutopilotInterplanetaryThrottle,2)I=true end;local gF=unit.getThrottle()if AtmoSpeedAssist then gF=B end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or gF==0 and I then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;bU(0)B=0 end;if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;bU(0)B=0;I=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;T=1 end;if TurnBurn then bU(100,true)B=1 end;local _,jy=bb(a5):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dQ;if CustomTarget~=nil then dQ=CustomTarget.position-jm end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bg<50 then X="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bg<=jy and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bU(0)B=0;I=false;ProgradeIsOn=true;ah=true;local dk=cn(a5,AutopilotTargetCoords)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,jy=bb(a5):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bg<=jy then if CustomTarget~=nil then if bf:normalize():dot(dQ:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local dk=cn(a5,CustomTarget.position)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)WaypointSet=true end else X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"bU(0)B=0;I=false;ProgradeIsOn=true;ah=true;BrakeIsOn=false;local dk=cn(a5,CustomTarget.position)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X="Autopilot completed, orbit established"T=0;B=0;I=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ah=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a1 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local gF=unit.getThrottle()if AtmoSpeedAssist then gF=B end;if gF>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if jr then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ah then AutopilotTargetCoords=vec3(a5.center)+(AutopilotTargetOrbit+a5.radius)*d8;AutopilotShipUp=jl;AutopilotShipRight=d8 end;AutopilotRealigned=true elseif jr then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not I then bU(AutopilotInterplanetaryThrottle,true)B=s(AutopilotInterplanetaryThrottle,2)I=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ao>0)then X="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"T=0;bU(0)B=0;I=false;ProgradeIsOn=true;ah=true;local dk=cn(a5,CustomTarget.position)dk="::pos{"..dk.systemId..","..dk.bodyId..","..dk.latitude..","..dk.longitude..","..dk.altitude.."}"system.setWaypoint(dk)end;if V then be=true;local jV=0;local cx=jm+vec3(unit.getMasterPlayerRelativePosition())local jY=cx-jm;local jZ=vec3(jY):project_on(d7):len()local j_=vec3(jY):project_on(d8):len()local ad=math.sqrt(jZ*jZ+j_*j_)dM(jY:normalize())local k0=40;local k1=ad<k0;local k2=100;local h7=utils.clamp((ad-k0)/2,10,k2)P=0;local jr=math.abs(Q)<0.1;if jr and bg<h7 and not k1 then BrakeIsOn=false;jV=-20 else BrakeIsOn=true;jV=0 end;local k3=0;if math.abs(jV-dc)>k3 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jV-dc)local jW=pitchPID:get()P=jW end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dl=unit.getClosestPlanetInfluence()>0;local k4=HoldAltitude-ap;local k5=500+bg;local k6=1;if AutoTakeoff then k6=utils.clamp(bg/100,0.1,1)end;local jV=(utils.smoothstep(k4,-k5,k5)-0.5)*2*MaxPitch*k6;if not Reentry and not ah and not VectorToTarget and d7:dot(bf:normalize())<0.99 then jV=(utils.smoothstep(k4,-k5*utils.clamp(20-19*ao*10,1,20),k5*utils.clamp(20-19*ao*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-ao*10,1,2)*k6 end;if not AltitudeHold then jV=0 end;if LockPitch~=nil then if dl and not IntoOrbit then jV=LockPitch else LockPitch=nil end end;be=true;local k7=P;if Reentry then local ReentrySpeed=math.floor(bp)local k8,k9=b9.computeDistanceAndTime(bg,ReentrySpeed/3.6,m(),0,0,LastMaxBrake-planet.gravity*9.8*m())local ka=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bg<=ReentrySpeed/3.6 and bg>ReentrySpeed/3.6-10 and math.abs(bf:normalize():dot(d7))>0.9 then Nav.control.cancelCurrentControlMasterMode()B=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(k8>-1 and ka<=k8 or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;bX(ReentrySpeed,true)if not K then jV=-80;if ao>0.02 then X="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jV=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then bX(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bp then K=false;Reentry=false;be=true end end end;if bg>J and not ai and not VectorToTarget and not BrakeLanding and ForceAlignment then dM(vec3(bf))end;if(VectorToTarget or ai)and AutopilotTargetIndex>0 and ao>0.01 then local dQ;if CustomTarget~=nil then dQ=CustomTarget.position-vec3(core.getConstructWorldPos())else dQ=a5.center-jm end;local jU=math.deg(dv(da:normalize(),bf,dQ))*2;local kb=math.rad(math.abs(eQ))if bg>minRollVelocity and ao>0.01 then local kc=utils.clamp(90-jV*2,-90,90)bm=utils.clamp(jU*2,-kc,kc)local kd=jU;jU=utils.clamp(utils.clamp(jU,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(kb)+4*(jn-jV)*math.sin(math.rad(eQ)),-YawStallAngle*0.85,YawStallAngle*0.85)jV=utils.clamp(utils.clamp(jV*math.cos(kb),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(kd)*math.sin(kb),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bm=0;jU=utils.clamp(jU,-YawStallAngle*0.85,YawStallAngle*0.85)end;local ke=jo-jU;if not bk and bg>minRollVelocity and ao>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(ke)local jX=utils.clamp(yawPID:get(),-1,1)Q=Q+jX elseif an and ak>-1 or bg<minRollVelocity then dM(dQ)elseif bk and ao>0.01 then if(jo<-YawStallAngle or jo>YawStallAngle)and ao>0.01 then dM(bf)end;if(jp<-PitchStallAngle or jp>PitchStallAngle)and ao>0.01 then jV=utils.clamp(jn-jp,jn-PitchStallAngle*0.85,jn+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ai then local kf=planet:getAltitude(CustomTarget.position)local ka=math.sqrt(dQ:len()^2-(ap-kf)^2)local kg=LastMaxBrakeInAtmo;if kg then kg=kg*utils.clamp(bg/100,0.1,1)*ao else kg=LastMaxBrake end;if ao<0.01 then kg=LastMaxBrake end;local kh=bf:len()-math.abs(fj)local ki=vec3(core.getWorldAirFrictionAcceleration())local kj=math.sqrt(ki:len()-ki:project_on(di):len())*m()if bg>100 then a1,a2=b9.computeDistanceAndTime(bg,100,m(),0,0,kg+kj)local kk,kl=b9.computeDistanceAndTime(100,0,m(),0,0,kg/2)a1=a1+kk else a1,a2=b9.computeDistanceAndTime(bg,0,m(),0,0,kg/2)end;StrongBrakes=true;if not ai and not Reentry and ka<=a1+bg*jk/2 and(bf:project_on_plane(da):normalize():dot(dQ:project_on_plane(da):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"bU(0)B=0;if AltitudeHold then d2()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(kh<0.1 or ka<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<ka)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=ka end elseif VectorToTarget and ao==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ai or Reentry)then if CustomTarget~=nil and a5.name==planet.name then local dQ=CustomTarget.position-vec3(core.getConstructWorldPos())local kf=planet:getAltitude(CustomTarget.position)local ka=math.sqrt(dQ:len()^2-(ap-kf)^2)local kg=LastMaxBrakeInAtmo;if not bA then bx=false;IntoOrbit=true else kg=LastMaxBrake;a1,a2=b9.computeDistanceAndTime(bg,0,m(),0,0,kg/2)StrongBrakes=true;if ka<=a1+bg*jk/2 and bf:project_on_plane(da):normalize():dot(dQ:project_on_plane(da):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;K=true;ah=false;aj=true;Autopilot=false;dT()end end;LastDistanceToTarget=ka end end end;if ao==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ai or VectorToTarget or IntoOrbit or Reentry)then if not bA then IntoOrbit=true end end;if bk and ao>0.01 and ak==-1 and bg>minRollVelocity and VectorStatus~="Finalizing Approach"then dM(bf)jV=utils.clamp(jn-jp,jn-PitchStallAngle*0.85,jn+PitchStallAngle*0.85)end;P=k7;local gM=-1;if BrakeLanding then jV=0;local km=false;local kn=30;if ba~=nil and ba>0 then local kj=0;local f8=utils.clamp(ao,0.4,2)local kg=LastMaxBrakeInAtmo*utils.clamp(bg/100,0.1,1)*f8;local ko=ba*f8+kg+kj-c0;local kp=kg/2+kj-c0;local kq=bg-math.sqrt(math.abs(kp/2)*20/(0.5*m()))*utils.sign(kp)if kq<0 then kq=0 end;local kr;if bg>100 then local ks,_=b9.computeDistanceAndTime(bg,100,m(),0,0,kg)local kt,_=b9.computeDistanceAndTime(100,0,m(),0,0,math.sqrt(kg))kr=ks+kt else kr=b9.computeDistanceAndTime(bg,0,m(),0,0,math.sqrt(kg))end;if kr<20 then BrakeIsOn=false else local ku=0;if kq>100 then local kv,_=b9.computeDistanceAndTime(kq,100,m(),0,0,ko)local kw,_=b9.computeDistanceAndTime(100,0,m(),0,0,ba*f8+math.sqrt(kg)+kj-c0)ku=kv+kw else ku,_=b9.computeDistanceAndTime(kq,0,m(),0,0,ba*f8+math.sqrt(kg)+kj-c0)end;ku=(ku+15+bg*jk)*1.1;local kx=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if kx then local kf=planet:getAltitude(CustomTarget.position)local ky=ap-kf-100;local dQ=CustomTarget.position-vec3(core.getConstructWorldPos())local kz=math.sqrt(dQ:len()^2-(ap-kf)^2)if kz>100 then kx=false elseif ky<=ku or ku==-1 then BrakeIsOn=true;km=true else BrakeIsOn=false;km=true end end;if not kx and CalculateBrakeLandingSpeed then if ku>=kn then BrakeIsOn=true else BrakeIsOn=false end;km=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)gM=ak;if gM>-1 then be=autoRollPreference;if bg<1 or bf:normalize():dot(da)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a9=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bf:normalize():dot(-di)<0.999 then BrakeIsOn=true elseif fj<-brakeLandingRate and not km then BrakeIsOn=true elseif not km then BrakeIsOn=false end end;if AutoTakeoff or ai then local gh,gj,gi;if AutopilotTargetCoords~=nil then gh,gj,gi=b8:getPlanetarySystem(0):castIntersections(jm,(AutopilotTargetCoords-jm):normalize(),function(gk)return gk.radius+gk.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if ap>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;bU(0)B=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jV)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not ai then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ai and bg<J then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;bU(0)B=0 elseif ai then bU(0)B=0;BrakeIsOn=true end elseif ai and ao==0 and a5~=nil and(gh==nil or gh.name==a5.name)then Autopilot=true;ai=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kA=c_()>-1;local kB=dc;if(VectorToTarget or ai)and not kA and bg>minRollVelocity and ao>0.01 then local kb=math.rad(math.abs(eQ))kB=dc*math.abs(math.cos(kb))+jp*math.sin(kb)end;local kC=utils.clamp(jV-kB,-PitchStallAngle*0.85,PitchStallAngle*0.85)if ao<0.01 and VectorToTarget then kC=utils.clamp(jV-kB,-85,MaxPitch)elseif ao<0.01 then kC=utils.clamp(jV-kB,-MaxPitch,MaxPitch)end;if math.abs(eQ)<5 or VectorToTarget or BrakeLanding or kA or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(kC)local jW=pitchPID:get()P=P+jW end end;if antigrav~=nil and(antigrav and not ExternalAGG and ap<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and F then B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)F=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not F then B=0;F=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local kD=utils.clamp(O+P+system.getControlDeviceForwardInput(),-1,1)local kE=utils.clamp(R+U+system.getControlDeviceYawInput(),-1,1)local kF=utils.clamp(S+Q-system.getControlDeviceLeftRightInput(),-1,1)local kG=T;local kH=vec3(core.getWorldVertical())if kH==nil or kH:len()==0 then kH=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local kI=vec3(core.getConstructWorldOrientationUp())local kJ=vec3(core.getConstructWorldOrientationForward())local kK=vec3(core.getConstructWorldOrientationRight())local kL=vec3(core.getWorldVelocity())local kM=vec3(core.getWorldVelocity()):normalize()local kN=getRoll(kH,kJ,kK)local kO=math.abs(kN)local kP=utils.sign(kN)local kQ=vec3(core.getWorldAngularVelocity())local kR=kD*pitchSpeedFactor*kK+kE*rollSpeedFactor*kJ+kF*yawSpeedFactor*kI;if kH:len()>0.01 and(ao>0.0 or ProgradeIsOn or Reentry or ah or AltitudeHold)then local eQ=getRoll(kH,kJ,kK)local eR=eQ/180*math.pi;local eS=math.cos(eR)local eT=math.sin(eR)local jn=getPitch(kH,kJ,kK*eS+kI*eT)if be==true and math.abs(bm-kN)>autoRollRollThreshold and kE==0 and math.abs(jn)<85 then local kS=bm;local jK=autoRollFactor;if ao==0 then jK=jK/4;bm=0;kS=0 end;if rollPID==nil then rollPID=pid.new(jK*0.01,0,jK*0.1)end;rollPID:inject(kS-kN)local kT=rollPID:get()kR=kR+kT*kJ end end;if kH:len()>0.01 and ao>0.0 then local kU=20.0;if turnAssist==true and kO>kU and kD==0 and kF==0 then local kV=turnAssistFactor*0.1;local kW=turnAssistFactor*0.025;local kX=(kO-kU)/(180-kU)*180;local kY=0;if kX<90 then kY=kX/90 elseif kX<180 then kY=(180-kX)/90 end;kY=kY*kY;local kZ=-kP*kW*(1.0-kY)local k_=kV*kY;kR=kR+k_*kK+kZ*kI end end;local l0=1;local l1=0;local l2=1;if system.getMouseWheel()>0 then if AltIsOn then if ao>0 or Reentry then bp=utils.clamp(bp+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if ao>0 or Reentry then bp=utils.clamp(bp-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end else B=s(utils.clamp(B-speedChangeLarge/100,-1,1),2)end end;C=0;local fj=-kH:dot(kL)if an and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bp/3.6-kL:dot(kJ))local l3=throttlePID:get()E=utils.clamp(l3,-1,1)if E<B and ao>0.005 then D=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(E,0.01,1))else D=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kL:len()-bp/3.6)local l4=utils.clamp(brakePID:get(),0,1)if ao>0 and fj<-80 or ao>0.005 then C=l4 end;if C>0 then if D and E==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else E=utils.clamp(E,0.01,1)end;local l5=''local l6=vec3()local l7=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a9*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",l7,l1)local l8='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l8=l8 ..ExtraLongitudeTags end;local l9=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local la=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l8,axisCommandId.longitudinal)local lb=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)l5=l5 ..' , '.."lateral airfoil , lateral ground "l6=l6+lb;if l6:len()>constants.epsilon then Nav:setEngineForceCommand(l5,l6,l1,'','','',l2)end;Nav:setEngineForceCommand(l8,la,l0)local lc='thrust analog vertical fueled 'local ld='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ld=ld..ExtraLateralTags end;if ExtraVerticalTags~="none"then lc=lc..ExtraVerticalTags end;if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lc,l7,l0)else Nav:setEngineForceCommand(lc,vec3(),l0)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ld,lb,l0)else Nav:setEngineForceCommand(ld,vec3(),l0)end;if kG==0 then kG=C end;local le=-kG*(brakeSpeedFactor*kL+brakeFlatFactor*kM)Nav:setEngineForceCommand('brake',le)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,B)end;local h7=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kL:len()-h7/3.6)local l4=utils.clamp(brakePID:get(),0,1)kG=utils.clamp(kG+l4,0,1)end;local le=-kG*(brakeSpeedFactor*kL+brakeFlatFactor*kM)Nav:setEngineForceCommand('brake',le)local l5=''local l6=vec3()local lf=false;local l8='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then l8=l8 ..ExtraLongitudeTags end;local l9=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if l9==axisCommandType.byThrottle then local la=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(l8,axisCommandId.longitudinal)Nav:setEngineForceCommand(l8,la,l0)elseif l9==axisCommandType.byTargetSpeed then local la=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)l5=l5 ..' , '..l8;l6=l6+la;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then lf=true end end;local ld='thrust analog lateral 'if ExtraLateralTags~="none"then ld=ld..ExtraLateralTags end;local lg=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if lg==axisCommandType.byThrottle then local lh=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ld,axisCommandId.lateral)Nav:setEngineForceCommand(ld,lh,l0)elseif lg==axisCommandType.byTargetSpeed then local lb=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)l5=l5 ..' , '..ld;l6=l6+lb end;local lc='thrust analog vertical 'if ExtraVerticalTags~="none"then lc=lc..ExtraVerticalTags end;local li=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if li==axisCommandType.byThrottle then local l7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lc,axisCommandId.vertical)if a9~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(lc,l7,l0,'airfoil','ground','',l2)else Nav:setEngineForceCommand(lc,vec3(),l0)Nav:setEngineForceCommand('airfoil vertical',l7,l0,'airfoil','','',l2)Nav:setEngineForceCommand('ground vertical',l7,l0,'ground','','',l2)end elseif li==axisCommandType.byTargetSpeed then if a9<0 then Nav:setEngineForceCommand('hover',vec3(),l0)end;local lj=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)l5=l5 ..' , '..lc;l6=l6+lj end;if l6:len()>constants.epsilon then if T~=0 or lf or math.abs(kM:dot(kJ))<0.8 then l5=l5 ..', brake'end;Nav:setEngineForceCommand(l5,l6,l1,'','','',l2)end end;local lk=torqueFactor*(kR-kQ)local ll=vec3(core.getWorldAirFrictionAngularAcceleration())lk=lk-ll;Nav:setEngineTorqueCommand('torque',lk,l0,'airfoil','','',l2)Nav:setBoosterCommand('rocket_engine')if a0 and not VanillaRockets then local c2=vec3(core.getVelocity()):len()local lm=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ln=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c2*3.6>ln*(1-lm)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c2*3.6<ln*(1-lm)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local gF=unit.getThrottle()if AtmoSpeedAssist then gF=B*100 end;local h7=gF/100;if h==0 then h7=h7*MaxGameVelocity;if c2>=h7*(1-lm)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c2<h7*(1-lm)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else h7=h7*ReentrySpeed/3.6;if c2>=h7*(1-lm)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c2<h7*(1-lm)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bK=coroutine.resume(beginSetup)if bK then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(lo)if lo=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)B=0;if(vBooster or hover)and ak==-1 and(ao>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if N and not BrakeLanding then Nav.control.extendLandingGears()end else if N then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif lo=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif lo=="forward"then O=O-1 elseif lo=="backward"then O=O+1 elseif lo=="left"then R=R-1 elseif lo=="right"then R=R+1 elseif lo=="yawright"then S=S-1 elseif lo=="yawleft"then S=S+1 elseif lo=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif lo=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif lo=="up"then a9=a9+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif lo=="down"then a9=a9-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif lo=="groundaltitudeup"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif lo=="groundaltitudedown"then OldButtonMod=Y;OldAntiMod=Z;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif lo=="option1"then dh()elseif lo=="option2"then dh(1)elseif lo=="option3"then if n()==0 and freeLookToggle then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end elseif n()==0 and not freeLookToggle and userControlScheme=="keyboard"then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end end elseif lo=="option4"then dj()elseif lo=="option5"then db()elseif lo=="option6"then d2()elseif lo=="option7"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;cT()elseif lo=="option8"then dd()elseif lo=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end elseif lo=="lshift"then if system.isViewLocked()==1 then W=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif n()==1 and ShiftShowsRemoteButtons then W=true;bd=false;bc=false end elseif lo=="brake"then if BrakeToggleStatus then dI()elseif not BrakeIsOn then dI()else BrakeIsOn=true end elseif lo=="lalt"then AltIsOn=true elseif lo=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a0 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a0=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a0=false end elseif lo=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()B=0 elseif lo=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else dh()end elseif lo=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else dh(1)end elseif lo=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(lo)if lo=="forward"then O=0 elseif lo=="backward"then O=0 elseif lo=="left"then R=0 elseif lo=="right"then R=0 elseif lo=="yawright"then S=0 elseif lo=="yawleft"then S=0 elseif lo=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif lo=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif lo=="up"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lo=="down"then a9=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif lo=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lo=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Z=OldAntiMod end;if AltitudeHold then Y=OldButtonMod end elseif lo=="lshift"then if system.isViewLocked()==1 then W=false;aa=0;ab=0;system.lockView(PrevViewLock)elseif n()==1 and ShiftShowsRemoteButtons then W=false;bd=false;bc=false end elseif lo=="brake"then if not BrakeToggleStatus then if BrakeIsOn then dI()else BrakeIsOn=false end end elseif lo=="lalt"then AltIsOn=false end end;function script.onActionLoop(lo)if lo=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Z;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Z end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif lo=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Z;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Z=Z*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Y;Y=Y*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif lo=="speedup"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif lo=="speeddown"then if not W then if AtmoSpeedAssist and not AltIsOn then B=utils.clamp(B-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dU)local i;local lp="/commands /setname /G /agg /addlocation /copydatabank /wipedatabank"local lq,lr=nil,nil;local ls="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dU," ")lq=dU;if i~=nil then lq=string.sub(dU,0,i-1)lr=string.sub(dU,i+1)elseif not string.find(lp,lq)then for h3 in string.gmatch(ls,"([^\n]+)")do system.print(h3)end;return end;if lq=="/setname"then if lr==nil or lr==""then X="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then dm(lr)else X="Select a saved target to rename first"end elseif lq=="/addlocation"then if lr==nil or lr==""or string.find(lr,"::")==nil then X="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(lr,"::")local cE=string.sub(lr,1,i-2)local cx=string.sub(lr,i)local t=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cy='::pos{'..t..','..t..','..t..','..t..','..t..'}'local cz,cA,ct,cu,cs=p(cx,cy)local planet=b2[tonumber(cz)][tonumber(cA)]cD(cE,planet,cx)X="Added "..cE.." to saved locations,\nplanet "..planet.name.." at "..cx;ac=5 elseif lq=="/agg"then if lr==nil or lr==""then X="Usage: /agg targetheight"return end;lr=tonumber(lr)if lr<1000 then lr=1000 end;AntigravTargetAltitude=lr;X="AGG Target Height set to "..lr elseif lq=="/G"then if lr==nil or lr==""then X="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if lr=="dump"then for bI,bJ in pairs(a)do if type(_G[bJ])=="boolean"then if _G[bJ]==true then system.print(bJ.." true")else system.print(bJ.." false")end elseif _G[bJ]==nil then system.print(bJ.." nil")else system.print(bJ.." ".._G[bJ])end end;return end;i=string.find(lr," ")local lt=string.sub(lr,0,i-1)local lu=string.sub(lr,i+1)for bI,bJ in pairs(a)do if bJ==lt then X="Variable "..lt.." changed to "..lu;local lv=type(_G[bJ])if lv=="number"then lu=tonumber(lu)elseif lv=="boolean"then if string.lower(lu)=="true"then lu=true else lu=false end end;_G[bJ]=lu;return end end;X="No such global variable: "..lt elseif lq=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else X="Spare Databank required to copy databank"end elseif lq=="/wipedatabank"then if dbHud_1 then wipeSaveVariables()else X="No databank found."end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
