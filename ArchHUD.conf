name: ArchHud - Archaegeo v1.701 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        require("autoconf/custom/archhud/globals")local a=Navigator.new(system,core,unit)local b=require("atlas")require("autoconf/custom/archhud/hudclass")require("autoconf/custom/archhud/apclass")script={}VERSION_NUMBER=1.701;local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=system.getTime;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local x=math.sqrt;local y=tonumber;local function z(A,B)local C=10^(B or 0)return d(A*C+0.5)/C end;time=o()local D=o()local E=13;PrimaryR=SafeR;PrimaryB=SafeB;PrimaryG=SafeG;PlayerThrottle=0;brakeInput2=0;ThrottleLimited=false;calculatedThrottle=0;WasInCruise=false;apThrottleSet=false;minAutopilotSpeed=55;reentryMode=false;hasGear=false;local F=0;pitchInput2=0;yawInput2=0;local G=0;local H=0;brakeInput=0;rollInput2=0;followMode=false;holdingShift=false;msgText="empty"local I=5;local J=5;local K=I;local L=J;isBoosting=false;brakeDistance=0;brakeTime=0;local M=0;local N=0;autopilotTargetPlanet=nil;totalDistanceTrip=0;flightTime=0;upAmount=0;simulatedX=0;simulatedY=0;msgTimer=3;distance=0;lastOdometerOutput=""spaceLand=false;spaceLaunch=false;finalLand=false;abvGndDet=-1;local O=""inAtmo=j()>0;atmosDensity=j()coreAltitude=core.getAltitude()local P=core.getElementIdList()lastTravelTime=o()coreMass=core.getConstructMass()local Q=false;gyroIsOn=nil;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local R={}damageMessage=""local S=true;resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;atmoTanks={}spaceTanks={}rocketTanks={}local T=0;repairArrows=false;local U=nil;galaxyReference=nil;Kinematic=nil;maxKinematicUp=nil;Kep=nil;HUD=nil;ATLAS=nil;AP=nil;RADAR=nil;Animating=false;Animated=false;autoRoll=autoRollPreference;local V=LandingGearGroundHeight;stalling=false;targetRoll=0;adjustedAtmoSpeedLimit=AtmoSpeedLimit;VtPitch=0;orbitMsg=nil;orbitalParams={VectorToTarget=false}OrbitTargetOrbit=0;OrbitAchieved=false;local W=false;SpaceEngineVertDn=false;SpaceEngines=false;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())coreVelocity=vec3(core.getVelocity())constructVelocity=vec3(core.getWorldVelocity())velMag=vec3(constructVelocity):len()worldVertical=vec3(core.getWorldVertical())vSpd=-worldVertical:dot(constructVelocity)worldPos=vec3(core.getConstructWorldPos())UpVertAtmoEngine=false;antigravOn=false;setCruiseSpeed=nil;throttleMode=true;adjustedPitch=0;adjustedRoll=0;AtlasOrdered={}notPvPZone=false;pvpDist=50000;ReversalIsOn=nil;local X={}nearPlanet=unit.getClosestPlanetInfluence()>0 or coreAltitude>0 and coreAltitude<200000;collisionAlertStatus=false;collisionTarget=nil;radars={}rType="Atmo"apButtonsHovered=false;apScrollIndex=0;passengers=nil;ships=nil;planetAtlas={}scopeFOV=90;oldShowHud=showHud;function p(Y)system.print(time..": "..Y)end;local function Z(a0)local C=1;if a0 then C=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn and Q then local a1=PlayerThrottle;PlayerThrottle=z(q(PlayerThrottle+C*speedChangeLarge/100,-1,1),2)if PlayerThrottle>=0 and a1<0 then PlayerThrottle=0;Q=false end elseif AltIsOn then if atmosDensity>0 or Reentry then adjustedAtmoSpeedLimit=q(adjustedAtmoSpeedLimit+C*speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+C*speedChangeLarge/3.6*100,0,8333.00)end else r:updateCommandFromActionStart(axisCommandId.longitudinal,C*speedChangeLarge)end else if Autopilot or VectorToTarget or spaceLaunch or IntoOrbit then apScrollIndex=apScrollIndex+1*C*-1;if apScrollIndex>#AtlasOrdered then apScrollIndex=1 end;if apScrollIndex<1 then apScrollIndex=#AtlasOrdered end else if not a0 then C=1 else C=nil end;ATLAS.adjustAutopilotTargetIndex(C)end end end;function play(a2,a3,type)if type==nil and not voices or type~=nil and not alerts or soundFolder=="archHUD"then return end;if type~=nil then if type==2 then system.logInfo("sound_loop|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)else system.logInfo("sound_notification|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)end else system.logInfo("sound_q|audiopacks/"..soundFolder.."/"..a2 .."|"..a3 .."|"..soundVolume)end end;function addTable(a4,a5)for i=1,#a5 do a4[#a4+1]=a5[i]end;return a4 end;function saveableVariables(a6)local a7={}if not a6 then addTable(a7,saveableVariablesBoolean)addTable(a7,savableVariablesHandling)addTable(a7,savableVariablesHud)addTable(a7,savableVariablesPhysics)return a7 elseif a6=="boolean"then return saveableVariablesBoolean elseif a6=="handling"then return savableVariablesHandling elseif a6=="hud"then return savableVariablesHud elseif a6=="physics"then return savableVariablesPhysics end end;local function a8(a9,aa,ab,ac,ad)if ac==nil then ac=""end;if ad==nil then ad=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],ac,a9,aa,ad,ab)end;function float_eq(ae,af)if ae==0 then return c(af)<1e-09 end;if af==0 then return c(ae)<1e-09 end;return c(ae-af)<math.max(c(ae),c(af))*epsilon end;function getDistanceDisplayString(distance,ag)local ah=distance>100000;if ag==nil then ag=1 end;if ah then return z(distance/1000/200,ag).."SU"elseif distance<1000 then return z(distance,ag).."M"else return z(distance/1000,ag).."KM"end end;function FormatTimeString(ai)local aj=0;local ak=0;local al=0;if ai<60 then ai=d(ai)elseif ai<3600 then aj=d(ai/60)ai=d(ai%60)elseif ai<86400 then ak=d(ai/3600)aj=d(ai%3600/60)else al=d(ai/86400)ak=d(ai%86400/3600)end;if al>0 then return al.."d "..ak.."h "elseif ak>0 then return ak.."h "..aj.."m "elseif aj>0 then return aj.."m "..ai.."s"elseif ai>0 then return ai.."s"else return"0s"end end;local function am(an)local function ao(ap)for aq,ar in pairs(ap)do dbHud_1.setStringValue(ar,g(_G[ar]))if an and dbHud_2 then dbHud_2.setStringValue(ar,g(_G[ar]))end end end;if dbHud_1 then ao(autoVariables)ao(saveableVariables())system.print("Saved Variables to Datacore")if an and dbHud_2 then msgText="Databank copied.  Remove copy when ready."end end end;local function as()local function at(au)return type(au)=='number'end;local function av(au)return type(y(au))=='number'end;local function aw(ax)return type(ax)=='table'end;local function ay(az)return type(az)=='string'end;local function aA(ar)return aw(ar)and at(ar.x and ar.y and ar.z)end;local function aB(aC)return aw(aC)and at(aC.latitude and aC.longitude and aC.altitude and aC.id and aC.systemId)end;local aD=math.pi/180;local aE=180/math.pi;local epsilon=1e-10;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF='::pos{'..A..','..A..','..A..','..A..','..A..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function aG(au)local aH=string.gsub(string.reverse(e('%.4f',au)),'^0*%.?','')return aH==''and'0'or string.reverse(aH)end;local function aI(aJ)if aA(aJ)then return e('{x=%.3f,y=%.3f,z=%.3f}',aJ.x,aJ.y,aJ.z)end;if aw(aJ)and not getmetatable(aJ)then local aK={}local aL=next(aJ)if type(aL)=='nil'or aL==1 then aK=aJ else for aq,ar in pairs(aJ)do local aM=aI(ar)if type(aq)=='number'then table.insert(aK,e('[%s]=%s',aq,aM))else table.insert(aK,e('%s=%s',aq,aM))end end end;return e('{%s}',table.concat(aK,','))end;if ay(aJ)then return e("'%s'",aJ:gsub("'",[[\']]))end;return tostring(aJ)end;local aN={}aN.__index=aN;aN.__tostring=function(aJ,aO)local aP={}for aq in pairs(aJ)do table.insert(aP,aq)end;table.sort(aP)local aK={}for _,aq in ipairs(aP)do local aM=aI(aJ[aq])if type(aq)=='number'then table.insert(aK,e('[%s]=%s',aq,aM))else table.insert(aK,e('%s=%s',aq,aM))end end;if aO then return e('%s%s',aO,table.concat(aK,',\n'..aO))end;return e('{%s}',table.concat(aK,','))end;aN.__eq=function(aQ,aR)return aQ.systemId==aR.systemId and aQ.id==aR.id and float_eq(aQ.radius,aR.radius)and float_eq(aQ.center.x,aR.center.x)and float_eq(aQ.center.y,aR.center.y)and float_eq(aQ.center.z,aR.center.z)and float_eq(aQ.GM,aR.GM)end;local function aS(aT,aU,aV,aW,aX)assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(aV),'Argument 3 (radius) must be a number:'..type(aV))assert(aw(aW),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(aW))assert(av(aX),'Argument 5 (GM) must be a number:'..type(aX))return setmetatable({systemId=y(aT),id=y(aU),radius=y(aV),center=vec3(aW),GM=y(aX)},aN)end;local aY={}aY.__index=aY;aY.__tostring=function(p)return e('::pos{%d,%d,%s,%s,%s}',p.systemId,p.id,aG(p.latitude*aE),aG(p.longitude*aE),aG(p.altitude))end;aY.__eq=function(aQ,aR)return aQ.id==aR.id and aQ.systemId==aR.systemId and float_eq(aQ.latitude,aR.latitude)and float_eq(aQ.altitude,aR.altitude)and(float_eq(aQ.longitude,aR.longitude)or float_eq(aQ.latitude,math.pi/2)or float_eq(aQ.latitude,-math.pi/2))end;local function aZ(a_,aU,b0,b1,b2)local aT=a_;if ay(a_)and not b1 and not b2 and not aU and not b0 then aT,aU,b0,b1,b2=n(a_,aF)assert(aT,'Argument 1 (position string) is malformed.')else assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(b0),'Argument 3 (latitude) must be in degrees:'..type(b0))assert(av(b1),'Argument 4 (longitude) must be in degrees:'..type(b1))assert(av(b2),'Argument 5 (altitude) must be in meters:'..type(b2))end;aT=y(aT)aU=y(aU)b0=y(b0)b1=y(b1)b2=y(b2)if aU==0 then return setmetatable({latitude=b0,longitude=b1,altitude=b2,id=aU,systemId=aT},aY)end;return setmetatable({latitude=aD*q(b0,-90,90),longitude=aD*(b1%360),altitude=b2,id=aU,systemId=aT},aY)end;local b3={}b3.__index=b3;b3.__tostring=function(aJ,aO)local b4=aO and aO..'  'local b5={}local aP={}for aq in pairs(aJ)do table.insert(aP,aq)end;table.sort(aP)for _,b6 in ipairs(aP)do bdy=aJ[b6]local b7=aN.__tostring(bdy,b4)if aO then table.insert(b5,e('[%s]={\n%s\n%s}',b6,b7,aO))else table.insert(b5,e('  [%s]=%s',b6,b7))end end;if aO then return e('\n%s%s%s',aO,table.concat(b5,',\n'..aO),aO)end;return e('{\n%s\n}',table.concat(b5,',\n'))end;local function b8(b9)local b={}local pid;for _,ar in pairs(b9)do local aU=ar.planetarySystemId;if type(aU)~='number'then error('Invalid planetary system ID: '..tostring(aU))elseif pid and aU~=pid then error('Mistringmatch planetary system IDs: '..aU..' and '..pid)end;local ba=ar.bodyId;if type(ba)~='number'then error('Invalid body ID: '..tostring(ba))elseif b[ba]then error('Duplicate body ID: '..tostring(ba))end;setmetatable(ar.center,getmetatable(vec3.unit_x))b[ba]=setmetatable(ar,aN)pid=aU end;return setmetatable(b,b3)end;U={}local function bb(b9)return setmetatable({galaxyAtlas=b9 or{}},U)end;U.__index=function(ax,i)if type(i)=='number'then local system=ax.galaxyAtlas[i]return b8(system)end;return rawget(U,i)end;U.__pairs=function(aJ)return function(ax,aq)local bc,nv=next(ax,aq)return bc,nv and b8(nv)end,aJ.galaxyAtlas,nil end;U.__tostring=function(aJ)local bd={}for _,be in pairs(aJ or{})do local bf=be:getPlanetarySystemId()local bg=b3.__tostring(be,'    ')table.insert(bd,e('  [%s]={%s\n  }',bf,bg))end;return e('{\n%s\n}\n',table.concat(bd,',\n'))end;U.BodyParameters=aS;U.MapPosition=aZ;U.PlanetarySystem=b8;function U.createBodyParameters(aT,aU,bh,bi,bj,bk,bl)assert(av(aT),'Argument 1 (systemId) must be a number:'..type(aT))assert(av(aU),'Argument 2 (id) must be a number:'..type(aU))assert(av(bh),'Argument 3 (surfaceArea) must be a number:'..type(bh))assert(aw(bi),'Argument 4 (aPosition) must be an array or vec3:'..type(bi))assert(aw(bj),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(bj))assert(av(bk),'Argument 6 (altitude) must be in meters:'..type(bk))assert(av(bl),'Argument 7 (gravityAtPosition) must be number:'..type(bl))local aV=x(bh/4/math.pi)local distance=aV+bk;local bm=vec3(bi)+distance*vec3(bj)local aX=bl*distance*distance;return aS(aT,aU,aV,bm,aX)end;U.isMapPosition=aB;function U:getPlanetarySystem(a_)if i==nil then i=0 end;if nv==nil then nv=0 end;local aT=a_;if aB(a_)then aT=a_.systemId end;if type(aT)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=b3 then system=b8(system)end;return system end end end;function b3:sizeCalculator(bn)return 1.05*bn.radius end;function b3:castIntersections(bo,bp,bq,br,bs,bt)local bu={}if bs then for _,bn in pairs(bs)do table.insert(bu,bn)end else bu=planetAtlas end;if not bt then table.sort(bu,function(ae,af)return(ae.center.x-bo.x)^2+(ae.center.y-bo.y)^2+(ae.center.z-bo.z)^2<(af.center.x-bo.x)^2+(af.center.y-bo.y)^2+(af.center.z-bo.z)^2 end)end;local bv=bp:normalize()for _,bn in ipairs(bu)do local bw=bn.center-bo;local aV=self:sizeCalculator(bn)local bx=bw:dot(bv)local by=bx^2-(bw:len2()-aV^2)if by>=0 then local bz=x(by)local bA=bx+bz;local bB=bx-bz;if bB>0 then return bn,bA,bB elseif bA>0 then return bn,bA,nil end end end;return nil,nil,nil end;function b3:closestBody(bC)assert(type(bC)=='table','Invalid coordinates.')local bD,bn;local bE=vec3(bC)for _,bF in pairs(self)do local bG=(bF.center-bE):len2()if(not bn or bG<bD)and bF.name~="Space"then bn=bF;bD=bG end end;return bn end;function b3:convertToBodyIdAndWorldCoordinates(a_)local bH=a_;if ay(a_)then bH=aZ(a_)end;if bH.id==0 then return 0,vec3(bH.latitude,bH.longitude,bH.altitude)end;local bF=self:getBodyParameters(bH)if bF then return bH.id,bF:convertToWorldCoordinates(bH)end end;function b3:getBodyParameters(a_)local aU=a_;if aB(a_)then aU=a_.id end;assert(av(aU),'Argument 1 (id) must be a number:'..type(aU))return self[aU]end;function b3:getPlanetarySystemId()local _,ar=next(self)return ar and ar.systemId end;function aN:convertToMapPosition(aW)assert(aw(aW),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(aW))local bI=vec3(aW)if self.id==0 then return setmetatable({latitude=bI.x,longitude=bI.y,altitude=bI.z,id=0,systemId=self.systemId},aY)end;local bJ=bI-self.center;local distance=bJ:len()local b2=distance-self.radius;local b0=0;local b1=0;if not float_eq(distance,0)then local bK=m(bJ.y,bJ.x)b1=bK>=0 and bK or 2*math.pi+bK;b0=math.pi/2-math.acos(bJ.z/distance)end;return setmetatable({latitude=b0,longitude=b1,altitude=b2,id=self.id,systemId=self.systemId},aY)end;function aN:convertToWorldCoordinates(a_)local bH=ay(a_)and aZ(a_)or a_;if bH.id==0 then return vec3(bH.latitude,bH.longitude,bH.altitude)end;assert(aB(bH),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(bH.systemId==self.systemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(bH.id==self.id,'Argument 1 (mapPosition) has a different planetary body ID.')local bL=math.cos(bH.latitude)return self.center+(self.radius+bH.altitude)*vec3(bL*math.cos(bH.longitude),bL*math.sin(bH.longitude),math.sin(bH.latitude))end;function aN:getAltitude(aW)return(vec3(aW)-self.center):len()-self.radius end;function aN:getDistance(aW)return(vec3(aW)-self.center):len()end;function aN:getGravity(aW)local bM=self.center-vec3(aW)local bN=bM:len2()return self.GM/bN*bM/x(bN)end;return setmetatable(U,{__call=function(_,...)return bb(...)end})end;local function bO()local Kinematic={}local bP=30000000/3600;local bQ=bP*bP;local bR=100;function Kinematic.computeAccelerationTime(bS,bT,bU)local bV=bP*math.asin(bS/bP)return(bP*math.asin(bU/bP)-bV)/bT end;function Kinematic.computeDistanceAndTime(bS,bU,bW,bX,bY,bZ)bY=bY or 0;bZ=bZ or 0;local b_=bS<=bU;local c0=bX*(b_ and 1 or-1)/bW;local c1=-bZ/bW;local c2=c0+c1;if b_ and c2<=0 or not b_ and c2>=0 then return-1,-1 end;local c3,c4=0,0;if c0~=0 and bY>0 then local bV=math.asin(bS/bP)local c5=math.pi*(c0/2+c1)local c6=c0*bY;local c7=bP*math.pi;local ar=function(ax)local c8=(c5*ax-c6*math.sin(math.pi*ax/2/bY)+c7*bV)/c7;local c9=math.tan(c8)return bP*c9/x(c9*c9+1)end;local ca=b_ and function(az)return az>=bU end or function(az)return az<=bU end;c4=2*bY;if ca(ar(c4))then local cb=0;while c(c4-cb)>0.5 do local ax=(c4+cb)/2;if ca(ar(ax))then c4=ax else cb=ax end end end;local cc=bS;local cd=c4/bR;for ce=1,bR do local cf=ar(ce*cd)c3=c3+(cf+cc)*cd/2;cc=cf end;if c4<2*bY then return c3,c4 end;bS=cc end;local bV=bP*math.asin(bS/bP)local time=(bP*math.asin(bU/bP)-bV)/c2;local cg=bQ*math.cos(bV/bP)/c2;local distance=cg-bQ*math.cos((c2*time+bV)/bP)/c2;return distance+c3,time+c4 end;function Kinematic.computeTravelTime(bS,bT,distance)if distance==0 then return 0 end;if bT>0 then local bV=bP*math.asin(bS/bP)local cg=bQ*math.cos(bV/bP)/bT;return(bP*math.acos(bT*(cg-distance)/bQ)-bV)/bT end;if bS==0 then return-1 end;assert(bS>0,'Acceleration and initial speed are both zero.')return distance/bS end;return Kinematic end;local function ch()local vec3=require('cpml.vec3')local as=as()local function ay(az)return type(az)=='string'end;local function aw(ax)return type(ax)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(b2)assert(self.body)local distance=b2+self.body.radius;if not float_eq(distance,0)then local ci=x(self.body.GM/distance)return x(2)*ci,ci end;return nil,nil end;function Kepler:orbitalParameters(a_,cj)assert(self.body)assert(aw(a_)or ay(a_))assert(aw(cj))local ck=(ay(a_)or as.isMapPosition(a_))and self.body:convertToWorldCoordinates(a_)or vec3(a_)local ar=vec3(cj)local cl=ck-self.body.center;local cm=ar:len2()local cn=cl:len()local co=self.body.GM;local cp=((cm-co/cn)*cl-cl:dot(ar)*ar)/co;local ae=co/(2*co/cn-cm)local cq=cp:len()local bv=cp:normalize()local cr=ae*(1-cq)local cs=ae*(1+cq)local ct=cr*bv+self.body.center;local cu=cq<=1 and-cs*bv+self.body.center or nil;local cv=x(ae*co*(1-cq*cq))local cw=cu and 2*math.pi*x(ae^3/co)local cx=math.acos(cp:dot(cl)/(cq*cn))if cl:dot(ar)<0 then cx=-(cx-2*math.pi)end;local cy=math.acos((math.cos(cx)+cq)/(1+cq*math.cos(cx)))local cz=cy;if cz<0 then cz=cz+2*math.pi end;local cA=cz-cq*math.sin(cz)local cB=0;local cC=0;local cD=0;if cw~=nil then cB=cA/(2*math.pi/cw)cC=cw-cB;cD=cC+cw/2;if cx-math.pi>0 then cC=cB;cD=cC+cw/2 end;if cD>cw then cD=cD-cw end end;return{periapsis={position=ct,speed=cv/cr,circularOrbitSpeed=x(co/cr),altitude=cr-self.body.radius},apoapsis=cu and{position=cu,speed=cv/cs,circularOrbitSpeed=x(co/cs),altitude=cs-self.body.radius},currentVelocity=ar,currentPosition=ck,eccentricity=cq,period=cw,eccentricAnomaly=cy,meanAnomaly=cA,timeToPeriapsis=cC,timeToApoapsis=cD,trueAnomaly=cx}end;local function cE(cF)local bF=as.BodyParameters(cF.systemId,cF.id,cF.radius,cF.center,cF.GM)return setmetatable({body=bF},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return cE(...)end})end;local function cG()local cH={}local cI={}local cJ={XS=13,S=27,M=55,L=110,XL=221}local cK={}local cL;local cM;local cN;local cO;local cP;local function cQ()local function cR(cS,cT,cU,cV,cW,cX,cY,cZ)cT,cV,cX,cZ=vec3(cT),vec3(cV),vec3(cX),vec3(cZ)local c_,d0,d1=cS*cS,cU*cU,cW*cW;local cm=cV-cT;local d2=cm:normalize()local d3=cm:len()local d4=cX-cT;local d5=(d4-d4:project_on(d2)):normalize()local d6,d7=d4:dot(d2),d4:dot(d5)local d8=d6*d6+d7*d7;local d9=d2:cross(d5)local a9=(c_-d0+d3*d3)/(2*d3)local aa=(c_-d1+d8-2*d6*a9)/(2*d7)local aC=c_-a9^2-aa^2;local da=x(aC)local db=cT+d2*a9+d5*aa+d9*da;local dc=cT+d2*a9+d5*aa-d9*da;if c((cZ-db):len()-cY)<c((cZ-dc):len()-cY)then return db else return dc end end;local function dd()local function de()local df=core.getConstructWorldOrientationRight()local cm=core.getConstructWorldOrientationForward()local d4=core.getConstructWorldOrientationUp()local dg=library.systemResolution3(df,cm,d4,{1,0,0})local dh=library.systemResolution3(df,cm,d4,{0,1,0})local di=library.systemResolution3(df,cm,d4,{0,0,1})return function(dj)return library.systemResolution3(dg,dh,di,dj)end end;local dk=de()local dl=core.getConstructWorldPos()local ck=core.getElementPositionById(1)local dm={ck[1],ck[2],ck[3]}local dn=dk(dm)local dp={dl[1]-dn[1],dl[2]-dn[2],dl[3]-dn[3]}return dp end;local function dq(dr,cn,ds)local dt=dr.pts;local du=#dt;local dv=dr.ref;if du>3 then local dw,dx,dy,dz=dt[du],dt[du-1],dt[du-2],dt[du-3]dr.ref=ds;local ck=cR(dw[1],dw[2],dx[1],dx[2],dy[1],dy[2],dz[1],dz[2])local a9,aa,da=ck.x,ck.y,ck.z;if a9==a9 and aa==aa and da==da then a9=a9+dv[1]aa=aa+dv[2]da=da+dv[3]local dA=vec3(a9,aa,da)if not dr.lastPos then dr.center=dA elseif(dr.lastPos-dA):len()<2 then dr.center=dA;dr.skipCalc=true end;dr.lastPos=dA end;dr.pts={}else local dB={ds[1]-dv[1],ds[2]-dv[2],ds[3]-dv[3]}dt[du+1]={cn,dB}end end;if radars[1]then cL=#radars[1].getConstructIds()local dC=radars[1].getData()local dD=dC:gmatch('{"constructId[^}]*}[^}]*}')if cL>0 then local ds=dd()local dE,dF=0,0;cP,cO=0,0;for ar in dD do local aU,distance,dG=ar:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*).-"size":"(%a+)"]])local dH=cJ[dG]distance=y(distance)if radars[1].hasMatchingTransponder(aU)==1 then table.insert(cI,aU)end;local dI=radars[1].getConstructType(aU)if CollisionSystem then if dH>27 or dI=="static"or dI=="space"then cP=cP+1;local dJ=radars[1].getConstructName(aU)local dr=X[aU]if dr==nil then dH=dH+E;X[aU]={pts={},ref=ds,name=dJ,i=0,radius=dH,skipCalc=false}dr=X[aU]end;if not dr.skipCalc then dq(dr,distance,ds)dF=dF+1 end;if dr.center then table.insert(cK,dr)end end;dE=dE+1;if nearPlanet and dE>700 or dF>70 or(not nearPlanet and dE>300 or dF>30)then coroutine.yield()dE,dF=0,0 end end end;cO=#cK;if cO>0 and velMag>20 then local bn,dK,dL,dM;local dN=0;local dO=galaxyReference:getPlanetarySystem(0)dM=constructVelocity:normalize()while dN<cO do coroutine.yield()local dP={table.unpack(cK,dN,math.min(dN+75,cO))}bn,dK,dL=dO:castIntersections(worldPos,dM,nil,nil,dP,true)if bn and dL then collisionTarget={bn,dK,dL}break end;dN=dN+75 end;if not bn then collisionTarget=nil end else collisionTarget=nil end;cK={}cM=dC:find('identifiedConstructs":%[%]')else cN=dC:find('worksInEnvironment":false')end end end;local function dQ()if radars[1]then rType="Atmo"if radars[1].getData():find('worksInAtmosphere":false')then rType="Space"end end end;function cH.pickType()dQ()end;function cH.assignRadar()if radar_1 and radars[1]==radar_1 and radar_1.isOperational()~=1 then if radar_2 and radar_2.isOperational()==1 then radars[1]=radar_2 end;if radars[1]==radar_2 then dQ()end elseif radar_2 and radars[1]==radar_2 and radar_2.isOperational()~=1 then if radar_1 and radar_1.isOperational()==1 then radars[1]=radar_1 end;if radars[1]==radar_1 then dQ()end end end;function cH.UpdateRadar()local dR=coroutine.status(UpdateRadarCoroutine)if dR=="suspended"then local aM,dS=coroutine.resume(UpdateRadarCoroutine)if dS then system.print("ERROR UPDATE RADAR: "..dS)end elseif dR=="dead"then UpdateRadarCoroutine=coroutine.create(cQ)local aM,dS=coroutine.resume(UpdateRadarCoroutine)end end;function cH.GetRadarHud()local dT=cI;cI={}return cM,cN,cL,cO,cP,dT end;UpdateRadarCoroutine=coroutine.create(cQ)return cH end;local function dU()local function dV(position)local p=sys:closestBody(position)if(position-p.center):len()>p.radius+p.noAtmosphericDensityAltitude then p=b[0][0]end;return p end;local function dW()local function dX(dY,dZ)return dY.name<dZ.name end;AtlasOrdered={}for aq,ar in pairs(b[0])do AtlasOrdered[#AtlasOrdered+1]={name=ar.name,index=aq}end;table.sort(AtlasOrdered,dX)end;local function d_(e0)for aq,ar in pairs(e0)do if ar.name and ar.name==CustomTarget.name then return aq end end;return-1 end;local function e1()apScrollIndex=AutopilotTargetIndex;if AutopilotTargetIndex==0 then AutopilotTargetName="None"autopilotTargetPlanet=nil;CustomTarget=nil;return true end;local e2=AtlasOrdered[AutopilotTargetIndex].index;local e3=b[0][e2]if e3.center then AutopilotTargetName=e3.name;autopilotTargetPlanet=galaxyReference[0][e2]if CustomTarget~=nil then if atmosDensity==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=e3;for _,ar in pairs(galaxyReference[0])do if ar.name==CustomTarget.planetname then autopilotTargetPlanet=ar;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(autopilotTargetPlanet.center)else AutopilotTargetCoords=CustomTarget.position end;if autopilotTargetPlanet.planetname~="Space"then if autopilotTargetPlanet.hasAtmosphere then AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(autopilotTargetPlanet.radius*(TargetOrbitRadius-1)+autopilotTargetPlanet.surfaceMaxAltitude)end else AutopilotTargetOrbit=AutopilotSpaceDistance end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=Kep(autopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;local function e4(e5)if not Autopilot and not VectorToTarget and not spaceLaunch and not IntoOrbit and not Reentry and not finalLand then if e5==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end end;if AutopilotTargetIndex==0 then e1()else local e2=AtlasOrdered[AutopilotTargetIndex].index;local e3=b[0][e2]if e3~=nil and e3.name=="Space"or iphCondition=="Custom Only"and e3.center or iphCondition=="No Moons"and string.find(e3.name,"Moon")~=nil then if e5==nil then e4()else e4(1)end else e1()end end else msgText="Disengage autopilot before changing Interplanetary Helper"play("iph","AP")end end;local function e6()local du=-1;du=d_(b[0])if du>-1 then table.remove(b[0],du)end;du=-1;du=d_(SavedLocations)if du~=-1 then msgText=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,du)end;e4()dW()end;local function e7(dJ,position,e8,e9)if dbHud_1 or e8 then local p=dV(position)local ea=p.gravity;if e9 then ea=unit.getClosestPlanetInfluence()end;local eb={position=position,name=dJ,planetname=p.name,gravity=ea,safe=e9}if not e8 then SavedLocations[#SavedLocations+1]=eb else for aq,ar in pairs(b[0])do if ar.name and dJ==ar.name then table.remove(b[0],aq)end end end;table.insert(b[0],eb)dW()e1()msgText="Location saved as "..dJ.."("..p.name..")"else msgText="Databank must be installed to save permanent locations"end end;local ec={}function ec.UpdateAtlasLocationsList()dW()end;function ec.UpdateAutopilotTarget()e1()end;function ec.adjustAutopilotTargetIndex(e5)e4(e5)end;function ec.findAtlasIndex(e0)d_(e0)end;function ec.UpdatePosition(ed)local du=d_(SavedLocations)if du~=-1 then if ed~=nil then SavedLocations[du].name=ed;AutopilotTargetIndex=AutopilotTargetIndex-1;e4()else local ee=SavedLocations[du]ee.gravity=unit.getClosestPlanetInfluence()ee.position=worldPos;ee.safe=true end;msgText=SavedLocations[du].name.." position updated ("..SavedLocations[du].planetname..")"else msgText="Name Not Found"end end;function ec.AddNewLocation(dJ,position,e8,e9)e7(dJ,position,e8,e9)end;function ec.ClearCurrentPosition()e6()end;for aq,ar in pairs(SavedLocations)do table.insert(b[0],ar)end;dW()if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;ec.UpdateAutopilotTarget()return ec end;function script.onStart()local ef=false;local function eg()local function eh(ei)local ej=dbHud_1.hasKey;for aq,ar in pairs(ei)do if ej(ar)then local aH=f(dbHud_1.getStringValue(ar))if aH~=nil then _G[ar]=aH;ef=true end end end end;if dbHud_1 then if not useTheseSettings then eh(saveableVariables())coroutine.yield()eh(autoVariables)else eh(autoVariables)msgText="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"msgTimer=5;ef=false end;coroutine.yield()if ef then msgText="Loaded Saved Variables"resolutionWidth=ResolutionX;resolutionHeight=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)autoRoll=autoRollPreference;adjustedAtmoSpeedLimit=AtmoSpeedLimit;rgb=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]elseif not useTheseSettings then msgText="No Saved Variables Found - Exit HUD to save settings"end;if LastVersionUpdate<1.500 then if LowOrbitHeight<2000 then msgText="Updating LowOrbitHeight to new minimum default of 2000."LowOrbitHeight=2000 end end;LastVersionUpdate=VERSION_NUMBER else msgText="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<time then LastMaxBrakeInAtmo=0 end;LastStartTime=time;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then msgText="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"msgTimer=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=coreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;VectorStatus="Proceeding to Waypoint"end;local function ek()local function el(em,en)if em>en then en=em end;local eo,ep=0,0;if ContainerOptimization>0 then eo=ContainerOptimization*0.05 end;if FuelTankOptimization>0 then ep=FuelTankOptimization*0.05 end;en=en*(1-(eo+ep))return en end;local eq=core.getElementNameById;local er=fuelX~=0 and fuelY~=0;for aq in pairs(P)do local type=core.getElementTypeById(P[aq])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(P[aq])),'^.*vertical.*$')and core.getElementForwardById(P[aq])[3]>0 then UpVertAtmoEngine=true end end;if n(type,'^.*Space Engine$')then SpaceEngines=true;if n(tostring(core.getElementTagsById(P[aq])),'^.*vertical.*$')then local es=core.getElementForwardById(P[aq])if es[3]<0 then W=true else SpaceEngineVertDn=true end end end;if type=="Landing Gear"then hasGear=true end;if type=="Dynamic Core Unit"then local et=h(P[aq])if et>10000 then E=110 elseif et>1000 then E=55 elseif et>150 then E=27 end end;T=T+h(P[aq])if er and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local et=h(P[aq])local eu=k(P[aq])local em=0;local ev=o()if type=="Atmospheric Fuel Tank"then local en=400;local ew=35.03;if et>10000 then en=51200;ew=5480 elseif et>1300 then en=6400;ew=988.67 elseif et>150 then en=1600;ew=182.67 end;em=eu-ew;if fuelTankHandlingAtmo>0 then en=en+en*fuelTankHandlingAtmo*0.2 end;en=el(em,en)atmoTanks[#atmoTanks+1]={P[aq],eq(P[aq]),en,ew,em,ev}end;if type=="Rocket Fuel Tank"then local en=320;local ew=173.42;if et>65000 then en=40000;ew=25740 elseif et>6000 then en=5120;ew=4720 elseif et>700 then en=640;ew=886.72 end;em=eu-ew;if fuelTankHandlingRocket>0 then en=en+en*fuelTankHandlingRocket*0.1 end;en=el(em,en)rocketTanks[#rocketTanks+1]={P[aq],eq(P[aq]),en,ew,em,ev}end;if type=="Space Fuel Tank"then local en=600;local ew=35.03;if et>10000 then en=76800;ew=5480 elseif et>1300 then en=9600;ew=988.67 elseif et>150 then en=2400;ew=182.67 end;em=eu-ew;if fuelTankHandlingSpace>0 then en=en+en*fuelTankHandlingSpace*0.2 end;en=el(em,en)spaceTanks[#spaceTanks+1]={P[aq],eq(P[aq]),en,ew,em,ev}end end end;if not UpVertAtmoEngine then VertTakeOff,VertTakeOffEngine=false,false end end;local function ex()if gyro~=nil then gyroIsOn=gyro.getState()==1 end;if not stablized then r:deactivateGroundEngineAltitudeStabilization()end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(inAtmo or not inAtmo and coreAltitude<10000)then for _,ar in pairs(door)do ar.toggle()end end;if switch then for _,ar in pairs(switch)do ar.toggle()end end;if forcefield and(inAtmo or not inAtmo==0 and coreAltitude<10000)then for _,ar in pairs(forcefield)do ar.toggle()end end;if antigrav then antigravOn=antigrav.getState()==1;if antigravOn and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if hasGear then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if abvGndDet~=-1 or not inAtmo and coreVelocity:len()<50 then BrakeIsOn=true;GearExtended=true;if hasGear then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(V)if inAtmo and abvGndDet~=-1 then maxKinematicUp=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=inAtmo end;local function ey()local ez={}local function eA()return{id=0,name={"Space","Space","Space"},type={},biosphere={},classification={},habitability={},description={},iconPath="",hasAtmosphere=false,isSanctuary=false,isInSafeZone=true,systemId=0,positionInSystem=0,satellites={},center={0,0,0},gravity=0,radius=0,atmosphereThickness=0,atmosphereRadius=0,surfaceArea=0,surfaceAverageAltitude=0,surfaceMaxAltitude=0,surfaceMinAltitude=0,GM=0,ores={},territories=0,noAtmosphericDensityAltitude=0,spaceEngineMinAltitude=0}end;local eB={[1]=4480,[6]=4480,[7]=6270}for eC,eD in pairs(b)do b[eC][0]=eA()b[eC][0].systemId=eC;ez[eC]={}for eE,planet in pairs(b[eC])do planet.gravity=planet.gravity/9.8;planet.center=vec3(planet.center)planet.name=planet.name[1]planet.noAtmosphericDensityAltitude=planet.atmosphereThickness or planet.atmosphereRadius-planet.radius;planet.spaceEngineMinAltitude=eB[planet.id]or 0.68377*(planet.atmosphereThickness or planet.atmosphereRadius-planet.radius)planet.planetarySystemId=eC;planet.bodyId=planet.id;ez[eC][eE]=planet;if minAtlasX==nil or planet.center.x<minAtlasX then minAtlasX=planet.center.x end;if maxAtlasX==nil or planet.center.x>maxAtlasX then maxAtlasX=planet.center.x end;if minAtlasY==nil or planet.center.y<minAtlasY then minAtlasY=planet.center.y end;if maxAtlasY==nil or planet.center.y>maxAtlasY then maxAtlasY=planet.center.y end;if planet.center and planet.name~="Space"then planetAtlas[#planetAtlas+1]=planet end end end;U=as()galaxyReference=U(ez)Kinematic=bO()Kep=ch()ATLAS=dU()end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})eg()coroutine.yield()ek()coroutine.yield()AP=APClass(a,core,unit,system,b,vBooster,hover,telemeter_1,antigrav,c,d,j,l,m,o,q,r,t,w,x,z)ex()coroutine.yield()ey()RADAR=cG()HUD=HudClass(a,core,unit,system,b,radar_1,radar_2,antigrav,hover,shield_1,c,d,e,f,j,k,l,m,o,q,r,s,w,x,z,a8)HUD.ButtonSetup()coroutine.yield()unit.hide()system.showScreen(1)system.showHelper(0)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("radarTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)unit.setTimer("fiveSecond",5)radars[1]=nil;if radar_1 then radars[1]=radar_1;RADAR.pickType()end;play("start","SU")end)coroutine.resume(beginSetup)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ar in pairs(door)do ar.toggle()end end;if switch then for _,ar in pairs(switch)do ar.toggle()end end;if forcefield and(atmosDensity>0 or atmosDensity==0 and coreAltitude<10000)then for _,ar in pairs(forcefield)do ar.toggle()end end;showHud=oldShowHud;am()if button then button.activate()end;if SetWaypointOnExit then AP.showWayPoint(planet,worldPos)end;play("stop","SU")end;function script.onTick(eF)local eG=nil;if eF=="contact"then if not contactTimer then contactTimer=0 end;if time>contactTimer+10 then msgText="Radar Contact"play("rdrCon","RC")contactTimer=time end;unit.stopTimer("contact")elseif eF=="tenthSecond"then local function eH()local eI=system.createData;local eJ=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=eJ(panelInterplanetary,"value")interplanetaryHeaderText=eI('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=eJ(panelInterplanetary,"value")widgetDistanceText=eI('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=eJ(panelInterplanetary,"value")widgetTravelTimeText=eI('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=eJ(panelInterplanetary,"value")widgetMaxMassText=eI('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=eJ(panelInterplanetary,"value")widgetTargetOrbitText=eI('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=eJ(panelInterplanetary,"value")widgetCurBrakeDistanceText=eI('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=eJ(panelInterplanetary,"value")widgetCurBrakeTimeText=eI('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=eJ(panelInterplanetary,"value")widgetMaxBrakeDistanceText=eI('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=eJ(panelInterplanetary,"value")widgetMaxBrakeTimeText=eI('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=eJ(panelInterplanetary,"value")widgetTrajectoryAltitudeText=eI('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not inAtmo then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function eK()s(panelInterplanetary)panelInterplanetary=nil end;local function eL()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(autopilotTargetPlanet.center-worldPos):len()else AutopilotDistance=(CustomTarget.position-worldPos):len()end end;local cf=velMag;local eM=unit.getThrottle()/100;if AtmoSpeedAssist then eM=PlayerThrottle end;local eN,eO=Kinematic.computeDistanceAndTime(velMag,MaxGameVelocity,coreMass,a:maxForceForward()*eM,warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eP;if not TurnBurn and cf>0 then _,eP=AP.GetAutopilotBrakeDistanceAndTime(cf)else _,eP=AP.GetAutopilotTBBrakeDistanceAndTime(cf)end;local eQ=0;local eR=0;if AutopilotCruising or not Autopilot and cf>5 then eR=Kinematic.computeTravelTime(cf,0,AutopilotDistance)elseif brakeDistance+eN<AutopilotDistance then eQ=AutopilotDistance-(brakeDistance+eN)eR=Kinematic.computeTravelTime(8333.0556,0,eQ)else local eS=(AutopilotDistance-brakeDistance)/eN;eN=AutopilotDistance-brakeDistance;eO=eO*eS end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eR elseif AutopilotBraking then return eP elseif AutopilotCruising then return eR+eP else return eO+brakeTime+eR end end;local function eT(ea,eU)if ea==nil then ea=core.g()end;ea=z(ea,5)if eU~=nil and eU or(eG==nil or eG~=ea)then local cf=coreVelocity:len()local eV=f(unit.getData()).maxBrake;if eV~=nil and eV>0 and inAtmo then eV=eV/q(cf/100,0.1,1)eV=eV/atmosDensity;if atmosDensity>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+eV)/2 else LastMaxBrakeInAtmo=eV end end end;if eV~=nil and eV>0 then LastMaxBrake=eV end;eG=ea end end;eT(nil,true)if setCruiseSpeed~=nil then if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed or r:getTargetSpeed(axisCommandId.longitudinal)~=setCruiseSpeed then AP.cmdCruise(setCruiseSpeed)else setCruiseSpeed=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then eH()end;if AutopilotTargetName~=nil then local eW=CustomTarget~=nil;local eX=0.5*LastMaxBrakeInAtmo/autopilotTargetPlanet:getGravity(autopilotTargetPlanet.center+vec3(0,0,1)*autopilotTargetPlanet.radius):len()eX=eX>1000000 and z(eX/1000000,2).." kTons"or z(eX/1000,2).." Tons"t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=eL()if eW and not Autopilot then distance=(worldPos-CustomTarget.position):len()else distance=(AutopilotTargetCoords-worldPos):len()end;if not TurnBurn then brakeDistance,brakeTime=AP.GetAutopilotBrakeDistanceAndTime(velMag)M,N=AP.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=AP.GetAutopilotTBBrakeDistanceAndTime(velMag)M,N=AP.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local eY=getDistanceDisplayString(distance)t(widgetDistanceText,'{"label": "distance", "value": "'..eY..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')eY=getDistanceDisplayString(brakeDistance)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..eY..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')eY=getDistanceDisplayString(M)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..eY..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(N)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Max Brake Mass", "value": "'..e("%s",eX)..'", "unit":""}')eY=getDistanceDisplayString(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..eY..'"}')if atmosDensity>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true;if not throttleMode and AtmoSpeedAssist and(AltitudeHold or Reentry or finalLand)then AP.cmdThrottle(1)BrakeIsOn=false;WasInCruise=false end end;if atmosDensity==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else eK()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;HUD.TenthTick()elseif eF=="oneSecond"then local function eZ(e_)local f0=0;damageMessage=""local f1=T;local f2=0;local f3=0;local f4=0;local f5=0;local f6=""local f7=core.getElementHitPointsById;for aq in pairs(P)do local et=0;local f8=0;f8=h(P[aq])et=f7(P[aq])f2=f2+et;if et<f8 then if et==0 then f4=f4+1 else f3=f3+1 end;if repairArrows and#R==0 then position=vec3(core.getElementPositionById(P[aq]))local a9=position.x;local aa=position.y;local da=position.z;table.insert(R,core.spawnArrowSticker(a9,aa,da+1,"down"))table.insert(R,core.spawnArrowSticker(a9,aa,da+1,"down"))core.rotateSticker(R[2],0,0,90)table.insert(R,core.spawnArrowSticker(a9+1,aa,da,"north"))table.insert(R,core.spawnArrowSticker(a9+1,aa,da,"north"))core.rotateSticker(R[4],90,90,0)table.insert(R,core.spawnArrowSticker(a9-1,aa,da,"south"))table.insert(R,core.spawnArrowSticker(a9-1,aa,da,"south"))core.rotateSticker(R[6],90,-90,0)table.insert(R,core.spawnArrowSticker(a9,aa-1,da,"east"))table.insert(R,core.spawnArrowSticker(a9,aa-1,da,"east"))core.rotateSticker(R[8],90,0,90)table.insert(R,core.spawnArrowSticker(a9,aa+1,da,"west"))table.insert(R,core.spawnArrowSticker(a9,aa+1,da,"west"))core.rotateSticker(R[10],-90,0,90)table.insert(R,P[aq])end elseif repairArrows and#R>0 and R[11]==P[aq]then for f9 in pairs(R)do core.deleteSticker(R[f9])end;R={}end end;f0=d(f2/f1*100)if f0<100 then e_[#e_+1]=a8(0,0,"","pbright txt")f5=d(f0*2.55)f6=e("rgb(%d,%d,%d)",255-f5,f5,0)if f0<100 then e_[#e_+1]=a8("50%",1035,"Elemental Integrity: "..f0 .."%","txtbig txtmid","fill:"..f6)if f4>0 then e_[#e_+1]=a8("50%",1055,"Disabled Modules: "..f4 .." Damaged Modules: "..f3,"txtbig txtmid","fill:"..f6)elseif f3>0 then e_[#e_+1]=a8("50%",1055,"Damaged Modules: "..f3,"txtbig txtmid","fill:"..f6)end end end end;local function fa()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function fb()local ev=o()local fc=velMag;local fd=ev-lastTravelTime;if fc>1.38889 then fc=fc/1000;local fe=fc*(ev-lastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+fe;totalDistanceTrip=totalDistanceTrip+fe end;flightTime=flightTime+fd;TotalFlightTime=TotalFlightTime+fd;lastTravelTime=ev end;fb()passengers=core.getPlayersOnBoard()ships=core.getDockedConstructs()fa()local e_={}HUD.OneSecond(e_)if ShouldCheckDamage then eZ(e_)end;lastOdometerOutput=table.concat(e_,"")collectgarbage("collect")elseif eF=="fiveSecond"then if not UseSatNav then return end;O=dbHud_1.getStringValue("SPBAutopilotTargetName")if O~=nil and O~=""and O~="SatNavNotChanged"then local aH=f(dbHud_1.getStringValue("SavedLocations"))if aH~=nil then _G["SavedLocations"]=aH;local du=-1;local eb;for aq,ar in pairs(SavedLocations)do if ar.name and ar.name=="SatNav Location"then du=aq;break end end;if du~=-1 then eb=SavedLocations[du]du=-1;for aq,ar in pairs(b[0])do if ar.name and ar.name=="SatNav Location"then du=aq;break end end;if du>-1 then b[0][du]=eb end;ATLAS.UpdateAtlasLocationsList()msgText=eb.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==O then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)ATLAS.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif eF=="msgTick"then local e_={}HUD.DisplayMessage(e_,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif eF=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif eF=="hudTick"then HUD.hudtick()elseif eF=="apTick"then AP.APTick()elseif eF=="radarTick"then RADAR.UpdateRadar()elseif eF=="tagTick"then if UseExtra=="Off"then UseExtra="All"elseif UseExtra=="All"then UseExtra="Longitude"elseif UseExtra=="Longitude"then UseExtra="Lateral"elseif UseExtra=="Lateral"then UseExtra="Vertical"else UseExtra="Off"end;msgText="Extra Engine Tags: "..UseExtra;unit.stopTimer("tagTick")end end;function script.onFlush()local function ff(fg,fh)local fi=vec3()local fj=vec3()if fg==axisCommandId.longitudinal then fi=vec3(core.getConstructOrientationForward())fj=constructForward elseif fg==axisCommandId.vertical then fi=vec3(core.getConstructOrientationUp())fj=constructUp elseif fg==axisCommandId.lateral then fi=vec3(core.getConstructOrientationRight())fj=constructRight else return vec3()end;local fk=vec3(core.getWorldGravity())local fl=fk:dot(fj)local fm=vec3(core.getWorldAirFrictionAcceleration())local fn=fm:dot(fj)local fo=coreVelocity:dot(fi)local fp=fh*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(fp-fo)local fq=targetSpeedPID2:get()local fr=(fq-fn-fl)*fj;return fr end;local function fs(fg,fh)local fi=vec3()local fj=vec3()if fg==axisCommandId.longitudinal then fi=vec3(core.getConstructOrientationForward())fj=constructForward elseif fg==axisCommandId.vertical then fi=vec3(core.getConstructOrientationUp())fj=constructUp elseif fg==axisCommandId.lateral then fi=vec3(core.getConstructOrientationRight())fj=constructRight else return vec3()end;local fk=vec3(core.getWorldGravity())local fl=fk:dot(fj)local fm=vec3(core.getWorldAirFrictionAcceleration())local fn=fm:dot(fj)local fo=coreVelocity:dot(fi)local fp=fh*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(fp-fo)local fq=targetSpeedPID:get()local fr=(fq-fn-fl)*fj;return fr end;local function ft(fu,fv,dZ)local fw=fu:cross(dZ):normalize_inplace()local fx=math.acos(q(fw:dot(-fv),-1,1))*constants.rad2deg;if fw:cross(-fv):dot(dZ)<0 then fx=-fx end;return fx end;if antigrav and not ExternalAGG then if not antigravOn and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;throttleMode=r:getAxisCommandType(0)==axisCommandType.byThrottle;if throttleMode and WasInCruise then AP.cmdThrottle(0)WasInCruise=false elseif not throttleMode and not WasInCruise then PlayerThrottle=0;WasInCruise=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)local fy=q(F+pitchInput2+system.getControlDeviceForwardInput(),-1,1)local fz=q(G+rollInput2+system.getControlDeviceYawInput(),-1,1)local fA=q(H+yawInput2-system.getControlDeviceLeftRightInput(),-1,1)local fB=brakeInput;worldVertical=vec3(core.getWorldVertical())if worldVertical==nil or worldVertical:len()==0 then worldVertical=(planet.center-worldPos):normalize()end;constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())coreVelocity=vec3(core.getVelocity())worldPos=vec3(core.getConstructWorldPos())coreMass=core.getConstructMass()velMag=vec3(constructVelocity):len()vSpd=-worldVertical:dot(constructVelocity)adjustedRoll=getRoll(worldVertical,constructForward,constructRight)local fC=adjustedRoll/180*math.pi;local fD=math.cos(fC)local fE=math.sin(fC)adjustedPitch=ft(worldVertical,constructForward,constructRight*fD+constructUp*fE)local fF=constructVelocity:normalize()local fG=c(adjustedRoll)local fH=utils.sign(adjustedRoll)local fI=vec3(core.getWorldAngularVelocity())local fJ=fy*pitchSpeedFactor*constructRight+fz*rollSpeedFactor*constructForward+fA*yawSpeedFactor*constructUp;if autoRoll==true and worldVertical:len()>0.01 then local fK=c(targetRoll-adjustedRoll)if((ProgradeIsOn or Reentry or BrakeLanding or spaceLand or AltitudeHold or IntoOrbit)and fK>0 or atmosDensity>0.0 and fK<autoRollRollThreshold and autoRollPreference)and fz==0 and c(adjustedPitch)<85 then local fL=targetRoll;local fM=autoRollFactor;if atmosDensity==0 then fM=fM/4;targetRoll=0;fL=0 end;if rollPID==nil then rollPID=pid.new(fM*0.01,0,fM*0.1)end;rollPID:inject(fL-adjustedRoll)local fN=rollPID:get()fJ=fJ+fN*constructForward end end;local fO=1;local fP=0;local fQ=1;local fR=system.getMouseWheel()if fR>0 then Z()elseif fR<0 then Z(true)else Q=true end;brakeInput2=0;if inAtmo and AtmoSpeedAssist and throttleMode then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(adjustedAtmoSpeedLimit/3.6-constructVelocity:dot(constructForward))local fS=throttlePID:get()calculatedThrottle=q(fS,-1,1)if calculatedThrottle<PlayerThrottle and atmosDensity>0.005 then ThrottleLimited=true;r:setThrottleCommand(axisCommandId.longitudinal,q(calculatedThrottle,0.01,1))else ThrottleLimited=false;r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-adjustedAtmoSpeedLimit/3.6)local fT=q(brakePID:get(),0,1)if atmosDensity>0 and vSpd<-80 or atmosDensity>0.005 then brakeInput2=fT end;if brakeInput2>0 then if ThrottleLimited and calculatedThrottle==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else calculatedThrottle=q(calculatedThrottle,0.01,1)end;local fU=''local fV=vec3()local fW=ff(axisCommandId.vertical,upAmount*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",fW,fP)local fX='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then fX=fX..ExtraLongitudeTags end;local fY=r:getAxisCommandType(axisCommandId.longitudinal)local fZ=r:composeAxisAccelerationFromThrottle(fX,axisCommandId.longitudinal)local f_=fs(axisCommandId.lateral,LeftAmount*1000)fU=fU..' , '.."lateral airfoil , lateral ground "fV=fV+f_;if fV:len()>constants.epsilon then a:setEngineForceCommand(fU,fV,fP,'','','',fQ)end;a:setEngineForceCommand(fX,fZ,fO)local g0='thrust analog vertical fueled 'local g1='thrust analog lateral fueled 'if UseExtra=="All"or UseExtra=="Lateral"then g1=g1 ..ExtraLateralTags end;if UseExtra=="All"or UseExtra=="Vertical"then g0=g0 ..ExtraVerticalTags end;if upAmount~=0 or BrakeLanding and BrakeIsOn or not GearExtended and not stablized then a:setEngineForceCommand(g0,fW,fO)else a:setEngineForceCommand(g0,vec3(),fO)end;if LeftAmount~=0 then a:setEngineForceCommand(g1,f_,fO)else a:setEngineForceCommand(g1,vec3(),fO)end;if fB==0 then fB=brakeInput2 end;local g2=-fB*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*fF)a:setEngineForceCommand('brake',g2)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,PlayerThrottle)end;local fh=unit.getAxisCommandValue(0)if not throttleMode then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(constructVelocity:len()-fh/3.6)local fT=q(brakePID:get(),0,1)fB=q(fB+fT,0,1)end;local g2=-fB*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*fF)a:setEngineForceCommand('brake',g2)local fU=''local fV=vec3()local g3=false;local fX='thrust analog longitudinal 'if UseExtra=="All"or UseExtra=="Longitude"then fX=fX..ExtraLongitudeTags end;local fY=r:getAxisCommandType(axisCommandId.longitudinal)if fY==axisCommandType.byThrottle then local fZ=r:composeAxisAccelerationFromThrottle(fX,axisCommandId.longitudinal)a:setEngineForceCommand(fX,fZ,fO)elseif fY==axisCommandType.byTargetSpeed then local fZ=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)fU=fU..' , '..fX;fV=fV+fZ;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then g3=true end end;local g1='thrust analog lateral 'if UseExtra=="All"or UseExtra=="Lateral"then g1=g1 ..ExtraLateralTags end;local g4=r:getAxisCommandType(axisCommandId.lateral)if g4==axisCommandType.byThrottle then local g5=r:composeAxisAccelerationFromThrottle(g1,axisCommandId.lateral)a:setEngineForceCommand(g1,g5,fO)elseif g4==axisCommandType.byTargetSpeed then local f_=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)fU=fU..' , '..g1;fV=fV+f_ end;local g0='thrust analog vertical 'if UseExtra=="All"or UseExtra=="Vertical"then g0=g0 ..ExtraVerticalTags end;local g6=r:getAxisCommandType(axisCommandId.vertical)if g6==axisCommandType.byThrottle then local fW=r:composeAxisAccelerationFromThrottle(g0,axisCommandId.vertical)if upAmount~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(g0,fW,fO,'airfoil','ground','',fQ)else a:setEngineForceCommand(g0,vec3(),fO)a:setEngineForceCommand('airfoil vertical',fW,fO,'airfoil','','',fQ)a:setEngineForceCommand('ground vertical',fW,fO,'ground','','',fQ)end elseif g6==axisCommandType.byTargetSpeed then if upAmount<0 then a:setEngineForceCommand('hover',vec3(),fO)end;local g7=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)fU=fU..' , '..g0;fV=fV+g7 end;if fV:len()>constants.epsilon then if brakeInput~=0 or g3 or c(fF:dot(constructForward))<0.5 then fU=fU..', brake'end;a:setEngineForceCommand(fU,fV,fP,'','','',fQ)end end;local g8=torqueFactor*(fJ-fI)local g9=vec3(core.getWorldAirFrictionAngularAcceleration())g8=g8-g9;a:setEngineTorqueCommand('torque',g8,fO,'airfoil','','',fQ)a:setBoosterCommand('rocket_engine')if isBoosting and not VanillaRockets then local cf=coreVelocity:len()local ga=0.15;if not throttleMode then local gb=r:getTargetSpeed(axisCommandId.longitudinal)if cf*3.6>gb*(1-ga)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif cf*3.6<gb*(1-ga)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local eM=unit.getThrottle()if AtmoSpeedAssist then eM=PlayerThrottle*100 end;local fh=eM/100;if j==0 then fh=fh*MaxGameVelocity;if cf>=fh*(1-ga)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif cf<fh*(1-ga)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local gc=d(adjustedAtmoSpeedLimit)fh=fh*gc/3.6;if cf>=fh*(1-ga)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif cf<fh*(1-ga)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local dR=coroutine.status(beginSetup)if dR=="suspended"then local aM,dS=coroutine.resume(beginSetup)if dS then system.print("ERROR STARTUP: "..dS)end elseif dR=="dead"then SetupComplete=true end end;if SetupComplete then a:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gd)local function ge(a0)local C=1;local function gf(gg,a0)local gh={planet.surfaceMaxAltitude+100,planet.spaceEngineMinAltitude-0.01*planet.noAtmosphericDensityAltitude,planet.noAtmosphericDensityAltitude+LowOrbitHeight,planet.radius*(TargetOrbitRadius-1)+planet.noAtmosphericDensityAltitude}local gi=gg;for _,ar in ipairs(gh)do if a0 and gi>ar then gg=ar elseif gg<ar and not a0 then gg=ar;break end end;return gg end;if a0 then C=-1 end;if not ExternalAGG and antigravOn then if holdingShift and a0 then AntigravTargetAltitude=1000 elseif AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*J;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+C*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then if holdingShift then OrbitTargetOrbit=gf(OrbitTargetOrbit,a0)else OrbitTargetOrbit=OrbitTargetOrbit+C*I end;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else if holdingShift and inAtmo then HoldAltitude=gf(HoldAltitude,a0)else HoldAltitude=HoldAltitude+C*I end end else r:updateTargetGroundAltitudeFromActionStart(C*1.0)end end;local function gj(gk)if not inAtmo then msgText="Flight Assist in Atmo only"return end;local ax=type(gk)if ReversalIsOn==nil then if ax=="table"then if Autopilot or VectorToTarget then AP.ToggleAutopilot()end;play("180On","BR")elseif gk==1 then play("bnkLft","BR")else play("bnkRht","BR")end;if not AltitudeHold and not Autopilot and not VectorToTarget then AP.ToggleAltitudeHold()if ax~="table"then gk=gk+1 end end;ReversalIsOn=gk else play("180Off","BR")ReversalIsOn=nil end end;if gd=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;AP.cmdThrottle(0)if vBooster or hover then if inAtmo and abvGndDet==-1 then play("bklOn","BL")StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else if hasGear then play("grOut","LG",1)a.control.extendLandingGears()end;r:setTargetGroundAltitude(LandingGearGroundHeight)if inAtmo then BrakeIsOn=true end end end;if hasGear and not BrakeLanding and not(vBooster or hover)then play("grOut","LG",1)a.control.extendLandingGears()end else if hasGear then play("grIn","LG",1)a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif gd=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif gd=="forward"then F=F-1 elseif gd=="backward"then if AltIsOn then gj(-constructVelocity*5000)else F=F+1 end elseif gd=="left"then if AltIsOn then gj(1)else G=G-1 end elseif gd=="right"then if AltIsOn then gj(3)else G=G+1 end elseif gd=="yawright"then H=H-1 elseif gd=="yawleft"then H=H+1 elseif gd=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif gd=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif gd=="up"then upAmount=upAmount+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gd=="down"then upAmount=upAmount-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gd=="groundaltitudeup"then ge()elseif gd=="groundaltitudedown"then ge(true)elseif gd=="option1"then toggleView=false;if AltIsOn and holdingShift then local gl=""for i=1,#passengers do gl=gl.."| Name: "..system.getPlayerName(passengers[i]).." Mass: "..z(core.getBoardedPlayerMass(passengers[i])/1000,1).."t "end;system.print("Onboard: "..gl)return end;ATLAS.adjustAutopilotTargetIndex()elseif gd=="option2"then toggleView=false;if AltIsOn and holdingShift then for i=1,#passengers do core.forceDeboard(passengers[i])end;msgText="Deboarded All Passengers"return end;ATLAS.adjustAutopilotTargetIndex(1)elseif gd=="option3"then local function gm()S=not S;if not S then play("wid","DH")unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;parentingPanelId=system.createWidgetPanel("Docking")parentingWidgetId=system.createWidget(parentingPanelId,"parenting")system.addDataToWidget(unit.getDataId(),parentingWidgetId)coreCombatStressPanelId=system.createWidgetPanel("Core combat stress")coreCombatStressgWidgetId=system.createWidget(coreCombatStressPanelId,"core_stress")system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)if shield_1~=nil then shield_1.show()end else play("hud","DH")unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if parentingPanelId~=nil then s(parentingPanelId)parentingPanelId=nil end;if coreCombatStressPanelId~=nil then s(coreCombatStressPanelId)coreCombatStressPanelId=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end;if shield_1~=nil then shield_1.hide()end end end;if AltIsOn and holdingShift then local gl=""for i=1,#ships do gl=gl.."| ID: "..ships[i].." Mass: "..z(core.getDockedConstructMass(ships[i])/1000,1).."t "end;system.print("Docked Ships: "..gl)return end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;gm()toggleView=false elseif gd=="option4"then toggleView=false;if AltIsOn and holdingShift then for i=1,#ships do core.forceUndock(ships[i])end;msgText="Undocked all ships"return end;ReversalIsOn=nil;AP.ToggleAutopilot()elseif gd=="option5"then toggleView=false;AP.ToggleLockPitch()elseif gd=="option6"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then local gn=shield_1.getVentingCooldown()if gn>0 then msgText="Cannot vent again for "..gn.." seconds"return end;if shield_1.getShieldHitpoints()<shield_1.getMaxShieldHitpoints()then shield_1.startVenting()msgText="Shields Venting Enabled - NO SHIELDS WHILE VENTING"else msgText="Shields already at max hitpoints"end;return else msgText="No shield found"return end end;AP.ToggleAltitudeHold()elseif gd=="option7"then toggleView=false;if AltIsOn and holdingShift then if shield_1 then shield_1.toggle()return else msgText="No shield found"return end end;CollisionSystem=not CollisionSystem;if CollisionSystem then msgText="Collision System Enabled"else msgText="Collision System Secured"end elseif gd=="option8"then stablized=not stablized;if not stablized then msgText="DeCoupled Mode - Ground Stabilization off"r:deactivateGroundEngineAltitudeStabilization()play("gsOff","GS")else msgText="Coupled Mode - Ground Stabilization on"r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)play("gsOn","GS")end;toggleView=false elseif gd=="option9"then if AltIsOn and holdingShift then r:resetCommand(axisCommandId.longitudinal)r:resetCommand(axisCommandId.lateral)r:resetCommand(axisCommandId.vertical)AP.cmdThrottle(0)unit.setTimer("tagTick",0.1)elseif gyro~=nil then gyro.toggle()gyroIsOn=gyro.getState()==1;if gyroIsOn then play("gyOn","GA")else play("gyOff","GA")end end;toggleView=false elseif gd=="lshift"then apButtonsHovered=false;if AltIsOn then holdingShift=true end;if w()==1 then holdingShift=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then holdingShift=true;Animated=false;Animating=false end elseif gd=="brake"then if BrakeToggleStatus or AltIsOn then AP.BrakeToggle()elseif not BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=true end elseif gd=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif gd=="booster"then if VanillaRockets then a:toggleBoosters()elseif not isBoosting then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;isBoosting=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;isBoosting=false end elseif gd=="stopengines"then local function go()if time-D<1.5 then play("clear","CA")AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;ReversalIsOn=nil;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;followMode=false;apThrottleSet=false;spaceLand=false;spaceLaunch=false;reentryMode=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;gyroIsOn=false;LockPitch=nil;IntoOrbit=false end end;go()D=time;if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed then if PlayerThrottle~=0 then r:resetCommand(axisCommandId.longitudinal)AP.cmdThrottle(0)else AP.cmdThrottle(100)end else if r:getTargetSpeed(axisCommandId.longitudinal)~=0 then r:resetCommand(axisCommandId.longitudinal)else if inAtmo then AP.cmdCruise(AtmoSpeedLimit)else AP.cmdCruise(MaxGameVelocity*3.6)end end end elseif gd=="speedup"then Z()elseif gd=="speeddown"then Z(true)elseif gd=="antigravity"and not ExternalAGG then if antigrav~=nil then AP.ToggleAntigrav()end end end;function script.onActionStop(gd)local function gp()if not ExternalAGG and antigravOn then L=J end;if AltitudeHold or VertTakeOff or IntoOrbit then K=I end end;if gd=="forward"then F=0 elseif gd=="backward"then F=0 elseif gd=="left"then if ReversalIsOn then if ReversalIsOn==2 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;G=0 elseif gd=="right"then if ReversalIsOn then if ReversalIsOn==4 then ReversalIsOn=-2 else ReversalIsOn=-1 end end;G=0 elseif gd=="yawright"then H=0 elseif gd=="yawleft"then H=0 elseif gd=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif gd=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif gd=="up"then upAmount=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif gd=="down"then upAmount=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)if stablized then r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)end elseif gd=="groundaltitudeup"then gp()toggleView=false elseif gd=="groundaltitudedown"then gp()toggleView=false elseif gd=="lshift"then if w()==1 then simulatedX=0;simulatedY=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then Animated=false;Animating=false end;holdingShift=false elseif gd=="brake"then if not BrakeToggleStatus and not AltIsOn then if BrakeIsOn then AP.BrakeToggle()else BrakeIsOn=false end end elseif gd=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(gd)local function gq(a0)local C=1;if a0 then C=-1 end;if not ExternalAGG and antigravOn then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+C*L;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;L=q(L*1.05,J,50)BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+C*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then OrbitTargetOrbit=OrbitTargetOrbit+C*K;if OrbitTargetOrbit<planet.noAtmosphericDensityAltitude then OrbitTargetOrbit=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+C*K end;K=q(K*1.05,I,50)else r:updateTargetGroundAltitudeFromActionLoop(C*1.0)end end;local function gr(a0)local C=1;if a0 then C=-1 end;if not holdingShift then if AtmoSpeedAssist and not AltIsOn then PlayerThrottle=q(PlayerThrottle+C*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,C*speedChangeSmall)end end end;if gd=="groundaltitudeup"then if not holdingShift then gq()end elseif gd=="groundaltitudedown"then if not holdingShift then gq(true)end elseif gd=="speedup"then gr()elseif gd=="speeddown"then gr(true)end end;function script.onInputText(ab)local function gs(gt,ck,e8)local function gu(ck)local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF='::pos{'..A..','..A..','..A..','..A..','..A..'}'local aT,aU,b0,b1,b2=n(ck,aF)if aT=="0"and aU=="0"then return vec3(y(b0),y(b1),y(b2))end;b1=math.rad(b1)b0=math.rad(b0)local planet=b[y(aT)][y(aU)]local bL=math.cos(b0)local gv=vec3(bL*math.cos(b1),bL*math.sin(b1),math.sin(b0))return planet.center+(planet.radius+b2)*gv end;local position=gu(ck)return ATLAS.AddNewLocation(gt,position,e8)end;local i;local gw,gx=nil,nil;local gy="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat\n".."/resist 0.15, 0.15, 0.15, 0.15 - Sets shield resistance distribution of the floating 60% extra available, usable once per minute".."/deletewp - Deletes current selected custom wp"i=string.find(ab," ")gw=ab;if i~=nil then gw=string.sub(ab,0,i-1)gx=string.sub(ab,i+1)end;if gw=="/help"or gw=="/commands"then for gz in string.gmatch(gy,"([^\n]+)")do system.print(gz)end;return elseif gw=="/setname"then if gx==nil or gx==""then msgText="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.UpdatePosition(gx)else msgText="Select a saved target to rename first"end elseif shield_1 and gw=="/resist"then if gx==nil or shield_1.getResistancesCooldown()>0 then msgText="Usable once per min.  Usage: /resist 0.15, 0.15, 0.15, 0.15"return end;local A=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local aF=A..', '..A..', '..A..', '..A;local gA,gB,gC,gD=n(gx,aF)if gD==nil or gA+gB+gC+gD>0.6 then msgText="Improperly formatted or total exceeds 0.6"return end;if shield_1.setResistances(gA,gB,gC,gD)==1 then msgText="Shield Resistances set"else msgText="Resistance setting failed."end elseif gw=="/addlocation"or string.find(ab,"::pos")~=nil then local e8=false;local gt="0-Temp"if gx==nil or gx==""then gx=gw;e8=true end;i=string.find(gx,"::")if not e8 then gt=string.sub(gx,1,i-2)end;local ck=string.sub(gx,i)gs(gt,ck,e8)elseif gw=="/agg"then if gx==nil or gx==""then msgText="Usage: /agg targetheight"return end;gx=y(gx)if gx<1000 then gx=1000 end;AntigravTargetAltitude=gx;msgText="AGG Target Height set to "..gx elseif gw=="/G"then if gx==nil or gx==""then msgText="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if gx=="dump"then for aq,ar in pairs(saveableVariables())do if type(_G[ar])=="boolean"then if _G[ar]==true then system.print(ar.." true")else system.print(ar.." false")end elseif _G[ar]==nil then system.print(ar.." nil")else system.print(ar.." ".._G[ar])end end;return end;i=string.find(gx," ")local gE=string.sub(gx,0,i-1)local gF=string.sub(gx,i+1)for aq,ar in pairs(saveableVariables())do if ar==gE then msgText="Variable "..gE.." changed to "..gF;local gG=type(_G[ar])if gG=="number"then gF=y(gF)if ar=="AtmoSpeedLimit"then adjustedAtmoSpeedLimit=gF end elseif gG=="boolean"then if string.lower(gF)=="true"then gF=true else gF=false end end;_G[ar]=gF;return end end;msgText="No such global variable: "..gE elseif gw=="/deletewp"then if autopilotTargetIndex>0 and CustomTarget~=nil then ATLAS.ClearCurrentPosition()else msgText="Select a custom wp to delete first in IPH"end elseif gw=="/copydatabank"then if dbHud_2 then am(true)else msgText="Spare Databank required to copy databank"end elseif gw=="/iphWP"then if AutopilotTargetIndex>0 then system.print(AP.showWayPoint(autopilotTargetPlanet,AutopilotTargetCoords,true))msgText="::pos waypoint shown in lua chat"else msgText="No target selected in IPH"end end end;function script.onEnter(aU)if radars[1]and not inAtmo and not notPvPZone then unit.setTimer("contact",0.1)end end;function script.onLeave(aU)if radars[1]and CollisionSystem then if#X>650 then aU=tostring(aU)X[aU]=nil end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_1
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_2
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_3:
    enter(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_3
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_4:
    enter(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_4
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_5:
    enter(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_5
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_6:
    enter(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_6
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_7:
    enter(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_7
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_8:
    enter(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_8
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_9:
    enter(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_9
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
  radar_10:
    enter(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onEnter then
          local ok, message = xpcall(script.onEnter,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
    leave(id):
      lua: |
        local radar = radar_10
        if not __wrap_lua__stopped and script.onLeave then
          local ok, message = xpcall(script.onLeave,__wrap_lua__traceback,id,radar)
          if not ok then __wrap_lua__error(message) end
        end
