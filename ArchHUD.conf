name: ArchHud - Archaegeo v1.100 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}freeLookToggle=true;BrakeToggleDefault=true;RemoteFreeze=false;RemoteHud=false;brightHud=false;VanillaRockets=false;InvertMouse=false;userControlScheme="virtual joystick"ResolutionX=1920;ResolutionY=1080;SafeR=130;SafeG=224;SafeB=255;PvPR=255;PvPG=0;PvPB=0;centerX=960;centerY=540;throtPosX=1300;throtPosY=540;vSpdMeterX=1525;vSpdMeterY=325;altMeterX=550;altMeterY=540;fuelX=100;fuelY=350;circleRad=400;DeadZone=50;DisplayOrbit=true;OrbitMapSize=250;OrbitMapX=75;OrbitMapY=0;showHud=true;ShowOdometer=true;hideHudOnToggleWidgets=true;ShiftShowsRemoteButtons=true;YawStallAngle=35;PitchStallAngle=35;speedChangeLarge=5;speedChangeSmall=1;brakeLandingRate=30;MaxPitch=30;ReentrySpeed=1050;AtmoSpeedLimit=1050;SpaceSpeedLimit=30000;ReentryAltitude=2500;AutoTakeoffAltitude=1000;TargetHoverHeight=50;LandingGearGroundHeight=0;MaxGameVelocity=8333.00;TargetOrbitRadius=1.4;AutopilotInterplanetaryThrottle=1.0;warmup=32;MouseYSensitivity=0.003;MouseXSensitivity=0.003;autoRollPreference=false;autoRollFactor=2;rollSpeedFactor=1.5;turnAssist=true;turnAssistFactor=2;TrajectoryAlignmentStrength=0.002;torqueFactor=2;pitchSpeedFactor=0.8;yawSpeedFactor=1;brakeSpeedFactor=3;brakeFlatFactor=1;DampingMultiplier=40;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;fuelTankHandlingRocket=0;ContainerOptimization=0;FuelTankOptimization=0;ExtraLongitudeTags="none"ExtraLateralTags="none"ExtraVerticalTags="none"ExternalAGG=false;UseSatNav=false;apTickRate=0.0166667;hudTickRate=0.0666667;ShouldCheckDamage=true;CalculateBrakeLandingSpeed=false;autoRollRollThreshold=0;AtmoSpeedAssist=true;ForceAlignment=false;minRollVelocity=150;VertTakeOffEngine=false;DisplayDeadZone=true;BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getElementNameById;local o=core.getConstructMass;local p=Nav.control.isRemoteControlled;local q=math.atan;local r=string.match;local tostring=tostring;local s=utils.round;local t=system.getTime;local function u(v,w)local x=10^(w or 0)return d(v*x+0.5)/x end;local y=SafeR;local z=SafeB;local A=SafeG;local B=false;local C=0;local D=""local E=0;local F=0;local G=false;local H=0;local I=false;local J=u(ResolutionX/2,0)local K=u(ResolutionY/2,0)local L=false;local M=true;local N=55;local O=false;local P=1;local Q=1;local R=false;local S=0;local T=0;local U=0;local V=0;local W=0;local X=0;local Y=0;local Z=false;local a0=false;local a1="empty"local a2=5;local a3=5;local a4=false;local a5,a6=0;local a7,a8=0;local a9=nil;local aa=0;local ab=0;local ac=false;local ad=0;local ae=0;local af=0;local ag=3;local ah=0;local ai=""local aj=""local ak=0;local al=false;local am=false;local an=false;local ao=-1;local ap=false;local aq=""local ar=j()>0;local as=core.getAltitude()local at=core.getElementIdList()local au=t()local av=nil;local aw=false;local ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]local ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]local az={}local aA=0;local aB=0;local aC=""local aD=true;local aE={}local aF=1;local aG=0.001;local aH=ResolutionX;local aI=ResolutionY;local aJ=nil;local aK=nil;local aL=nil;local aM=nil;local aN=false;local aO=false;local aP=0;local aQ=nil;local aR={}local aS={}local aT={}local aU=0;local aV=false;local aW={}local aX={}local aY=d(1/apTickRate)*2;local aZ={}local a_={}local b0={}local b1={}local b2=false;local b3=16;local b4=0;local b5=nil;local b6=""local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=nil;local be=nil;local bf=false;local bg=false;local bh=autoRollPreference;local bi=vec3(core.getWorldVelocity())local bj=vec3(bi):len()local bk=LandingGearGroundHeight;local bl=system.getMouseDeltaX()local bm=system.getMouseDeltaY()local bn=false;local bo=t()local bp=0;local bq=0;local br=0;local bs=AtmoSpeedLimit;local bt=0;local bu=nil;local bv=0;local bw=0;local bx=false;local by=false;local bz={VectorToTarget=false}local bA=false;local bB=0;local bC=nil;local bD=false;local bE=false;local bF=false;local bG=false;local bH=0;local bI=t()local function bJ(bK)local bL=dbHud_1.hasKey;for bM,bN in pairs(bK)do if bL(bN)then local bO=f(dbHud_1.getStringValue(bN))if bO~=nil then _G[bN]=bO;aN=true end end end end;local function bP()if dbHud_1 then local bL=dbHud_1.hasKey;bJ(a)coroutine.yield()bJ(b)if aN then a1="Loaded Saved Variables (see Lua Chat Tab for list)"J=u(ResolutionX/2,0)K=u(ResolutionY/2,0)aH=ResolutionX;aI=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bh=autoRollPreference;bs=AtmoSpeedLimit;ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]else a1="No Saved Variables Found - Stand up / leave remote to save settings"end else a1="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;if LastStartTime+180<bI then LastMaxBrakeInAtmo=0 end;LastStartTime=bI;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then a1="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ag=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local function bQ(bR,bS)if bR>bS then bS=bR end;if ContainerOptimization>0 then bS=bS-bS*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bS=bS-bS*FuelTankOptimization*0.05 end;return bS end;local function bT()local bU=fuelX~=0 and fuelY~=0;for bM in pairs(at)do local type=l(at[bM])if r(type,'^.*Space Engine$')then bG=true;if r(tostring(core.getElementTagsById(at[bM])),'^.*vertical.*$')then local bV=core.getElementRotationById(at[bM])if bV[4]<0 then if s(-bV[4],0.1)==0.5 then bE=true end else if s(bV[4],0.1)==0.5 then bF=true end end end end;if type=="Landing Gear"then R=true end;if type=="Dynamic Core Unit"then local bW=h(at[bM])if bW>10000 then b3=128 elseif bW>1000 then b3=64 elseif bW>150 then b3=32 end end;aU=aU+h(at[bM])if bU and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bW=h(at[bM])local bX=m(at[bM])local bR=0;local bY=t()if type=="Atmospheric Fuel Tank"then local bS=400;local bZ=35.03;if bW>10000 then bS=51200;bZ=5480 elseif bW>1300 then bS=6400;bZ=988.67 elseif bW>150 then bS=1600;bZ=182.67 end;bR=bX-bZ;if fuelTankHandlingAtmo>0 then bS=bS+bS*fuelTankHandlingAtmo*0.2 end;bS=bQ(bR,bS)aR[#aR+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end;if type=="Rocket Fuel Tank"then local bS=320;local bZ=173.42;if bW>65000 then bS=40000;bZ=25740 elseif bW>6000 then bS=5120;bZ=4720 elseif bW>700 then bS=640;bZ=886.72 end;bR=bX-bZ;if fuelTankHandlingRocket>0 then bS=bS+bS*fuelTankHandlingRocket*0.1 end;bS=bQ(bR,bS)aT[#aT+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end;if type=="Space Fuel Tank"then local bS=2400;local bZ=182.67;if bW>10000 then bS=76800;bZ=5480 elseif bW>1300 then bS=9600;bZ=988.67 end;bR=bX-bZ;if fuelTankHandlingSpace>0 then bS=bS+bS*fuelTankHandlingSpace*0.2 end;bS=bQ(bR,bS)aS[#aS+1]={at[bM],n(at[bM]),bS,bZ,bR,bY}end end end end;local function b_()if gyro~=nil then av=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if door and(ar or not ar and as<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(ar or not ar==0 and as<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if p()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if R then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local c0=AboveGroundLevel()if c0~=-1 or not ar and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not R then GearExtended=true end else BrakeIsOn=false end;if bk~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bk)if bk==0 and not R then GearExtended=true;BrakeIsOn=true end else bk=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ar and c0~=-1 then bd=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ar end;local function c1(bN)if ResolutionX==1920 then return bN else return u(ResolutionX*bN/1920,0)end end;local function c2(bN)if ResolutionY==1080 then return bN else return u(ResolutionY*bN/1080,0)end end;local function c3(c4,c5)if c4==nil then c4=core.g()end;c4=u(c4,5)local c6=j()if c5~=nil and c5 or(aQ==nil or aQ~=c4)then local bi=core.getVelocity()local c7=vec3(bi):len()local c8=f(unit.getData()).maxBrake;if c8~=nil and c8>0 and ar then c8=c8/utils.clamp(c7/100,0.1,1)c8=c8/c6;if c6>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+c8)/2 else LastMaxBrakeInAtmo=c8 end end end;if c8~=nil and c8>0 then LastMaxBrake=c8 end;aQ=c4 end end;local function c9(ca,cb,cc,cd,ce,cf,cg,ch,ci)local cj={enableName=ca,disableName=cb,width=cc,height=cd,x=ce,y=cf,toggleVar=cg,toggleFunction=ch,drawCondition=ci,hovered=false}table.insert(aE,cj)return cj end;local function ck()AtlasOrdered={}for bM,bN in pairs(b5[0])do table.insert(AtlasOrdered,{name=bN.name,index=bM})end;local function cl(cm,cn)return cm.name<cn.name end;table.sort(AtlasOrdered,cl)end;local function co()for bM,bN in pairs(SavedLocations)do table.insert(b5[0],bN)end;ck()end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function cs(ct,cu)local cv=vec3(cu)if ct.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=ct.planetarySystemId},MapPosition)end;local cw=cv-ct.center;local ah=cw:len()local cx=ah-ct.radius;local cy=0;local cz=0;if not cp(ah,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ah)end;return setmetatable({latitude=math.deg(cy),longitude=math.deg(cz),altitude=cx,bodyId=ct.bodyId,systemId=ct.planetarySystemId},MapPosition)end;local function cB(cC)local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local cE,cF,cy,cz,cx=r(cC,cD)if cE=="0"and cF=="0"then return vec3(tonumber(cy),tonumber(cz),tonumber(cx))end;cz=math.rad(cz)cy=math.rad(cy)local planet=b5[tonumber(cE)][tonumber(cF)]local cG=math.cos(cy)local cH=vec3(cG*math.cos(cz),cG*math.sin(cz),math.sin(cy))return planet.center+(planet.radius+cx)*cH end;local function cI(cJ,planet,cC)if dbHud_1 then local cK={}local position=cB(cC)if planet.name=="Space"then cK={position=position,name=cJ,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local cL=false;if planet.hasAtmosphere then cL=true else cL=false end;cK={position=position,name=cJ,atmosphere=cL,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cK;table.insert(b5[0],cK)ck()else a1="Databank must be installed to save locations"end end;local function cM(ah,cN)local cO=ah>100000;local bO,cP=""if cN==nil then cN=1 end;if cO then bO,cP=u(ah/1000/200,cN),"SU"elseif ah<1000 then bO,cP=u(ah,cN),"M"else bO,cP=u(ah/1000,cN),"KM"end;return bO,cP end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cQ=planet.name..". "..#SavedLocations;if radar_1 then local cR,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cR~=nil and cR~=""then cQ=cQ.." "..radar_1.getConstructName(cR)end end;local cK={}local cL=false;if planet.hasAtmosphere then cL=true end;cK={position=position,name=cQ,atmosphere=cL,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cK;table.insert(b5[0],cK)ck()a1="Location saved as "..cQ else a1="Databank must be installed to save locations"end end;function UpdatePosition(cS)local cT=-1;local cK;for bM,bN in pairs(SavedLocations)do if bN.name and bN.name==CustomTarget.name then cT=bM;break end end;if cT~=-1 then local cU;if cS~=nil then cK={position=SavedLocations[cT].position,name=cS,atmosphere=SavedLocations[cT].atmosphere,planetname=SavedLocations[cT].planetname,gravity=SavedLocations[cT].gravity}else cK={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cT].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cT]=cK;cT=-1;for bM,bN in pairs(b5[0])do if bN.name and bN.name==CustomTarget.name then cT=bM end end;if cT>-1 then b5[0][cT]=cK end;ck()a1=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else a1="Name Not Found"end end;function ClearCurrentPosition()local cT=-1;for bM,bN in pairs(b5[0])do if bN.name and bN.name==CustomTarget.name then cT=bM end end;if cT>-1 then table.remove(b5[0],cT)end;cT=-1;for bM,bN in pairs(SavedLocations)do if bN.name and bN.name==CustomTarget.name then a1=bN.name.." saved location cleared"cT=bM;break end end;if cT~=-1 then table.remove(SavedLocations,cT)end;DecrementAutopilotTargetIndex()ck()end;function DrawDeadZone(cV)cV[#cV+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ak==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ak==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ak=0 end end;function ToggleWidgets()if aD then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aD=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aD=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ar then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cW,cX,ce,cf,cc,cd)if cW>ce and cW<ce+cc and cX>cf and cX<cf+cd then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*o()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=as+AutoTakeoffAltitude end;bD=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if IntoOrbit then if bD then CancelIntoOrbit=false else CancelIntoOrbit=true end;bD=false;IntoOrbit=false;bx=false;bv=nil;bw=nil;bC=nil;bH=0 elseif unit.getClosestPlanetInfluence()>0 and j()==0 then IntoOrbit=true;bD=false;CancelIntoOrbit=false;bx=false;bv=nil;bw=nil;bH=0;if bC==nil then bC=planet end else a1="Unable to engage orbiting, not near planet"end end;function ToggleLockPitch()if LockPitch==nil then local cY=vec3(core.getConstructWorldOrientationForward())local cZ=vec3(core.getConstructWorldOrientationRight())local c_=vec3(core.getWorldVertical())local d0=getPitch(c_,cY,cZ)LockPitch=d0;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bI=t()if bI-bq<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bq=-1;if AltitudeHold then return end end else bq=bI end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;Z=false;BrakeLanding=false;Reentry=false;bh=true;LockPitch=nil;bD=false;if hoverDetectGround()==-1 then AutoTakeoff=false;if bq>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if not ar then bD=false;bA=true;IntoOrbit=true;if not am and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bq>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if am then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bh=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if p()==1 then Z=not Z;if Z then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bh=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else a1="Follow Mode only works with Remote controller"Z=false end end;function ToggleAutopilot()local bI=t()if bI-br<1.5 and j()>0 then if not bG then a1="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;br=-1;if Autopilot or VectorToTarget then return end end else br=bI end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not am then UpdateAutopilotTarget()local d1=cs(a9,AutopilotTargetCoords)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then am=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then bD=false;if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if as>100000 or as==0 then bD=false;Autopilot=true else al=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then am=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then local d2=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a9.name==planet.name and d2)then bD=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;Z=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;L=false;LockPitch=nil;WaypointSet=false end else am=true;ToggleAltitudeHold()end else am=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;L=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=as;TargetSet=false;Reentry=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;Z=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bh=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bh=autoRollPreference;al=false;an=false;ad=0 end end;function CheckDamage(cV)local d3=0;aC=""local d4=aU;local d5=0;local d6=0;local d7=0;local d8=0;local d9=""for bM in pairs(at)do local bW=0;local da=0;da=h(at[bM])bW=k(at[bM])d5=d5+bW;if bW<da then if bW==0 then d7=d7+1 else d6=d6+1 end;if aV and#az==0 then position=vec3(core.getElementPositionById(at[bM]))local ce=position.x-b3;local cf=position.y-b3;local db=position.z-b3;table.insert(az,core.spawnArrowSticker(ce,cf,db+1,"down"))table.insert(az,core.spawnArrowSticker(ce,cf,db+1,"down"))core.rotateSticker(az[2],0,0,90)table.insert(az,core.spawnArrowSticker(ce+1,cf,db,"north"))table.insert(az,core.spawnArrowSticker(ce+1,cf,db,"north"))core.rotateSticker(az[4],90,90,0)table.insert(az,core.spawnArrowSticker(ce-1,cf,db,"south"))table.insert(az,core.spawnArrowSticker(ce-1,cf,db,"south"))core.rotateSticker(az[6],90,-90,0)table.insert(az,core.spawnArrowSticker(ce,cf-1,db,"east"))table.insert(az,core.spawnArrowSticker(ce,cf-1,db,"east"))core.rotateSticker(az[8],90,0,90)table.insert(az,core.spawnArrowSticker(ce,cf+1,db,"west"))table.insert(az,core.spawnArrowSticker(ce,cf+1,db,"west"))core.rotateSticker(az[10],-90,0,90)table.insert(az,at[bM])end elseif aV and#az>0 and az[11]==at[bM]then for dc in pairs(az)do core.deleteSticker(az[dc])end;az={}end end;d3=d(d5/d4*100)if d3<100 then cV[#cV+1]=[[<g class="pbright txt">]]d8=d(d3*2.55)d9=e("rgb(%d,%d,%d)",255-d8,d8,0)if d3<100 then cV[#cV+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],d9,d3)if d7>0 then cV[#cV+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],d9,d7,d6)elseif d6>0 then cV[#cV+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],d9,d6)end end;cV[#cV+1]=[[<\g>]]end end;function DrawCursorLine(cV)local dd=d(utils.clamp(ah/(aH/4)*255,0,255))cV[#cV+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ae,af,d(y+0.5)+dd,d(A+0.5)-dd,d(z+0.5)-dd)end;function getPitch(de,df,cn)local dg=de:cross(cn):normalize_inplace()local d0=math.acos(utils.clamp(dg:dot(-df),-1,1))*constants.rad2deg;if dg:cross(-df):dot(cn)<0 then d0=-d0 end;return d0 end;local function dh(di,dj,dk)dj=dj:project_on_plane(di)dk=dk:project_on_plane(di)return q(dj:cross(dk):dot(di),dj:dot(dk))end;function clearAll()if ap then ap=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;Z=false;L=false;al=false;am=false;O=false;bh=autoRollPreference;VectorToTarget=false;TurnBurn=false;av=false;LockPitch=nil else ap=true end end;function wipeSaveVariables()if not dbHud_1 then a1="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ag=5 else if aO then for bM,bN in pairs(a)do dbHud_1.setStringValue(bN,g(nil))end;for bM,bN in pairs(b)do if bN~="SavedLocations"then dbHud_1.setStringValue(bN,g(nil))end end;a1="Databank wiped. New variables will save after re-enter seat and exit"ag=5;aO=false;aN=false;ac=true else a1="Press ALT-7 again to confirm wipe of ALL data"aO=true end end end;function CheckButtons()for _,bN in pairs(aE)do if bN.hovered then if not bN.drawCondition or bN.drawCondition()then bN.toggleFunction()end;bN.hovered=false end end end;function SetButtonContains()local ce=ae+aH/2;local cf=af+aI/2;for _,bN in pairs(aE)do bN.hovered=Contains(ce,cf,bN.x,bN.y,bN.width,bN.height)end end;function DrawButton(cV,dl,hover,ce,cf,dm,dn,dp,dq,dr,ds)if type(dr)=="function"then dr=dr()end;if type(ds)=="function"then ds=ds()end;cV[#cV+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",ce,cf,dm,dn)if dl then cV[#cV+1]=e("%s'",dp)else cV[#cV+1]=dq end;if hover then cV[#cV+1]=" style='stroke:white; stroke-width:2'"else cV[#cV+1]=" style='stroke:black; stroke-width:1'"end;cV[#cV+1]="></rect>"cV[#cV+1]=e("<text x='%f' y='%f' font-size='24' fill='",ce+dm/2,cf+dn/2+5)if dl then cV[#cV+1]="black"else cV[#cV+1]="white"end;cV[#cV+1]="' text-anchor='middle' font-family='Montserrat'>"if dl then cV[#cV+1]=e("%s</text>",dr)else cV[#cV+1]=e("%s</text>",ds)end end;function DrawButtons(cV)local dt="rgb(50,50,50)'"local du="rgb(210,200,200)"local dv=DrawButton;for _,bN in pairs(aE)do local cb=bN.disableName;local ca=bN.enableName;if type(cb)=="function"then cb=cb()end;if type(ca)=="function"then ca=ca()end;if not bN.drawCondition or bN.drawCondition()then dv(cV,bN.toggleVar(),bN.hovered,bN.x,bN.y,bN.width,bN.height,du,dt,cb,ca)end end end;function DrawTank(cV,b2,ce,dw,dx,dy,dz,dA)local dB=1;local dC=2;local dD=3;local dE=4;local dF=5;local dG=6;local dH=""local dI=0;local dJ=fuelY;local dK=fuelY+10;if p()==1 and not RemoteHud then dJ=dJ-50;dK=dK-50 end;cV[#cV+1]=[[<g class="pdim txtfuel">]]if dx=="ATMO"then dH="atmofueltank"elseif dx=="SPACE"then dH="spacefueltank"else dH="rocketfueltank"end;dI=_G[dH.."_size"]if#dy>0 then for i=1,#dy do local cQ=string.sub(dy[i][dC],1,12)local dL=0;for dc=1,dI do if dy[i][dC]==f(unit[dH.."_"..dc].getData()).name then dL=dc;break end end;if b2 or dz[i]==nil or dA[i]==nil then local dM=0;local dN=0;local dO=0;local dP=0;local bY=t()if dL~=0 then dA[i]=f(unit[dH.."_"..dL].getData()).percentage;dz[i]=f(unit[dH.."_"..dL].getData()).timeLeft;if dz[i]=="n/a"then dz[i]=0 end else dO=m(dy[i][dB])-dy[i][dE]dM=dy[i][dD]dA[i]=d(0.5+dO*100/dM)dN=dy[i][dF]dP=dy[i][dG]if dN<=dO then dz[i]=0 else dz[i]=d(0.5+dO/((dN-dO)/(bY-dP)))end;dy[i][dF]=dO;dy[i][dG]=bY end end;if cQ==dw then cQ=e("%s %d",dx,i)end;if dL==0 then cQ=cQ.." *"end;local dQ;if dz[i]==0 then dQ="n/a"else dQ=FormatTimeString(dz[i])end;if dA[i]~=nil then local d8=d(dA[i]*2.55)local d9=e("rgb(%d,%d,%d)",255-d8,d8,0)local dR=""if dQ~="n/a"and dz[i]<120 or dA[i]<5 then if b2 then dR=[[class="red"]]end end;cV[#cV+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],ce,dJ,dR,cQ,ce,dK,d9,dA[i],dQ)dJ=dJ+30;dK=dK+30 end end end;cV[#cV+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bi)bi=vec3(bi)local d0=-math.deg(math.atan(bi.y,bi.z))+180;d0=d0-90;if d0<0 then d0=360+d0 end;if d0>180 then d0=-180+d0-180 end;return-d0 end;function getRelativeYaw(bi)bi=vec3(bi)local dS=math.deg(math.atan(bi.y,bi.x))-90;if dS<-180 then dS=360+dS end;return dS end;function AlignToWorldVector(dT,dU,dV)if not ar or not bn or ao~=-1 or bj<N then local dW=dV;if dW==nil then dW=DampingMultiplier end;if dU==nil then dU=aG end;dT=vec3(dT):normalize()local dX=vec3(core.getConstructWorldOrientationForward())-dT;local dY=-getMagnitudeInDirection(dX,core.getConstructWorldOrientationRight())*aF;local dZ=-getMagnitudeInDirection(dX,core.getConstructWorldOrientationUp())*aF;if aA==0 then aA=dY/2 end;if aB==0 then aB=dZ/2 end;if math.abs(dY)<0.1 then U=U-dY*2 else U=U-(dY+(dY-aA)*dW)end;if math.abs(dZ)<0.1 then T=T+dZ*2 else T=T+dZ+(dZ-aB)*dW end;aA=dY;aB=dZ;if math.abs(dY)<dU and math.abs(dZ)<dU then return true end;return false elseif bn and ao==-1 then dT=vec3(core.getWorldVelocity())local dW=dV;if dW==nil then dW=DampingMultiplier end;if dU==nil then dU=aG end;dT=vec3(dT):normalize()local dX=vec3(core.getConstructWorldOrientationForward())-dT;local dY=-getMagnitudeInDirection(dX,core.getConstructWorldOrientationRight())*aF;local dZ=-getMagnitudeInDirection(dX,core.getConstructWorldOrientationUp())*aF;if aA==0 then aA=dY/2 end;if aB==0 then aB=dZ/2 end;if math.abs(dY)<0.1 then U=U-dY*5 else U=U-(dY+(dY-aA)*dW)end;if math.abs(dZ)<0.1 then T=T+dZ*5 else T=T+dZ+(dZ-aB)*dW end;aA=dY;aB=dZ;if math.abs(dY)<dU and math.abs(dZ)<dU then return true end;return false end end;function getAPEnableName()local cQ=AutopilotTargetName;if cQ==nil then local d_,cP=cM((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cQ=CustomTarget.name.." "..d_..cP end;if cQ==nil then cQ="None"end;return"Engage Autopilot: "..cQ end;function getAPDisableName()local cQ=AutopilotTargetName;if cQ==nil then cQ=CustomTarget.name end;if cQ==nil then cQ="None"end;return"Disable Autopilot: "..cQ end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then a1="Re-Entry cancelled"Reentry=false;bh=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then a1="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ag=5 elseif not O then StrongBrakes=planet.gravity*9.80665*o()<LastMaxBrakeInAtmo;if not StrongBrakes then a1="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;bh=true;BrakeIsOn=false;a1="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;bh=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local e0,e1=cM(HoldAltitude)a1="Beginning Re-entry.  Target speed: "..bs.." Target Altitude: "..e0 ..e1;cmdCruise(math.floor(bs))end;AutoTakeoff=false end;function SetupButtons()local e2=50;local e3=260;local e4=c9("Enable Brake Toggle","Disable Brake Toggle",e3,e2,aH/2-e3/2,aI/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then a1="Brakes in Toggle Mode"else a1="Brakes in Default Mode"end end)c9("Align Prograde","Disable Prograde",e3,e2,aH/2-e3/2-50-e4.width,aI/2-e2+380,function()return ProgradeIsOn end,ProgradeToggle)c9("Align Retrograde","Disable Retrograde",e3,e2,aH/2-e3/2+e4.width+50,aI/2-e2+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local e5=c9(getAPEnableName,getAPDisableName,600,60,aH/2-600/2,aI/2-60/2-400,function()return Autopilot end,ToggleAutopilot)c9("Save Position","Save Position",200,e5.height,e5.x+e5.width+30,e5.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)c9("Update Position","Update Position",200,e5.height,e5.x+e5.width+30,e5.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)c9("Clear Position","Clear Position",200,e5.height,e5.x-200-30,e5.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)e2=60;e3=300;local ce=10;local cf=aI/2-300;c9("Enable Turn and Burn","Disable Turn and Burn",e3,e2,ce,cf,function()return TurnBurn end,ToggleTurnBurn)c9("Engage Altitude Hold","Disable Altitude Hold",e3,e2,ce+e3+20,cf,function()return AltitudeHold end,ToggleAltitudeHold)cf=cf+e2+20;c9("Engage Autoland","Disable Autoland",e3,e2,ce,cf,function()return AutoLanding end,ToggleAutoLanding)local e6,e7,e8;if VertTakeOffEngine then e6="Engage Vertical Takeoff"e7="Disable Vertical Takeoff"e8=VertTakeOff else e6="Engage Auto Takeoff"e7="Disable Auto Takeoff"e8=AutoTakeoff end;c9(e6,e7,e3,e2,ce+e3+20,cf,function()return e8 end,ToggleAutoTakeoff)cf=cf+e2+20;c9("Show Orbit Display","Hide Orbit Display",e3,e2,ce,cf,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then a1="Orbit Display Enabled"else a1="Orbit Display Disabled"end end)c9("Engage Orbiting","Cancel Orbiting",e3,e2,ce+e3+20,cf,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)cf=cf+e2+20;c9("Glide Re-Entry","Cancel Glide Re-Entry",e3,e2,ce,cf,function()return Reentry end,function()al=true;ProgradeToggle()end,function()return as>ReentryAltitude end)c9("Parachute Re-Entry","Cancel Parachute Re-Entry",e3,e2,ce+e3+20,cf,function()return Reentry end,BeginReentry,function()return as>ReentryAltitude end)cf=cf+e2+20;c9("Engage Follow Mode","Disable Follow Mode",e3,e2,ce,cf,function()return Z end,ToggleFollowMode,function()return p()==1 end)c9("Enable Repair Arrows","Disable Repair Arrows",e3,e2,ce+e3+20,cf,function()return aV end,function()aV=not aV;if aV then a1="Repair Arrows Enabled"else a1="Repair Arrows Diabled"end end,function()return p()==1 end)cf=cf+e2+20;if not ExternalAGG then c9("Enable AGG","Disable AGG",e3,e2,ce,cf,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;cf=cf+e2+20;c9(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,e3*2,e2,ce,cf,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local e9=Nav.axisCommandManager:getAxisCommandType(0)local ea="TRAVEL"if e9==1 then ea="CRUISE"end;if Autopilot then ea="AUTOPILOT"end;return ea end;function UpdateHud(cV)local cx=as;local bi=core.getVelocity()local c7=vec3(bi):len()local c_=vec3(core.getWorldVertical())local cY=vec3(core.getConstructWorldOrientationForward())local cZ=vec3(core.getConstructWorldOrientationRight())local eb=vec3(core.getConstructWorldOrientationUp())local ec=getRoll(c_,cY,cZ)local ed=ec/180*math.pi;local ee=math.cos(ed)local ef=math.sin(ed)local d0=getPitch(c_,cY,cZ*ee+eb*ef)local eg=ec;local eh=d0;local ei=j()local ej=d(unit.getThrottle())local ek=c7*3.6;local el=unit.getAxisCommandValue(0)local em=c1(1770)local en=c2(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then el=E;ej=E*100 end;local ea=GetFlightStyle()local eo="ROLL"local d2=unit.getClosestPlanetInfluence()>0;if ej==nil then ej=0 end;if not d2 then if c7>5 then d0=getRelativePitch(bi)ec=getRelativeYaw(bi)else d0=0;ec=0 end;eo="YAW"end;if C>50000 and not ar then local ep;if C>200000 then ep=u(C/200000,2).." su"else ep=u(C/1000,1).." km"end;cV[#cV+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],em,en,ep)end;cV[#cV+1]=aj;cV[#cV+1]=aC;cV[#cV+1]=ai;if b4%aY==0 then b2=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cV,b2,fuelX,"Atmospheric ","ATMO",aR,b0,b1)DrawTank(cV,b2,fuelX+100,"Space fuel t","SPACE",aS,aZ,a_)DrawTank(cV,b2,fuelX+200,"Rocket fuel ","ROCKET",aT,aW,aX)end;if b2 then b2=false;b4=0 end;b4=b4+1;DrawVerticalSpeed(cV,cx)if p()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d2 then DrawRollLines(cV,centerX,centerY,eg,eo,d2)DrawArtificialHorizon(cV,eh,eg,centerX,centerY,d2,d(getRelativeYaw(bi)),c7)else DrawRollLines(cV,centerX,centerY,ec,eo,d2)DrawArtificialHorizon(cV,d0,ec,centerX,centerY,d2,d(ec),c7)end;DrawAltitudeDisplay(cV,cx,d2)DrawPrograde(cV,bi,c7,centerX,centerY)end end;DrawThrottle(cV,ea,ej,el)DrawSpeed(cV,ek)DrawWarnings(cV)DisplayOrbitScreen(cV)if screen_2 then local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/b7;local cf=450+cC.y/b8;screen_2.moveContent(b9,(ce-80)/19.2,(cf-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and p()==0 end;function HUDPrologue(cV)if not B then y=PvPR;A=PvPG;z=PvPB else y=SafeR;A=SafeG;z=SafeB end;ax=[[rgb(]]..d(y+0.5)..","..d(A+0.5)..","..d(z+0.5)..[[)]]ay=[[rgb(]]..d(y*0.9+0.5)..","..d(A*0.9+0.5)..","..d(z*0.9+0.5)..[[)]]local eq=ax;local er=ay;local es=ax;local et=ay;if IsInFreeLook()and not brightHud then eq=[[rgb(]]..d(y*0.4+0.5)..","..d(A*0.4+0.5)..","..d(z*0.3+0.5)..[[)]]er=[[rgb(]]..d(y*0.3+0.5)..","..d(A*0.3+0.5)..","..d(z*0.2+0.5)..[[)]]end;cV[#cV+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],eq,eq,es,es,er,er,et,et,ResolutionX,ResolutionY)end;function HUDEpilogue(cV)cV[#cV+1]="</svg>"end;function DrawSpeed(cV,ek)local eu=throtPosY-10;local ev=throtPosX+10;cV[#cV+1]=[[<g class="pdim txt txtend">]]if p()==1 and not RemoteHud then eu=75 end;cV[#cV+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],ev,eu,d(ek))end;function DrawOdometer(cV,aa,TotalDistanceTravelled,ea,ab,ei)local ew=c1(1240)local ex=c2(55)local ey=ex+10;local ei=j()local c4=core.g()local ez=0;local eA=0;local eB=0;c3(c4)if ar then eB=LastMaxBrakeInAtmo else eB=LastMaxBrake end;maxThrust=Nav:maxForceForward()aP=o()if not ShowOdometer then return end;local eC=vec3(core.getWorldAcceleration()):len()/9.80665;if c4>0.1 then eA=aP*c4;ez=maxThrust/c4 end;cV[#cV+1]=[[<g class="pdim txt txtend">]]if p()==1 and not RemoteHud then ew=c1(1120)ex=c2(55)ey=ex+10 elseif ar then local eD=c1(770)cV[#cV+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],eD,ex,eD,ey,ei)end;cV[#cV+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],ew,ex,ew,ey,c4/9.80665,ew,ex+20,ew,ey+20,eC)cV[#cV+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],c1(660),c1(700),c2(35),c1(960),c2(55),c1(1240),c2(35),c1(1280))if p()==0 or RemoteHud then cV[#cV+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],c1(700),c2(20),aa,c1(700),c2(30),TotalDistanceTravelled/1000,c1(830),c2(20),FormatTimeString(ab),c1(830),c2(30),FormatTimeString(TotalFlightTime),c1(970),c2(20),aP/1000,c1(1240),c2(10),eB/1000,c1(1240),c2(30),maxThrust/1000,c1(960),c2(180),ea)if c4>0.1 then cV[#cV+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],c1(970),c2(30),ez/1000,c1(1240),c2(20),eA/1000)else cV[#cV+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],c1(970),c2(30),c1(1240),c2(20))end else cV[#cV+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],c1(960),c2(33),ea)end;cV[#cV+1]="</g>"end;function DrawThrottle(cV,ea,ej,el)ej=math.floor(ej+0.5)local dJ=throtPosY+10;local dK=throtPosY+20;if p()==1 and not RemoteHud then dJ=55;dK=65 end;local eE="CRUISE"local unit="km/h"local eF=el;if ea=="TRAVEL"or ea=="AUTOPILOT"then eE="THROT"unit="%"eF=ej;local eG="dim"if ej<0 then eG="red"end;cV[#cV+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],eG,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(ej),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cV[#cV+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,dJ,eE,throtPosX+10,dK,eF,unit)if ar and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and G then ej=math.floor(H*100+0.5)local eG="red"if ej<0 then eG="red"end;cV[#cV+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],eG,1-math.abs(ej),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cV[#cV+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,dJ+40,"LIMIT",throtPosX+10,dK+40,ej,"%")end;if ar and AtmoSpeedAssist or Reentry then cV[#cV+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dJ-40,"LIMIT: ",bs.." km/h")elseif not ar and Autopilot then cV[#cV+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dJ-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cV,cx)if cx<200000 and not ar or cx and ar then local eH=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local eI=0;if math.abs(eH)>1 then eI=45*math.log(math.abs(eH),10)if eH<0 then eI=-eI end end;cV[#cV+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(eH),d(eI))end end;function getHeading(df)local eJ=-vec3(core.getWorldVertical())df=df-df:project_on(eJ)local eK=vec3(0,0,1)eK=eK-eK:project_on(eJ)local eL=eK:cross(eJ)local eI=eK:angle_between(df)*constants.rad2deg;if df:dot(eL)<0 then eI=360-eI end;return eI end;function DrawRollLines(cV,centerX,centerY,eg,eo,d2)local eM=circleRad;local eN=20;eN=d(eN)local eO=d(eg)if d2 then for i=-45,45,5 do local eP=i;cV[#cV+1]=e([[<g transform="rotate(%f,%d,%d)">]],eP,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cV[#cV+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+eM+eN-len,centerX,centerY+eM+eN)end;cV[#cV+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+eM+eN-35,eo,centerX,centerY+eM+eN-25,eO)cV[#cV+1]=e([[<g transform="rotate(%f,%d,%d)">]],-eg,centerX,centerY)cV[#cV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+eM+eN-20,centerX+5,centerY+eM+eN-20,centerX,centerY+eM+eN-15)cV[#cV+1]="</g>"end;local dS=eO;if d2 then dS=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local eQ=20;local eR=d(dS)local eS=0;local eT=centerY+eM+eN+20;local eU=centerX;if eo~="YAW"then eT=c2(130)eU=c1(960)end;local eV=[[<path class="txttick line" d="]]for i=d(eR-(eQ+10)-eR%5+0.5),d(eR+eQ+10+eR%5+0.5),5 do local ce=eU+-i*5+dS*5;if i%10==0 then eS=10;local v=i;if v==360 then v=0 elseif v>360 then v=v-360 elseif v<0 then v=v+360 end;cV[#cV+1]=e([[
                            <text x="%f" y="%f">%d</text>]],ce+5,eT-12,v)elseif i%5==0 then eS=5 end;if eS==10 then eV=e([[%s M %f %f v %d]],eV,ce,eT-5,eS)else eV=e([[%s M %f %f v %d]],eV,ce,eT-2.5,eS)end end;cV[#cV+1]=eV..[["/>]]cV[#cV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eU-5,eT+10,eU+5,eT+10,eU,eT+5)if d2 then eo="HDG"end;cV[#cV+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eU,eT+25,eR,eU,eT+35,eo)end;function DrawArtificialHorizon(cV,eh,eg,centerX,centerY,d2,eW,c7)local eM=circleRad;local eX=d(eM*3/5)if eM>0 then local eY=d(eh)local len=0;local eV=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*eg,centerX,centerY)if not ar then eV=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cV[#cV+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],eM-1,centerX,centerY)cV[#cV+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eY-30-eY%5+0.5),d(eY+30+eY%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local cf=centerY+-i*5+eh*5;if len==30 then eV=e([[%s M %d %f h %d]],eV,centerX-eX-len,cf,len)if ar then cV[#cV+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eg,centerX,centerY,centerX-eX+10,cf,i)cV[#cV+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*eg,centerX,centerY,centerX+eX-10,cf,i)if i==0 or i==180 or i==-180 then cV[#cV+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eg,centerX,centerY,centerX-eX+20,cf,eX*2-40)end else cV[#cV+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eX+10,cf,i)cV[#cV+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eX-10,cf,i)end;eV=e([[%s M %d %f h %d]],eV,centerX+eX,cf,len)else eV=e([[%s M %d %f h %d]],eV,centerX-eX-len,cf,len)eV=e([[%s M %d %f h %d]],eV,centerX+eX,cf,len)end end;cV[#cV+1]=eV..[["/>]]local eZ="PITCH"if not d2 then eZ="REL PITCH"end;if eh>90 and not ar then eh=90-(eh-90)elseif eh<-90 and not ar then eh=-90-(eh+90)end;if eM>200 then if ar then if c7>N then cV[#cV+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,eW)end;cV[#cV+1]=e([[<g transform="rotate(%f,%d,%d)">]],-eg,centerX,centerY)else cV[#cV+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cV[#cV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eX+25,centerY-5,centerX-eX+20,centerY,centerX-eX+25,centerY+5,centerX-eX+50,centerY+4,eY)cV[#cV+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eX-25,centerY-5,centerX+eX-20,centerY,centerX+eX-25,centerY+5,centerX+eX-30,centerY+4,eY)cV[#cV+1]="</g>"end;local e_=d(eM/3)cV[#cV+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-e_,centerY,eM-e_)if not ar and d2 then cV[#cV+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*eg,centerX,centerY,centerX-eX+10,centerY,eX*2-20)end;cV[#cV+1]="</g>"if eM<200 then if ar and c7>N then cV[#cV+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eM,eZ,centerX,centerY-eM+10,eY,centerX,centerY-15,"Yaw",centerX,centerY+20,eW)else cV[#cV+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-eM,eZ,centerX,centerY-eM+15,eY)end end end end;function DrawAltitudeDisplay(cV,cx,d2)local f0=altMeterX;local f1=altMeterY;local f2=78;local f3=19;local f4=AboveGroundLevel()if f4~=-1 then table.insert(cV,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],f0+f2,f1+f3+20,f4))end;if d2 and(cx<200000 and not ar or cx and ar)then table.insert(cV,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],f0-1,f1-4,f2+2,f3+6,f0+1,f1-1,f2-4,f3))local cT=0;local f5=1;local f6=0;local f7=cx<0;local f8=9;if f7 then f8=0 end;local cx=math.abs(cx)while cT<6 do local f9=11;local fa=16;local fb=9;local fc=14;local dR="altsm"if cT>2 then fa=fa+3;f9=f9+2;fc=fc+2;fb=fb-6;dR="altbig"end;if f7 then dR=dR.." red"end;local fd=cx/f5%10;local fe=d(fd)local ff=d((fe+1)%10)local fg=f6;if cT==0 then fg=fd-fe;if f7 then fg=1-fg end end;if f7 and(cT==0 or f6~=0)then local fh=ff;ff=fe;fe=fh end;local fi=fa*(fg-1)local fj=fi+fa;local ce=f0+fb+(6-cT)*f9;local cf=f1+fc;table.insert(cV,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dR,ce,cf+fi,ff,ce,cf+fj,fe))cT=cT+1;f5=f5*10;if fe==f8 then f6=fg else f6=0 end end;table.insert(cV,[[</g></g>]])end end;function DrawPrograde(cV,bi,c7,centerX,centerY)if c7>5 and not ar or c7>N then local eM=circleRad;local fk=20;local fl=20;local fm=vec3(bi)local fn=getRelativePitch(fm)local fo=getRelativeYaw(fm)local fp=14;local fq=fp/2;local fr=-fo/fl*eM;local fs=fn/fk*eM;local ce=centerX+fr;local cf=centerY+fs;local ah=math.sqrt(fr^2+fs^2)local ft=[[<circle
                cx="]]..ce..[["
                cy="]]..cf..[["
                r="]]..fq/fp..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..ce..[["
                cy="]]..cf..[["
                r="]]..fq..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..ce-fp..[[,]]..cf..[[ h ]]..fq..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..ce+fq..[[,]]..cf..[[ h ]]..fq..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..ce..[[,]]..cf-fp..[[ v ]]..fq..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ah<eM then cV[#cV+1]=ft else local eI=math.atan(fs,fr)local fu=4;local fv=centerX+eM*math.cos(eI)local fw=centerY+eM*math.sin(eI)cV[#cV+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',eI*180/math.pi,fv,fw,fv-fu,fw-fu/2,fu*2,fu,fv+fu,fw-fu,fu,fu,-fu,fu)end;if not ar then fn=getRelativePitch(-fm)fo=getRelativeYaw(-fm)fr=-fo/fl*eM;fs=fn/fk*eM;ce=centerX+fr;cf=centerY+fs;ah=math.sqrt(fr^2+fs^2)if ah<eM then local fx=[[<circle
                        cx="]]..ce..[["
                        cy="]]..cf..[["
                        r="]]..fq..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..ce..[[,]]..cf-fp..[[ v ]]..fq..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..ce..[[,]]..cf..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..ce..[[,]]..cf..[[)" />
                     <path
                        d="M ]]..ce-fq..[[,]]..cf..[[ h ]]..fp..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..ce..[[,]]..cf..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..ce..[[,]]..cf..[[)"/>]]cV[#cV+1]=fx end end end end;function DrawWarnings(cV)cV[#cV+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],c1(1900),c2(1070),VERSION_NUMBER)cV[#cV+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cV[#cV+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],c1(960),c2(550))cV[#cV+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],c1(960),c2(600))cV[#cV+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],c1(960),c2(650))end;local fy=c1(960)local fz=c2(860)local fA=c2(880)local fB=c2(900)local fC=c2(960)local fD=c2(200)local fE=c2(150)local fF=c2(960)if p()==1 and not RemoteHud then fz=c2(135)fA=c2(155)fB=c2(175)fD=c2(115)fE=c2(95)end;if BrakeIsOn then cV[#cV+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fy,fz)elseif F>0 then cV[#cV+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fy,fz,F)end;if ar and bn and hoverDetectGround()==-1 then cV[#cV+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fy,fD+50)end;if av then cV[#cV+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fy,fF)end;if GearExtended then if R then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fy,fA)else cV[#cV+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fy,fA)end;local d_,cP=cM(Nav:getTargetGroundAltitude())cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fy,fB,d_..cP)end;if a4 then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fy,fC+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(as-antigrav.getBaseAltitude())<501 then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fy,fD+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cV[#cV+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fy,fD+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fy,fD+20,AutopilotStatus)elseif LockPitch~=nil then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fy,fD+20,d(LockPitch))elseif Z then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fy,fD+20)elseif Reentry then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fy,fD+20)end;local fG,fH,fI=bb:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bi:normalize(),function(fJ)if fJ.noAtmosphericDensityAltitude>0 then return fJ.radius+fJ.noAtmosphericDensityAltitude else return fJ.radius+fJ.surfaceMaxAltitude*1.5 end end)local fK=fH;if fI~=nil and fH~=nil then fK=math.min(fI,fH)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local d_,cP=cM(HoldAltitude,2)cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],fy,fD,d_..cP)if BrakeIsOn then cV[#cV+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fy,fD+50)end else local d_,cP=cM(HoldAltitude)cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fy,fD,d_..cP)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fy,fD)elseif j()<0.09 and j()>0.05 then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fy,fD)elseif j()<0.05 then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fy,fD)end end;if IntoOrbit then if bu~=nil then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fy,fD,bu)end end;if BrakeLanding then if StrongBrakes then cV[#cV+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fy,fD)else cV[#cV+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fy,fD)end end;if ProgradeIsOn then cV[#cV+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fy,fD)end;if RetrogradeIsOn then cV[#cV+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fy,fD)end;if TurnBurn then cV[#cV+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fy,fE)elseif fK~=nil and j()==0 then local d_,cP=cM(fK)local travelTime=bc.computeTravelTime(bj,0,fK)local fL="Collision"if fG.noAtmosphericDensityAltitude>0 then fL="Atmosphere"end;cV[#cV+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fy,fE,fG.name,fL,FormatTimeString(travelTime),d_..cP)end;if VectorToTarget and not IntoOrbit then cV[#cV+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fy,fD+30,VectorStatus)end;cV[#cV+1]="</g>"end;function DisplayOrbitScreen(cV)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fM=OrbitMapX;local fN=OrbitMapY;local fO=OrbitMapSize;local fP=4;fN=fN+fP;local fQ=15;local ce=fM+fO+fM/2+fP;local cf=fN+fO/2+5+fP;local fR,fS,fT,fU;fR=fO/4;fU=0;cV[#cV+1]=[[<g class="pbright txtorb txtmid">]]cV[#cV+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fO+fM*2,fO+fN,fP,fP)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fT=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fR*2)fS=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fT*(1-orbit.eccentricity)fU=fR-orbit.periapsis.altitude/fT-planet.radius/fT;local fV=""if orbit.periapsis.altitude<=0 then fV='redout'end;cV[#cV+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fV,fM+fO/2+fU+fP,fN+fO/2+fP,fR,fS)cV[#cV+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fM+fO/2+fP,fN+fO/2+fP,planet.radius/fT)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cV[#cV+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ce-35,cf-5,fM+fO/2+fR+fU,cf-5)cV[#cV+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],ce,cf)cf=cf+fQ;local d_,cP=cM(orbit.apoapsis.altitude)cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,d_..cP)cf=cf+fQ;cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,FormatTimeString(orbit.timeToApoapsis))cf=cf+fQ;cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,getSpeedDisplayString(orbit.apoapsis.speed))end;cf=fN+fO/2+5+fP;ce=fM-fM/2+10+fP;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cV[#cV+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ce+35,cf-5,fM+fO/2-fR+fU,cf-5)cV[#cV+1]=e([[<text x="%f" y="%f">Periapsis</text>]],ce,cf)cf=cf+fQ;local d_,cP=cM(orbit.periapsis.altitude)cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,d_..cP)cf=cf+fQ;cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,FormatTimeString(orbit.timeToPeriapsis))cf=cf+fQ;cV[#cV+1]=e([[<text x="%f" y="%f">%s</text>]],ce,cf,getSpeedDisplayString(orbit.periapsis.speed))end;cV[#cV+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fM+fO/2+fP,20+fP,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fW=orbit.timeToApoapsis/orbit.period*2*math.pi;local fX=fR*math.cos(fW)local fY=fS*math.sin(fW)cV[#cV+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fM+fO/2+fX+fU+fP,fN+fO/2+fY+fP)end;cV[#cV+1]=[[</g>]]end end;function getSpeedDisplayString(c7)return d(u(c7*3.6,0)+0.5).." km/h"end;function FormatTimeString(fZ)local f_=0;local g0=0;local g1=0;if fZ<60 then fZ=d(fZ)elseif fZ<3600 then f_=d(fZ/60)fZ=d(fZ%60)elseif fZ<86400 then g0=d(fZ/3600)f_=d(fZ%3600/60)else g1=d(fZ/86400)g0=d(fZ%86400/3600)end;if g1>0 then return g1 .."d "..g0 .."h "elseif g0>0 then return g0 .."h "..f_.."m "elseif f_>0 then return f_.."m "..fZ.."s"elseif fZ>0 then return fZ.."s"else return"0s"end end;function getMagnitudeInDirection(dT,g2)dT=vec3(dT)g2=vec3(g2):normalize()local bO=dT*g2;return bO.x+bO.y+bO.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a9=nil;CustomTarget=nil;return true end;local g3=AtlasOrdered[AutopilotTargetIndex].index;local g4=b5[0][g3]if g4.center then AutopilotTargetName=g4.name;a9=bb[0][g3]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=g4;for _,bN in pairs(bb[0])do if bN.name==CustomTarget.planetname then a9=bN;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a9.center)else AutopilotTargetCoords=CustomTarget.position end;if a9.planetname~="Space"then if a9.hasAtmosphere then AutopilotTargetOrbit=math.floor(a9.radius*(TargetOrbitRadius-1)+a9.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a9.radius*(TargetOrbitRadius-1)+a9.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=be(a9):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local g3=AtlasOrdered[AutopilotTargetIndex].index;local g4=b5[0][g3]if g4.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local g3=AtlasOrdered[AutopilotTargetIndex].index;local g4=b5[0][g3]if g4.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local g5=LastMaxBrakeInAtmo/a9:getGravity(a9.center+vec3(0,0,1)*a9.radius):len()return g5 end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a9.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bi=core.getWorldVelocity()local c7=vec3(bi):len()local g6=unit.getThrottle()/100;if AtmoSpeedAssist then g6=E end;local g7,g8=bc.computeDistanceAndTime(vec3(bi):len(),MaxGameVelocity,o(),Nav:maxForceForward()*g6,warmup,0)local a5,a6;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,g9;if not TurnBurn and c7>0 then _,g9=GetAutopilotBrakeDistanceAndTime(c7)else _,g9=GetAutopilotTBBrakeDistanceAndTime(c7)end;local ga=0;local gb=0;if AutopilotCruising or not Autopilot and c7>5 then gb=bc.computeTravelTime(c7,0,AutopilotDistance)elseif a5+g7<AutopilotDistance then ga=AutopilotDistance-(a5+g7)gb=bc.computeTravelTime(8333.0556,0,ga)else local gc=(AutopilotDistance-a5)/g7;g7=AutopilotDistance-a5;g8=g8*gc end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gb elseif AutopilotBraking then return g9 elseif AutopilotCruising then return gb+g9 else return g8+a6+gb end end;function GetAutopilotBrakeDistanceAndTime(c7)if not ar then c3()return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),0,0,LastMaxBrake-AutopilotPlanetGravity*o())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*o())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(c7)c3()return bc.computeDistanceAndTime(c7,AutopilotEndSpeed,o(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*o())end;function hoverDetectGround()local gd=-1;local ge=-1;if vBooster then gd=vBooster.distance()end;if hover then ge=hover.distance()end;if gd~=-1 and ge~=-1 then if gd<ge then return gd else return ge end elseif gd~=-1 then return gd elseif ge~=-1 then return ge else return-1 end end;function AboveGroundLevel()local gf=-1;local gg=hoverDetectGround()if telemeter_1 then gf=telemeter_1.getDistance()end;if gg~=-1 and gf~=-1 then if gg<gf then return gg else return gf end elseif gg~=-1 then return gg else return gf end end;function tablelength(gh)local gi=0;for _ in pairs(gh)do gi=gi+1 end;return gi end;function BeginProfile(gj)ProfileTimeStart=t()end;function EndProfile(gj)local gk=t()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gk;ProfileCount=ProfileCount+1;if gk>ProfileTimeMax then ProfileTimeMax=gk end;if gk<ProfileTimeMin then ProfileTimeMin=gk end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gl=ProfileTimeSum;local gm=ProfileTimeSum/ProfileCount;local gn=ProfileTimeMin;local go=ProfileTimeMax;local gp=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gl,gm,gn,go,gp))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gq=radar_1.getEntries()local gr=radar_1.getData()local gs=c1(1770)local gt=c2(330)if#gq>0 then local gu=gr:find('identifiedConstructs":%[%]')if gu==nil and perisPanelID==nil then ak=1;ToggleRadarPanel()end;if gu~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ai=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gs,gt,#gq)local gv={}for bM,bN in pairs(gq)do if radar_1.hastringmatchingTransponder(bN)==1 then table.insert(gv,bN)end end;if#gv>0 then local cf=c2(15)local ce=c1(1370)ai=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ai,ce,cf)for bM,bN in pairs(gv)do cf=cf+20;ai=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ai,ce,cf,radar_1.getConstructName(bN))end end else local gw;gw=gr:find('worksInEnvironment":false')if gw then ai=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gs,gt)else ai=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gs,gt)end;if radarPanelID~=nil then ak=0;ToggleRadarPanel()end end end end;function DisplayMessage(cV,d_)if d_~="empty"then cV[#cV+1]=[[<text class="msg" x="50%%" y="310" >]]for gx in string.gmatch(d_,"([^\n]+)")do cV[#cV+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],gx)end;cV[#cV+1]=[[</text>]]end;if ag~=0 then unit.setTimer("msgTick",ag)ag=0 end end;function updateDistance()local bY=t()local bi=vec3(core.getWorldVelocity())local ek=vec3(bi):len()local gy=bY-au;if ek>1.38889 then ek=ek/1000;local gz=ek*(bY-au)TotalDistanceTravelled=TotalDistanceTravelled+gz;aa=aa+gz end;ab=ab+gy;TotalFlightTime=TotalFlightTime+gy;au=bY end;function composeAxisAccelerationFromTargetSpeedV(gA,gB)local gC=vec3()local gD=vec3()if gA==axisCommandId.longitudinal then gC=vec3(core.getConstructOrientationForward())gD=vec3(core.getConstructWorldOrientationForward())elseif gA==axisCommandId.vertical then gC=vec3(core.getConstructOrientationUp())gD=vec3(core.getConstructWorldOrientationUp())elseif gA==axisCommandId.lateral then gC=vec3(core.getConstructOrientationRight())gD=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gE=vec3(core.getWorldGravity())local gF=gE:dot(gD)local gG=vec3(core.getWorldAirFrictionAcceleration())local gH=gG:dot(gD)local gI=vec3(core.getVelocity())local gJ=gI:dot(gC)local gK=gB*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gK-gJ)local gL=targetSpeedPID2:get()local gM=(gL-gH-gF)*gD;return gM end;function composeAxisAccelerationFromTargetSpeed(gA,gB)local gC=vec3()local gD=vec3()if gA==axisCommandId.longitudinal then gC=vec3(core.getConstructOrientationForward())gD=vec3(core.getConstructWorldOrientationForward())elseif gA==axisCommandId.vertical then gC=vec3(core.getConstructOrientationUp())gD=vec3(core.getConstructWorldOrientationUp())elseif gA==axisCommandId.lateral then gC=vec3(core.getConstructOrientationRight())gD=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gE=vec3(core.getWorldGravity())local gF=gE:dot(gD)local gG=vec3(core.getWorldAirFrictionAcceleration())local gH=gG:dot(gD)local gI=vec3(core.getVelocity())local gJ=gI:dot(gC)local gK=gB*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gK-gJ)local gL=targetSpeedPID:get()local gM=(gL-gH-gF)*gD;return gM end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b5=Atlas()for bM,bN in pairs(b5[0])do if aJ==nil or bN.center.x<aJ then aJ=bN.center.x end;if aK==nil or bN.center.x>aK then aK=bN.center.x end;if aL==nil or bN.center.y<aL then aL=bN.center.y end;if aM==nil or bN.center.y>aM then aM=bN.center.y end end;b6=""local gN=1.1*(aK-aJ)/1920;local gO=1.4*(aM-aL)/1080;for bM,bN in pairs(b5[0])do local ce=960+bN.center.x/gN;local cf=540+bN.center.y/gO;b6=b6 ..'<circle cx="'..ce..'" cy="'..cf..'" r="'..bN.radius/gN*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not r(bN.name,"Moon")and not r(bN.name,"Sanctuary")and not r(bN.name,"Space")then b6=b6 .."<text x='"..ce.."' y='"..cf+bN.radius/gN*30+20 .."' font-size='28' fill="..ax.." text-anchor='middle' font-family='Montserrat'>"..bN.name.."</text>"end end;local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/gN;local cf=540+cC.y/gO;b6=b6 ..'<circle cx="'..ce..'" cy="'..cf..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b6=b6 .."<text x='"..ce.."' y='"..cf-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b6=b6 ..[[</svg>]]b7=gN;b8=gO;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b6)local cC=vec3(core.getConstructWorldPos())local ce=960+cC.x/gN;local cf=540+cC.y/gO;b6='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b6=b6 .."<text x='80' y='105' font-size='18' fill="..ax.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b9=screen_2.addContent((ce-80)/19.20,(cf-80)/10.80,b6)end end;function PlanetRef()local function gP(gQ)return type(gQ)=='number'end;local function gR(gQ)return type(tonumber(gQ))=='number'end;local function gS(gT)return type(gT)=='table'end;local function gU(gV)return type(gV)=='string'end;local function gW(bN)return gS(bN)and gP(bN.x and bN.y and bN.z)end;local function gX(gY)return gS(gY)and gP(gY.latitude and gY.longitude and gY.altitude and gY.bodyId and gY.systemId)end;local gZ=math.pi/180;local g_=180/math.pi;local epsilon=1e-10;local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local h0=utils.clamp;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*epsilon end;local function h1(gQ)local bO=string.gsub(string.reverse(e('%.4f',gQ)),'^0*%.?','')return bO==''and'0'or string.reverse(bO)end;local function h2(h3)if gW(h3)then return e('{x=%.3f,y=%.3f,z=%.3f}',h3.x,h3.y,h3.z)end;if gS(h3)and not getmetatable(h3)then local h4={}local h5=next(h3)if type(h5)=='nil'or h5==1 then h4=h3 else for bM,bN in pairs(h3)do local eF=h2(bN)if type(bM)=='number'then table.insert(h4,e('[%s]=%s',bM,eF))else table.insert(h4,e('%s=%s',bM,eF))end end end;return e('{%s}',table.concat(h4,','))end;if gU(h3)then return e("'%s'",h3:gsub("'",[[\']]))end;return tostring(h3)end;local h6={}h6.__index=h6;h6.__tostring=function(h3,h7)local h8={}for bM in pairs(h3)do table.insert(h8,bM)end;table.sort(h8)local h4={}for _,bM in ipairs(h8)do local eF=h2(h3[bM])if type(bM)=='number'then table.insert(h4,e('[%s]=%s',bM,eF))else table.insert(h4,e('%s=%s',bM,eF))end end;if h7 then return e('%s%s',h7,table.concat(h4,',\n'..h7))end;return e('{%s}',table.concat(h4,','))end;h6.__eq=function(h9,ha)return h9.planetarySystemId==ha.planetarySystemId and h9.bodyId==ha.bodyId and cp(h9.radius,ha.radius)and cp(h9.center.x,ha.center.x)and cp(h9.center.y,ha.center.y)and cp(h9.center.z,ha.center.z)and cp(h9.GM,ha.GM)end;local function hb(cE,cF,hc,cu,hd)assert(gR(cE),'Argument 1 (planetarySystemId) must be a number:'..type(cE))assert(gR(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(gR(hc),'Argument 3 (radius) must be a number:'..type(hc))assert(gS(cu),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cu))assert(gR(hd),'Argument 5 (GM) must be a number:'..type(hd))return setmetatable({planetarySystemId=tonumber(cE),bodyId=tonumber(cF),radius=tonumber(hc),center=vec3(cu),GM=tonumber(hd)},h6)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(he)return e('::pos{%d,%d,%s,%s,%s}',he.systemId,he.bodyId,h1(he.latitude*g_),h1(he.longitude*g_),h1(he.altitude))end;MapPosition.__eq=function(h9,ha)return h9.bodyId==ha.bodyId and h9.systemId==ha.systemId and cp(h9.latitude,ha.latitude)and cp(h9.altitude,ha.altitude)and(cp(h9.longitude,ha.longitude)or cp(h9.latitude,math.pi/2)or cp(h9.latitude,-math.pi/2))end;local function hf(hg,cF,cy,cz,cx)local cE=hg;if gU(hg)and not cz and not cx and not cF and not cy then cE,cF,cy,cz,cx=r(hg,cD)assert(cE,'Argument 1 (position string) is malformed.')else assert(gR(cE),'Argument 1 (systemId) must be a number:'..type(cE))assert(gR(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(gR(cy),'Argument 3 (latitude) must be in degrees:'..type(cy))assert(gR(cz),'Argument 4 (longitude) must be in degrees:'..type(cz))assert(gR(cx),'Argument 5 (altitude) must be in meters:'..type(cx))end;cE=tonumber(cE)cF=tonumber(cF)cy=tonumber(cy)cz=tonumber(cz)cx=tonumber(cx)if cF==0 then return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=cF,systemId=cE},MapPosition)end;return setmetatable({latitude=gZ*h0(cy,-90,90),longitude=gZ*(cz%360),altitude=cx,bodyId=cF,systemId=cE},MapPosition)end;local hh={}hh.__index=hh;hh.__tostring=function(h3,h7)local hi=h7 and h7 ..'  'local hj={}local h8={}for bM in pairs(h3)do table.insert(h8,bM)end;table.sort(h8)for _,hk in ipairs(h8)do bdy=h3[hk]local hl=h6.__tostring(bdy,hi)if h7 then table.insert(hj,e('[%s]={\n%s\n%s}',hk,hl,h7))else table.insert(hj,e('  [%s]=%s',hk,hl))end end;if h7 then return e('\n%s%s%s',h7,table.concat(hj,',\n'..h7),h7)end;return e('{\n%s\n}',table.concat(hj,',\n'))end;local function hm(hn)local b5={}local pid;for _,bN in pairs(hn)do local cR=bN.planetarySystemId;if type(cR)~='number'then error('Invalid planetary system ID: '..tostring(cR))elseif pid and cR~=pid then error('Mistringmatch planetary system IDs: '..cR..' and '..pid)end;local ho=bN.bodyId;if type(ho)~='number'then error('Invalid body ID: '..tostring(ho))elseif b5[ho]then error('Duplicate body ID: '..tostring(ho))end;setmetatable(bN.center,getmetatable(vec3.unit_x))b5[ho]=setmetatable(bN,h6)pid=cR end;return setmetatable(b5,hh)end;ba={}local function hp(hn)return setmetatable({galaxyAtlas=hn or{}},ba)end;ba.__index=function(gT,i)if type(i)=='number'then local system=gT.galaxyAtlas[i]return hm(system)end;return rawget(ba,i)end;ba.__pairs=function(h3)return function(gT,bM)local hq,nv=next(gT,bM)return hq,nv and hm(nv)end,h3.galaxyAtlas,nil end;ba.__tostring=function(h3)local hr={}for _,hs in pairs(h3 or{})do local ht=hs:getPlanetarySystemId()local hu=hh.__tostring(hs,'    ')table.insert(hr,e('  [%s]={%s\n  }',ht,hu))end;return e('{\n%s\n}\n',table.concat(hr,',\n'))end;ba.BodyParameters=hb;ba.MapPosition=hf;ba.PlanetarySystem=hm;function ba.createBodyParameters(hv,cF,hw,hx,hy,hz,hA)assert(gR(hv),'Argument 1 (planetarySystemId) must be a number:'..type(hv))assert(gR(cF),'Argument 2 (bodyId) must be a number:'..type(cF))assert(gR(hw),'Argument 3 (surfaceArea) must be a number:'..type(hw))assert(gS(hx),'Argument 4 (aPosition) must be an array or vec3:'..type(hx))assert(gS(hy),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(hy))assert(gR(hz),'Argument 6 (altitude) must be in meters:'..type(hz))assert(gR(hA),'Argument 7 (gravityAtPosition) must be number:'..type(hA))local hc=math.sqrt(hw/4/math.pi)local ah=hc+hz;local hB=vec3(hx)+ah*vec3(hy)local hd=hA*ah*ah;return hb(hv,cF,hc,hB,hd)end;ba.isMapPosition=gX;function ba:getPlanetarySystem(hg)if i==nil then i=0 end;if nv==nil then nv=0 end;local hv=hg;if gX(hg)then hv=hg.systemId end;if type(hv)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=hh then system=hm(system)end;return system end end end;function hh:castIntersections(hC,g2,hD,hE)local hD=hD or function(fJ)return 1.05*fJ.radius end;local hF={}if hE then for _,i in ipairs(hE)do hF[i]=self[i]end else hE={}for bM,fJ in pairs(self)do table.insert(hE,bM)hF[bM]=fJ end end;local function hG(hH,hI)local hJ=hF[hH].center-hC;local hK=hF[hI].center-hC;return hJ:len()<hK:len()end;table.sort(hE,hG)local hL=g2:normalize()for i,cR in ipairs(hE)do local fJ=hF[cR]local hM=fJ.center-hC;local hc=hD(fJ)local hN=hM:dot(hL)local hO=hN^2-(hM:len2()-hc^2)if hO>=0 then local hP=math.sqrt(hO)local fH=hN+hP;local fI=hN-hP;if fI>0 then return fJ,fH,fI elseif fH>0 then return fJ,fH,nil end end end;return nil,nil,nil end;function hh:closestBody(hQ)assert(type(hQ)=='table','Invalid coordinates.')local hR,fJ;local hS=vec3(hQ)for _,hT in pairs(self)do local hU=(hT.center-hS):len2()if(not fJ or hU<hR)and hT.name~="Space"then fJ=hT;hR=hU end end;return fJ end;function hh:convertToBodyIdAndWorldCoordinates(hg)local hV=hg;if gU(hg)then hV=hf(hg)end;if hV.bodyId==0 then return 0,vec3(hV.latitude,hV.longitude,hV.altitude)end;local hT=self:getBodyParameters(hV)if hT then return hV.bodyId,hT:convertToWorldCoordinates(hV)end end;function hh:getBodyParameters(hg)local cF=hg;if gX(hg)then cF=hg.bodyId end;assert(gR(cF),'Argument 1 (bodyId) must be a number:'..type(cF))return self[cF]end;function hh:getPlanetarySystemId()local _,bN=next(self)return bN and bN.planetarySystemId end;function h6:convertToMapPosition(cu)assert(gS(cu),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cu))local cv=vec3(cu)if self.bodyId==0 then return setmetatable({latitude=cv.x,longitude=cv.y,altitude=cv.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local cw=cv-self.center;local ah=cw:len()local cx=ah-self.radius;local cy=0;local cz=0;if not cp(ah,0)then local cA=math.atan(cw.y,cw.x)cz=cA>=0 and cA or 2*math.pi+cA;cy=math.pi/2-math.acos(cw.z/ah)end;return setmetatable({latitude=cy,longitude=cz,altitude=cx,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function h6:convertToWorldCoordinates(hg)local hV=gU(hg)and hf(hg)or hg;if hV.bodyId==0 then return vec3(hV.latitude,hV.longitude,hV.altitude)end;assert(gX(hV),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hV.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hV.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cG=math.cos(hV.latitude)return self.center+(self.radius+hV.altitude)*vec3(cG*math.cos(hV.longitude),cG*math.sin(hV.longitude),math.sin(hV.latitude))end;function h6:getAltitude(cu)return(vec3(cu)-self.center):len()-self.radius end;function h6:getDistance(cu)return(vec3(cu)-self.center):len()end;function h6:getGravity(cu)local hW=self.center-vec3(cu)local hX=hW:len2()return self.GM/hX*hW/math.sqrt(hX)end;return setmetatable(ba,{__call=function(_,...)return hp(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gU(gV)return type(gV)=='string'end;local function gS(gT)return type(gT)=='table'end;local function cp(cq,cr)if cq==0 then return math.abs(cr)<1e-09 end;if cr==0 then return math.abs(cq)<1e-09 end;return math.abs(cq-cr)<math.max(math.abs(cq),math.abs(cr))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cx)assert(self.body)local ah=cx+self.body.radius;if not cp(ah,0)then local orbit=math.sqrt(self.body.GM/ah)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(hg,bi)assert(self.body)assert(gS(hg)or gU(hg))assert(gS(bi))local cC=(gU(hg)or PlanetRef.isMapPosition(hg))and self.body:convertToWorldCoordinates(hg)or vec3(hg)local bN=vec3(bi)local hY=cC-self.body.center;local hK=bN:len2()local hZ=hY:len()local h_=self.body.GM;local i0=((hK-h_/hZ)*hY-hY:dot(bN)*bN)/h_;local cq=h_/(2*h_/hZ-hK)local i1=i0:len()local hL=i0:normalize()local i2=cq*(1-i1)local i3=cq*(1+i1)local i4=i2*hL+self.body.center;local i5=i1<=1 and-i3*hL+self.body.center or nil;local i6=math.sqrt(cq*h_*(1-i1*i1))local i7=i5 and 2*math.pi*math.sqrt(cq^3/h_)local i8=math.acos(i0:dot(hY)/(i1*hZ))if hY:dot(bN)<0 then i8=-(i8-2*math.pi)end;local i9=math.acos((math.cos(i8)+i1)/(1+i1*math.cos(i8)))local ia=i9;if ia<0 then ia=ia+2*math.pi end;local ib=ia-i1*math.sin(ia)local ic=0;local id=0;local ie=0;if i7~=nil then ic=ib/(2*math.pi/i7)id=i7-ic;ie=id+i7/2;if i8-math.pi>0 then id=ic;ie=id+i7/2 end;if ie>i7 then ie=ie-i7 end end;return{periapsis={position=i4,speed=i6/i2,circularOrbitSpeed=math.sqrt(h_/i2),altitude=i2-self.body.radius},apoapsis=i5 and{position=i5,speed=i6/i3,circularOrbitSpeed=math.sqrt(h_/i3),altitude=i3-self.body.radius},currentVelocity=bN,currentPosition=cC,eccentricity=i1,period=i7,eccentricAnomaly=i9,meanAnomaly=ib,timeToPeriapsis=id,timeToApoapsis=ie}end;local function ig(ih)local hT=PlanetRef.BodyParameters(ih.planetarySystemId,ih.bodyId,ih.radius,ih.center,ih.GM)return setmetatable({body=hT},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ig(...)end})end;function Kinematics()local bc={}local ii=30000000/3600;local ij=ii*ii;local ik=100;local function il(bN)return 1/math.sqrt(1-bN*bN/ij)end;function bc.computeAccelerationTime(im,io,ip)local iq=ii*math.asin(im/ii)return(ii*math.asin(ip/ii)-iq)/io end;function bc.computeDistanceAndTime(im,ip,ir,is,it,iu)it=it or 0;iu=iu or 0;local iv=im<=ip;local iw=is*(iv and 1 or-1)/ir;local ix=-iu/ir;local iy=iw+ix;if iv and iy<=0 or not iv and iy>=0 then return-1,-1 end;local iz,iA=0,0;if iw~=0 and it>0 then local iq=math.asin(im/ii)local iB=math.pi*(iw/2+ix)local iC=iw*it;local iD=ii*math.pi;local bN=function(gT)local dm=(iB*gT-iC*math.sin(math.pi*gT/2/it)+iD*iq)/iD;local iE=math.tan(dm)return ii*iE/math.sqrt(iE*iE+1)end;local iF=iv and function(gV)return gV>=ip end or function(gV)return gV<=ip end;iA=2*it;if iF(bN(iA))then local iG=0;while math.abs(iA-iG)>0.5 do local gT=(iA+iG)/2;if iF(bN(gT))then iA=gT else iG=gT end end end;local iH=im;local iI=iA/ik;for iJ=1,ik do local c7=bN(iJ*iI)iz=iz+(c7+iH)*iI/2;iH=c7 end;if iA<2*it then return iz,iA end;im=iH end;local iq=ii*math.asin(im/ii)local bI=(ii*math.asin(ip/ii)-iq)/iy;local iK=ij*math.cos(iq/ii)/iy;local ah=iK-ij*math.cos((iy*bI+iq)/ii)/iy;return ah+iz,bI+iA end;function bc.computeTravelTime(im,io,ah)if ah==0 then return 0 end;if io>0 then local iq=ii*math.asin(im/ii)local iK=ij*math.cos(iq/ii)/io;return(ii*math.acos(io*(iK-ah)/ij)-iq)/io end;if im==0 then return-1 end;assert(im>0,'Acceleration and initial speed are both zero.')return ah/im end;function bc.lorentz(bN)return il(bN)end;return bc end;function safeZone(iL)local hc=500000;local iM,iN,iO=math.huge;local iP=false;local iQ=vec3({13771471,7435803,-128971})local iR=18000000;iM=vec3(iL):dist(iQ)if iM<iR then return true,math.abs(iM-iR),"Safe Zone",0 end;iN=vec3(iL):dist(vec3(planet.center))if iN<hc then iP=true end;if math.abs(iN-hc)<math.abs(iM-iR)then return iP,math.abs(iN-hc),planet.name,planet.bodyId else return iP,math.abs(iM-iR),"Safe Zone",0 end end;function cmdThrottle(eF,iS)if iS==nil then iS=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not iS then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,eF)E=u(eF*100,0)end;function cmdCruise(eF,iS)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not iS then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,eF)end;function SaveDataBank(iT)if dbHud_1 then if not ac then for bM,bN in pairs(b)do dbHud_1.setStringValue(bN,g(_G[bN]))if iT and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;for bM,bN in pairs(a)do dbHud_1.setStringValue(bN,g(_G[bN]))if iT and dbHud_2 then dbHud_2.setStringValue(bN,g(_G[bN]))end end;c("Saved Variables to Datacore")if iT and dbHud_2 then a1="Databank copied.  Remove copy when ready."end end end end;function script.onStart()VERSION_NUMBER=1.100;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})bP()coroutine.yield()bT()coroutine.yield()b_()SetupButtons()coroutine.yield()SetupAtlas()ba=PlanetRef()bb=ba(Atlas())bc=Kinematics()be=Keplers()co()ck()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local cL=j()if door and(cL>0 or cL==0 and as<10000)then for _,bN in pairs(door)do bN.toggle()end end;if switch then for _,bN in pairs(switch)do bN.toggle()end end;if forcefield and(cL>0 or cL==0 and as<10000)then for _,bN in pairs(forcefield)do bN.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(iU)if iU=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then E=1;Nav.control.cancelCurrentControlMasterMode()I=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iV=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iV and not Autopilot then ah=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ah=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(bj)a7,a8=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(bj)a7,a8=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local d_,cP=cM(ah)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..d_..'", "unit":"'..cP..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')d_,cP=cM(a5)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..d_..'", "unit":"'..cP..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a6)..'", "unit":""}')d_,cP=cM(a7)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..d_..'", "unit":"'..cP..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a8)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')d_,cP=cM(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",d_)..'", "unit":"'..cP..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iU=="oneSecond"then ap=false;c3(nil,true)updateDistance()updateRadar()updateWeapons()local cV={}local ea=GetFlightStyle()DrawOdometer(cV,aa,TotalDistanceTravelled,ea,ab)if ShouldCheckDamage then CheckDamage(cV)end;aj=table.concat(cV,"")collectgarbage("collect")elseif iU=="fiveSecond"then aq=dbHud_1.getStringValue("SPBAutopilotTargetName")if aq~=nil and aq~=""and aq~="SatNavNotChanged"then local bO=json.decode(dbHud_1.getStringValue("SavedLocations"))if bO~=nil then _G["SavedLocations"]=bO;local cT=-1;local cK;for bM,bN in pairs(SavedLocations)do if bN.name and bN.name=="SatNav Location"then cT=bM;break end end;if cT~=-1 then cK=SavedLocations[cT]cT=-1;for bM,bN in pairs(b5[0])do if bN.name and bN.name=="SatNav Location"then cT=bM;break end end;if cT>-1 then b5[0][cT]=cK end;ck()a1=cK.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==aq then AutopilotTargetIndex=i;c("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iU=="msgTick"then local cV={}DisplayMessage(cV,"empty")a1="empty"unit.stopTimer("msgTick")ag=3 elseif iU=="animateTick"then bg=true;bf=false;ae=0;af=0;unit.stopTimer("animateTick")elseif iU=="hudTick"then local cV={}HUDPrologue(cV)if showHud then UpdateHud(cV)else DisplayOrbitScreen(cV)DrawWarnings(cV)end;HUDEpilogue(cV)cV[#cV+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if a1~="empty"then DisplayMessage(cV,a1)end;if p()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then DrawDeadZone(cV)end end;if p()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cV)if screen_1.getMouseState()==1 then CheckButtons()end;cV[#cV+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)elseif system.isViewLocked()==0 then if p()==1 and a0 then SetButtonContains()DrawButtons(cV)if not bf and not bg then local iW=table.concat(cV,"")cV={}cV[#cV+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cV[#cV+1]=b6;cV[#cV+1]=iW;cV[#cV+1]="</body>"bf=true;cV[#cV+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cV,"")system.setScreen(content)elseif bg then local iW=table.concat(cV,"")cV={}cV[#cV+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cV[#cV+1]=b6;cV[#cV+1]=iW;cV[#cV+1]="</body>"end;if not bf then cV[#cV+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)end else CheckButtons()end else if not a0 and p()==0 then CheckButtons()if ah>DeadZone then if DisplayDeadZone then DrawCursorLine(cV)end end else SetButtonContains()DrawButtons(cV)end;cV[#cV+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],J,K,ae,af)end;cV[#cV+1]=[[</svg></body>]]content=table.concat(cV,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iU=="apTick"then ar=j()>0;local bI=t()local iX=bI-bo;bo=bI;local cY=vec3(core.getConstructWorldOrientationForward())local cZ=vec3(core.getConstructWorldOrientationRight())local iY=vec3(core.getConstructWorldOrientationUp())local c_=vec3(core.getWorldVertical())local iZ=vec3(core.getConstructWorldPos())local ec=getRoll(c_,cY,cZ)local ed=ec/180*math.pi;local ee=math.cos(ed)local ef=math.sin(ed)local d0=getPitch(c_,cY,cZ)local i_=getPitch(c_,cY,cZ*ee+iY*ef)local j0=-math.deg(dh(iY,bi,cY))local j1=math.deg(dh(cZ,bi,cY))bn=ar and j0<-YawStallAngle or j0>YawStallAngle or j1<-PitchStallAngle or j1>PitchStallAngle;bl=system.getMouseDeltaX()bm=system.getMouseDeltaY()if InvertMouse and not a0 then bm=-bm end;U=0;Y=0;T=0;bi=vec3(core.getWorldVelocity())bj=vec3(bi):len()sys=bb[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=be(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bi)ao=hoverDetectGround()local c4=planet:getGravity(core.getConstructWorldPos()):len()*o()bp=0;bd=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]B,C,D,_=safeZone(iZ)if p()==1 and screen_1 and screen_1.getMouseY()~=-1 then ae=screen_1.getMouseX()*ResolutionX;af=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if p()==1 and a0 then if not bf then ae=ae+bl;af=af+bm end else ae=0;af=0 end else ae=ae+bl;af=af+bm;ah=math.sqrt(ae*ae+af*af)if not a0 and p()==0 then if userControlScheme=="virtual joystick"then if ae>0 and ae>DeadZone then U=U-(ae-DeadZone)*MouseXSensitivity elseif ae<0 and ae<DeadZone*-1 then U=U-(ae+DeadZone)*MouseXSensitivity else U=0 end;if af>0 and af>DeadZone then T=T-(af-DeadZone)*MouseYSensitivity elseif af<0 and af<DeadZone*-1 then T=T-(af+DeadZone)*MouseYSensitivity else T=0 end elseif userControlScheme=="mouse"then ae=0;af=0;T=(-utils.smoothstep(bm,-100,100)+0.5)*2*P;U=(-utils.smoothstep(bl,-100,100)+0.5)*2*Q else ae=0;af=0 end end end;local j2=bj>8334;if bj>SpaceSpeedLimit/3.6 and not ar and not Autopilot and not j2 then a1="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0 end;if not j2 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=j2;if ar and j()>0.09 then if bj>bs/3.6 and not AtmoSpeedAssist and not aw then BrakeIsOn=true;aw=true elseif not AtmoSpeedAssist and aw then if bj<bs/3.6 then BrakeIsOn=false;aw=false end end end;if BrakeIsOn then X=1 else X=0 end;as=core.getAltitude()if as==0 then as=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if al then BrakeIsOn=false;local j3=false;if CustomTarget~=nil then j3=AlignToWorldVector(CustomTarget.position-iZ,0.01)else j3=AlignToWorldVector(vec3(bi),0.01)end;bh=true;if j3 and(math.abs(ec)<2 or math.abs(i_)>85)and bj>=bs/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;O=true;al=false;an=true;Autopilot=false;BeginReentry()elseif ar and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bs))E=0 end elseif bj>N then AlignToWorldVector(vec3(bi),0.01)end end;if RetrogradeIsOn then if ar then RetrogradeIsOn=false elseif bj>N then AlignToWorldVector(-vec3(bi))end end;if not ProgradeIsOn and al then if j()==0 then O=true;BeginReentry()al=false;an=true else al=false;ToggleAutopilot()end end;local eJ=vec3(core.getWorldVertical())*-1;local eH=bi.x*eJ.x+bi.y*eJ.y+bi.z*eJ.z;if an and CustomTarget~=nil and(as<HoldAltitude+200 and as>HoldAltitude-200)and bj*3.6>bs-100 and math.abs(eH)<20 and j()>=0.1 and(CustomTarget.position-iZ):len()>2000+as then ToggleAutopilot()an=false end;if VertTakeOff then bh=true;if eH<-30 then a1="Unable to achieve lift. Safety Landing."ad=0;bh=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if as<antigrav.getBaseAltitude()-100 then bt=0;ad=15;BrakeIsOn=false elseif eH>0 then BrakeIsOn=true;ad=0 elseif eH<-30 then BrakeIsOn=true;ad=15 elseif as>=antigrav.getBaseAltitude()then BrakeIsOn=true;ad=0;VertTakeOff=false;a1="Takeoff complete. Singularity engaged"end else if j()>0.08 then bt=0;BrakeIsOn=false;ad=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bF then bt=0;ad=20 else ad=0;bt=36;cmdCruise(3500)end else bh=autoRollPreference;IntoOrbit=true;bD=false;CancelIntoOrbit=false;bx=false;bv=nil;bw=nil;if bC==nil then bC=planet end;VertTakeOff=false end end;if bt~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local j4=utils.clamp(bt-i_,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(j4)local j5=utils.clamp(vTpitchPID:get(),-1,1)T=j5 end end;if IntoOrbit then if bC==nil then if VectorToTarget then bC=a9 else bC=planet end end;if not bA then if bC.hasAtmosphere then bB=math.floor(bC.radius*(TargetOrbitRadius-1)+bC.noAtmosphericDensityAltitude)else bB=math.floor(bC.radius*(TargetOrbitRadius-1)+bC.surfaceMaxAltitude)end;bA=true end;if AltitudeHold or VectorToTarget then if not am then bB=u(HoldAltitude,1)bx=true;AltitudeHold=false end;if VectorToTarget then bz.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local j6,j7=cM(bB,2)local j8=j6 ..j7;local j9,ja=be(bC):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bC.center):len()-bC.radius)local jb=ec;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bB*0.9 and as<bB*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bB*0.99 and orbit.apoapsis.altitude>=bB*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bD then if bD then BrakeIsOn=false;E=0;cmdThrottle(0)bD=true;bv=0;if bz.VectorToTarget then local dX=CustomTarget.position-iZ;local a5,_=bc.computeDistanceAndTime(bj,bs/3.6,o(),0,0,LastMaxBrake)if bi:normalize():dot(dX:normalize())>0.5 and dX:len()>15000+a5+as then bu="Orbiting to Target"else a1="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;O=true;an=true;BeginReentry()bz.VectorToTarget=false end end;if not bz.VectorToTarget then bu=nil;by=false;bA=false;bC=nil;bh=autoRollPreference;if not an then a1="Orbit established"end;bz.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bx=false;bv=nil;bw=nil;bC=nil;bD=false;bH=0 end else bH=bH+1;if bH>=2 then bD=true end end else bu="Adjusting Orbit - OrbitHeight: "..j8;by=true;cmdCruise(ja*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local jc=eH;local jd=as-bB;local je=math.abs(jd)if eH<10 and math.abs(i_)<10 and je<100 then jc=eH*2 end;if jc<10 and math.abs(i_)<10 and je<100 then jc=jc*2 end;if jc<5 and math.abs(i_)<5 and je<100 then jc=jc*4 end;VSpdPID:inject(jc)bv=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(jd)bv=utils.clamp(bv-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local jf=2.75;local jg=math.abs(s(j9*jf))local jh=jg%50;if jh>0 then jg=jg-jh+50 end;BrakeIsOn=false;if not bx then local ji=false;local jj=false;if as<bB then bu="Aligning to orbital path - OrbitHeight: "..j8 else bu="Aligning to orbital point - OrbitHeight: "..j8 end;bv=0;bw=0;if i_<=bv+1 and i_>=bv-1 then ji=true else ji=false end;if jb<=bw+1 and jb>=bw-1 then jj=true else jj=false end;if ji and jj then bv=nil;bw=nil;bx=true end else if as<bB*0.8 then bu="Escaping planet gravity - OrbitHeight: "..j8;bv=utils.map(eH,200,0,-15,80)elseif as>=bB*0.8 and as<bB*1.15 then bu="Approaching orbital corridor - OrbitHeight: "..j8;jg=jg*0.75;bv=utils.map(eH,100,-100,-15,65)elseif as>=bB*1.15 and as<bB*1.5 then bu="Approaching orbital corridor - OrbitHeight: "..j8;jg=jg*0.75;if eH<0 or by then bv=utils.map(as,bB*1.5,bB*1.01,-30,0)else bv=utils.map(as,bB*0.99,bB*1.5,0,30)end elseif as>bB*1.5 then bu="Reentering orbital corridor - OrbitHeight: "..j8;bv=utils.map(eH,100,-100,-65,0)jg=jg*0.75 end end;cmdCruise(math.floor(jg))end;if bv~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local jk=bv-i_;OrbitPitchPID:inject(jk)local jl=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)T=jl end;if bw~=nil then if i_<85 then local jm=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(jm*0.01,0,jm*0.1)end;local jn=bw-jb;OrbitRollPID:inject(jn)local jo=utils.clamp(OrbitRollPID:get(),-0.5,0.5)Y=jo end end elseif CancelIntoOrbit then bA=false;bC=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not al then local jp,jq=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local jr=(CustomTarget.position-a9.center):normalize()local js=jr:project_on_plane((a9.center-iZ):normalize()):normalize()local jt=a9.center+js*(a9.radius+AutopilotTargetOrbit)local ju=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))if(iZ-jt):len()<(iZ-ju):len()then jp=jt;AutopilotTargetCoords=jp else jp=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))AutopilotTargetCoords=jp end;local d1=cs(a9,AutopilotTargetCoords)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)jq=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;jq=true;TargetSet=true;AutopilotRealigned=true;jp=CustomTarget.position+(iZ-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local jr=(iZ+bi*100000-a9.center):normalize()local js=jr:project_on_plane((a9.center-iZ):normalize()):normalize()if js:len()<1 then jr=(iZ+vec3(core.getConstructWorldOrientationForward())*100000-a9.center):normalize()js=jr:project_on_plane((a9.center-iZ):normalize()):normalize()end;jp=a9.center+js*(a9.radius+AutopilotTargetOrbit)AutopilotTargetCoords=jp;TargetSet=true;jq=true;AutopilotRealigned=true;local d1=cs(a9,AutopilotTargetCoords)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)end end;AutopilotDistance=(vec3(jp)-vec3(core.getConstructWorldPos())):len()local fG,fH,fI=bb:getPlanetarySystem(0):castIntersections(iZ,bi:normalize(),function(fJ)if fJ.noAtmosphericDensityAltitude>0 then return fJ.radius+fJ.noAtmosphericDensityAltitude else return fJ.radius+fJ.surfaceMaxAltitude*1.5 end end)local fK=fH;if fI~=nil and fH~=nil then fK=math.min(fI,fH)end;if fK~=nil and fK<AutopilotDistance and fG.name==a9.name then AutopilotDistance=fK end;local j3=true;local jv=(a9.center-(vec3(core.getConstructWorldPos())+vec3(bi):normalize()*AutopilotDistance)):len()-a9.radius;local d_,cP=cM(jv)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..d_..'", "unit":"'..cP..'"}')local a5,a6;if not TurnBurn then a5,a6=GetAutopilotBrakeDistanceAndTime(bj)else a5,a6=GetAutopilotTBBrakeDistanceAndTime(bj)end;if bj>300 and AutopilotAccelerating then local dX=vec3(jp)-vec3(core.getConstructWorldPos())local jw=utils.clamp(math.deg(dh(iY,bi:normalize(),dX:normalize()))*bj/500,-90,90)local jx=utils.clamp(math.deg(dh(cZ,bi:normalize(),dX:normalize()))*bj/500,-90,90)if math.abs(jw)<20 and math.abs(jx)<20 then jw=jw*2;jx=jx*2 end;if math.abs(jw)<2 and math.abs(jx)<2 then jw=jw*2;jx=jx*2 end;local j0=-math.deg(dh(iY,cY,bi:normalize()))local j1=-math.deg(dh(cZ,cY,bi:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jx-j1)local jy=utils.clamp(apPitchPID:get(),-1,1)T=T+jy;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jw-j0)local jz=utils.clamp(apYawPID:get(),-1,1)U=U+jz;jq=true;if math.abs(jw)>2 or math.abs(jx)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jv<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=be(a9):escapeAndOrbitalSpeed(jv)end end;if not AutopilotCruising and not AutopilotBraking and not jq then j3=AlignToWorldVector((jp-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then j3=AlignToWorldVector(-vec3(bi):normalize())end;if AutopilotAccelerating then if not L then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)E=u(AutopilotInterplanetaryThrottle,2)L=true end;local g6=unit.getThrottle()if AtmoSpeedAssist then g6=E end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or g6==0 and L then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)E=0 end;if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)E=0;L=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;X=1 end;if TurnBurn then cmdThrottle(100,true)E=1 end;local _,ja=be(a9):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dX;if CustomTarget~=nil then dX=CustomTarget.position-iZ end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bj<50 then a1="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bj<=ja and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;local d1=cs(a9,AutopilotTargetCoords)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,ja=be(a9):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bj<=ja then if CustomTarget~=nil then if bi:normalize():dot(dX:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local d1=cs(a9,CustomTarget.position)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)WaypointSet=true end else a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;BrakeIsOn=false;local d1=cs(a9,CustomTarget.position)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"a1="Autopilot completed, orbit established"X=0;E=0;L=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;al=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local g6=unit.getThrottle()if AtmoSpeedAssist then g6=E end;if g6>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if j3 then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not al then AutopilotTargetCoords=vec3(a9.center)+(AutopilotTargetOrbit+a9.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif j3 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not L then cmdThrottle(AutopilotInterplanetaryThrottle,true)E=u(AutopilotInterplanetaryThrottle,2)L=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then a1="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"X=0;cmdThrottle(0)E=0;L=false;ProgradeIsOn=true;al=true;local d1=cs(a9,CustomTarget.position)d1="::pos{"..d1.systemId..","..d1.bodyId..","..d1.latitude..","..d1.longitude..","..d1.altitude.."}"system.setWaypoint(d1)end;if Z then bh=true;local jx=0;local cC=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local jA=cC-vec3(core.getConstructWorldPos())local jB=vec3(jA):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jC=vec3(jA):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ah=math.sqrt(jB*jB+jC*jC)AlignToWorldVector(jA:normalize())local jD=40;local jE=ah<jD;local jF=100;local gB=utils.clamp((ah-jD)/2,10,jF)T=0;local j3=math.abs(U)<0.1;if j3 and bj<gB and not jE then BrakeIsOn=false;jx=-20 else BrakeIsOn=true;jx=0 end;local jG=0;if math.abs(jx-d0)>jG then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jx-d0)local jy=pitchPID:get()T=jy end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d2=unit.getClosestPlanetInfluence()>0;local jH=HoldAltitude-as;local jI=500+bj;local jJ=1;if AutoTakeoff then jJ=utils.clamp(bj/100,0.1,1)end;local jx=(utils.smoothstep(jH,-jI,jI)-0.5)*2*MaxPitch*jJ;if not Reentry and not al and not VectorToTarget and cY:dot(bi:normalize())<0.99 then jx=(utils.smoothstep(jH,-jI*utils.clamp(20-19*j()*10,1,20),jI*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jJ end;if not AltitudeHold then jx=0 end;if LockPitch~=nil then if d2 and not IntoOrbit then jx=LockPitch else LockPitch=nil end end;bh=true;local jK=T;if Reentry then local ReentrySpeed=math.floor(bs)local jL,jM=bc.computeDistanceAndTime(bj,ReentrySpeed/3.6,o(),0,0,LastMaxBrake-planet.gravity*9.8*o())local jN=as-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and as>planet.noAtmosphericDensityAltitude+5000 and bj<=ReentrySpeed/3.6 and bj>ReentrySpeed/3.6-10 and math.abs(bi:normalize():dot(cY))>0.9 then Nav.control.cancelCurrentControlMasterMode()E=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jL>-1 and jN<=jL or as<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not O then jx=-80;if j()>0.02 then a1="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jx=0;bh=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and as>planet.noAtmosphericDensityAltitude+5000 then bh=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bs then O=false;Reentry=false;bh=true end end end;if bj>N and not am and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bi))end;if(VectorToTarget or am)and AutopilotTargetIndex>0 and j()>0.01 then local dX;if CustomTarget~=nil then dX=CustomTarget.position-vec3(core.getConstructWorldPos())else dX=a9.center-iZ end;local jw=math.deg(dh(c_:normalize(),bi,dX))*2;local jO=math.rad(math.abs(ec))if bj>minRollVelocity and j()>0.01 then local jP=utils.clamp(90-jx*2,-90,90)bp=utils.clamp(jw*2,-jP,jP)local jQ=jw;jw=utils.clamp(utils.clamp(jw,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jO)+4*(i_-jx)*math.sin(math.rad(ec)),-YawStallAngle*0.85,YawStallAngle*0.85)jx=utils.clamp(utils.clamp(jx*math.cos(jO),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jQ)*math.sin(jO),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bp=0;jw=utils.clamp(jw,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jR=j0-jw;if not bn and bj>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jR)local jz=utils.clamp(yawPID:get(),-1,1)U=U+jz elseif ar and ao>-1 or bj<minRollVelocity then AlignToWorldVector(dX)elseif bn and j()>0.01 then if(j0<-YawStallAngle or j0>YawStallAngle)and j()>0.01 then AlignToWorldVector(bi)end;if(j1<-PitchStallAngle or j1>PitchStallAngle)and j()>0.01 then jx=utils.clamp(i_-j1,i_-PitchStallAngle*0.85,i_+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not am then local jS=planet:getAltitude(CustomTarget.position)local jN=math.sqrt(dX:len()^2-(as-jS)^2)local jT=LastMaxBrakeInAtmo;if jT then jT=jT*utils.clamp(bj/100,0.1,1)*j()else jT=LastMaxBrake end;if j()<0.01 then jT=LastMaxBrake end;local jU=bi:len()-math.abs(eH)local jV=vec3(core.getWorldAirFrictionAcceleration())local jW=math.sqrt(jV:len()-jV:project_on(eJ):len())*o()if bj>100 then a5,a6=bc.computeDistanceAndTime(bj,100,o(),0,0,jT+jW)local jX,jY=bc.computeDistanceAndTime(100,0,o(),0,0,jT/2)a5=a5+jX else a5,a6=bc.computeDistanceAndTime(bj,0,o(),0,0,jT/2)end;StrongBrakes=true;if not am and not Reentry and jN<=a5+bj*iX/2 and(bi:project_on_plane(c_):normalize():dot(dX:project_on_plane(c_):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)E=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jU<0.1 or jN<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jN)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jN end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(am or Reentry)then if CustomTarget~=nil and a9.name==planet.name then local dX=CustomTarget.position-vec3(core.getConstructWorldPos())local jS=planet:getAltitude(CustomTarget.position)local jN=math.sqrt(dX:len()^2-(as-jS)^2)local jT=LastMaxBrakeInAtmo;if not bD then bA=false;IntoOrbit=true else jT=LastMaxBrake;a5,a6=bc.computeDistanceAndTime(bj,0,o(),0,0,jT/2)StrongBrakes=true;if jN<=a5+bj*iX/2 and bi:project_on_plane(c_):normalize():dot(dX:project_on_plane(c_):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;O=true;al=false;an=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=jN end end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(am or VectorToTarget or IntoOrbit or Reentry)then if not bD then IntoOrbit=true end end;if bn and j()>0.01 and ao==-1 and bj>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bi)jx=utils.clamp(i_-j1,i_-PitchStallAngle*0.85,i_+PitchStallAngle*0.85)end;T=jK;local gf=-1;if BrakeLanding then jx=0;local jZ=false;local j_=30;if bd~=nil and bd>0 then local jW=0;local ei=utils.clamp(j(),0.4,2)local jT=LastMaxBrakeInAtmo*utils.clamp(bj/100,0.1,1)*ei;local k0=bd*ei+jT+jW-c4;local k1=jT/2+jW-c4;local k2=bj-math.sqrt(math.abs(k1/2)*20/(0.5*o()))*utils.sign(k1)if k2<0 then k2=0 end;local k3;if bj>100 then local k4,_=bc.computeDistanceAndTime(bj,100,o(),0,0,jT)local k5,_=bc.computeDistanceAndTime(100,0,o(),0,0,math.sqrt(jT))k3=k4+k5 else k3=bc.computeDistanceAndTime(bj,0,o(),0,0,math.sqrt(jT))end;if k3<20 then BrakeIsOn=false else local k6=0;if k2>100 then local k7,_=bc.computeDistanceAndTime(k2,100,o(),0,0,k0)local k8,_=bc.computeDistanceAndTime(100,0,o(),0,0,bd*ei+math.sqrt(jT)+jW-c4)k6=k7+k8 else k6,_=bc.computeDistanceAndTime(k2,0,o(),0,0,bd*ei+math.sqrt(jT)+jW-c4)end;k6=(k6+15+bj*iX)*1.1;local k9=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if k9 then local jS=planet:getAltitude(CustomTarget.position)local ka=as-jS-100;local dX=CustomTarget.position-vec3(core.getConstructWorldPos())local kb=math.sqrt(dX:len()^2-(as-jS)^2)if kb>100 then k9=false elseif ka<=k6 or k6==-1 then BrakeIsOn=true;jZ=true else BrakeIsOn=false;jZ=true end end;if not k9 and CalculateBrakeLandingSpeed then if k6>=j_ then BrakeIsOn=true else BrakeIsOn=false end;jZ=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)gf=ao;if gf>-1 then bh=autoRollPreference;if bj<1 or bi:normalize():dot(c_)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)ad=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bi:normalize():dot(-eJ)<0.999 then BrakeIsOn=true elseif eH<-brakeLandingRate and not jZ then BrakeIsOn=true elseif not jZ then BrakeIsOn=false end end;if AutoTakeoff or am then local fG,fI,fH;if AutopilotTargetCoords~=nil then fG,fI,fH=bb:getPlanetarySystem(0):castIntersections(iZ,(AutopilotTargetCoords-iZ):normalize(),function(fJ)return fJ.radius+fJ.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if as>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)E=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jx)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not am then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif am and bj<N then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)E=0 elseif am then cmdThrottle(0)E=0;BrakeIsOn=true end elseif am and j()==0 and a9~=nil and(fG==nil or fG.name==a9.name)then Autopilot=true;am=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local kc=hoverDetectGround()>-1;local kd=d0;if(VectorToTarget or am)and not kc and bj>minRollVelocity and j()>0.01 then local jO=math.rad(math.abs(ec))kd=d0*math.abs(math.cos(jO))+j1*math.sin(jO)end;local ke=utils.clamp(jx-kd,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then ke=utils.clamp(jx-kd,-85,MaxPitch)elseif j()<0.01 then ke=utils.clamp(jx-kd,-MaxPitch,MaxPitch)end;if math.abs(ec)<5 or VectorToTarget or BrakeLanding or kc or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(ke)local jy=pitchPID:get()T=T+jy end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and I then E=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)I=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not I then E=0;I=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local kf=utils.clamp(S+T+system.getControlDeviceForwardInput(),-1,1)local kg=utils.clamp(V+Y+system.getControlDeviceYawInput(),-1,1)local kh=utils.clamp(W+U-system.getControlDeviceLeftRightInput(),-1,1)local ki=X;local kj=vec3(core.getWorldVertical())if kj==nil or kj:len()==0 then kj=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local kk=vec3(core.getConstructWorldOrientationUp())local kl=vec3(core.getConstructWorldOrientationForward())local km=vec3(core.getConstructWorldOrientationRight())local kn=vec3(core.getWorldVelocity())local ko=vec3(core.getWorldVelocity()):normalize()local kp=getRoll(kj,kl,km)local kq=math.abs(kp)local kr=utils.sign(kp)local j=j()local ks=vec3(core.getWorldAngularVelocity())local kt=kf*pitchSpeedFactor*km+kg*rollSpeedFactor*kl+kh*yawSpeedFactor*kk;if kj:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or al or AltitudeHold)then local ec=getRoll(kj,kl,km)local ed=ec/180*math.pi;local ee=math.cos(ed)local ef=math.sin(ed)local i_=getPitch(kj,kl,km*ee+kk*ef)if bh==true and math.abs(bp-kp)>autoRollRollThreshold and kg==0 and math.abs(i_)<85 then local ku=bp;local jm=autoRollFactor;if j==0 then jm=jm/4;bp=0;ku=0 end;if rollPID==nil then rollPID=pid.new(jm*0.01,0,jm*0.1)end;rollPID:inject(ku-kp)local kv=rollPID:get()kt=kt+kv*kl end end;if kj:len()>0.01 and j>0.0 then local kw=20.0;if turnAssist==true and kq>kw and kf==0 and kh==0 then local kx=turnAssistFactor*0.1;local ky=turnAssistFactor*0.025;local kz=(kq-kw)/(180-kw)*180;local kA=0;if kz<90 then kA=kz/90 elseif kz<180 then kA=(180-kz)/90 end;kA=kA*kA;local kB=-kr*ky*(1.0-kA)local kC=kx*kA;kt=kt+kC*km+kB*kk end end;local kD=1;local kE=0;local kF=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bs=utils.clamp(bs+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;M=false else E=u(utils.clamp(E+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bs=utils.clamp(bs-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;M=false else E=u(utils.clamp(E-speedChangeLarge/100,-1,1),2)end end;F=0;local eH=-kj:dot(kn)if ar and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bs/3.6-kn:dot(kl))local kG=throttlePID:get()H=utils.clamp(kG,-1,1)if H<E and j>0.005 then G=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(H,0.01,1))else G=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kn:len()-bs/3.6)local kH=utils.clamp(brakePID:get(),0,1)if j>0 and eH<-80 or j>0.005 then F=kH end;if F>0 then if G and H==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else H=utils.clamp(H,0.01,1)end;local kI=''local kJ=vec3()local kK=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,ad*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kK,kE)local kL='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kL=kL..ExtraLongitudeTags end;local kM=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kN=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kL,axisCommandId.longitudinal)local kO=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kI=kI..' , '.."lateral airfoil , lateral ground "kJ=kJ+kO;if kJ:len()>constants.epsilon then Nav:setEngineForceCommand(kI,kJ,kE,'','','',kF)end;Nav:setEngineForceCommand(kL,kN,kD)local kP='thrust analog vertical fueled 'local kQ='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kQ=kQ..ExtraLateralTags end;if ExtraVerticalTags~="none"then kP=kP..ExtraVerticalTags end;if ad~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kP,kK,kD)else Nav:setEngineForceCommand(kP,vec3(),kD)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kQ,kO,kD)else Nav:setEngineForceCommand(kQ,vec3(),kD)end;if ki==0 then ki=F end;local kR=-ki*(brakeSpeedFactor*kn+brakeFlatFactor*ko)Nav:setEngineForceCommand('brake',kR)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,E)end;local gB=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(kn:len()-gB/3.6)local kH=utils.clamp(brakePID:get(),0,1)ki=utils.clamp(ki+kH,0,1)end;local kR=-ki*(brakeSpeedFactor*kn+brakeFlatFactor*ko)Nav:setEngineForceCommand('brake',kR)local kI=''local kJ=vec3()local kS=false;local kL='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kL=kL..ExtraLongitudeTags end;local kM=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if kM==axisCommandType.byThrottle then local kN=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kL,axisCommandId.longitudinal)Nav:setEngineForceCommand(kL,kN,kD)elseif kM==axisCommandType.byTargetSpeed then local kN=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kI=kI..' , '..kL;kJ=kJ+kN;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kS=true end end;local kQ='thrust analog lateral 'if ExtraLateralTags~="none"then kQ=kQ..ExtraLateralTags end;local kT=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kT==axisCommandType.byThrottle then local kU=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kQ,axisCommandId.lateral)Nav:setEngineForceCommand(kQ,kU,kD)elseif kT==axisCommandType.byTargetSpeed then local kO=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kI=kI..' , '..kQ;kJ=kJ+kO end;local kP='thrust analog vertical 'if ExtraVerticalTags~="none"then kP=kP..ExtraVerticalTags end;local kV=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kV==axisCommandType.byThrottle then local kK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kP,axisCommandId.vertical)if ad~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kP,kK,kD,'airfoil','ground','',kF)else Nav:setEngineForceCommand(kP,vec3(),kD)Nav:setEngineForceCommand('airfoil vertical',kK,kD,'airfoil','','',kF)Nav:setEngineForceCommand('ground vertical',kK,kD,'ground','','',kF)end elseif kV==axisCommandType.byTargetSpeed then if ad<0 then Nav:setEngineForceCommand('hover',vec3(),kD)end;local kW=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kI=kI..' , '..kP;kJ=kJ+kW end;if kJ:len()>constants.epsilon then if X~=0 or kS or math.abs(ko:dot(kl))<0.8 then kI=kI..', brake'end;Nav:setEngineForceCommand(kI,kJ,kE,'','','',kF)end end;local kX=torqueFactor*(kt-ks)local kY=vec3(core.getWorldAirFrictionAngularAcceleration())kX=kX-kY;Nav:setEngineTorqueCommand('torque',kX,kD,'airfoil','','',kF)Nav:setBoosterCommand('rocket_engine')if a4 and not VanillaRockets then local c7=vec3(core.getVelocity()):len()local kZ=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local k_=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if c7*3.6>k_*(1-kZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7*3.6<k_*(1-kZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local g6=unit.getThrottle()if AtmoSpeedAssist then g6=E*100 end;local gB=g6/100;if j==0 then gB=gB*MaxGameVelocity;if c7>=gB*(1-kZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7<gB*(1-kZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gB=gB*ReentrySpeed/3.6;if c7>=gB*(1-kZ)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif c7<gB*(1-kZ)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bO=coroutine.resume(beginSetup)if bO then SetupComplete=true end else Nav:update()if not bf and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(l0)if l0=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)E=0;if(vBooster or hover)and ao==-1 and(j()>0 or as<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bh=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if R and not BrakeLanding then Nav.control.extendLandingGears()end else if R then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif l0=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif l0=="forward"then S=S-1 elseif l0=="backward"then S=S+1 elseif l0=="left"then V=V-1 elseif l0=="right"then V=V+1 elseif l0=="yawright"then W=W-1 elseif l0=="yawleft"then W=W+1 elseif l0=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif l0=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif l0=="up"then ad=ad+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif l0=="down"then ad=ad-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif l0=="groundaltitudeup"then OldButtonMod=a2;OldAntiMod=a3;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a3;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a3 end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+a2 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif l0=="groundaltitudedown"then OldButtonMod=a2;OldAntiMod=a3;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-a2 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif l0=="option1"then if not Autopilot then IncrementAutopilotTargetIndex()M=false end elseif l0=="option2"then if not Autopilot then DecrementAutopilotTargetIndex()M=false end elseif l0=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;M=false;ToggleWidgets()elseif l0=="option4"then ToggleAutopilot()M=false elseif l0=="option5"then ToggleLockPitch()M=false elseif l0=="option6"then ToggleAltitudeHold()M=false elseif l0=="option7"then wipeSaveVariables()M=false elseif l0=="option8"then ToggleFollowMode()M=false elseif l0=="option9"then if gyro~=nil then gyro.toggle()av=gyro.getState()==1 end;M=false elseif l0=="lshift"then if system.isViewLocked()==1 then a0=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif p()==1 and ShiftShowsRemoteButtons then a0=true;bg=false;bf=false end elseif l0=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif l0=="lalt"then AltIsOn=true;if p()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif l0=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a4 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a4=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a4=false end elseif l0=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()E=0 elseif l0=="speedup"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif l0=="speeddown"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif l0=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(l0)if l0=="forward"then S=0 elseif l0=="backward"then S=0 elseif l0=="left"then V=0 elseif l0=="right"then V=0 elseif l0=="yawright"then W=0 elseif l0=="yawleft"then W=0 elseif l0=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif l0=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif l0=="up"then ad=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif l0=="down"then ad=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif l0=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a3=OldAntiMod end;if AltitudeHold then a2=OldButtonMod end;M=false elseif l0=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then a3=OldAntiMod end;if AltitudeHold then a2=OldButtonMod end;M=false elseif l0=="lshift"then if system.isViewLocked()==1 then a0=false;ae=0;af=0;system.lockView(PrevViewLock)elseif p()==1 and ShiftShowsRemoteButtons then a0=false;bg=false;bf=false end elseif l0=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif l0=="lalt"then if p()==0 and freeLookToggle then if M then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else M=true end elseif p()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(l0)if l0=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a3;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a3 end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+a2;a2=a2*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif l0=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-a2;a2=a2*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif l0=="speedup"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif l0=="speeddown"then if not a0 then if AtmoSpeedAssist and not AltIsOn then E=utils.clamp(E-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(e0)local i;local l1="/commands /setname /G /agg /addlocation /copydatabank"local l2,l3=nil,nil;local l4="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(e0," ")l2=e0;if i~=nil then l2=string.sub(e0,0,i-1)l3=string.sub(e0,i+1)elseif not string.find(l1,l2)then for gx in string.gmatch(l4,"([^\n]+)")do c(gx)end;return end;if l2=="/setname"then if l3==nil or l3==""then a1="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(l3)else a1="Select a saved target to rename first"end elseif l2=="/addlocation"then if l3==nil or l3==""or string.find(l3,"::")==nil then a1="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(l3,"::")local cJ=string.sub(l3,1,i-2)local cC=string.sub(l3,i)local v=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cD='::pos{'..v..','..v..','..v..','..v..','..v..'}'local cE,cF,cy,cz,cx=r(cC,cD)local planet=b5[tonumber(cE)][tonumber(cF)]cI(cJ,planet,cC)a1="Added "..cJ.." to saved locations,\nplanet "..planet.name.." at "..cC;ag=5 elseif l2=="/agg"then if l3==nil or l3==""then a1="Usage: /agg targetheight"return end;l3=tonumber(l3)if l3<1000 then l3=1000 end;AntigravTargetAltitude=l3;a1="AGG Target Height set to "..l3 elseif l2=="/G"then if l3==nil or l3==""then a1="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if l3=="dump"then for bM,bN in pairs(a)do if type(_G[bN])=="boolean"then if _G[bN]==true then c(bN.." true")else c(bN.." false")end elseif _G[bN]==nil then c(bN.." nil")else c(bN.." ".._G[bN])end end;return end;i=string.find(l3," ")local l5=string.sub(l3,0,i-1)local l6=string.sub(l3,i+1)for bM,bN in pairs(a)do if bN==l5 then a1="Variable "..l5 .." changed to "..l6;local l7=type(_G[bN])if l7=="number"then l6=tonumber(l6)elseif l7=="boolean"then if string.lower(l6)=="true"then l6=true else l6=false end end;_G[bN]=l6;return end end;a1="No such global variable: "..l5 elseif l2=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else a1="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
