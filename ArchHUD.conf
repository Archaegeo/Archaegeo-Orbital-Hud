name: ArchHud - Archaegeo v1.165 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = true --export: (Default: true)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        autoRollPreference = false --export: (Default: false)
        turnAssist = true --export: (Default: true)
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        DisplayOrbit = true --export: (Default: true) 
        SetWaypointOnExit = true --export: (Default: true)
        IntruderAlertSystem = false --export: (Default: true)
        AlwaysVSpd = false --export: (Default: false)
        BarFuelDisplay = true --export: (Default: true)
        showHelp = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        LowOrbitHeight = 1000 --export: (Default: 1000)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        ReEntryHeight = 5000 --export: (Default: 5000)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        circleRad = 400 --export: (Default: 400)
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 30 --export: (Default: 30)
        fuelY = 700 --export: (Default: 700)
        DeadZone = 50 --export: (Default: 50)
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        autoRollRollThreshold = 180 --export: (Default: 180)
        minRollVelocity = 150 --export: (Default: 150)    
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        local a=Navigator.new(system,core,unit)script={}VERSION_NUMBER=1.165;BrakeToggleStatus=BrakeToggleDefault;VertTakeOffEngine=false;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=1000;LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;safeMass=0;iphCondition="all"local b={"VertTakeOff","VertTakeOffEngine","SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime","safeMass","iphCondition"}local c=math.abs;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementMassById;local l=a.control.isRemoteControlled;local m=math.atan;local n=string.match;local o=utils.round;local p=system.getTime;local vec3=vec3;local q=utils.clamp;local r=a.axisCommandManager;local s=system.destroyWidgetPanel;local t=system.updateData;local u=system.addDataToWidget;local v=system.lockView;local w=system.isViewLocked;local function x(y,z)local A=10^(z or 0)return d(y*A+0.5)/A end;local B=16;local C=SafeR;local D=SafeB;local E=SafeG;local F=0;local G=0;local H=false;local I=0;local J=false;local K=x(ResolutionX/2,0)local L=x(ResolutionY/2,0)local M=false;local N=55;local O=false;local P=false;local Q=0;local R=0;local S=0;local T=0;local U=0;local V=0;local W=0;local X=false;local Y=false;local Z="empty"local a0=5;local a1=5;local a2=a0;local a3=a1;local a4=false;local a5,a6=0;local a7,a8=0;local a9=nil;local aa=0;local ab=0;local ac=0;local ad=0;local ae=0;local af=3;local ag=0;local ah=""local ai=""local aj=0;local ak=false;local al=false;local am=false;local an=-1;local ao=false;local ap=""local aq=j()>0;local ar=j()local as=core.getAltitude()local at=core.getElementIdList()local au=p()local av=core.getConstructMass()local aw=false;local ax=nil;local ay=false;local az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]local aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local aB={}local aC=0;local aD=0;local aE=""local aF=true;local aG={}local aH={}local aI={}local aJ=ResolutionX;local aK=ResolutionY;local aL=false;local aM=false;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=0;local b1=nil;local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=nil;local bd=false;local be=false;local bf=autoRollPreference;local bg=LandingGearGroundHeight;local bh=false;local bi=p()local bj=0;local bk=0;local bl=0;local bm=AtmoSpeedLimit;local bn=0;local bo=nil;local bp=0;local bq=0;local br=false;local bs=false;local bt={VectorToTarget=false}local bu=false;local bv=0;local bw=nil;local bx=false;local by=false;local bz=false;local bA=false;local bB=0;local bC=p()local bD=vec3(core.getConstructWorldOrientationUp())local bE=vec3(core.getConstructWorldOrientationForward())local bF=vec3(core.getConstructWorldOrientationRight())local bG=vec3(core.getWorldVelocity())local bH=vec3(bG):len()local bI=vec3(core.getWorldVertical())local bJ=-bI:dot(bG)local bK=vec3(core.getConstructWorldPos())local bL=nil;local bM=0;local bN=false;local bO=false;local bP=nil;local bQ=true;local bR=0;local bS=0;local bT=false;local bU={}local bV=showHud;local bW={}local bX=false;local bY=nil;local function bZ(b_,c0)for i=1,#c0 do b_[#b_+1]=c0[i]end;return b_ end;local function c1(c2)local c3={}local c4={"userControlScheme","freeLookToggle","BrakeToggleDefault","RemoteFreeze","brightHud","RemoteHud","VanillaRockets","InvertMouse","autoRollPreference","turnAssist","ExternalAGG","UseSatNav","ShouldCheckDamage","CalculateBrakeLandingSpeed","AtmoSpeedAssist","ForceAlignment","DisplayDeadZone","showHud","ShowOdometer","hideHudOnToggleWidgets","ShiftShowsRemoteButtons","DisplayOrbit","SetWaypointOnExit","IntruderAlertSystem","AlwaysVSpd","BarFuelDisplay","showHelp"}local c5={"YawStallAngle","PitchStallAngle","brakeLandingRate","MaxPitch","TargetOrbitRadius","LowOrbitHeight","AtmoSpeedLimit","SpaceSpeedLimit","AutoTakeoffAltitude","TargetHoverHeight","LandingGearGroundHeight","ReEntryHeight","MaxGameVelocity","AutopilotInterplanetaryThrottle","warmup","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","ContainerOptimization","FuelTankOptimization"}local c6={"ResolutionX","ResolutionY","circleRad","SafeR","SafeG","SafeB","PvPR","PvPG","PvPB","centerX","centerY","throtPosX","throtPosY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","DeadZone","OrbitMapSize","OrbitMapX","OrbitMapY"}local c7={"speedChangeLarge","speedChangeSmall","MouseXSensitivity","MouseYSensitivity","autoRollFactor","rollSpeedFactor","autoRollRollThreshold","minRollVelocity","turnAssistFactor","TrajectoryAlignmentStrength","torqueFactor","pitchSpeedFactor","yawSpeedFactor","brakeSpeedFactor","brakeFlatFactor","DampingMultiplier","apTickRate","hudTickRate","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}if not c2 then bZ(c3,c4)bZ(c3,c5)bZ(c3,c6)bZ(c3,c7)return c3 elseif c2=="boolean"then return c4 elseif c2=="handling"then return c5 elseif c2=="hud"then return c6 elseif c2=="physics"then return c7 end end;local function c8(c9,ca,cb,cc,cd)if cc==nil then cc=""end;if cd==nil then cd=""end;return e([[<text class="%s" x=%s y=%s style="%s">%s</text>]],cc,c9,ca,cd,cb)end;local function ce(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byThrottle and not cg then a.control.cancelCurrentControlMasterMode()end;r:setThrottleCommand(axisCommandId.longitudinal,cf)F=q(x(cf*100,0)/100,-1,1)end;local function ch(cf,cg)if r:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not cg then a.control.cancelCurrentControlMasterMode()end;r:setTargetSpeedCommand(axisCommandId.longitudinal,cf)bP=cf end;local function ci(cj,ck)if cj==0 then return c(ck)<1e-09 end;if ck==0 then return c(cj)<1e-09 end;return c(cj-ck)<math.max(c(cj),c(ck))*epsilon end;local function cl(ag,cm)local cn=ag>100000;if cm==nil then cm=1 end;if cn then return x(ag/1000/200,cm).."SU"elseif ag<1000 then return x(ag,cm).."M"else return x(ag/1000,cm).."KM"end end;local function co()AltitudeHold=false;if VertTakeOff then StrongBrakes=true;Reentry=false;AutoTakeoff=false;BrakeLanding=true;bf=true;ac=0;if aq and an==-1 then BrakeLanding=false;AltitudeHold=true;ac=0;a:setEngineForceCommand('thrust analog vertical fueled ',vec3(),1)ch(d(bm))end else bx=false;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;VertTakeOff=not VertTakeOff end;local function cp()bx=false;bp=nil;bq=nil;bB=0;if ar==0 then if IntoOrbit then IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;bf=true;if bw==nil then bw=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else Z="Unable to engage orbiting, not near planet"end else IntoOrbit=false;br=false;bw=nil;bf=autoRollPreference;if AltitudeHold then AltitudeHold=false end;bt.VectorToTarget=false;bt.AutopilotAlign=false;bu=false end end;local function cq()if bC-bk<1.5 then if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bv=HoldAltitude;bu=true;if not IntoOrbit then cp()end;br=true end end;bk=-1;if AltitudeHold or IntoOrbit or VertTakeOff then return end end else bk=bC end;if unit.getClosestPlanetInfluence()>0 and ar==0 then bv=as;bu=true;br=true;cp()if IntoOrbit then bk=bC else bk=0 end;return end;AltitudeHold=not AltitudeHold;BrakeLanding=false;Reentry=false;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;X=false;bf=true;LockPitch=nil;bx=false;if an==-1 then AutoTakeoff=false;if bk>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=as end end;if VertTakeOff then co()end else AutoTakeoff=true;if bk>-1 then HoldAltitude=as+AutoTakeoffAltitude end;GearExtended=false;a.control.retractLandingGears()BrakeIsOn=true;r:setTargetGroundAltitude(TargetHoverHeight)if VertTakeOffEngine and bN then co()end end;if al then HoldAltitude=100000 end else if IntoOrbit then cp()end;if VertTakeOff then co()end;bf=autoRollPreference;AutoTakeoff=false;VectorToTarget=false;bk=0 end end;local function cr()if l()==1 then X=not X;if X then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;a.control.retractLandingGears()r:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bf=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end else Z="Follow Mode only works with Remote controller"X=false end end;local function cs()local function ct(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then cq()end end;VectorStatus="Proceeding to Waypoint"end;if bC-bl<1.5 and ar>0 then if not bA then Z="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if ar>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+LowOrbitHeight end;bl=-1;if Autopilot or VectorToTarget or IntoOrbit then return end end else bl=bC end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not al and not IntoOrbit then bb.UpdateAutopilotTarget()bc.showWayPoint(a9,AutopilotTargetCoords)local cu=unit.getClosestPlanetInfluence()>0;if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if ar~=0 then al=true;cq()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if ar>0 then if not VectorToTarget then ct(SpaceTarget)end else if not(a9.name==planet.name and cu)then bx=false;Autopilot=true elseif not aq then if IntoOrbit then cp()end;bv=planet.noAtmosphericDensityAltitude+LowOrbitHeight;bu=true;bt.AutopilotAlign=true;bt.VectorToTarget=true;br=false;if not IntoOrbit then cp()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if ar~=0 then al=true;cq()else Autopilot=true end end elseif ar==0 then if CustomTarget==nil and(a9.name==planet.name and cu)and not IntoOrbit then WaypointSet=false;bx=false;br=false;cp()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;X=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;M=false;LockPitch=nil;WaypointSet=false end else al=true;cq()end else al=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;M=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=as;TargetSet=false;Reentry=false;if IntoOrbit then cp()end end end;local function cv(cw)local cx=-1;local cy;cx=bb.findAtlasIndex(SavedLocations)if cx~=-1 then local cz;if cw~=nil then cy={position=SavedLocations[cx].position,name=cw,atmosphere=SavedLocations[cx].atmosphere,planetname=SavedLocations[cx].planetname,gravity=SavedLocations[cx].gravity}else cy={position=bK,name=SavedLocations[cx].name,atmosphere=ar,planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cx]=cy;cx=-1;cx=bb.findAtlasIndex(b1[0])if cx>-1 then b1[0][cx]=cy end;bb.UpdateAtlasLocationsList()Z=CustomTarget.name.." position updated"bb.UpdateAutopilotTarget()else Z="Name Not Found"end end;local function cA()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bf=autoRollPreference end;if BrakeIsOn then VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;if not bO then AltitudeHold=false;LockPitch=nil end;if VertTakeOff then co()end;if IntoOrbit then cp()end;bf=autoRollPreference;ak=false;am=false;ac=0 end end;local function cB(cC,cD,cE)local function cF(cC,cG)cC=vec3(cC)cG=vec3(cG):normalize()local cH=cC*cG;return cH.x+cH.y+cH.z end;local cI=0.001;local cJ=1;if not aq or not bh or an~=-1 or bH<N then if cE==nil then cE=DampingMultiplier end;if cD==nil then cD=cI end;cC=vec3(cC):normalize()local cK=vec3()-cC;local cL=-cF(cK,core.getConstructWorldOrientationRight())*cJ;local cM=-cF(cK,core.getConstructWorldOrientationUp())*cJ;if aC==0 then aC=cL/2 end;if aD==0 then aD=cM/2 end;if c(cL)<0.1 then S=S-cL*2 else S=S-(cL+(cL-aC)*cE)end;if c(cM)<0.1 then R=R+cM*2 else R=R+cM+(cM-aD)*cE end;aC=cL;aD=cM;if c(cL)<cD and c(cM)<cD then return true end;return false elseif bh and an==-1 then cC=bG;if cE==nil then cE=DampingMultiplier end;if cD==nil then cD=cI end;cC=vec3(cC):normalize()local cK=bE-cC;local cL=-cF(cK,core.getConstructWorldOrientationRight())*cJ;local cM=-cF(cK,core.getConstructWorldOrientationUp())*cJ;if aC==0 then aC=cL/2 end;if aD==0 then aD=cM/2 end;if c(cL)<0.1 then S=S-cL*5 else S=S-(cL+(cL-aC)*cE)end;if c(cM)<0.1 then R=R+cM*5 else R=R+cM+(cM-aD)*cE end;aC=cL;aD=cM;if c(cL)<cD and c(cM)<cD then return true end;return false end end;local function cN()if Reentry then Z="Re-Entry cancelled"Reentry=false;bf=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then Z="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"af=5 elseif not O then StrongBrakes=planet.gravity*9.80665*av<LastMaxBrakeInAtmo;if not StrongBrakes then Z="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if r:getAxisCommandType(0)~=controlMasterModeId.cruise then a.control.cancelCurrentControlMasterMode()end;bf=true;BrakeIsOn=false;Z="Beginning Parachute Re-Entry - Strap In.  Target speed: "..bm end else Reentry=true;AltitudeHold=true;bf=true;BrakeIsOn=false;HoldAltitude=planet.surfaceMaxAltitude+ReEntryHeight;if HoldAltitude>planet.spaceEngineMinAltitude then HoldAltitude=planet.spaceEngineMinAltitude-100 end;local cb=cl(HoldAltitude)Z="Beginning Re-entry.  Target speed: "..bm.." Target Altitude: "..cb;ch(d(bm))end;AutoTakeoff=false end;local function cO()if antigrav and not ExternalAGG then if bO then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local function cP(cQ)local cR=0;local cS=0;local cT=0;if cQ<60 then cQ=d(cQ)elseif cQ<3600 then cR=d(cQ/60)cQ=d(cQ%60)elseif cQ<86400 then cS=d(cQ/3600)cR=d(cQ%3600/60)else cT=d(cQ/86400)cS=d(cQ%86400/3600)end;if cT>0 then return cT.."d "..cS.."h "elseif cS>0 then return cS.."h "..cR.."m "elseif cR>0 then return cR.."m "..cQ.."s"elseif cQ>0 then return cQ.."s"else return"0s"end end;local function cU(cV)local function cW(cX)for cY,cZ in pairs(cX)do dbHud_1.setStringValue(cZ,g(_G[cZ]))if cV and dbHud_2 then dbHud_2.setStringValue(cZ,g(_G[cZ]))end end end;if dbHud_1 then cW(b)cW(c1())system.print("Saved Variables to Datacore")if cV and dbHud_2 then Z="Databank copied.  Remove copy when ready."end end end;local function c_()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;local function d0()local function d1(d2)return type(d2)=='number'end;local function d3(d2)return type(tonumber(d2))=='number'end;local function d4(d5)return type(d5)=='table'end;local function d6(d7)return type(d7)=='string'end;local function d8(cZ)return d4(cZ)and d1(cZ.x and cZ.y and cZ.z)end;local function d9(da)return d4(da)and d1(da.latitude and da.longitude and da.altitude and da.bodyId and da.systemId)end;local db=math.pi/180;local dc=180/math.pi;local epsilon=1e-10;local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..y..','..y..','..y..','..y..','..y..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local function de(d2)local cH=string.gsub(string.reverse(e('%.4f',d2)),'^0*%.?','')return cH==''and'0'or string.reverse(cH)end;local function df(dg)if d8(dg)then return e('{x=%.3f,y=%.3f,z=%.3f}',dg.x,dg.y,dg.z)end;if d4(dg)and not getmetatable(dg)then local dh={}local di=next(dg)if type(di)=='nil'or di==1 then dh=dg else for cY,cZ in pairs(dg)do local cf=df(cZ)if type(cY)=='number'then table.insert(dh,e('[%s]=%s',cY,cf))else table.insert(dh,e('%s=%s',cY,cf))end end end;return e('{%s}',table.concat(dh,','))end;if d6(dg)then return e("'%s'",dg:gsub("'",[[\']]))end;return tostring(dg)end;local dj={}dj.__index=dj;dj.__tostring=function(dg,dk)local dl={}for cY in pairs(dg)do table.insert(dl,cY)end;table.sort(dl)local dh={}for _,cY in ipairs(dl)do local cf=df(dg[cY])if type(cY)=='number'then table.insert(dh,e('[%s]=%s',cY,cf))else table.insert(dh,e('%s=%s',cY,cf))end end;if dk then return e('%s%s',dk,table.concat(dh,',\n'..dk))end;return e('{%s}',table.concat(dh,','))end;dj.__eq=function(dm,dn)return dm.planetarySystemId==dn.planetarySystemId and dm.bodyId==dn.bodyId and ci(dm.radius,dn.radius)and ci(dm.center.x,dn.center.x)and ci(dm.center.y,dn.center.y)and ci(dm.center.z,dn.center.z)and ci(dm.GM,dn.GM)end;local function dp(dq,dr,ds,dt,du)assert(d3(dq),'Argument 1 (planetarySystemId) must be a number:'..type(dq))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(ds),'Argument 3 (radius) must be a number:'..type(ds))assert(d4(dt),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dt))assert(d3(du),'Argument 5 (GM) must be a number:'..type(du))return setmetatable({planetarySystemId=tonumber(dq),bodyId=tonumber(dr),radius=tonumber(ds),center=vec3(dt),GM=tonumber(du)},dj)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(dv)return e('::pos{%d,%d,%s,%s,%s}',dv.systemId,dv.bodyId,de(dv.latitude*dc),de(dv.longitude*dc),de(dv.altitude))end;MapPosition.__eq=function(dm,dn)return dm.bodyId==dn.bodyId and dm.systemId==dn.systemId and ci(dm.latitude,dn.latitude)and ci(dm.altitude,dn.altitude)and(ci(dm.longitude,dn.longitude)or ci(dm.latitude,math.pi/2)or ci(dm.latitude,-math.pi/2))end;local function dw(dx,dr,dy,dz,dA)local dq=dx;if d6(dx)and not dz and not dA and not dr and not dy then dq,dr,dy,dz,dA=n(dx,dd)assert(dq,'Argument 1 (position string) is malformed.')else assert(d3(dq),'Argument 1 (systemId) must be a number:'..type(dq))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(dy),'Argument 3 (latitude) must be in degrees:'..type(dy))assert(d3(dz),'Argument 4 (longitude) must be in degrees:'..type(dz))assert(d3(dA),'Argument 5 (altitude) must be in meters:'..type(dA))end;dq=tonumber(dq)dr=tonumber(dr)dy=tonumber(dy)dz=tonumber(dz)dA=tonumber(dA)if dr==0 then return setmetatable({latitude=dy,longitude=dz,altitude=dA,bodyId=dr,systemId=dq},MapPosition)end;return setmetatable({latitude=db*q(dy,-90,90),longitude=db*(dz%360),altitude=dA,bodyId=dr,systemId=dq},MapPosition)end;local dB={}dB.__index=dB;dB.__tostring=function(dg,dk)local dC=dk and dk..'  'local dD={}local dl={}for cY in pairs(dg)do table.insert(dl,cY)end;table.sort(dl)for _,dE in ipairs(dl)do bdy=dg[dE]local dF=dj.__tostring(bdy,dC)if dk then table.insert(dD,e('[%s]={\n%s\n%s}',dE,dF,dk))else table.insert(dD,e('  [%s]=%s',dE,dF))end end;if dk then return e('\n%s%s%s',dk,table.concat(dD,',\n'..dk),dk)end;return e('{\n%s\n}',table.concat(dD,',\n'))end;local function dG(dH)local b1={}local pid;for _,cZ in pairs(dH)do local dI=cZ.planetarySystemId;if type(dI)~='number'then error('Invalid planetary system ID: '..tostring(dI))elseif pid and dI~=pid then error('Mistringmatch planetary system IDs: '..dI..' and '..pid)end;local dJ=cZ.bodyId;if type(dJ)~='number'then error('Invalid body ID: '..tostring(dJ))elseif b1[dJ]then error('Duplicate body ID: '..tostring(dJ))end;setmetatable(cZ.center,getmetatable(vec3.unit_x))b1[dJ]=setmetatable(cZ,dj)pid=dI end;return setmetatable(b1,dB)end;b5={}local function dK(dH)return setmetatable({galaxyAtlas=dH or{}},b5)end;b5.__index=function(d5,i)if type(i)=='number'then local system=d5.galaxyAtlas[i]return dG(system)end;return rawget(b5,i)end;b5.__pairs=function(dg)return function(d5,cY)local dL,nv=next(d5,cY)return dL,nv and dG(nv)end,dg.galaxyAtlas,nil end;b5.__tostring=function(dg)local dM={}for _,dN in pairs(dg or{})do local dO=dN:getPlanetarySystemId()local dP=dB.__tostring(dN,'    ')table.insert(dM,e('  [%s]={%s\n  }',dO,dP))end;return e('{\n%s\n}\n',table.concat(dM,',\n'))end;b5.BodyParameters=dp;b5.MapPosition=dw;b5.PlanetarySystem=dG;function b5.createBodyParameters(dQ,dr,dR,dS,dT,dU,dV)assert(d3(dQ),'Argument 1 (planetarySystemId) must be a number:'..type(dQ))assert(d3(dr),'Argument 2 (bodyId) must be a number:'..type(dr))assert(d3(dR),'Argument 3 (surfaceArea) must be a number:'..type(dR))assert(d4(dS),'Argument 4 (aPosition) must be an array or vec3:'..type(dS))assert(d4(dT),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dT))assert(d3(dU),'Argument 6 (altitude) must be in meters:'..type(dU))assert(d3(dV),'Argument 7 (gravityAtPosition) must be number:'..type(dV))local ds=math.sqrt(dR/4/math.pi)local ag=ds+dU;local dW=vec3(dS)+ag*vec3(dT)local du=dV*ag*ag;return dp(dQ,dr,ds,dW,du)end;b5.isMapPosition=d9;function b5:getPlanetarySystem(dx)if i==nil then i=0 end;if nv==nil then nv=0 end;local dQ=dx;if d9(dx)then dQ=dx.systemId end;if type(dQ)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dB then system=dG(system)end;return system end end end;function dB:castIntersections(dX,cG,dY,dZ)local dY=dY or function(d_)return 1.05*d_.radius end;local e0={}if dZ then for _,i in ipairs(dZ)do e0[i]=self[i]end else dZ={}for cY,d_ in pairs(self)do table.insert(dZ,cY)e0[cY]=d_ end end;local function e1(e2,e3)local e4=e0[e2].center-dX;local e5=e0[e3].center-dX;return e4:len()<e5:len()end;table.sort(dZ,e1)local e6=cG:normalize()for i,dI in ipairs(dZ)do local d_=e0[dI]local e7=d_.center-dX;local ds=dY(d_)local e8=e7:dot(e6)local e9=e8^2-(e7:len2()-ds^2)if e9>=0 then local ea=math.sqrt(e9)local eb=e8+ea;local ec=e8-ea;if ec>0 then return d_,eb,ec elseif eb>0 then return d_,eb,nil end end end;return nil,nil,nil end;function dB:closestBody(ed)assert(type(ed)=='table','Invalid coordinates.')local ee,d_;local ef=vec3(ed)for _,eg in pairs(self)do local eh=(eg.center-ef):len2()if(not d_ or eh<ee)and eg.name~="Space"then d_=eg;ee=eh end end;return d_ end;function dB:convertToBodyIdAndWorldCoordinates(dx)local ei=dx;if d6(dx)then ei=dw(dx)end;if ei.bodyId==0 then return 0,vec3(ei.latitude,ei.longitude,ei.altitude)end;local eg=self:getBodyParameters(ei)if eg then return ei.bodyId,eg:convertToWorldCoordinates(ei)end end;function dB:getBodyParameters(dx)local dr=dx;if d9(dx)then dr=dx.bodyId end;assert(d3(dr),'Argument 1 (bodyId) must be a number:'..type(dr))return self[dr]end;function dB:getPlanetarySystemId()local _,cZ=next(self)return cZ and cZ.planetarySystemId end;function dj:convertToMapPosition(dt)assert(d4(dt),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dt))local ej=vec3(dt)if self.bodyId==0 then return setmetatable({latitude=ej.x,longitude=ej.y,altitude=ej.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ek=ej-self.center;local ag=ek:len()local dA=ag-self.radius;local dy=0;local dz=0;if not ci(ag,0)then local el=m(ek.y,ek.x)dz=el>=0 and el or 2*math.pi+el;dy=math.pi/2-math.acos(ek.z/ag)end;return setmetatable({latitude=dy,longitude=dz,altitude=dA,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function dj:convertToWorldCoordinates(dx)local ei=d6(dx)and dw(dx)or dx;if ei.bodyId==0 then return vec3(ei.latitude,ei.longitude,ei.altitude)end;assert(d9(ei),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ei.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ei.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local em=math.cos(ei.latitude)return self.center+(self.radius+ei.altitude)*vec3(em*math.cos(ei.longitude),em*math.sin(ei.longitude),math.sin(ei.latitude))end;function dj:getAltitude(dt)return(vec3(dt)-self.center):len()-self.radius end;function dj:getDistance(dt)return(vec3(dt)-self.center):len()end;function dj:getGravity(dt)local en=self.center-vec3(dt)local eo=en:len2()return self.GM/eo*en/math.sqrt(eo)end;return setmetatable(b5,{__call=function(_,...)return dK(...)end})end;local function ep()local b7={}local eq=30000000/3600;local er=eq*eq;local es=100;local function et(cZ)return 1/math.sqrt(1-cZ*cZ/er)end;function b7.computeAccelerationTime(eu,ev,ew)local ex=eq*math.asin(eu/eq)return(eq*math.asin(ew/eq)-ex)/ev end;function b7.computeDistanceAndTime(eu,ew,ey,ez,eA,eB)eA=eA or 0;eB=eB or 0;local eC=eu<=ew;local eD=ez*(eC and 1 or-1)/ey;local eE=-eB/ey;local eF=eD+eE;if eC and eF<=0 or not eC and eF>=0 then return-1,-1 end;local eG,eH=0,0;if eD~=0 and eA>0 then local ex=math.asin(eu/eq)local eI=math.pi*(eD/2+eE)local eJ=eD*eA;local eK=eq*math.pi;local cZ=function(d5)local eL=(eI*d5-eJ*math.sin(math.pi*d5/2/eA)+eK*ex)/eK;local eM=math.tan(eL)return eq*eM/math.sqrt(eM*eM+1)end;local eN=eC and function(d7)return d7>=ew end or function(d7)return d7<=ew end;eH=2*eA;if eN(cZ(eH))then local eO=0;while c(eH-eO)>0.5 do local d5=(eH+eO)/2;if eN(cZ(d5))then eH=d5 else eO=d5 end end end;local eP=eu;local eQ=eH/es;for eR=1,es do local eS=cZ(eR*eQ)eG=eG+(eS+eP)*eQ/2;eP=eS end;if eH<2*eA then return eG,eH end;eu=eP end;local ex=eq*math.asin(eu/eq)local bC=(eq*math.asin(ew/eq)-ex)/eF;local eT=er*math.cos(ex/eq)/eF;local ag=eT-er*math.cos((eF*bC+ex)/eq)/eF;return ag+eG,bC+eH end;function b7.computeTravelTime(eu,ev,ag)if ag==0 then return 0 end;if ev>0 then local ex=eq*math.asin(eu/eq)local eT=er*math.cos(ex/eq)/ev;return(eq*math.acos(ev*(eT-ag)/er)-ex)/ev end;if eu==0 then return-1 end;assert(eu>0,'Acceleration and initial speed are both zero.')return ag/eu end;function b7.lorentz(cZ)return et(cZ)end;return b7 end;local function eU()local vec3=require('cpml.vec3')local d0=d0()local function d6(d7)return type(d7)=='string'end;local function d4(d5)return type(d5)=='table'end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(dA)assert(self.body)local ag=dA+self.body.radius;if not ci(ag,0)then local orbit=math.sqrt(self.body.GM/ag)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dx,eV)assert(self.body)assert(d4(dx)or d6(dx))assert(d4(eV))local eW=(d6(dx)or d0.isMapPosition(dx))and self.body:convertToWorldCoordinates(dx)or vec3(dx)local cZ=vec3(eV)local eX=eW-self.body.center;local e5=cZ:len2()local eY=eX:len()local eZ=self.body.GM;local e_=((e5-eZ/eY)*eX-eX:dot(cZ)*cZ)/eZ;local cj=eZ/(2*eZ/eY-e5)local f0=e_:len()local e6=e_:normalize()local f1=cj*(1-f0)local f2=cj*(1+f0)local f3=f1*e6+self.body.center;local f4=f0<=1 and-f2*e6+self.body.center or nil;local f5=math.sqrt(cj*eZ*(1-f0*f0))local f6=f4 and 2*math.pi*math.sqrt(cj^3/eZ)local f7=math.acos(e_:dot(eX)/(f0*eY))if eX:dot(cZ)<0 then f7=-(f7-2*math.pi)end;local f8=math.acos((math.cos(f7)+f0)/(1+f0*math.cos(f7)))local f9=f8;if f9<0 then f9=f9+2*math.pi end;local fa=f9-f0*math.sin(f9)local fb=0;local fc=0;local fd=0;if f6~=nil then fb=fa/(2*math.pi/f6)fc=f6-fb;fd=fc+f6/2;if f7-math.pi>0 then fc=fb;fd=fc+f6/2 end;if fd>f6 then fd=fd-f6 end end;return{periapsis={position=f3,speed=f5/f1,circularOrbitSpeed=math.sqrt(eZ/f1),altitude=f1-self.body.radius},apoapsis=f4 and{position=f4,speed=f5/f2,circularOrbitSpeed=math.sqrt(eZ/f2),altitude=f2-self.body.radius},currentVelocity=cZ,currentPosition=eW,eccentricity=f0,period=f6,eccentricAnomaly=f8,meanAnomaly=fa,timeToPeriapsis=fc,timeToApoapsis=fd}end;local function fe(ff)local eg=d0.BodyParameters(ff.planetarySystemId,ff.bodyId,ff.radius,ff.center,ff.GM)return setmetatable({body=eg},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fe(...)end})end;local function fg()local fh=0;local function fi(fj)local ds=500000;local fk,fl,fm=math.huge;local fn=false;local fo=vec3({13771471,7435803,-128971})local fp=18000000;fk=vec3(fj):dist(fo)if fk<fp then return true,c(fk-fp),"Safe Zone",0 end;fl=vec3(fj):dist(vec3(planet.center))if fl<ds then fn=true end;if c(fl-ds)<c(fk-fp)then return fn,c(fl-ds),planet.name,planet.bodyId else return fn,c(fk-fp),"Safe Zone",0 end end;local function fq(cZ)if aJ==1920 then return cZ else return x(aJ*cZ/1920,0)end end;local function fr(cZ)if aK==1080 then return cZ else return x(aK*cZ/1080,0)end end;local function fs()return w()==0 and userControlScheme~="keyboard"and l()==0 end;local function ft()local fu="TRAVEL"if not bQ then fu="CRUISE"end;if Autopilot then fu="AUTOPILOT"end;return fu end;local function fv(fw,a_,c9,fx,fy,fz,fA,fB)local fC=1;local fD=2;local fE=3;local fF=4;local fG=5;local fH=6;local fI=""local fJ=0;local fK=fuelY;local fL=fuelY+5;if not BarFuelDisplay then fL=fL+5 end;if l()==1 and not RemoteHud then fK=fK-50;fL=fL-50 end;if fy=="ATMO"then fI="atmofueltank"elseif fy=="SPACE"then fI="spacefueltank"else fI="rocketfueltank"end;fJ=_G[fI.."_size"]if#fz>0 then for i=1,#fz do local fM=string.sub(fz[i][fD],1,12)local fN=0;for fO=1,fJ do if fz[i][fD]==f(unit[fI.."_"..fO].getData()).name then fN=fO;break end end;if a_ or fA[i]==nil or fB[i]==nil then local fP=0;local fQ=0;local fR=0;local fS=0;local fT=p()if fN~=0 then fB[i]=f(unit[fI.."_"..fN].getData()).percentage;fA[i]=f(unit[fI.."_"..fN].getData()).timeLeft;if fA[i]=="n/a"then fA[i]=0 end else fR=k(fz[i][fC])-fz[i][fF]fP=fz[i][fE]fB[i]=d(0.5+fR*100/fP)fQ=fz[i][fG]fS=fz[i][fH]if fQ<=fR then fA[i]=0 else fA[i]=d(0.5+fR/((fQ-fR)/(fT-fS)))end;fz[i][fG]=fR;fz[i][fH]=fT end end;if fM==fx then fM=e("%s %d",fy,i)end;if fN==0 then fM=fM.." *"end;local fU;if fA[i]==0 then fU=""else fU=cP(fA[i])end;if fB[i]~=nil then local fV=d(fB[i]*2.55)local fW=e("rgb(%d,%d,%d)",255-fV,fV,0)local cc=""if fU~=""and fA[i]<120 or fB[i]<5 then if a_ then cc=[[class="red"]]end end;if BarFuelDisplay then table.insert(fw,e([[
                                            <g class="pdim">                        
                                            <rect fill=grey class="bar" x="%d" y="%d" width="100" height="13"></rect></g>
                                            <g class="bar txtstart">
                                            <rect fill=%s width="%d" height="13" x="%d" y="%d"></rect>
                                            <text fill=black x="%d" y="%d">%s%% %s</text>
                                            </g>]],c9,fL,fW,fB[i],c9,fL,c9+2,fL+10,fB[i],fU))fw[#fw+1]=c8(c9,fK,fM,cc.."txtstart pdim txtfuel")fK=fK-30;fL=fL-30 else fw[#fw+1]=c8(c9,fK,fM,cc.." pdim txtfuel")fw[#fw+1]=c8(c9,fL,e("%d%% %s",fB[i],fU),"pdim txtfuel","fill:"..fW)fK=fK+30;fL=fL+30 end end end end end;local function fX(fw,dA)if dA<200000 and not aq or dA and aq then local fY=0;if c(bJ)>1 then fY=45*math.log(c(bJ),10)if bJ<0 then fY=-fY end end;fw[#fw+1]=e([[
                                <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                        <text x="31" y="-41">1000</text>
                                        <text x="-10" y="-65">100</text>
                                        <text x="-54" y="-45">10</text>
                                        <text x="-73" y="3">O</text>
                                        <text x="-56" y="52">-10</text>
                                        <text x="-14" y="72">-100</text>
                                        <text x="29" y="50">-1000</text>
                                        <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                    <g class="linethick">
                                        <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                        <circle r="90" />
                                    </g>
                                    <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                                </g>
                            ]],vSpdMeterX,vSpdMeterY,d(bJ),d(fY))end;return fw end;local function fZ(f_)local g0=-bI;f_=f_-f_:project_on(g0)local g1=vec3(0,0,1)g1=g1-g1:project_on(g0)local g2=g1:cross(g0)local fY=g1:angle_between(f_)*constants.rad2deg;if f_:dot(g2)<0 then fY=360-fY end;return fY end;local function g3(fw,centerX,centerY,g4,g5,cu)local g6=circleRad;local g7=20;local g8=d(g4)if cu then for i=-45,45,5 do local g9=i;fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],g9,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;fw[#fw+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+g6+g7-len,centerX,centerY+g6+g7)end;fw[#fw+1]=c8(centerX,centerY+g6+g7-35,g5,"pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY+g6+g7-25,g8 .." deg","pdim txt txtmid")fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g4,centerX,centerY)fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+g6+g7-20,centerX+5,centerY+g6+g7-20,centerX,centerY+g6+g7-15)fw[#fw+1]="</g>"end;local ga=g8;if cu then ga=fZ(bE)end;local gb=20;local gc=d(ga)local gd=0;local ge=centerY+g6+g7+20;local gf=centerX;if g5~="YAW"then ge=fr(130)gf=fq(960)end;local gg=[[<path class="txttick line" d="]]local gh=d(gc-(gb+10)-gc%5+0.5)for i=gh+60,gh,-5 do local c9=gf-(-i*5+ga*5)if i%10==0 then gd=10;local y=i;if y==360 then y=0 elseif y>360 then y=y-360 elseif y<0 then y=y+360 end;fw[#fw+1]=c8(c9+5,ge-12,y)elseif i%5==0 then gd=5 end;if gd==10 then gg=e([[%s M %f %f v %d]],gg,c9,ge-5,gd)else gg=e([[%s M %f %f v %d]],gg,c9,ge-2.5,gd)end end;fw[#fw+1]=gg..[["/>]]fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],gf-5,ge+10,gf+5,ge+10,gf,ge+5)if cu then g5="HDG"end;fw[#fw+1]=c8(gf,ge+25,gc.."deg","pdim txt txtmid","")fw[#fw+1]=c8(gf,ge+35,g5,"pdim txt txtmid","")end;local function gi(fw,gj,g4,centerX,centerY,cu,gk,eS)local g6=circleRad;local gl=d(g6*3/5)if g6>0 then local gm=d(gj)local len=0;local gg=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*g4,centerX,centerY)if not aq then gg=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;fw[#fw+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],g6-1,centerX,centerY)fw[#fw+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(gm-30-gm%5+0.5),d(gm+30+gm%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ca=centerY+-i*5+gj*5;if len==30 then gg=e([[%s M %d %f h %d]],gg,centerX-gl-len,ca,len)if aq then fw[#fw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g4,centerX,centerY,centerX-gl+10,ca,i)fw[#fw+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*g4,centerX,centerY,centerX+gl-10,ca,i)if i==0 or i==180 or i==-180 then fw[#fw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g4,centerX,centerY,centerX-gl+20,ca,gl*2-40)end else fw[#fw+1]=c8(centerX-gl+10,ca,i,"pdim txt txtmid")fw[#fw+1]=c8(centerX+gl-10,ca,i,"pdim txt txtmid")end;gg=e([[%s M %d %f h %d]],gg,centerX+gl,ca,len)else gg=e([[%s M %d %f h %d]],gg,centerX-gl-len,ca,len)gg=e([[%s M %d %f h %d]],gg,centerX+gl,ca,len)end end;fw[#fw+1]=gg..[["/>]]local gn="PITCH"if not cu then gn="REL PITCH"end;if gj>90 and not aq then gj=90-(gj-90)elseif gj<-90 and not aq then gj=-90-(gj+90)end;if g6>200 then if aq then if eS>N then fw[#fw+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY+20,gk,"pdim txt txtmid")end;fw[#fw+1]=e([[<g transform="rotate(%f,%d,%d)">]],-g4,centerX,centerY)else fw[#fw+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-gl+25,centerY-5,centerX-gl+20,centerY,centerX-gl+25,centerY+5,centerX-gl+50,centerY+4,gm)fw[#fw+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+gl-25,centerY-5,centerX+gl-20,centerY,centerX+gl-25,centerY+5,centerX+gl-30,centerY+4,gm)fw[#fw+1]="</g>"end;local go=d(g6/3)fw[#fw+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-go,centerY,g6-go)if not aq and cu then fw[#fw+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*g4,centerX,centerY,centerX-gl+10,centerY,gl*2-20)end;fw[#fw+1]="</g>"if g6<200 then if aq and eS>N then fw[#fw+1]=c8(centerX,centerY-g6,gn,"pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY-g6+10,gm,"pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY-15,"Yaw","pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY+20,gk,"pdim txt txtmid")else fw[#fw+1]=c8(centerX,centerY-g6,gn,"pdim txt txtmid")fw[#fw+1]=c8(centerX,centerY-g6+15,gm,"pdim txt txtmid")end end end end;local function gp(fw,dA,cu)local gq=altMeterX;local gr=altMeterY;local gs=78;local gt=19;local gu=an;if an~=-1 then fw[#fw+1]=c8(gq+gs,gr+gt+20,e("AGL: %.1fm",an),"pdim altsm txtend")end;if cu and(dA<200000 and not aq or dA and aq)then table.insert(fw,e([[
                                <g class="pdim">                        
                                    <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                    <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                    <g clip-path="url(#alt)">]],gq-1,gr-4,gs+2,gt+6,gq+1,gr-1,gs-4,gt))local cx=0;local gv=1;local gw=0;local gx=dA<0;local gy=9;if gx then gy=0 end;local dA=c(dA)while cx<6 do local gz=11;local gA=16;local gB=9;local gC=14;local cc="altsm"if cx>2 then gA=gA+3;gz=gz+2;gC=gC+2;gB=gB-6;cc="altbig"end;if gx then cc=cc.." red"end;local gD=dA/gv%10;local gE=d(gD)local gF=d((gE+1)%10)local gG=gw;if cx==0 then gG=gD-gE;if gx then gG=1-gG end end;if gx and(cx==0 or gw~=0)then local gH=gF;gF=gE;gE=gH end;local gI=gA*(gG-1)local gJ=gI+gA;local c9=gq+gB+(6-cx)*gz;local ca=gr+gC;fw[#fw+1]=c8(c9,ca+gI,gF,cc)fw[#fw+1]=c8(c9,ca+gJ,gE,cc)cx=cx+1;gv=gv*10;if gE==gy then gw=gG else gw=0 end end;table.insert(fw,[[</g></g>]])end end;local function gK(eV)eV=vec3(eV)local gL=-math.deg(m(eV.y,eV.z))+180;gL=gL-90;if gL<0 then gL=360+gL end;if gL>180 then gL=-180+gL-180 end;return-gL end;local function gM(eV)eV=vec3(eV)local ga=math.deg(m(eV.y,eV.x))-90;if ga<-180 then ga=360+ga end;return ga end;local function gN(fw,eV,eS,centerX,centerY)if eS>5 and not aq or eS>N then local g6=circleRad;local gO=20;local gP=20;local gQ=vec3(eV)local gR=gK(gQ)local gS=gM(gQ)local gT=14;local gU=gT/2;local gV=-gS/gP*g6;local gW=gR/gO*g6;local c9=centerX+gV;local ca=centerY+gW;local ag=math.sqrt(gV^2+gW^2)local gX=[[<circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..gU/gT..[["
                            style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
                        <circle
                            cx="]]..c9 ..[["
                            cy="]]..ca..[["
                            r="]]..gU..[["
                            style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                        <path
                            d="M ]]..c9-gT..[[,]]..ca..[[ h ]]..gU..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9+gU..[[,]]..ca..[[ h ]]..gU..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />
                        <path
                            d="M ]]..c9 ..[[,]]..ca-gT..[[ v ]]..gU..[["
                            style="stroke:#d7fe00;stroke-opacity:1" />]]if ag<g6 then fw[#fw+1]=gX else local fY=m(gW,gV)local gY=4;local gZ=centerX+g6*math.cos(fY)local g_=centerY+g6*math.sin(fY)fw[#fw+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',fY*180/math.pi,gZ,g_,gZ-gY,g_-gY/2,gY*2,gY,gZ+gY,g_-gY,gY,gY,-gY,gY)end;if not aq then gR=gK(-gQ)gS=gM(-gQ)gV=-gS/gP*g6;gW=gR/gO*g6;c9=centerX+gV;ca=centerY+gW;ag=math.sqrt(gV^2+gW^2)if ag<g6 then local h0=[[<circle
                                    cx="]]..c9 ..[["
                                    cy="]]..ca..[["
                                    r="]]..gU..[["
                                    style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                                <path
                                    d="M ]]..c9 ..[[,]]..ca-gT..[[ v ]]..gU..[["
                                    style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                                <use
                                    xlink:href="#l"
                                    transform="rotate(120,]]..c9 ..[[,]]..ca..[[)" />
                                <use
                                    xlink:href="#l"
                                    transform="rotate(-120,]]..c9 ..[[,]]..ca..[[)" />
                                <path
                                    d="M ]]..c9-gU..[[,]]..ca..[[ h ]]..gT..[["
                                    style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                                    transform="rotate(-45,]]..c9 ..[[,]]..ca..[[)" id="c"/>
                                <use
                                    xlink:href="#c"
                                    transform="rotate(-90,]]..c9 ..[[,]]..ca..[[)"/>]]fw[#fw+1]=h0 end end end end;local function h1(fw,fu,h2,h3)h2=d(h2+0.5)local fK=throtPosY+10;local fL=throtPosY+20;if l()==1 and not RemoteHud then fK=55;fL=65 end;local h4="CRUISE"local unit="km/h"local cf=h3;if fu=="TRAVEL"or fu=="AUTOPILOT"then h4="THROT"unit="%"cf=h2;local h5="dim"if h2<0 then h5="red"end;fw[#fw+1]=e([[<g class="%s">
                                <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                                <g transform="translate(0 %.0f)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g>]],h5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-c(h2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;fw[#fw+1]=c8(throtPosX+10,fK,h4,"pbright txtstart")fw[#fw+1]=c8(throtPosX+10,fL,e("%.0f %s",cf,unit),"pbright txtstart")if aq and AtmoSpeedAssist and bQ and H then h2=d(I*100+0.5)local h5="red"if h2<0 then h5="red"end;fw[#fw+1]=e([[<g class="%s">
                                <g transform="translate(0 %d)">
                                    <polygon points="%d,%d %d,%d %d,%d"/>
                                </g></g>]],h5,1-c(h2),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)fw[#fw+1]=c8(throtPosX+10,fK+40,"LIMIT","pbright txtstart")fw[#fw+1]=c8(throtPosX+10,fL+40,h2 .."%","pbright txtstart")end;if aq and AtmoSpeedAssist or Reentry then fw[#fw+1]=c8(throtPosX+10,fK-40,"LIMIT: "..bm.." km/h","dim txtstart")elseif not aq and Autopilot then fw[#fw+1]=c8(throtPosX+10,fK-40,"LIMIT: "..d(MaxGameVelocity*3.6+0.5).." km/h","dim txtstart")end end;local function h6(fw,h7)local h8=throtPosY-10;local h9=throtPosX+10;fw[#fw+1]=c8(0,0,"","pdim txt txtend")if l()==1 and not RemoteHud then h8=75 end;fw[#fw+1]=c8(h9,h8,d(h7).." km/h","pbright txtbig txtstart")end;local function ha(fw)fw[#fw+1]=c8(fq(1900),fr(1070),e("ARCH Hud Version: %.3f",VERSION_NUMBER),"hudver")fw[#fw+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then fw[#fw+1]=c8(fq(960),fr(550),"Warning: Invalid Control Scheme Detected","warnings")fw[#fw+1]=c8(fq(960),fr(600),"Keyboard Scheme must be selected","warnings")fw[#fw+1]=c8(fq(960),fr(650),"Set your preferred scheme in Lua Parameters instead","warnings")end;local hb=fq(960)local hc=fr(860)local hd=fr(880)local he=fr(900)local hf=fr(960)local hg=fr(200)local hh=fr(250)local hi=fr(960)if l()==1 and not RemoteHud then hc=fr(135)hd=fr(155)he=fr(175)hg=fr(115)hh=fr(95)end;if BrakeIsOn then fw[#fw+1]=c8(hb,hc,"Brake Engaged","warnings")elseif G>0 then fw[#fw+1]=c8(hb,hc,"Auto-Brake Engaged","warnings","opacity:"..G)end;if aq and bh and an==-1 then if not Autopilot and not VectorToTarget and not BrakeLanding and not bO and not VertTakeOff then fw[#fw+1]=c8(hb,hg+50,"** STALL WARNING **","warnings")end end;if bY~=nil and not aq then fw[#fw+1]=c8(hb,hg+50,"* DEATH BLOSSOM ENGAGED *","warnings")end;if ax then fw[#fw+1]=c8(hb,hi,"Gyro Enabled","warnings")end;if GearExtended then if P then fw[#fw+1]=c8(hb,hd,"Gear Extended","warn")else fw[#fw+1]=c8(hb,hd,"Landed (G: Takeoff)","warnings")end;local hj=cl(a:getTargetGroundAltitude())fw[#fw+1]=c8(hb,he,"Hover Height: "..hj,"warn")end;if a4 then fw[#fw+1]=c8(hb,hf+20,"ROCKET BOOST ENABLED","warn")end;if antigrav and not ExternalAGG and bO and AntigravTargetAltitude~=nil then if c(as-antigrav.getBaseAltitude())<501 then fw[#fw+1]=c8(hb,hg+15,e("AGG On - Target Altitude: %d Singularity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warn")else fw[#fw+1]=c8(hb,hg+15,e("AGG On - Target Altitude: %d Singluarity Altitude: %d",d(AntigravTargetAltitude),d(antigrav.getBaseAltitude())),"warnings")end elseif Autopilot and AutopilotTargetName~="None"then fw[#fw+1]=c8(hb,hg+20,"Autopilot "..AutopilotStatus,"warn")elseif LockPitch~=nil then fw[#fw+1]=c8(hb,hg+20,e("LockedPitch: %d",d(LockPitch)),"warn")elseif X then fw[#fw+1]=c8(hb,hg+20,"Follow Mode Engaged","warn")elseif Reentry then fw[#fw+1]=c8(hb,hg+20,"Re-entry in Progress","warn")end;local hk,eb,ec=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(d_)if d_.noAtmosphericDensityAltitude>0 then return d_.radius+d_.noAtmosphericDensityAltitude else return d_.radius+d_.surfaceMaxAltitude*1.5 end end)local hl=eb;if ec~=nil and eb~=nil then hl=math.min(ec,eb)end;if AltitudeHold or VertTakeOff then local hj=cl(HoldAltitude,2)if VertTakeOff then if bO then hj=cl(antigrav.getBaseAltitude(),2)end;fw[#fw+1]=c8(hb,hg,"AGG VTO to "..hj,"warn")elseif AutoTakeoff and not IntoOrbit then if al then fw[#fw+1]=c8(hb,hg,"Takeoff to "..AutopilotTargetName,"warn")else fw[#fw+1]=c8(hb,hg,"Takeoff to "..hj,"warn")end;if BrakeIsOn and not VertTakeOff then fw[#fw+1]=c8(hb,hg+50,"Throttle Up and Disengage Brake For Takeoff","crit")end else fw[#fw+1]=c8(hb,hg,"Altitude Hold: "..hj,"warn")end end;if VertTakeOff and(antigrav~=nil and antigrav)then if ar>0.1 then fw[#fw+1]=c8(hb,hg+20,"Beginning ascent","warn")elseif ar<0.09 and ar>0.05 then fw[#fw+1]=c8(hb,hg+20,"Aligning trajectory","warn")elseif ar<0.05 then fw[#fw+1]=c8(hb,hg+20,"Leaving atmosphere","warn")end end;if IntoOrbit then if bo~=nil then fw[#fw+1]=c8(hb,hg,bo,"warn")end end;if IntruderAlertSystem and safeMass==-1 then fw[#fw+1]=c8(hb,hg+70,"POSSIBLE INTRUDER ALERT - MASS GAIN OF "..bM.."kg DETECTED","warnings")end;if BrakeLanding then if StrongBrakes then fw[#fw+1]=c8(hb,hg,"Brake-Landing","warnings")else fw[#fw+1]=c8(hb,hg,"Coast-Landing","warnings")end end;if ProgradeIsOn then fw[#fw+1]=c8(hb,hg,"Prograde Alignment","crit")end;if RetrogradeIsOn then fw[#fw+1]=c8(hb,hg,"Retrograde Alignment","crit")end;if hl~=nil and ar==0 then local hj=cl(hl)local travelTime=b7.computeTravelTime(bH,0,hl)local hm="Collision"if hk.noAtmosphericDensityAltitude>0 then hm="Atmosphere"end;fw[#fw+1]=c8(hb,hh+20,hk.name.." "..hm.." "..cP(travelTime).." In "..hj,"crit")end;if VectorToTarget and not IntoOrbit then fw[#fw+1]=c8(hb,hg+35,VectorStatus,"warn")end;fw[#fw+1]="</g>"return fw end;local function hn(eS)return d(x(eS*3.6,0)+0.5).." km/h"end;local function ho(fw)local hp=OrbitMapX;local hq=OrbitMapY;local hr=OrbitMapSize;local hs=4;local ht=15;local c9=0;local ca=0;local hu,hv,hw,hx;local function hy(type)local hz,bC,eS,hA;if type=="Periapsis"then hz=orbit.periapsis.altitude;bC=orbit.timeToPeriapsis;eS=orbit.periapsis.speed;hA=35 else hz=orbit.apoapsis.altitude;bC=orbit.timeToApoapsis;eS=orbit.apoapsis.speed;hA=-35 end;fw[#fw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c9+hA,ca-5,hp+hr/2-hu+hx,ca-5)fw[#fw+1]=c8(c9,ca,type)ca=ca+ht;local hj=cl(hz)fw[#fw+1]=c8(c9,ca,hj)ca=ca+ht;fw[#fw+1]=c8(c9,ca,cP(bC))ca=ca+ht;fw[#fw+1]=c8(c9,ca,hn(eS))end;if orbit~=nil and ar<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then hq=hq+hs;c9=hp+hr+hp/2+hs;ca=hq+hr/2+5+hs;hu=hr/4;hx=0;fw[#fw+1]=[[<g class="pbright txtorb txtmid">]]fw[#fw+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',hr+hp*2,hr+hq,hs,hs)if orbit.periapsis~=nil and orbit.apoapsis~=nil then hw=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(hu*2)hv=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/hw*(1-orbit.eccentricity)hx=hu-orbit.periapsis.altitude/hw-planet.radius/hw;local hB=""if orbit.periapsis.altitude<=0 then hB='redout'end;fw[#fw+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],hB,hp+hr/2+hx+hs,hq+hr/2+hs,hu,hv)fw[#fw+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',hp+hr/2+hs,hq+hr/2+hs,planet.radius/hw)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then hy("Apoapsis")end;ca=hq+hr/2+5+hs;c9=hp-hp/2+10+hs;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then hy("Periapsis")end;fw[#fw+1]=c8(hp+hr/2+hs,planet.name,20+hs,"txtorbbig")if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local hC=orbit.timeToApoapsis/orbit.period*2*math.pi;local hD=hu*math.cos(hC)local hE=hv*math.sin(hC)fw[#fw+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',hp+hr/2+hD+hx+hs,hq+hr/2+hE+hs)end;fw[#fw+1]=[[</g>]]return fw else return fw end end;local function hF()if radarPanelID~=nil and aj==0 then s(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then s(perisPanelID)perisPanelID=nil end else if aj==1 then s(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;aj=0 end end;local function hG(fw)local c9=50;local ca=275;local hH={"Alt-1: Increment Interplanetary Helper","Alt-2: Decrement Interplanetary Helper","Alt-3: Toggle Vanilla Widget view"}local hI={"Alt-4: Autopilot in atmo to target","Alt-4-4: Autopilot to +1k over atmosphere and orbit to target","Alt-5: Lock Pitch at current pitch","Alt-6: Altitude hold at current altitude","Alt-6-6: Altitude Hold at 11% atmosphere","Alt-9: Activate Gyroscope"}local hJ={"Alt-4 (Alt < 100k): Autopilot to Orbit and land","Alt-4 (Alt > 100k): Autopilot to target","Alt-6: Orbit at current altitude","Alt-6-6: Orbit at 1k over atmosphere","Alt-9: Activate Gyroscope"}local hK={"CTRL: Toggle Brakes on and off, cancels active AP","LeftAlt: Tap to shift freelook on and off","Shift: Hold while not in freelook to see Buttons","Type /commands or /help in lua chat to see text commands"}if aq then bZ(hH,hI)table.insert(hH,"---------------------------------------")if VertTakeOff then table.insert(hH,"Hit Alt-6 before exiting Atmosphere during VTO to hold in level flight")end;if an~=-1 then if antigrav then if bO then table.insert(hH,"Alt-6: AGG is on, will takeoff to AGG Height")else table.insert(hH,"Turn on AGG to takeoff to AGG Height")end end;if VertTakeOffEngine then table.insert(hH,"Alt-6: Begins Vertical Takeoff.")else table.insert(hH,"Alt-4/Alt-6: Autotakeoff if below hoverheight")end else table.insert(hH,"G: Begin BrakeLanding or Land")end else bZ(hH,hJ)end;if AltitudeHold then table.insert(hH,"Alt-Spacebar/Alt-C will raise/lower target height")end;table.insert(hH,"---------------------------------------")bZ(hH,hK)for i=1,#hH do ca=ca+12;fw[#fw+1]=c8(c9,ca,hH[i],"pdim txttick txtstart")end end;local hL={}function hL.HUDPrologue(fw)bX,fh,_,_=fi(bK)if not bX then C=PvPR;E=PvPG;D=PvPB else C=SafeR;E=SafeG;D=SafeB end;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]local hM=az;local hN=aA;local hO=az;local hP=aA;if fs()and not brightHud then hM=[[rgb(]]..d(C*0.4+0.5)..","..d(E*0.4+0.5)..","..d(D*0.3+0.5)..[[)]]hN=[[rgb(]]..d(C*0.3+0.5)..","..d(E*0.3+0.5)..","..d(D*0.2+0.5)..[[)]]end;fw[#fw+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],hM,hM,hO,hO,hN,hN,hP,hP,aJ,aK)return fw end;function hL.DrawVerticalSpeed(fw,dA)fX(fw,dA)end;function hL.UpdateHud(fw)local dA=as;local eV=core.getVelocity()local eS=vec3(eV):len()local gL=bR;local hQ=bS;local g4=hQ;local gj=bR;local h2=d(unit.getThrottle())local h7=eS*3.6;local h3=unit.getAxisCommandValue(0)local hR=fq(1770)local hS=fr(310)if AtmoSpeedAssist and bQ then h3=F;h2=F*100 end;local fu=ft()local g5="ROLL"local cu=unit.getClosestPlanetInfluence()>0;if h2==nil then h2=0 end;if not cu then if eS>5 then gL=gK(eV)hQ=gM(eV)else gL=0;hQ=0 end;g5="YAW"end;if fh>50000 and not aq then local hT;if fh>200000 then hT=x(fh/200000,2).." su"else hT=x(fh/1000,1).." km"end;fw[#fw+1]=c8(hR,hS,"PvP Boundary: "..hT,"pbright txtbig txtmid")end;fw[#fw+1]=ai;fw[#fw+1]=aE;fw[#fw+1]=ah;if b0%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then fv(fw,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)fv(fw,a_,fuelX+120,"Space fuel t","SPACE",aP,aW,aX)fv(fw,a_,fuelX+240,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b0=0 end;b0=b0+1;fX(fw,dA)if l()==0 or RemoteHud then if not fs()or brightHud then if cu then g3(fw,centerX,centerY,g4,g5,cu)gi(fw,gj,g4,centerX,centerY,cu,d(gM(eV)),eS)else g3(fw,centerX,centerY,hQ,g5,cu)gi(fw,gL,hQ,centerX,centerY,cu,d(hQ),eS)end;gp(fw,dA,cu)gN(fw,eV,eS,centerX,centerY)end end;h1(fw,fu,h2,h3)h6(fw,h7)ha(fw)ho(fw)if showHelp then hG(fw)end;return fw end;function hL.HUDEpilogue(fw)fw[#fw+1]="</svg>"return fw end;function hL.ExtraData(fw)local hU=fq(1240)local hV=fr(55)local hW=hV+10;local hX;local hY=0;local fu=ft()if VertTakeOffEngine then fu=fu.."-VERTICAL"end;if TurnBurn then fu="TB-"..fu end;local hZ=vec3(core.getWorldAcceleration()):len()/9.80665;hX=core.g()fw[#fw+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then hU=fq(1120)hV=fr(55)hW=hV+10 elseif aq then local h_=fq(770)fw[#fw+1]=c8(h_,hV,"ATMOSPHERE","pdim txt txtend")fw[#fw+1]=c8(h_,hW,e("%.2f",ar),"pdim txt txtend","")end;fw[#fw+1]=c8(hU,hV,"GRAVITY","pdim txt txtend")fw[#fw+1]=c8(hU,hW,e("%.2f",hX/9.80665),"pdim txt txtend")fw[#fw+1]=c8(hU,hV+20,"ACCEL","pdim txt txtend")fw[#fw+1]=c8(hU,hW+20,e("%.2f",hZ),"pdim txt txtend")fw[#fw+1]=c8(fq(960),fr(180),fu,"txtbig txtmid")end;function hL.DrawOdometer(fw,aa,TotalDistanceTravelled,ab)local hX;local i0=0;local i1=0;local hY=0;if aq then hY=LastMaxBrakeInAtmo else hY=LastMaxBrake end;maxThrust=a:maxForceForward()hX=core.g()if hX>0.1 then i1=av*hX;i0=maxThrust/hX end;fw[#fw+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],fq(660),fq(700),fr(35),fq(960),fr(55),fq(1240),fr(35),fq(1280))if l()==0 or RemoteHud then fw[#fw+1]=c8(fq(700),fr(20),e("Trip: %.2f km",aa),"txtstart")fw[#fw+1]=c8(fq(700),fr(30),e("Lifetime: %.2f kSU",TotalDistanceTravelled/200000),"txtstart")fw[#fw+1]=c8(fq(830),fr(20),"Trip Time: "..cP(ab),"txtstart")fw[#fw+1]=c8(fq(830),fr(30),"Total Time: "..cP(TotalFlightTime),"txtstart")fw[#fw+1]=c8(fq(970),fr(20),e("Mass: %.2f Tons",av/1000),"txtstart")fw[#fw+1]=c8(fq(1240),fr(10),e("Max Brake: %.2f kN",hY/1000),"txtend")fw[#fw+1]=c8(fq(1240),fr(30),e("Max Thrust: %.2f kN",maxThrust/1000),"txtend")if hX>0.1 then fw[#fw+1]=c8(fq(970),fr(30),e("Max Mass: %.2f Tons",i0/1000),"txtstart")fw[#fw+1]=c8(fq(1240),fr(20),e("Req Thrust: %.2f kN",i1/1000),"txtend")else fw[#fw+1]=c8(fq(970),fr(30),"Max Mass: n/a","txtstart")fw[#fw+1]=c8(fq(1240),fr(20),"Req Thrust: n/a","txtend")end end;fw[#fw+1]="</g>"return fw end;function hL.DrawWarnings(fw)return ha(fw)end;function hL.DisplayOrbitScreen(fw)return ho(fw)end;function hL.DisplayMessage(fw,hj)if hj~="empty"then local ca=310;for i2 in string.gmatch(hj,"([^\n]+)")do ca=ca+35;fw[#fw+1]=c8("50%",ca,i2,"msg")end end;if af~=0 then unit.setTimer("msgTick",af)af=0 end end;function hL.DrawDeadZone(fw)fw[#fw+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function hL.UpdateRadar()if radar_1 then local i3=radar_1.getEntries()local i4=radar_1.getData()local i5=fq(1770)local i6=fr(330)if#i3>0 then local i7=i4:find('identifiedConstructs":%[%]')if i7==nil and perisPanelID==nil then aj=1;hF()end;if i7~=nil and perisPanelID~=nil then hF()end;if radarPanelID==nil then hF()end;ah=c8(i5,i6,"Radar: "..#i3 .." contacts","pbright txtbig txtmid")local i8={}for cY,cZ in pairs(i3)do if radar_1.hasMatchingTransponder(cZ)==1 then table.insert(i8,cZ)end end;if#i8>0 then local ca=fr(15)local c9=fq(1370)ah=ah..c8(c9,ca,"Friendlies In Range","pbright txtbig txtmid")for cY,cZ in pairs(i8)do ca=ca+20;ah=ah..c8(c9,ca,radar_1.getConstructName(cZ),"pdim txtmid")end end else local i9;i9=i4:find('worksInEnvironment":false')if i9 then ah=c8(i5,i6,"Radar: Jammed","pbright txtbig txtmid")else ah=c8(i5,i6,"Radar: No Contacts","pbright txtbig txtmid")end;if radarPanelID~=nil then aj=0;hF()end end end end;function hL.DrawSettings(fw)if#bU>0 then local c9=fq(640)local ca=fr(200)fw[#fw+1]=[[<g class="pbright txtvspd txtstart">]]for cY,cZ in pairs(bU)do fw[#fw+1]=c8(c9,ca,cZ..": ".._G[cZ])ca=ca+20;if cY%12==0 then c9=c9+fq(350)ca=fr(200)end end;fw[#fw+1]=c8(fq(640),fr(200)+260,"To Change: In Lua Chat, enter /G VariableName Value")fw[#fw+1]="</g>"end;return fw end;return hL end;local function ia()local function ib()local function ic(id,ie)return id.name<ie.name end;bW={}for cY,cZ in pairs(b1[0])do bW[#bW+1]={name=cZ.name,index=cY}end;table.sort(bW,ic)end;local c_={}function c_.UpdateAtlasLocationsList()ib()end;function c_.UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a9=nil;CustomTarget=nil;return true end;local ig=bW[AutopilotTargetIndex].index;local ih=b1[0][ig]if ih.center then AutopilotTargetName=ih.name;a9=b6[0][ig]if CustomTarget~=nil then if ar==0 then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end;if t(widgetTargetOrbitText,widgetTargetOrbit)~=1 then u(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=ih;for _,cZ in pairs(b6[0])do if cZ.name==CustomTarget.planetname then a9=cZ;AutopilotTargetName=CustomTarget.name;break end end;if t(widgetMaxMassText,widgetMaxMass)~=1 then u(widgetMaxMassText,widgetMaxMass)end;if t(widgetTravelTimeText,widgetTravelTime)~=1 then u(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a9.center)else AutopilotTargetCoords=CustomTarget.position end;if a9.planetname~="Space"then if a9.hasAtmosphere then AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=d(a9.radius*(TargetOrbitRadius-1)+a9.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function c_.adjustAutopilotTargetIndex(g0)if not Autopilot and not VectorToTarget and not al and not IntoOrbit then if g0==nil then AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#bW then AutopilotTargetIndex=0 end else AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#bW end end;if AutopilotTargetIndex==0 then bb.UpdateAutopilotTarget()else local ig=bW[AutopilotTargetIndex].index;local ih=b1[0][ig]if ih.name=="Space"or iphCondition=="Custom Only"and ih.center or iphCondition=="No Moons"and string.find(ih.name,"Moon")~=nil then if g0==nil then bb.adjustAutopilotTargetIndex()else bb.adjustAutopilotTargetIndex(1)end else bb.UpdateAutopilotTarget()end end else Z="Disengage autopilot before changing Interplanetary Helper"end end;function c_.findAtlasIndex(ii)for cY,cZ in pairs(ii)do if cZ.name and cZ.name==CustomTarget.name then return cY end end;return-1 end;for cY,cZ in pairs(SavedLocations)do table.insert(b1[0],cZ)end;ib()c_.UpdateAutopilotTarget()return c_ end;local function ij()local ik={}local il={vec3(bG),-vec3(bG),vec3(bD),-vec3(bD),vec3(bF),-vec3(bF)}local function im(eS)local io=AutopilotEndSpeed;if not Autopilot then io=0 end;if not aq then return b7.computeDistanceAndTime(eS,io,av,0,0,LastMaxBrake-AutopilotPlanetGravity*av)else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(eS,io,av,0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*av)else return 0,0 end end end;local function ip(eS)local io=AutopilotEndSpeed;if not Autopilot then io=0 end;return b7.computeDistanceAndTime(eS,io,av,a:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*av)end;function ik.GetAutopilotBrakeDistanceAndTime(eS)return im(eS)end;function ik.GetAutopilotTBBrakeDistanceAndTime(eS)return ip(eS)end;local function iq(ir,is,it)is=is:project_on_plane(ir)it=it:project_on_plane(ir)return m(is:cross(it):dot(ir),is:dot(it))end;local function iu()local function iv()local iw=-1;local ix=-1;if vBooster then iw=vBooster.distance()end;if hover then ix=hover.distance()end;if iw~=-1 and ix~=-1 then if iw<ix then return iw else return ix end elseif iw~=-1 then return iw elseif ix~=-1 then return ix else return-1 end end;local iy=iv()local iz=-1;if telemeter_1 then iz=telemeter_1.getDistance()end;if iy~=-1 and iz~=-1 then if iy<iz then return iy else return iz end elseif iy~=-1 then return iy else return iz end end;local function iA(planet,ed,iB)local function iC(iD,dt)local ej=vec3(dt)if iD.bodyId==0 then return setmetatable({latitude=ej.x,longitude=ej.y,altitude=ej.z,bodyId=0,systemId=iD.planetarySystemId},MapPosition)end;local ek=ej-iD.center;local ag=ek:len()local dA=ag-iD.radius;local dy=0;local dz=0;if not ci(ag,0)then local el=m(ek.y,ek.x)dz=el>=0 and el or 2*math.pi+el;dy=math.pi/2-math.acos(ek.z/ag)end;return setmetatable({latitude=math.deg(dy),longitude=math.deg(dz),altitude=dA,bodyId=iD.bodyId,systemId=iD.planetarySystemId},MapPosition)end;local iE=iC(planet,ed)iE="::pos{"..iE.systemId..","..iE.bodyId..","..iE.latitude..","..iE.longitude..","..iE.altitude.."}"if bM==0 and not iB then bL=iE end;if iB then return iE else system.setWaypoint(iE)return true end end;function ik.showWayPoint(planet,ed,iB)return iA(planet,ed,iB)end;function ik.APTick()aq=j()>0;ar=j()as=core.getAltitude()an=iu()bC=p()bi=bC;if antigrav then bO=antigrav.getState()==1 end;local iF=1;local iG=1;local iH=bC-bi;local iI=-math.deg(iq(bD,bG,bE))local iJ=math.deg(iq(bF,bG,bE))local g0=bI*-1;bh=aq and iI<-YawStallAngle or iI>YawStallAngle or iJ<-PitchStallAngle or iJ>PitchStallAngle;local iK=system.getMouseDeltaX()local iL=system.getMouseDeltaY()if InvertMouse and not Y then iL=-iL end;S=0;W=0;R=0;sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bG)if as==0 then as=(bK-planet.center):len()-planet.radius end;local hX=planet:getGravity(core.getConstructWorldPos()):len()*av;bj=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if w()==0 then if l()==1 and Y then if not bd then ad=ad+iK;ae=ae+iL end else ad=0;ae=0 end else ad=ad+iK;ae=ae+iL;ag=math.sqrt(ad*ad+ae*ae)if not Y and l()==0 then if userControlScheme=="virtual joystick"then if ad>0 and ad>DeadZone then S=S-(ad-DeadZone)*MouseXSensitivity elseif ad<0 and ad<DeadZone*-1 then S=S-(ad+DeadZone)*MouseXSensitivity else S=0 end;if ae>0 and ae>DeadZone then R=R-(ae-DeadZone)*MouseYSensitivity elseif ae<0 and ae<DeadZone*-1 then R=R-(ae+DeadZone)*MouseYSensitivity else R=0 end else ad=0;ae=0;if userControlScheme=="mouse"then R=(-utils.smoothstep(iL,-100,100)+0.5)*2*iF;S=(-utils.smoothstep(iK,-100,100)+0.5)*2*iG end end end end;local iM=bH>8334;if bH>SpaceSpeedLimit/3.6 and not aq and not Autopilot and not iM then Z="Space Speed Engine Shutoff reached"ce(0)end;if not iM and LastIsWarping then if not BrakeIsOn then cA()end;if Autopilot then cs()end end;LastIsWarping=iM;if aq and ar>0.09 then if bH>bm/3.6 and not AtmoSpeedAssist and not ay then BrakeIsOn=true;ay=true elseif not AtmoSpeedAssist and ay then if bH<bm/3.6 then BrakeIsOn=false;ay=false end end end;if BrakeIsOn then V=1 else V=0 end;if ProgradeIsOn then if ak then BrakeIsOn=false;local iN=false;if CustomTarget~=nil then iN=cB(CustomTarget.position-bK,0.1)else iN=cB(vec3(bG),0.01)end;bf=true;if iN then ch(d(bm))if(c(bS)<2 or c(bR)>85)and bH>=bm/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cN()end elseif aq and AtmoSpeedAssist then ce(1)end elseif bH>N then cB(vec3(bG),0.01)end end;if RetrogradeIsOn then if aq then RetrogradeIsOn=false elseif bH>N then cB(-vec3(bG))end end;if not ProgradeIsOn and ak and not IntoOrbit then if ar==0 then O=true;cN()ak=false;am=true else ak=false;cs()end end;if bY and not bX and(not Autopilot or AutopilotCruising and not AutopilotBraking)then if cB(bY,0.1)then bY=il[math.random(6)]end end;if am and CustomTarget~=nil and(as<HoldAltitude+200 and as>HoldAltitude-200)and bH*3.6>bm-100 and c(bJ)<20 and ar>=0.1 and(CustomTarget.position-bK):len()>2000+as then cs()am=false end;if VertTakeOff then bf=true;local iO=HoldAltitude;if bJ<-30 then Z="Unable to achieve lift. Safety Landing."ac=0;bf=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif not ExternalAGG and bO or HoldAltitude<planet.spaceEngineMinAltitude then if bO then iO=antigrav.getBaseAltitude()end;if as<iO-100 then bn=0;ac=15;BrakeIsOn=false elseif bJ>0 then BrakeIsOn=true;ac=0 elseif bJ<-30 then BrakeIsOn=true;ac=15 elseif as>=iO then if bO then if Autopilot or VectorToTarget then co()else BrakeIsOn=true;VertTakeOff=false end;Z="Takeoff complete. Singularity engaged"else BrakeIsOn=false;Z="VTO complete. Engaging Horizontal Flight"co()end;ac=0 end else if ar>0.08 then bn=0;BrakeIsOn=false;ac=20 elseif ar<0.08 and ar>0 then BrakeIsOn=false;if bz then bn=0;ac=20 else ac=0;bn=36;ch(3500)end else bf=autoRollPreference;IntoOrbit=true;bx=false;CancelIntoOrbit=false;br=false;bp=nil;bq=nil;if bw==nil then bw=planet end;bv=iO;bu=true;VertTakeOff=false end end;if bn~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iP=q(bn-bR,-PitchStallAngle*0.80,PitchStallAngle*0.80)vTpitchPID:inject(iP)local iQ=q(vTpitchPID:get(),-1,1)R=iQ end end;if IntoOrbit then local cK;local iR=false;local iS=cl(bv)if bw==nil then bw=planet;if VectorToTarget then bw=a9 end end;if not bu then bv=d(bw.radius+bw.surfaceMaxAltitude+LowOrbitHeight)if bw.hasAtmosphere then bv=d(bw.radius+bw.noAtmosphericDensityAltitude+LowOrbitHeight)end;bu=true end;if bt.VectorToTarget then cK=CustomTarget.position-bK end;local iT,iU=b9(bw):escapeAndOrbitalSpeed((bK-bw.center):len()-bw.radius)local iV=bS;if not br then local iW=false;local iX=false;ce(0)bq=0;bo="Aligning to orbital path - OrbitHeight: "..iS;if bt.VectorToTarget then cB(cK:normalize():project_on_plane(bI))iR=bE:dot(cK:project_on_plane(bD):normalize())>0.95 else cB(bG)iR=iI<0.5;if bH<150 then iR=true end end;R=0;bp=0;if bR<=bp+1 and bR>=bp-1 then iW=true else iW=false end;if iV<=bq+1 and iV>=bq-1 then iX=true else iX=false end;if iW and iX and iR then bp=nil;bq=nil;br=true end else if bt.VectorToTarget then cB(cK:normalize():project_on_plane(bI))elseif bH>150 then cB(bG)end;R=0;if bt.VectorToTarget then local a5,_=b7.computeDistanceAndTime(bH,bm/3.6,av,0,0,LastMaxBrake)if bx and cK:len()>15000+a5+as then bo="Orbiting to Target"if as-100<=bw.noAtmosphericDensityAltitude or travelTime>orbit.timeToPeriapsis and orbit.periapsis.altitude<bw.noAtmosphericDensityAltitude then bx=false end elseif bx or cK:len()<15000+a5+as then Z="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;O=true;am=true;bt.VectorToTarget,bt.AutopilotAlign=false,false;cp()cN()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and as>bv*0.9 and as<bv*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bv*0.99 and orbit.apoapsis.altitude>=bv*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bx then if bx then BrakeIsOn=false;ce(0)bp=0;if not bt.VectorToTarget then Z="Orbit complete"cp()end else bB=bB+1;if bB>=2 then bx=true end end else bo="Adjusting Orbit - OrbitHeight: "..iS;bs=true;ch(iU*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iY=bJ;local iZ=as-bv;local i_=c(iZ)if bJ<10 and c(bR)<10 and i_<100 then iY=bJ*2 end;if iY<10 and c(bR)<10 and i_<100 then iY=iY*2 end;if iY<5 and c(bR)<5 and i_<100 then iY=iY*4 end;VSpdPID:inject(iY)bp=q(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(iZ)bp=q(bp-q(OrbitAltPID:get(),-15,15),-90,90)end end else local j0=2.75;local j1=c(o(iT*j0))local j2=j1%50;if j2>0 then j1=j1-j2+50 end;BrakeIsOn=false;if as<bv*0.8 then bo="Escaping planet gravity - OrbitHeight: "..iS;bp=utils.map(bJ,200,0,-15,80)elseif as>=bv*0.8 and as<bv*1.15 then bo="Approaching orbital corridor - OrbitHeight: "..iS;j1=j1*0.75;bp=utils.map(bJ,100,-100,-15,65)elseif as>=bv*1.15 and as<bv*1.5 then bo="Approaching orbital corridor - OrbitHeight: "..iS;j1=j1*0.75;if bJ<0 or bs then bp=utils.map(as,bv*1.5,bv*1.01,-30,0)else bp=utils.map(as,bv*0.99,bv*1.5,0,30)end elseif as>bv*1.5 then bo="Reentering orbital corridor - OrbitHeight: "..iS;bp=-65;local j3=utils.map(bJ,-150,-400,1,0.55)j1=j1*j3 end;ch(d(j1))end end;if bp~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(1*0.01,0,5*0.1)end;local j4=bp-bR;OrbitPitchPID:inject(j4)local j5=q(OrbitPitchPID:get(),-0.5,0.5)R=j5 end end;if Autopilot and ar==0 and not ak then local function j6(j7,orbit)system.print(j7)BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"ce(0)M=false;Z=j7;if orbit then if AutopilotTargetOrbit~=nil then bv=AutopilotTargetOrbit else bv=as end;bu=true;cp()end end;local j8,j9=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local ja=(CustomTarget.position-a9.center):normalize()local jb=ja:project_on_plane((a9.center-bK):normalize()):normalize()local jc=a9.center+jb*(a9.radius+AutopilotTargetOrbit)local jd=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))if(bK-jc):len()<(bK-jd):len()then j8=jc else j8=CustomTarget.position+(CustomTarget.position-a9.center):normalize()*(AutopilotTargetOrbit-a9:getAltitude(CustomTarget.position))AutopilotEndSpeed=0 end;AutopilotTargetCoords=j8;bc.showWayPoint(a9,AutopilotTargetCoords)j9=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;j9=true;TargetSet=true;AutopilotRealigned=true;j8=CustomTarget.position+(bK-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local ja=(bK+bG*100000-a9.center):normalize()local jb=ja:project_on_plane((a9.center-bK):normalize()):normalize()if jb:len()<1 then ja=(bK+bE*100000-a9.center):normalize()jb=ja:project_on_plane((a9.center-bK):normalize()):normalize()end;j8=a9.center+jb*(a9.radius+AutopilotTargetOrbit)AutopilotTargetCoords=j8;TargetSet=true;j9=true;AutopilotRealigned=true;bc.showWayPoint(a9,AutopilotTargetCoords)end end;AutopilotDistance=(vec3(j8)-bK):len()local hk,eb,ec=b6:getPlanetarySystem(0):castIntersections(bK,bG:normalize(),function(d_)if d_.noAtmosphericDensityAltitude>0 then return d_.radius+d_.noAtmosphericDensityAltitude else return d_.radius+d_.surfaceMaxAltitude*1.5 end end)local hl=eb;if ec~=nil and eb~=nil then hl=math.min(ec,eb)end;if hl~=nil and hl<AutopilotDistance and hk.name==a9.name then AutopilotDistance=hl end;local iN=true;local je=(a9.center-(bK+vec3(bG):normalize()*AutopilotDistance)):len()-a9.radius;local hj=cl(je)t(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..hj..'"}')local a5,a6;if not TurnBurn then a5,a6=im(bH)else a5,a6=ip(bH)end;if bH>300 and AutopilotAccelerating then local cK=vec3(j8)-bK;local jf=q(math.deg(iq(bD,bG:normalize(),cK:normalize()))*bH/500,-90,90)local jg=q(math.deg(iq(bF,bG:normalize(),cK:normalize()))*bH/500,-90,90)if c(jf)<20 and c(jg)<20 then jf=jf*2;jg=jg*2 end;if c(jf)<2 and c(jg)<2 then jf=jf*2;jg=jg*2 end;local iI=-math.deg(iq(bD,bE,bG:normalize()))local iJ=-math.deg(iq(bF,bE,bG:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jg-iJ)local jh=q(apPitchPID:get(),-1,1)R=R+jh;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(jf-iI)local ji=q(apYawPID:get(),-1,1)S=S+ji;j9=true;if c(jf)>2 or c(jg)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if je<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a9):escapeAndOrbitalSpeed(je)end end;if not AutopilotCruising and not AutopilotBraking and not j9 then iN=cB((j8-bK):normalize())elseif TurnBurn and(AutopilotBraking or AutopilotCruising)then iN=cB(-vec3(bG):normalize())end;if AutopilotAccelerating then if not M then BrakeIsOn=false;ce(AutopilotInterplanetaryThrottle)F=x(AutopilotInterplanetaryThrottle,2)M=true end;local jj=unit.getThrottle()if AtmoSpeedAssist then jj=F end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or jj==0 and M then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;ce(0)end;if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;ce(0)M=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;V=1 end;if TurnBurn then ce(1,true)end;local _,iU=b9(a9):escapeAndOrbitalSpeed((bK-planet.center):len()-planet.radius)local cK;if CustomTarget~=nil then cK=CustomTarget.position-bK end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bH<50 then j6("Autopilot complete, arrived at space location")BrakeIsOn=true;V=1 elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bH<=iU and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then j6("Autopilot complete, commencing reentry")BrakeIsOn=true;AutopilotTargetCoords=CustomTarget.position;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,AutopilotTargetCoords)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 or AutopilotStatus=="Circularizing"then AutopilotStatus="Circularizing"if bH<=iU then if CustomTarget~=nil then if bG:normalize():dot(cK:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=true end else j6("Autopilot complete, proceeding with reentry")AutopilotTargetCoords=CustomTarget.position;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,CustomTarget.position)WaypointSet=false end else j6("Autopilot completed, setting orbit",true)V=0 end end elseif AutopilotStatus=="Circularizing"then j6("Autopilot complete, fixing Orbit",true)end elseif AutopilotCruising then if AutopilotDistance<=a5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local jj=unit.getThrottle()if AtmoSpeedAssist then jj=F end;if jj>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iN then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ak then AutopilotTargetCoords=vec3(a9.center)+(AutopilotTargetOrbit+a9.radius)*bF;AutopilotShipUp=bD;AutopilotShipRight=bF end;AutopilotRealigned=true elseif iN then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not M then ce(AutopilotInterplanetaryThrottle,true)F=x(AutopilotInterplanetaryThrottle,2)M=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and ar>0)then Z="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"V=0;ce(0)M=false;ProgradeIsOn=true;ak=true;bc.showWayPoint(a9,CustomTarget.position)end;if X then bf=true;local jg=0;local eW=bK+vec3(unit.getMasterPlayerRelativePosition())local jk=eW-bK;local jl=vec3(jk):project_on(bE):len()local jm=vec3(jk):project_on(bF):len()local ag=math.sqrt(jl*jl+jm*jm)cB(jk:normalize())local jn=40;local jo=ag<jn;local jp=100;local jq=q((ag-jn)/2,10,jp)R=0;local iN=c(S)<0.1;if iN and bH<jq and not jo then BrakeIsOn=false;jg=-20 else BrakeIsOn=true;jg=0 end;local jr=0;if c(jg-bR)>jr then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jg-bR)local jh=pitchPID:get()R=jh end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cu=unit.getClosestPlanetInfluence()>0;local js=HoldAltitude-as;local jt=500+bH;local ju=1;if AutoTakeoff then ju=q(bH/100,0.1,1)end;local jg=(utils.smoothstep(js,-jt,jt)-0.5)*2*MaxPitch*ju;if not Reentry and not ak and not VectorToTarget and bE:dot(bG:normalize())<0.99 then jg=(utils.smoothstep(js,-jt*q(20-19*ar*10,1,20),jt*q(20-19*ar*10,1,20))-0.5)*2*MaxPitch*q(2-ar*10,1,2)*ju end;if not AltitudeHold then jg=0 end;if LockPitch~=nil then if cu and not IntoOrbit then jg=LockPitch else LockPitch=nil end end;bf=true;local jv=R;if Reentry then local jw=d(bm)local jx,jy=b7.computeDistanceAndTime(bH,jw/3.6,av,0,0,LastMaxBrake-planet.gravity*9.8*av)local jz=as-(planet.noAtmosphericDensityAltitude+5000)if not bQ and as>planet.noAtmosphericDensityAltitude+5000 and bH<=jw/3.6 and bH>jw/3.6-10 and c(bG:normalize():dot(bE))>0.9 then ce(0)elseif bQ and bH>jw/3.6 and(jx>-1 and jz<=jx or as<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;ch(jw,true)if not O then jg=-80;if ar>0.02 then Z="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jg=0;bf=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and as>planet.noAtmosphericDensityAltitude+5000 then bf=true elseif as<=planet.noAtmosphericDensityAltitude+5000 then ch(jw)if not bQ and r:getTargetSpeed(axisCommandId.longitudinal)==bm then O=false;Reentry=false;bf=true end end end;if bH>N and not al and not VectorToTarget and not BrakeLanding and ForceAlignment then cB(vec3(bG))end;if(VectorToTarget or al)and AutopilotTargetIndex>0 and ar>0.01 then local cK;if CustomTarget~=nil then cK=CustomTarget.position-bK else cK=a9.center-bK end;local jf=math.deg(iq(bI:normalize(),bG,cK))*2;local jA=math.rad(c(bS))if bH>minRollVelocity and ar>0.01 then local jB=q(90-jg*2,-90,90)bj=q(jf*2,-jB,jB)local jC=jf;jf=q(q(jf,-YawStallAngle*0.80,YawStallAngle*0.80)*math.cos(jA)+4*(bR-jg)*math.sin(math.rad(bS)),-YawStallAngle*0.80,YawStallAngle*0.80)jg=q(q(jg*math.cos(jA),-PitchStallAngle*0.80,PitchStallAngle*0.80)+c(q(c(jC)*math.sin(jA),-PitchStallAngle*0.80,PitchStallAngle*0.80)),-PitchStallAngle*0.80,PitchStallAngle*0.80)else bj=0;jf=q(jf,-YawStallAngle*0.80,YawStallAngle*0.80)end;local jD=iI-jf;if not bh and bH>minRollVelocity and ar>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jD)local ji=q(yawPID:get(),-1,1)S=S+ji elseif aq and an>-1 or bH<minRollVelocity then cB(cK)elseif bh and ar>0.01 then if(iI<-YawStallAngle or iI>YawStallAngle)and ar>0.01 then cB(bG)end;if(iJ<-PitchStallAngle or iJ>PitchStallAngle)and ar>0.01 then jg=q(bR-iJ,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end end;if CustomTarget~=nil and not al then local iO=planet:getAltitude(CustomTarget.position)local jz=math.sqrt(cK:len()^2-(as-iO)^2)local jE=LastMaxBrakeInAtmo;if jE then jE=jE*q(bH/100,0.1,1)*ar else jE=LastMaxBrake end;if ar<0.01 then jE=LastMaxBrake end;local jF=bG:len()-c(bJ)local jG=vec3(core.getWorldAirFrictionAcceleration())local jH=math.sqrt(jG:len()-jG:project_on(g0):len())*av;if bH>100 then a5,a6=b7.computeDistanceAndTime(bH,100,av,0,0,jE+jH)local jI,jJ=b7.computeDistanceAndTime(100,0,av,0,0,jE/2)a5=a5+jI else a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jE/2)end;StrongBrakes=true;if not al and not Reentry and jz<=a5+bH*iH/2 and(bG:project_on_plane(bI):normalize():dot(cK:project_on_plane(bI):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"ce(0)if AltitudeHold then cq()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jF<0.1 or jz<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jz)then if not bO then BrakeLanding=true end;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jz end elseif VectorToTarget and ar==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(al or Reentry)then if CustomTarget~=nil and a9.name==planet.name then local cK=CustomTarget.position-bK;local iO=planet:getAltitude(CustomTarget.position)local jz=math.sqrt(cK:len()^2-(as-iO)^2)local jE=LastMaxBrakeInAtmo;if jE then a5,a6=b7.computeDistanceAndTime(bH,0,av,0,0,jE/2)StrongBrakes=true;if jz<=a5+bH*iH/2 and bG:project_on_plane(bI):normalize():dot(cK:project_on_plane(bI):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;O=true;ak=false;am=true;Autopilot=false;cN()end end;LastDistanceToTarget=jz end end end;if ar==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(al or IntoOrbit or Reentry)then if not bx and not IntoOrbit then bv=HoldAltitude;bu=true;if VectorToTarget then bt.VectorToTarget=true end;cp()VectorToTarget=false;br=true end end;if bh and ar>0.01 and an==-1 and bH>minRollVelocity and VectorStatus~="Finalizing Approach"then cB(bG)jg=q(bR-iJ,bR-PitchStallAngle*0.80,bR+PitchStallAngle*0.80)end;R=jv;local iz=-1;if BrakeLanding then jg=0;local jK=false;local jL=30;if b8~=nil and b8>0 then local jH=0;local jM=q(ar,0.4,2)local jE=LastMaxBrakeInAtmo*q(bH/100,0.1,1)*jM;local jN=b8*jM+jE+jH-hX;local jO=jE/2+jH-hX;local jP=bH-math.sqrt(c(jO/2)*20/(0.5*av))*utils.sign(jO)if jP<0 then jP=0 end;local jQ;if bH>100 then local jR,_=b7.computeDistanceAndTime(bH,100,av,0,0,jE)local jS,_=b7.computeDistanceAndTime(100,0,av,0,0,math.sqrt(jE))jQ=jR+jS else jQ=b7.computeDistanceAndTime(bH,0,av,0,0,math.sqrt(jE))end;if jQ<20 then BrakeIsOn=false else local jT=0;if jP>100 then local jU,_=b7.computeDistanceAndTime(jP,100,av,0,0,jN)local jV,_=b7.computeDistanceAndTime(100,0,av,0,0,b8*jM+math.sqrt(jE)+jH-hX)jT=jU+jV else jT,_=b7.computeDistanceAndTime(jP,0,av,0,0,b8*jM+math.sqrt(jE)+jH-hX)end;jT=(jT+15+bH*iH)*1.1;local jW=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jW then local iO=planet:getAltitude(CustomTarget.position)local jX=as-iO-100;local cK=CustomTarget.position-bK;local jY=math.sqrt(cK:len()^2-(as-iO)^2)if jY>100 then jW=false elseif jX<=jT or jT==-1 then BrakeIsOn=true;jK=true else BrakeIsOn=false;jK=true end end;if not jW and CalculateBrakeLandingSpeed then if jT>=jL then BrakeIsOn=true else BrakeIsOn=false end;jK=true end end end;if not bQ then ce(0)end;r:setTargetGroundAltitude(500)r:activateGroundEngineAltitudeStabilization(500)iz=an;if iz>-1 then bf=autoRollPreference;if bH<1 or bG:normalize():dot(bI)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)ac=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bG:normalize():dot(-g0)<0.999 then BrakeIsOn=true elseif bJ<-brakeLandingRate and not jK then BrakeIsOn=true elseif not jK then BrakeIsOn=false end end;if AutoTakeoff or al then local hk,ec,eb;if AutopilotTargetCoords~=nil then hk,ec,eb=b6:getPlanetarySystem(0):castIntersections(bK,(AutopilotTargetCoords-bK):normalize(),function(d_)return d_.radius+d_.noAtmosphericDensityAltitude end)end;if bO then if as>=HoldAltitude-50 then AutoTakeoff=false;if not Autopilot and not VectorToTarget then BrakeIsOn=true;ce(0)end else HoldAltitude=antigrav.getBaseAltitude()end elseif c(jg)<15 and as/HoldAltitude>0.75 then AutoTakeoff=false;if not al then if bQ and not AtmoSpeedAssist then a.control.cancelCurrentControlMasterMode()end elseif al and bH<N then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;ce(0)elseif al then ce(0)BrakeIsOn=true end elseif al and ar==0 and a9~=nil and(hk==nil or hk.name==a9.name)then Autopilot=true;al=false;AltitudeHold=false;AutoTakeoff=false;if not bQ then ce(0)end;AutopilotAccelerating=true end end;local jZ=an>-1;local j_=bR;if(VectorToTarget or al)and not jZ and bH>minRollVelocity and ar>0.01 then local jA=math.rad(c(bS))j_=bR*c(math.cos(jA))+iJ*math.sin(jA)end;local k0=q(jg-j_,-PitchStallAngle*0.80,PitchStallAngle*0.80)if ar<0.01 and VectorToTarget then k0=q(jg-j_,-85,MaxPitch)elseif ar<0.01 then k0=q(jg-j_,-MaxPitch,MaxPitch)end;if c(bS)<5 or VectorToTarget or BrakeLanding or jZ or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(k0)local jh=pitchPID:get()R=R+jh end end;if antigrav~=nil and(antigrav and not ExternalAGG and as<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end;an=iu()return ik end;function script.onStart()local function k1()local function k2(k3)local k4=dbHud_1.hasKey;for cY,cZ in pairs(k3)do if k4(cZ)then local cH=f(dbHud_1.getStringValue(cZ))if cH~=nil then _G[cZ]=cH;aL=true end end end end;if dbHud_1 then local k4=dbHud_1.hasKey;if not useTheseSettings then k2(c1())coroutine.yield()k2(b)else k2(b)Z="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"af=5;aL=false end;coroutine.yield()if aL then Z="Loaded Saved Variables"K=x(ResolutionX/2,0)L=x(ResolutionY/2,0)aJ=ResolutionX;aK=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bf=autoRollPreference;bm=AtmoSpeedLimit;az=[[rgb(]]..d(C+0.5)..","..d(E+0.5)..","..d(D+0.5)..[[)]]aA=[[rgb(]]..d(C*0.9+0.5)..","..d(E*0.9+0.5)..","..d(D*0.9+0.5)..[[)]]elseif not useTheseSettings then Z="No Saved Variables Found - Exit HUD to save settings"end else Z="No databank found. Attach one to control unit and rerun \nthe autoconfigure to save preferences and locations"end;if LastStartTime+180<bC then LastMaxBrakeInAtmo=0 end;LastStartTime=bC;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then Z="Invalid User Control Scheme selected.\nChange userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"af=7 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=as end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;if safeMass==0 then safeMass=av end end;local function k5()local function k6(k7,k8)if k7>k8 then k8=k7 end;if ContainerOptimization>0 then k8=k8-k8*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then k8=k8-k8*FuelTankOptimization*0.05 end;return k8 end;local k9=core.getElementNameById;local ka=fuelX~=0 and fuelY~=0;for cY in pairs(at)do local type=core.getElementTypeById(at[cY])if n(type,'^.*Atmospheric Engine$')then if n(tostring(core.getElementTagsById(at[cY])),'^.*vertical.*$')then bN=true end end;if n(type,'^.*Space Engine$')then bA=true;if n(tostring(core.getElementTagsById(at[cY])),'^.*vertical.*$')then local kb=core.getElementRotationById(at[cY])if kb[4]<0 then if o(-kb[4],0.1)==0.5 then by=true end else if o(kb[4],0.1)==0.5 then bz=true end end end end;if type=="Landing Gear"then P=true end;if type=="Dynamic Core Unit"then local kc=h(at[cY])if kc>10000 then B=128 elseif kc>1000 then B=64 elseif kc>150 then B=32 end end;aR=aR+h(at[cY])if ka and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local kc=h(at[cY])local kd=k(at[cY])local k7=0;local fT=p()if type=="Atmospheric Fuel Tank"then local k8=400;local ke=35.03;if kc>10000 then k8=51200;ke=5480 elseif kc>1300 then k8=6400;ke=988.67 elseif kc>150 then k8=1600;ke=182.67 end;k7=kd-ke;if fuelTankHandlingAtmo>0 then k8=k8+k8*fuelTankHandlingAtmo*0.2 end;k8=k6(k7,k8)aO[#aO+1]={at[cY],k9(at[cY]),k8,ke,k7,fT}end;if type=="Rocket Fuel Tank"then local k8=320;local ke=173.42;if kc>65000 then k8=40000;ke=25740 elseif kc>6000 then k8=5120;ke=4720 elseif kc>700 then k8=640;ke=886.72 end;k7=kd-ke;if fuelTankHandlingRocket>0 then k8=k8+k8*fuelTankHandlingRocket*0.1 end;k8=k6(k7,k8)aQ[#aQ+1]={at[cY],k9(at[cY]),k8,ke,k7,fT}end;if type=="Space Fuel Tank"then local k8=2400;local ke=182.67;if kc>10000 then k8=76800;ke=5480 elseif kc>1300 then k8=9600;ke=988.67 end;k7=kd-ke;if fuelTankHandlingSpace>0 then k8=k8+k8*fuelTankHandlingSpace*0.2 end;k8=k6(k7,k8)aP[#aP+1]={at[cY],k9(at[cY]),k8,ke,k7,fT}end end end;if not bN then VertTakeOff,VertTakeOffEngine=false,false end end;local function kf()if gyro~=nil then ax=gyro.getState()==1 end;if userControlScheme~="keyboard"then v(1)else v(0)end;if door and(aq or not aq and as<10000)then for _,cZ in pairs(door)do cZ.toggle()end end;if switch then for _,cZ in pairs(switch)do cZ.toggle()end end;if forcefield and(aq or not aq==0 and as<10000)then for _,cZ in pairs(forcefield)do cZ.toggle()end end;if antigrav then bO=antigrav.getState()==1;if bO and not ExternalAGG then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if P then GearExtended=a.control.isAnyLandingGearExtended()==1;if GearExtended then a.control.extendLandingGears()else a.control.retractLandingGears()end end;if an~=-1 or not aq and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;GearExtended=true;if P then a.control.extendLandingGears()end else BrakeIsOn=false end;r:setTargetGroundAltitude(bg)if aq and an~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=aq end;local function kg(kh,ki,kj,kk,c9,ca,kl,km,kn,ko)local kp={enableName=kh,disableName=ki,width=kj,height=kk,x=c9,y=ca,toggleVar=kl,toggleFunction=km,drawCondition=kn,hovered=false}if ko then table.insert(aI,kp)else table.insert(aH,kp)end;return kp end;local function kq(kr)if not bT then showHandlingVariables=false;showHudVariables=false;showPhysicsVariables=false;showHud=true;return elseif kr=="handling"then showHandlingVariables=not showHandlingVariables;showHudVariables=false;showPhysicsVariables=false elseif kr=="hud"then showHudVariables=not showHudVariables;showHandlingVariables=false;showPhysicsVariables=false elseif kr=="physics"then showPhysicsVariables=not showPhysicsVariables;showHandlingVariables=false;showHudVariables=false end;if showPhysicsVariables or showHudVariables or showHandlingVariables then bU=c1(kr)showHud=false else bU={}showHud=true end end;local function ks()bT=not bT;if bT then aG=aI;Z="Hold SHIFT to see Settings"bV=showHud else aG=aH;Z="Hold SHIFT to see Control Buttons"kq()showHud=bV end end;local function kt(cZ)_G[cZ]=not _G[cZ]if _G[cZ]then Z=cZ.." set to true"else Z=cZ.." set to false"end;if cZ=="showHud"then bV=_G[cZ]elseif cZ=="BrakeToggleDefault"then BrakeToggleStatus=BrakeToggleDefault end end;local function ku()local kv=50;local kw=340;local c9=500;local ca=aK/2-400;local kx=0;for cY,cZ in pairs(c1("boolean"))do if type(_G[cZ])=="boolean"then kg(cZ,cZ,kw,kv,c9,ca,function()return _G[cZ]end,function()kt(cZ)end,function()return true end,true)ca=ca+kv+20;if kx==8 then c9=c9+kw+20;ca=aK/2-400;kx=0 else kx=kx+1 end end end;kg("Control View","Control View",kw,kv,10,aK/2-500,function()return true end,ks,function()return true end,true)kg("View Handling Settings",'Hide Handling Settings',kw,kv,10,aK/2-(500-kv),function()return showHandlingVariables end,function()kq("handling")end,function()return true end,true)kg("View Hud Settings",'Hide Hud Settings',kw,kv,10,aK/2-(500-kv*2),function()return showHudVariables end,function()kq("hud")end,function()return true end,true)kg("View Physics Settings",'Hide Physics Settings',kw,kv,10,aK/2-(500-kv*3),function()return showPhysicsVariables end,function()kq("physics")end,function()return true end,true)end;local function ky()local function kz()if dbHud_1 then local position=bK;local fM=planet.name..". "..#SavedLocations;if radar_1 then local dI,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dI~=nil and dI~=""then fM=fM.." "..radar_1.getConstructName(dI)end end;local cy={}cy={position=position,name=fM,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cy;table.insert(b1[0],cy)bb.UpdateAtlasLocationsList()Z="Location saved as "..fM else Z="Databank must be installed to save locations"end end;local function kA()TurnBurn=not TurnBurn end;local function kB(kC)if kC==1 then ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false else RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false end;Autopilot=false;AltitudeHold=false;X=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;local function kD()kB(1)end;local function kE()local cx=-1;cx=bb.findAtlasIndex(b1[0])if cx>-1 then table.remove(b1[0],cx)end;cx=-1;cx=bb.findAtlasIndex(SavedLocations)if cx~=-1 then Z=CustomTarget.name.." saved location cleared"table.remove(SavedLocations,cx)end;bb.adjustAutopilotTargetIndex()bb.UpdateAtlasLocationsList()end;local function kF()local fM=AutopilotTargetName;if fM==nil then local hj=cl((bK-CustomTarget.position):len())fM=CustomTarget.name.." "..hj end;if fM==nil then fM="None"end;return"Engage Autopilot: "..fM end;local function kG()local fM=AutopilotTargetName;if fM==nil then fM=CustomTarget.name end;if fM==nil then fM="None"end;return"Disable Autopilot: "..fM end;local function kH()if safeMass>0 then Z="Safe Mass set to "..x(av,2).." kg"else Z="Intruder Detection reset\nSafe Mass set to "..x(av,2).." kg"af=5;bM=0;if bL then system.setWaypoint(bL)end end;safeMass=av end;local kv=50;local kw=260;local kI=kg("Enable Brake Toggle","Disable Brake Toggle",kw,kv,aJ/2-kw/2,aK/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then Z="Brakes in Toggle Mode"else Z="Brakes in Default Mode"end end)kg("Align Prograde","Disable Prograde",kw,kv,aJ/2-kw/2-50-kI.width,aK/2-kv+380,function()return ProgradeIsOn end,kD)kg("Align Retrograde","Disable Retrograde",kw,kv,aJ/2-kw/2+kI.width+50,aK/2-kv+380,function()return RetrogradeIsOn end,kB,function()return ar==0 end)local kJ=kg(kF,kG,600,60,aJ/2-600/2,aK/2-60/2-400,function()return Autopilot end,cs)kg("Save Position","Save Position",200,kJ.height,kJ.x+kJ.width+30,kJ.y,function()return false end,kz,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)kg("Update Position","Update Position",200,kJ.height,kJ.x+kJ.width+30,kJ.y,function()return false end,cv,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kg("Clear Position","Clear Position",200,kJ.height,kJ.x-200-30,kJ.y,function()return true end,kE,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)kv=60;kw=300;local c9=10;local ca=aK/2-500;kg("Show Help","Hide Help",kw,kv,c9,ca,function()return showHelp end,function()showHelp=not showHelp end)ca=ca+kv+20;kg("View Settings","View Settings",kw,kv,c9,ca,function()return true end,ks)local ca=aK/2-300;kg("Enable Turn and Burn","Disable Turn and Burn",kw,kv,c9,ca,function()return TurnBurn end,kA)kg("Horizontal Takeoff Mode","Vertical Takeoff Mode",kw,kv,c9+kw+20,ca,function()return VertTakeOffEngine end,function()VertTakeOffEngine=not VertTakeOffEngine;if VertTakeOffEngine then Z="Vertical Takeoff Mode"else Z="Horizontal Takeoff Mode"end end,function()return bN end)ca=ca+kv+20;kg("Show Orbit Display","Hide Orbit Display",kw,kv,c9,ca,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then Z="Orbit Display Enabled"else Z="Orbit Display Disabled"end end)kg("Engage Orbiting","Cancel Orbiting",kw,kv,c9+kw+20,ca,function()return IntoOrbit end,cp,function()return ar==0 and unit.getClosestPlanetInfluence()>0 end)ca=ca+kv+20;kg("Glide Re-Entry","Cancel Glide Re-Entry",kw,kv,c9,ca,function()return Reentry end,function()ak=true;kD()end,function()return planet.hasAtmosphere and not aq end)kg("Parachute Re-Entry","Cancel Parachute Re-Entry",kw,kv,c9+kw+20,ca,function()return Reentry end,cN,function()return planet.hasAtmosphere and not aq end)ca=ca+kv+20;kg("Engage Follow Mode","Disable Follow Mode",kw,kv,c9,ca,function()return X end,cr,function()return l()==1 end)kg("Enable Repair Arrows","Disable Repair Arrows",kw,kv,c9+kw+20,ca,function()return aS end,function()aS=not aS;if aS then Z="Repair Arrows Enabled"else Z="Repair Arrows Diabled"end end,function()return l()==1 end)ca=ca+kv+20;if not ExternalAGG then kg("Enable AGG","Disable AGG",kw,kv,c9,ca,function()return bO end,cO,function()return antigrav~=nil end)end;kg("Reset Intruder Alert","Set Safe Mass",kw,kv,c9+kw+20,ca,function()return safeMass>0 end,kH,function()return IntruderAlertSystem end)ca=ca+kv+20;kg(function()return e("Switch IPH Mode - Current: %s",iphCondition)end,function()return e("IPH Mode: %s",iphCondition)end,kw*2,kv,c9,ca,function()return false end,function()if iphCondition=="All"then iphCondition="Custom Only"elseif iphCondition=="Custom Only"then iphCondition="No Moons"else iphCondition="All"end;Z="IPH Mode: "..iphCondition end)ca=ca+kv+20;kg(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,kw*2,kv,c9,ca,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end;Z="New Control Scheme: "..userControlScheme end)end;SetupComplete=false;beginSetup=coroutine.create(function()r:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})k1()coroutine.yield()k5()coroutine.yield()bc=ij()kf()ku()ky()aG=aH;coroutine.yield()b1=c_()b5=d0()b6=b5(c_())b7=ep()b9=eU()ba=fg()bb=ia()bc=ij()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()a.control.switchOffHeadlights()if door and(ar>0 or ar==0 and as<10000)then for _,cZ in pairs(door)do cZ.toggle()end end;if switch then for _,cZ in pairs(switch)do cZ.toggle()end end;if forcefield and(ar>0 or ar==0 and as<10000)then for _,cZ in pairs(forcefield)do cZ.toggle()end end;safeMass=av;cU()if button then button.activate()end;if SetWaypointOnExit then bc.showWayPoint(planet,bK)end end;function script.onTick(kK)if kK=="tenthSecond"then local function kL()local kM=system.createData;local kN=system.createWidget;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=kN(panelInterplanetary,"value")interplanetaryHeaderText=kM('{"label": "Target Planet", "value": "N/A", "unit":""}')u(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=kN(panelInterplanetary,"value")widgetDistanceText=kM('{"label": "distance", "value": "N/A", "unit":""}')u(widgetDistanceText,widgetDistance)widgetTravelTime=kN(panelInterplanetary,"value")widgetTravelTimeText=kM('{"label": "Travel Time", "value": "N/A", "unit":""}')u(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=kN(panelInterplanetary,"value")widgetMaxMassText=kM('{"label": "Maximum Mass", "value": "N/A", "unit":""}')u(widgetMaxMassText,widgetMaxMass)widgetTargetOrbit=kN(panelInterplanetary,"value")widgetTargetOrbitText=kM('{"label": "Target Altitude", "value": "N/A", "unit":""}')u(widgetTargetOrbitText,widgetTargetOrbit)widgetCurBrakeDistance=kN(panelInterplanetary,"value")widgetCurBrakeDistanceText=kM('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')widgetCurBrakeTime=kN(panelInterplanetary,"value")widgetCurBrakeTimeText=kM('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')widgetMaxBrakeDistance=kN(panelInterplanetary,"value")widgetMaxBrakeDistanceText=kM('{"label": "Max Brake distance", "value": "N/A", "unit":""}')widgetMaxBrakeTime=kN(panelInterplanetary,"value")widgetMaxBrakeTimeText=kM('{"label": "Max Brake Time", "value": "N/A", "unit":""}')widgetTrajectoryAltitude=kN(panelInterplanetary,"value")widgetTrajectoryAltitudeText=kM('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not aq then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)u(widgetCurBrakeTimeText,widgetCurBrakeTime)u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;local function kO()s(panelInterplanetary)panelInterplanetary=nil end;local function kP()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a9.center-bK):len()else AutopilotDistance=(CustomTarget.position-bK):len()end end;local eS=bH;local jj=unit.getThrottle()/100;if AtmoSpeedAssist then jj=F end;local kQ,kR=b7.computeDistanceAndTime(bH,MaxGameVelocity,av,a:maxForceForward()*jj,warmup,0)local a5,a6;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,kS;if not TurnBurn and eS>0 then _,kS=bc.GetAutopilotBrakeDistanceAndTime(eS)else _,kS=bc.GetAutopilotTBBrakeDistanceAndTime(eS)end;local kT=0;local kU=0;if AutopilotCruising or not Autopilot and eS>5 then kU=b7.computeTravelTime(eS,0,AutopilotDistance)elseif a5+kQ<AutopilotDistance then kT=AutopilotDistance-(a5+kQ)kU=b7.computeTravelTime(8333.0556,0,kT)else local kV=(AutopilotDistance-a5)/kQ;kQ=AutopilotDistance-a5;kR=kR*kV end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return kU elseif AutopilotBraking then return kS elseif AutopilotCruising then return kU+kS else return kR+a6+kU end end;local function kW(hX,kX)if hX==nil then hX=core.g()end;hX=x(hX,5)if kX~=nil and kX or(aN==nil or aN~=hX)then local eV=core.getVelocity()local eS=vec3(eV):len()local kY=f(unit.getData()).maxBrake;if kY~=nil and kY>0 and aq then kY=kY/q(eS/100,0.1,1)kY=kY/ar;if ar>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+kY)/2 else LastMaxBrakeInAtmo=kY end end end;if kY~=nil and kY>0 then LastMaxBrake=kY end;aN=hX end end;kW(nil,true)if ar>0 and not WasInAtmo then if not bQ and AtmoSpeedAssist and(AltitudeHold or Reentry)then ce(1)J=false end end;if bP~=nil then if r:getTargetSpeed(axisCommandId.longitudinal)~=bP then ch(bP,TRUE)else bP=nil end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then kL()end;if AutopilotTargetName~=nil then local kZ=CustomTarget~=nil;local k_=LastMaxBrakeInAtmo/a9:getGravity(a9.center+vec3(0,0,1)*a9.radius):len()t(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=kP()if kZ and not Autopilot then ag=(bK-CustomTarget.position):len()else ag=(AutopilotTargetCoords-bK):len()end;if not TurnBurn then a5,a6=bc.GetAutopilotBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a5,a6=bc.GetAutopilotTBBrakeDistanceAndTime(bH)a7,a8=bc.GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local hj=cl(ag)t(widgetDistanceText,'{"label": "distance", "value": "'..hj..'"}')t(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..cP(travelTime)..'", "unit":""}')hj=cl(a5)t(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..hj..'"}')t(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..cP(a6)..'", "unit":""}')hj=cl(a7)t(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..hj..'"}')t(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..cP(a8)..'", "unit":""}')t(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",k_/1000)..'", "unit":" Tons"}')hj=cl(AutopilotTargetOrbit)t(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..hj..'"}')if ar>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if ar==0 and WasInAtmo then if t(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then u(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if t(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then u(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if t(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then u(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if t(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then u(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if t(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then u(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else kO()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end;if bM>0 then system.setWaypoint(system.getWaypointFromPlayerPos())end elseif kK=="oneSecond"then local function l0(fw)local l1=0;aE=""local l2=aR;local l3=0;local l4=0;local l5=0;local fV=0;local fW=""local l6=core.getElementHitPointsById;for cY in pairs(at)do local kc=0;local l7=0;l7=h(at[cY])kc=l6(at[cY])l3=l3+kc;if kc<l7 then if kc==0 then l5=l5+1 else l4=l4+1 end;if aS and#aB==0 then position=vec3(core.getElementPositionById(at[cY]))local c9=position.x-B;local ca=position.y-B;local l8=position.z-B;table.insert(aB,core.spawnArrowSticker(c9,ca,l8+1,"down"))table.insert(aB,core.spawnArrowSticker(c9,ca,l8+1,"down"))core.rotateSticker(aB[2],0,0,90)table.insert(aB,core.spawnArrowSticker(c9+1,ca,l8,"north"))table.insert(aB,core.spawnArrowSticker(c9+1,ca,l8,"north"))core.rotateSticker(aB[4],90,90,0)table.insert(aB,core.spawnArrowSticker(c9-1,ca,l8,"south"))table.insert(aB,core.spawnArrowSticker(c9-1,ca,l8,"south"))core.rotateSticker(aB[6],90,-90,0)table.insert(aB,core.spawnArrowSticker(c9,ca-1,l8,"east"))table.insert(aB,core.spawnArrowSticker(c9,ca-1,l8,"east"))core.rotateSticker(aB[8],90,0,90)table.insert(aB,core.spawnArrowSticker(c9,ca+1,l8,"west"))table.insert(aB,core.spawnArrowSticker(c9,ca+1,l8,"west"))core.rotateSticker(aB[10],-90,0,90)table.insert(aB,at[cY])end elseif aS and#aB>0 and aB[11]==at[cY]then for fO in pairs(aB)do core.deleteSticker(aB[fO])end;aB={}end end;l1=d(l3/l2*100)if l1<100 then fw[#fw+1]=c8(0,0,"","pbright txt")fV=d(l1*2.55)fW=e("rgb(%d,%d,%d)",255-fV,fV,0)if l1<100 then fw[#fw+1]=c8("50%",1035,"Elemental Integrity: "..l1 .."%","txtbig txtmid","fill:"..fW)if l5>0 then fw[#fw+1]=c8("50%",1055,"Disabled Modules: "..l5 .." Damaged Modules: "..l4,"txtbig txtmid","fill:"..fW)elseif l4>0 then fw[#fw+1]=c8("50%",1055,"Damaged Modules: "..l4,"txtbig txtmid","fill:"..fW)end end end end;local function l9()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then s(WeaponPanelID)WeaponPanelID=nil end end end;local function la()local fT=p()local h7=bH;local lb=fT-au;if h7>1.38889 then h7=h7/1000;local lc=h7*(fT-au)TotalDistanceTravelled=TotalDistanceTravelled+lc;aa=aa+lc end;ab=ab+lb;TotalFlightTime=TotalFlightTime+lb;au=fT end;local function ld()if safeMass>0 then if av>safeMass+50 then bM=d(av-safeMass)safeMass=-1 elseif av<safeMass then safeMass=av end elseif safeMass==-1 then safeMass=-2 else safeMass=-1 end end;ao=false;if IntruderAlertSystem then ld()end;la()ba.UpdateRadar()l9()local fw={}ba.ExtraData(fw)if ShowOdometer then fw=ba.DrawOdometer(fw,aa,TotalDistanceTravelled,ab)end;if ShouldCheckDamage then l0(fw)end;ai=table.concat(fw,"")collectgarbage("collect")elseif kK=="fiveSecond"then ap=dbHud_1.getStringValue("SPBAutopilotTargetName")if ap~=nil and ap~=""and ap~="SatNavNotChanged"then local cH=f(dbHud_1.getStringValue("SavedLocations"))if cH~=nil then _G["SavedLocations"]=cH;local cx=-1;local cy;for cY,cZ in pairs(SavedLocations)do if cZ.name and cZ.name=="SatNav Location"then cx=cY;break end end;if cx~=-1 then cy=SavedLocations[cx]cx=-1;for cY,cZ in pairs(b1[0])do if cZ.name and cZ.name=="SatNav Location"then cx=cY;break end end;if cx>-1 then b1[0][cx]=cy end;bb.UpdateAtlasLocationsList()Z=cy.name.." position updated"end end;for i=1,#bW do if bW[i].name==ap then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..bW[i].name)bb.UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif kK=="msgTick"then local fw={}ba.DisplayMessage(fw,"empty")Z="empty"unit.stopTimer("msgTick")af=3 elseif kK=="animateTick"then be=true;bd=false;ad=0;ae=0;unit.stopTimer("animateTick")elseif kK=="hudTick"then local function le(fw)local lf=d(q(ag/(aJ/4)*255,0,255))fw[#fw+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ad,ae,d(C+0.5)+lf,d(E+0.5)-lf,d(D+0.5)-lf)end;local function lg()for _,cZ in pairs(aG)do if cZ.hovered then if not cZ.drawCondition or cZ.drawCondition()then cZ.toggleFunction()end;cZ.hovered=false end end end;local function lh()local function li(lj,lk,c9,ca,kj,kk)if lj>c9 and lj<c9+kj and lk>ca and lk<ca+kk then return true else return false end end;local c9=ad+aJ/2;local ca=ae+aK/2;for _,cZ in pairs(aG)do cZ.hovered=li(c9,ca,cZ.x,cZ.y,cZ.width,cZ.height)end end;local function ll(fw)local function lm(fw,ln,hover,c9,ca,eL,lo,lp,lq,lr,ls)if type(lr)=="function"then lr=lr()end;if type(ls)=="function"then ls=ls()end;fw[#fw+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c9,ca,eL,lo)if ln then fw[#fw+1]=e("%s'",lp)else fw[#fw+1]=lq end;if hover then fw[#fw+1]=" style='stroke:white; stroke-width:2'"else fw[#fw+1]=" style='stroke:black; stroke-width:1'"end;fw[#fw+1]="></rect>"fw[#fw+1]=e("<text x='%f' y='%f' font-size='24' fill='",c9+eL/2,ca+lo/2+5)if ln then fw[#fw+1]="black"else fw[#fw+1]="white"end;fw[#fw+1]="' text-anchor='middle' font-family='Montserrat'>"if ln then fw[#fw+1]=e("%s</text>",lr)else fw[#fw+1]=e("%s</text>",ls)end end;local lt="rgb(50,50,50)'"local lu="rgb(210,200,200)"local lv=lm;for _,cZ in pairs(aG)do local ki=cZ.disableName;local kh=cZ.enableName;if type(ki)=="function"then ki=ki()end;if type(kh)=="function"then kh=kh()end;if not cZ.drawCondition or cZ.drawCondition()then lv(fw,cZ.toggleVar(),cZ.hovered,cZ.x,cZ.y,cZ.width,cZ.height,lu,lt,ki,kh)end end end;local fw={}ba.HUDPrologue(fw)if showHud then ba.UpdateHud(fw)else if AlwaysVSpd then ba.DrawVerticalSpeed(fw,as)end;ba.DisplayOrbitScreen(fw)ba.DrawWarnings(fw)end;if bT and bU~={}then ba.DrawSettings(fw)end;ba.HUDEpilogue(fw)fw[#fw+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],aJ,aK)if Z~="empty"then ba.DisplayMessage(fw,Z)end;if l()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then ba.DrawDeadZone(fw)end end;if w()==0 then if l()==1 and Y then lh()ll(fw)if not bd and not be then local lw=table.concat(fw,"")fw={}fw[#fw+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fw[#fw+1]=lw;fw[#fw+1]="</body>"bd=true;fw[#fw+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(fw,"")system.setScreen(content)elseif be then local lw=table.concat(fw,"")fw={}fw[#fw+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",aJ,aK)fw[#fw+1]=lw;fw[#fw+1]="</body>"end;if not bd then fw[#fw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end else lg()end else if not Y and l()==0 then lg()if ag>DeadZone then if DisplayDeadZone then le(fw)end end else lh()ll(fw)end;fw[#fw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],K,L,ad,ae)end;fw[#fw+1]=[[</svg></body>]]content=table.concat(fw,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif kK=="apTick"then bc.APTick()end end;function script.onFlush()local function lx(ly,jq)local lz=vec3()local lA=vec3()if ly==axisCommandId.longitudinal then lz=vec3(core.getConstructOrientationForward())lA=bE elseif ly==axisCommandId.vertical then lz=vec3(core.getConstructOrientationUp())lA=bD elseif ly==axisCommandId.lateral then lz=vec3(core.getConstructOrientationRight())lA=bF else return vec3()end;local lB=vec3(core.getWorldGravity())local lC=lB:dot(lA)local lD=vec3(core.getWorldAirFrictionAcceleration())local lE=lD:dot(lA)local lF=vec3(core.getVelocity())local lG=lF:dot(lz)local lH=jq*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(lH-lG)local lI=targetSpeedPID2:get()local lJ=(lI-lE-lC)*lA;return lJ end;local function lK(ly,jq)local lz=vec3()local lA=vec3()if ly==axisCommandId.longitudinal then lz=vec3(core.getConstructOrientationForward())lA=bE elseif ly==axisCommandId.vertical then lz=vec3(core.getConstructOrientationUp())lA=bD elseif ly==axisCommandId.lateral then lz=vec3(core.getConstructOrientationRight())lA=bF else return vec3()end;local lB=vec3(core.getWorldGravity())local lC=lB:dot(lA)local lD=vec3(core.getWorldAirFrictionAcceleration())local lE=lD:dot(lA)local lF=vec3(core.getVelocity())local lG=lF:dot(lz)local lH=jq*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(lH-lG)local lI=targetSpeedPID:get()local lJ=(lI-lE-lC)*lA;return lJ end;local function lL(lM,f_,ie)local lN=lM:cross(ie):normalize_inplace()local gL=math.acos(q(lN:dot(-f_),-1,1))*constants.rad2deg;if lN:cross(-f_):dot(ie)<0 then gL=-gL end;return gL end;if antigrav and not ExternalAGG then if not bO and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;bQ=r:getAxisCommandType(0)==axisCommandType.byThrottle;if bQ and J then ce(0)J=false elseif not bQ and not J then F=0;J=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local lO=q(Q+R+system.getControlDeviceForwardInput(),-1,1)local lP=q(T+W+system.getControlDeviceYawInput(),-1,1)local lQ=q(U+S-system.getControlDeviceLeftRightInput(),-1,1)local lR=V;bI=vec3(core.getWorldVertical())if bI==nil or bI:len()==0 then bI=(planet.center-bK):normalize()end;bK=vec3(core.getConstructWorldPos())bD=vec3(core.getConstructWorldOrientationUp())bE=vec3(core.getConstructWorldOrientationForward())bF=vec3(core.getConstructWorldOrientationRight())bG=vec3(core.getWorldVelocity())av=core.getConstructMass()bH=vec3(bG):len()bJ=-bI:dot(bG)bS=getRoll(bI,bE,bF)local lS=bS/180*math.pi;local lT=math.cos(lS)local lU=math.sin(lS)bR=lL(bI,bE,bF*lT+bD*lU)local lV=bG:normalize()local lW=c(bS)local lX=utils.sign(bS)local lY=vec3(core.getWorldAngularVelocity())local lZ=lO*pitchSpeedFactor*bF+lP*rollSpeedFactor*bE+lQ*yawSpeedFactor*bD;if bf==true and bI:len()>0.01 then local l_=c(bj-bS)if((ProgradeIsOn or Reentry or ak or AltitudeHold or IntoOrbit)and l_>0 or ar>0.0 and l_<autoRollRollThreshold and autoRollPreference)and lP==0 and c(bR)<85 then local m0=bj;local m1=autoRollFactor;if ar==0 then m1=m1/4;bj=0;m0=0 end;if rollPID==nil then rollPID=pid.new(m1*0.01,0,m1*0.1)end;rollPID:inject(m0-bS)local m2=rollPID:get()lZ=lZ+m2*bE end end;if bI:len()>0.01 and ar>0.0 then local m3=20.0;if turnAssist==true and lW>m3 and lO==0 and lQ==0 then local m4=turnAssistFactor*0.1;local m5=turnAssistFactor*0.025;local m6=(lW-m3)/(180-m3)*180;local m7=0;if m6<90 then m7=m6/90 elseif m6<180 then m7=(180-m6)/90 end;m7=m7*m7;local m8=-lX*m5*(1.0-m7)local m9=m4*m7;lZ=lZ+m9*bF+m8*bD end end;local ma=1;local mb=0;local mc=1;if system.getMouseWheel()>0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local md=F;F=x(q(F+speedChangeLarge/100,-1,1),2)if F>=0 and md<0 then F=0;aw=false end end elseif system.getMouseWheel()<0 then if AltIsOn then if ar>0 or Reentry then bm=q(bm-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=q(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end elseif aw then local md=F;F=x(q(F-speedChangeLarge/100,-1,1),2)if F<=0 and md>0 then F=0;aw=false end end else aw=true end;G=0;if aq and AtmoSpeedAssist and bQ then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bm/3.6-bG:dot(bE))local me=throttlePID:get()I=q(me,-1,1)if I<F and ar>0.005 then H=true;r:setThrottleCommand(axisCommandId.longitudinal,q(I,0.01,1))else H=false;r:setThrottleCommand(axisCommandId.longitudinal,F)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-bm/3.6)local mf=q(brakePID:get(),0,1)if ar>0 and bJ<-80 or ar>0.005 then G=mf end;if G>0 then if H and I==0.01 then r:setThrottleCommand(axisCommandId.longitudinal,0)end else I=q(I,0.01,1)end;local mg=''local mh=vec3()local mi=lx(axisCommandId.vertical,ac*1000)a:setEngineForceCommand("vertical airfoil , vertical ground ",mi,mb)local mj='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mj=mj..ExtraLongitudeTags end;local mk=r:getAxisCommandType(axisCommandId.longitudinal)local ml=r:composeAxisAccelerationFromThrottle(mj,axisCommandId.longitudinal)local mm=lK(axisCommandId.lateral,LeftAmount*1000)mg=mg..' , '.."lateral airfoil , lateral ground "mh=mh+mm;if mh:len()>constants.epsilon then a:setEngineForceCommand(mg,mh,mb,'','','',mc)end;a:setEngineForceCommand(mj,ml,ma)local mn='thrust analog vertical fueled 'local mo='thrust analog lateral fueled 'if ExtraLateralTags~="none"then mo=mo..ExtraLateralTags end;if ExtraVerticalTags~="none"then mn=mn..ExtraVerticalTags end;if ac~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mn,mi,ma)else a:setEngineForceCommand(mn,vec3(),ma)end;if LeftAmount~=0 then a:setEngineForceCommand(mo,mm,ma)else a:setEngineForceCommand(mo,vec3(),ma)end;if lR==0 then lR=G end;local mp=-lR*(brakeSpeedFactor*bG+brakeFlatFactor*lV)a:setEngineForceCommand('brake',mp)else if AtmoSpeedAssist then r:setThrottleCommand(axisCommandId.longitudinal,F)end;local jq=unit.getAxisCommandValue(0)if not bQ then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(bG:len()-jq/3.6)local mf=q(brakePID:get(),0,1)lR=q(lR+mf,0,1)end;local mp=-lR*(brakeSpeedFactor*bG+brakeFlatFactor*lV)a:setEngineForceCommand('brake',mp)local mg=''local mh=vec3()local mq=false;local mj='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then mj=mj..ExtraLongitudeTags end;local mk=r:getAxisCommandType(axisCommandId.longitudinal)if mk==axisCommandType.byThrottle then local ml=r:composeAxisAccelerationFromThrottle(mj,axisCommandId.longitudinal)a:setEngineForceCommand(mj,ml,ma)elseif mk==axisCommandType.byTargetSpeed then local ml=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)mg=mg..' , '..mj;mh=mh+ml;if r:getTargetSpeed(axisCommandId.longitudinal)==0 or r:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-r:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then mq=true end end;local mo='thrust analog lateral 'if ExtraLateralTags~="none"then mo=mo..ExtraLateralTags end;local mr=r:getAxisCommandType(axisCommandId.lateral)if mr==axisCommandType.byThrottle then local ms=r:composeAxisAccelerationFromThrottle(mo,axisCommandId.lateral)a:setEngineForceCommand(mo,ms,ma)elseif mr==axisCommandType.byTargetSpeed then local mm=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)mg=mg..' , '..mo;mh=mh+mm end;local mn='thrust analog vertical 'if ExtraVerticalTags~="none"then mn=mn..ExtraVerticalTags end;local mt=r:getAxisCommandType(axisCommandId.vertical)if mt==axisCommandType.byThrottle then local mi=r:composeAxisAccelerationFromThrottle(mn,axisCommandId.vertical)if ac~=0 or BrakeLanding and BrakeIsOn then a:setEngineForceCommand(mn,mi,ma,'airfoil','ground','',mc)else a:setEngineForceCommand(mn,vec3(),ma)a:setEngineForceCommand('airfoil vertical',mi,ma,'airfoil','','',mc)a:setEngineForceCommand('ground vertical',mi,ma,'ground','','',mc)end elseif mt==axisCommandType.byTargetSpeed then if ac<0 then a:setEngineForceCommand('hover',vec3(),ma)end;local mu=r:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)mg=mg..' , '..mn;mh=mh+mu end;if mh:len()>constants.epsilon then if V~=0 or mq or c(lV:dot(bE))<0.8 then mg=mg..', brake'end;a:setEngineForceCommand(mg,mh,mb,'','','',mc)end end;local mv=torqueFactor*(lZ-lY)local mw=vec3(core.getWorldAirFrictionAngularAcceleration())mv=mv-mw;a:setEngineTorqueCommand('torque',mv,ma,'airfoil','','',mc)a:setBoosterCommand('rocket_engine')if a4 and not VanillaRockets then local eS=vec3(core.getVelocity()):len()local mx=0.15;if not bQ then local my=r:getTargetSpeed(axisCommandId.longitudinal)if eS*3.6>my*(1-mx)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS*3.6<my*(1-mx)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jj=unit.getThrottle()if AtmoSpeedAssist then jj=F*100 end;local jq=jj/100;if j==0 then jq=jq*MaxGameVelocity;if eS>=jq*(1-mx)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS<jq*(1-mx)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end else local jw=d(bm)jq=jq*jw/3.6;if eS>=jq*(1-mx)and IsRocketOn then IsRocketOn=false;a:toggleBoosters()elseif eS<jq*(1-mx)and not IsRocketOn then IsRocketOn=true;a:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,cH=coroutine.resume(beginSetup)if cH then SetupComplete=true end else a:update()if not bd and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(mz)local A=1;local function mA(mB)if mB then A=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a1;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end else AntigravTargetAltitude=desiredBaseAltitude+A*100 end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a0;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a0 end else r:updateTargetGroundAltitudeFromActionStart(A*1.0)end end;local function mC(mB)if mB then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeLarge/100,-1,1)else r:updateCommandFromActionStart(axisCommandId.longitudinal,A*speedChangeLarge)end else if mB then A=1 else A=nil end;bb.adjustAutopilotTargetIndex(A)end end;if mz=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;ce(0)if vBooster or hover then if aq and an==-1 then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bf=true;GearExtended=false elseif aq then BrakeIsOn=true;a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)else a.control.extendLandingGears()r:setTargetGroundAltitude(LandingGearGroundHeight)end end;if P and not BrakeLanding and not(vBooster or hover)then a.control.extendLandingGears()end else if P then a.control.retractLandingGears()end;r:setTargetGroundAltitude(TargetHoverHeight)end elseif mz=="light"then if a.control.isAnyHeadlightSwitchedOn()==1 then a.control.switchOffHeadlights()else a.control.switchOnHeadlights()end elseif mz=="forward"then Q=Q-1 elseif mz=="backward"then Q=Q+1 elseif mz=="left"then T=T-1 elseif mz=="right"then T=T+1 elseif mz=="yawright"then U=U-1 elseif mz=="yawleft"then U=U+1 elseif mz=="straferight"then r:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif mz=="strafeleft"then r:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif mz=="up"then ac=ac+1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif mz=="down"then ac=ac-1;r:deactivateGroundEngineAltitudeStabilization()r:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif mz=="groundaltitudeup"then mA()elseif mz=="groundaltitudedown"then mA(true)elseif mz=="option1"then bb.adjustAutopilotTargetIndex()toggleView=false elseif mz=="option2"then bb.adjustAutopilotTargetIndex(1)toggleView=false elseif mz=="option3"then local function mD()aF=not aF;if not aF then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end else unit.hide()core.hide()if fuelPanelID~=nil then s(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then s(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then s(rocketfuelPanelID)rocketfuelPanelID=nil end end end;if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;mD()toggleView=false elseif mz=="option4"then cs()toggleView=false elseif mz=="option5"then local function mE()if LockPitch==nil then LockPitch=bR;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;mE()toggleView=false elseif mz=="option6"then cq()toggleView=false elseif mz=="option7"then if bY==nil then bY=vec3(bG)else bY=nil end;toggleView=false elseif mz=="option8"then cr()toggleView=false elseif mz=="option9"then if gyro~=nil then gyro.toggle()ax=gyro.getState()==1 end;toggleView=false elseif mz=="lshift"then if w()==1 then Y=true;PrevViewLock=w()v(1)elseif l()==1 and ShiftShowsRemoteButtons then Y=true;be=false;bd=false end elseif mz=="brake"then if BrakeToggleStatus then cA()elseif not BrakeIsOn then cA()else BrakeIsOn=true end elseif mz=="lalt"then toggleView=true;AltIsOn=true;if l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(1)end elseif mz=="booster"then if VanillaRockets then a:toggleBoosters()elseif not a4 then if not IsRocketOn then a:toggleBoosters()IsRocketOn=true end;a4=true else if IsRocketOn then a:toggleBoosters()IsRocketOn=false end;a4=false end elseif mz=="stopengines"then local function mF()if ao then ao=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;X=false;M=false;ak=false;al=false;O=false;bf=autoRollPreference;VectorToTarget=false;TurnBurn=false;ax=false;LockPitch=nil;IntoOrbit=false else ao=true end end;r:resetCommand(axisCommandId.longitudinal)mF()F=0 elseif mz=="speedup"then mC()elseif mz=="speeddown"then mC(true)elseif mz=="antigravity"and not ExternalAGG then if antigrav~=nil then cO()end end end;function script.onActionStop(mz)local function mG()if not ExternalAGG and bO then a3=a1 end;if AltitudeHold or VertTakeOff or IntoOrbit then a2=a0 end end;if mz=="forward"then Q=0 elseif mz=="backward"then Q=0 elseif mz=="left"then T=0 elseif mz=="right"then T=0 elseif mz=="yawright"then U=0 elseif mz=="yawleft"then U=0 elseif mz=="straferight"then r:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif mz=="strafeleft"then r:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif mz=="up"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,-1.0)r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mz=="down"then ac=0;r:updateCommandFromActionStop(axisCommandId.vertical,1.0)r:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)a:setEngineForceCommand('hover',vec3(),1)elseif mz=="groundaltitudeup"then mG()toggleView=false elseif mz=="groundaltitudedown"then mG()toggleView=false elseif mz=="lshift"then if w()==1 then Y=false;ad=0;ae=0;v(PrevViewLock)elseif l()==1 and ShiftShowsRemoteButtons then Y=false;be=false;bd=false end elseif mz=="brake"then if not BrakeToggleStatus then if BrakeIsOn then cA()else BrakeIsOn=false end end elseif mz=="lalt"then if l()==0 and freeLookToggle then if toggleView then if w()==1 then v(0)else v(1)end else toggleView=true end elseif l()==0 and not freeLookToggle and userControlScheme=="keyboard"then v(0)end;AltIsOn=false end end;function script.onActionLoop(mz)local A=1;local function mH(mB)if mB then A=-1 end;if not ExternalAGG and bO then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+A*a3;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then HoldAltitude=AntigravTargetAltitude end;a3=a3*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+A*100;BrakeIsOn=false end elseif AltitudeHold or VertTakeOff or IntoOrbit then if IntoOrbit then bv=bv+A*a2;if bv<planet.noAtmosphericDensityAltitude then bv=planet.noAtmosphericDensityAltitude end else HoldAltitude=HoldAltitude+A*a2 end;a2=a2*1.05 else r:updateTargetGroundAltitudeFromActionLoop(A*1.0)end end;local function mI(mB)if mB then A=-1 end;if not Y then if AtmoSpeedAssist and not AltIsOn then F=q(F+A*speedChangeSmall/100,-1,1)else r:updateCommandFromActionLoop(axisCommandId.longitudinal,A*speedChangeSmall)end end end;if mz=="groundaltitudeup"then mH()elseif mz=="groundaltitudedown"then mH(true)elseif mz=="speedup"then mI()elseif mz=="speeddown"then mI(true)end end;function script.onInputText(cb)local function mJ()for cY,cZ in pairs(c1())do dbHud_1.setStringValue(cZ,g(nil))end;for cY,cZ in pairs(b)do if cZ~="SavedLocations"then dbHud_1.setStringValue(cZ,g(nil))end end;Z="Databank wiped except Save Locations. New variables will save after re-enter seat and exit"af=5;aL=false end;local function mK(mL,planet,eW,gH)local function mM(eW)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dq,dr,dy,dz,dA=n(eW,dd)if dq=="0"and dr=="0"then return vec3(tonumber(dy),tonumber(dz),tonumber(dA))end;dz=math.rad(dz)dy=math.rad(dy)local planet=b1[tonumber(dq)][tonumber(dr)]local em=math.cos(dy)local mN=vec3(em*math.cos(dz),em*math.sin(dz),math.sin(dy))return planet.center+(planet.radius+dA)*mN end;if dbHud_1 or gH then local cy={}local position=mM(eW)if planet.name=="Space"then cy={position=position,name=mL,atmosphere=0,planetname=planet.name,gravity=planet.gravity}else cy={position=position,name=mL,atmosphere=planet.atmosphericDensityAboveSurface,planetname=planet.name,gravity=planet.gravity}end;if not gH then SavedLocations[#SavedLocations+1]=cy else for cY,cZ in pairs(b1[0])do if cZ.name and mL==cZ.name then table.remove(b1[0],cY)end end end;table.insert(b1[0],cy)bb.UpdateAtlasLocationsList()else Z="Databank must be installed to save permanent locations"end end;local i;local mO,mP=nil,nil;local mQ="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all variables updatable by /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation SafeZoneCenter ::pos{0,0,13771471,7435803,-128971} - adds a saved location by waypoint, not as accurate as making one at location\n".."/::pos{0,0,13771471,7435803,-128971} - adds a temporary waypoint that is not saved to databank with name 0Temp\n".."/copydatabank - copies dbHud databank to a blank databank\n".."/iphWP - displays current IPH target's ::pos waypoint in lua chat"i=string.find(cb," ")mO=cb;if i~=nil then mO=string.sub(cb,0,i-1)mP=string.sub(cb,i+1)end;if mO=="/help"or mO=="/commands"then for i2 in string.gmatch(mQ,"([^\n]+)")do system.print(i2)end;return elseif mO=="/setname"then if mP==nil or mP==""then Z="Usage: ah-setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then cv(mP)else Z="Select a saved target to rename first"end elseif mO=="/addlocation"or string.find(cb,"::pos")~=nil then local gH=false;local mL="0-Temp"if mP==nil or mP==""then mP=mO;gH=true end;i=string.find(mP,"::")if not gH then mL=string.sub(mP,1,i-2)end;local eW=string.sub(mP,i)local y=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dd='::pos{'..y..','..y..','..y..','..y..','..y..'}'local dq,dr,dy,dz,dA=n(eW,dd)local planet=b1[tonumber(dq)][tonumber(dr)]mK(mL,planet,eW,gH)Z="Added "..mL.." to saved locations,\nplanet "..planet.name.." at "..eW;af=5 elseif mO=="/agg"then if mP==nil or mP==""then Z="Usage: /agg targetheight"return end;mP=tonumber(mP)if mP<1000 then mP=1000 end;AntigravTargetAltitude=mP;Z="AGG Target Height set to "..mP elseif mO=="/G"then if mP==nil or mP==""then Z="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if mP=="dump"then for cY,cZ in pairs(c1())do if type(_G[cZ])=="boolean"then if _G[cZ]==true then system.print(cZ.." true")else system.print(cZ.." false")end elseif _G[cZ]==nil then system.print(cZ.." nil")else system.print(cZ.." ".._G[cZ])end end;return end;i=string.find(mP," ")local mR=string.sub(mP,0,i-1)local mS=string.sub(mP,i+1)for cY,cZ in pairs(c1())do if cZ==mR then Z="Variable "..mR.." changed to "..mS;local mT=type(_G[cZ])if mT=="number"then mS=tonumber(mS)elseif mT=="boolean"then if string.lower(mS)=="true"then mS=true else mS=false end end;_G[cZ]=mS;return end end;Z="No such global variable: "..mR elseif mO=="/copydatabank"then if dbHud_2 then cU(true)else Z="Spare Databank required to copy databank"end elseif mO=="/iphWP"then if AutopilotTargetIndex>0 then system.print(bc.showWayPoint(a9,AutopilotTargetCoords,true))Z="::pos waypoint shown in lua chat"else Z="No target selected in IPH"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
